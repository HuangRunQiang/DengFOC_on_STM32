
closedloop_speed_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800cb28  0800cb28  0001cb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cde0  0800cde0  00020214  2**0
                  CONTENTS
  4 .ARM          00000000  0800cde0  0800cde0  00020214  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cde0  0800cde0  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde0  0800cde0  0001cde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde4  0800cde4  0001cde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800cde8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001468  20000214  0800cffc  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000167c  0800cffc  0002167c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f06  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003895  00000000  00000000  00034186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00037a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0f  00000000  00000000  00038cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2c4  00000000  00000000  00039ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017119  00000000  00000000  00054d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f7ab  00000000  00000000  0006bea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000056d8  00000000  00000000  000fb650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00100d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000214 	.word	0x20000214
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb0c 	.word	0x0800cb0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000218 	.word	0x20000218
 800014c:	0800cb0c 	.word	0x0800cb0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f001 fca8 	bl	8002b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 ff58 	bl	8005070 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f004 fa47 	bl	8005656 <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f001 fc93 	bl	8002b00 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f001 fc89 	bl	8002b00 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f004 f879 	bl	80052f6 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f004 fa25 	bl	8005656 <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f001 fc71 	bl	8002b00 <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <LowPassFilter_operator>:
 *
 *  Created on: Jun 18, 2023
 *      Author: hht
 */
#include "lowpass_filter.h"
float LowPassFilter_operator(float x, struct LowPassFilter* filter){
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	float dt=5E-3f;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <LowPassFilter_operator+0x70>)
 8001248:	617b      	str	r3, [r7, #20]
	float alpha = filter->Tf/(filter->Tf + dt);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681c      	ldr	r4, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6979      	ldr	r1, [r7, #20]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fc6d 	bl	8000b34 <__addsf3>
 800125a:	4603      	mov	r3, r0
 800125c:	4619      	mov	r1, r3
 800125e:	4620      	mov	r0, r4
 8001260:	f7ff fe24 	bl	8000eac <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
	float y = alpha*filter->y_prev + (1.0f - alpha)*x;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd68 	bl	8000d44 <__aeabi_fmul>
 8001274:	4603      	mov	r3, r0
 8001276:	461c      	mov	r4, r3
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800127e:	f7ff fc57 	bl	8000b30 <__aeabi_fsub>
 8001282:	4603      	mov	r3, r0
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd5c 	bl	8000d44 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fc4f 	bl	8000b34 <__addsf3>
 8001296:	4603      	mov	r3, r0
 8001298:	60fb      	str	r3, [r7, #12]
	filter->y_prev = y;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	605a      	str	r2, [r3, #4]
	return y;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	3ba3d70a 	.word	0x3ba3d70a

080012b0 <cal_angular_vel>:
struct LowPassFilter filter= {.Tf=0.01,.y_prev=0.0f}; //Tf=10ms
// limit=voltage_power_supply/2;
struct PIDController pid_controller = {.P=0.5,.I=0.1,.D=0.0,.output_ramp=100.0,.limit=6,.error_prev=0,.output_prev=0,.integral_prev=0};


float cal_angular_vel(float angle_now){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    if (angle_prev < 0){
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <cal_angular_vel+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fedd 	bl	8001080 <__aeabi_fcmplt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <cal_angular_vel+0x28>
    	angle_prev=angle_now;
 80012cc:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <cal_angular_vel+0xd8>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
    	return 0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e047      	b.n	8001368 <cal_angular_vel+0xb8>
    }
    float delta_angle=angle_now -angle_prev;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <cal_angular_vel+0xd8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fc26 	bl	8000b30 <__aeabi_fsub>
 80012e4:	4603      	mov	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]
    if (delta_angle >= 1.6*M_PI){
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	a320      	add	r3, pc, #128	; (adr r3, 8001370 <cal_angular_vel+0xc0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff fb76 	bl	80009e4 <__aeabi_dcmpge>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00f      	beq.n	800131e <cal_angular_vel+0x6e>
    	delta_angle-=2*M_PI;
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff f892 	bl	8000428 <__aeabi_f2d>
 8001304:	a31c      	add	r3, pc, #112	; (adr r3, 8001378 <cal_angular_vel+0xc8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7fe ff2d 	bl	8000168 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fbb7 	bl	8000a88 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	60fb      	str	r3, [r7, #12]
    }
    if (delta_angle <= -1.6*M_PI){
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff f882 	bl	8000428 <__aeabi_f2d>
 8001324:	a316      	add	r3, pc, #88	; (adr r3, 8001380 <cal_angular_vel+0xd0>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff fb51 	bl	80009d0 <__aeabi_dcmple>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00f      	beq.n	8001354 <cal_angular_vel+0xa4>
        	delta_angle+=2*M_PI;
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff f877 	bl	8000428 <__aeabi_f2d>
 800133a:	a30f      	add	r3, pc, #60	; (adr r3, 8001378 <cal_angular_vel+0xc8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7fe ff14 	bl	800016c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fb9c 	bl	8000a88 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
    }
    angle_prev=angle_now;
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <cal_angular_vel+0xd8>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
    return delta_angle/Ts;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <cal_angular_vel+0xdc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fda3 	bl	8000eac <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0


}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	769cf0e0 	.word	0x769cf0e0
 8001374:	40141b2f 	.word	0x40141b2f
 8001378:	54442d18 	.word	0x54442d18
 800137c:	401921fb 	.word	0x401921fb
 8001380:	769cf0e0 	.word	0x769cf0e0
 8001384:	c0141b2f 	.word	0xc0141b2f
 8001388:	20000018 	.word	0x20000018
 800138c:	20000014 	.word	0x20000014

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f001 f89b 	bl	80024d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f8b7 	bl	800150c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 fa4b 	bl	8001838 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013a2:	f000 f90d 	bl	80015c0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80013a6:	f009 f8cd 	bl	800a544 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80013aa:	f000 f941 	bl	8001630 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013ae:	f000 f9f7 	bl	80017a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	4847      	ldr	r0, [pc, #284]	; (80014d8 <main+0x148>)
 80013ba:	f001 fba1 	bl	8002b00 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013be:	2100      	movs	r1, #0
 80013c0:	4846      	ldr	r0, [pc, #280]	; (80014dc <main+0x14c>)
 80013c2:	f004 faf5 	bl	80059b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013c6:	2104      	movs	r1, #4
 80013c8:	4844      	ldr	r0, [pc, #272]	; (80014dc <main+0x14c>)
 80013ca:	f004 faf1 	bl	80059b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013ce:	2108      	movs	r1, #8
 80013d0:	4842      	ldr	r0, [pc, #264]	; (80014dc <main+0x14c>)
 80013d2:	f004 faed 	bl	80059b0 <HAL_TIM_PWM_Start>

  setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 80013d6:	4b42      	ldr	r3, [pc, #264]	; (80014e0 <main+0x150>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	4841      	ldr	r0, [pc, #260]	; (80014e4 <main+0x154>)
 80013de:	f000 fbeb 	bl	8001bb8 <_electricalAngle>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <main+0x158>)
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	4840      	ldr	r0, [pc, #256]	; (80014ec <main+0x15c>)
 80013ec:	f000 fd2c 	bl	8001e48 <setPhaseVoltage>
  HAL_Delay(3000);
 80013f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013f4:	f001 f8ce 	bl	8002594 <HAL_Delay>
  uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 80013f8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013fc:	2201      	movs	r2, #1
 80013fe:	4936      	ldr	r1, [pc, #216]	; (80014d8 <main+0x148>)
 8001400:	483b      	ldr	r0, [pc, #236]	; (80014f0 <main+0x160>)
 8001402:	f7ff fea9 	bl	8001158 <read>
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  zero_electric_angle=_electricalAngle(M_PI*read_raw/MAX_ANGLE_VALUE,pole_pairs);
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fff9 	bl	8000404 <__aeabi_i2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <main+0x140>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f85e 	bl	80004d8 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <main+0x164>)
 800142a:	f7ff f97f 	bl	800072c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb27 	bl	8000a88 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <main+0x150>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f000 fbb8 	bl	8001bb8 <_electricalAngle>
 8001448:	4603      	mov	r3, r0
 800144a:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <main+0x168>)
 800144c:	6013      	str	r3, [r2, #0]
  setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <main+0x150>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4823      	ldr	r0, [pc, #140]	; (80014e4 <main+0x154>)
 8001456:	f000 fbaf 	bl	8001bb8 <_electricalAngle>
 800145a:	4602      	mov	r2, r0
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <main+0x158>)
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f000 fcef 	bl	8001e48 <setPhaseVoltage>
  sprintf(data, "zero_electric_angle: %i \n", (int) floor(zero_electric_angle/M_PI*180));
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <main+0x168>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ffda 	bl	8000428 <__aeabi_f2d>
 8001474:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <main+0x140>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f957 	bl	800072c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <main+0x16c>)
 800148c:	f7ff f824 	bl	80004d8 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f00a fa7a 	bl	800b990 <floor>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fac8 	bl	8000a38 <__aeabi_d2iz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4914      	ldr	r1, [pc, #80]	; (8001500 <main+0x170>)
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <main+0x174>)
 80014b0:	f009 fce4 	bl	800ae7c <siprintf>
  CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <main+0x174>)
 80014b6:	f7fe fe4b 	bl	8000150 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <main+0x174>)
 80014c2:	f009 f8fd 	bl	800a6c0 <CDC_Transmit_FS>
  HAL_TIM_Base_Start_IT(&htim2);
 80014c6:	4810      	ldr	r0, [pc, #64]	; (8001508 <main+0x178>)
 80014c8:	f004 f9c8 	bl	800585c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x13c>
 80014ce:	bf00      	nop
 80014d0:	54442d18 	.word	0x54442d18
 80014d4:	400921fb 	.word	0x400921fb
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	20000288 	.word	0x20000288
 80014e0:	20000010 	.word	0x20000010
 80014e4:	4096cbe4 	.word	0x4096cbe4
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40400000 	.word	0x40400000
 80014f0:	20000230 	.word	0x20000230
 80014f4:	40c00000 	.word	0x40c00000
 80014f8:	2000034c 	.word	0x2000034c
 80014fc:	40668000 	.word	0x40668000
 8001500:	0800cb28 	.word	0x0800cb28
 8001504:	20000318 	.word	0x20000318
 8001508:	200002d0 	.word	0x200002d0

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f009 fcce 	bl	800aebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	4618      	mov	r0, r3
 8001564:	f003 f86c 	bl	8004640 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800156e:	f000 fae5 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fad8 	bl	8004b44 <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800159a:	f000 facf 	bl	8001b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800159e:	2310      	movs	r3, #16
 80015a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fc27 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015b4:	f000 fac2 	bl	8001b3c <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_SPI1_Init+0x68>)
 80015c6:	4a19      	ldr	r2, [pc, #100]	; (800162c <MX_SPI1_Init+0x6c>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_SPI1_Init+0x68>)
 80015cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_SPI1_Init+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_SPI1_Init+0x68>)
 80015da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI1_Init+0x68>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_SPI1_Init+0x68>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI1_Init+0x68>)
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI1_Init+0x68>)
 80015f6:	2220      	movs	r2, #32
 80015f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_SPI1_Init+0x68>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI1_Init+0x68>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_SPI1_Init+0x68>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI1_Init+0x68>)
 800160e:	220a      	movs	r2, #10
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_SPI1_Init+0x68>)
 8001614:	f003 fca8 	bl	8004f68 <HAL_SPI_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800161e:	f000 fa8d 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000230 	.word	0x20000230
 800162c:	40013000 	.word	0x40013000

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2220      	movs	r2, #32
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f009 fc27 	bl	800aebc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <MX_TIM1_Init+0x168>)
 8001670:	4a4a      	ldr	r2, [pc, #296]	; (800179c <MX_TIM1_Init+0x16c>)
 8001672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001674:	4b48      	ldr	r3, [pc, #288]	; (8001798 <MX_TIM1_Init+0x168>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <MX_TIM1_Init+0x168>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <MX_TIM1_Init+0x168>)
 8001682:	f640 125f 	movw	r2, #2399	; 0x95f
 8001686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <MX_TIM1_Init+0x168>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <MX_TIM1_Init+0x168>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <MX_TIM1_Init+0x168>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169a:	483f      	ldr	r0, [pc, #252]	; (8001798 <MX_TIM1_Init+0x168>)
 800169c:	f004 f88e 	bl	80057bc <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016a6:	f000 fa49 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b4:	4619      	mov	r1, r3
 80016b6:	4838      	ldr	r0, [pc, #224]	; (8001798 <MX_TIM1_Init+0x168>)
 80016b8:	f004 fbe6 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016c2:	f000 fa3b 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c6:	4834      	ldr	r0, [pc, #208]	; (8001798 <MX_TIM1_Init+0x168>)
 80016c8:	f004 f91a 	bl	8005900 <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016d2:	f000 fa33 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e2:	4619      	mov	r1, r3
 80016e4:	482c      	ldr	r0, [pc, #176]	; (8001798 <MX_TIM1_Init+0x168>)
 80016e6:	f004 ff5f 	bl	80065a8 <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016f0:	f000 fa24 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f4:	2360      	movs	r3, #96	; 0x60
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	481f      	ldr	r0, [pc, #124]	; (8001798 <MX_TIM1_Init+0x168>)
 800171a:	f004 faf3 	bl	8005d04 <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001724:	f000 fa0a 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2204      	movs	r2, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4819      	ldr	r0, [pc, #100]	; (8001798 <MX_TIM1_Init+0x168>)
 8001732:	f004 fae7 	bl	8005d04 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800173c:	f000 f9fe 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2208      	movs	r2, #8
 8001746:	4619      	mov	r1, r3
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_TIM1_Init+0x168>)
 800174a:	f004 fadb 	bl	8005d04 <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001754:	f000 f9f2 	bl	8001b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM1_Init+0x168>)
 800177c:	f004 ff72 	bl	8006664 <HAL_TIMEx_ConfigBreakDeadTime>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001786:	f000 f9d9 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM1_Init+0x168>)
 800178c:	f000 fdce 	bl	800232c <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3758      	adds	r7, #88	; 0x58
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000288 	.word	0x20000288
 800179c:	40012c00 	.word	0x40012c00

080017a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM2_Init+0x94>)
 80017be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_TIM2_Init+0x94>)
 80017c6:	2259      	movs	r2, #89	; 0x59
 80017c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM2_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM2_Init+0x94>)
 80017d2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80017d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_TIM2_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_TIM2_Init+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_TIM2_Init+0x94>)
 80017e6:	f003 ffe9 	bl	80057bc <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017f0:	f000 f9a4 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM2_Init+0x94>)
 8001802:	f004 fb41 	bl	8005e88 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 f996 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM2_Init+0x94>)
 800181e:	f004 fec3 	bl	80065a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 f988 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002d0 	.word	0x200002d0

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_GPIO_Init+0xf8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a37      	ldr	r2, [pc, #220]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <MX_GPIO_Init+0xf8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <MX_GPIO_Init+0xf8>)
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <MX_GPIO_Init+0xf8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <MX_GPIO_Init+0xf8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <MX_GPIO_Init+0xf8>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_GPIO_Init+0xf8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	4820      	ldr	r0, [pc, #128]	; (8001934 <MX_GPIO_Init+0xfc>)
 80018b4:	f001 f924 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2101      	movs	r1, #1
 80018bc:	481e      	ldr	r0, [pc, #120]	; (8001938 <MX_GPIO_Init+0x100>)
 80018be:	f001 f91f 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_GPIO_Init+0x100>)
 80018ca:	f001 f919 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0xfc>)
 80018e8:	f000 ff86 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_GPIO_Init+0x100>)
 8001904:	f000 ff78 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_GPIO_Init+0x100>)
 8001922:	f000 ff69 	bl	80027f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40011000 	.word	0x40011000
 8001938:	40010c00 	.word	0x40010c00
 800193c:	00000000 	.word	0x00000000

08001940 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a6d      	ldr	r2, [pc, #436]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	f040 80ce 	bne.w	8001aee <HAL_TIM_PeriodElapsedCallback+0x1ae>
  {



    index1+=1;
 8001952:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800195a:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 800195c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001960:	2201      	movs	r2, #1
 8001962:	4969      	ldr	r1, [pc, #420]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001964:	4869      	ldr	r0, [pc, #420]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001966:	f7ff fbf7 	bl	8001158 <read>
 800196a:	4603      	mov	r3, r0
 800196c:	83fb      	strh	r3, [r7, #30]
    float angle_now=(float)read_raw /(float)MAX_ANGLE_VALUE *2*M_PI*dir;
 800196e:	8bfb      	ldrh	r3, [r7, #30]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f98f 	bl	8000c94 <__aeabi_ui2f>
 8001976:	4603      	mov	r3, r0
 8001978:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa95 	bl	8000eac <__aeabi_fdiv>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f8d4 	bl	8000b34 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd4a 	bl	8000428 <__aeabi_f2d>
 8001994:	a358      	add	r3, pc, #352	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fd9d 	bl	80004d8 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd2a 	bl	8000404 <__aeabi_i2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fd8e 	bl	80004d8 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f860 	bl	8000a88 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	61bb      	str	r3, [r7, #24]
//    sprintf(data, "angle_error : %i \n", (int) floor(angle_error/M_PI*180));
//       CDC_Transmit_FS((uint8_t*) data, strlen(data));
    //    open loop speed control
//        velocityOpenloop(5,5.5,TIM1);
//    closed loop speed control
    float angular_vel=cal_angular_vel(angle_now);
 80019cc:	69b8      	ldr	r0, [r7, #24]
 80019ce:	f7ff fc6f 	bl	80012b0 <cal_angular_vel>
 80019d2:	6178      	str	r0, [r7, #20]
    float filtered_vel=LowPassFilter_operator(angular_vel,&filter);
 80019d4:	494f      	ldr	r1, [pc, #316]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff fc30 	bl	800123c <LowPassFilter_operator>
 80019dc:	6138      	str	r0, [r7, #16]
    float contorller_out=PID_operator(target_vel-filtered_vel,&pid_controller);
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f8a3 	bl	8000b30 <__aeabi_fsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	494b      	ldr	r1, [pc, #300]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fb12 	bl	8002018 <PID_operator>
 80019f4:	60f8      	str	r0, [r7, #12]
    setPhaseVoltage(_constrain(contorller_out,-voltage_power_supply/2,voltage_power_supply/2),  0, _electricalAngle(angle_now, pole_pairs),TIM1);
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fa52 	bl	8000eac <__aeabi_fdiv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff fb37 	bl	8001080 <__aeabi_fcmplt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fa41 	bl	8000eac <__aeabi_fdiv>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	e019      	b.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x124>
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fa37 	bl	8000eac <__aeabi_fdiv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4619      	mov	r1, r3
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff fb3a 	bl	80010bc <__aeabi_fcmpgt>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0x122>
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fa28 	bl	8000eac <__aeabi_fdiv>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461c      	mov	r4, r3
 8001a60:	e000      	b.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x124>
 8001a62:	68fc      	ldr	r4, [r7, #12]
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	69b8      	ldr	r0, [r7, #24]
 8001a6c:	f000 f8a4 	bl	8001bb8 <_electricalAngle>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 f9e5 	bl	8001e48 <setPhaseVoltage>
//    sprintf(data, "angle_now : %i \t angle_prev : %i \n", (int) floor(angle_now/M_PI*180), (int) floor(angle_prev/M_PI*180));
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
    sprintf(data, "angular_vel : %i \n", (int) floor(angular_vel/M_PI*180));
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7fe fcd2 	bl	8000428 <__aeabi_f2d>
 8001a84:	a31c      	add	r3, pc, #112	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fe4f 	bl	800072c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a9c:	f7fe fd1c 	bl	80004d8 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f009 ff72 	bl	800b990 <floor>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7fe ffc0 	bl	8000a38 <__aeabi_d2iz>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	491c      	ldr	r1, [pc, #112]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ac0:	f009 f9dc 	bl	800ae7c <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001ac4:	481b      	ldr	r0, [pc, #108]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ac6:	f7fe fb43 	bl	8000150 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4818      	ldr	r0, [pc, #96]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ad2:	f008 fdf5 	bl	800a6c0 <CDC_Transmit_FS>





    if (index1 == 200){
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2bc8      	cmp	r3, #200	; 0xc8
 8001adc:	d107      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x1ae>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ae4:	f001 f824 	bl	8002b30 <HAL_GPIO_TogglePin>
    	index1=0;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	54442d18 	.word	0x54442d18
 8001afc:	400921fb 	.word	0x400921fb
 8001b00:	200002d0 	.word	0x200002d0
 8001b04:	20000350 	.word	0x20000350
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	20000230 	.word	0x20000230
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000020 	.word	0x20000020
 8001b18:	2000001c 	.word	0x2000001c
 8001b1c:	20000028 	.word	0x20000028
 8001b20:	20000004 	.word	0x20000004
 8001b24:	20000010 	.word	0x20000010
 8001b28:	40012c00 	.word	0x40012c00
 8001b2c:	40668000 	.word	0x40668000
 8001b30:	0800cb44 	.word	0x0800cb44
 8001b34:	20000318 	.word	0x20000318
 8001b38:	40011000 	.word	0x40011000

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_normalizeAngle>:
extern float shaft_angle;
extern int dir;
extern float voltage_limit;
extern float voltage_power_supply;
extern int period;
float _normalizeAngle(float angle){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fc69 	bl	8000428 <__aeabi_f2d>
 8001b56:	a316      	add	r3, pc, #88	; (adr r3, 8001bb0 <_normalizeAngle+0x68>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f009 fe64 	bl	800b828 <fmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff8e 	bl	8000a88 <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff fa97 	bl	80010a8 <__aeabi_fcmpge>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <_normalizeAngle+0x3c>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	e00e      	b.n	8001ba2 <_normalizeAngle+0x5a>
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7fe fc4f 	bl	8000428 <__aeabi_f2d>
 8001b8a:	a309      	add	r3, pc, #36	; (adr r3, 8001bb0 <_normalizeAngle+0x68>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe faec 	bl	800016c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff74 	bl	8000a88 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w
 8001bb0:	54442d18 	.word	0x54442d18
 8001bb4:	401921fb 	.word	0x401921fb

08001bb8 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  return _normalizeAngle(((float)(dir * pole_pairs)*shaft_angle)-zero_electric_angle);
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <_electricalAngle+0x48>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f865 	bl	8000c9c <__aeabi_i2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f8b4 	bl	8000d44 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_electricalAngle+0x4c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7fe ffa2 	bl	8000b30 <__aeabi_fsub>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffaa 	bl	8001b48 <_normalizeAngle>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	2000034c 	.word	0x2000034c

08001c08 <setPwm>:





void setPwm(float Ua, float Ub, float Uc, TIM_TypeDef * TIM_BASE) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fa30 	bl	8001080 <__aeabi_fcmplt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <setPwm+0x24>
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e00c      	b.n	8001c46 <setPwm+0x3e>
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <setPwm+0x234>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fa42 	bl	80010bc <__aeabi_fcmpgt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <setPwm+0x3c>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <setPwm+0x234>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	e000      	b.n	8001c46 <setPwm+0x3e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	68b8      	ldr	r0, [r7, #8]
 8001c4e:	f7ff fa17 	bl	8001080 <__aeabi_fcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <setPwm+0x56>
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e00c      	b.n	8001c78 <setPwm+0x70>
 8001c5e:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <setPwm+0x234>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff fa29 	bl	80010bc <__aeabi_fcmpgt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <setPwm+0x6e>
 8001c70:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <setPwm+0x234>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e000      	b.n	8001c78 <setPwm+0x70>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff f9fe 	bl	8001080 <__aeabi_fcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <setPwm+0x88>
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e00c      	b.n	8001caa <setPwm+0xa2>
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <setPwm+0x234>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fa10 	bl	80010bc <__aeabi_fcmpgt>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <setPwm+0xa0>
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <setPwm+0x234>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e000      	b.n	8001caa <setPwm+0xa2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	float dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <setPwm+0x238>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff f8fa 	bl	8000eac <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9de 	bl	8001080 <__aeabi_fcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <setPwm+0xc8>
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e018      	b.n	8001d02 <setPwm+0xfa>
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <setPwm+0x238>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff f8e8 	bl	8000eac <__aeabi_fdiv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f9ea 	bl	80010bc <__aeabi_fcmpgt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <setPwm+0xec>
 8001cee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cf2:	e006      	b.n	8001d02 <setPwm+0xfa>
 8001cf4:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <setPwm+0x238>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff f8d6 	bl	8000eac <__aeabi_fdiv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	61fb      	str	r3, [r7, #28]
	float dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <setPwm+0x238>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f7ff f8ce 	bl	8000eac <__aeabi_fdiv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9b2 	bl	8001080 <__aeabi_fcmplt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <setPwm+0x120>
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e018      	b.n	8001d5a <setPwm+0x152>
 8001d28:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <setPwm+0x238>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68b8      	ldr	r0, [r7, #8]
 8001d30:	f7ff f8bc 	bl	8000eac <__aeabi_fdiv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f9be 	bl	80010bc <__aeabi_fcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <setPwm+0x144>
 8001d46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d4a:	e006      	b.n	8001d5a <setPwm+0x152>
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <setPwm+0x238>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f7ff f8aa 	bl	8000eac <__aeabi_fdiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]
	float dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <setPwm+0x238>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff f8a2 	bl	8000eac <__aeabi_fdiv>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f986 	bl	8001080 <__aeabi_fcmplt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <setPwm+0x178>
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e018      	b.n	8001db2 <setPwm+0x1aa>
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <setPwm+0x238>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f890 	bl	8000eac <__aeabi_fdiv>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f992 	bl	80010bc <__aeabi_fcmpgt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <setPwm+0x19c>
 8001d9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001da2:	e006      	b.n	8001db2 <setPwm+0x1aa>
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <setPwm+0x238>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff f87e 	bl	8000eac <__aeabi_fdiv>
 8001db0:	4603      	mov	r3, r0
 8001db2:	617b      	str	r3, [r7, #20]

	//写入PWM到PWM 0 1 2 通道
	TIM_BASE->CCR1 = (uint32_t) roundf(dc_a*period);
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <setPwm+0x23c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff6f 	bl	8000c9c <__aeabi_i2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	69f9      	ldr	r1, [r7, #28]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ffbe 	bl	8000d44 <__aeabi_fmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 fd08 	bl	800b7e0 <roundf>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f97c 	bl	80010d0 <__aeabi_f2uiz>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_BASE->CCR2 = (uint32_t) roundf(dc_b*period);
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <setPwm+0x23c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff5a 	bl	8000c9c <__aeabi_i2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ffa9 	bl	8000d44 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 fcf3 	bl	800b7e0 <roundf>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f967 	bl	80010d0 <__aeabi_f2uiz>
 8001e02:	4602      	mov	r2, r0
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_BASE->CCR3 = (uint32_t) roundf(dc_c*period);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <setPwm+0x23c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe ff45 	bl	8000c9c <__aeabi_i2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ff94 	bl	8000d44 <__aeabi_fmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f009 fcde 	bl	800b7e0 <roundf>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f952 	bl	80010d0 <__aeabi_f2uiz>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004
 8001e44:	20000008 	.word	0x20000008

08001e48 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el, TIM_TypeDef * TIM_BASE) {
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 8001e56:	4b6e      	ldr	r3, [pc, #440]	; (8002010 <setPhaseVoltage+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fe69 	bl	8000b34 <__addsf3>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe6f 	bl	8001b48 <_normalizeAngle>
 8001e6a:	6078      	str	r0, [r7, #4]
  // 帕克逆变换
  float Ualpha =  -Uq*sin(angle_el);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fad8 	bl	8000428 <__aeabi_f2d>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7fe fad3 	bl	8000428 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f009 fd3b 	bl	800b904 <sin>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	f7fe fb1f 	bl	80004d8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fdf1 	bl	8000a88 <__aeabi_d2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  float Ubeta =   Uq*cos(angle_el);
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7fe fabc 	bl	8000428 <__aeabi_f2d>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fab7 	bl	8000428 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f009 fcd9 	bl	800b878 <cos>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4620      	mov	r0, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	f7fe fb03 	bl	80004d8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fdd5 	bl	8000a88 <__aeabi_d2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	623b      	str	r3, [r7, #32]

  // 克拉克逆变换
  float Ua = Ualpha + voltage_power_supply/2;
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <setPhaseVoltage+0x1cc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ffde 	bl	8000eac <__aeabi_fdiv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ef6:	f7fe fe1d 	bl	8000b34 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	61fb      	str	r3, [r7, #28]
  float Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 8001efe:	6a38      	ldr	r0, [r7, #32]
 8001f00:	f7fe fa92 	bl	8000428 <__aeabi_f2d>
 8001f04:	a340      	add	r3, pc, #256	; (adr r3, 8002008 <setPhaseVoltage+0x1c0>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fae5 	bl	80004d8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4614      	mov	r4, r2
 8001f14:	461d      	mov	r5, r3
 8001f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f18:	f7fe fa86 	bl	8000428 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe f920 	bl	8000168 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f38:	f7fe fbf8 	bl	800072c <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4b33      	ldr	r3, [pc, #204]	; (8002014 <setPhaseVoltage+0x1cc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe ffad 	bl	8000eac <__aeabi_fdiv>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fa67 	bl	8000428 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe f903 	bl	800016c <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fd8b 	bl	8000a88 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]
  float Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa53 	bl	8000428 <__aeabi_f2d>
 8001f82:	4604      	mov	r4, r0
 8001f84:	460d      	mov	r5, r1
 8001f86:	6a38      	ldr	r0, [r7, #32]
 8001f88:	f7fe fa4e 	bl	8000428 <__aeabi_f2d>
 8001f8c:	a31e      	add	r3, pc, #120	; (adr r3, 8002008 <setPhaseVoltage+0x1c0>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe faa1 	bl	80004d8 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	f7fe f8e3 	bl	8000168 <__aeabi_dsub>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb2:	f7fe fbbb 	bl	800072c <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <setPhaseVoltage+0x1cc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ff70 	bl	8000eac <__aeabi_fdiv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa2a 	bl	8000428 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe f8c6 	bl	800016c <__adddf3>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd4e 	bl	8000a88 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	617b      	str	r3, [r7, #20]
  setPwm(Ua,Ub,Uc,TIM_BASE);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	69b9      	ldr	r1, [r7, #24]
 8001ff6:	69f8      	ldr	r0, [r7, #28]
 8001ff8:	f7ff fe06 	bl	8001c08 <setPwm>
}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bdb0      	pop	{r4, r5, r7, pc}
 8002004:	f3af 8000 	nop.w
 8002008:	e8584caa 	.word	0xe8584caa
 800200c:	3ffbb67a 	.word	0x3ffbb67a
 8002010:	2000034c 	.word	0x2000034c
 8002014:	20000004 	.word	0x20000004

08002018 <PID_operator>:
 *      Author: hht
 */

#include "pid.h"
#include "motor_control.h"
float PID_operator(float error, struct PIDController* pid){
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	float Ts = 5E-3f;
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <PID_operator+0x1c8>)
 8002024:	61bb      	str	r3, [r7, #24]
	// P环

	float proportional = pid->P * error;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fe89 	bl	8000d44 <__aeabi_fmul>
 8002032:	4603      	mov	r3, r0
 8002034:	617b      	str	r3, [r7, #20]
	// Tustin 散点积分（I环）
	float integral = pid->integral_prev + pid->I*Ts*0.5f*(error + pid->error_prev);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	69dc      	ldr	r4, [r3, #28]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fe7f 	bl	8000d44 <__aeabi_fmul>
 8002046:	4603      	mov	r3, r0
 8002048:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fe79 	bl	8000d44 <__aeabi_fmul>
 8002052:	4603      	mov	r3, r0
 8002054:	461d      	mov	r5, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fd69 	bl	8000b34 <__addsf3>
 8002062:	4603      	mov	r3, r0
 8002064:	4619      	mov	r1, r3
 8002066:	4628      	mov	r0, r5
 8002068:	f7fe fe6c 	bl	8000d44 <__aeabi_fmul>
 800206c:	4603      	mov	r3, r0
 800206e:	4619      	mov	r1, r3
 8002070:	4620      	mov	r0, r4
 8002072:	f7fe fd5f 	bl	8000b34 <__addsf3>
 8002076:	4603      	mov	r3, r0
 8002078:	613b      	str	r3, [r7, #16]
	integral = _constrain(integral, -pid->limit, pid->limit);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002082:	4619      	mov	r1, r3
 8002084:	6938      	ldr	r0, [r7, #16]
 8002086:	f7fe fffb 	bl	8001080 <__aeabi_fcmplt>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <PID_operator+0x82>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002098:	e00c      	b.n	80020b4 <PID_operator+0x9c>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	4619      	mov	r1, r3
 80020a0:	6938      	ldr	r0, [r7, #16]
 80020a2:	f7ff f80b 	bl	80010bc <__aeabi_fcmpgt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <PID_operator+0x9a>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	e000      	b.n	80020b4 <PID_operator+0x9c>
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	613b      	str	r3, [r7, #16]
	// D环（微分环节）
	float derivative = pid->D*(error - pid->error_prev)/Ts;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689c      	ldr	r4, [r3, #8]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fd35 	bl	8000b30 <__aeabi_fsub>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4619      	mov	r1, r3
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe fe3a 	bl	8000d44 <__aeabi_fmul>
 80020d0:	4603      	mov	r3, r0
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fee9 	bl	8000eac <__aeabi_fdiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	60fb      	str	r3, [r7, #12]

	// 将P,I,D三环的计算值加起来
	float output = proportional + integral + derivative;
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7fe fd27 	bl	8000b34 <__addsf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fd22 	bl	8000b34 <__addsf3>
 80020f0:	4603      	mov	r3, r0
 80020f2:	61fb      	str	r3, [r7, #28]
	output = _constrain(output, -pid->limit, pid->limit);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020fc:	4619      	mov	r1, r3
 80020fe:	69f8      	ldr	r0, [r7, #28]
 8002100:	f7fe ffbe 	bl	8001080 <__aeabi_fcmplt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <PID_operator+0xfc>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002112:	e00c      	b.n	800212e <PID_operator+0x116>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4619      	mov	r1, r3
 800211a:	69f8      	ldr	r0, [r7, #28]
 800211c:	f7fe ffce 	bl	80010bc <__aeabi_fcmpgt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <PID_operator+0x114>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	e000      	b.n	800212e <PID_operator+0x116>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	61fb      	str	r3, [r7, #28]

	if(pid->output_ramp > 0){
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe ffbf 	bl	80010bc <__aeabi_fcmpgt>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03f      	beq.n	80021c4 <PID_operator+0x1ac>
		// 对PID的变化速率进行限制
		float output_rate = (output - pid->output_prev)/Ts;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4619      	mov	r1, r3
 800214a:	69f8      	ldr	r0, [r7, #28]
 800214c:	f7fe fcf0 	bl	8000b30 <__aeabi_fsub>
 8002150:	4603      	mov	r3, r0
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fea9 	bl	8000eac <__aeabi_fdiv>
 800215a:	4603      	mov	r3, r0
 800215c:	60bb      	str	r3, [r7, #8]
		if (output_rate > pid->output_ramp)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4619      	mov	r1, r3
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f7fe ffa9 	bl	80010bc <__aeabi_fcmpgt>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00f      	beq.n	8002190 <PID_operator+0x178>
			output = pid->output_prev + pid->output_ramp*Ts;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	699c      	ldr	r4, [r3, #24]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	69b9      	ldr	r1, [r7, #24]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fde2 	bl	8000d44 <__aeabi_fmul>
 8002180:	4603      	mov	r3, r0
 8002182:	4619      	mov	r1, r3
 8002184:	4620      	mov	r0, r4
 8002186:	f7fe fcd5 	bl	8000b34 <__addsf3>
 800218a:	4603      	mov	r3, r0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e019      	b.n	80021c4 <PID_operator+0x1ac>
		else if (output_rate < -pid->output_ramp)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002198:	4619      	mov	r1, r3
 800219a:	68b8      	ldr	r0, [r7, #8]
 800219c:	f7fe ff70 	bl	8001080 <__aeabi_fcmplt>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00e      	beq.n	80021c4 <PID_operator+0x1ac>
			output = pid->output_prev - pid->output_ramp*Ts;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	699c      	ldr	r4, [r3, #24]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fdc7 	bl	8000d44 <__aeabi_fmul>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7fe fcb8 	bl	8000b30 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	61fb      	str	r3, [r7, #28]
	}
	// 保存值（为了下一次循环）
	pid->integral_prev = integral;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	61da      	str	r2, [r3, #28]
	pid->output_prev = output;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	619a      	str	r2, [r3, #24]
	pid->error_prev = error;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	615a      	str	r2, [r3, #20]
//	pid->timestamp_prev = timestamp_now;
	return output;
 80021d6:	69fb      	ldr	r3, [r7, #28]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdb0      	pop	{r4, r5, r7, pc}
 80021e0:	3ba3d70a 	.word	0x3ba3d70a

080021e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_MspInit+0x40>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_MspInit+0x40>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_MspInit+0x40>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_MspInit+0x40>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_MspInit+0x40>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_MspInit+0x40>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d12f      	bne.n	80022a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800224e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002278:	23a0      	movs	r3, #160	; 0xa0
 800227a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	4619      	mov	r1, r3
 800228a:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_SPI_MspInit+0x90>)
 800228c:	f000 fab4 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002290:	2340      	movs	r3, #64	; 0x40
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_SPI_MspInit+0x90>)
 80022a4:	f000 faa8 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013000 	.word	0x40013000
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010800 	.word	0x40010800

080022bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_Base_MspInit+0x68>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10c      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d8:	6193      	str	r3, [r2, #24]
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022e6:	e018      	b.n	800231a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d113      	bne.n	800231a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	201c      	movs	r0, #28
 8002310:	f000 fa3b 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002314:	201c      	movs	r0, #28
 8002316:	f000 fa54 	bl	80027c2 <HAL_NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_TIM_MspPostInit+0x5c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d118      	bne.n	800237e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_TIM_MspPostInit+0x60>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_TIM_MspPostInit+0x60>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_TIM_MspPostInit+0x60>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002364:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2302      	movs	r3, #2
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_MspPostInit+0x64>)
 800237a:	f000 fa3d 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40021000 	.word	0x40021000
 8002390:	40010800 	.word	0x40010800

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023da:	f000 f8bf 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80023ea:	f000 fcdf 	bl	8002dac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20001024 	.word	0x20001024

080023f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <TIM2_IRQHandler+0x10>)
 80023fe:	f003 fb79 	bl	8005af4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200002d0 	.word	0x200002d0

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f008 fd46 	bl	800aecc <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20005000 	.word	0x20005000
 800246c:	00000400 	.word	0x00000400
 8002470:	20000354 	.word	0x20000354
 8002474:	20001680 	.word	0x20001680

08002478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002486:	490d      	ldr	r1, [pc, #52]	; (80024bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024aa:	f7ff ffe5 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ae:	f008 fd13 	bl	800aed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024b2:	f7fe ff6d 	bl	8001390 <main>
  bx lr
 80024b6:	4770      	bx	lr
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80024c0:	0800cde8 	.word	0x0800cde8
  ldr r2, =_sbss
 80024c4:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80024c8:	2000167c 	.word	0x2000167c

080024cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC1_2_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_Init+0x28>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_Init+0x28>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f947 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fe7a 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f95f 	bl	80027de <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002538:	f000 f927 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000048 	.word	0x20000048
 8002554:	20000050 	.word	0x20000050
 8002558:	2000004c 	.word	0x2000004c

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_IncTick+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_IncTick+0x20>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000050 	.word	0x20000050
 800257c:	20000358 	.word	0x20000358

08002580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_GetTick+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	20000358 	.word	0x20000358

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fff0 	bl	8002580 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ac:	d005      	beq.n	80025ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_Delay+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ba:	bf00      	nop
 80025bc:	f7ff ffe0 	bl	8002580 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8f7      	bhi.n	80025bc <HAL_Delay+0x28>
  {
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000050 	.word	0x20000050

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4906      	ldr	r1, [pc, #24]	; (8002674 <__NVIC_EnableIRQ+0x34>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002754:	f7ff ff90 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff2d 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff42 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff90 	bl	80026cc <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5f 	bl	8002678 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff35 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b08b      	sub	sp, #44	; 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280a:	e169      	b.n	8002ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800280c:	2201      	movs	r2, #1
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 8158 	bne.w	8002ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a9a      	ldr	r2, [pc, #616]	; (8002a98 <HAL_GPIO_Init+0x2a0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d05e      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002834:	4a98      	ldr	r2, [pc, #608]	; (8002a98 <HAL_GPIO_Init+0x2a0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d875      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800283a:	4a98      	ldr	r2, [pc, #608]	; (8002a9c <HAL_GPIO_Init+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d058      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002840:	4a96      	ldr	r2, [pc, #600]	; (8002a9c <HAL_GPIO_Init+0x2a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d86f      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002846:	4a96      	ldr	r2, [pc, #600]	; (8002aa0 <HAL_GPIO_Init+0x2a8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d052      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 800284c:	4a94      	ldr	r2, [pc, #592]	; (8002aa0 <HAL_GPIO_Init+0x2a8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d869      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002852:	4a94      	ldr	r2, [pc, #592]	; (8002aa4 <HAL_GPIO_Init+0x2ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04c      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002858:	4a92      	ldr	r2, [pc, #584]	; (8002aa4 <HAL_GPIO_Init+0x2ac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d863      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800285e:	4a92      	ldr	r2, [pc, #584]	; (8002aa8 <HAL_GPIO_Init+0x2b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d046      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002864:	4a90      	ldr	r2, [pc, #576]	; (8002aa8 <HAL_GPIO_Init+0x2b0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d85d      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800286a:	2b12      	cmp	r3, #18
 800286c:	d82a      	bhi.n	80028c4 <HAL_GPIO_Init+0xcc>
 800286e:	2b12      	cmp	r3, #18
 8002870:	d859      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_GPIO_Init+0x80>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	080028f3 	.word	0x080028f3
 800287c:	080028cd 	.word	0x080028cd
 8002880:	080028df 	.word	0x080028df
 8002884:	08002921 	.word	0x08002921
 8002888:	08002927 	.word	0x08002927
 800288c:	08002927 	.word	0x08002927
 8002890:	08002927 	.word	0x08002927
 8002894:	08002927 	.word	0x08002927
 8002898:	08002927 	.word	0x08002927
 800289c:	08002927 	.word	0x08002927
 80028a0:	08002927 	.word	0x08002927
 80028a4:	08002927 	.word	0x08002927
 80028a8:	08002927 	.word	0x08002927
 80028ac:	08002927 	.word	0x08002927
 80028b0:	08002927 	.word	0x08002927
 80028b4:	08002927 	.word	0x08002927
 80028b8:	08002927 	.word	0x08002927
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	4a79      	ldr	r2, [pc, #484]	; (8002aac <HAL_GPIO_Init+0x2b4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ca:	e02c      	b.n	8002926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	623b      	str	r3, [r7, #32]
          break;
 80028d2:	e029      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	3304      	adds	r3, #4
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e024      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	3308      	adds	r3, #8
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e01f      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	330c      	adds	r3, #12
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e01a      	b.n	8002928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028fa:	2304      	movs	r3, #4
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e013      	b.n	8002928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002908:	2308      	movs	r3, #8
 800290a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	611a      	str	r2, [r3, #16]
          break;
 8002912:	e009      	b.n	8002928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	615a      	str	r2, [r3, #20]
          break;
 800291e:	e003      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002920:	2300      	movs	r3, #0
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x130>
          break;
 8002926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	d801      	bhi.n	8002932 <HAL_GPIO_Init+0x13a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	e001      	b.n	8002936 <HAL_GPIO_Init+0x13e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2bff      	cmp	r3, #255	; 0xff
 800293c:	d802      	bhi.n	8002944 <HAL_GPIO_Init+0x14c>
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x152>
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3b08      	subs	r3, #8
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	210f      	movs	r1, #15
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80b1 	beq.w	8002ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_GPIO_Init+0x2b8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a4c      	ldr	r2, [pc, #304]	; (8002ab0 <HAL_GPIO_Init+0x2b8>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_GPIO_Init+0x2bc>)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <HAL_GPIO_Init+0x2c0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1ec>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <HAL_GPIO_Init+0x2c4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1e8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3e      	ldr	r2, [pc, #248]	; (8002ac0 <HAL_GPIO_Init+0x2c8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_GPIO_Init+0x2cc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1e0>
 80029d4:	2303      	movs	r3, #3
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029d8:	2304      	movs	r3, #4
 80029da:	e004      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029dc:	2302      	movs	r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e4:	2300      	movs	r3, #0
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029f6:	492f      	ldr	r1, [pc, #188]	; (8002ab4 <HAL_GPIO_Init+0x2bc>)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a10:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	492c      	ldr	r1, [pc, #176]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4928      	ldr	r1, [pc, #160]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	60cb      	str	r3, [r1, #12]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	491e      	ldr	r1, [pc, #120]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	604b      	str	r3, [r1, #4]
 8002a6c:	e006      	b.n	8002a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4914      	ldr	r1, [pc, #80]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d021      	beq.n	8002acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
 8002a94:	e021      	b.n	8002ada <HAL_GPIO_Init+0x2e2>
 8002a96:	bf00      	nop
 8002a98:	10320000 	.word	0x10320000
 8002a9c:	10310000 	.word	0x10310000
 8002aa0:	10220000 	.word	0x10220000
 8002aa4:	10210000 	.word	0x10210000
 8002aa8:	10120000 	.word	0x10120000
 8002aac:	10110000 	.word	0x10110000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40010800 	.word	0x40010800
 8002abc:	40010c00 	.word	0x40010c00
 8002ac0:	40011000 	.word	0x40011000
 8002ac4:	40011400 	.word	0x40011400
 8002ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_GPIO_Init+0x304>)
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4909      	ldr	r1, [pc, #36]	; (8002afc <HAL_GPIO_Init+0x304>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	3301      	adds	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f47f ae8e 	bne.w	800280c <HAL_GPIO_Init+0x14>
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	372c      	adds	r7, #44	; 0x2c
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40010400 	.word	0x40010400

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43d9      	mvns	r1, r3
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	400b      	ands	r3, r1
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b64:	b08b      	sub	sp, #44	; 0x2c
 8002b66:	af06      	add	r7, sp, #24
 8002b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0f1      	b.n	8002d58 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f007 fecd 	bl	800a928 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fdeb 	bl	8006776 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	687e      	ldr	r6, [r7, #4]
 8002ba8:	466d      	mov	r5, sp
 8002baa:	f106 0410 	add.w	r4, r6, #16
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	602b      	str	r3, [r5, #0]
 8002bb6:	1d33      	adds	r3, r6, #4
 8002bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	f003 fdb5 	bl	800672a <USB_CoreInit>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0c2      	b.n	8002d58 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fde6 	bl	80067aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e040      	b.n	8002c66 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3303      	adds	r3, #3
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3338      	adds	r3, #56	; 0x38
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	440b      	add	r3, r1
 8002c46:	333c      	adds	r3, #60	; 0x3c
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c4c:	7bfa      	ldrb	r2, [r7, #15]
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	440b      	add	r3, r1
 8002c5a:	3340      	adds	r3, #64	; 0x40
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	3301      	adds	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d3b9      	bcc.n	8002be4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
 8002c74:	e044      	b.n	8002d00 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	6879      	ldr	r1, [r7, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ca0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ca2:	7bfa      	ldrb	r2, [r7, #15]
 8002ca4:	6879      	ldr	r1, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4413      	add	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	440b      	add	r3, r1
 8002cb0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cb8:	7bfa      	ldrb	r2, [r7, #15]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	440b      	add	r3, r1
 8002cc6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ce4:	7bfa      	ldrb	r2, [r7, #15]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	440b      	add	r3, r1
 8002cf2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d3b5      	bcc.n	8002c76 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	603b      	str	r3, [r7, #0]
 8002d10:	687e      	ldr	r6, [r7, #4]
 8002d12:	466d      	mov	r5, sp
 8002d14:	f106 0410 	add.w	r4, r6, #16
 8002d18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	602b      	str	r3, [r5, #0]
 8002d20:	1d33      	adds	r3, r6, #4
 8002d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d24:	6838      	ldr	r0, [r7, #0]
 8002d26:	f003 fd4c 	bl	80067c2 <USB_DevInit>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e00d      	b.n	8002d58 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f005 ffce 	bl	8008cf2 <USB_DevDisconnect>

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_PCD_Start+0x16>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e016      	b.n	8002da4 <HAL_PCD_Start+0x44>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 fce1 	bl	800674a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002d88:	2101      	movs	r1, #1
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f008 f83f 	bl	800ae0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 ffa2 	bl	8008cde <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b088      	sub	sp, #32
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f005 ffa4 	bl	8008d06 <USB_ReadInterrupts>
 8002dbe:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fb1b 	bl	8003406 <PCD_EP_ISR_Handler>

    return;
 8002dd0:	e119      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d013      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dee:	b292      	uxth	r2, r2
 8002df0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f007 fe12 	bl	800aa1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f905 	bl	800300c <HAL_PCD_SetAddress>

    return;
 8002e02:	e100      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002e04:	69bb      	ldr	r3, [r7, #24]
 8002e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00c      	beq.n	8002e28 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e20:	b292      	uxth	r2, r2
 8002e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e26:	e0ee      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00c      	beq.n	8002e4c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e44:	b292      	uxth	r2, r2
 8002e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002e4a:	e0dc      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d027      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0204 	bic.w	r2, r2, #4
 8002e68:	b292      	uxth	r2, r2
 8002e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0208 	bic.w	r2, r2, #8
 8002e80:	b292      	uxth	r2, r2
 8002e82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f007 fe02 	bl	800aa90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e9e:	b292      	uxth	r2, r2
 8002ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002ea4:	e0af      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8083 	beq.w	8002fb8 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	77fb      	strb	r3, [r7, #31]
 8002eb6:	e010      	b.n	8002eda <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	7ffb      	ldrb	r3, [r7, #31]
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	441a      	add	r2, r3
 8002ec4:	7ffb      	ldrb	r3, [r7, #31]
 8002ec6:	8812      	ldrh	r2, [r2, #0]
 8002ec8:	b292      	uxth	r2, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	3320      	adds	r3, #32
 8002ece:	443b      	add	r3, r7
 8002ed0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8002ed4:	7ffb      	ldrb	r3, [r7, #31]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	77fb      	strb	r3, [r7, #31]
 8002eda:	7ffb      	ldrb	r3, [r7, #31]
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d9eb      	bls.n	8002eb8 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	b292      	uxth	r2, r2
 8002ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f022 0201 	bic.w	r2, r2, #1
 8002f0a:	b292      	uxth	r2, r2
 8002f0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f10:	bf00      	nop
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0f6      	beq.n	8002f12 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f36:	b292      	uxth	r2, r2
 8002f38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e00f      	b.n	8002f62 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	7ffa      	ldrb	r2, [r7, #31]
 8002f4c:	0092      	lsls	r2, r2, #2
 8002f4e:	440a      	add	r2, r1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	3320      	adds	r3, #32
 8002f54:	443b      	add	r3, r7
 8002f56:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002f5a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002f5c:	7ffb      	ldrb	r3, [r7, #31]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
 8002f62:	7ffb      	ldrb	r3, [r7, #31]
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	d9ec      	bls.n	8002f42 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0208 	orr.w	r2, r2, #8
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	b292      	uxth	r2, r2
 8002f94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0204 	orr.w	r2, r2, #4
 8002faa:	b292      	uxth	r2, r2
 8002fac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f007 fd53 	bl	800aa5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fb6:	e026      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00f      	beq.n	8002fe2 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fca:	b29a      	uxth	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f007 fd11 	bl	800aa02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fe0:	e011      	b.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00c      	beq.n	8003006 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ff4:	b29a      	uxth	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ffe:	b292      	uxth	r2, r2
 8003000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003004:	bf00      	nop
  }
}
 8003006:	3720      	adds	r7, #32
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_PCD_SetAddress+0x1a>
 8003022:	2302      	movs	r3, #2
 8003024:	e013      	b.n	800304e <HAL_PCD_SetAddress+0x42>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f005 fe3a 	bl	8008cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	4608      	mov	r0, r1
 8003060:	4611      	mov	r1, r2
 8003062:	461a      	mov	r2, r3
 8003064:	4603      	mov	r3, r0
 8003066:	70fb      	strb	r3, [r7, #3]
 8003068:	460b      	mov	r3, r1
 800306a:	803b      	strh	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003074:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003078:	2b00      	cmp	r3, #0
 800307a:	da0e      	bge.n	800309a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00e      	b.n	80030b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 0207 	and.w	r2, r3, #7
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030c4:	883a      	ldrh	r2, [r7, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	78ba      	ldrb	r2, [r7, #2]
 80030ce:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80030d0:	78bb      	ldrb	r3, [r7, #2]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d102      	bne.n	80030dc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d101      	bne.n	80030ea <HAL_PCD_EP_Open+0x94>
 80030e6:	2302      	movs	r3, #2
 80030e8:	e00e      	b.n	8003108 <HAL_PCD_EP_Open+0xb2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68f9      	ldr	r1, [r7, #12]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fb83 	bl	8006804 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800311c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003120:	2b00      	cmp	r3, #0
 8003122:	da0e      	bge.n	8003142 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003124:	78fb      	ldrb	r3, [r7, #3]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	4613      	mov	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	4413      	add	r3, r2
 8003138:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	705a      	strb	r2, [r3, #1]
 8003140:	e00e      	b.n	8003160 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	f003 0207 	and.w	r2, r3, #7
 8003148:	4613      	mov	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4413      	add	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	b2da      	uxtb	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003172:	2b01      	cmp	r3, #1
 8003174:	d101      	bne.n	800317a <HAL_PCD_EP_Close+0x6a>
 8003176:	2302      	movs	r3, #2
 8003178:	e00e      	b.n	8003198 <HAL_PCD_EP_Close+0x88>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	4618      	mov	r0, r3
 800318a:	f003 fefb 	bl	8006f84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	460b      	mov	r3, r1
 80031ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b0:	7afb      	ldrb	r3, [r7, #11]
 80031b2:	f003 0207 	and.w	r2, r3, #7
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4413      	add	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	2200      	movs	r2, #0
 80031de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	7afb      	ldrb	r3, [r7, #11]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	b2da      	uxtb	r2, r3
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6979      	ldr	r1, [r7, #20]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f004 f8b2 	bl	800735c <USB_EPStartXfer>

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800320e:	78fb      	ldrb	r3, [r7, #3]
 8003210:	f003 0207 	and.w	r2, r3, #7
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	440b      	add	r3, r1
 8003220:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003224:	681b      	ldr	r3, [r3, #0]
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	460b      	mov	r3, r1
 800323e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	7afb      	ldrb	r3, [r7, #11]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2201      	movs	r2, #1
 800327a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800327c:	7afb      	ldrb	r3, [r7, #11]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	b2da      	uxtb	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6979      	ldr	r1, [r7, #20]
 800328e:	4618      	mov	r0, r3
 8003290:	f004 f864 	bl	800735c <USB_EPStartXfer>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 0207 	and.w	r2, r3, #7
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d901      	bls.n	80032bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e04c      	b.n	8003356 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da0e      	bge.n	80032e2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c4:	78fb      	ldrb	r3, [r7, #3]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	4613      	mov	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4413      	add	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2201      	movs	r2, #1
 80032de:	705a      	strb	r2, [r3, #1]
 80032e0:	e00c      	b.n	80032fc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4413      	add	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	b2da      	uxtb	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003314:	2b01      	cmp	r3, #1
 8003316:	d101      	bne.n	800331c <HAL_PCD_EP_SetStall+0x7e>
 8003318:	2302      	movs	r3, #2
 800331a:	e01c      	b.n	8003356 <HAL_PCD_EP_SetStall+0xb8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4618      	mov	r0, r3
 800332c:	f005 fbc7 	bl	8008abe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f005 fcec 	bl	8008d24 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3710      	adds	r7, #16
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	460b      	mov	r3, r1
 8003368:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800336a:	78fb      	ldrb	r3, [r7, #3]
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d901      	bls.n	800337c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e040      	b.n	80033fe <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800337c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003380:	2b00      	cmp	r3, #0
 8003382:	da0e      	bge.n	80033a2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	705a      	strb	r2, [r3, #1]
 80033a0:	e00e      	b.n	80033c0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 0207 	and.w	r2, r3, #7
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_PCD_EP_ClrStall+0x82>
 80033dc:	2302      	movs	r3, #2
 80033de:	e00e      	b.n	80033fe <HAL_PCD_EP_ClrStall+0xa0>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68f9      	ldr	r1, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 fbb5 	bl	8008b5e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b096      	sub	sp, #88	; 0x58
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800340e:	e3bf      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003418:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800341c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003420:	b2db      	uxtb	r3, r3
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800342a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 8179 	bne.w	8003726 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003434:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d152      	bne.n	80034e6 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	b29b      	uxth	r3, r3
 8003448:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800344c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003450:	81fb      	strh	r3, [r7, #14]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	89fb      	ldrh	r3, [r7, #14]
 8003458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800345c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003460:	b29b      	uxth	r3, r3
 8003462:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3328      	adds	r3, #40	; 0x28
 8003468:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003472:	b29b      	uxth	r3, r3
 8003474:	461a      	mov	r2, r3
 8003476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	3302      	adds	r3, #2
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6812      	ldr	r2, [r2, #0]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003494:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	441a      	add	r2, r3
 80034a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034a4:	2100      	movs	r1, #0
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f007 fa91 	bl	800a9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 836b 	beq.w	8003b90 <PCD_EP_ISR_Handler+0x78a>
 80034ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f040 8366 	bne.w	8003b90 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	b292      	uxth	r2, r2
 80034d8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034e4:	e354      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034ec:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80034f8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80034fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003500:	2b00      	cmp	r3, #0
 8003502:	d034      	beq.n	800356e <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	3306      	adds	r3, #6
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800352c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800352e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6818      	ldr	r0, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800353a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800353c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003540:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003542:	b29b      	uxth	r3, r3
 8003544:	f005 fc3e 	bl	8008dc4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29a      	uxth	r2, r3
 8003550:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003554:	4013      	ands	r3, r2
 8003556:	823b      	strh	r3, [r7, #16]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	8a3a      	ldrh	r2, [r7, #16]
 800355e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003562:	b292      	uxth	r2, r2
 8003564:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f007 fa04 	bl	800a974 <HAL_PCD_SetupStageCallback>
 800356c:	e310      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800356e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003572:	2b00      	cmp	r3, #0
 8003574:	f280 830c 	bge.w	8003b90 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	b29a      	uxth	r2, r3
 8003580:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003584:	4013      	ands	r3, r2
 8003586:	83fb      	strh	r3, [r7, #30]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	8bfa      	ldrh	r2, [r7, #30]
 800358e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003592:	b292      	uxth	r2, r2
 8003594:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	3306      	adds	r3, #6
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d019      	beq.n	80035fe <PCD_EP_ISR_Handler+0x1f8>
 80035ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d015      	beq.n	80035fe <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d8:	6959      	ldr	r1, [r3, #20]
 80035da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035dc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	f005 fbee 	bl	8008dc4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	441a      	add	r2, r3
 80035f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80035f6:	2100      	movs	r1, #0
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f007 f9cd 	bl	800a998 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003608:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800360c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003610:	2b00      	cmp	r3, #0
 8003612:	f040 82bd 	bne.w	8003b90 <PCD_EP_ISR_Handler+0x78a>
 8003616:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800361a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800361e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003622:	f000 82b5 	beq.w	8003b90 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	4413      	add	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003644:	617b      	str	r3, [r7, #20]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	881b      	ldrh	r3, [r3, #0]
 800364a:	b29b      	uxth	r3, r3
 800364c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003650:	b29a      	uxth	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b3e      	cmp	r3, #62	; 0x3e
 800365c:	d91d      	bls.n	800369a <PCD_EP_ISR_Handler+0x294>
 800365e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	647b      	str	r3, [r7, #68]	; 0x44
 8003666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	f003 031f 	and.w	r3, r3, #31
 800366e:	2b00      	cmp	r3, #0
 8003670:	d102      	bne.n	8003678 <PCD_EP_ISR_Handler+0x272>
 8003672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003674:	3b01      	subs	r3, #1
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b29a      	uxth	r2, r3
 800367e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003680:	b29b      	uxth	r3, r3
 8003682:	029b      	lsls	r3, r3, #10
 8003684:	b29b      	uxth	r3, r3
 8003686:	4313      	orrs	r3, r2
 8003688:	b29b      	uxth	r3, r3
 800368a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800368e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003692:	b29a      	uxth	r2, r3
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	801a      	strh	r2, [r3, #0]
 8003698:	e026      	b.n	80036e8 <PCD_EP_ISR_Handler+0x2e2>
 800369a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10a      	bne.n	80036b8 <PCD_EP_ISR_Handler+0x2b2>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e017      	b.n	80036e8 <PCD_EP_ISR_Handler+0x2e2>
 80036b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	647b      	str	r3, [r7, #68]	; 0x44
 80036c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <PCD_EP_ISR_Handler+0x2cc>
 80036cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ce:	3301      	adds	r3, #1
 80036d0:	647b      	str	r3, [r7, #68]	; 0x44
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036da:	b29b      	uxth	r3, r3
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4313      	orrs	r3, r2
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036f8:	827b      	strh	r3, [r7, #18]
 80036fa:	8a7b      	ldrh	r3, [r7, #18]
 80036fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003700:	827b      	strh	r3, [r7, #18]
 8003702:	8a7b      	ldrh	r3, [r7, #18]
 8003704:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003708:	827b      	strh	r3, [r7, #18]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	8a7b      	ldrh	r3, [r7, #18]
 8003710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003720:	b29b      	uxth	r3, r3
 8003722:	8013      	strh	r3, [r2, #0]
 8003724:	e234      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800373a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800373e:	2b00      	cmp	r3, #0
 8003740:	f280 80fc 	bge.w	800393c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	b29a      	uxth	r2, r3
 8003756:	f640 738f 	movw	r3, #3983	; 0xf8f
 800375a:	4013      	ands	r3, r2
 800375c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	461a      	mov	r2, r3
 8003766:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4413      	add	r3, r2
 800376e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003776:	b292      	uxth	r2, r2
 8003778:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800377a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003792:	7b1b      	ldrb	r3, [r3, #12]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d125      	bne.n	80037e4 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	3306      	adds	r3, #6
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	6812      	ldr	r2, [r2, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80037c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8092 	beq.w	80038f2 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
 80037d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d4:	6959      	ldr	r1, [r3, #20]
 80037d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037d8:	88da      	ldrh	r2, [r3, #6]
 80037da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037de:	f005 faf1 	bl	8008dc4 <USB_ReadPMA>
 80037e2:	e086      	b.n	80038f2 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e6:	78db      	ldrb	r3, [r3, #3]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d10a      	bne.n	8003802 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037f0:	461a      	mov	r2, r3
 80037f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f9d9 	bl	8003bac <HAL_PCD_EP_DB_Receive>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003800:	e077      	b.n	80038f2 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	461a      	mov	r2, r3
 8003808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	461a      	mov	r2, r3
 8003826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d024      	beq.n	80038aa <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003868:	b29b      	uxth	r3, r3
 800386a:	461a      	mov	r2, r3
 800386c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	4413      	add	r3, r2
 8003874:	3302      	adds	r3, #2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003888:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800388c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02e      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
 8003898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389a:	6959      	ldr	r1, [r3, #20]
 800389c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800389e:	891a      	ldrh	r2, [r3, #8]
 80038a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038a4:	f005 fa8e 	bl	8008dc4 <USB_ReadPMA>
 80038a8:	e023      	b.n	80038f2 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	461a      	mov	r2, r3
 80038b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	3306      	adds	r3, #6
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6812      	ldr	r2, [r2, #0]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038d6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e4:	6959      	ldr	r1, [r3, #20]
 80038e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e8:	895a      	ldrh	r2, [r3, #10]
 80038ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038ee:	f005 fa69 	bl	8008dc4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f4:	69da      	ldr	r2, [r3, #28]
 80038f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038fa:	441a      	add	r2, r3
 80038fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003908:	441a      	add	r2, r3
 800390a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800390e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <PCD_EP_ISR_Handler+0x51c>
 8003916:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800391a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	429a      	cmp	r2, r3
 8003920:	d206      	bcs.n	8003930 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f007 f835 	bl	800a998 <HAL_PCD_DataOutStageCallback>
 800392e:	e005      	b.n	800393c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003936:	4618      	mov	r0, r3
 8003938:	f003 fd10 	bl	800735c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800393c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8123 	beq.w	8003b90 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800394a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	4413      	add	r3, r2
 800395c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003978:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	441a      	add	r2, r3
 800398a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800398e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003996:	b29b      	uxth	r3, r3
 8003998:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800399a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399c:	78db      	ldrb	r3, [r3, #3]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	f040 80a2 	bne.w	8003ae8 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80039a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a6:	2200      	movs	r2, #0
 80039a8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80039aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ac:	7b1b      	ldrb	r3, [r3, #12]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8093 	beq.w	8003ada <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d046      	beq.n	8003a4e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c2:	785b      	ldrb	r3, [r3, #1]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d126      	bne.n	8003a16 <PCD_EP_ISR_Handler+0x610>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	627b      	str	r3, [r7, #36]	; 0x24
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039dc:	4413      	add	r3, r2
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
 80039e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	011a      	lsls	r2, r3, #4
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	4413      	add	r3, r2
 80039ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039ee:	623b      	str	r3, [r7, #32]
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	801a      	strh	r2, [r3, #0]
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	801a      	strh	r2, [r3, #0]
 8003a14:	e061      	b.n	8003ada <PCD_EP_ISR_Handler+0x6d4>
 8003a16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a18:	785b      	ldrb	r3, [r3, #1]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d15d      	bne.n	8003ada <PCD_EP_ISR_Handler+0x6d4>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a32:	4413      	add	r3, r2
 8003a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	011a      	lsls	r2, r3, #4
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	4413      	add	r3, r2
 8003a40:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	2200      	movs	r2, #0
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	e045      	b.n	8003ada <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d126      	bne.n	8003aaa <PCD_EP_ISR_Handler+0x6a4>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a70:	4413      	add	r3, r2
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	011a      	lsls	r2, r3, #4
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7c:	4413      	add	r3, r2
 8003a7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003a82:	633b      	str	r3, [r7, #48]	; 0x30
 8003a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	801a      	strh	r2, [r3, #0]
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	881b      	ldrh	r3, [r3, #0]
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	801a      	strh	r2, [r3, #0]
 8003aa8:	e017      	b.n	8003ada <PCD_EP_ISR_Handler+0x6d4>
 8003aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aac:	785b      	ldrb	r3, [r3, #1]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d113      	bne.n	8003ada <PCD_EP_ISR_Handler+0x6d4>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	461a      	mov	r2, r3
 8003abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac0:	4413      	add	r3, r2
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	011a      	lsls	r2, r3, #4
 8003aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003acc:	4413      	add	r3, r2
 8003ace:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	4619      	mov	r1, r3
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f006 ff74 	bl	800a9ce <HAL_PCD_DataInStageCallback>
 8003ae6:	e053      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003ae8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d146      	bne.n	8003b82 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	3302      	adds	r3, #2
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d907      	bls.n	8003b3c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b34:	1ad2      	subs	r2, r2, r3
 8003b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b38:	619a      	str	r2, [r3, #24]
 8003b3a:	e002      	b.n	8003b42 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	2200      	movs	r2, #0
 8003b40:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d106      	bne.n	8003b58 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f006 ff3c 	bl	800a9ce <HAL_PCD_DataInStageCallback>
 8003b56:	e01b      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5a:	695a      	ldr	r2, [r3, #20]
 8003b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b60:	441a      	add	r2, r3
 8003b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b64:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b68:	69da      	ldr	r2, [r3, #28]
 8003b6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b6e:	441a      	add	r2, r3
 8003b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b72:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f003 fbee 	bl	800735c <USB_EPStartXfer>
 8003b80:	e006      	b.n	8003b90 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b86:	461a      	mov	r2, r3
 8003b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 f91b 	bl	8003dc6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	b21b      	sxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f6ff ac37 	blt.w	8003410 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3758      	adds	r7, #88	; 0x58
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bba:	88fb      	ldrh	r3, [r7, #6]
 8003bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d07e      	beq.n	8003cc2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	3302      	adds	r3, #2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	699a      	ldr	r2, [r3, #24]
 8003bf2:	8b7b      	ldrh	r3, [r7, #26]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d306      	bcc.n	8003c06 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	8b7b      	ldrh	r3, [r7, #26]
 8003bfe:	1ad2      	subs	r2, r2, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	619a      	str	r2, [r3, #24]
 8003c04:	e002      	b.n	8003c0c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d123      	bne.n	8003c5c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	833b      	strh	r3, [r7, #24]
 8003c30:	8b3b      	ldrh	r3, [r7, #24]
 8003c32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c36:	833b      	strh	r3, [r7, #24]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	441a      	add	r2, r3
 8003c46:	8b3b      	ldrh	r3, [r7, #24]
 8003c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01f      	beq.n	8003ca6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	881b      	ldrh	r3, [r3, #0]
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c80:	82fb      	strh	r3, [r7, #22]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	441a      	add	r2, r3
 8003c90:	8afb      	ldrh	r3, [r7, #22]
 8003c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ca6:	8b7b      	ldrh	r3, [r7, #26]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8087 	beq.w	8003dbc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6959      	ldr	r1, [r3, #20]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	891a      	ldrh	r2, [r3, #8]
 8003cba:	8b7b      	ldrh	r3, [r7, #26]
 8003cbc:	f005 f882 	bl	8008dc4 <USB_ReadPMA>
 8003cc0:	e07c      	b.n	8003dbc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	3306      	adds	r3, #6
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	8b7b      	ldrh	r3, [r7, #26]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d306      	bcc.n	8003d04 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	699a      	ldr	r2, [r3, #24]
 8003cfa:	8b7b      	ldrh	r3, [r7, #26]
 8003cfc:	1ad2      	subs	r2, r2, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	619a      	str	r2, [r3, #24]
 8003d02:	e002      	b.n	8003d0a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d123      	bne.n	8003d5a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2c:	83fb      	strh	r3, [r7, #30]
 8003d2e:	8bfb      	ldrh	r3, [r7, #30]
 8003d30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d34:	83fb      	strh	r3, [r7, #30]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	8bfb      	ldrh	r3, [r7, #30]
 8003d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11f      	bne.n	8003da4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7e:	83bb      	strh	r3, [r7, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	441a      	add	r2, r3
 8003d8e:	8bbb      	ldrh	r3, [r7, #28]
 8003d90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d008      	beq.n	8003dbc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6818      	ldr	r0, [r3, #0]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6959      	ldr	r1, [r3, #20]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	895a      	ldrh	r2, [r3, #10]
 8003db6:	8b7b      	ldrh	r3, [r7, #26]
 8003db8:	f005 f804 	bl	8008dc4 <USB_ReadPMA>
    }
  }

  return count;
 8003dbc:	8b7b      	ldrh	r3, [r7, #26]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3720      	adds	r7, #32
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b0a4      	sub	sp, #144	; 0x90
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dd4:	88fb      	ldrh	r3, [r7, #6]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 81dd 	beq.w	800419a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	461a      	mov	r2, r3
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	3302      	adds	r3, #2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e08:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d907      	bls.n	8003e28 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	619a      	str	r2, [r3, #24]
 8003e26:	e002      	b.n	8003e2e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f040 80b9 	bne.w	8003faa <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	785b      	ldrb	r3, [r3, #1]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d126      	bne.n	8003e8e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e54:	4413      	add	r3, r2
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	011a      	lsls	r2, r3, #4
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	4413      	add	r3, r2
 8003e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6a:	881b      	ldrh	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	801a      	strh	r2, [r3, #0]
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	881b      	ldrh	r3, [r3, #0]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e8a:	801a      	strh	r2, [r3, #0]
 8003e8c:	e01a      	b.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	785b      	ldrb	r3, [r3, #1]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d116      	bne.n	8003ec4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	4413      	add	r3, r2
 8003eac:	637b      	str	r3, [r7, #52]	; 0x34
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	011a      	lsls	r2, r3, #4
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ebc:	633b      	str	r3, [r7, #48]	; 0x30
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	785b      	ldrb	r3, [r3, #1]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d126      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	011a      	lsls	r2, r3, #4
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	881b      	ldrh	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	801a      	strh	r2, [r3, #0]
 8003f1e:	e017      	b.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	785b      	ldrb	r3, [r3, #1]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d113      	bne.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	4413      	add	r3, r2
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	011a      	lsls	r2, r3, #4
 8003f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f48:	623b      	str	r3, [r7, #32]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	4619      	mov	r1, r3
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f006 fd39 	bl	800a9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 82fc 	beq.w	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f82:	82fb      	strh	r3, [r7, #22]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	8afb      	ldrh	r3, [r7, #22]
 8003f94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]
 8003fa8:	e2da      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003faa:	88fb      	ldrh	r3, [r7, #6]
 8003fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d021      	beq.n	8003ff8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	881b      	ldrh	r3, [r3, #0]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	441a      	add	r2, r3
 8003fe0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	f040 82ae 	bne.w	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800400c:	441a      	add	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	69da      	ldr	r2, [r3, #28]
 8004016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800401a:	441a      	add	r2, r3
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6a1a      	ldr	r2, [r3, #32]
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	429a      	cmp	r2, r3
 800402a:	d30b      	bcc.n	8004044 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	6a1a      	ldr	r2, [r3, #32]
 8004038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800403c:	1ad2      	subs	r2, r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	621a      	str	r2, [r3, #32]
 8004042:	e017      	b.n	8004074 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d108      	bne.n	800405e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800404c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800405c:	e00a      	b.n	8004074 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	785b      	ldrb	r3, [r3, #1]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d165      	bne.n	8004148 <HAL_PCD_EP_DB_Transmit+0x382>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800408a:	b29b      	uxth	r3, r3
 800408c:	461a      	mov	r2, r3
 800408e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004090:	4413      	add	r3, r2
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	011a      	lsls	r2, r3, #4
 800409a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409c:	4413      	add	r3, r2
 800409e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80040a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040b2:	801a      	strh	r2, [r3, #0]
 80040b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b8:	2b3e      	cmp	r3, #62	; 0x3e
 80040ba:	d91d      	bls.n	80040f8 <HAL_PCD_EP_DB_Transmit+0x332>
 80040bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040c8:	f003 031f 	and.w	r3, r3, #31
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d102      	bne.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x310>
 80040d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d2:	3b01      	subs	r3, #1
 80040d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040de:	b29b      	uxth	r3, r3
 80040e0:	029b      	lsls	r3, r3, #10
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4313      	orrs	r3, r2
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	801a      	strh	r2, [r3, #0]
 80040f6:	e044      	b.n	8004182 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80040f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0x350>
 8004100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410e:	b29a      	uxth	r2, r3
 8004110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e035      	b.n	8004182 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
 800411e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d002      	beq.n	8004130 <HAL_PCD_EP_DB_Transmit+0x36a>
 800412a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412c:	3301      	adds	r3, #1
 800412e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	b29a      	uxth	r2, r3
 8004136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004138:	b29b      	uxth	r3, r3
 800413a:	029b      	lsls	r3, r3, #10
 800413c:	b29b      	uxth	r3, r3
 800413e:	4313      	orrs	r3, r2
 8004140:	b29a      	uxth	r2, r3
 8004142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004144:	801a      	strh	r2, [r3, #0]
 8004146:	e01c      	b.n	8004182 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	785b      	ldrb	r3, [r3, #1]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d118      	bne.n	8004182 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	647b      	str	r3, [r7, #68]	; 0x44
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800415e:	b29b      	uxth	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004164:	4413      	add	r3, r2
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	011a      	lsls	r2, r3, #4
 800416e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004170:	4413      	add	r3, r2
 8004172:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004176:	643b      	str	r3, [r7, #64]	; 0x40
 8004178:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800417c:	b29a      	uxth	r2, r3
 800417e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004180:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6959      	ldr	r1, [r3, #20]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	891a      	ldrh	r2, [r3, #8]
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004192:	b29b      	uxth	r3, r3
 8004194:	f004 fdd1 	bl	8008d3a <USB_WritePMA>
 8004198:	e1e2      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	4413      	add	r3, r2
 80041ae:	3306      	adds	r3, #6
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	699a      	ldr	r2, [r3, #24]
 80041ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d307      	bcc.n	80041e2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041da:	1ad2      	subs	r2, r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	619a      	str	r2, [r3, #24]
 80041e0:	e002      	b.n	80041e8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 80c0 	bne.w	8004372 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	785b      	ldrb	r3, [r3, #1]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d126      	bne.n	8004248 <HAL_PCD_EP_DB_Transmit+0x482>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004208:	b29b      	uxth	r3, r3
 800420a:	461a      	mov	r2, r3
 800420c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800420e:	4413      	add	r3, r2
 8004210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	011a      	lsls	r2, r3, #4
 8004218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800421a:	4413      	add	r3, r2
 800421c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004220:	67bb      	str	r3, [r7, #120]	; 0x78
 8004222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	b29b      	uxth	r3, r3
 8004228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800422c:	b29a      	uxth	r2, r3
 800422e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004230:	801a      	strh	r2, [r3, #0]
 8004232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800423c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004240:	b29a      	uxth	r2, r3
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	e01a      	b.n	800427e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	785b      	ldrb	r3, [r3, #1]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d116      	bne.n	800427e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	667b      	str	r3, [r7, #100]	; 0x64
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004264:	4413      	add	r3, r2
 8004266:	667b      	str	r3, [r7, #100]	; 0x64
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	011a      	lsls	r2, r3, #4
 800426e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004270:	4413      	add	r3, r2
 8004272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004276:	663b      	str	r3, [r7, #96]	; 0x60
 8004278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800427a:	2200      	movs	r2, #0
 800427c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	677b      	str	r3, [r7, #116]	; 0x74
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	785b      	ldrb	r3, [r3, #1]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d12b      	bne.n	80042e4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800429a:	b29b      	uxth	r3, r3
 800429c:	461a      	mov	r2, r3
 800429e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a0:	4413      	add	r3, r2
 80042a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	011a      	lsls	r2, r3, #4
 80042aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ac:	4413      	add	r3, r2
 80042ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80042b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ba:	881b      	ldrh	r3, [r3, #0]
 80042bc:	b29b      	uxth	r3, r3
 80042be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042c8:	801a      	strh	r2, [r3, #0]
 80042ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042da:	b29a      	uxth	r2, r3
 80042dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042e0:	801a      	strh	r2, [r3, #0]
 80042e2:	e017      	b.n	8004314 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d113      	bne.n	8004314 <HAL_PCD_EP_DB_Transmit+0x54e>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042fa:	4413      	add	r3, r2
 80042fc:	677b      	str	r3, [r7, #116]	; 0x74
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	011a      	lsls	r2, r3, #4
 8004304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004306:	4413      	add	r3, r2
 8004308:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800430c:	673b      	str	r3, [r7, #112]	; 0x70
 800430e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004310:	2200      	movs	r2, #0
 8004312:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4619      	mov	r1, r3
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f006 fb57 	bl	800a9ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 811a 	bne.w	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004346:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	441a      	add	r2, r3
 8004358:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800435c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004360:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800436c:	b29b      	uxth	r3, r3
 800436e:	8013      	strh	r3, [r2, #0]
 8004370:	e0f6      	b.n	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d121      	bne.n	80043c0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	b29b      	uxth	r3, r3
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f040 80ca 	bne.w	8004560 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043d4:	441a      	add	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043e2:	441a      	add	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	6a1a      	ldr	r2, [r3, #32]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d30b      	bcc.n	800440c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	6a1a      	ldr	r2, [r3, #32]
 8004400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004404:	1ad2      	subs	r2, r2, r3
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	621a      	str	r2, [r3, #32]
 800440a:	e017      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d108      	bne.n	8004426 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004414:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004424:	e00a      	b.n	800443c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	2200      	movs	r2, #0
 8004432:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	657b      	str	r3, [r7, #84]	; 0x54
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	785b      	ldrb	r3, [r3, #1]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d165      	bne.n	8004516 <HAL_PCD_EP_DB_Transmit+0x750>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004458:	b29b      	uxth	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800445e:	4413      	add	r3, r2
 8004460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	011a      	lsls	r2, r3, #4
 8004468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800446a:	4413      	add	r3, r2
 800446c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004470:	65bb      	str	r3, [r7, #88]	; 0x58
 8004472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800447c:	b29a      	uxth	r2, r3
 800447e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004486:	2b3e      	cmp	r3, #62	; 0x3e
 8004488:	d91d      	bls.n	80044c6 <HAL_PCD_EP_DB_Transmit+0x700>
 800448a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800448e:	095b      	lsrs	r3, r3, #5
 8004490:	66bb      	str	r3, [r7, #104]	; 0x68
 8004492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2b00      	cmp	r3, #0
 800449c:	d102      	bne.n	80044a4 <HAL_PCD_EP_DB_Transmit+0x6de>
 800449e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044a0:	3b01      	subs	r3, #1
 80044a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80044a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29a      	uxth	r2, r3
 80044aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	029b      	lsls	r3, r3, #10
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044be:	b29a      	uxth	r2, r3
 80044c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	e041      	b.n	800454a <HAL_PCD_EP_DB_Transmit+0x784>
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <HAL_PCD_EP_DB_Transmit+0x71e>
 80044ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044dc:	b29a      	uxth	r2, r3
 80044de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044e0:	801a      	strh	r2, [r3, #0]
 80044e2:	e032      	b.n	800454a <HAL_PCD_EP_DB_Transmit+0x784>
 80044e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_PCD_EP_DB_Transmit+0x738>
 80044f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044fa:	3301      	adds	r3, #1
 80044fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29a      	uxth	r2, r3
 8004504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004506:	b29b      	uxth	r3, r3
 8004508:	029b      	lsls	r3, r3, #10
 800450a:	b29b      	uxth	r3, r3
 800450c:	4313      	orrs	r3, r2
 800450e:	b29a      	uxth	r2, r3
 8004510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004512:	801a      	strh	r2, [r3, #0]
 8004514:	e019      	b.n	800454a <HAL_PCD_EP_DB_Transmit+0x784>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	785b      	ldrb	r3, [r3, #1]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d115      	bne.n	800454a <HAL_PCD_EP_DB_Transmit+0x784>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004526:	b29b      	uxth	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452c:	4413      	add	r3, r2
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	011a      	lsls	r2, r3, #4
 8004536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004538:	4413      	add	r3, r2
 800453a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800453e:	653b      	str	r3, [r7, #80]	; 0x50
 8004540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004544:	b29a      	uxth	r2, r3
 8004546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004548:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	6959      	ldr	r1, [r3, #20]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	895a      	ldrh	r2, [r3, #10]
 8004556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800455a:	b29b      	uxth	r3, r3
 800455c:	f004 fbed 	bl	8008d3a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457a:	82bb      	strh	r3, [r7, #20]
 800457c:	8abb      	ldrh	r3, [r7, #20]
 800457e:	f083 0310 	eor.w	r3, r3, #16
 8004582:	82bb      	strh	r3, [r7, #20]
 8004584:	8abb      	ldrh	r3, [r7, #20]
 8004586:	f083 0320 	eor.w	r3, r3, #32
 800458a:	82bb      	strh	r3, [r7, #20]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	8abb      	ldrh	r3, [r7, #20]
 800459c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3790      	adds	r7, #144	; 0x90
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b087      	sub	sp, #28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	817b      	strh	r3, [r7, #10]
 80045c8:	4613      	mov	r3, r2
 80045ca:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045cc:	897b      	ldrh	r3, [r7, #10]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d8:	897b      	ldrh	r3, [r7, #10]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	1c5a      	adds	r2, r3, #1
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	4413      	add	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e009      	b.n	8004604 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045f0:	897a      	ldrh	r2, [r7, #10]
 80045f2:	4613      	mov	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	4413      	add	r3, r2
 8004602:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004604:	893b      	ldrh	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	b29a      	uxth	r2, r3
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	80da      	strh	r2, [r3, #6]
 8004618:	e00b      	b.n	8004632 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2201      	movs	r2, #1
 800461e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	b29a      	uxth	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	0c1b      	lsrs	r3, r3, #16
 800462c:	b29a      	uxth	r2, r3
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr
	...

08004640 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e272      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8087 	beq.w	800476e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004660:	4b92      	ldr	r3, [pc, #584]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b04      	cmp	r3, #4
 800466a:	d00c      	beq.n	8004686 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800466c:	4b8f      	ldr	r3, [pc, #572]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	d112      	bne.n	800469e <HAL_RCC_OscConfig+0x5e>
 8004678:	4b8c      	ldr	r3, [pc, #560]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004684:	d10b      	bne.n	800469e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004686:	4b89      	ldr	r3, [pc, #548]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d06c      	beq.n	800476c <HAL_RCC_OscConfig+0x12c>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d168      	bne.n	800476c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e24c      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a6:	d106      	bne.n	80046b6 <HAL_RCC_OscConfig+0x76>
 80046a8:	4b80      	ldr	r3, [pc, #512]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a7f      	ldr	r2, [pc, #508]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	e02e      	b.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x98>
 80046be:	4b7b      	ldr	r3, [pc, #492]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7a      	ldr	r2, [pc, #488]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	4b78      	ldr	r3, [pc, #480]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a77      	ldr	r2, [pc, #476]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046d4:	6013      	str	r3, [r2, #0]
 80046d6:	e01d      	b.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046e0:	d10c      	bne.n	80046fc <HAL_RCC_OscConfig+0xbc>
 80046e2:	4b72      	ldr	r3, [pc, #456]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a71      	ldr	r2, [pc, #452]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b6f      	ldr	r3, [pc, #444]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6e      	ldr	r2, [pc, #440]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	e00b      	b.n	8004714 <HAL_RCC_OscConfig+0xd4>
 80046fc:	4b6b      	ldr	r3, [pc, #428]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6a      	ldr	r2, [pc, #424]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b68      	ldr	r3, [pc, #416]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a67      	ldr	r2, [pc, #412]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800470e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004712:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d013      	beq.n	8004744 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd ff30 	bl	8002580 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fd ff2c 	bl	8002580 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e200      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004736:	4b5d      	ldr	r3, [pc, #372]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0xe4>
 8004742:	e014      	b.n	800476e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fd ff1c 	bl	8002580 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474c:	f7fd ff18 	bl	8002580 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b64      	cmp	r3, #100	; 0x64
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e1ec      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800475e:	4b53      	ldr	r3, [pc, #332]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x10c>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d063      	beq.n	8004842 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800477a:	4b4c      	ldr	r3, [pc, #304]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 030c 	and.w	r3, r3, #12
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004786:	4b49      	ldr	r3, [pc, #292]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 030c 	and.w	r3, r3, #12
 800478e:	2b08      	cmp	r3, #8
 8004790:	d11c      	bne.n	80047cc <HAL_RCC_OscConfig+0x18c>
 8004792:	4b46      	ldr	r3, [pc, #280]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d116      	bne.n	80047cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800479e:	4b43      	ldr	r3, [pc, #268]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_RCC_OscConfig+0x176>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d001      	beq.n	80047b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e1c0      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4939      	ldr	r1, [pc, #228]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ca:	e03a      	b.n	8004842 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d020      	beq.n	8004816 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_RCC_OscConfig+0x270>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fd fed1 	bl	8002580 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047e2:	f7fd fecd 	bl	8002580 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1a1      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047f4:	4b2d      	ldr	r3, [pc, #180]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0f0      	beq.n	80047e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004800:	4b2a      	ldr	r3, [pc, #168]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4927      	ldr	r1, [pc, #156]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	600b      	str	r3, [r1, #0]
 8004814:	e015      	b.n	8004842 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004816:	4b26      	ldr	r3, [pc, #152]	; (80048b0 <HAL_RCC_OscConfig+0x270>)
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800481c:	f7fd feb0 	bl	8002580 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004824:	f7fd feac 	bl	8002580 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e180      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004836:	4b1d      	ldr	r3, [pc, #116]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1f0      	bne.n	8004824 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d03a      	beq.n	80048c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d019      	beq.n	800488a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004856:	4b17      	ldr	r3, [pc, #92]	; (80048b4 <HAL_RCC_OscConfig+0x274>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485c:	f7fd fe90 	bl	8002580 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004864:	f7fd fe8c 	bl	8002580 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e160      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004876:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <HAL_RCC_OscConfig+0x26c>)
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004882:	2001      	movs	r0, #1
 8004884:	f000 fa9c 	bl	8004dc0 <RCC_Delay>
 8004888:	e01c      	b.n	80048c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <HAL_RCC_OscConfig+0x274>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004890:	f7fd fe76 	bl	8002580 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004896:	e00f      	b.n	80048b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004898:	f7fd fe72 	bl	8002580 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d908      	bls.n	80048b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e146      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	42420000 	.word	0x42420000
 80048b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048b8:	4b92      	ldr	r3, [pc, #584]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048bc:	f003 0302 	and.w	r3, r3, #2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e9      	bne.n	8004898 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0304 	and.w	r3, r3, #4
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 80a6 	beq.w	8004a1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048d2:	2300      	movs	r3, #0
 80048d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048d6:	4b8b      	ldr	r3, [pc, #556]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10d      	bne.n	80048fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	4b88      	ldr	r3, [pc, #544]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048e4:	69db      	ldr	r3, [r3, #28]
 80048e6:	4a87      	ldr	r2, [pc, #540]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	61d3      	str	r3, [r2, #28]
 80048ee:	4b85      	ldr	r3, [pc, #532]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	60bb      	str	r3, [r7, #8]
 80048f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048fa:	2301      	movs	r3, #1
 80048fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048fe:	4b82      	ldr	r3, [pc, #520]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d118      	bne.n	800493c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800490a:	4b7f      	ldr	r3, [pc, #508]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a7e      	ldr	r2, [pc, #504]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 8004910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004916:	f7fd fe33 	bl	8002580 <HAL_GetTick>
 800491a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800491e:	f7fd fe2f 	bl	8002580 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e103      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004930:	4b75      	ldr	r3, [pc, #468]	; (8004b08 <HAL_RCC_OscConfig+0x4c8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004938:	2b00      	cmp	r3, #0
 800493a:	d0f0      	beq.n	800491e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	2b01      	cmp	r3, #1
 8004942:	d106      	bne.n	8004952 <HAL_RCC_OscConfig+0x312>
 8004944:	4b6f      	ldr	r3, [pc, #444]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	4a6e      	ldr	r2, [pc, #440]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800494a:	f043 0301 	orr.w	r3, r3, #1
 800494e:	6213      	str	r3, [r2, #32]
 8004950:	e02d      	b.n	80049ae <HAL_RCC_OscConfig+0x36e>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10c      	bne.n	8004974 <HAL_RCC_OscConfig+0x334>
 800495a:	4b6a      	ldr	r3, [pc, #424]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4a69      	ldr	r2, [pc, #420]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004960:	f023 0301 	bic.w	r3, r3, #1
 8004964:	6213      	str	r3, [r2, #32]
 8004966:	4b67      	ldr	r3, [pc, #412]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	4a66      	ldr	r2, [pc, #408]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800496c:	f023 0304 	bic.w	r3, r3, #4
 8004970:	6213      	str	r3, [r2, #32]
 8004972:	e01c      	b.n	80049ae <HAL_RCC_OscConfig+0x36e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b05      	cmp	r3, #5
 800497a:	d10c      	bne.n	8004996 <HAL_RCC_OscConfig+0x356>
 800497c:	4b61      	ldr	r3, [pc, #388]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800497e:	6a1b      	ldr	r3, [r3, #32]
 8004980:	4a60      	ldr	r2, [pc, #384]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004982:	f043 0304 	orr.w	r3, r3, #4
 8004986:	6213      	str	r3, [r2, #32]
 8004988:	4b5e      	ldr	r3, [pc, #376]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	4a5d      	ldr	r2, [pc, #372]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	6213      	str	r3, [r2, #32]
 8004994:	e00b      	b.n	80049ae <HAL_RCC_OscConfig+0x36e>
 8004996:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a5a      	ldr	r2, [pc, #360]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	6213      	str	r3, [r2, #32]
 80049a2:	4b58      	ldr	r3, [pc, #352]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	4a57      	ldr	r2, [pc, #348]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	f023 0304 	bic.w	r3, r3, #4
 80049ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d015      	beq.n	80049e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fd fde3 	bl	8002580 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049bc:	e00a      	b.n	80049d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049be:	f7fd fddf 	bl	8002580 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d901      	bls.n	80049d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e0b1      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d4:	4b4b      	ldr	r3, [pc, #300]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d0ee      	beq.n	80049be <HAL_RCC_OscConfig+0x37e>
 80049e0:	e014      	b.n	8004a0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e2:	f7fd fdcd 	bl	8002580 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ea:	f7fd fdc9 	bl	8002580 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e09b      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a00:	4b40      	ldr	r3, [pc, #256]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ee      	bne.n	80049ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a0c:	7dfb      	ldrb	r3, [r7, #23]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a12:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	4a3b      	ldr	r2, [pc, #236]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 8087 	beq.w	8004b36 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a28:	4b36      	ldr	r3, [pc, #216]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 030c 	and.w	r3, r3, #12
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d061      	beq.n	8004af8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d146      	bne.n	8004aca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a3c:	4b33      	ldr	r3, [pc, #204]	; (8004b0c <HAL_RCC_OscConfig+0x4cc>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a42:	f7fd fd9d 	bl	8002580 <HAL_GetTick>
 8004a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a48:	e008      	b.n	8004a5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4a:	f7fd fd99 	bl	8002580 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d901      	bls.n	8004a5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e06d      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a5c:	4b29      	ldr	r3, [pc, #164]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1f0      	bne.n	8004a4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a1b      	ldr	r3, [r3, #32]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	d108      	bne.n	8004a84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a72:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	4921      	ldr	r1, [pc, #132]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a84:	4b1f      	ldr	r3, [pc, #124]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a19      	ldr	r1, [r3, #32]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a94:	430b      	orrs	r3, r1
 8004a96:	491b      	ldr	r1, [pc, #108]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa2:	f7fd fd6d 	bl	8002580 <HAL_GetTick>
 8004aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aa8:	e008      	b.n	8004abc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aaa:	f7fd fd69 	bl	8002580 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e03d      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d0f0      	beq.n	8004aaa <HAL_RCC_OscConfig+0x46a>
 8004ac8:	e035      	b.n	8004b36 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aca:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCC_OscConfig+0x4cc>)
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fd56 	bl	8002580 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ad6:	e008      	b.n	8004aea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ad8:	f7fd fd52 	bl	8002580 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d901      	bls.n	8004aea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e026      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aea:	4b06      	ldr	r3, [pc, #24]	; (8004b04 <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1f0      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x498>
 8004af6:	e01e      	b.n	8004b36 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d107      	bne.n	8004b10 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e019      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
 8004b04:	40021000 	.word	0x40021000
 8004b08:	40007000 	.word	0x40007000
 8004b0c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <HAL_RCC_OscConfig+0x500>)
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d106      	bne.n	8004b32 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d001      	beq.n	8004b36 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000

08004b44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e0d0      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b58:	4b6a      	ldr	r3, [pc, #424]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d910      	bls.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b66:	4b67      	ldr	r3, [pc, #412]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 0207 	bic.w	r2, r3, #7
 8004b6e:	4965      	ldr	r1, [pc, #404]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b63      	ldr	r3, [pc, #396]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0b8      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ba0:	4b59      	ldr	r3, [pc, #356]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	4a58      	ldr	r2, [pc, #352]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004baa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a52      	ldr	r2, [pc, #328]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bc4:	4b50      	ldr	r3, [pc, #320]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	494d      	ldr	r1, [pc, #308]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d040      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bea:	4b47      	ldr	r3, [pc, #284]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d115      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e07f      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b02      	cmp	r3, #2
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e073      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c12:	4b3d      	ldr	r3, [pc, #244]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e06b      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c22:	4b39      	ldr	r3, [pc, #228]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	4936      	ldr	r1, [pc, #216]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c34:	f7fd fca4 	bl	8002580 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	e00a      	b.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c3c:	f7fd fca0 	bl	8002580 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e053      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	4b2d      	ldr	r3, [pc, #180]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 020c 	and.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d1eb      	bne.n	8004c3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c64:	4b27      	ldr	r3, [pc, #156]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d210      	bcs.n	8004c94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c72:	4b24      	ldr	r3, [pc, #144]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f023 0207 	bic.w	r2, r3, #7
 8004c7a:	4922      	ldr	r1, [pc, #136]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c82:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <HAL_RCC_ClockConfig+0x1c0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0307 	and.w	r3, r3, #7
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e032      	b.n	8004cfa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d008      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4916      	ldr	r1, [pc, #88]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cbe:	4b12      	ldr	r3, [pc, #72]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cd2:	f000 f821 	bl	8004d18 <HAL_RCC_GetSysClockFreq>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	4b0b      	ldr	r3, [pc, #44]	; (8004d08 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	490a      	ldr	r1, [pc, #40]	; (8004d0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ce4:	5ccb      	ldrb	r3, [r1, r3]
 8004ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cea:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <HAL_RCC_ClockConfig+0x1cc>)
 8004cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cee:	4b09      	ldr	r3, [pc, #36]	; (8004d14 <HAL_RCC_ClockConfig+0x1d0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f7fd fc02 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	40022000 	.word	0x40022000
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	0800cb9c 	.word	0x0800cb9c
 8004d10:	20000048 	.word	0x20000048
 8004d14:	2000004c 	.word	0x2000004c

08004d18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	2300      	movs	r3, #0
 8004d24:	60bb      	str	r3, [r7, #8]
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d32:	4b1e      	ldr	r3, [pc, #120]	; (8004dac <HAL_RCC_GetSysClockFreq+0x94>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
 8004d3e:	2b04      	cmp	r3, #4
 8004d40:	d002      	beq.n	8004d48 <HAL_RCC_GetSysClockFreq+0x30>
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d003      	beq.n	8004d4e <HAL_RCC_GetSysClockFreq+0x36>
 8004d46:	e027      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d48:	4b19      	ldr	r3, [pc, #100]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d4a:	613b      	str	r3, [r7, #16]
      break;
 8004d4c:	e027      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	0c9b      	lsrs	r3, r3, #18
 8004d52:	f003 030f 	and.w	r3, r3, #15
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d58:	5cd3      	ldrb	r3, [r2, r3]
 8004d5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d010      	beq.n	8004d88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_RCC_GetSysClockFreq+0x94>)
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	0c5b      	lsrs	r3, r3, #17
 8004d6c:	f003 0301 	and.w	r3, r3, #1
 8004d70:	4a11      	ldr	r2, [pc, #68]	; (8004db8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d72:	5cd3      	ldrb	r3, [r2, r3]
 8004d74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a0d      	ldr	r2, [pc, #52]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d7a:	fb03 f202 	mul.w	r2, r3, r2
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e004      	b.n	8004d92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	; (8004dbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	613b      	str	r3, [r7, #16]
      break;
 8004d96:	e002      	b.n	8004d9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d98:	4b05      	ldr	r3, [pc, #20]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d9a:	613b      	str	r3, [r7, #16]
      break;
 8004d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d9e:	693b      	ldr	r3, [r7, #16]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	371c      	adds	r7, #28
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bc80      	pop	{r7}
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	40021000 	.word	0x40021000
 8004db0:	007a1200 	.word	0x007a1200
 8004db4:	0800cbac 	.word	0x0800cbac
 8004db8:	0800cbbc 	.word	0x0800cbbc
 8004dbc:	003d0900 	.word	0x003d0900

08004dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <RCC_Delay+0x34>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <RCC_Delay+0x38>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ddc:	bf00      	nop
  }
  while (Delay --);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	60fa      	str	r2, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f9      	bne.n	8004ddc <RCC_Delay+0x1c>
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	20000048 	.word	0x20000048
 8004df8:	10624dd3 	.word	0x10624dd3

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d07d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1c:	4b4f      	ldr	r3, [pc, #316]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e28:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4a4b      	ldr	r2, [pc, #300]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	61d3      	str	r3, [r2, #28]
 8004e34:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d118      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a42      	ldr	r2, [pc, #264]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5c:	f7fd fb90 	bl	8002580 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	e008      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e64:	f7fd fb8c 	bl	8002580 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	; 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e06d      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	4b3a      	ldr	r3, [pc, #232]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e82:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02e      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d027      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea0:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb0:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eb6:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fd fb5b 	bl	8002580 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fd fb57 	bl	8002580 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e036      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ee      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4917      	ldr	r1, [pc, #92]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	490b      	ldr	r1, [pc, #44]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4904      	ldr	r1, [pc, #16]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40007000 	.word	0x40007000
 8004f64:	42420440 	.word	0x42420440

08004f68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e076      	b.n	8005068 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d108      	bne.n	8004f94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8a:	d009      	beq.n	8004fa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	61da      	str	r2, [r3, #28]
 8004f92:	e005      	b.n	8004fa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d106      	bne.n	8004fc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7fd f934 	bl	8002228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005010:	431a      	orrs	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005024:	ea42 0103 	orr.w	r1, r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	0c1a      	lsrs	r2, r3, #16
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f002 0204 	and.w	r2, r2, #4
 8005046:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005056:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	4613      	mov	r3, r2
 800507e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005080:	2300      	movs	r3, #0
 8005082:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800508a:	2b01      	cmp	r3, #1
 800508c:	d101      	bne.n	8005092 <HAL_SPI_Transmit+0x22>
 800508e:	2302      	movs	r3, #2
 8005090:	e12d      	b.n	80052ee <HAL_SPI_Transmit+0x27e>
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800509a:	f7fd fa71 	bl	8002580 <HAL_GetTick>
 800509e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050a0:	88fb      	ldrh	r3, [r7, #6]
 80050a2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d002      	beq.n	80050b6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
 80050b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050b4:	e116      	b.n	80052e4 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <HAL_SPI_Transmit+0x52>
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050c6:	e10d      	b.n	80052e4 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2203      	movs	r2, #3
 80050cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d10f      	bne.n	8005130 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800511e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800512e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513a:	2b40      	cmp	r3, #64	; 0x40
 800513c:	d007      	beq.n	800514e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005156:	d14f      	bne.n	80051f8 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0xf6>
 8005160:	8afb      	ldrh	r3, [r7, #22]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d142      	bne.n	80051ec <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800518a:	e02f      	b.n	80051ec <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b02      	cmp	r3, #2
 8005198:	d112      	bne.n	80051c0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	1c9a      	adds	r2, r3, #2
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80051be:	e015      	b.n	80051ec <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c0:	f7fd f9de 	bl	8002580 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d803      	bhi.n	80051d8 <HAL_SPI_Transmit+0x168>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051d6:	d102      	bne.n	80051de <HAL_SPI_Transmit+0x16e>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80051ea:	e07b      	b.n	80052e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1ca      	bne.n	800518c <HAL_SPI_Transmit+0x11c>
 80051f6:	e050      	b.n	800529a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_SPI_Transmit+0x196>
 8005200:	8afb      	ldrh	r3, [r7, #22]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d144      	bne.n	8005290 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800522c:	e030      	b.n	8005290 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b02      	cmp	r3, #2
 800523a:	d113      	bne.n	8005264 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	330c      	adds	r3, #12
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005258:	b29b      	uxth	r3, r3
 800525a:	3b01      	subs	r3, #1
 800525c:	b29a      	uxth	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	86da      	strh	r2, [r3, #54]	; 0x36
 8005262:	e015      	b.n	8005290 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005264:	f7fd f98c 	bl	8002580 <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d803      	bhi.n	800527c <HAL_SPI_Transmit+0x20c>
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800527a:	d102      	bne.n	8005282 <HAL_SPI_Transmit+0x212>
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d106      	bne.n	8005290 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800528e:	e029      	b.n	80052e4 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1c9      	bne.n	800522e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f000 fa6e 	bl	8005780 <SPI_EndRxTxTransaction>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2220      	movs	r2, #32
 80052ae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10a      	bne.n	80052ce <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	613b      	str	r3, [r7, #16]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	77fb      	strb	r3, [r7, #31]
 80052da:	e003      	b.n	80052e4 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b08c      	sub	sp, #48	; 0x30
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_SPI_TransmitReceive+0x26>
 8005318:	2302      	movs	r3, #2
 800531a:	e198      	b.n	800564e <HAL_SPI_TransmitReceive+0x358>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005324:	f7fd f92c 	bl	8002580 <HAL_GetTick>
 8005328:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800533a:	887b      	ldrh	r3, [r7, #2]
 800533c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800533e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005342:	2b01      	cmp	r3, #1
 8005344:	d00f      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x70>
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534c:	d107      	bne.n	800535e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <HAL_SPI_TransmitReceive+0x68>
 8005356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800535a:	2b04      	cmp	r3, #4
 800535c:	d003      	beq.n	8005366 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800535e:	2302      	movs	r3, #2
 8005360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005364:	e16d      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x82>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <HAL_SPI_TransmitReceive+0x82>
 8005372:	887b      	ldrh	r3, [r7, #2]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800537e:	e160      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b04      	cmp	r3, #4
 800538a:	d003      	beq.n	8005394 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2205      	movs	r2, #5
 8005390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	887a      	ldrh	r2, [r7, #2]
 80053a4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	887a      	ldrh	r2, [r7, #2]
 80053b6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	887a      	ldrh	r2, [r7, #2]
 80053bc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d007      	beq.n	80053e8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053f0:	d17c      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x10a>
 80053fa:	8b7b      	ldrh	r3, [r7, #26]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d16a      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	1c9a      	adds	r2, r3, #2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005424:	e057      	b.n	80054d6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b02      	cmp	r3, #2
 8005432:	d11b      	bne.n	800546c <HAL_SPI_TransmitReceive+0x176>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d016      	beq.n	800546c <HAL_SPI_TransmitReceive+0x176>
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	2b01      	cmp	r3, #1
 8005442:	d113      	bne.n	800546c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d119      	bne.n	80054ae <HAL_SPI_TransmitReceive+0x1b8>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d014      	beq.n	80054ae <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68da      	ldr	r2, [r3, #12]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800548e:	b292      	uxth	r2, r2
 8005490:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054aa:	2301      	movs	r3, #1
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054ae:	f7fd f867 	bl	8002580 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d80b      	bhi.n	80054d6 <HAL_SPI_TransmitReceive+0x1e0>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c4:	d007      	beq.n	80054d6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80054d4:	e0b5      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054da:	b29b      	uxth	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1a2      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x130>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d19d      	bne.n	8005426 <HAL_SPI_TransmitReceive+0x130>
 80054ea:	e080      	b.n	80055ee <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_TransmitReceive+0x204>
 80054f4:	8b7b      	ldrh	r3, [r7, #26]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d16f      	bne.n	80055da <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	330c      	adds	r3, #12
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005520:	e05b      	b.n	80055da <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b02      	cmp	r3, #2
 800552e:	d11c      	bne.n	800556a <HAL_SPI_TransmitReceive+0x274>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d017      	beq.n	800556a <HAL_SPI_TransmitReceive+0x274>
 800553a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d114      	bne.n	800556a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f003 0301 	and.w	r3, r3, #1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d119      	bne.n	80055ac <HAL_SPI_TransmitReceive+0x2b6>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68da      	ldr	r2, [r3, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558c:	b2d2      	uxtb	r2, r2
 800558e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055a8:	2301      	movs	r3, #1
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055ac:	f7fc ffe8 	bl	8002580 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d803      	bhi.n	80055c4 <HAL_SPI_TransmitReceive+0x2ce>
 80055bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055c2:	d102      	bne.n	80055ca <HAL_SPI_TransmitReceive+0x2d4>
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80055d8:	e033      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055de:	b29b      	uxth	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d19e      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x22c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d199      	bne.n	8005522 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f000 f8c4 	bl	8005780 <SPI_EndRxTxTransaction>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800560a:	e01a      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005614:	2300      	movs	r3, #0
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	617b      	str	r3, [r7, #20]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]
 8005628:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	2b00      	cmp	r3, #0
 8005630:	d003      	beq.n	800563a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005638:	e003      	b.n	8005642 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800564a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800564e:	4618      	mov	r0, r3
 8005650:	3730      	adds	r7, #48	; 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005664:	b2db      	uxtb	r3, r3
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	4613      	mov	r3, r2
 800567e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005680:	f7fc ff7e 	bl	8002580 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	4413      	add	r3, r2
 800568e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005690:	f7fc ff76 	bl	8002580 <HAL_GetTick>
 8005694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005696:	4b39      	ldr	r3, [pc, #228]	; (800577c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	015b      	lsls	r3, r3, #5
 800569c:	0d1b      	lsrs	r3, r3, #20
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	fb02 f303 	mul.w	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a6:	e054      	b.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056ae:	d050      	beq.n	8005752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056b0:	f7fc ff66 	bl	8002580 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d902      	bls.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d13d      	bne.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056de:	d111      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e8:	d004      	beq.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f2:	d107      	bne.n	8005704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570c:	d10f      	bne.n	800572e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800572c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e017      	b.n	8005772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3b01      	subs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689a      	ldr	r2, [r3, #8]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	429a      	cmp	r2, r3
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d19b      	bne.n	80056a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3720      	adds	r7, #32
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	20000048 	.word	0x20000048

08005780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af02      	add	r7, sp, #8
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	2200      	movs	r2, #0
 8005794:	2180      	movs	r1, #128	; 0x80
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f7ff ff6a 	bl	8005670 <SPI_WaitFlagStateUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	f043 0220 	orr.w	r2, r3, #32
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e000      	b.n	80057b4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e041      	b.n	8005852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc fd6a 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4619      	mov	r1, r3
 80057fa:	4610      	mov	r0, r2
 80057fc:	f000 fc30 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b01      	cmp	r3, #1
 800586e:	d001      	beq.n	8005874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e03a      	b.n	80058ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68da      	ldr	r2, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a18      	ldr	r2, [pc, #96]	; (80058f4 <HAL_TIM_Base_Start_IT+0x98>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d00e      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x58>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589e:	d009      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x58>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a14      	ldr	r2, [pc, #80]	; (80058f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d004      	beq.n	80058b4 <HAL_TIM_Base_Start_IT+0x58>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a13      	ldr	r2, [pc, #76]	; (80058fc <HAL_TIM_Base_Start_IT+0xa0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d111      	bne.n	80058d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b06      	cmp	r3, #6
 80058c4:	d010      	beq.n	80058e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0201 	orr.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	e007      	b.n	80058e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3714      	adds	r7, #20
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr
 80058f4:	40012c00 	.word	0x40012c00
 80058f8:	40000400 	.word	0x40000400
 80058fc:	40000800 	.word	0x40000800

08005900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d101      	bne.n	8005912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e041      	b.n	8005996 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005918:	b2db      	uxtb	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f839 	bl	800599e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	3304      	adds	r3, #4
 800593c:	4619      	mov	r1, r3
 800593e:	4610      	mov	r0, r2
 8005940:	f000 fb8e 	bl	8006060 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <HAL_TIM_PWM_Start+0x24>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	e022      	b.n	8005a1a <HAL_TIM_PWM_Start+0x6a>
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d109      	bne.n	80059ee <HAL_TIM_PWM_Start+0x3e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	bf14      	ite	ne
 80059e6:	2301      	movne	r3, #1
 80059e8:	2300      	moveq	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	e015      	b.n	8005a1a <HAL_TIM_PWM_Start+0x6a>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d109      	bne.n	8005a08 <HAL_TIM_PWM_Start+0x58>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e008      	b.n	8005a1a <HAL_TIM_PWM_Start+0x6a>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d001      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e05e      	b.n	8005ae0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d104      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x82>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a30:	e013      	b.n	8005a5a <HAL_TIM_PWM_Start+0xaa>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d104      	bne.n	8005a42 <HAL_TIM_PWM_Start+0x92>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a40:	e00b      	b.n	8005a5a <HAL_TIM_PWM_Start+0xaa>
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b08      	cmp	r3, #8
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0xa2>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a50:	e003      	b.n	8005a5a <HAL_TIM_PWM_Start+0xaa>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	6839      	ldr	r1, [r7, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fd7c 	bl	8006560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ae8 <HAL_TIM_PWM_Start+0x138>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d107      	bne.n	8005a82 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a18      	ldr	r2, [pc, #96]	; (8005ae8 <HAL_TIM_PWM_Start+0x138>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_TIM_PWM_Start+0xfa>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a94:	d009      	beq.n	8005aaa <HAL_TIM_PWM_Start+0xfa>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a14      	ldr	r2, [pc, #80]	; (8005aec <HAL_TIM_PWM_Start+0x13c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_TIM_PWM_Start+0xfa>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a12      	ldr	r2, [pc, #72]	; (8005af0 <HAL_TIM_PWM_Start+0x140>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d111      	bne.n	8005ace <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b06      	cmp	r3, #6
 8005aba:	d010      	beq.n	8005ade <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005acc:	e007      	b.n	8005ade <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f042 0201 	orr.w	r2, r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	40012c00 	.word	0x40012c00
 8005aec:	40000400 	.word	0x40000400
 8005af0:	40000800 	.word	0x40000800

08005af4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0302 	and.w	r3, r3, #2
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d122      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d11b      	bne.n	8005b50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0202 	mvn.w	r2, #2
 8005b20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0303 	and.w	r3, r3, #3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fa76 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005b3c:	e005      	b.n	8005b4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa69 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fa78 	bl	800603a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0304 	and.w	r3, r3, #4
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	d122      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d11b      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f06f 0204 	mvn.w	r2, #4
 8005b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2202      	movs	r2, #2
 8005b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fa4c 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005b90:	e005      	b.n	8005b9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa3f 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 fa4e 	bl	800603a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0308 	and.w	r3, r3, #8
 8005bae:	2b08      	cmp	r3, #8
 8005bb0:	d122      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d11b      	bne.n	8005bf8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0208 	mvn.w	r2, #8
 8005bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0303 	and.w	r3, r3, #3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 fa22 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005be4:	e005      	b.n	8005bf2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa15 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fa24 	bl	800603a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	f003 0310 	and.w	r3, r3, #16
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d122      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d11b      	bne.n	8005c4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f06f 0210 	mvn.w	r2, #16
 8005c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2208      	movs	r2, #8
 8005c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 f9f8 	bl	8006028 <HAL_TIM_IC_CaptureCallback>
 8005c38:	e005      	b.n	8005c46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f9eb 	bl	8006016 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f9fa 	bl	800603a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d10e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f06f 0201 	mvn.w	r2, #1
 8005c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb fe64 	bl	8001940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d10e      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d107      	bne.n	8005ca4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd3a 	bl	8006718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d10e      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68db      	ldr	r3, [r3, #12]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d107      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f9be 	bl	800604c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b20      	cmp	r3, #32
 8005cdc:	d10e      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d107      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0220 	mvn.w	r2, #32
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fd05 	bl	8006706 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cfc:	bf00      	nop
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e0ae      	b.n	8005e80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	f200 809f 	bhi.w	8005e70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d32:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d6d 	.word	0x08005d6d
 8005d3c:	08005e71 	.word	0x08005e71
 8005d40:	08005e71 	.word	0x08005e71
 8005d44:	08005e71 	.word	0x08005e71
 8005d48:	08005dad 	.word	0x08005dad
 8005d4c:	08005e71 	.word	0x08005e71
 8005d50:	08005e71 	.word	0x08005e71
 8005d54:	08005e71 	.word	0x08005e71
 8005d58:	08005def 	.word	0x08005def
 8005d5c:	08005e71 	.word	0x08005e71
 8005d60:	08005e71 	.word	0x08005e71
 8005d64:	08005e71 	.word	0x08005e71
 8005d68:	08005e2f 	.word	0x08005e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f9d6 	bl	8006124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f042 0208 	orr.w	r2, r2, #8
 8005d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699a      	ldr	r2, [r3, #24]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0204 	bic.w	r2, r2, #4
 8005d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	691a      	ldr	r2, [r3, #16]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	619a      	str	r2, [r3, #24]
      break;
 8005daa:	e064      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fa1c 	bl	80061f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	699a      	ldr	r2, [r3, #24]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6999      	ldr	r1, [r3, #24]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	021a      	lsls	r2, r3, #8
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	619a      	str	r2, [r3, #24]
      break;
 8005dec:	e043      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 fa65 	bl	80062c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f042 0208 	orr.w	r2, r2, #8
 8005e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69da      	ldr	r2, [r3, #28]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0204 	bic.w	r2, r2, #4
 8005e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69d9      	ldr	r1, [r3, #28]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	691a      	ldr	r2, [r3, #16]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	61da      	str	r2, [r3, #28]
      break;
 8005e2c:	e023      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 faaf 	bl	8006398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69da      	ldr	r2, [r3, #28]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69d9      	ldr	r1, [r3, #28]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	021a      	lsls	r2, r3, #8
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	61da      	str	r2, [r3, #28]
      break;
 8005e6e:	e002      	b.n	8005e76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	75fb      	strb	r3, [r7, #23]
      break;
 8005e74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e0b4      	b.n	800600e <HAL_TIM_ConfigClockSource+0x186>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005edc:	d03e      	beq.n	8005f5c <HAL_TIM_ConfigClockSource+0xd4>
 8005ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee2:	f200 8087 	bhi.w	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	f000 8086 	beq.w	8005ffa <HAL_TIM_ConfigClockSource+0x172>
 8005eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef2:	d87f      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b70      	cmp	r3, #112	; 0x70
 8005ef6:	d01a      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0xa6>
 8005ef8:	2b70      	cmp	r3, #112	; 0x70
 8005efa:	d87b      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b60      	cmp	r3, #96	; 0x60
 8005efe:	d050      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x11a>
 8005f00:	2b60      	cmp	r3, #96	; 0x60
 8005f02:	d877      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f04:	2b50      	cmp	r3, #80	; 0x50
 8005f06:	d03c      	beq.n	8005f82 <HAL_TIM_ConfigClockSource+0xfa>
 8005f08:	2b50      	cmp	r3, #80	; 0x50
 8005f0a:	d873      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f0c:	2b40      	cmp	r3, #64	; 0x40
 8005f0e:	d058      	beq.n	8005fc2 <HAL_TIM_ConfigClockSource+0x13a>
 8005f10:	2b40      	cmp	r3, #64	; 0x40
 8005f12:	d86f      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f14:	2b30      	cmp	r3, #48	; 0x30
 8005f16:	d064      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f18:	2b30      	cmp	r3, #48	; 0x30
 8005f1a:	d86b      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f1c:	2b20      	cmp	r3, #32
 8005f1e:	d060      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	d867      	bhi.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d05c      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d05a      	beq.n	8005fe2 <HAL_TIM_ConfigClockSource+0x15a>
 8005f2c:	e062      	b.n	8005ff4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f3e:	f000 faf0 	bl	8006522 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	609a      	str	r2, [r3, #8]
      break;
 8005f5a:	e04f      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f6c:	f000 fad9 	bl	8006522 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f7e:	609a      	str	r2, [r3, #8]
      break;
 8005f80:	e03c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f000 fa50 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2150      	movs	r1, #80	; 0x50
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 faa7 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005fa0:	e02c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005fae:	461a      	mov	r2, r3
 8005fb0:	f000 fa6e 	bl	8006490 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2160      	movs	r1, #96	; 0x60
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa97 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005fc0:	e01c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f000 fa30 	bl	8006434 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2140      	movs	r1, #64	; 0x40
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fa87 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005fe0:	e00c      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4619      	mov	r1, r3
 8005fec:	4610      	mov	r0, r2
 8005fee:	f000 fa7e 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005ff2:	e003      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ff8:	e000      	b.n	8005ffc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ffa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
}
 800600e:	4618      	mov	r0, r3
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	bc80      	pop	{r7}
 8006026:	4770      	bx	lr

08006028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006030:	bf00      	nop
 8006032:	370c      	adds	r7, #12
 8006034:	46bd      	mov	sp, r7
 8006036:	bc80      	pop	{r7}
 8006038:	4770      	bx	lr

0800603a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800603a:	b480      	push	{r7}
 800603c:	b083      	sub	sp, #12
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr

0800604c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800604c:	b480      	push	{r7}
 800604e:	b083      	sub	sp, #12
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006054:	bf00      	nop
 8006056:	370c      	adds	r7, #12
 8006058:	46bd      	mov	sp, r7
 800605a:	bc80      	pop	{r7}
 800605c:	4770      	bx	lr
	...

08006060 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a29      	ldr	r2, [pc, #164]	; (8006118 <TIM_Base_SetConfig+0xb8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d00b      	beq.n	8006090 <TIM_Base_SetConfig+0x30>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607e:	d007      	beq.n	8006090 <TIM_Base_SetConfig+0x30>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a26      	ldr	r2, [pc, #152]	; (800611c <TIM_Base_SetConfig+0xbc>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d003      	beq.n	8006090 <TIM_Base_SetConfig+0x30>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a25      	ldr	r2, [pc, #148]	; (8006120 <TIM_Base_SetConfig+0xc0>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d108      	bne.n	80060a2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	4313      	orrs	r3, r2
 80060a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1c      	ldr	r2, [pc, #112]	; (8006118 <TIM_Base_SetConfig+0xb8>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00b      	beq.n	80060c2 <TIM_Base_SetConfig+0x62>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b0:	d007      	beq.n	80060c2 <TIM_Base_SetConfig+0x62>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a19      	ldr	r2, [pc, #100]	; (800611c <TIM_Base_SetConfig+0xbc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d003      	beq.n	80060c2 <TIM_Base_SetConfig+0x62>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a18      	ldr	r2, [pc, #96]	; (8006120 <TIM_Base_SetConfig+0xc0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d108      	bne.n	80060d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a07      	ldr	r2, [pc, #28]	; (8006118 <TIM_Base_SetConfig+0xb8>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d103      	bne.n	8006108 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	615a      	str	r2, [r3, #20]
}
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	bc80      	pop	{r7}
 8006116:	4770      	bx	lr
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800

08006124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006124:	b480      	push	{r7}
 8006126:	b087      	sub	sp, #28
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	f023 0201 	bic.w	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0303 	bic.w	r3, r3, #3
 800615a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f023 0302 	bic.w	r3, r3, #2
 800616c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <TIM_OC1_SetConfig+0xc8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10c      	bne.n	800619a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	f023 0308 	bic.w	r3, r3, #8
 8006186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f023 0304 	bic.w	r3, r3, #4
 8006198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a13      	ldr	r2, [pc, #76]	; (80061ec <TIM_OC1_SetConfig+0xc8>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d111      	bne.n	80061c6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	4313      	orrs	r3, r2
 80061ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	685a      	ldr	r2, [r3, #4]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	621a      	str	r2, [r3, #32]
}
 80061e0:	bf00      	nop
 80061e2:	371c      	adds	r7, #28
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bc80      	pop	{r7}
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00

080061f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a1b      	ldr	r3, [r3, #32]
 8006204:	f023 0210 	bic.w	r2, r3, #16
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	021b      	lsls	r3, r3, #8
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f023 0320 	bic.w	r3, r3, #32
 800623a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	011b      	lsls	r3, r3, #4
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1d      	ldr	r2, [pc, #116]	; (80062c0 <TIM_OC2_SetConfig+0xd0>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d10d      	bne.n	800626c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006256:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	697a      	ldr	r2, [r7, #20]
 8006260:	4313      	orrs	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <TIM_OC2_SetConfig+0xd0>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d113      	bne.n	800629c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800627a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bc80      	pop	{r7}
 80062be:	4770      	bx	lr
 80062c0:	40012c00 	.word	0x40012c00

080062c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800630c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a1d      	ldr	r2, [pc, #116]	; (8006394 <TIM_OC3_SetConfig+0xd0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10d      	bne.n	800633e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800633c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a14      	ldr	r2, [pc, #80]	; (8006394 <TIM_OC3_SetConfig+0xd0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	bc80      	pop	{r7}
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	40012c00 	.word	0x40012c00

08006398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	021b      	lsls	r3, r3, #8
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	031b      	lsls	r3, r3, #12
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a0f      	ldr	r2, [pc, #60]	; (8006430 <TIM_OC4_SetConfig+0x98>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d109      	bne.n	800640c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	019b      	lsls	r3, r3, #6
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	4313      	orrs	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr
 8006430:	40012c00 	.word	0x40012c00

08006434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	f023 0201 	bic.w	r2, r3, #1
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f023 030a 	bic.w	r3, r3, #10
 8006470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	4313      	orrs	r3, r2
 8006478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr

08006490 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0210 	bic.w	r2, r3, #16
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	031b      	lsls	r3, r3, #12
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bc80      	pop	{r7}
 80064ec:	4770      	bx	lr

080064ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	f043 0307 	orr.w	r3, r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	609a      	str	r2, [r3, #8]
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr

08006522 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006522:	b480      	push	{r7}
 8006524:	b087      	sub	sp, #28
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
 800652e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800653c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	021a      	lsls	r2, r3, #8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	431a      	orrs	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	4313      	orrs	r3, r2
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	4313      	orrs	r3, r2
 800654e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	609a      	str	r2, [r3, #8]
}
 8006556:	bf00      	nop
 8006558:	371c      	adds	r7, #28
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2201      	movs	r2, #1
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a1a      	ldr	r2, [r3, #32]
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	43db      	mvns	r3, r3
 8006582:	401a      	ands	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f003 031f 	and.w	r3, r3, #31
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	fa01 f303 	lsl.w	r3, r1, r3
 8006598:	431a      	orrs	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	621a      	str	r2, [r3, #32]
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065bc:	2302      	movs	r3, #2
 80065be:	e046      	b.n	800664e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2202      	movs	r2, #2
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a16      	ldr	r2, [pc, #88]	; (8006658 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00e      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d009      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a12      	ldr	r2, [pc, #72]	; (800665c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a10      	ldr	r2, [pc, #64]	; (8006660 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d10c      	bne.n	800663c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006628:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	68ba      	ldr	r2, [r7, #8]
 8006630:	4313      	orrs	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	bc80      	pop	{r7}
 8006656:	4770      	bx	lr
 8006658:	40012c00 	.word	0x40012c00
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800

08006664 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800667c:	2302      	movs	r3, #2
 800667e:	e03d      	b.n	80066fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	4313      	orrs	r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	4313      	orrs	r3, r2
 80066da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	bc80      	pop	{r7}
 8006704:	4770      	bx	lr

08006706 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	bc80      	pop	{r7}
 8006728:	4770      	bx	lr

0800672a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800672a:	b084      	sub	sp, #16
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	f107 0014 	add.w	r0, r7, #20
 8006738:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	b004      	add	sp, #16
 8006748:	4770      	bx	lr

0800674a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b085      	sub	sp, #20
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800675a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800675e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	b29a      	uxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006776:	b480      	push	{r7}
 8006778:	b085      	sub	sp, #20
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800677e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006782:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	b29b      	uxth	r3, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	4013      	ands	r3, r2
 8006796:	b29a      	uxth	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3714      	adds	r7, #20
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	460b      	mov	r3, r1
 80067b4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr

080067c2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80067c2:	b084      	sub	sp, #16
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	f107 0014 	add.w	r0, r7, #20
 80067d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	b004      	add	sp, #16
 8006800:	4770      	bx	lr
	...

08006804 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006804:	b480      	push	{r7}
 8006806:	b09d      	sub	sp, #116	; 0x74
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	881b      	ldrh	r3, [r3, #0]
 8006820:	b29b      	uxth	r3, r3
 8006822:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8006826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800682a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	78db      	ldrb	r3, [r3, #3]
 8006832:	2b03      	cmp	r3, #3
 8006834:	d81f      	bhi.n	8006876 <USB_ActivateEndpoint+0x72>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <USB_ActivateEndpoint+0x38>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	0800684d 	.word	0x0800684d
 8006840:	08006869 	.word	0x08006869
 8006844:	0800687f 	.word	0x0800687f
 8006848:	0800685b 	.word	0x0800685b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800684c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006854:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006858:	e012      	b.n	8006880 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800685a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800685e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006862:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006866:	e00b      	b.n	8006880 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006868:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800686c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006870:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8006874:	e004      	b.n	8006880 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800687c:	e000      	b.n	8006880 <USB_ActivateEndpoint+0x7c>
      break;
 800687e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	441a      	add	r2, r3
 800688a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800688e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800689a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	4313      	orrs	r3, r2
 80068c2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80068d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	7b1b      	ldrb	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f040 8178 	bne.w	8006be2 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8084 	beq.w	8006a04 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006906:	b29b      	uxth	r3, r3
 8006908:	461a      	mov	r2, r3
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	011a      	lsls	r2, r3, #4
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	88db      	ldrh	r3, [r3, #6]
 8006924:	085b      	lsrs	r3, r3, #1
 8006926:	b29b      	uxth	r3, r3
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	827b      	strh	r3, [r7, #18]
 800693e:	8a7b      	ldrh	r3, [r7, #18]
 8006940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <USB_ActivateEndpoint+0x17c>
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	823b      	strh	r3, [r7, #16]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	8a3b      	ldrh	r3, [r7, #16]
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006978:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	78db      	ldrb	r3, [r3, #3]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d020      	beq.n	80069ca <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	b29b      	uxth	r3, r3
 8006996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800699a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800699e:	81bb      	strh	r3, [r7, #12]
 80069a0:	89bb      	ldrh	r3, [r7, #12]
 80069a2:	f083 0320 	eor.w	r3, r3, #32
 80069a6:	81bb      	strh	r3, [r7, #12]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	441a      	add	r2, r3
 80069b2:	89bb      	ldrh	r3, [r7, #12]
 80069b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	8013      	strh	r3, [r2, #0]
 80069c8:	e2d5      	b.n	8006f76 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	b29b      	uxth	r3, r3
 80069d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e0:	81fb      	strh	r3, [r7, #14]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	8013      	strh	r3, [r2, #0]
 8006a02:	e2b8      	b.n	8006f76 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	633b      	str	r3, [r7, #48]	; 0x30
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	461a      	mov	r2, r3
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	4413      	add	r3, r2
 8006a16:	633b      	str	r3, [r7, #48]	; 0x30
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	011a      	lsls	r2, r3, #4
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	88db      	ldrh	r3, [r3, #6]
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	4413      	add	r3, r2
 8006a4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	011a      	lsls	r2, r3, #4
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	2b3e      	cmp	r3, #62	; 0x3e
 8006a72:	d91d      	bls.n	8006ab0 <USB_ActivateEndpoint+0x2ac>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d102      	bne.n	8006a8e <USB_ActivateEndpoint+0x28a>
 8006a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	881b      	ldrh	r3, [r3, #0]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	029b      	lsls	r3, r3, #10
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	801a      	strh	r2, [r3, #0]
 8006aae:	e026      	b.n	8006afe <USB_ActivateEndpoint+0x2fa>
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <USB_ActivateEndpoint+0x2ca>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	881b      	ldrh	r3, [r3, #0]
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	801a      	strh	r2, [r3, #0]
 8006acc:	e017      	b.n	8006afe <USB_ActivateEndpoint+0x2fa>
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	085b      	lsrs	r3, r3, #1
 8006ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d002      	beq.n	8006ae8 <USB_ActivateEndpoint+0x2e4>
 8006ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	881b      	ldrh	r3, [r3, #0]
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	029b      	lsls	r3, r3, #10
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	4313      	orrs	r3, r2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d01b      	beq.n	8006b4e <USB_ActivateEndpoint+0x34a>
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2c:	843b      	strh	r3, [r7, #32]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	441a      	add	r2, r3
 8006b38:	8c3b      	ldrh	r3, [r7, #32]
 8006b3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d124      	bne.n	8006ba0 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	83bb      	strh	r3, [r7, #28]
 8006b6e:	8bbb      	ldrh	r3, [r7, #28]
 8006b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b74:	83bb      	strh	r3, [r7, #28]
 8006b76:	8bbb      	ldrh	r3, [r7, #28]
 8006b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b7c:	83bb      	strh	r3, [r7, #28]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8bbb      	ldrh	r3, [r7, #28]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
 8006b9e:	e1ea      	b.n	8006f76 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	4413      	add	r3, r2
 8006baa:	881b      	ldrh	r3, [r3, #0]
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bb6:	83fb      	strh	r3, [r7, #30]
 8006bb8:	8bfb      	ldrh	r3, [r7, #30]
 8006bba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bbe:	83fb      	strh	r3, [r7, #30]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	009b      	lsls	r3, r3, #2
 8006bc8:	441a      	add	r2, r3
 8006bca:	8bfb      	ldrh	r3, [r7, #30]
 8006bcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	8013      	strh	r3, [r2, #0]
 8006be0:	e1c9      	b.n	8006f76 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	78db      	ldrb	r3, [r3, #3]
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d11e      	bne.n	8006c28 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	441a      	add	r2, r3
 8006c0e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
 8006c26:	e01d      	b.n	8006c64 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	441a      	add	r2, r3
 8006c4c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	461a      	mov	r2, r3
 8006c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c74:	4413      	add	r3, r2
 8006c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	011a      	lsls	r2, r3, #4
 8006c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c80:	4413      	add	r3, r2
 8006c82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c86:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	891b      	ldrh	r3, [r3, #8]
 8006c8c:	085b      	lsrs	r3, r3, #1
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	005b      	lsls	r3, r3, #1
 8006c92:	b29a      	uxth	r2, r3
 8006c94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c96:	801a      	strh	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca8:	4413      	add	r3, r2
 8006caa:	657b      	str	r3, [r7, #84]	; 0x54
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	011a      	lsls	r2, r3, #4
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006cba:	653b      	str	r3, [r7, #80]	; 0x50
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	895b      	ldrh	r3, [r3, #10]
 8006cc0:	085b      	lsrs	r3, r3, #1
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	b29a      	uxth	r2, r3
 8006cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	785b      	ldrb	r3, [r3, #1]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f040 8093 	bne.w	8006dfc <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	881b      	ldrh	r3, [r3, #0]
 8006ce2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ce6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d01b      	beq.n	8006d2a <USB_ActivateEndpoint+0x526>
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	4413      	add	r3, r2
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d08:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	441a      	add	r2, r3
 8006d14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d2a:	687a      	ldr	r2, [r7, #4]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	4413      	add	r3, r2
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006d38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d01b      	beq.n	8006d7a <USB_ActivateEndpoint+0x576>
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d90:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d92:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d98:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006d9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006da0:	873b      	strh	r3, [r7, #56]	; 0x38
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
 8006dfa:	e0bc      	b.n	8006f76 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d01d      	beq.n	8006e54 <USB_ActivateEndpoint+0x650>
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	4413      	add	r3, r2
 8006e22:	881b      	ldrh	r3, [r3, #0]
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006e64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01d      	beq.n	8006eac <USB_ActivateEndpoint+0x6a8>
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	881b      	ldrh	r3, [r3, #0]
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	441a      	add	r2, r3
 8006e94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006e98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ea4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	78db      	ldrb	r3, [r3, #3]
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d024      	beq.n	8006efe <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006ece:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ed2:	f083 0320 	eor.w	r3, r3, #32
 8006ed6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	441a      	add	r2, r3
 8006ee4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
 8006efc:	e01d      	b.n	8006f3a <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	441a      	add	r2, r3
 8006f22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	441a      	add	r2, r3
 8006f5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006f62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006f76:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3774      	adds	r7, #116	; 0x74
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bc80      	pop	{r7}
 8006f82:	4770      	bx	lr

08006f84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b08d      	sub	sp, #52	; 0x34
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	7b1b      	ldrb	r3, [r3, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 808e 	bne.w	80070b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d044      	beq.n	800702a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	881b      	ldrh	r3, [r3, #0]
 8006fac:	81bb      	strh	r3, [r7, #12]
 8006fae:	89bb      	ldrh	r3, [r7, #12]
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01b      	beq.n	8006ff0 <USB_DeactivateEndpoint+0x6c>
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	817b      	strh	r3, [r7, #10]
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	897b      	ldrh	r3, [r7, #10]
 8006fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fe8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	881b      	ldrh	r3, [r3, #0]
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007002:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007006:	813b      	strh	r3, [r7, #8]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	441a      	add	r2, r3
 8007012:	893b      	ldrh	r3, [r7, #8]
 8007014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800701c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007024:	b29b      	uxth	r3, r3
 8007026:	8013      	strh	r3, [r2, #0]
 8007028:	e192      	b.n	8007350 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	827b      	strh	r3, [r7, #18]
 8007038:	8a7b      	ldrh	r3, [r7, #18]
 800703a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01b      	beq.n	800707a <USB_DeactivateEndpoint+0xf6>
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	881b      	ldrh	r3, [r3, #0]
 800704e:	b29b      	uxth	r3, r3
 8007050:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007058:	823b      	strh	r3, [r7, #16]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	441a      	add	r2, r3
 8007064:	8a3b      	ldrh	r3, [r7, #16]
 8007066:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800706a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800706e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007076:	b29b      	uxth	r3, r3
 8007078:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800708c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007090:	81fb      	strh	r3, [r7, #14]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	441a      	add	r2, r3
 800709c:	89fb      	ldrh	r3, [r7, #14]
 800709e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]
 80070b2:	e14d      	b.n	8007350 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	785b      	ldrb	r3, [r3, #1]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f040 80a5 	bne.w	8007208 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	881b      	ldrh	r3, [r3, #0]
 80070ca:	843b      	strh	r3, [r7, #32]
 80070cc:	8c3b      	ldrh	r3, [r7, #32]
 80070ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01b      	beq.n	800710e <USB_DeactivateEndpoint+0x18a>
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ec:	83fb      	strh	r3, [r7, #30]
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	8bfb      	ldrh	r3, [r7, #30]
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007102:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007106:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	4413      	add	r3, r2
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	83bb      	strh	r3, [r7, #28]
 800711c:	8bbb      	ldrh	r3, [r7, #28]
 800711e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007122:	2b00      	cmp	r3, #0
 8007124:	d01b      	beq.n	800715e <USB_DeactivateEndpoint+0x1da>
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	b29b      	uxth	r3, r3
 8007134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800713c:	837b      	strh	r3, [r7, #26]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	441a      	add	r2, r3
 8007148:	8b7b      	ldrh	r3, [r7, #26]
 800714a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800714e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007156:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800715a:	b29b      	uxth	r3, r3
 800715c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007174:	833b      	strh	r3, [r7, #24]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	441a      	add	r2, r3
 8007180:	8b3b      	ldrh	r3, [r7, #24]
 8007182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800718a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800718e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007192:	b29b      	uxth	r3, r3
 8007194:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ac:	82fb      	strh	r3, [r7, #22]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	441a      	add	r2, r3
 80071b8:	8afb      	ldrh	r3, [r7, #22]
 80071ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	b29b      	uxth	r3, r3
 80071dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071e4:	82bb      	strh	r3, [r7, #20]
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	441a      	add	r2, r3
 80071f0:	8abb      	ldrh	r3, [r7, #20]
 80071f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007202:	b29b      	uxth	r3, r3
 8007204:	8013      	strh	r3, [r2, #0]
 8007206:	e0a3      	b.n	8007350 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	881b      	ldrh	r3, [r3, #0]
 8007214:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007216:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01b      	beq.n	8007258 <USB_DeactivateEndpoint+0x2d4>
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007236:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	441a      	add	r2, r3
 8007242:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800724c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007254:	b29b      	uxth	r3, r3
 8007256:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01b      	beq.n	80072a8 <USB_DeactivateEndpoint+0x324>
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	881b      	ldrh	r3, [r3, #0]
 800727c:	b29b      	uxth	r3, r3
 800727e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007286:	853b      	strh	r3, [r7, #40]	; 0x28
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	441a      	add	r2, r3
 8007292:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800729c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80072cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072dc:	b29b      	uxth	r3, r3
 80072de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	441a      	add	r2, r3
 8007302:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800730c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007314:	b29b      	uxth	r3, r3
 8007316:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	881b      	ldrh	r3, [r3, #0]
 8007324:	b29b      	uxth	r3, r3
 8007326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800732a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	441a      	add	r2, r3
 800733a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800733c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734c:	b29b      	uxth	r3, r3
 800734e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3734      	adds	r7, #52	; 0x34
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b0c2      	sub	sp, #264	; 0x108
 8007360:	af00      	add	r7, sp, #0
 8007362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800736a:	6018      	str	r0, [r3, #0]
 800736c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007374:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	785b      	ldrb	r3, [r3, #1]
 8007382:	2b01      	cmp	r3, #1
 8007384:	f040 86b7 	bne.w	80080f6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800738c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	699a      	ldr	r2, [r3, #24]
 8007394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d908      	bls.n	80073b6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80073a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80073b4:	e007      	b.n	80073c6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80073b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80073c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	7b1b      	ldrb	r3, [r3, #12]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d13a      	bne.n	800744c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80073d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6959      	ldr	r1, [r3, #20]
 80073e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	88da      	ldrh	r2, [r3, #6]
 80073ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073f2:	b29b      	uxth	r3, r3
 80073f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80073f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	f001 fc9c 	bl	8008d3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007402:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007406:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800741c:	b29b      	uxth	r3, r3
 800741e:	461a      	mov	r2, r3
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	011a      	lsls	r2, r3, #4
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4413      	add	r3, r2
 8007438:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800743c:	60fb      	str	r3, [r7, #12]
 800743e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007442:	b29a      	uxth	r2, r3
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	f000 be1f 	b.w	800808a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800744c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007450:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	78db      	ldrb	r3, [r3, #3]
 8007458:	2b02      	cmp	r3, #2
 800745a:	f040 8462 	bne.w	8007d22 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800745e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6a1a      	ldr	r2, [r3, #32]
 800746a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800746e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	429a      	cmp	r2, r3
 8007478:	f240 83df 	bls.w	8007c3a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800747c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007480:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800748a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b29b      	uxth	r3, r3
 800749a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800749e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80074a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	441a      	add	r2, r3
 80074c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80074c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074cc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80074d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80074d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074e8:	1ad2      	subs	r2, r2, r3
 80074ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80074f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29b      	uxth	r3, r3
 8007514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007518:	2b00      	cmp	r3, #0
 800751a:	f000 81c7 	beq.w	80078ac <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800751e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	633b      	str	r3, [r7, #48]	; 0x30
 800752a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800752e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	785b      	ldrb	r3, [r3, #1]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d177      	bne.n	800762a <USB_EPStartXfer+0x2ce>
 800753a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800753e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
 8007546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800754a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007554:	b29b      	uxth	r3, r3
 8007556:	461a      	mov	r2, r3
 8007558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755a:	4413      	add	r3, r2
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
 800755e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	011a      	lsls	r2, r3, #4
 800756c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756e:	4413      	add	r3, r2
 8007570:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	881b      	ldrh	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007580:	b29a      	uxth	r2, r3
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	801a      	strh	r2, [r3, #0]
 8007586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800758a:	2b3e      	cmp	r3, #62	; 0x3e
 800758c:	d921      	bls.n	80075d2 <USB_EPStartXfer+0x276>
 800758e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d104      	bne.n	80075ae <USB_EPStartXfer+0x252>
 80075a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075a8:	3b01      	subs	r3, #1
 80075aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	029b      	lsls	r3, r3, #10
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4313      	orrs	r3, r2
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	e050      	b.n	8007674 <USB_EPStartXfer+0x318>
 80075d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <USB_EPStartXfer+0x294>
 80075da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e041      	b.n	8007674 <USB_EPStartXfer+0x318>
 80075f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f4:	085b      	lsrs	r3, r3, #1
 80075f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80075fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d004      	beq.n	8007610 <USB_EPStartXfer+0x2b4>
 8007606:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800760a:	3301      	adds	r3, #1
 800760c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	881b      	ldrh	r3, [r3, #0]
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800761a:	b29b      	uxth	r3, r3
 800761c:	029b      	lsls	r3, r3, #10
 800761e:	b29b      	uxth	r3, r3
 8007620:	4313      	orrs	r3, r2
 8007622:	b29a      	uxth	r2, r3
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	801a      	strh	r2, [r3, #0]
 8007628:	e024      	b.n	8007674 <USB_EPStartXfer+0x318>
 800762a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800762e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d11c      	bne.n	8007674 <USB_EPStartXfer+0x318>
 800763a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800763e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764e:	4413      	add	r3, r2
 8007650:	633b      	str	r3, [r7, #48]	; 0x30
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	011a      	lsls	r2, r3, #4
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	4413      	add	r3, r2
 8007664:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800766e:	b29a      	uxth	r2, r3
 8007670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	895b      	ldrh	r3, [r3, #10]
 8007680:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6959      	ldr	r1, [r3, #20]
 8007690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007694:	b29b      	uxth	r3, r3
 8007696:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800769a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800769e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80076a2:	6800      	ldr	r0, [r0, #0]
 80076a4:	f001 fb49 	bl	8008d3a <USB_WritePMA>
            ep->xfer_buff += len;
 80076a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b8:	441a      	add	r2, r3
 80076ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d90f      	bls.n	8007702 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80076e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	621a      	str	r2, [r3, #32]
 8007700:	e00e      	b.n	8007720 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d177      	bne.n	8007820 <USB_EPStartXfer+0x4c4>
 8007730:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007734:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	61bb      	str	r3, [r7, #24]
 800773c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800774a:	b29b      	uxth	r3, r3
 800774c:	461a      	mov	r2, r3
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	4413      	add	r3, r2
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	011a      	lsls	r2, r3, #4
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	4413      	add	r3, r2
 8007766:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800776a:	617b      	str	r3, [r7, #20]
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007776:	b29a      	uxth	r2, r3
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	801a      	strh	r2, [r3, #0]
 800777c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007780:	2b3e      	cmp	r3, #62	; 0x3e
 8007782:	d921      	bls.n	80077c8 <USB_EPStartXfer+0x46c>
 8007784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007788:	095b      	lsrs	r3, r3, #5
 800778a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800778e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <USB_EPStartXfer+0x448>
 800779a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800779e:	3b01      	subs	r3, #1
 80077a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	029b      	lsls	r3, r3, #10
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	801a      	strh	r2, [r3, #0]
 80077c6:	e056      	b.n	8007876 <USB_EPStartXfer+0x51a>
 80077c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10a      	bne.n	80077e6 <USB_EPStartXfer+0x48a>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077de:	b29a      	uxth	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e047      	b.n	8007876 <USB_EPStartXfer+0x51a>
 80077e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077ea:	085b      	lsrs	r3, r3, #1
 80077ec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80077f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077f4:	f003 0301 	and.w	r3, r3, #1
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <USB_EPStartXfer+0x4aa>
 80077fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007800:	3301      	adds	r3, #1
 8007802:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29a      	uxth	r2, r3
 800780c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007810:	b29b      	uxth	r3, r3
 8007812:	029b      	lsls	r3, r3, #10
 8007814:	b29b      	uxth	r3, r3
 8007816:	4313      	orrs	r3, r2
 8007818:	b29a      	uxth	r2, r3
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	801a      	strh	r2, [r3, #0]
 800781e:	e02a      	b.n	8007876 <USB_EPStartXfer+0x51a>
 8007820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d122      	bne.n	8007876 <USB_EPStartXfer+0x51a>
 8007830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007834:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	623b      	str	r3, [r7, #32]
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800784a:	b29b      	uxth	r3, r3
 800784c:	461a      	mov	r2, r3
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	4413      	add	r3, r2
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	4413      	add	r3, r2
 8007866:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007870:	b29a      	uxth	r2, r3
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	891b      	ldrh	r3, [r3, #8]
 8007882:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800788a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6959      	ldr	r1, [r3, #20]
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007896:	b29b      	uxth	r3, r3
 8007898:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800789c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80078a0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80078a4:	6800      	ldr	r0, [r0, #0]
 80078a6:	f001 fa48 	bl	8008d3a <USB_WritePMA>
 80078aa:	e3ee      	b.n	800808a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d177      	bne.n	80079ac <USB_EPStartXfer+0x650>
 80078bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80078c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	461a      	mov	r2, r3
 80078da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078dc:	4413      	add	r3, r2
 80078de:	64bb      	str	r3, [r7, #72]	; 0x48
 80078e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	011a      	lsls	r2, r3, #4
 80078ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078f0:	4413      	add	r3, r2
 80078f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078f6:	647b      	str	r3, [r7, #68]	; 0x44
 80078f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078fa:	881b      	ldrh	r3, [r3, #0]
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007902:	b29a      	uxth	r2, r3
 8007904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800790c:	2b3e      	cmp	r3, #62	; 0x3e
 800790e:	d921      	bls.n	8007954 <USB_EPStartXfer+0x5f8>
 8007910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007914:	095b      	lsrs	r3, r3, #5
 8007916:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800791a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <USB_EPStartXfer+0x5d4>
 8007926:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800792a:	3b01      	subs	r3, #1
 800792c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007932:	881b      	ldrh	r3, [r3, #0]
 8007934:	b29a      	uxth	r2, r3
 8007936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800793a:	b29b      	uxth	r3, r3
 800793c:	029b      	lsls	r3, r3, #10
 800793e:	b29b      	uxth	r3, r3
 8007940:	4313      	orrs	r3, r2
 8007942:	b29b      	uxth	r3, r3
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29a      	uxth	r2, r3
 800794e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007950:	801a      	strh	r2, [r3, #0]
 8007952:	e056      	b.n	8007a02 <USB_EPStartXfer+0x6a6>
 8007954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <USB_EPStartXfer+0x616>
 800795c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	b29b      	uxth	r3, r3
 8007962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800796a:	b29a      	uxth	r2, r3
 800796c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796e:	801a      	strh	r2, [r3, #0]
 8007970:	e047      	b.n	8007a02 <USB_EPStartXfer+0x6a6>
 8007972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007976:	085b      	lsrs	r3, r3, #1
 8007978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800797c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	2b00      	cmp	r3, #0
 8007986:	d004      	beq.n	8007992 <USB_EPStartXfer+0x636>
 8007988:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800798c:	3301      	adds	r3, #1
 800798e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	b29a      	uxth	r2, r3
 8007998:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800799c:	b29b      	uxth	r3, r3
 800799e:	029b      	lsls	r3, r3, #10
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	4313      	orrs	r3, r2
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079a8:	801a      	strh	r2, [r3, #0]
 80079aa:	e02a      	b.n	8007a02 <USB_EPStartXfer+0x6a6>
 80079ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	785b      	ldrb	r3, [r3, #1]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d122      	bne.n	8007a02 <USB_EPStartXfer+0x6a6>
 80079bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	653b      	str	r3, [r7, #80]	; 0x50
 80079c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	461a      	mov	r2, r3
 80079da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079dc:	4413      	add	r3, r2
 80079de:	653b      	str	r3, [r7, #80]	; 0x50
 80079e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	011a      	lsls	r2, r3, #4
 80079ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079f0:	4413      	add	r3, r2
 80079f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	891b      	ldrh	r3, [r3, #8]
 8007a0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6959      	ldr	r1, [r3, #20]
 8007a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007a28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007a2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007a30:	6800      	ldr	r0, [r0, #0]
 8007a32:	f001 f982 	bl	8008d3a <USB_WritePMA>
            ep->xfer_buff += len;
 8007a36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a46:	441a      	add	r2, r3
 8007a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6a1a      	ldr	r2, [r3, #32]
 8007a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d90f      	bls.n	8007a90 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007a70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6a1a      	ldr	r2, [r3, #32]
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a80:	1ad2      	subs	r2, r2, r3
 8007a82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	621a      	str	r2, [r3, #32]
 8007a8e:	e00e      	b.n	8007aae <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007a90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8007aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	785b      	ldrb	r3, [r3, #1]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d177      	bne.n	8007bba <USB_EPStartXfer+0x85e>
 8007aca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ace:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	4413      	add	r3, r2
 8007aec:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	011a      	lsls	r2, r3, #4
 8007afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007afe:	4413      	add	r3, r2
 8007b00:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b04:	637b      	str	r3, [r7, #52]	; 0x34
 8007b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b10:	b29a      	uxth	r2, r3
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	801a      	strh	r2, [r3, #0]
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007b1c:	d921      	bls.n	8007b62 <USB_EPStartXfer+0x806>
 8007b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b2c:	f003 031f 	and.w	r3, r3, #31
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d104      	bne.n	8007b3e <USB_EPStartXfer+0x7e2>
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	029b      	lsls	r3, r3, #10
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	e050      	b.n	8007c04 <USB_EPStartXfer+0x8a8>
 8007b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d10a      	bne.n	8007b80 <USB_EPStartXfer+0x824>
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6c:	881b      	ldrh	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b7c:	801a      	strh	r2, [r3, #0]
 8007b7e:	e041      	b.n	8007c04 <USB_EPStartXfer+0x8a8>
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b84:	085b      	lsrs	r3, r3, #1
 8007b86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USB_EPStartXfer+0x844>
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9a:	3301      	adds	r3, #1
 8007b9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	029b      	lsls	r3, r3, #10
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e024      	b.n	8007c04 <USB_EPStartXfer+0x8a8>
 8007bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	785b      	ldrb	r3, [r3, #1]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d11c      	bne.n	8007c04 <USB_EPStartXfer+0x8a8>
 8007bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	461a      	mov	r2, r3
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bde:	4413      	add	r3, r2
 8007be0:	643b      	str	r3, [r7, #64]	; 0x40
 8007be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007be6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	011a      	lsls	r2, r3, #4
 8007bf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c02:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	895b      	ldrh	r3, [r3, #10]
 8007c10:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6959      	ldr	r1, [r3, #20]
 8007c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007c2a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007c2e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007c32:	6800      	ldr	r0, [r0, #0]
 8007c34:	f001 f881 	bl	8008d3a <USB_WritePMA>
 8007c38:	e227      	b.n	800808a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	441a      	add	r2, r3
 8007c8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007caa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cc6:	4413      	add	r3, r2
 8007cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	011a      	lsls	r2, r3, #4
 8007cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cda:	4413      	add	r3, r2
 8007cdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	891b      	ldrh	r3, [r3, #8]
 8007cf8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	6959      	ldr	r1, [r3, #20]
 8007d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d0c:	b29b      	uxth	r3, r3
 8007d0e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007d12:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d16:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d1a:	6800      	ldr	r0, [r0, #0]
 8007d1c:	f001 f80d 	bl	8008d3a <USB_WritePMA>
 8007d20:	e1b3      	b.n	800808a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	6a1a      	ldr	r2, [r3, #32]
 8007d2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d32:	1ad2      	subs	r2, r2, r3
 8007d34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 80c6 	beq.w	8007ef4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	673b      	str	r3, [r7, #112]	; 0x70
 8007d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	785b      	ldrb	r3, [r3, #1]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d177      	bne.n	8007e74 <USB_EPStartXfer+0xb18>
 8007d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	461a      	mov	r2, r3
 8007da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007da4:	4413      	add	r3, r2
 8007da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	011a      	lsls	r2, r3, #4
 8007db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007db8:	4413      	add	r3, r2
 8007dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dbe:	667b      	str	r3, [r7, #100]	; 0x64
 8007dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dca:	b29a      	uxth	r2, r3
 8007dcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dce:	801a      	strh	r2, [r3, #0]
 8007dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007dd4:	2b3e      	cmp	r3, #62	; 0x3e
 8007dd6:	d921      	bls.n	8007e1c <USB_EPStartXfer+0xac0>
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ddc:	095b      	lsrs	r3, r3, #5
 8007dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d104      	bne.n	8007df8 <USB_EPStartXfer+0xa9c>
 8007dee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007df2:	3b01      	subs	r3, #1
 8007df4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29a      	uxth	r2, r3
 8007dfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	029b      	lsls	r3, r3, #10
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	e050      	b.n	8007ebe <USB_EPStartXfer+0xb62>
 8007e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10a      	bne.n	8007e3a <USB_EPStartXfer+0xade>
 8007e24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e32:	b29a      	uxth	r2, r3
 8007e34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e36:	801a      	strh	r2, [r3, #0]
 8007e38:	e041      	b.n	8007ebe <USB_EPStartXfer+0xb62>
 8007e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d004      	beq.n	8007e5a <USB_EPStartXfer+0xafe>
 8007e50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e54:	3301      	adds	r3, #1
 8007e56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e70:	801a      	strh	r2, [r3, #0]
 8007e72:	e024      	b.n	8007ebe <USB_EPStartXfer+0xb62>
 8007e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	785b      	ldrb	r3, [r3, #1]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d11c      	bne.n	8007ebe <USB_EPStartXfer+0xb62>
 8007e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	461a      	mov	r2, r3
 8007e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e98:	4413      	add	r3, r2
 8007e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8007e9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	011a      	lsls	r2, r3, #4
 8007eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eac:	4413      	add	r3, r2
 8007eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ebc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	895b      	ldrh	r3, [r3, #10]
 8007eca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6959      	ldr	r1, [r3, #20]
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007ee4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007ee8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007eec:	6800      	ldr	r0, [r0, #0]
 8007eee:	f000 ff24 	bl	8008d3a <USB_WritePMA>
 8007ef2:	e0ca      	b.n	800808a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	785b      	ldrb	r3, [r3, #1]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d177      	bne.n	8007ff4 <USB_EPStartXfer+0xc98>
 8007f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	461a      	mov	r2, r3
 8007f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f24:	4413      	add	r3, r2
 8007f26:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	011a      	lsls	r2, r3, #4
 8007f36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f38:	4413      	add	r3, r2
 8007f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8007f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f4e:	801a      	strh	r2, [r3, #0]
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f54:	2b3e      	cmp	r3, #62	; 0x3e
 8007f56:	d921      	bls.n	8007f9c <USB_EPStartXfer+0xc40>
 8007f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f5c:	095b      	lsrs	r3, r3, #5
 8007f5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f66:	f003 031f 	and.w	r3, r3, #31
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d104      	bne.n	8007f78 <USB_EPStartXfer+0xc1c>
 8007f6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f72:	3b01      	subs	r3, #1
 8007f74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	029b      	lsls	r3, r3, #10
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f98:	801a      	strh	r2, [r3, #0]
 8007f9a:	e05c      	b.n	8008056 <USB_EPStartXfer+0xcfa>
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <USB_EPStartXfer+0xc5e>
 8007fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fa6:	881b      	ldrh	r3, [r3, #0]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fb6:	801a      	strh	r2, [r3, #0]
 8007fb8:	e04d      	b.n	8008056 <USB_EPStartXfer+0xcfa>
 8007fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fbe:	085b      	lsrs	r3, r3, #1
 8007fc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <USB_EPStartXfer+0xc7e>
 8007fd0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fdc:	881b      	ldrh	r3, [r3, #0]
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	029b      	lsls	r3, r3, #10
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	4313      	orrs	r3, r2
 8007fec:	b29a      	uxth	r2, r3
 8007fee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff0:	801a      	strh	r2, [r3, #0]
 8007ff2:	e030      	b.n	8008056 <USB_EPStartXfer+0xcfa>
 8007ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	785b      	ldrb	r3, [r3, #1]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d128      	bne.n	8008056 <USB_EPStartXfer+0xcfa>
 8008004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008012:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008016:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008020:	b29b      	uxth	r3, r3
 8008022:	461a      	mov	r2, r3
 8008024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008028:	4413      	add	r3, r2
 800802a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800802e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	011a      	lsls	r2, r3, #4
 800803c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008040:	4413      	add	r3, r2
 8008042:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800804a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800804e:	b29a      	uxth	r2, r3
 8008050:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008054:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800805a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	891b      	ldrh	r3, [r3, #8]
 8008062:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800806a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6959      	ldr	r1, [r3, #20]
 8008072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008076:	b29b      	uxth	r3, r3
 8008078:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800807c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008080:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008084:	6800      	ldr	r0, [r0, #0]
 8008086:	f000 fe58 	bl	8008d3a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800808a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800808e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b0:	817b      	strh	r3, [r7, #10]
 80080b2:	897b      	ldrh	r3, [r7, #10]
 80080b4:	f083 0310 	eor.w	r3, r3, #16
 80080b8:	817b      	strh	r3, [r7, #10]
 80080ba:	897b      	ldrh	r3, [r7, #10]
 80080bc:	f083 0320 	eor.w	r3, r3, #32
 80080c0:	817b      	strh	r3, [r7, #10]
 80080c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80080ca:	681a      	ldr	r2, [r3, #0]
 80080cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	441a      	add	r2, r3
 80080dc:	897b      	ldrh	r3, [r7, #10]
 80080de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	8013      	strh	r3, [r2, #0]
 80080f2:	f000 bcde 	b.w	8008ab2 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80080f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80080fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	7b1b      	ldrb	r3, [r3, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	f040 80bb 	bne.w	800827e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008108:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800810c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	429a      	cmp	r2, r3
 8008122:	d917      	bls.n	8008154 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008128:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008144:	1ad2      	subs	r2, r2, r3
 8008146:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800814a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	619a      	str	r2, [r3, #24]
 8008152:	e00e      	b.n	8008172 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008164:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008168:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2200      	movs	r2, #0
 8008170:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818e:	b29b      	uxth	r3, r3
 8008190:	461a      	mov	r2, r3
 8008192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008196:	4413      	add	r3, r2
 8008198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800819c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	011a      	lsls	r2, r3, #4
 80081aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081ae:	4413      	add	r3, r2
 80081b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80081b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081bc:	881b      	ldrh	r3, [r3, #0]
 80081be:	b29b      	uxth	r3, r3
 80081c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081ca:	801a      	strh	r2, [r3, #0]
 80081cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d0:	2b3e      	cmp	r3, #62	; 0x3e
 80081d2:	d924      	bls.n	800821e <USB_EPStartXfer+0xec2>
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d8:	095b      	lsrs	r3, r3, #5
 80081da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d104      	bne.n	80081f4 <USB_EPStartXfer+0xe98>
 80081ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80081ee:	3b01      	subs	r3, #1
 80081f0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008200:	b29b      	uxth	r3, r3
 8008202:	029b      	lsls	r3, r3, #10
 8008204:	b29b      	uxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b29b      	uxth	r3, r3
 800820a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800820e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008212:	b29a      	uxth	r2, r3
 8008214:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008218:	801a      	strh	r2, [r3, #0]
 800821a:	f000 bc10 	b.w	8008a3e <USB_EPStartXfer+0x16e2>
 800821e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10c      	bne.n	8008240 <USB_EPStartXfer+0xee4>
 8008226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	b29b      	uxth	r3, r3
 800822e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008232:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008236:	b29a      	uxth	r2, r3
 8008238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800823c:	801a      	strh	r2, [r3, #0]
 800823e:	e3fe      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
 8008240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008244:	085b      	lsrs	r3, r3, #1
 8008246:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d004      	beq.n	8008260 <USB_EPStartXfer+0xf04>
 8008256:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800825a:	3301      	adds	r3, #1
 800825c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008260:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29a      	uxth	r2, r3
 8008268:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800826c:	b29b      	uxth	r3, r3
 800826e:	029b      	lsls	r3, r3, #10
 8008270:	b29b      	uxth	r3, r3
 8008272:	4313      	orrs	r3, r2
 8008274:	b29a      	uxth	r2, r3
 8008276:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800827a:	801a      	strh	r2, [r3, #0]
 800827c:	e3df      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800827e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	78db      	ldrb	r3, [r3, #3]
 800828a:	2b02      	cmp	r3, #2
 800828c:	f040 8218 	bne.w	80086c0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 809d 	bne.w	80083dc <USB_EPStartXfer+0x1080>
 80082a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082be:	b29b      	uxth	r3, r3
 80082c0:	461a      	mov	r2, r3
 80082c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c6:	4413      	add	r3, r2
 80082c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	011a      	lsls	r2, r3, #4
 80082da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082de:	4413      	add	r3, r2
 80082e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082f4:	b29a      	uxth	r2, r3
 80082f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80082fa:	801a      	strh	r2, [r3, #0]
 80082fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008300:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	691b      	ldr	r3, [r3, #16]
 8008308:	2b3e      	cmp	r3, #62	; 0x3e
 800830a:	d92b      	bls.n	8008364 <USB_EPStartXfer+0x1008>
 800830c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	691b      	ldr	r3, [r3, #16]
 8008318:	095b      	lsrs	r3, r3, #5
 800831a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800831e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	691b      	ldr	r3, [r3, #16]
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2b00      	cmp	r3, #0
 8008330:	d104      	bne.n	800833c <USB_EPStartXfer+0xfe0>
 8008332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008336:	3b01      	subs	r3, #1
 8008338:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800833c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008340:	881b      	ldrh	r3, [r3, #0]
 8008342:	b29a      	uxth	r2, r3
 8008344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008348:	b29b      	uxth	r3, r3
 800834a:	029b      	lsls	r3, r3, #10
 800834c:	b29b      	uxth	r3, r3
 800834e:	4313      	orrs	r3, r2
 8008350:	b29b      	uxth	r3, r3
 8008352:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008356:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800835a:	b29a      	uxth	r2, r3
 800835c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008360:	801a      	strh	r2, [r3, #0]
 8008362:	e070      	b.n	8008446 <USB_EPStartXfer+0x10ea>
 8008364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10c      	bne.n	800838e <USB_EPStartXfer+0x1032>
 8008374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008384:	b29a      	uxth	r2, r3
 8008386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800838a:	801a      	strh	r2, [r3, #0]
 800838c:	e05b      	b.n	8008446 <USB_EPStartXfer+0x10ea>
 800838e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <USB_EPStartXfer+0x1062>
 80083b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083b8:	3301      	adds	r3, #1
 80083ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80083be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083c2:	881b      	ldrh	r3, [r3, #0]
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	029b      	lsls	r3, r3, #10
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	4313      	orrs	r3, r2
 80083d2:	b29a      	uxth	r2, r3
 80083d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80083d8:	801a      	strh	r2, [r3, #0]
 80083da:	e034      	b.n	8008446 <USB_EPStartXfer+0x10ea>
 80083dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d12c      	bne.n	8008446 <USB_EPStartXfer+0x10ea>
 80083ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008408:	b29b      	uxth	r3, r3
 800840a:	461a      	mov	r2, r3
 800840c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008410:	4413      	add	r3, r2
 8008412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	011a      	lsls	r2, r3, #4
 8008424:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008428:	4413      	add	r3, r2
 800842a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800842e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	b29a      	uxth	r2, r3
 8008440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008444:	801a      	strh	r2, [r3, #0]
 8008446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800844a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	785b      	ldrb	r3, [r3, #1]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f040 809d 	bne.w	80085a0 <USB_EPStartXfer+0x1244>
 8008466:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800846a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008478:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008482:	b29b      	uxth	r3, r3
 8008484:	461a      	mov	r2, r3
 8008486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800848a:	4413      	add	r3, r2
 800848c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	011a      	lsls	r2, r3, #4
 800849e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80084a2:	4413      	add	r3, r2
 80084a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80084a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80084ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084b0:	881b      	ldrh	r3, [r3, #0]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084b8:	b29a      	uxth	r2, r3
 80084ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	2b3e      	cmp	r3, #62	; 0x3e
 80084ce:	d92b      	bls.n	8008528 <USB_EPStartXfer+0x11cc>
 80084d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	095b      	lsrs	r3, r3, #5
 80084de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80084e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	f003 031f 	and.w	r3, r3, #31
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d104      	bne.n	8008500 <USB_EPStartXfer+0x11a4>
 80084f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fa:	3b01      	subs	r3, #1
 80084fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008500:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29a      	uxth	r2, r3
 8008508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850c:	b29b      	uxth	r3, r3
 800850e:	029b      	lsls	r3, r3, #10
 8008510:	b29b      	uxth	r3, r3
 8008512:	4313      	orrs	r3, r2
 8008514:	b29b      	uxth	r3, r3
 8008516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800851e:	b29a      	uxth	r2, r3
 8008520:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008524:	801a      	strh	r2, [r3, #0]
 8008526:	e069      	b.n	80085fc <USB_EPStartXfer+0x12a0>
 8008528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10c      	bne.n	8008552 <USB_EPStartXfer+0x11f6>
 8008538:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008548:	b29a      	uxth	r2, r3
 800854a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	e054      	b.n	80085fc <USB_EPStartXfer+0x12a0>
 8008552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	2b00      	cmp	r3, #0
 8008576:	d004      	beq.n	8008582 <USB_EPStartXfer+0x1226>
 8008578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857c:	3301      	adds	r3, #1
 800857e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008582:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29a      	uxth	r2, r3
 800858a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800858e:	b29b      	uxth	r3, r3
 8008590:	029b      	lsls	r3, r3, #10
 8008592:	b29b      	uxth	r3, r3
 8008594:	4313      	orrs	r3, r2
 8008596:	b29a      	uxth	r2, r3
 8008598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800859c:	801a      	strh	r2, [r3, #0]
 800859e:	e02d      	b.n	80085fc <USB_EPStartXfer+0x12a0>
 80085a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d125      	bne.n	80085fc <USB_EPStartXfer+0x12a0>
 80085b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085be:	b29b      	uxth	r3, r3
 80085c0:	461a      	mov	r2, r3
 80085c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085c6:	4413      	add	r3, r2
 80085c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80085cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	011a      	lsls	r2, r3, #4
 80085da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80085de:	4413      	add	r3, r2
 80085e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80085e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085fa:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80085fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69db      	ldr	r3, [r3, #28]
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 8218 	beq.w	8008a3e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800860e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800861c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800862e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <USB_EPStartXfer+0x12ea>
 800863a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800863e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008646:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800864a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800864e:	2b00      	cmp	r3, #0
 8008650:	f040 81f5 	bne.w	8008a3e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008654:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 81ee 	bne.w	8008a3e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008688:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800868c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80086aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086b6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	8013      	strh	r3, [r2, #0]
 80086be:	e1be      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80086c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	78db      	ldrb	r3, [r3, #3]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	f040 81b4 	bne.w	8008a3a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80086d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	699a      	ldr	r2, [r3, #24]
 80086de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d917      	bls.n	800871e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80086ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80086fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	699a      	ldr	r2, [r3, #24]
 800870a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870e:	1ad2      	subs	r2, r2, r3
 8008710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008714:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	619a      	str	r2, [r3, #24]
 800871c:	e00e      	b.n	800873c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800871e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008722:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800872e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2200      	movs	r2, #0
 800873a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800873c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b00      	cmp	r3, #0
 800874a:	f040 8085 	bne.w	8008858 <USB_EPStartXfer+0x14fc>
 800874e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800875c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008760:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800876a:	b29b      	uxth	r3, r3
 800876c:	461a      	mov	r2, r3
 800876e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008772:	4413      	add	r3, r2
 8008774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	011a      	lsls	r2, r3, #4
 8008786:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800878a:	4413      	add	r3, r2
 800878c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087a6:	801a      	strh	r2, [r3, #0]
 80087a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ac:	2b3e      	cmp	r3, #62	; 0x3e
 80087ae:	d923      	bls.n	80087f8 <USB_EPStartXfer+0x149c>
 80087b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b4:	095b      	lsrs	r3, r3, #5
 80087b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087be:	f003 031f 	and.w	r3, r3, #31
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d104      	bne.n	80087d0 <USB_EPStartXfer+0x1474>
 80087c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ca:	3b01      	subs	r3, #1
 80087cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80087d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087d4:	881b      	ldrh	r3, [r3, #0]
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087dc:	b29b      	uxth	r3, r3
 80087de:	029b      	lsls	r3, r3, #10
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	4313      	orrs	r3, r2
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087f4:	801a      	strh	r2, [r3, #0]
 80087f6:	e060      	b.n	80088ba <USB_EPStartXfer+0x155e>
 80087f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d10c      	bne.n	800881a <USB_EPStartXfer+0x14be>
 8008800:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008804:	881b      	ldrh	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008810:	b29a      	uxth	r2, r3
 8008812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008816:	801a      	strh	r2, [r3, #0]
 8008818:	e04f      	b.n	80088ba <USB_EPStartXfer+0x155e>
 800881a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800881e:	085b      	lsrs	r3, r3, #1
 8008820:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d004      	beq.n	800883a <USB_EPStartXfer+0x14de>
 8008830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008834:	3301      	adds	r3, #1
 8008836:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800883a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800883e:	881b      	ldrh	r3, [r3, #0]
 8008840:	b29a      	uxth	r2, r3
 8008842:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008846:	b29b      	uxth	r3, r3
 8008848:	029b      	lsls	r3, r3, #10
 800884a:	b29b      	uxth	r3, r3
 800884c:	4313      	orrs	r3, r2
 800884e:	b29a      	uxth	r2, r3
 8008850:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008854:	801a      	strh	r2, [r3, #0]
 8008856:	e030      	b.n	80088ba <USB_EPStartXfer+0x155e>
 8008858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d128      	bne.n	80088ba <USB_EPStartXfer+0x155e>
 8008868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008884:	b29b      	uxth	r3, r3
 8008886:	461a      	mov	r2, r3
 8008888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800888c:	4413      	add	r3, r2
 800888e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008896:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	011a      	lsls	r2, r3, #4
 80088a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088a4:	4413      	add	r3, r2
 80088a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80088ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80088b8:	801a      	strh	r2, [r3, #0]
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	785b      	ldrb	r3, [r3, #1]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f040 8085 	bne.w	80089e4 <USB_EPStartXfer+0x1688>
 80088da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80088e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80088fe:	4413      	add	r3, r2
 8008900:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	011a      	lsls	r2, r3, #4
 8008912:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008916:	4413      	add	r3, r2
 8008918:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800891c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008924:	881b      	ldrh	r3, [r3, #0]
 8008926:	b29b      	uxth	r3, r3
 8008928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800892c:	b29a      	uxth	r2, r3
 800892e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008938:	2b3e      	cmp	r3, #62	; 0x3e
 800893a:	d923      	bls.n	8008984 <USB_EPStartXfer+0x1628>
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008946:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894a:	f003 031f 	and.w	r3, r3, #31
 800894e:	2b00      	cmp	r3, #0
 8008950:	d104      	bne.n	800895c <USB_EPStartXfer+0x1600>
 8008952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008956:	3b01      	subs	r3, #1
 8008958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800895c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29a      	uxth	r2, r3
 8008964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008968:	b29b      	uxth	r3, r3
 800896a:	029b      	lsls	r3, r3, #10
 800896c:	b29b      	uxth	r3, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008976:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800897a:	b29a      	uxth	r2, r3
 800897c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008980:	801a      	strh	r2, [r3, #0]
 8008982:	e05c      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
 8008984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10c      	bne.n	80089a6 <USB_EPStartXfer+0x164a>
 800898c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089a2:	801a      	strh	r2, [r3, #0]
 80089a4:	e04b      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <USB_EPStartXfer+0x166a>
 80089bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c0:	3301      	adds	r3, #1
 80089c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089ca:	881b      	ldrh	r3, [r3, #0]
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	029b      	lsls	r3, r3, #10
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	4313      	orrs	r3, r2
 80089da:	b29a      	uxth	r2, r3
 80089dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80089e0:	801a      	strh	r2, [r3, #0]
 80089e2:	e02c      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
 80089e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d124      	bne.n	8008a3e <USB_EPStartXfer+0x16e2>
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	011a      	lsls	r2, r3, #4
 8008a1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008a22:	4413      	add	r3, r2
 8008a24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a30:	b29a      	uxth	r2, r3
 8008a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008a36:	801a      	strh	r2, [r3, #0]
 8008a38:	e001      	b.n	8008a3e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e03a      	b.n	8008ab4 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	881b      	ldrh	r3, [r3, #0]
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a64:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a6c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	441a      	add	r2, r3
 8008a9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	785b      	ldrb	r3, [r3, #1]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d020      	beq.n	8008b12 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	4413      	add	r3, r2
 8008ada:	881b      	ldrh	r3, [r3, #0]
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ae2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae6:	81bb      	strh	r3, [r7, #12]
 8008ae8:	89bb      	ldrh	r3, [r7, #12]
 8008aea:	f083 0310 	eor.w	r3, r3, #16
 8008aee:	81bb      	strh	r3, [r7, #12]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	441a      	add	r2, r3
 8008afa:	89bb      	ldrh	r3, [r7, #12]
 8008afc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	8013      	strh	r3, [r2, #0]
 8008b10:	e01f      	b.n	8008b52 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b28:	81fb      	strh	r3, [r7, #14]
 8008b2a:	89fb      	ldrh	r3, [r7, #14]
 8008b2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b30:	81fb      	strh	r3, [r7, #14]
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	441a      	add	r2, r3
 8008b3c:	89fb      	ldrh	r3, [r7, #14]
 8008b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bc80      	pop	{r7}
 8008b5c:	4770      	bx	lr

08008b5e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b087      	sub	sp, #28
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
 8008b66:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	7b1b      	ldrb	r3, [r3, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f040 809d 	bne.w	8008cac <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	785b      	ldrb	r3, [r3, #1]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d04c      	beq.n	8008c14 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	881b      	ldrh	r3, [r3, #0]
 8008b86:	823b      	strh	r3, [r7, #16]
 8008b88:	8a3b      	ldrh	r3, [r7, #16]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d01b      	beq.n	8008bca <USB_EPClearStall+0x6c>
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	881b      	ldrh	r3, [r3, #0]
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ba8:	81fb      	strh	r3, [r7, #14]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	89fb      	ldrh	r3, [r7, #14]
 8008bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	78db      	ldrb	r3, [r3, #3]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d06c      	beq.n	8008cac <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be8:	81bb      	strh	r3, [r7, #12]
 8008bea:	89bb      	ldrh	r3, [r7, #12]
 8008bec:	f083 0320 	eor.w	r3, r3, #32
 8008bf0:	81bb      	strh	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	441a      	add	r2, r3
 8008bfc:	89bb      	ldrh	r3, [r7, #12]
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]
 8008c12:	e04b      	b.n	8008cac <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	82fb      	strh	r3, [r7, #22]
 8008c22:	8afb      	ldrh	r3, [r7, #22]
 8008c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01b      	beq.n	8008c64 <USB_EPClearStall+0x106>
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	781b      	ldrb	r3, [r3, #0]
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4413      	add	r3, r2
 8008c36:	881b      	ldrh	r3, [r3, #0]
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c42:	82bb      	strh	r3, [r7, #20]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	441a      	add	r2, r3
 8008c4e:	8abb      	ldrh	r3, [r7, #20]
 8008c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	4413      	add	r3, r2
 8008c6e:	881b      	ldrh	r3, [r3, #0]
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c7a:	827b      	strh	r3, [r7, #18]
 8008c7c:	8a7b      	ldrh	r3, [r7, #18]
 8008c7e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c82:	827b      	strh	r3, [r7, #18]
 8008c84:	8a7b      	ldrh	r3, [r7, #18]
 8008c86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c8a:	827b      	strh	r3, [r7, #18]
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	441a      	add	r2, r3
 8008c96:	8a7b      	ldrh	r3, [r7, #18]
 8008c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	371c      	adds	r7, #28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bc80      	pop	{r7}
 8008cb6:	4770      	bx	lr

08008cb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
 8008cc0:	460b      	mov	r3, r1
 8008cc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d103      	bne.n	8008cd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2280      	movs	r2, #128	; 0x80
 8008cce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bc80      	pop	{r7}
 8008cdc:	4770      	bx	lr

08008cde <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b083      	sub	sp, #12
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008ce6:	2300      	movs	r3, #0
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bc80      	pop	{r7}
 8008cf0:	4770      	bx	lr

08008cf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bc80      	pop	{r7}
 8008d04:	4770      	bx	lr

08008d06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d18:	68fb      	ldr	r3, [r7, #12]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	4618      	mov	r0, r3
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b08b      	sub	sp, #44	; 0x2c
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	60f8      	str	r0, [r7, #12]
 8008d42:	60b9      	str	r1, [r7, #8]
 8008d44:	4611      	mov	r1, r2
 8008d46:	461a      	mov	r2, r3
 8008d48:	460b      	mov	r3, r1
 8008d4a:	80fb      	strh	r3, [r7, #6]
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008d50:	88bb      	ldrh	r3, [r7, #4]
 8008d52:	3301      	adds	r3, #1
 8008d54:	085b      	lsrs	r3, r3, #1
 8008d56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	005a      	lsls	r2, r3, #1
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	4413      	add	r3, r2
 8008d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d6c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
 8008d72:	e01e      	b.n	8008db2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	021b      	lsls	r3, r3, #8
 8008d82:	b21a      	sxth	r2, r3
 8008d84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	b21b      	sxth	r3, r3
 8008d8c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	8a7a      	ldrh	r2, [r7, #18]
 8008d92:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	3302      	adds	r3, #2
 8008d98:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	3301      	adds	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	3301      	adds	r3, #1
 8008daa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	3b01      	subs	r3, #1
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1dd      	bne.n	8008d74 <USB_WritePMA+0x3a>
  }
}
 8008db8:	bf00      	nop
 8008dba:	bf00      	nop
 8008dbc:	372c      	adds	r7, #44	; 0x2c
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr

08008dc4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b08b      	sub	sp, #44	; 0x2c
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	4611      	mov	r1, r2
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	80fb      	strh	r3, [r7, #6]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008dda:	88bb      	ldrh	r3, [r7, #4]
 8008ddc:	085b      	lsrs	r3, r3, #1
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dea:	88fb      	ldrh	r3, [r7, #6]
 8008dec:	005a      	lsls	r2, r3, #1
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008df6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008df8:	69bb      	ldr	r3, [r7, #24]
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8008dfc:	e01b      	b.n	8008e36 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	3302      	adds	r3, #2
 8008e0a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e14:	69fb      	ldr	r3, [r7, #28]
 8008e16:	3301      	adds	r3, #1
 8008e18:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	0a1b      	lsrs	r3, r3, #8
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	69fb      	ldr	r3, [r7, #28]
 8008e22:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	3301      	adds	r3, #1
 8008e28:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e2a:	6a3b      	ldr	r3, [r7, #32]
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	3b01      	subs	r3, #1
 8008e34:	627b      	str	r3, [r7, #36]	; 0x24
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1e0      	bne.n	8008dfe <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008e3c:	88bb      	ldrh	r3, [r7, #4]
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d007      	beq.n	8008e58 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008e48:	6a3b      	ldr	r3, [r7, #32]
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	701a      	strb	r2, [r3, #0]
  }
}
 8008e58:	bf00      	nop
 8008e5a:	372c      	adds	r7, #44	; 0x2c
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bc80      	pop	{r7}
 8008e60:	4770      	bx	lr

08008e62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b084      	sub	sp, #16
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	7c1b      	ldrb	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d115      	bne.n	8008ea6 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008e7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e7e:	2202      	movs	r2, #2
 8008e80:	2181      	movs	r1, #129	; 0x81
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f001 fe87 	bl	800ab96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2201      	movs	r2, #1
 8008e8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e92:	2202      	movs	r2, #2
 8008e94:	2101      	movs	r1, #1
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f001 fe7d 	bl	800ab96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008ea4:	e012      	b.n	8008ecc <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ea6:	2340      	movs	r3, #64	; 0x40
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	2181      	movs	r1, #129	; 0x81
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 fe72 	bl	800ab96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008eb8:	2340      	movs	r3, #64	; 0x40
 8008eba:	2202      	movs	r2, #2
 8008ebc:	2101      	movs	r1, #1
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 fe69 	bl	800ab96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008ecc:	2308      	movs	r3, #8
 8008ece:	2203      	movs	r2, #3
 8008ed0:	2182      	movs	r1, #130	; 0x82
 8008ed2:	6878      	ldr	r0, [r7, #4]
 8008ed4:	f001 fe5f 	bl	800ab96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ede:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008ee2:	f001 ff7f 	bl	800ade4 <USBD_static_malloc>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	73fb      	strb	r3, [r7, #15]
 8008efc:	e026      	b.n	8008f4c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7c1b      	ldrb	r3, [r3, #16]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d109      	bne.n	8008f3c <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f32:	2101      	movs	r1, #1
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 ff1f 	bl	800ad78 <USBD_LL_PrepareReceive>
 8008f3a:	e007      	b.n	8008f4c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	2101      	movs	r1, #1
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 ff16 	bl	800ad78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008f66:	2181      	movs	r1, #129	; 0x81
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f001 fe3a 	bl	800abe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008f74:	2101      	movs	r1, #1
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f001 fe33 	bl	800abe2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008f84:	2182      	movs	r1, #130	; 0x82
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f001 fe2b 	bl	800abe2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2200      	movs	r2, #0
 8008f90:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00e      	beq.n	8008fba <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fac:	4618      	mov	r0, r3
 8008fae:	f001 ff25 	bl	800adfc <USBD_static_free>
    pdev->pClassData = NULL;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	781b      	ldrb	r3, [r3, #0]
 8008fe6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d039      	beq.n	8009062 <USBD_CDC_Setup+0x9e>
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	d17f      	bne.n	80090f2 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	88db      	ldrh	r3, [r3, #6]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d029      	beq.n	800904e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	b25b      	sxtb	r3, r3
 8009000:	2b00      	cmp	r3, #0
 8009002:	da11      	bge.n	8009028 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	683a      	ldr	r2, [r7, #0]
 800900e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009010:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	88d2      	ldrh	r2, [r2, #6]
 8009016:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009018:	6939      	ldr	r1, [r7, #16]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	88db      	ldrh	r3, [r3, #6]
 800901e:	461a      	mov	r2, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f001 fa0a 	bl	800a43a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009026:	e06b      	b.n	8009100 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	785a      	ldrb	r2, [r3, #1]
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	88db      	ldrh	r3, [r3, #6]
 8009036:	b2da      	uxtb	r2, r3
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800903e:	6939      	ldr	r1, [r7, #16]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	461a      	mov	r2, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fa25 	bl	800a496 <USBD_CtlPrepareRx>
      break;
 800904c:	e058      	b.n	8009100 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	7850      	ldrb	r0, [r2, #1]
 800905a:	2200      	movs	r2, #0
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	4798      	blx	r3
      break;
 8009060:	e04e      	b.n	8009100 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	785b      	ldrb	r3, [r3, #1]
 8009066:	2b0b      	cmp	r3, #11
 8009068:	d02e      	beq.n	80090c8 <USBD_CDC_Setup+0x104>
 800906a:	2b0b      	cmp	r3, #11
 800906c:	dc38      	bgt.n	80090e0 <USBD_CDC_Setup+0x11c>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <USBD_CDC_Setup+0xb4>
 8009072:	2b0a      	cmp	r3, #10
 8009074:	d014      	beq.n	80090a0 <USBD_CDC_Setup+0xdc>
 8009076:	e033      	b.n	80090e0 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907e:	2b03      	cmp	r3, #3
 8009080:	d107      	bne.n	8009092 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009082:	f107 030c 	add.w	r3, r7, #12
 8009086:	2202      	movs	r2, #2
 8009088:	4619      	mov	r1, r3
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f001 f9d5 	bl	800a43a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009090:	e02e      	b.n	80090f0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f001 f966 	bl	800a366 <USBD_CtlError>
            ret = USBD_FAIL;
 800909a:	2302      	movs	r3, #2
 800909c:	75fb      	strb	r3, [r7, #23]
          break;
 800909e:	e027      	b.n	80090f0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a6:	2b03      	cmp	r3, #3
 80090a8:	d107      	bne.n	80090ba <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80090aa:	f107 030f 	add.w	r3, r7, #15
 80090ae:	2201      	movs	r2, #1
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f001 f9c1 	bl	800a43a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80090b8:	e01a      	b.n	80090f0 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 f952 	bl	800a366 <USBD_CtlError>
            ret = USBD_FAIL;
 80090c2:	2302      	movs	r3, #2
 80090c4:	75fb      	strb	r3, [r7, #23]
          break;
 80090c6:	e013      	b.n	80090f0 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090ce:	2b03      	cmp	r3, #3
 80090d0:	d00d      	beq.n	80090ee <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 f946 	bl	800a366 <USBD_CtlError>
            ret = USBD_FAIL;
 80090da:	2302      	movs	r3, #2
 80090dc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80090de:	e006      	b.n	80090ee <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 f93f 	bl	800a366 <USBD_CtlError>
          ret = USBD_FAIL;
 80090e8:	2302      	movs	r3, #2
 80090ea:	75fb      	strb	r3, [r7, #23]
          break;
 80090ec:	e000      	b.n	80090f0 <USBD_CDC_Setup+0x12c>
          break;
 80090ee:	bf00      	nop
      }
      break;
 80090f0:	e006      	b.n	8009100 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80090f2:	6839      	ldr	r1, [r7, #0]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 f936 	bl	800a366 <USBD_CtlError>
      ret = USBD_FAIL;
 80090fa:	2302      	movs	r3, #2
 80090fc:	75fb      	strb	r3, [r7, #23]
      break;
 80090fe:	bf00      	nop
  }

  return ret;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
}
 8009102:	4618      	mov	r0, r3
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b084      	sub	sp, #16
 800910e:	af00      	add	r7, sp, #0
 8009110:	6078      	str	r0, [r7, #4]
 8009112:	460b      	mov	r3, r1
 8009114:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009124:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912c:	2b00      	cmp	r3, #0
 800912e:	d03a      	beq.n	80091a6 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	6879      	ldr	r1, [r7, #4]
 8009134:	4613      	mov	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	440b      	add	r3, r1
 800913e:	331c      	adds	r3, #28
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d029      	beq.n	800919a <USBD_CDC_DataIn+0x90>
 8009146:	78fa      	ldrb	r2, [r7, #3]
 8009148:	6879      	ldr	r1, [r7, #4]
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	440b      	add	r3, r1
 8009154:	331c      	adds	r3, #28
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	78f9      	ldrb	r1, [r7, #3]
 800915a:	68b8      	ldr	r0, [r7, #8]
 800915c:	460b      	mov	r3, r1
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	440b      	add	r3, r1
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4403      	add	r3, r0
 8009166:	3338      	adds	r3, #56	; 0x38
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	fbb2 f1f3 	udiv	r1, r2, r3
 800916e:	fb01 f303 	mul.w	r3, r1, r3
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d110      	bne.n	800919a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009178:	78fa      	ldrb	r2, [r7, #3]
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	4613      	mov	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4413      	add	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	440b      	add	r3, r1
 8009186:	331c      	adds	r3, #28
 8009188:	2200      	movs	r2, #0
 800918a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800918c:	78f9      	ldrb	r1, [r7, #3]
 800918e:	2300      	movs	r3, #0
 8009190:	2200      	movs	r2, #0
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 fdcd 	bl	800ad32 <USBD_LL_Transmit>
 8009198:	e003      	b.n	80091a2 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80091a2:	2300      	movs	r3, #0
 80091a4:	e000      	b.n	80091a8 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80091a6:	2302      	movs	r3, #2
  }
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	460b      	mov	r3, r1
 80091ba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80091c4:	78fb      	ldrb	r3, [r7, #3]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 fdf8 	bl	800adbe <USBD_LL_GetRxDataSize>
 80091ce:	4602      	mov	r2, r0
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00d      	beq.n	80091fc <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80091f4:	4611      	mov	r1, r2
 80091f6:	4798      	blx	r3

    return USBD_OK;
 80091f8:	2300      	movs	r3, #0
 80091fa:	e000      	b.n	80091fe <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80091fc:	2302      	movs	r3, #2
  }
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009214:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800921c:	2b00      	cmp	r3, #0
 800921e:	d015      	beq.n	800924c <USBD_CDC_EP0_RxReady+0x46>
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009226:	2bff      	cmp	r3, #255	; 0xff
 8009228:	d010      	beq.n	800924c <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009238:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009240:	b292      	uxth	r2, r2
 8009242:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	22ff      	movs	r2, #255	; 0xff
 8009248:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
	...

08009258 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2243      	movs	r2, #67	; 0x43
 8009264:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009266:	4b03      	ldr	r3, [pc, #12]	; (8009274 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	bc80      	pop	{r7}
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	200000dc 	.word	0x200000dc

08009278 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2243      	movs	r2, #67	; 0x43
 8009284:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009286:	4b03      	ldr	r3, [pc, #12]	; (8009294 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	bc80      	pop	{r7}
 8009290:	4770      	bx	lr
 8009292:	bf00      	nop
 8009294:	20000098 	.word	0x20000098

08009298 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009298:	b480      	push	{r7}
 800929a:	b083      	sub	sp, #12
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2243      	movs	r2, #67	; 0x43
 80092a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80092a6:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bc80      	pop	{r7}
 80092b0:	4770      	bx	lr
 80092b2:	bf00      	nop
 80092b4:	20000120 	.word	0x20000120

080092b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	220a      	movs	r2, #10
 80092c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80092c6:	4b03      	ldr	r3, [pc, #12]	; (80092d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20000054 	.word	0x20000054

080092d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
 80092e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80092e2:	2302      	movs	r3, #2
 80092e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80092f4:	2300      	movs	r3, #0
 80092f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	4613      	mov	r3, r2
 8009310:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009318:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	68ba      	ldr	r2, [r7, #8]
 800931e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009322:	88fa      	ldrh	r2, [r7, #6]
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	371c      	adds	r7, #28
 8009330:	46bd      	mov	sp, r7
 8009332:	bc80      	pop	{r7}
 8009334:	4770      	bx	lr

08009336 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009336:	b480      	push	{r7}
 8009338:	b085      	sub	sp, #20
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
 800933e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009346:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	683a      	ldr	r2, [r7, #0]
 800934c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3714      	adds	r7, #20
 8009356:	46bd      	mov	sp, r7
 8009358:	bc80      	pop	{r7}
 800935a:	4770      	bx	lr

0800935c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800936a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01c      	beq.n	80093b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800937c:	2b00      	cmp	r3, #0
 800937e:	d115      	bne.n	80093ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2201      	movs	r2, #1
 8009384:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800939e:	b29b      	uxth	r3, r3
 80093a0:	2181      	movs	r1, #129	; 0x81
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 fcc5 	bl	800ad32 <USBD_LL_Transmit>

      return USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	e002      	b.n	80093b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e000      	b.n	80093b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80093b0:	2302      	movs	r3, #2
  }
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}

080093ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093ba:	b580      	push	{r7, lr}
 80093bc:	b084      	sub	sp, #16
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d017      	beq.n	8009404 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	7c1b      	ldrb	r3, [r3, #16]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d109      	bne.n	80093f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e6:	2101      	movs	r1, #1
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 fcc5 	bl	800ad78 <USBD_LL_PrepareReceive>
 80093ee:	e007      	b.n	8009400 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093f6:	2340      	movs	r3, #64	; 0x40
 80093f8:	2101      	movs	r1, #1
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 fcbc 	bl	800ad78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009400:	2300      	movs	r3, #0
 8009402:	e000      	b.n	8009406 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009404:	2302      	movs	r3, #2
  }
}
 8009406:	4618      	mov	r0, r3
 8009408:	3710      	adds	r7, #16
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}

0800940e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b084      	sub	sp, #16
 8009412:	af00      	add	r7, sp, #0
 8009414:	60f8      	str	r0, [r7, #12]
 8009416:	60b9      	str	r1, [r7, #8]
 8009418:	4613      	mov	r3, r2
 800941a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009422:	2302      	movs	r3, #2
 8009424:	e01a      	b.n	800945c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800942c:	2b00      	cmp	r3, #0
 800942e:	d003      	beq.n	8009438 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d003      	beq.n	8009446 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	79fa      	ldrb	r2, [r7, #7]
 8009452:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009454:	68f8      	ldr	r0, [r7, #12]
 8009456:	f001 fb29 	bl	800aaac <USBD_LL_Init>

  return USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800946e:	2300      	movs	r3, #0
 8009470:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d006      	beq.n	8009486 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	73fb      	strb	r3, [r7, #15]
 8009484:	e001      	b.n	800948a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009486:	2302      	movs	r3, #2
 8009488:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800948a:	7bfb      	ldrb	r3, [r7, #15]
}
 800948c:	4618      	mov	r0, r3
 800948e:	3714      	adds	r7, #20
 8009490:	46bd      	mov	sp, r7
 8009492:	bc80      	pop	{r7}
 8009494:	4770      	bx	lr

08009496 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f001 fb5e 	bl	800ab60 <USBD_LL_Start>

  return USBD_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3708      	adds	r7, #8
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b083      	sub	sp, #12
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	370c      	adds	r7, #12
 80094bc:	46bd      	mov	sp, r7
 80094be:	bc80      	pop	{r7}
 80094c0:	4770      	bx	lr

080094c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80094ce:	2302      	movs	r3, #2
 80094d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00c      	beq.n	80094f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	4611      	mov	r1, r2
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d101      	bne.n	80094f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80094f2:	2300      	movs	r3, #0
 80094f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80094f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	460b      	mov	r3, r1
 800950a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3

  return USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b082      	sub	sp, #8
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
 800952e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	4618      	mov	r0, r3
 800953a:	f000 fed8 	bl	800a2ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800954c:	461a      	mov	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800955a:	f003 031f 	and.w	r3, r3, #31
 800955e:	2b02      	cmp	r3, #2
 8009560:	d016      	beq.n	8009590 <USBD_LL_SetupStage+0x6a>
 8009562:	2b02      	cmp	r3, #2
 8009564:	d81c      	bhi.n	80095a0 <USBD_LL_SetupStage+0x7a>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <USBD_LL_SetupStage+0x4a>
 800956a:	2b01      	cmp	r3, #1
 800956c:	d008      	beq.n	8009580 <USBD_LL_SetupStage+0x5a>
 800956e:	e017      	b.n	80095a0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f9cb 	bl	8009914 <USBD_StdDevReq>
      break;
 800957e:	e01a      	b.n	80095b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009586:	4619      	mov	r1, r3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f000 fa2d 	bl	80099e8 <USBD_StdItfReq>
      break;
 800958e:	e012      	b.n	80095b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009596:	4619      	mov	r1, r3
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fa6d 	bl	8009a78 <USBD_StdEPReq>
      break;
 800959e:	e00a      	b.n	80095b6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f001 fb36 	bl	800ac20 <USBD_LL_StallEP>
      break;
 80095b4:	bf00      	nop
  }

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	460b      	mov	r3, r1
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80095ce:	7afb      	ldrb	r3, [r7, #11]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d14b      	bne.n	800966c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d134      	bne.n	8009650 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	68da      	ldr	r2, [r3, #12]
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d919      	bls.n	8009626 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	691b      	ldr	r3, [r3, #16]
 80095fa:	1ad2      	subs	r2, r2, r3
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	68da      	ldr	r2, [r3, #12]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009608:	429a      	cmp	r2, r3
 800960a:	d203      	bcs.n	8009614 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009610:	b29b      	uxth	r3, r3
 8009612:	e002      	b.n	800961a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009618:	b29b      	uxth	r3, r3
 800961a:	461a      	mov	r2, r3
 800961c:	6879      	ldr	r1, [r7, #4]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 ff57 	bl	800a4d2 <USBD_CtlContinueRx>
 8009624:	e038      	b.n	8009698 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00a      	beq.n	8009648 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009638:	2b03      	cmp	r3, #3
 800963a:	d105      	bne.n	8009648 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 ff54 	bl	800a4f6 <USBD_CtlSendStatus>
 800964e:	e023      	b.n	8009698 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009656:	2b05      	cmp	r3, #5
 8009658:	d11e      	bne.n	8009698 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009662:	2100      	movs	r1, #0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f001 fadb 	bl	800ac20 <USBD_LL_StallEP>
 800966a:	e015      	b.n	8009698 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00d      	beq.n	8009694 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800967e:	2b03      	cmp	r3, #3
 8009680:	d108      	bne.n	8009694 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009688:	699b      	ldr	r3, [r3, #24]
 800968a:	7afa      	ldrb	r2, [r7, #11]
 800968c:	4611      	mov	r1, r2
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	4798      	blx	r3
 8009692:	e001      	b.n	8009698 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009694:	2302      	movs	r3, #2
 8009696:	e000      	b.n	800969a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009698:	2300      	movs	r3, #0
}
 800969a:	4618      	mov	r0, r3
 800969c:	3718      	adds	r7, #24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b086      	sub	sp, #24
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	60f8      	str	r0, [r7, #12]
 80096aa:	460b      	mov	r3, r1
 80096ac:	607a      	str	r2, [r7, #4]
 80096ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096b0:	7afb      	ldrb	r3, [r7, #11]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d17f      	bne.n	80097b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	3314      	adds	r3, #20
 80096ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d15c      	bne.n	8009780 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	68da      	ldr	r2, [r3, #12]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d915      	bls.n	80096fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	1ad2      	subs	r2, r2, r3
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	6879      	ldr	r1, [r7, #4]
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f000 fec1 	bl	800a472 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096f0:	2300      	movs	r3, #0
 80096f2:	2200      	movs	r2, #0
 80096f4:	2100      	movs	r1, #0
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f001 fb3e 	bl	800ad78 <USBD_LL_PrepareReceive>
 80096fc:	e04e      	b.n	800979c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	697a      	ldr	r2, [r7, #20]
 8009704:	6912      	ldr	r2, [r2, #16]
 8009706:	fbb3 f1f2 	udiv	r1, r3, r2
 800970a:	fb01 f202 	mul.w	r2, r1, r2
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11c      	bne.n	800974e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	689a      	ldr	r2, [r3, #8]
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800971c:	429a      	cmp	r2, r3
 800971e:	d316      	bcc.n	800974e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	689a      	ldr	r2, [r3, #8]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800972a:	429a      	cmp	r2, r3
 800972c:	d20f      	bcs.n	800974e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800972e:	2200      	movs	r2, #0
 8009730:	2100      	movs	r1, #0
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 fe9d 	bl	800a472 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009740:	2300      	movs	r3, #0
 8009742:	2200      	movs	r2, #0
 8009744:	2100      	movs	r1, #0
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f001 fb16 	bl	800ad78 <USBD_LL_PrepareReceive>
 800974c:	e026      	b.n	800979c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00a      	beq.n	8009770 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009760:	2b03      	cmp	r3, #3
 8009762:	d105      	bne.n	8009770 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009770:	2180      	movs	r1, #128	; 0x80
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f001 fa54 	bl	800ac20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 fecf 	bl	800a51c <USBD_CtlReceiveStatus>
 800977e:	e00d      	b.n	800979c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009786:	2b04      	cmp	r3, #4
 8009788:	d004      	beq.n	8009794 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009790:	2b00      	cmp	r3, #0
 8009792:	d103      	bne.n	800979c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009794:	2180      	movs	r1, #128	; 0x80
 8009796:	68f8      	ldr	r0, [r7, #12]
 8009798:	f001 fa42 	bl	800ac20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d11d      	bne.n	80097e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f7ff fe81 	bl	80094ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80097b4:	e015      	b.n	80097e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00d      	beq.n	80097de <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80097c8:	2b03      	cmp	r3, #3
 80097ca:	d108      	bne.n	80097de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097d2:	695b      	ldr	r3, [r3, #20]
 80097d4:	7afa      	ldrb	r2, [r7, #11]
 80097d6:	4611      	mov	r1, r2
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	4798      	blx	r3
 80097dc:	e001      	b.n	80097e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80097de:	2302      	movs	r3, #2
 80097e0:	e000      	b.n	80097e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80097e2:	2300      	movs	r3, #0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80097f4:	2340      	movs	r3, #64	; 0x40
 80097f6:	2200      	movs	r2, #0
 80097f8:	2100      	movs	r1, #0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 f9cb 	bl	800ab96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2240      	movs	r2, #64	; 0x40
 800980c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009810:	2340      	movs	r3, #64	; 0x40
 8009812:	2200      	movs	r2, #0
 8009814:	2180      	movs	r1, #128	; 0x80
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 f9bd 	bl	800ab96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2240      	movs	r2, #64	; 0x40
 8009826:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2200      	movs	r2, #0
 8009842:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800984c:	2b00      	cmp	r3, #0
 800984e:	d009      	beq.n	8009864 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	6852      	ldr	r2, [r2, #4]
 800985c:	b2d2      	uxtb	r2, r2
 800985e:	4611      	mov	r1, r2
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	4798      	blx	r3
  }

  return USBD_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800986e:	b480      	push	{r7}
 8009870:	b083      	sub	sp, #12
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	78fa      	ldrb	r2, [r7, #3]
 800987e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	370c      	adds	r7, #12
 8009886:	46bd      	mov	sp, r7
 8009888:	bc80      	pop	{r7}
 800988a:	4770      	bx	lr

0800988c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2204      	movs	r2, #4
 80098a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	370c      	adds	r7, #12
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bc80      	pop	{r7}
 80098b2:	4770      	bx	lr

080098b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098c2:	2b04      	cmp	r3, #4
 80098c4:	d105      	bne.n	80098d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	bc80      	pop	{r7}
 80098dc:	4770      	bx	lr

080098de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d10b      	bne.n	8009908 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009908:	2300      	movs	r3, #0
}
 800990a:	4618      	mov	r0, r3
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}
	...

08009914 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800992a:	2b40      	cmp	r3, #64	; 0x40
 800992c:	d005      	beq.n	800993a <USBD_StdDevReq+0x26>
 800992e:	2b40      	cmp	r3, #64	; 0x40
 8009930:	d84f      	bhi.n	80099d2 <USBD_StdDevReq+0xbe>
 8009932:	2b00      	cmp	r3, #0
 8009934:	d009      	beq.n	800994a <USBD_StdDevReq+0x36>
 8009936:	2b20      	cmp	r3, #32
 8009938:	d14b      	bne.n	80099d2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	4798      	blx	r3
      break;
 8009948:	e048      	b.n	80099dc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	785b      	ldrb	r3, [r3, #1]
 800994e:	2b09      	cmp	r3, #9
 8009950:	d839      	bhi.n	80099c6 <USBD_StdDevReq+0xb2>
 8009952:	a201      	add	r2, pc, #4	; (adr r2, 8009958 <USBD_StdDevReq+0x44>)
 8009954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009958:	080099a9 	.word	0x080099a9
 800995c:	080099bd 	.word	0x080099bd
 8009960:	080099c7 	.word	0x080099c7
 8009964:	080099b3 	.word	0x080099b3
 8009968:	080099c7 	.word	0x080099c7
 800996c:	0800998b 	.word	0x0800998b
 8009970:	08009981 	.word	0x08009981
 8009974:	080099c7 	.word	0x080099c7
 8009978:	0800999f 	.word	0x0800999f
 800997c:	08009995 	.word	0x08009995
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f9dc 	bl	8009d40 <USBD_GetDescriptor>
          break;
 8009988:	e022      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fb3f 	bl	800a010 <USBD_SetAddress>
          break;
 8009992:	e01d      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009994:	6839      	ldr	r1, [r7, #0]
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 fb7e 	bl	800a098 <USBD_SetConfig>
          break;
 800999c:	e018      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800999e:	6839      	ldr	r1, [r7, #0]
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f000 fc07 	bl	800a1b4 <USBD_GetConfig>
          break;
 80099a6:	e013      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fc37 	bl	800a21e <USBD_GetStatus>
          break;
 80099b0:	e00e      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc65 	bl	800a284 <USBD_SetFeature>
          break;
 80099ba:	e009      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099bc:	6839      	ldr	r1, [r7, #0]
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 fc74 	bl	800a2ac <USBD_ClrFeature>
          break;
 80099c4:	e004      	b.n	80099d0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fccc 	bl	800a366 <USBD_CtlError>
          break;
 80099ce:	bf00      	nop
      }
      break;
 80099d0:	e004      	b.n	80099dc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80099d2:	6839      	ldr	r1, [r7, #0]
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fcc6 	bl	800a366 <USBD_CtlError>
      break;
 80099da:	bf00      	nop
  }

  return ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop

080099e8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099fe:	2b40      	cmp	r3, #64	; 0x40
 8009a00:	d005      	beq.n	8009a0e <USBD_StdItfReq+0x26>
 8009a02:	2b40      	cmp	r3, #64	; 0x40
 8009a04:	d82e      	bhi.n	8009a64 <USBD_StdItfReq+0x7c>
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <USBD_StdItfReq+0x26>
 8009a0a:	2b20      	cmp	r3, #32
 8009a0c:	d12a      	bne.n	8009a64 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a14:	3b01      	subs	r3, #1
 8009a16:	2b02      	cmp	r3, #2
 8009a18:	d81d      	bhi.n	8009a56 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	889b      	ldrh	r3, [r3, #4]
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d813      	bhi.n	8009a4c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	6839      	ldr	r1, [r7, #0]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
 8009a32:	4603      	mov	r3, r0
 8009a34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	88db      	ldrh	r3, [r3, #6]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d110      	bne.n	8009a60 <USBD_StdItfReq+0x78>
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10d      	bne.n	8009a60 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fd56 	bl	800a4f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a4a:	e009      	b.n	8009a60 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fc89 	bl	800a366 <USBD_CtlError>
          break;
 8009a54:	e004      	b.n	8009a60 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc84 	bl	800a366 <USBD_CtlError>
          break;
 8009a5e:	e000      	b.n	8009a62 <USBD_StdItfReq+0x7a>
          break;
 8009a60:	bf00      	nop
      }
      break;
 8009a62:	e004      	b.n	8009a6e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fc7d 	bl	800a366 <USBD_CtlError>
      break;
 8009a6c:	bf00      	nop
  }

  return USBD_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	889b      	ldrh	r3, [r3, #4]
 8009a8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a94:	2b40      	cmp	r3, #64	; 0x40
 8009a96:	d007      	beq.n	8009aa8 <USBD_StdEPReq+0x30>
 8009a98:	2b40      	cmp	r3, #64	; 0x40
 8009a9a:	f200 8146 	bhi.w	8009d2a <USBD_StdEPReq+0x2b2>
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <USBD_StdEPReq+0x40>
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	f040 8141 	bne.w	8009d2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	6839      	ldr	r1, [r7, #0]
 8009ab2:	6878      	ldr	r0, [r7, #4]
 8009ab4:	4798      	blx	r3
      break;
 8009ab6:	e13d      	b.n	8009d34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ac0:	2b20      	cmp	r3, #32
 8009ac2:	d10a      	bne.n	8009ada <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	4798      	blx	r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009ad6:	7bfb      	ldrb	r3, [r7, #15]
 8009ad8:	e12d      	b.n	8009d36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	785b      	ldrb	r3, [r3, #1]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	d007      	beq.n	8009af2 <USBD_StdEPReq+0x7a>
 8009ae2:	2b03      	cmp	r3, #3
 8009ae4:	f300 811b 	bgt.w	8009d1e <USBD_StdEPReq+0x2a6>
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d072      	beq.n	8009bd2 <USBD_StdEPReq+0x15a>
 8009aec:	2b01      	cmp	r3, #1
 8009aee:	d03a      	beq.n	8009b66 <USBD_StdEPReq+0xee>
 8009af0:	e115      	b.n	8009d1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d002      	beq.n	8009b02 <USBD_StdEPReq+0x8a>
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d015      	beq.n	8009b2c <USBD_StdEPReq+0xb4>
 8009b00:	e02b      	b.n	8009b5a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b02:	7bbb      	ldrb	r3, [r7, #14]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d00c      	beq.n	8009b22 <USBD_StdEPReq+0xaa>
 8009b08:	7bbb      	ldrb	r3, [r7, #14]
 8009b0a:	2b80      	cmp	r3, #128	; 0x80
 8009b0c:	d009      	beq.n	8009b22 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	4619      	mov	r1, r3
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f001 f884 	bl	800ac20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b18:	2180      	movs	r1, #128	; 0x80
 8009b1a:	6878      	ldr	r0, [r7, #4]
 8009b1c:	f001 f880 	bl	800ac20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b20:	e020      	b.n	8009b64 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 fc1e 	bl	800a366 <USBD_CtlError>
              break;
 8009b2a:	e01b      	b.n	8009b64 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	885b      	ldrh	r3, [r3, #2]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10e      	bne.n	8009b52 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009b34:	7bbb      	ldrb	r3, [r7, #14]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d00b      	beq.n	8009b52 <USBD_StdEPReq+0xda>
 8009b3a:	7bbb      	ldrb	r3, [r7, #14]
 8009b3c:	2b80      	cmp	r3, #128	; 0x80
 8009b3e:	d008      	beq.n	8009b52 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	88db      	ldrh	r3, [r3, #6]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d104      	bne.n	8009b52 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009b48:	7bbb      	ldrb	r3, [r7, #14]
 8009b4a:	4619      	mov	r1, r3
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f001 f867 	bl	800ac20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fccf 	bl	800a4f6 <USBD_CtlSendStatus>

              break;
 8009b58:	e004      	b.n	8009b64 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 fc02 	bl	800a366 <USBD_CtlError>
              break;
 8009b62:	bf00      	nop
          }
          break;
 8009b64:	e0e0      	b.n	8009d28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d002      	beq.n	8009b76 <USBD_StdEPReq+0xfe>
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d015      	beq.n	8009ba0 <USBD_StdEPReq+0x128>
 8009b74:	e026      	b.n	8009bc4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00c      	beq.n	8009b96 <USBD_StdEPReq+0x11e>
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b80      	cmp	r3, #128	; 0x80
 8009b80:	d009      	beq.n	8009b96 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f84a 	bl	800ac20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b8c:	2180      	movs	r1, #128	; 0x80
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 f846 	bl	800ac20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b94:	e01c      	b.n	8009bd0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fbe4 	bl	800a366 <USBD_CtlError>
              break;
 8009b9e:	e017      	b.n	8009bd0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	885b      	ldrh	r3, [r3, #2]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d112      	bne.n	8009bce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d004      	beq.n	8009bbc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bb2:	7bbb      	ldrb	r3, [r7, #14]
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 f851 	bl	800ac5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 fc9a 	bl	800a4f6 <USBD_CtlSendStatus>
              }
              break;
 8009bc2:	e004      	b.n	8009bce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009bc4:	6839      	ldr	r1, [r7, #0]
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fbcd 	bl	800a366 <USBD_CtlError>
              break;
 8009bcc:	e000      	b.n	8009bd0 <USBD_StdEPReq+0x158>
              break;
 8009bce:	bf00      	nop
          }
          break;
 8009bd0:	e0aa      	b.n	8009d28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd8:	2b02      	cmp	r3, #2
 8009bda:	d002      	beq.n	8009be2 <USBD_StdEPReq+0x16a>
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d032      	beq.n	8009c46 <USBD_StdEPReq+0x1ce>
 8009be0:	e097      	b.n	8009d12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009be2:	7bbb      	ldrb	r3, [r7, #14]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <USBD_StdEPReq+0x180>
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b80      	cmp	r3, #128	; 0x80
 8009bec:	d004      	beq.n	8009bf8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009bee:	6839      	ldr	r1, [r7, #0]
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fbb8 	bl	800a366 <USBD_CtlError>
                break;
 8009bf6:	e091      	b.n	8009d1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	da0b      	bge.n	8009c18 <USBD_StdEPReq+0x1a0>
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c06:	4613      	mov	r3, r2
 8009c08:	009b      	lsls	r3, r3, #2
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	3310      	adds	r3, #16
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	4413      	add	r3, r2
 8009c14:	3304      	adds	r3, #4
 8009c16:	e00b      	b.n	8009c30 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c1e:	4613      	mov	r3, r2
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c2a:	687a      	ldr	r2, [r7, #4]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	3304      	adds	r3, #4
 8009c30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	2202      	movs	r2, #2
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 fbfb 	bl	800a43a <USBD_CtlSendData>
              break;
 8009c44:	e06a      	b.n	8009d1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009c46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	da11      	bge.n	8009c72 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009c4e:	7bbb      	ldrb	r3, [r7, #14]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	3318      	adds	r3, #24
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d117      	bne.n	8009c98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c68:	6839      	ldr	r1, [r7, #0]
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fb7b 	bl	800a366 <USBD_CtlError>
                  break;
 8009c70:	e054      	b.n	8009d1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	f003 020f 	and.w	r2, r3, #15
 8009c78:	6879      	ldr	r1, [r7, #4]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	440b      	add	r3, r1
 8009c84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 fb68 	bl	800a366 <USBD_CtlError>
                  break;
 8009c96:	e041      	b.n	8009d1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	da0b      	bge.n	8009cb8 <USBD_StdEPReq+0x240>
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	4413      	add	r3, r2
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	3310      	adds	r3, #16
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	e00b      	b.n	8009cd0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	4413      	add	r3, r2
 8009cce:	3304      	adds	r3, #4
 8009cd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <USBD_StdEPReq+0x266>
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	2b80      	cmp	r3, #128	; 0x80
 8009cdc:	d103      	bne.n	8009ce6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e00e      	b.n	8009d04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 ffd6 	bl	800ac9c <USBD_LL_IsStallEP>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d003      	beq.n	8009cfe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	601a      	str	r2, [r3, #0]
 8009cfc:	e002      	b.n	8009d04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	2200      	movs	r2, #0
 8009d02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2202      	movs	r2, #2
 8009d08:	4619      	mov	r1, r3
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 fb95 	bl	800a43a <USBD_CtlSendData>
              break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fb26 	bl	800a366 <USBD_CtlError>
              break;
 8009d1a:	bf00      	nop
          }
          break;
 8009d1c:	e004      	b.n	8009d28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d1e:	6839      	ldr	r1, [r7, #0]
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	f000 fb20 	bl	800a366 <USBD_CtlError>
          break;
 8009d26:	bf00      	nop
      }
      break;
 8009d28:	e004      	b.n	8009d34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fb1a 	bl	800a366 <USBD_CtlError>
      break;
 8009d32:	bf00      	nop
  }

  return ret;
 8009d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009d52:	2300      	movs	r3, #0
 8009d54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	885b      	ldrh	r3, [r3, #2]
 8009d5a:	0a1b      	lsrs	r3, r3, #8
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	2b06      	cmp	r3, #6
 8009d62:	f200 8128 	bhi.w	8009fb6 <USBD_GetDescriptor+0x276>
 8009d66:	a201      	add	r2, pc, #4	; (adr r2, 8009d6c <USBD_GetDescriptor+0x2c>)
 8009d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6c:	08009d89 	.word	0x08009d89
 8009d70:	08009da1 	.word	0x08009da1
 8009d74:	08009de1 	.word	0x08009de1
 8009d78:	08009fb7 	.word	0x08009fb7
 8009d7c:	08009fb7 	.word	0x08009fb7
 8009d80:	08009f57 	.word	0x08009f57
 8009d84:	08009f83 	.word	0x08009f83
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	7c12      	ldrb	r2, [r2, #16]
 8009d94:	f107 0108 	add.w	r1, r7, #8
 8009d98:	4610      	mov	r0, r2
 8009d9a:	4798      	blx	r3
 8009d9c:	60f8      	str	r0, [r7, #12]
      break;
 8009d9e:	e112      	b.n	8009fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7c1b      	ldrb	r3, [r3, #16]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10d      	bne.n	8009dc4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db0:	f107 0208 	add.w	r2, r7, #8
 8009db4:	4610      	mov	r0, r2
 8009db6:	4798      	blx	r3
 8009db8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009dc2:	e100      	b.n	8009fc6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dcc:	f107 0208 	add.w	r2, r7, #8
 8009dd0:	4610      	mov	r0, r2
 8009dd2:	4798      	blx	r3
 8009dd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	2202      	movs	r2, #2
 8009ddc:	701a      	strb	r2, [r3, #0]
      break;
 8009dde:	e0f2      	b.n	8009fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	885b      	ldrh	r3, [r3, #2]
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	f200 80ac 	bhi.w	8009f44 <USBD_GetDescriptor+0x204>
 8009dec:	a201      	add	r2, pc, #4	; (adr r2, 8009df4 <USBD_GetDescriptor+0xb4>)
 8009dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df2:	bf00      	nop
 8009df4:	08009e0d 	.word	0x08009e0d
 8009df8:	08009e41 	.word	0x08009e41
 8009dfc:	08009e75 	.word	0x08009e75
 8009e00:	08009ea9 	.word	0x08009ea9
 8009e04:	08009edd 	.word	0x08009edd
 8009e08:	08009f11 	.word	0x08009f11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00b      	beq.n	8009e30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	7c12      	ldrb	r2, [r2, #16]
 8009e24:	f107 0108 	add.w	r1, r7, #8
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
 8009e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e2e:	e091      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e30:	6839      	ldr	r1, [r7, #0]
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f000 fa97 	bl	800a366 <USBD_CtlError>
            err++;
 8009e38:	7afb      	ldrb	r3, [r7, #11]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009e3e:	e089      	b.n	8009f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d00b      	beq.n	8009e64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	7c12      	ldrb	r2, [r2, #16]
 8009e58:	f107 0108 	add.w	r1, r7, #8
 8009e5c:	4610      	mov	r0, r2
 8009e5e:	4798      	blx	r3
 8009e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e62:	e077      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e64:	6839      	ldr	r1, [r7, #0]
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fa7d 	bl	800a366 <USBD_CtlError>
            err++;
 8009e6c:	7afb      	ldrb	r3, [r7, #11]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	72fb      	strb	r3, [r7, #11]
          break;
 8009e72:	e06f      	b.n	8009f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00b      	beq.n	8009e98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e86:	68db      	ldr	r3, [r3, #12]
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	7c12      	ldrb	r2, [r2, #16]
 8009e8c:	f107 0108 	add.w	r1, r7, #8
 8009e90:	4610      	mov	r0, r2
 8009e92:	4798      	blx	r3
 8009e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009e96:	e05d      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009e98:	6839      	ldr	r1, [r7, #0]
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f000 fa63 	bl	800a366 <USBD_CtlError>
            err++;
 8009ea0:	7afb      	ldrb	r3, [r7, #11]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ea6:	e055      	b.n	8009f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00b      	beq.n	8009ecc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	7c12      	ldrb	r2, [r2, #16]
 8009ec0:	f107 0108 	add.w	r1, r7, #8
 8009ec4:	4610      	mov	r0, r2
 8009ec6:	4798      	blx	r3
 8009ec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009eca:	e043      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ecc:	6839      	ldr	r1, [r7, #0]
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fa49 	bl	800a366 <USBD_CtlError>
            err++;
 8009ed4:	7afb      	ldrb	r3, [r7, #11]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	72fb      	strb	r3, [r7, #11]
          break;
 8009eda:	e03b      	b.n	8009f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00b      	beq.n	8009f00 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	7c12      	ldrb	r2, [r2, #16]
 8009ef4:	f107 0108 	add.w	r1, r7, #8
 8009ef8:	4610      	mov	r0, r2
 8009efa:	4798      	blx	r3
 8009efc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009efe:	e029      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f00:	6839      	ldr	r1, [r7, #0]
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa2f 	bl	800a366 <USBD_CtlError>
            err++;
 8009f08:	7afb      	ldrb	r3, [r7, #11]
 8009f0a:	3301      	adds	r3, #1
 8009f0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f0e:	e021      	b.n	8009f54 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d00b      	beq.n	8009f34 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	7c12      	ldrb	r2, [r2, #16]
 8009f28:	f107 0108 	add.w	r1, r7, #8
 8009f2c:	4610      	mov	r0, r2
 8009f2e:	4798      	blx	r3
 8009f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f32:	e00f      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f34:	6839      	ldr	r1, [r7, #0]
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 fa15 	bl	800a366 <USBD_CtlError>
            err++;
 8009f3c:	7afb      	ldrb	r3, [r7, #11]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	72fb      	strb	r3, [r7, #11]
          break;
 8009f42:	e007      	b.n	8009f54 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009f44:	6839      	ldr	r1, [r7, #0]
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 fa0d 	bl	800a366 <USBD_CtlError>
          err++;
 8009f4c:	7afb      	ldrb	r3, [r7, #11]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009f52:	e038      	b.n	8009fc6 <USBD_GetDescriptor+0x286>
 8009f54:	e037      	b.n	8009fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	7c1b      	ldrb	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d109      	bne.n	8009f72 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f66:	f107 0208 	add.w	r2, r7, #8
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4798      	blx	r3
 8009f6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009f70:	e029      	b.n	8009fc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f9f6 	bl	800a366 <USBD_CtlError>
        err++;
 8009f7a:	7afb      	ldrb	r3, [r7, #11]
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009f80:	e021      	b.n	8009fc6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	7c1b      	ldrb	r3, [r3, #16]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d10d      	bne.n	8009fa6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f92:	f107 0208 	add.w	r2, r7, #8
 8009f96:	4610      	mov	r0, r2
 8009f98:	4798      	blx	r3
 8009f9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fa4:	e00f      	b.n	8009fc6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 f9dc 	bl	800a366 <USBD_CtlError>
        err++;
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fb4:	e007      	b.n	8009fc6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 f9d4 	bl	800a366 <USBD_CtlError>
      err++;
 8009fbe:	7afb      	ldrb	r3, [r7, #11]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8009fc4:	bf00      	nop
  }

  if (err != 0U)
 8009fc6:	7afb      	ldrb	r3, [r7, #11]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d11c      	bne.n	800a006 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009fcc:	893b      	ldrh	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d011      	beq.n	8009ff6 <USBD_GetDescriptor+0x2b6>
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	88db      	ldrh	r3, [r3, #6]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00d      	beq.n	8009ff6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	88da      	ldrh	r2, [r3, #6]
 8009fde:	893b      	ldrh	r3, [r7, #8]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	bf28      	it	cs
 8009fe4:	4613      	movcs	r3, r2
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009fea:	893b      	ldrh	r3, [r7, #8]
 8009fec:	461a      	mov	r2, r3
 8009fee:	68f9      	ldr	r1, [r7, #12]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 fa22 	bl	800a43a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	88db      	ldrh	r3, [r3, #6]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d104      	bne.n	800a008 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa79 	bl	800a4f6 <USBD_CtlSendStatus>
 800a004:	e000      	b.n	800a008 <USBD_GetDescriptor+0x2c8>
    return;
 800a006:	bf00      	nop
    }
  }
}
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop

0800a010 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	889b      	ldrh	r3, [r3, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d130      	bne.n	800a084 <USBD_SetAddress+0x74>
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	88db      	ldrh	r3, [r3, #6]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d12c      	bne.n	800a084 <USBD_SetAddress+0x74>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	885b      	ldrh	r3, [r3, #2]
 800a02e:	2b7f      	cmp	r3, #127	; 0x7f
 800a030:	d828      	bhi.n	800a084 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	885b      	ldrh	r3, [r3, #2]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a044:	2b03      	cmp	r3, #3
 800a046:	d104      	bne.n	800a052 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f98b 	bl	800a366 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a050:	e01d      	b.n	800a08e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7bfa      	ldrb	r2, [r7, #15]
 800a056:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fe48 	bl	800acf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fa46 	bl	800a4f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d004      	beq.n	800a07a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2202      	movs	r2, #2
 800a074:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a078:	e009      	b.n	800a08e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a082:	e004      	b.n	800a08e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a084:	6839      	ldr	r1, [r7, #0]
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f96d 	bl	800a366 <USBD_CtlError>
  }
}
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	885b      	ldrh	r3, [r3, #2]
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	4b41      	ldr	r3, [pc, #260]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a0aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a0ac:	4b40      	ldr	r3, [pc, #256]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d904      	bls.n	800a0be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f955 	bl	800a366 <USBD_CtlError>
 800a0bc:	e075      	b.n	800a1aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d002      	beq.n	800a0ce <USBD_SetConfig+0x36>
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d023      	beq.n	800a114 <USBD_SetConfig+0x7c>
 800a0cc:	e062      	b.n	800a194 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a0ce:	4b38      	ldr	r3, [pc, #224]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d01a      	beq.n	800a10c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a0d6:	4b36      	ldr	r3, [pc, #216]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a0e8:	4b31      	ldr	r3, [pc, #196]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff f9e7 	bl	80094c2 <USBD_SetClassConfig>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d104      	bne.n	800a104 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f932 	bl	800a366 <USBD_CtlError>
            return;
 800a102:	e052      	b.n	800a1aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f9f6 	bl	800a4f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a10a:	e04e      	b.n	800a1aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f9f2 	bl	800a4f6 <USBD_CtlSendStatus>
        break;
 800a112:	e04a      	b.n	800a1aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a114:	4b26      	ldr	r3, [pc, #152]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d112      	bne.n	800a142 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2202      	movs	r2, #2
 800a120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a124:	4b22      	ldr	r3, [pc, #136]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a12e:	4b20      	ldr	r3, [pc, #128]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	4619      	mov	r1, r3
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff f9e3 	bl	8009500 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 f9db 	bl	800a4f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a140:	e033      	b.n	800a1aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a142:	4b1b      	ldr	r3, [pc, #108]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d01d      	beq.n	800a18c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	b2db      	uxtb	r3, r3
 800a156:	4619      	mov	r1, r3
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f7ff f9d1 	bl	8009500 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a15e:	4b14      	ldr	r3, [pc, #80]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a160:	781b      	ldrb	r3, [r3, #0]
 800a162:	461a      	mov	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a168:	4b11      	ldr	r3, [pc, #68]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	4619      	mov	r1, r3
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7ff f9a7 	bl	80094c2 <USBD_SetClassConfig>
 800a174:	4603      	mov	r3, r0
 800a176:	2b02      	cmp	r3, #2
 800a178:	d104      	bne.n	800a184 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 f8f2 	bl	800a366 <USBD_CtlError>
            return;
 800a182:	e012      	b.n	800a1aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f9b6 	bl	800a4f6 <USBD_CtlSendStatus>
        break;
 800a18a:	e00e      	b.n	800a1aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 f9b2 	bl	800a4f6 <USBD_CtlSendStatus>
        break;
 800a192:	e00a      	b.n	800a1aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a194:	6839      	ldr	r1, [r7, #0]
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f8e5 	bl	800a366 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a19c:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <USBD_SetConfig+0x118>)
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7ff f9ac 	bl	8009500 <USBD_ClrClassConfig>
        break;
 800a1a8:	bf00      	nop
    }
  }
}
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	2000035c 	.word	0x2000035c

0800a1b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
 800a1bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	88db      	ldrh	r3, [r3, #6]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d004      	beq.n	800a1d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 f8cc 	bl	800a366 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a1ce:	e022      	b.n	800a216 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	dc02      	bgt.n	800a1e0 <USBD_GetConfig+0x2c>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	dc03      	bgt.n	800a1e6 <USBD_GetConfig+0x32>
 800a1de:	e015      	b.n	800a20c <USBD_GetConfig+0x58>
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d00b      	beq.n	800a1fc <USBD_GetConfig+0x48>
 800a1e4:	e012      	b.n	800a20c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	3308      	adds	r3, #8
 800a1f0:	2201      	movs	r2, #1
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f920 	bl	800a43a <USBD_CtlSendData>
        break;
 800a1fa:	e00c      	b.n	800a216 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	3304      	adds	r3, #4
 800a200:	2201      	movs	r2, #1
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f918 	bl	800a43a <USBD_CtlSendData>
        break;
 800a20a:	e004      	b.n	800a216 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a20c:	6839      	ldr	r1, [r7, #0]
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f8a9 	bl	800a366 <USBD_CtlError>
        break;
 800a214:	bf00      	nop
}
 800a216:	bf00      	nop
 800a218:	3708      	adds	r7, #8
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b082      	sub	sp, #8
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a22e:	3b01      	subs	r3, #1
 800a230:	2b02      	cmp	r3, #2
 800a232:	d81e      	bhi.n	800a272 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	88db      	ldrh	r3, [r3, #6]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d004      	beq.n	800a246 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f891 	bl	800a366 <USBD_CtlError>
        break;
 800a244:	e01a      	b.n	800a27c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	68db      	ldr	r3, [r3, #12]
 800a25a:	f043 0202 	orr.w	r2, r3, #2
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	330c      	adds	r3, #12
 800a266:	2202      	movs	r2, #2
 800a268:	4619      	mov	r1, r3
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f8e5 	bl	800a43a <USBD_CtlSendData>
      break;
 800a270:	e004      	b.n	800a27c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 f876 	bl	800a366 <USBD_CtlError>
      break;
 800a27a:	bf00      	nop
  }
}
 800a27c:	bf00      	nop
 800a27e:	3708      	adds	r7, #8
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	885b      	ldrh	r3, [r3, #2]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d106      	bne.n	800a2a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2201      	movs	r2, #1
 800a29a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f929 	bl	800a4f6 <USBD_CtlSendStatus>
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d80b      	bhi.n	800a2da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	885b      	ldrh	r3, [r3, #2]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d10c      	bne.n	800a2e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 f90f 	bl	800a4f6 <USBD_CtlSendStatus>
      }
      break;
 800a2d8:	e004      	b.n	800a2e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a2da:	6839      	ldr	r1, [r7, #0]
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f842 	bl	800a366 <USBD_CtlError>
      break;
 800a2e2:	e000      	b.n	800a2e6 <USBD_ClrFeature+0x3a>
      break;
 800a2e4:	bf00      	nop
  }
}
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	781a      	ldrb	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	785a      	ldrb	r2, [r3, #1]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	3302      	adds	r3, #2
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b29a      	uxth	r2, r3
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	3303      	adds	r3, #3
 800a314:	781b      	ldrb	r3, [r3, #0]
 800a316:	b29b      	uxth	r3, r3
 800a318:	021b      	lsls	r3, r3, #8
 800a31a:	b29b      	uxth	r3, r3
 800a31c:	4413      	add	r3, r2
 800a31e:	b29a      	uxth	r2, r3
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	3304      	adds	r3, #4
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	3305      	adds	r3, #5
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b29b      	uxth	r3, r3
 800a338:	4413      	add	r3, r2
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	3306      	adds	r3, #6
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	b29a      	uxth	r2, r3
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	3307      	adds	r3, #7
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	b29b      	uxth	r3, r3
 800a350:	021b      	lsls	r3, r3, #8
 800a352:	b29b      	uxth	r3, r3
 800a354:	4413      	add	r3, r2
 800a356:	b29a      	uxth	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	80da      	strh	r2, [r3, #6]

}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	bc80      	pop	{r7}
 800a364:	4770      	bx	lr

0800a366 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a370:	2180      	movs	r1, #128	; 0x80
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fc54 	bl	800ac20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a378:	2100      	movs	r1, #0
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 fc50 	bl	800ac20 <USBD_LL_StallEP>
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}

0800a388 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b086      	sub	sp, #24
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	60f8      	str	r0, [r7, #12]
 800a390:	60b9      	str	r1, [r7, #8]
 800a392:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d032      	beq.n	800a404 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 f834 	bl	800a40c <USBD_GetLen>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	005b      	lsls	r3, r3, #1
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a3b2:	7dfb      	ldrb	r3, [r7, #23]
 800a3b4:	1c5a      	adds	r2, r3, #1
 800a3b6:	75fa      	strb	r2, [r7, #23]
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	4413      	add	r3, r2
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	7812      	ldrb	r2, [r2, #0]
 800a3c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a3c4:	7dfb      	ldrb	r3, [r7, #23]
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	75fa      	strb	r2, [r7, #23]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a3d4:	e012      	b.n	800a3fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	1c5a      	adds	r2, r3, #1
 800a3da:	60fa      	str	r2, [r7, #12]
 800a3dc:	7dfa      	ldrb	r2, [r7, #23]
 800a3de:	1c51      	adds	r1, r2, #1
 800a3e0:	75f9      	strb	r1, [r7, #23]
 800a3e2:	4611      	mov	r1, r2
 800a3e4:	68ba      	ldr	r2, [r7, #8]
 800a3e6:	440a      	add	r2, r1
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
 800a3ee:	1c5a      	adds	r2, r3, #1
 800a3f0:	75fa      	strb	r2, [r7, #23]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d1e8      	bne.n	800a3d6 <USBD_GetString+0x4e>
    }
  }
}
 800a404:	bf00      	nop
 800a406:	3718      	adds	r7, #24
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}

0800a40c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a414:	2300      	movs	r3, #0
 800a416:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a418:	e005      	b.n	800a426 <USBD_GetLen+0x1a>
  {
    len++;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
 800a41c:	3301      	adds	r3, #1
 800a41e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	3301      	adds	r3, #1
 800a424:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1f5      	bne.n	800a41a <USBD_GetLen+0xe>
  }

  return len;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	bc80      	pop	{r7}
 800a438:	4770      	bx	lr

0800a43a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b084      	sub	sp, #16
 800a43e:	af00      	add	r7, sp, #0
 800a440:	60f8      	str	r0, [r7, #12]
 800a442:	60b9      	str	r1, [r7, #8]
 800a444:	4613      	mov	r3, r2
 800a446:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a450:	88fa      	ldrh	r2, [r7, #6]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a456:	88fa      	ldrh	r2, [r7, #6]
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	2100      	movs	r1, #0
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 fc65 	bl	800ad32 <USBD_LL_Transmit>

  return USBD_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	60f8      	str	r0, [r7, #12]
 800a47a:	60b9      	str	r1, [r7, #8]
 800a47c:	4613      	mov	r3, r2
 800a47e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a480:	88fb      	ldrh	r3, [r7, #6]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	2100      	movs	r1, #0
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	f000 fc53 	bl	800ad32 <USBD_LL_Transmit>

  return USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b084      	sub	sp, #16
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	60f8      	str	r0, [r7, #12]
 800a49e:	60b9      	str	r1, [r7, #8]
 800a4a0:	4613      	mov	r3, r2
 800a4a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2203      	movs	r2, #3
 800a4a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a4ac:	88fa      	ldrh	r2, [r7, #6]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a4b4:	88fa      	ldrh	r2, [r7, #6]
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4bc:	88fb      	ldrh	r3, [r7, #6]
 800a4be:	68ba      	ldr	r2, [r7, #8]
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	68f8      	ldr	r0, [r7, #12]
 800a4c4:	f000 fc58 	bl	800ad78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	60f8      	str	r0, [r7, #12]
 800a4da:	60b9      	str	r1, [r7, #8]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a4e0:	88fb      	ldrh	r3, [r7, #6]
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f000 fc46 	bl	800ad78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2204      	movs	r2, #4
 800a502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a506:	2300      	movs	r3, #0
 800a508:	2200      	movs	r2, #0
 800a50a:	2100      	movs	r1, #0
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fc10 	bl	800ad32 <USBD_LL_Transmit>

  return USBD_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3708      	adds	r7, #8
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}

0800a51c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2205      	movs	r2, #5
 800a528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a52c:	2300      	movs	r3, #0
 800a52e:	2200      	movs	r2, #0
 800a530:	2100      	movs	r1, #0
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fc20 	bl	800ad78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3708      	adds	r7, #8
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
	...

0800a544 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a548:	2200      	movs	r2, #0
 800a54a:	4912      	ldr	r1, [pc, #72]	; (800a594 <MX_USB_DEVICE_Init+0x50>)
 800a54c:	4812      	ldr	r0, [pc, #72]	; (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a54e:	f7fe ff5e 	bl	800940e <USBD_Init>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a558:	f7f7 faf0 	bl	8001b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a55c:	490f      	ldr	r1, [pc, #60]	; (800a59c <MX_USB_DEVICE_Init+0x58>)
 800a55e:	480e      	ldr	r0, [pc, #56]	; (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a560:	f7fe ff80 	bl	8009464 <USBD_RegisterClass>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a56a:	f7f7 fae7 	bl	8001b3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a56e:	490c      	ldr	r1, [pc, #48]	; (800a5a0 <MX_USB_DEVICE_Init+0x5c>)
 800a570:	4809      	ldr	r0, [pc, #36]	; (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a572:	f7fe feb1 	bl	80092d8 <USBD_CDC_RegisterInterface>
 800a576:	4603      	mov	r3, r0
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d001      	beq.n	800a580 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a57c:	f7f7 fade 	bl	8001b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a580:	4805      	ldr	r0, [pc, #20]	; (800a598 <MX_USB_DEVICE_Init+0x54>)
 800a582:	f7fe ff88 	bl	8009496 <USBD_Start>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a58c:	f7f7 fad6 	bl	8001b3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a590:	bf00      	nop
 800a592:	bd80      	pop	{r7, pc}
 800a594:	20000174 	.word	0x20000174
 800a598:	20000360 	.word	0x20000360
 800a59c:	20000060 	.word	0x20000060
 800a5a0:	20000164 	.word	0x20000164

0800a5a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	4905      	ldr	r1, [pc, #20]	; (800a5c0 <CDC_Init_FS+0x1c>)
 800a5ac:	4805      	ldr	r0, [pc, #20]	; (800a5c4 <CDC_Init_FS+0x20>)
 800a5ae:	f7fe fea9 	bl	8009304 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a5b2:	4905      	ldr	r1, [pc, #20]	; (800a5c8 <CDC_Init_FS+0x24>)
 800a5b4:	4803      	ldr	r0, [pc, #12]	; (800a5c4 <CDC_Init_FS+0x20>)
 800a5b6:	f7fe febe 	bl	8009336 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a5ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	bd80      	pop	{r7, pc}
 800a5c0:	20000a24 	.word	0x20000a24
 800a5c4:	20000360 	.word	0x20000360
 800a5c8:	20000624 	.word	0x20000624

0800a5cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a5d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bc80      	pop	{r7}
 800a5d8:	4770      	bx	lr
	...

0800a5dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	6039      	str	r1, [r7, #0]
 800a5e6:	71fb      	strb	r3, [r7, #7]
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b23      	cmp	r3, #35	; 0x23
 800a5f0:	d84a      	bhi.n	800a688 <CDC_Control_FS+0xac>
 800a5f2:	a201      	add	r2, pc, #4	; (adr r2, 800a5f8 <CDC_Control_FS+0x1c>)
 800a5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f8:	0800a689 	.word	0x0800a689
 800a5fc:	0800a689 	.word	0x0800a689
 800a600:	0800a689 	.word	0x0800a689
 800a604:	0800a689 	.word	0x0800a689
 800a608:	0800a689 	.word	0x0800a689
 800a60c:	0800a689 	.word	0x0800a689
 800a610:	0800a689 	.word	0x0800a689
 800a614:	0800a689 	.word	0x0800a689
 800a618:	0800a689 	.word	0x0800a689
 800a61c:	0800a689 	.word	0x0800a689
 800a620:	0800a689 	.word	0x0800a689
 800a624:	0800a689 	.word	0x0800a689
 800a628:	0800a689 	.word	0x0800a689
 800a62c:	0800a689 	.word	0x0800a689
 800a630:	0800a689 	.word	0x0800a689
 800a634:	0800a689 	.word	0x0800a689
 800a638:	0800a689 	.word	0x0800a689
 800a63c:	0800a689 	.word	0x0800a689
 800a640:	0800a689 	.word	0x0800a689
 800a644:	0800a689 	.word	0x0800a689
 800a648:	0800a689 	.word	0x0800a689
 800a64c:	0800a689 	.word	0x0800a689
 800a650:	0800a689 	.word	0x0800a689
 800a654:	0800a689 	.word	0x0800a689
 800a658:	0800a689 	.word	0x0800a689
 800a65c:	0800a689 	.word	0x0800a689
 800a660:	0800a689 	.word	0x0800a689
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a689 	.word	0x0800a689
 800a66c:	0800a689 	.word	0x0800a689
 800a670:	0800a689 	.word	0x0800a689
 800a674:	0800a689 	.word	0x0800a689
 800a678:	0800a689 	.word	0x0800a689
 800a67c:	0800a689 	.word	0x0800a689
 800a680:	0800a689 	.word	0x0800a689
 800a684:	0800a689 	.word	0x0800a689
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a688:	bf00      	nop
  }

  return (USBD_OK);
 800a68a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	bc80      	pop	{r7}
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop

0800a698 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a6a2:	6879      	ldr	r1, [r7, #4]
 800a6a4:	4805      	ldr	r0, [pc, #20]	; (800a6bc <CDC_Receive_FS+0x24>)
 800a6a6:	f7fe fe46 	bl	8009336 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a6aa:	4804      	ldr	r0, [pc, #16]	; (800a6bc <CDC_Receive_FS+0x24>)
 800a6ac:	f7fe fe85 	bl	80093ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a6b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	20000360 	.word	0x20000360

0800a6c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a6d0:	4b0d      	ldr	r3, [pc, #52]	; (800a708 <CDC_Transmit_FS+0x48>)
 800a6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d001      	beq.n	800a6e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e00b      	b.n	800a6fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a6e6:	887b      	ldrh	r3, [r7, #2]
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	4806      	ldr	r0, [pc, #24]	; (800a708 <CDC_Transmit_FS+0x48>)
 800a6ee:	f7fe fe09 	bl	8009304 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a6f2:	4805      	ldr	r0, [pc, #20]	; (800a708 <CDC_Transmit_FS+0x48>)
 800a6f4:	f7fe fe32 	bl	800935c <USBD_CDC_TransmitPacket>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6fe:	4618      	mov	r0, r3
 800a700:	3710      	adds	r7, #16
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	20000360 	.word	0x20000360

0800a70c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	4603      	mov	r3, r0
 800a714:	6039      	str	r1, [r7, #0]
 800a716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2212      	movs	r2, #18
 800a71c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a71e:	4b03      	ldr	r3, [pc, #12]	; (800a72c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a720:	4618      	mov	r0, r3
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	bc80      	pop	{r7}
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	20000190 	.word	0x20000190

0800a730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	4603      	mov	r3, r0
 800a738:	6039      	str	r1, [r7, #0]
 800a73a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	2204      	movs	r2, #4
 800a740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a742:	4b03      	ldr	r3, [pc, #12]	; (800a750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	bc80      	pop	{r7}
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	200001a4 	.word	0x200001a4

0800a754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	6039      	str	r1, [r7, #0]
 800a75e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a760:	79fb      	ldrb	r3, [r7, #7]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d105      	bne.n	800a772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a766:	683a      	ldr	r2, [r7, #0]
 800a768:	4907      	ldr	r1, [pc, #28]	; (800a788 <USBD_FS_ProductStrDescriptor+0x34>)
 800a76a:	4808      	ldr	r0, [pc, #32]	; (800a78c <USBD_FS_ProductStrDescriptor+0x38>)
 800a76c:	f7ff fe0c 	bl	800a388 <USBD_GetString>
 800a770:	e004      	b.n	800a77c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	4904      	ldr	r1, [pc, #16]	; (800a788 <USBD_FS_ProductStrDescriptor+0x34>)
 800a776:	4805      	ldr	r0, [pc, #20]	; (800a78c <USBD_FS_ProductStrDescriptor+0x38>)
 800a778:	f7ff fe06 	bl	800a388 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a77c:	4b02      	ldr	r3, [pc, #8]	; (800a788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3708      	adds	r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop
 800a788:	20000e24 	.word	0x20000e24
 800a78c:	0800cb58 	.word	0x0800cb58

0800a790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	6039      	str	r1, [r7, #0]
 800a79a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	4904      	ldr	r1, [pc, #16]	; (800a7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a7a0:	4804      	ldr	r0, [pc, #16]	; (800a7b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a7a2:	f7ff fdf1 	bl	800a388 <USBD_GetString>
  return USBD_StrDesc;
 800a7a6:	4b02      	ldr	r3, [pc, #8]	; (800a7b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3708      	adds	r7, #8
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	20000e24 	.word	0x20000e24
 800a7b4:	0800cb6c 	.word	0x0800cb6c

0800a7b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	4603      	mov	r3, r0
 800a7c0:	6039      	str	r1, [r7, #0]
 800a7c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	221a      	movs	r2, #26
 800a7c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a7ca:	f000 f843 	bl	800a854 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a7ce:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	200001a8 	.word	0x200001a8

0800a7dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	6039      	str	r1, [r7, #0]
 800a7e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a7e8:	79fb      	ldrb	r3, [r7, #7]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d105      	bne.n	800a7fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7ee:	683a      	ldr	r2, [r7, #0]
 800a7f0:	4907      	ldr	r1, [pc, #28]	; (800a810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7f2:	4808      	ldr	r0, [pc, #32]	; (800a814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a7f4:	f7ff fdc8 	bl	800a388 <USBD_GetString>
 800a7f8:	e004      	b.n	800a804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	4904      	ldr	r1, [pc, #16]	; (800a810 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a7fe:	4805      	ldr	r0, [pc, #20]	; (800a814 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a800:	f7ff fdc2 	bl	800a388 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a804:	4b02      	ldr	r3, [pc, #8]	; (800a810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a806:	4618      	mov	r0, r3
 800a808:	3708      	adds	r7, #8
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	bf00      	nop
 800a810:	20000e24 	.word	0x20000e24
 800a814:	0800cb80 	.word	0x0800cb80

0800a818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b082      	sub	sp, #8
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	6039      	str	r1, [r7, #0]
 800a822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a824:	79fb      	ldrb	r3, [r7, #7]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	4907      	ldr	r1, [pc, #28]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a82e:	4808      	ldr	r0, [pc, #32]	; (800a850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a830:	f7ff fdaa 	bl	800a388 <USBD_GetString>
 800a834:	e004      	b.n	800a840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a836:	683a      	ldr	r2, [r7, #0]
 800a838:	4904      	ldr	r1, [pc, #16]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a83a:	4805      	ldr	r0, [pc, #20]	; (800a850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a83c:	f7ff fda4 	bl	800a388 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a840:	4b02      	ldr	r3, [pc, #8]	; (800a84c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a842:	4618      	mov	r0, r3
 800a844:	3708      	adds	r7, #8
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000e24 	.word	0x20000e24
 800a850:	0800cb8c 	.word	0x0800cb8c

0800a854 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a85a:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <Get_SerialNum+0x44>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a860:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <Get_SerialNum+0x48>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a866:	4b0e      	ldr	r3, [pc, #56]	; (800a8a0 <Get_SerialNum+0x4c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	4413      	add	r3, r2
 800a872:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d009      	beq.n	800a88e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a87a:	2208      	movs	r2, #8
 800a87c:	4909      	ldr	r1, [pc, #36]	; (800a8a4 <Get_SerialNum+0x50>)
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f000 f814 	bl	800a8ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a884:	2204      	movs	r2, #4
 800a886:	4908      	ldr	r1, [pc, #32]	; (800a8a8 <Get_SerialNum+0x54>)
 800a888:	68b8      	ldr	r0, [r7, #8]
 800a88a:	f000 f80f 	bl	800a8ac <IntToUnicode>
  }
}
 800a88e:	bf00      	nop
 800a890:	3710      	adds	r7, #16
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	1ffff7e8 	.word	0x1ffff7e8
 800a89c:	1ffff7ec 	.word	0x1ffff7ec
 800a8a0:	1ffff7f0 	.word	0x1ffff7f0
 800a8a4:	200001aa 	.word	0x200001aa
 800a8a8:	200001ba 	.word	0x200001ba

0800a8ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b087      	sub	sp, #28
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	4613      	mov	r3, r2
 800a8b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a8be:	2300      	movs	r3, #0
 800a8c0:	75fb      	strb	r3, [r7, #23]
 800a8c2:	e027      	b.n	800a914 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	0f1b      	lsrs	r3, r3, #28
 800a8c8:	2b09      	cmp	r3, #9
 800a8ca:	d80b      	bhi.n	800a8e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	0f1b      	lsrs	r3, r3, #28
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	7dfb      	ldrb	r3, [r7, #23]
 800a8d4:	005b      	lsls	r3, r3, #1
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	440b      	add	r3, r1
 800a8dc:	3230      	adds	r2, #48	; 0x30
 800a8de:	b2d2      	uxtb	r2, r2
 800a8e0:	701a      	strb	r2, [r3, #0]
 800a8e2:	e00a      	b.n	800a8fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	0f1b      	lsrs	r3, r3, #28
 800a8e8:	b2da      	uxtb	r2, r3
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	005b      	lsls	r3, r3, #1
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	440b      	add	r3, r1
 800a8f4:	3237      	adds	r2, #55	; 0x37
 800a8f6:	b2d2      	uxtb	r2, r2
 800a8f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	005b      	lsls	r3, r3, #1
 800a904:	3301      	adds	r3, #1
 800a906:	68ba      	ldr	r2, [r7, #8]
 800a908:	4413      	add	r3, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	3301      	adds	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
 800a914:	7dfa      	ldrb	r2, [r7, #23]
 800a916:	79fb      	ldrb	r3, [r7, #7]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d3d3      	bcc.n	800a8c4 <IntToUnicode+0x18>
  }
}
 800a91c:	bf00      	nop
 800a91e:	bf00      	nop
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a0d      	ldr	r2, [pc, #52]	; (800a96c <HAL_PCD_MspInit+0x44>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d113      	bne.n	800a962 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a93a:	4b0d      	ldr	r3, [pc, #52]	; (800a970 <HAL_PCD_MspInit+0x48>)
 800a93c:	69db      	ldr	r3, [r3, #28]
 800a93e:	4a0c      	ldr	r2, [pc, #48]	; (800a970 <HAL_PCD_MspInit+0x48>)
 800a940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a944:	61d3      	str	r3, [r2, #28]
 800a946:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <HAL_PCD_MspInit+0x48>)
 800a948:	69db      	ldr	r3, [r3, #28]
 800a94a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a952:	2200      	movs	r2, #0
 800a954:	2100      	movs	r1, #0
 800a956:	2014      	movs	r0, #20
 800a958:	f7f7 ff17 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a95c:	2014      	movs	r0, #20
 800a95e:	f7f7 ff30 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a962:	bf00      	nop
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	40005c00 	.word	0x40005c00
 800a970:	40021000 	.word	0x40021000

0800a974 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b082      	sub	sp, #8
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a988:	4619      	mov	r1, r3
 800a98a:	4610      	mov	r0, r2
 800a98c:	f7fe fdcb 	bl	8009526 <USBD_LL_SetupStage>
}
 800a990:	bf00      	nop
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a9aa:	78fa      	ldrb	r2, [r7, #3]
 800a9ac:	6879      	ldr	r1, [r7, #4]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	00db      	lsls	r3, r3, #3
 800a9b6:	440b      	add	r3, r1
 800a9b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	78fb      	ldrb	r3, [r7, #3]
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f7fe fdfd 	bl	80095c0 <USBD_LL_DataOutStage>
}
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b082      	sub	sp, #8
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800a9e0:	78fa      	ldrb	r2, [r7, #3]
 800a9e2:	6879      	ldr	r1, [r7, #4]
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	00db      	lsls	r3, r3, #3
 800a9ec:	440b      	add	r3, r1
 800a9ee:	333c      	adds	r3, #60	; 0x3c
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	78fb      	ldrb	r3, [r7, #3]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	f7fe fe54 	bl	80096a2 <USBD_LL_DataInStage>
}
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b082      	sub	sp, #8
 800aa06:	af00      	add	r7, sp, #0
 800aa08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fe ff64 	bl	80098de <USBD_LL_SOF>
}
 800aa16:	bf00      	nop
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa26:	2301      	movs	r3, #1
 800aa28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d001      	beq.n	800aa36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aa32:	f7f7 f883 	bl	8001b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aa3c:	7bfa      	ldrb	r2, [r7, #15]
 800aa3e:	4611      	mov	r1, r2
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe ff14 	bl	800986e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe fecd 	bl	80097ec <USBD_LL_Reset>
}
 800aa52:	bf00      	nop
 800aa54:	3710      	adds	r7, #16
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}
	...

0800aa5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b082      	sub	sp, #8
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe ff0e 	bl	800988c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d005      	beq.n	800aa84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa78:	4b04      	ldr	r3, [pc, #16]	; (800aa8c <HAL_PCD_SuspendCallback+0x30>)
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	4a03      	ldr	r2, [pc, #12]	; (800aa8c <HAL_PCD_SuspendCallback+0x30>)
 800aa7e:	f043 0306 	orr.w	r3, r3, #6
 800aa82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa84:	bf00      	nop
 800aa86:	3708      	adds	r7, #8
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	e000ed00 	.word	0xe000ed00

0800aa90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7fe ff08 	bl	80098b4 <USBD_LL_Resume>
}
 800aaa4:	bf00      	nop
 800aaa6:	3708      	adds	r7, #8
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b082      	sub	sp, #8
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800aab4:	4a28      	ldr	r2, [pc, #160]	; (800ab58 <USBD_LL_Init+0xac>)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <USBD_LL_Init+0xac>)
 800aac0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800aac4:	4b24      	ldr	r3, [pc, #144]	; (800ab58 <USBD_LL_Init+0xac>)
 800aac6:	4a25      	ldr	r2, [pc, #148]	; (800ab5c <USBD_LL_Init+0xb0>)
 800aac8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800aaca:	4b23      	ldr	r3, [pc, #140]	; (800ab58 <USBD_LL_Init+0xac>)
 800aacc:	2208      	movs	r2, #8
 800aace:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800aad0:	4b21      	ldr	r3, [pc, #132]	; (800ab58 <USBD_LL_Init+0xac>)
 800aad2:	2202      	movs	r2, #2
 800aad4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800aad6:	4b20      	ldr	r3, [pc, #128]	; (800ab58 <USBD_LL_Init+0xac>)
 800aad8:	2200      	movs	r2, #0
 800aada:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800aadc:	4b1e      	ldr	r3, [pc, #120]	; (800ab58 <USBD_LL_Init+0xac>)
 800aade:	2200      	movs	r2, #0
 800aae0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800aae2:	4b1d      	ldr	r3, [pc, #116]	; (800ab58 <USBD_LL_Init+0xac>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aae8:	481b      	ldr	r0, [pc, #108]	; (800ab58 <USBD_LL_Init+0xac>)
 800aaea:	f7f8 f83a 	bl	8002b62 <HAL_PCD_Init>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d001      	beq.n	800aaf8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800aaf4:	f7f7 f822 	bl	8001b3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aafe:	2318      	movs	r3, #24
 800ab00:	2200      	movs	r2, #0
 800ab02:	2100      	movs	r1, #0
 800ab04:	f7f9 fd59 	bl	80045ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab0e:	2358      	movs	r3, #88	; 0x58
 800ab10:	2200      	movs	r2, #0
 800ab12:	2180      	movs	r1, #128	; 0x80
 800ab14:	f7f9 fd51 	bl	80045ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab1e:	23c0      	movs	r3, #192	; 0xc0
 800ab20:	2200      	movs	r2, #0
 800ab22:	2181      	movs	r1, #129	; 0x81
 800ab24:	f7f9 fd49 	bl	80045ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ab32:	2200      	movs	r2, #0
 800ab34:	2101      	movs	r1, #1
 800ab36:	f7f9 fd40 	bl	80045ba <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab44:	2200      	movs	r2, #0
 800ab46:	2182      	movs	r1, #130	; 0x82
 800ab48:	f7f9 fd37 	bl	80045ba <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20001024 	.word	0x20001024
 800ab5c:	40005c00 	.word	0x40005c00

0800ab60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7f8 f8f2 	bl	8002d60 <HAL_PCD_Start>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab80:	7bfb      	ldrb	r3, [r7, #15]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f94e 	bl	800ae24 <USBD_Get_USB_Status>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab96:	b580      	push	{r7, lr}
 800ab98:	b084      	sub	sp, #16
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4611      	mov	r1, r2
 800aba2:	461a      	mov	r2, r3
 800aba4:	4603      	mov	r3, r0
 800aba6:	70fb      	strb	r3, [r7, #3]
 800aba8:	460b      	mov	r3, r1
 800abaa:	70bb      	strb	r3, [r7, #2]
 800abac:	4613      	mov	r3, r2
 800abae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abb0:	2300      	movs	r3, #0
 800abb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abb4:	2300      	movs	r3, #0
 800abb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abbe:	78bb      	ldrb	r3, [r7, #2]
 800abc0:	883a      	ldrh	r2, [r7, #0]
 800abc2:	78f9      	ldrb	r1, [r7, #3]
 800abc4:	f7f8 fa47 	bl	8003056 <HAL_PCD_EP_Open>
 800abc8:	4603      	mov	r3, r0
 800abca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f928 	bl	800ae24 <USBD_Get_USB_Status>
 800abd4:	4603      	mov	r3, r0
 800abd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3710      	adds	r7, #16
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}

0800abe2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abe2:	b580      	push	{r7, lr}
 800abe4:	b084      	sub	sp, #16
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
 800abea:	460b      	mov	r3, r1
 800abec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abf2:	2300      	movs	r3, #0
 800abf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abfc:	78fa      	ldrb	r2, [r7, #3]
 800abfe:	4611      	mov	r1, r2
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7f8 fa85 	bl	8003110 <HAL_PCD_EP_Close>
 800ac06:	4603      	mov	r3, r0
 800ac08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac0a:	7bfb      	ldrb	r3, [r7, #15]
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 f909 	bl	800ae24 <USBD_Get_USB_Status>
 800ac12:	4603      	mov	r3, r0
 800ac14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3710      	adds	r7, #16
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b084      	sub	sp, #16
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
 800ac28:	460b      	mov	r3, r1
 800ac2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac30:	2300      	movs	r3, #0
 800ac32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac3a:	78fa      	ldrb	r2, [r7, #3]
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7f8 fb2d 	bl	800329e <HAL_PCD_EP_SetStall>
 800ac44:	4603      	mov	r3, r0
 800ac46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac48:	7bfb      	ldrb	r3, [r7, #15]
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f000 f8ea 	bl	800ae24 <USBD_Get_USB_Status>
 800ac50:	4603      	mov	r3, r0
 800ac52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3710      	adds	r7, #16
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac78:	78fa      	ldrb	r2, [r7, #3]
 800ac7a:	4611      	mov	r1, r2
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7f8 fb6e 	bl	800335e <HAL_PCD_EP_ClrStall>
 800ac82:	4603      	mov	r3, r0
 800ac84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f000 f8cb 	bl	800ae24 <USBD_Get_USB_Status>
 800ac8e:	4603      	mov	r3, r0
 800ac90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b085      	sub	sp, #20
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	460b      	mov	r3, r1
 800aca6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800acb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	da0c      	bge.n	800acd2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800acb8:	78fb      	ldrb	r3, [r7, #3]
 800acba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	1c5a      	adds	r2, r3, #1
 800acc2:	4613      	mov	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	4413      	add	r3, r2
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	440b      	add	r3, r1
 800accc:	3302      	adds	r3, #2
 800acce:	781b      	ldrb	r3, [r3, #0]
 800acd0:	e00b      	b.n	800acea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acd2:	78fb      	ldrb	r3, [r7, #3]
 800acd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acd8:	68f9      	ldr	r1, [r7, #12]
 800acda:	4613      	mov	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	00db      	lsls	r3, r3, #3
 800ace2:	440b      	add	r3, r1
 800ace4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ace8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acea:	4618      	mov	r0, r3
 800acec:	3714      	adds	r7, #20
 800acee:	46bd      	mov	sp, r7
 800acf0:	bc80      	pop	{r7}
 800acf2:	4770      	bx	lr

0800acf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	460b      	mov	r3, r1
 800acfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad00:	2300      	movs	r3, #0
 800ad02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad0e:	78fa      	ldrb	r2, [r7, #3]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f8 f97a 	bl	800300c <HAL_PCD_SetAddress>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f880 	bl	800ae24 <USBD_Get_USB_Status>
 800ad24:	4603      	mov	r3, r0
 800ad26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3710      	adds	r7, #16
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad32:	b580      	push	{r7, lr}
 800ad34:	b086      	sub	sp, #24
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	60f8      	str	r0, [r7, #12]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	460b      	mov	r3, r1
 800ad40:	72fb      	strb	r3, [r7, #11]
 800ad42:	4613      	mov	r3, r2
 800ad44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad54:	893b      	ldrh	r3, [r7, #8]
 800ad56:	7af9      	ldrb	r1, [r7, #11]
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	f7f8 fa69 	bl	8003230 <HAL_PCD_EP_Transmit>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad62:	7dfb      	ldrb	r3, [r7, #23]
 800ad64:	4618      	mov	r0, r3
 800ad66:	f000 f85d 	bl	800ae24 <USBD_Get_USB_Status>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3718      	adds	r7, #24
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	607a      	str	r2, [r7, #4]
 800ad82:	461a      	mov	r2, r3
 800ad84:	460b      	mov	r3, r1
 800ad86:	72fb      	strb	r3, [r7, #11]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ad9a:	893b      	ldrh	r3, [r7, #8]
 800ad9c:	7af9      	ldrb	r1, [r7, #11]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	f7f8 f9fe 	bl	80031a0 <HAL_PCD_EP_Receive>
 800ada4:	4603      	mov	r3, r0
 800ada6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada8:	7dfb      	ldrb	r3, [r7, #23]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f83a 	bl	800ae24 <USBD_Get_USB_Status>
 800adb0:	4603      	mov	r3, r0
 800adb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800adb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b082      	sub	sp, #8
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	460b      	mov	r3, r1
 800adc8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800add0:	78fa      	ldrb	r2, [r7, #3]
 800add2:	4611      	mov	r1, r2
 800add4:	4618      	mov	r0, r3
 800add6:	f7f8 fa14 	bl	8003202 <HAL_PCD_EP_GetRxCount>
 800adda:	4603      	mov	r3, r0
}
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800adec:	4b02      	ldr	r3, [pc, #8]	; (800adf8 <USBD_static_malloc+0x14>)
}
 800adee:	4618      	mov	r0, r3
 800adf0:	370c      	adds	r7, #12
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bc80      	pop	{r7}
 800adf6:	4770      	bx	lr
 800adf8:	20001314 	.word	0x20001314

0800adfc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]

}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bc80      	pop	{r7}
 800ae0c:	4770      	bx	lr

0800ae0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae0e:	b480      	push	{r7}
 800ae10:	b083      	sub	sp, #12
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	460b      	mov	r3, r1
 800ae18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae1a:	bf00      	nop
 800ae1c:	370c      	adds	r7, #12
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bc80      	pop	{r7}
 800ae22:	4770      	bx	lr

0800ae24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b03      	cmp	r3, #3
 800ae36:	d817      	bhi.n	800ae68 <USBD_Get_USB_Status+0x44>
 800ae38:	a201      	add	r2, pc, #4	; (adr r2, 800ae40 <USBD_Get_USB_Status+0x1c>)
 800ae3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae3e:	bf00      	nop
 800ae40:	0800ae51 	.word	0x0800ae51
 800ae44:	0800ae57 	.word	0x0800ae57
 800ae48:	0800ae5d 	.word	0x0800ae5d
 800ae4c:	0800ae63 	.word	0x0800ae63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73fb      	strb	r3, [r7, #15]
    break;
 800ae54:	e00b      	b.n	800ae6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae56:	2302      	movs	r3, #2
 800ae58:	73fb      	strb	r3, [r7, #15]
    break;
 800ae5a:	e008      	b.n	800ae6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae60:	e005      	b.n	800ae6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae62:	2302      	movs	r3, #2
 800ae64:	73fb      	strb	r3, [r7, #15]
    break;
 800ae66:	e002      	b.n	800ae6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae68:	2302      	movs	r3, #2
 800ae6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ae6c:	bf00      	nop
  }
  return usb_status;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3714      	adds	r7, #20
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bc80      	pop	{r7}
 800ae78:	4770      	bx	lr
 800ae7a:	bf00      	nop

0800ae7c <siprintf>:
 800ae7c:	b40e      	push	{r1, r2, r3}
 800ae7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae82:	b500      	push	{lr}
 800ae84:	b09c      	sub	sp, #112	; 0x70
 800ae86:	ab1d      	add	r3, sp, #116	; 0x74
 800ae88:	9002      	str	r0, [sp, #8]
 800ae8a:	9006      	str	r0, [sp, #24]
 800ae8c:	9107      	str	r1, [sp, #28]
 800ae8e:	9104      	str	r1, [sp, #16]
 800ae90:	4808      	ldr	r0, [pc, #32]	; (800aeb4 <siprintf+0x38>)
 800ae92:	4909      	ldr	r1, [pc, #36]	; (800aeb8 <siprintf+0x3c>)
 800ae94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae98:	9105      	str	r1, [sp, #20]
 800ae9a:	6800      	ldr	r0, [r0, #0]
 800ae9c:	a902      	add	r1, sp, #8
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	f000 f89a 	bl	800afd8 <_svfiprintf_r>
 800aea4:	2200      	movs	r2, #0
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	701a      	strb	r2, [r3, #0]
 800aeaa:	b01c      	add	sp, #112	; 0x70
 800aeac:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeb0:	b003      	add	sp, #12
 800aeb2:	4770      	bx	lr
 800aeb4:	20000210 	.word	0x20000210
 800aeb8:	ffff0208 	.word	0xffff0208

0800aebc <memset>:
 800aebc:	4603      	mov	r3, r0
 800aebe:	4402      	add	r2, r0
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d100      	bne.n	800aec6 <memset+0xa>
 800aec4:	4770      	bx	lr
 800aec6:	f803 1b01 	strb.w	r1, [r3], #1
 800aeca:	e7f9      	b.n	800aec0 <memset+0x4>

0800aecc <__errno>:
 800aecc:	4b01      	ldr	r3, [pc, #4]	; (800aed4 <__errno+0x8>)
 800aece:	6818      	ldr	r0, [r3, #0]
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	20000210 	.word	0x20000210

0800aed8 <__libc_init_array>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	2600      	movs	r6, #0
 800aedc:	4d0c      	ldr	r5, [pc, #48]	; (800af10 <__libc_init_array+0x38>)
 800aede:	4c0d      	ldr	r4, [pc, #52]	; (800af14 <__libc_init_array+0x3c>)
 800aee0:	1b64      	subs	r4, r4, r5
 800aee2:	10a4      	asrs	r4, r4, #2
 800aee4:	42a6      	cmp	r6, r4
 800aee6:	d109      	bne.n	800aefc <__libc_init_array+0x24>
 800aee8:	f001 fe10 	bl	800cb0c <_init>
 800aeec:	2600      	movs	r6, #0
 800aeee:	4d0a      	ldr	r5, [pc, #40]	; (800af18 <__libc_init_array+0x40>)
 800aef0:	4c0a      	ldr	r4, [pc, #40]	; (800af1c <__libc_init_array+0x44>)
 800aef2:	1b64      	subs	r4, r4, r5
 800aef4:	10a4      	asrs	r4, r4, #2
 800aef6:	42a6      	cmp	r6, r4
 800aef8:	d105      	bne.n	800af06 <__libc_init_array+0x2e>
 800aefa:	bd70      	pop	{r4, r5, r6, pc}
 800aefc:	f855 3b04 	ldr.w	r3, [r5], #4
 800af00:	4798      	blx	r3
 800af02:	3601      	adds	r6, #1
 800af04:	e7ee      	b.n	800aee4 <__libc_init_array+0xc>
 800af06:	f855 3b04 	ldr.w	r3, [r5], #4
 800af0a:	4798      	blx	r3
 800af0c:	3601      	adds	r6, #1
 800af0e:	e7f2      	b.n	800aef6 <__libc_init_array+0x1e>
 800af10:	0800cde0 	.word	0x0800cde0
 800af14:	0800cde0 	.word	0x0800cde0
 800af18:	0800cde0 	.word	0x0800cde0
 800af1c:	0800cde4 	.word	0x0800cde4

0800af20 <__retarget_lock_acquire_recursive>:
 800af20:	4770      	bx	lr

0800af22 <__retarget_lock_release_recursive>:
 800af22:	4770      	bx	lr

0800af24 <__ssputs_r>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	461f      	mov	r7, r3
 800af2a:	688e      	ldr	r6, [r1, #8]
 800af2c:	4682      	mov	sl, r0
 800af2e:	42be      	cmp	r6, r7
 800af30:	460c      	mov	r4, r1
 800af32:	4690      	mov	r8, r2
 800af34:	680b      	ldr	r3, [r1, #0]
 800af36:	d82c      	bhi.n	800af92 <__ssputs_r+0x6e>
 800af38:	898a      	ldrh	r2, [r1, #12]
 800af3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af3e:	d026      	beq.n	800af8e <__ssputs_r+0x6a>
 800af40:	6965      	ldr	r5, [r4, #20]
 800af42:	6909      	ldr	r1, [r1, #16]
 800af44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af48:	eba3 0901 	sub.w	r9, r3, r1
 800af4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af50:	1c7b      	adds	r3, r7, #1
 800af52:	444b      	add	r3, r9
 800af54:	106d      	asrs	r5, r5, #1
 800af56:	429d      	cmp	r5, r3
 800af58:	bf38      	it	cc
 800af5a:	461d      	movcc	r5, r3
 800af5c:	0553      	lsls	r3, r2, #21
 800af5e:	d527      	bpl.n	800afb0 <__ssputs_r+0x8c>
 800af60:	4629      	mov	r1, r5
 800af62:	f000 f957 	bl	800b214 <_malloc_r>
 800af66:	4606      	mov	r6, r0
 800af68:	b360      	cbz	r0, 800afc4 <__ssputs_r+0xa0>
 800af6a:	464a      	mov	r2, r9
 800af6c:	6921      	ldr	r1, [r4, #16]
 800af6e:	f000 fbd9 	bl	800b724 <memcpy>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	6126      	str	r6, [r4, #16]
 800af80:	444e      	add	r6, r9
 800af82:	6026      	str	r6, [r4, #0]
 800af84:	463e      	mov	r6, r7
 800af86:	6165      	str	r5, [r4, #20]
 800af88:	eba5 0509 	sub.w	r5, r5, r9
 800af8c:	60a5      	str	r5, [r4, #8]
 800af8e:	42be      	cmp	r6, r7
 800af90:	d900      	bls.n	800af94 <__ssputs_r+0x70>
 800af92:	463e      	mov	r6, r7
 800af94:	4632      	mov	r2, r6
 800af96:	4641      	mov	r1, r8
 800af98:	6820      	ldr	r0, [r4, #0]
 800af9a:	f000 fb8a 	bl	800b6b2 <memmove>
 800af9e:	2000      	movs	r0, #0
 800afa0:	68a3      	ldr	r3, [r4, #8]
 800afa2:	1b9b      	subs	r3, r3, r6
 800afa4:	60a3      	str	r3, [r4, #8]
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	4433      	add	r3, r6
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb0:	462a      	mov	r2, r5
 800afb2:	f000 fb4f 	bl	800b654 <_realloc_r>
 800afb6:	4606      	mov	r6, r0
 800afb8:	2800      	cmp	r0, #0
 800afba:	d1e0      	bne.n	800af7e <__ssputs_r+0x5a>
 800afbc:	4650      	mov	r0, sl
 800afbe:	6921      	ldr	r1, [r4, #16]
 800afc0:	f000 fbbe 	bl	800b740 <_free_r>
 800afc4:	230c      	movs	r3, #12
 800afc6:	f8ca 3000 	str.w	r3, [sl]
 800afca:	89a3      	ldrh	r3, [r4, #12]
 800afcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	e7e9      	b.n	800afac <__ssputs_r+0x88>

0800afd8 <_svfiprintf_r>:
 800afd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afdc:	4698      	mov	r8, r3
 800afde:	898b      	ldrh	r3, [r1, #12]
 800afe0:	4607      	mov	r7, r0
 800afe2:	061b      	lsls	r3, r3, #24
 800afe4:	460d      	mov	r5, r1
 800afe6:	4614      	mov	r4, r2
 800afe8:	b09d      	sub	sp, #116	; 0x74
 800afea:	d50e      	bpl.n	800b00a <_svfiprintf_r+0x32>
 800afec:	690b      	ldr	r3, [r1, #16]
 800afee:	b963      	cbnz	r3, 800b00a <_svfiprintf_r+0x32>
 800aff0:	2140      	movs	r1, #64	; 0x40
 800aff2:	f000 f90f 	bl	800b214 <_malloc_r>
 800aff6:	6028      	str	r0, [r5, #0]
 800aff8:	6128      	str	r0, [r5, #16]
 800affa:	b920      	cbnz	r0, 800b006 <_svfiprintf_r+0x2e>
 800affc:	230c      	movs	r3, #12
 800affe:	603b      	str	r3, [r7, #0]
 800b000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b004:	e0d0      	b.n	800b1a8 <_svfiprintf_r+0x1d0>
 800b006:	2340      	movs	r3, #64	; 0x40
 800b008:	616b      	str	r3, [r5, #20]
 800b00a:	2300      	movs	r3, #0
 800b00c:	9309      	str	r3, [sp, #36]	; 0x24
 800b00e:	2320      	movs	r3, #32
 800b010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b014:	2330      	movs	r3, #48	; 0x30
 800b016:	f04f 0901 	mov.w	r9, #1
 800b01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b01e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800b1c0 <_svfiprintf_r+0x1e8>
 800b022:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b026:	4623      	mov	r3, r4
 800b028:	469a      	mov	sl, r3
 800b02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b02e:	b10a      	cbz	r2, 800b034 <_svfiprintf_r+0x5c>
 800b030:	2a25      	cmp	r2, #37	; 0x25
 800b032:	d1f9      	bne.n	800b028 <_svfiprintf_r+0x50>
 800b034:	ebba 0b04 	subs.w	fp, sl, r4
 800b038:	d00b      	beq.n	800b052 <_svfiprintf_r+0x7a>
 800b03a:	465b      	mov	r3, fp
 800b03c:	4622      	mov	r2, r4
 800b03e:	4629      	mov	r1, r5
 800b040:	4638      	mov	r0, r7
 800b042:	f7ff ff6f 	bl	800af24 <__ssputs_r>
 800b046:	3001      	adds	r0, #1
 800b048:	f000 80a9 	beq.w	800b19e <_svfiprintf_r+0x1c6>
 800b04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b04e:	445a      	add	r2, fp
 800b050:	9209      	str	r2, [sp, #36]	; 0x24
 800b052:	f89a 3000 	ldrb.w	r3, [sl]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80a1 	beq.w	800b19e <_svfiprintf_r+0x1c6>
 800b05c:	2300      	movs	r3, #0
 800b05e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b066:	f10a 0a01 	add.w	sl, sl, #1
 800b06a:	9304      	str	r3, [sp, #16]
 800b06c:	9307      	str	r3, [sp, #28]
 800b06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b072:	931a      	str	r3, [sp, #104]	; 0x68
 800b074:	4654      	mov	r4, sl
 800b076:	2205      	movs	r2, #5
 800b078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b07c:	4850      	ldr	r0, [pc, #320]	; (800b1c0 <_svfiprintf_r+0x1e8>)
 800b07e:	f000 fb43 	bl	800b708 <memchr>
 800b082:	9a04      	ldr	r2, [sp, #16]
 800b084:	b9d8      	cbnz	r0, 800b0be <_svfiprintf_r+0xe6>
 800b086:	06d0      	lsls	r0, r2, #27
 800b088:	bf44      	itt	mi
 800b08a:	2320      	movmi	r3, #32
 800b08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b090:	0711      	lsls	r1, r2, #28
 800b092:	bf44      	itt	mi
 800b094:	232b      	movmi	r3, #43	; 0x2b
 800b096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b09a:	f89a 3000 	ldrb.w	r3, [sl]
 800b09e:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a0:	d015      	beq.n	800b0ce <_svfiprintf_r+0xf6>
 800b0a2:	4654      	mov	r4, sl
 800b0a4:	2000      	movs	r0, #0
 800b0a6:	f04f 0c0a 	mov.w	ip, #10
 800b0aa:	9a07      	ldr	r2, [sp, #28]
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b2:	3b30      	subs	r3, #48	; 0x30
 800b0b4:	2b09      	cmp	r3, #9
 800b0b6:	d94d      	bls.n	800b154 <_svfiprintf_r+0x17c>
 800b0b8:	b1b0      	cbz	r0, 800b0e8 <_svfiprintf_r+0x110>
 800b0ba:	9207      	str	r2, [sp, #28]
 800b0bc:	e014      	b.n	800b0e8 <_svfiprintf_r+0x110>
 800b0be:	eba0 0308 	sub.w	r3, r0, r8
 800b0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	46a2      	mov	sl, r4
 800b0ca:	9304      	str	r3, [sp, #16]
 800b0cc:	e7d2      	b.n	800b074 <_svfiprintf_r+0x9c>
 800b0ce:	9b03      	ldr	r3, [sp, #12]
 800b0d0:	1d19      	adds	r1, r3, #4
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	9103      	str	r1, [sp, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	bfbb      	ittet	lt
 800b0da:	425b      	neglt	r3, r3
 800b0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e0:	9307      	strge	r3, [sp, #28]
 800b0e2:	9307      	strlt	r3, [sp, #28]
 800b0e4:	bfb8      	it	lt
 800b0e6:	9204      	strlt	r2, [sp, #16]
 800b0e8:	7823      	ldrb	r3, [r4, #0]
 800b0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800b0ec:	d10c      	bne.n	800b108 <_svfiprintf_r+0x130>
 800b0ee:	7863      	ldrb	r3, [r4, #1]
 800b0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0f2:	d134      	bne.n	800b15e <_svfiprintf_r+0x186>
 800b0f4:	9b03      	ldr	r3, [sp, #12]
 800b0f6:	3402      	adds	r4, #2
 800b0f8:	1d1a      	adds	r2, r3, #4
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	9203      	str	r2, [sp, #12]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bfb8      	it	lt
 800b102:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b106:	9305      	str	r3, [sp, #20]
 800b108:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800b1c4 <_svfiprintf_r+0x1ec>
 800b10c:	2203      	movs	r2, #3
 800b10e:	4650      	mov	r0, sl
 800b110:	7821      	ldrb	r1, [r4, #0]
 800b112:	f000 faf9 	bl	800b708 <memchr>
 800b116:	b138      	cbz	r0, 800b128 <_svfiprintf_r+0x150>
 800b118:	2240      	movs	r2, #64	; 0x40
 800b11a:	9b04      	ldr	r3, [sp, #16]
 800b11c:	eba0 000a 	sub.w	r0, r0, sl
 800b120:	4082      	lsls	r2, r0
 800b122:	4313      	orrs	r3, r2
 800b124:	3401      	adds	r4, #1
 800b126:	9304      	str	r3, [sp, #16]
 800b128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12c:	2206      	movs	r2, #6
 800b12e:	4826      	ldr	r0, [pc, #152]	; (800b1c8 <_svfiprintf_r+0x1f0>)
 800b130:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b134:	f000 fae8 	bl	800b708 <memchr>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d038      	beq.n	800b1ae <_svfiprintf_r+0x1d6>
 800b13c:	4b23      	ldr	r3, [pc, #140]	; (800b1cc <_svfiprintf_r+0x1f4>)
 800b13e:	bb1b      	cbnz	r3, 800b188 <_svfiprintf_r+0x1b0>
 800b140:	9b03      	ldr	r3, [sp, #12]
 800b142:	3307      	adds	r3, #7
 800b144:	f023 0307 	bic.w	r3, r3, #7
 800b148:	3308      	adds	r3, #8
 800b14a:	9303      	str	r3, [sp, #12]
 800b14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b14e:	4433      	add	r3, r6
 800b150:	9309      	str	r3, [sp, #36]	; 0x24
 800b152:	e768      	b.n	800b026 <_svfiprintf_r+0x4e>
 800b154:	460c      	mov	r4, r1
 800b156:	2001      	movs	r0, #1
 800b158:	fb0c 3202 	mla	r2, ip, r2, r3
 800b15c:	e7a6      	b.n	800b0ac <_svfiprintf_r+0xd4>
 800b15e:	2300      	movs	r3, #0
 800b160:	f04f 0c0a 	mov.w	ip, #10
 800b164:	4619      	mov	r1, r3
 800b166:	3401      	adds	r4, #1
 800b168:	9305      	str	r3, [sp, #20]
 800b16a:	4620      	mov	r0, r4
 800b16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b170:	3a30      	subs	r2, #48	; 0x30
 800b172:	2a09      	cmp	r2, #9
 800b174:	d903      	bls.n	800b17e <_svfiprintf_r+0x1a6>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d0c6      	beq.n	800b108 <_svfiprintf_r+0x130>
 800b17a:	9105      	str	r1, [sp, #20]
 800b17c:	e7c4      	b.n	800b108 <_svfiprintf_r+0x130>
 800b17e:	4604      	mov	r4, r0
 800b180:	2301      	movs	r3, #1
 800b182:	fb0c 2101 	mla	r1, ip, r1, r2
 800b186:	e7f0      	b.n	800b16a <_svfiprintf_r+0x192>
 800b188:	ab03      	add	r3, sp, #12
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	462a      	mov	r2, r5
 800b18e:	4638      	mov	r0, r7
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <_svfiprintf_r+0x1f8>)
 800b192:	a904      	add	r1, sp, #16
 800b194:	f3af 8000 	nop.w
 800b198:	1c42      	adds	r2, r0, #1
 800b19a:	4606      	mov	r6, r0
 800b19c:	d1d6      	bne.n	800b14c <_svfiprintf_r+0x174>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	065b      	lsls	r3, r3, #25
 800b1a2:	f53f af2d 	bmi.w	800b000 <_svfiprintf_r+0x28>
 800b1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1a8:	b01d      	add	sp, #116	; 0x74
 800b1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	ab03      	add	r3, sp, #12
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	462a      	mov	r2, r5
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <_svfiprintf_r+0x1f8>)
 800b1b8:	a904      	add	r1, sp, #16
 800b1ba:	f000 f91d 	bl	800b3f8 <_printf_i>
 800b1be:	e7eb      	b.n	800b198 <_svfiprintf_r+0x1c0>
 800b1c0:	0800cbbe 	.word	0x0800cbbe
 800b1c4:	0800cbc4 	.word	0x0800cbc4
 800b1c8:	0800cbc8 	.word	0x0800cbc8
 800b1cc:	00000000 	.word	0x00000000
 800b1d0:	0800af25 	.word	0x0800af25

0800b1d4 <sbrk_aligned>:
 800b1d4:	b570      	push	{r4, r5, r6, lr}
 800b1d6:	4e0e      	ldr	r6, [pc, #56]	; (800b210 <sbrk_aligned+0x3c>)
 800b1d8:	460c      	mov	r4, r1
 800b1da:	6831      	ldr	r1, [r6, #0]
 800b1dc:	4605      	mov	r5, r0
 800b1de:	b911      	cbnz	r1, 800b1e6 <sbrk_aligned+0x12>
 800b1e0:	f000 fa82 	bl	800b6e8 <_sbrk_r>
 800b1e4:	6030      	str	r0, [r6, #0]
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	f000 fa7d 	bl	800b6e8 <_sbrk_r>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d00a      	beq.n	800b208 <sbrk_aligned+0x34>
 800b1f2:	1cc4      	adds	r4, r0, #3
 800b1f4:	f024 0403 	bic.w	r4, r4, #3
 800b1f8:	42a0      	cmp	r0, r4
 800b1fa:	d007      	beq.n	800b20c <sbrk_aligned+0x38>
 800b1fc:	1a21      	subs	r1, r4, r0
 800b1fe:	4628      	mov	r0, r5
 800b200:	f000 fa72 	bl	800b6e8 <_sbrk_r>
 800b204:	3001      	adds	r0, #1
 800b206:	d101      	bne.n	800b20c <sbrk_aligned+0x38>
 800b208:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b20c:	4620      	mov	r0, r4
 800b20e:	bd70      	pop	{r4, r5, r6, pc}
 800b210:	20001674 	.word	0x20001674

0800b214 <_malloc_r>:
 800b214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b218:	1ccd      	adds	r5, r1, #3
 800b21a:	f025 0503 	bic.w	r5, r5, #3
 800b21e:	3508      	adds	r5, #8
 800b220:	2d0c      	cmp	r5, #12
 800b222:	bf38      	it	cc
 800b224:	250c      	movcc	r5, #12
 800b226:	2d00      	cmp	r5, #0
 800b228:	4607      	mov	r7, r0
 800b22a:	db01      	blt.n	800b230 <_malloc_r+0x1c>
 800b22c:	42a9      	cmp	r1, r5
 800b22e:	d905      	bls.n	800b23c <_malloc_r+0x28>
 800b230:	230c      	movs	r3, #12
 800b232:	2600      	movs	r6, #0
 800b234:	603b      	str	r3, [r7, #0]
 800b236:	4630      	mov	r0, r6
 800b238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b23c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b310 <_malloc_r+0xfc>
 800b240:	f000 f9fc 	bl	800b63c <__malloc_lock>
 800b244:	f8d8 3000 	ldr.w	r3, [r8]
 800b248:	461c      	mov	r4, r3
 800b24a:	bb5c      	cbnz	r4, 800b2a4 <_malloc_r+0x90>
 800b24c:	4629      	mov	r1, r5
 800b24e:	4638      	mov	r0, r7
 800b250:	f7ff ffc0 	bl	800b1d4 <sbrk_aligned>
 800b254:	1c43      	adds	r3, r0, #1
 800b256:	4604      	mov	r4, r0
 800b258:	d155      	bne.n	800b306 <_malloc_r+0xf2>
 800b25a:	f8d8 4000 	ldr.w	r4, [r8]
 800b25e:	4626      	mov	r6, r4
 800b260:	2e00      	cmp	r6, #0
 800b262:	d145      	bne.n	800b2f0 <_malloc_r+0xdc>
 800b264:	2c00      	cmp	r4, #0
 800b266:	d048      	beq.n	800b2fa <_malloc_r+0xe6>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	4631      	mov	r1, r6
 800b26c:	4638      	mov	r0, r7
 800b26e:	eb04 0903 	add.w	r9, r4, r3
 800b272:	f000 fa39 	bl	800b6e8 <_sbrk_r>
 800b276:	4581      	cmp	r9, r0
 800b278:	d13f      	bne.n	800b2fa <_malloc_r+0xe6>
 800b27a:	6821      	ldr	r1, [r4, #0]
 800b27c:	4638      	mov	r0, r7
 800b27e:	1a6d      	subs	r5, r5, r1
 800b280:	4629      	mov	r1, r5
 800b282:	f7ff ffa7 	bl	800b1d4 <sbrk_aligned>
 800b286:	3001      	adds	r0, #1
 800b288:	d037      	beq.n	800b2fa <_malloc_r+0xe6>
 800b28a:	6823      	ldr	r3, [r4, #0]
 800b28c:	442b      	add	r3, r5
 800b28e:	6023      	str	r3, [r4, #0]
 800b290:	f8d8 3000 	ldr.w	r3, [r8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d038      	beq.n	800b30a <_malloc_r+0xf6>
 800b298:	685a      	ldr	r2, [r3, #4]
 800b29a:	42a2      	cmp	r2, r4
 800b29c:	d12b      	bne.n	800b2f6 <_malloc_r+0xe2>
 800b29e:	2200      	movs	r2, #0
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	e00f      	b.n	800b2c4 <_malloc_r+0xb0>
 800b2a4:	6822      	ldr	r2, [r4, #0]
 800b2a6:	1b52      	subs	r2, r2, r5
 800b2a8:	d41f      	bmi.n	800b2ea <_malloc_r+0xd6>
 800b2aa:	2a0b      	cmp	r2, #11
 800b2ac:	d917      	bls.n	800b2de <_malloc_r+0xca>
 800b2ae:	1961      	adds	r1, r4, r5
 800b2b0:	42a3      	cmp	r3, r4
 800b2b2:	6025      	str	r5, [r4, #0]
 800b2b4:	bf18      	it	ne
 800b2b6:	6059      	strne	r1, [r3, #4]
 800b2b8:	6863      	ldr	r3, [r4, #4]
 800b2ba:	bf08      	it	eq
 800b2bc:	f8c8 1000 	streq.w	r1, [r8]
 800b2c0:	5162      	str	r2, [r4, r5]
 800b2c2:	604b      	str	r3, [r1, #4]
 800b2c4:	4638      	mov	r0, r7
 800b2c6:	f104 060b 	add.w	r6, r4, #11
 800b2ca:	f000 f9bd 	bl	800b648 <__malloc_unlock>
 800b2ce:	f026 0607 	bic.w	r6, r6, #7
 800b2d2:	1d23      	adds	r3, r4, #4
 800b2d4:	1af2      	subs	r2, r6, r3
 800b2d6:	d0ae      	beq.n	800b236 <_malloc_r+0x22>
 800b2d8:	1b9b      	subs	r3, r3, r6
 800b2da:	50a3      	str	r3, [r4, r2]
 800b2dc:	e7ab      	b.n	800b236 <_malloc_r+0x22>
 800b2de:	42a3      	cmp	r3, r4
 800b2e0:	6862      	ldr	r2, [r4, #4]
 800b2e2:	d1dd      	bne.n	800b2a0 <_malloc_r+0x8c>
 800b2e4:	f8c8 2000 	str.w	r2, [r8]
 800b2e8:	e7ec      	b.n	800b2c4 <_malloc_r+0xb0>
 800b2ea:	4623      	mov	r3, r4
 800b2ec:	6864      	ldr	r4, [r4, #4]
 800b2ee:	e7ac      	b.n	800b24a <_malloc_r+0x36>
 800b2f0:	4634      	mov	r4, r6
 800b2f2:	6876      	ldr	r6, [r6, #4]
 800b2f4:	e7b4      	b.n	800b260 <_malloc_r+0x4c>
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	e7cc      	b.n	800b294 <_malloc_r+0x80>
 800b2fa:	230c      	movs	r3, #12
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	603b      	str	r3, [r7, #0]
 800b300:	f000 f9a2 	bl	800b648 <__malloc_unlock>
 800b304:	e797      	b.n	800b236 <_malloc_r+0x22>
 800b306:	6025      	str	r5, [r4, #0]
 800b308:	e7dc      	b.n	800b2c4 <_malloc_r+0xb0>
 800b30a:	605b      	str	r3, [r3, #4]
 800b30c:	deff      	udf	#255	; 0xff
 800b30e:	bf00      	nop
 800b310:	20001670 	.word	0x20001670

0800b314 <_printf_common>:
 800b314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b318:	4616      	mov	r6, r2
 800b31a:	4699      	mov	r9, r3
 800b31c:	688a      	ldr	r2, [r1, #8]
 800b31e:	690b      	ldr	r3, [r1, #16]
 800b320:	4607      	mov	r7, r0
 800b322:	4293      	cmp	r3, r2
 800b324:	bfb8      	it	lt
 800b326:	4613      	movlt	r3, r2
 800b328:	6033      	str	r3, [r6, #0]
 800b32a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b32e:	460c      	mov	r4, r1
 800b330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b334:	b10a      	cbz	r2, 800b33a <_printf_common+0x26>
 800b336:	3301      	adds	r3, #1
 800b338:	6033      	str	r3, [r6, #0]
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	0699      	lsls	r1, r3, #26
 800b33e:	bf42      	ittt	mi
 800b340:	6833      	ldrmi	r3, [r6, #0]
 800b342:	3302      	addmi	r3, #2
 800b344:	6033      	strmi	r3, [r6, #0]
 800b346:	6825      	ldr	r5, [r4, #0]
 800b348:	f015 0506 	ands.w	r5, r5, #6
 800b34c:	d106      	bne.n	800b35c <_printf_common+0x48>
 800b34e:	f104 0a19 	add.w	sl, r4, #25
 800b352:	68e3      	ldr	r3, [r4, #12]
 800b354:	6832      	ldr	r2, [r6, #0]
 800b356:	1a9b      	subs	r3, r3, r2
 800b358:	42ab      	cmp	r3, r5
 800b35a:	dc2b      	bgt.n	800b3b4 <_printf_common+0xa0>
 800b35c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b360:	1e13      	subs	r3, r2, #0
 800b362:	6822      	ldr	r2, [r4, #0]
 800b364:	bf18      	it	ne
 800b366:	2301      	movne	r3, #1
 800b368:	0692      	lsls	r2, r2, #26
 800b36a:	d430      	bmi.n	800b3ce <_printf_common+0xba>
 800b36c:	4649      	mov	r1, r9
 800b36e:	4638      	mov	r0, r7
 800b370:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b374:	47c0      	blx	r8
 800b376:	3001      	adds	r0, #1
 800b378:	d023      	beq.n	800b3c2 <_printf_common+0xae>
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	6922      	ldr	r2, [r4, #16]
 800b37e:	f003 0306 	and.w	r3, r3, #6
 800b382:	2b04      	cmp	r3, #4
 800b384:	bf14      	ite	ne
 800b386:	2500      	movne	r5, #0
 800b388:	6833      	ldreq	r3, [r6, #0]
 800b38a:	f04f 0600 	mov.w	r6, #0
 800b38e:	bf08      	it	eq
 800b390:	68e5      	ldreq	r5, [r4, #12]
 800b392:	f104 041a 	add.w	r4, r4, #26
 800b396:	bf08      	it	eq
 800b398:	1aed      	subeq	r5, r5, r3
 800b39a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800b39e:	bf08      	it	eq
 800b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	bfc4      	itt	gt
 800b3a8:	1a9b      	subgt	r3, r3, r2
 800b3aa:	18ed      	addgt	r5, r5, r3
 800b3ac:	42b5      	cmp	r5, r6
 800b3ae:	d11a      	bne.n	800b3e6 <_printf_common+0xd2>
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	e008      	b.n	800b3c6 <_printf_common+0xb2>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	4652      	mov	r2, sl
 800b3b8:	4649      	mov	r1, r9
 800b3ba:	4638      	mov	r0, r7
 800b3bc:	47c0      	blx	r8
 800b3be:	3001      	adds	r0, #1
 800b3c0:	d103      	bne.n	800b3ca <_printf_common+0xb6>
 800b3c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ca:	3501      	adds	r5, #1
 800b3cc:	e7c1      	b.n	800b352 <_printf_common+0x3e>
 800b3ce:	2030      	movs	r0, #48	; 0x30
 800b3d0:	18e1      	adds	r1, r4, r3
 800b3d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3dc:	4422      	add	r2, r4
 800b3de:	3302      	adds	r3, #2
 800b3e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3e4:	e7c2      	b.n	800b36c <_printf_common+0x58>
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	4622      	mov	r2, r4
 800b3ea:	4649      	mov	r1, r9
 800b3ec:	4638      	mov	r0, r7
 800b3ee:	47c0      	blx	r8
 800b3f0:	3001      	adds	r0, #1
 800b3f2:	d0e6      	beq.n	800b3c2 <_printf_common+0xae>
 800b3f4:	3601      	adds	r6, #1
 800b3f6:	e7d9      	b.n	800b3ac <_printf_common+0x98>

0800b3f8 <_printf_i>:
 800b3f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3fc:	7e0f      	ldrb	r7, [r1, #24]
 800b3fe:	4691      	mov	r9, r2
 800b400:	2f78      	cmp	r7, #120	; 0x78
 800b402:	4680      	mov	r8, r0
 800b404:	460c      	mov	r4, r1
 800b406:	469a      	mov	sl, r3
 800b408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b40a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b40e:	d807      	bhi.n	800b420 <_printf_i+0x28>
 800b410:	2f62      	cmp	r7, #98	; 0x62
 800b412:	d80a      	bhi.n	800b42a <_printf_i+0x32>
 800b414:	2f00      	cmp	r7, #0
 800b416:	f000 80d5 	beq.w	800b5c4 <_printf_i+0x1cc>
 800b41a:	2f58      	cmp	r7, #88	; 0x58
 800b41c:	f000 80c1 	beq.w	800b5a2 <_printf_i+0x1aa>
 800b420:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b424:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b428:	e03a      	b.n	800b4a0 <_printf_i+0xa8>
 800b42a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b42e:	2b15      	cmp	r3, #21
 800b430:	d8f6      	bhi.n	800b420 <_printf_i+0x28>
 800b432:	a101      	add	r1, pc, #4	; (adr r1, 800b438 <_printf_i+0x40>)
 800b434:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b438:	0800b491 	.word	0x0800b491
 800b43c:	0800b4a5 	.word	0x0800b4a5
 800b440:	0800b421 	.word	0x0800b421
 800b444:	0800b421 	.word	0x0800b421
 800b448:	0800b421 	.word	0x0800b421
 800b44c:	0800b421 	.word	0x0800b421
 800b450:	0800b4a5 	.word	0x0800b4a5
 800b454:	0800b421 	.word	0x0800b421
 800b458:	0800b421 	.word	0x0800b421
 800b45c:	0800b421 	.word	0x0800b421
 800b460:	0800b421 	.word	0x0800b421
 800b464:	0800b5ab 	.word	0x0800b5ab
 800b468:	0800b4d1 	.word	0x0800b4d1
 800b46c:	0800b565 	.word	0x0800b565
 800b470:	0800b421 	.word	0x0800b421
 800b474:	0800b421 	.word	0x0800b421
 800b478:	0800b5cd 	.word	0x0800b5cd
 800b47c:	0800b421 	.word	0x0800b421
 800b480:	0800b4d1 	.word	0x0800b4d1
 800b484:	0800b421 	.word	0x0800b421
 800b488:	0800b421 	.word	0x0800b421
 800b48c:	0800b56d 	.word	0x0800b56d
 800b490:	682b      	ldr	r3, [r5, #0]
 800b492:	1d1a      	adds	r2, r3, #4
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	602a      	str	r2, [r5, #0]
 800b498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b49c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e0a0      	b.n	800b5e6 <_printf_i+0x1ee>
 800b4a4:	6820      	ldr	r0, [r4, #0]
 800b4a6:	682b      	ldr	r3, [r5, #0]
 800b4a8:	0607      	lsls	r7, r0, #24
 800b4aa:	f103 0104 	add.w	r1, r3, #4
 800b4ae:	6029      	str	r1, [r5, #0]
 800b4b0:	d501      	bpl.n	800b4b6 <_printf_i+0xbe>
 800b4b2:	681e      	ldr	r6, [r3, #0]
 800b4b4:	e003      	b.n	800b4be <_printf_i+0xc6>
 800b4b6:	0646      	lsls	r6, r0, #25
 800b4b8:	d5fb      	bpl.n	800b4b2 <_printf_i+0xba>
 800b4ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b4be:	2e00      	cmp	r6, #0
 800b4c0:	da03      	bge.n	800b4ca <_printf_i+0xd2>
 800b4c2:	232d      	movs	r3, #45	; 0x2d
 800b4c4:	4276      	negs	r6, r6
 800b4c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4ca:	230a      	movs	r3, #10
 800b4cc:	4859      	ldr	r0, [pc, #356]	; (800b634 <_printf_i+0x23c>)
 800b4ce:	e012      	b.n	800b4f6 <_printf_i+0xfe>
 800b4d0:	682b      	ldr	r3, [r5, #0]
 800b4d2:	6820      	ldr	r0, [r4, #0]
 800b4d4:	1d19      	adds	r1, r3, #4
 800b4d6:	6029      	str	r1, [r5, #0]
 800b4d8:	0605      	lsls	r5, r0, #24
 800b4da:	d501      	bpl.n	800b4e0 <_printf_i+0xe8>
 800b4dc:	681e      	ldr	r6, [r3, #0]
 800b4de:	e002      	b.n	800b4e6 <_printf_i+0xee>
 800b4e0:	0641      	lsls	r1, r0, #25
 800b4e2:	d5fb      	bpl.n	800b4dc <_printf_i+0xe4>
 800b4e4:	881e      	ldrh	r6, [r3, #0]
 800b4e6:	2f6f      	cmp	r7, #111	; 0x6f
 800b4e8:	bf0c      	ite	eq
 800b4ea:	2308      	moveq	r3, #8
 800b4ec:	230a      	movne	r3, #10
 800b4ee:	4851      	ldr	r0, [pc, #324]	; (800b634 <_printf_i+0x23c>)
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4f6:	6865      	ldr	r5, [r4, #4]
 800b4f8:	2d00      	cmp	r5, #0
 800b4fa:	bfa8      	it	ge
 800b4fc:	6821      	ldrge	r1, [r4, #0]
 800b4fe:	60a5      	str	r5, [r4, #8]
 800b500:	bfa4      	itt	ge
 800b502:	f021 0104 	bicge.w	r1, r1, #4
 800b506:	6021      	strge	r1, [r4, #0]
 800b508:	b90e      	cbnz	r6, 800b50e <_printf_i+0x116>
 800b50a:	2d00      	cmp	r5, #0
 800b50c:	d04b      	beq.n	800b5a6 <_printf_i+0x1ae>
 800b50e:	4615      	mov	r5, r2
 800b510:	fbb6 f1f3 	udiv	r1, r6, r3
 800b514:	fb03 6711 	mls	r7, r3, r1, r6
 800b518:	5dc7      	ldrb	r7, [r0, r7]
 800b51a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b51e:	4637      	mov	r7, r6
 800b520:	42bb      	cmp	r3, r7
 800b522:	460e      	mov	r6, r1
 800b524:	d9f4      	bls.n	800b510 <_printf_i+0x118>
 800b526:	2b08      	cmp	r3, #8
 800b528:	d10b      	bne.n	800b542 <_printf_i+0x14a>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	07de      	lsls	r6, r3, #31
 800b52e:	d508      	bpl.n	800b542 <_printf_i+0x14a>
 800b530:	6923      	ldr	r3, [r4, #16]
 800b532:	6861      	ldr	r1, [r4, #4]
 800b534:	4299      	cmp	r1, r3
 800b536:	bfde      	ittt	le
 800b538:	2330      	movle	r3, #48	; 0x30
 800b53a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b53e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b542:	1b52      	subs	r2, r2, r5
 800b544:	6122      	str	r2, [r4, #16]
 800b546:	464b      	mov	r3, r9
 800b548:	4621      	mov	r1, r4
 800b54a:	4640      	mov	r0, r8
 800b54c:	f8cd a000 	str.w	sl, [sp]
 800b550:	aa03      	add	r2, sp, #12
 800b552:	f7ff fedf 	bl	800b314 <_printf_common>
 800b556:	3001      	adds	r0, #1
 800b558:	d14a      	bne.n	800b5f0 <_printf_i+0x1f8>
 800b55a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b55e:	b004      	add	sp, #16
 800b560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b564:	6823      	ldr	r3, [r4, #0]
 800b566:	f043 0320 	orr.w	r3, r3, #32
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	2778      	movs	r7, #120	; 0x78
 800b56e:	4832      	ldr	r0, [pc, #200]	; (800b638 <_printf_i+0x240>)
 800b570:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	6829      	ldr	r1, [r5, #0]
 800b578:	061f      	lsls	r7, r3, #24
 800b57a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b57e:	d402      	bmi.n	800b586 <_printf_i+0x18e>
 800b580:	065f      	lsls	r7, r3, #25
 800b582:	bf48      	it	mi
 800b584:	b2b6      	uxthmi	r6, r6
 800b586:	07df      	lsls	r7, r3, #31
 800b588:	bf48      	it	mi
 800b58a:	f043 0320 	orrmi.w	r3, r3, #32
 800b58e:	6029      	str	r1, [r5, #0]
 800b590:	bf48      	it	mi
 800b592:	6023      	strmi	r3, [r4, #0]
 800b594:	b91e      	cbnz	r6, 800b59e <_printf_i+0x1a6>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f023 0320 	bic.w	r3, r3, #32
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	2310      	movs	r3, #16
 800b5a0:	e7a6      	b.n	800b4f0 <_printf_i+0xf8>
 800b5a2:	4824      	ldr	r0, [pc, #144]	; (800b634 <_printf_i+0x23c>)
 800b5a4:	e7e4      	b.n	800b570 <_printf_i+0x178>
 800b5a6:	4615      	mov	r5, r2
 800b5a8:	e7bd      	b.n	800b526 <_printf_i+0x12e>
 800b5aa:	682b      	ldr	r3, [r5, #0]
 800b5ac:	6826      	ldr	r6, [r4, #0]
 800b5ae:	1d18      	adds	r0, r3, #4
 800b5b0:	6961      	ldr	r1, [r4, #20]
 800b5b2:	6028      	str	r0, [r5, #0]
 800b5b4:	0635      	lsls	r5, r6, #24
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	d501      	bpl.n	800b5be <_printf_i+0x1c6>
 800b5ba:	6019      	str	r1, [r3, #0]
 800b5bc:	e002      	b.n	800b5c4 <_printf_i+0x1cc>
 800b5be:	0670      	lsls	r0, r6, #25
 800b5c0:	d5fb      	bpl.n	800b5ba <_printf_i+0x1c2>
 800b5c2:	8019      	strh	r1, [r3, #0]
 800b5c4:	2300      	movs	r3, #0
 800b5c6:	4615      	mov	r5, r2
 800b5c8:	6123      	str	r3, [r4, #16]
 800b5ca:	e7bc      	b.n	800b546 <_printf_i+0x14e>
 800b5cc:	682b      	ldr	r3, [r5, #0]
 800b5ce:	2100      	movs	r1, #0
 800b5d0:	1d1a      	adds	r2, r3, #4
 800b5d2:	602a      	str	r2, [r5, #0]
 800b5d4:	681d      	ldr	r5, [r3, #0]
 800b5d6:	6862      	ldr	r2, [r4, #4]
 800b5d8:	4628      	mov	r0, r5
 800b5da:	f000 f895 	bl	800b708 <memchr>
 800b5de:	b108      	cbz	r0, 800b5e4 <_printf_i+0x1ec>
 800b5e0:	1b40      	subs	r0, r0, r5
 800b5e2:	6060      	str	r0, [r4, #4]
 800b5e4:	6863      	ldr	r3, [r4, #4]
 800b5e6:	6123      	str	r3, [r4, #16]
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5ee:	e7aa      	b.n	800b546 <_printf_i+0x14e>
 800b5f0:	462a      	mov	r2, r5
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	4640      	mov	r0, r8
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	47d0      	blx	sl
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	d0ad      	beq.n	800b55a <_printf_i+0x162>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	079b      	lsls	r3, r3, #30
 800b602:	d413      	bmi.n	800b62c <_printf_i+0x234>
 800b604:	68e0      	ldr	r0, [r4, #12]
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	4298      	cmp	r0, r3
 800b60a:	bfb8      	it	lt
 800b60c:	4618      	movlt	r0, r3
 800b60e:	e7a6      	b.n	800b55e <_printf_i+0x166>
 800b610:	2301      	movs	r3, #1
 800b612:	4632      	mov	r2, r6
 800b614:	4649      	mov	r1, r9
 800b616:	4640      	mov	r0, r8
 800b618:	47d0      	blx	sl
 800b61a:	3001      	adds	r0, #1
 800b61c:	d09d      	beq.n	800b55a <_printf_i+0x162>
 800b61e:	3501      	adds	r5, #1
 800b620:	68e3      	ldr	r3, [r4, #12]
 800b622:	9903      	ldr	r1, [sp, #12]
 800b624:	1a5b      	subs	r3, r3, r1
 800b626:	42ab      	cmp	r3, r5
 800b628:	dcf2      	bgt.n	800b610 <_printf_i+0x218>
 800b62a:	e7eb      	b.n	800b604 <_printf_i+0x20c>
 800b62c:	2500      	movs	r5, #0
 800b62e:	f104 0619 	add.w	r6, r4, #25
 800b632:	e7f5      	b.n	800b620 <_printf_i+0x228>
 800b634:	0800cbcf 	.word	0x0800cbcf
 800b638:	0800cbe0 	.word	0x0800cbe0

0800b63c <__malloc_lock>:
 800b63c:	4801      	ldr	r0, [pc, #4]	; (800b644 <__malloc_lock+0x8>)
 800b63e:	f7ff bc6f 	b.w	800af20 <__retarget_lock_acquire_recursive>
 800b642:	bf00      	nop
 800b644:	2000166c 	.word	0x2000166c

0800b648 <__malloc_unlock>:
 800b648:	4801      	ldr	r0, [pc, #4]	; (800b650 <__malloc_unlock+0x8>)
 800b64a:	f7ff bc6a 	b.w	800af22 <__retarget_lock_release_recursive>
 800b64e:	bf00      	nop
 800b650:	2000166c 	.word	0x2000166c

0800b654 <_realloc_r>:
 800b654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b658:	4680      	mov	r8, r0
 800b65a:	4614      	mov	r4, r2
 800b65c:	460e      	mov	r6, r1
 800b65e:	b921      	cbnz	r1, 800b66a <_realloc_r+0x16>
 800b660:	4611      	mov	r1, r2
 800b662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b666:	f7ff bdd5 	b.w	800b214 <_malloc_r>
 800b66a:	b92a      	cbnz	r2, 800b678 <_realloc_r+0x24>
 800b66c:	f000 f868 	bl	800b740 <_free_r>
 800b670:	4625      	mov	r5, r4
 800b672:	4628      	mov	r0, r5
 800b674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b678:	f000 f8aa 	bl	800b7d0 <_malloc_usable_size_r>
 800b67c:	4284      	cmp	r4, r0
 800b67e:	4607      	mov	r7, r0
 800b680:	d802      	bhi.n	800b688 <_realloc_r+0x34>
 800b682:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b686:	d812      	bhi.n	800b6ae <_realloc_r+0x5a>
 800b688:	4621      	mov	r1, r4
 800b68a:	4640      	mov	r0, r8
 800b68c:	f7ff fdc2 	bl	800b214 <_malloc_r>
 800b690:	4605      	mov	r5, r0
 800b692:	2800      	cmp	r0, #0
 800b694:	d0ed      	beq.n	800b672 <_realloc_r+0x1e>
 800b696:	42bc      	cmp	r4, r7
 800b698:	4622      	mov	r2, r4
 800b69a:	4631      	mov	r1, r6
 800b69c:	bf28      	it	cs
 800b69e:	463a      	movcs	r2, r7
 800b6a0:	f000 f840 	bl	800b724 <memcpy>
 800b6a4:	4631      	mov	r1, r6
 800b6a6:	4640      	mov	r0, r8
 800b6a8:	f000 f84a 	bl	800b740 <_free_r>
 800b6ac:	e7e1      	b.n	800b672 <_realloc_r+0x1e>
 800b6ae:	4635      	mov	r5, r6
 800b6b0:	e7df      	b.n	800b672 <_realloc_r+0x1e>

0800b6b2 <memmove>:
 800b6b2:	4288      	cmp	r0, r1
 800b6b4:	b510      	push	{r4, lr}
 800b6b6:	eb01 0402 	add.w	r4, r1, r2
 800b6ba:	d902      	bls.n	800b6c2 <memmove+0x10>
 800b6bc:	4284      	cmp	r4, r0
 800b6be:	4623      	mov	r3, r4
 800b6c0:	d807      	bhi.n	800b6d2 <memmove+0x20>
 800b6c2:	1e43      	subs	r3, r0, #1
 800b6c4:	42a1      	cmp	r1, r4
 800b6c6:	d008      	beq.n	800b6da <memmove+0x28>
 800b6c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6d0:	e7f8      	b.n	800b6c4 <memmove+0x12>
 800b6d2:	4601      	mov	r1, r0
 800b6d4:	4402      	add	r2, r0
 800b6d6:	428a      	cmp	r2, r1
 800b6d8:	d100      	bne.n	800b6dc <memmove+0x2a>
 800b6da:	bd10      	pop	{r4, pc}
 800b6dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6e4:	e7f7      	b.n	800b6d6 <memmove+0x24>
	...

0800b6e8 <_sbrk_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4d05      	ldr	r5, [pc, #20]	; (800b704 <_sbrk_r+0x1c>)
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	602b      	str	r3, [r5, #0]
 800b6f4:	f7f6 fe8a 	bl	800240c <_sbrk>
 800b6f8:	1c43      	adds	r3, r0, #1
 800b6fa:	d102      	bne.n	800b702 <_sbrk_r+0x1a>
 800b6fc:	682b      	ldr	r3, [r5, #0]
 800b6fe:	b103      	cbz	r3, 800b702 <_sbrk_r+0x1a>
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	bd38      	pop	{r3, r4, r5, pc}
 800b704:	20001678 	.word	0x20001678

0800b708 <memchr>:
 800b708:	4603      	mov	r3, r0
 800b70a:	b510      	push	{r4, lr}
 800b70c:	b2c9      	uxtb	r1, r1
 800b70e:	4402      	add	r2, r0
 800b710:	4293      	cmp	r3, r2
 800b712:	4618      	mov	r0, r3
 800b714:	d101      	bne.n	800b71a <memchr+0x12>
 800b716:	2000      	movs	r0, #0
 800b718:	e003      	b.n	800b722 <memchr+0x1a>
 800b71a:	7804      	ldrb	r4, [r0, #0]
 800b71c:	3301      	adds	r3, #1
 800b71e:	428c      	cmp	r4, r1
 800b720:	d1f6      	bne.n	800b710 <memchr+0x8>
 800b722:	bd10      	pop	{r4, pc}

0800b724 <memcpy>:
 800b724:	440a      	add	r2, r1
 800b726:	4291      	cmp	r1, r2
 800b728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b72c:	d100      	bne.n	800b730 <memcpy+0xc>
 800b72e:	4770      	bx	lr
 800b730:	b510      	push	{r4, lr}
 800b732:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b736:	4291      	cmp	r1, r2
 800b738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b73c:	d1f9      	bne.n	800b732 <memcpy+0xe>
 800b73e:	bd10      	pop	{r4, pc}

0800b740 <_free_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4605      	mov	r5, r0
 800b744:	2900      	cmp	r1, #0
 800b746:	d040      	beq.n	800b7ca <_free_r+0x8a>
 800b748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b74c:	1f0c      	subs	r4, r1, #4
 800b74e:	2b00      	cmp	r3, #0
 800b750:	bfb8      	it	lt
 800b752:	18e4      	addlt	r4, r4, r3
 800b754:	f7ff ff72 	bl	800b63c <__malloc_lock>
 800b758:	4a1c      	ldr	r2, [pc, #112]	; (800b7cc <_free_r+0x8c>)
 800b75a:	6813      	ldr	r3, [r2, #0]
 800b75c:	b933      	cbnz	r3, 800b76c <_free_r+0x2c>
 800b75e:	6063      	str	r3, [r4, #4]
 800b760:	6014      	str	r4, [r2, #0]
 800b762:	4628      	mov	r0, r5
 800b764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b768:	f7ff bf6e 	b.w	800b648 <__malloc_unlock>
 800b76c:	42a3      	cmp	r3, r4
 800b76e:	d908      	bls.n	800b782 <_free_r+0x42>
 800b770:	6820      	ldr	r0, [r4, #0]
 800b772:	1821      	adds	r1, r4, r0
 800b774:	428b      	cmp	r3, r1
 800b776:	bf01      	itttt	eq
 800b778:	6819      	ldreq	r1, [r3, #0]
 800b77a:	685b      	ldreq	r3, [r3, #4]
 800b77c:	1809      	addeq	r1, r1, r0
 800b77e:	6021      	streq	r1, [r4, #0]
 800b780:	e7ed      	b.n	800b75e <_free_r+0x1e>
 800b782:	461a      	mov	r2, r3
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	b10b      	cbz	r3, 800b78c <_free_r+0x4c>
 800b788:	42a3      	cmp	r3, r4
 800b78a:	d9fa      	bls.n	800b782 <_free_r+0x42>
 800b78c:	6811      	ldr	r1, [r2, #0]
 800b78e:	1850      	adds	r0, r2, r1
 800b790:	42a0      	cmp	r0, r4
 800b792:	d10b      	bne.n	800b7ac <_free_r+0x6c>
 800b794:	6820      	ldr	r0, [r4, #0]
 800b796:	4401      	add	r1, r0
 800b798:	1850      	adds	r0, r2, r1
 800b79a:	4283      	cmp	r3, r0
 800b79c:	6011      	str	r1, [r2, #0]
 800b79e:	d1e0      	bne.n	800b762 <_free_r+0x22>
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	4408      	add	r0, r1
 800b7a6:	6010      	str	r0, [r2, #0]
 800b7a8:	6053      	str	r3, [r2, #4]
 800b7aa:	e7da      	b.n	800b762 <_free_r+0x22>
 800b7ac:	d902      	bls.n	800b7b4 <_free_r+0x74>
 800b7ae:	230c      	movs	r3, #12
 800b7b0:	602b      	str	r3, [r5, #0]
 800b7b2:	e7d6      	b.n	800b762 <_free_r+0x22>
 800b7b4:	6820      	ldr	r0, [r4, #0]
 800b7b6:	1821      	adds	r1, r4, r0
 800b7b8:	428b      	cmp	r3, r1
 800b7ba:	bf01      	itttt	eq
 800b7bc:	6819      	ldreq	r1, [r3, #0]
 800b7be:	685b      	ldreq	r3, [r3, #4]
 800b7c0:	1809      	addeq	r1, r1, r0
 800b7c2:	6021      	streq	r1, [r4, #0]
 800b7c4:	6063      	str	r3, [r4, #4]
 800b7c6:	6054      	str	r4, [r2, #4]
 800b7c8:	e7cb      	b.n	800b762 <_free_r+0x22>
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	20001670 	.word	0x20001670

0800b7d0 <_malloc_usable_size_r>:
 800b7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7d4:	1f18      	subs	r0, r3, #4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	bfbc      	itt	lt
 800b7da:	580b      	ldrlt	r3, [r1, r0]
 800b7dc:	18c0      	addlt	r0, r0, r3
 800b7de:	4770      	bx	lr

0800b7e0 <roundf>:
 800b7e0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b7e4:	3b7f      	subs	r3, #127	; 0x7f
 800b7e6:	2b16      	cmp	r3, #22
 800b7e8:	4601      	mov	r1, r0
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	dc14      	bgt.n	800b818 <roundf+0x38>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	da07      	bge.n	800b802 <roundf+0x22>
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b7f8:	d101      	bne.n	800b7fe <roundf+0x1e>
 800b7fa:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b7fe:	4608      	mov	r0, r1
 800b800:	bd10      	pop	{r4, pc}
 800b802:	4a08      	ldr	r2, [pc, #32]	; (800b824 <roundf+0x44>)
 800b804:	411a      	asrs	r2, r3
 800b806:	4210      	tst	r0, r2
 800b808:	d0f9      	beq.n	800b7fe <roundf+0x1e>
 800b80a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b80e:	4119      	asrs	r1, r3
 800b810:	4401      	add	r1, r0
 800b812:	ea21 0102 	bic.w	r1, r1, r2
 800b816:	e7f2      	b.n	800b7fe <roundf+0x1e>
 800b818:	2b80      	cmp	r3, #128	; 0x80
 800b81a:	d1f0      	bne.n	800b7fe <roundf+0x1e>
 800b81c:	f7f5 f98a 	bl	8000b34 <__addsf3>
 800b820:	4601      	mov	r1, r0
 800b822:	e7ec      	b.n	800b7fe <roundf+0x1e>
 800b824:	007fffff 	.word	0x007fffff

0800b828 <fmod>:
 800b828:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	4616      	mov	r6, r2
 800b832:	461f      	mov	r7, r3
 800b834:	f000 f92c 	bl	800ba90 <__ieee754_fmod>
 800b838:	4632      	mov	r2, r6
 800b83a:	4604      	mov	r4, r0
 800b83c:	460d      	mov	r5, r1
 800b83e:	463b      	mov	r3, r7
 800b840:	4640      	mov	r0, r8
 800b842:	4649      	mov	r1, r9
 800b844:	f7f5 f8e2 	bl	8000a0c <__aeabi_dcmpun>
 800b848:	b990      	cbnz	r0, 800b870 <fmod+0x48>
 800b84a:	2200      	movs	r2, #0
 800b84c:	2300      	movs	r3, #0
 800b84e:	4630      	mov	r0, r6
 800b850:	4639      	mov	r1, r7
 800b852:	f7f5 f8a9 	bl	80009a8 <__aeabi_dcmpeq>
 800b856:	b158      	cbz	r0, 800b870 <fmod+0x48>
 800b858:	f7ff fb38 	bl	800aecc <__errno>
 800b85c:	2321      	movs	r3, #33	; 0x21
 800b85e:	2200      	movs	r2, #0
 800b860:	6003      	str	r3, [r0, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	4610      	mov	r0, r2
 800b866:	4619      	mov	r1, r3
 800b868:	f7f4 ff60 	bl	800072c <__aeabi_ddiv>
 800b86c:	4604      	mov	r4, r0
 800b86e:	460d      	mov	r5, r1
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b878 <cos>:
 800b878:	b530      	push	{r4, r5, lr}
 800b87a:	4a20      	ldr	r2, [pc, #128]	; (800b8fc <cos+0x84>)
 800b87c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b880:	4293      	cmp	r3, r2
 800b882:	b087      	sub	sp, #28
 800b884:	dc06      	bgt.n	800b894 <cos+0x1c>
 800b886:	2200      	movs	r2, #0
 800b888:	2300      	movs	r3, #0
 800b88a:	b007      	add	sp, #28
 800b88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b890:	f000 bf46 	b.w	800c720 <__kernel_cos>
 800b894:	4a1a      	ldr	r2, [pc, #104]	; (800b900 <cos+0x88>)
 800b896:	4293      	cmp	r3, r2
 800b898:	dd05      	ble.n	800b8a6 <cos+0x2e>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	f7f4 fc63 	bl	8000168 <__aeabi_dsub>
 800b8a2:	b007      	add	sp, #28
 800b8a4:	bd30      	pop	{r4, r5, pc}
 800b8a6:	aa02      	add	r2, sp, #8
 800b8a8:	f000 fa06 	bl	800bcb8 <__ieee754_rem_pio2>
 800b8ac:	f000 0003 	and.w	r0, r0, #3
 800b8b0:	2801      	cmp	r0, #1
 800b8b2:	d009      	beq.n	800b8c8 <cos+0x50>
 800b8b4:	2802      	cmp	r0, #2
 800b8b6:	d011      	beq.n	800b8dc <cos+0x64>
 800b8b8:	b9b8      	cbnz	r0, 800b8ea <cos+0x72>
 800b8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c2:	f000 ff2d 	bl	800c720 <__kernel_cos>
 800b8c6:	e7ec      	b.n	800b8a2 <cos+0x2a>
 800b8c8:	9000      	str	r0, [sp, #0]
 800b8ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8d2:	f000 ffe5 	bl	800c8a0 <__kernel_sin>
 800b8d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b8da:	e7e2      	b.n	800b8a2 <cos+0x2a>
 800b8dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e4:	f000 ff1c 	bl	800c720 <__kernel_cos>
 800b8e8:	e7f5      	b.n	800b8d6 <cos+0x5e>
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8f6:	f000 ffd3 	bl	800c8a0 <__kernel_sin>
 800b8fa:	e7d2      	b.n	800b8a2 <cos+0x2a>
 800b8fc:	3fe921fb 	.word	0x3fe921fb
 800b900:	7fefffff 	.word	0x7fefffff

0800b904 <sin>:
 800b904:	b530      	push	{r4, r5, lr}
 800b906:	4a20      	ldr	r2, [pc, #128]	; (800b988 <sin+0x84>)
 800b908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b90c:	4293      	cmp	r3, r2
 800b90e:	b087      	sub	sp, #28
 800b910:	dc06      	bgt.n	800b920 <sin+0x1c>
 800b912:	2300      	movs	r3, #0
 800b914:	2200      	movs	r2, #0
 800b916:	9300      	str	r3, [sp, #0]
 800b918:	2300      	movs	r3, #0
 800b91a:	f000 ffc1 	bl	800c8a0 <__kernel_sin>
 800b91e:	e006      	b.n	800b92e <sin+0x2a>
 800b920:	4a1a      	ldr	r2, [pc, #104]	; (800b98c <sin+0x88>)
 800b922:	4293      	cmp	r3, r2
 800b924:	dd05      	ble.n	800b932 <sin+0x2e>
 800b926:	4602      	mov	r2, r0
 800b928:	460b      	mov	r3, r1
 800b92a:	f7f4 fc1d 	bl	8000168 <__aeabi_dsub>
 800b92e:	b007      	add	sp, #28
 800b930:	bd30      	pop	{r4, r5, pc}
 800b932:	aa02      	add	r2, sp, #8
 800b934:	f000 f9c0 	bl	800bcb8 <__ieee754_rem_pio2>
 800b938:	f000 0003 	and.w	r0, r0, #3
 800b93c:	2801      	cmp	r0, #1
 800b93e:	d009      	beq.n	800b954 <sin+0x50>
 800b940:	2802      	cmp	r0, #2
 800b942:	d00e      	beq.n	800b962 <sin+0x5e>
 800b944:	b9c0      	cbnz	r0, 800b978 <sin+0x74>
 800b946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b94a:	2301      	movs	r3, #1
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b952:	e7e2      	b.n	800b91a <sin+0x16>
 800b954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b958:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b95c:	f000 fee0 	bl	800c720 <__kernel_cos>
 800b960:	e7e5      	b.n	800b92e <sin+0x2a>
 800b962:	2301      	movs	r3, #1
 800b964:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b96e:	f000 ff97 	bl	800c8a0 <__kernel_sin>
 800b972:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b976:	e7da      	b.n	800b92e <sin+0x2a>
 800b978:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b97c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b980:	f000 fece 	bl	800c720 <__kernel_cos>
 800b984:	e7f5      	b.n	800b972 <sin+0x6e>
 800b986:	bf00      	nop
 800b988:	3fe921fb 	.word	0x3fe921fb
 800b98c:	7fefffff 	.word	0x7fefffff

0800b990 <floor>:
 800b990:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800b99c:	2e13      	cmp	r6, #19
 800b99e:	460b      	mov	r3, r1
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	dc32      	bgt.n	800ba0e <floor+0x7e>
 800b9a8:	2e00      	cmp	r6, #0
 800b9aa:	da14      	bge.n	800b9d6 <floor+0x46>
 800b9ac:	a334      	add	r3, pc, #208	; (adr r3, 800ba80 <floor+0xf0>)
 800b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b2:	f7f4 fbdb 	bl	800016c <__adddf3>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	f7f5 f81d 	bl	80009f8 <__aeabi_dcmpgt>
 800b9be:	b138      	cbz	r0, 800b9d0 <floor+0x40>
 800b9c0:	2c00      	cmp	r4, #0
 800b9c2:	da56      	bge.n	800ba72 <floor+0xe2>
 800b9c4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800b9c8:	4325      	orrs	r5, r4
 800b9ca:	d055      	beq.n	800ba78 <floor+0xe8>
 800b9cc:	2500      	movs	r5, #0
 800b9ce:	4c2e      	ldr	r4, [pc, #184]	; (800ba88 <floor+0xf8>)
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	462f      	mov	r7, r5
 800b9d4:	e025      	b.n	800ba22 <floor+0x92>
 800b9d6:	4a2d      	ldr	r2, [pc, #180]	; (800ba8c <floor+0xfc>)
 800b9d8:	fa42 f806 	asr.w	r8, r2, r6
 800b9dc:	ea01 0208 	and.w	r2, r1, r8
 800b9e0:	4302      	orrs	r2, r0
 800b9e2:	d01e      	beq.n	800ba22 <floor+0x92>
 800b9e4:	a326      	add	r3, pc, #152	; (adr r3, 800ba80 <floor+0xf0>)
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	f7f4 fbbf 	bl	800016c <__adddf3>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	f7f5 f801 	bl	80009f8 <__aeabi_dcmpgt>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d0ea      	beq.n	800b9d0 <floor+0x40>
 800b9fa:	2c00      	cmp	r4, #0
 800b9fc:	bfbe      	ittt	lt
 800b9fe:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ba02:	4133      	asrlt	r3, r6
 800ba04:	18e4      	addlt	r4, r4, r3
 800ba06:	2500      	movs	r5, #0
 800ba08:	ea24 0408 	bic.w	r4, r4, r8
 800ba0c:	e7e0      	b.n	800b9d0 <floor+0x40>
 800ba0e:	2e33      	cmp	r6, #51	; 0x33
 800ba10:	dd0b      	ble.n	800ba2a <floor+0x9a>
 800ba12:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ba16:	d104      	bne.n	800ba22 <floor+0x92>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f7f4 fba7 	bl	800016c <__adddf3>
 800ba1e:	4607      	mov	r7, r0
 800ba20:	460b      	mov	r3, r1
 800ba22:	4638      	mov	r0, r7
 800ba24:	4619      	mov	r1, r3
 800ba26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba2a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800ba2e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800ba32:	fa28 f802 	lsr.w	r8, r8, r2
 800ba36:	ea10 0f08 	tst.w	r0, r8
 800ba3a:	d0f2      	beq.n	800ba22 <floor+0x92>
 800ba3c:	a310      	add	r3, pc, #64	; (adr r3, 800ba80 <floor+0xf0>)
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f7f4 fb93 	bl	800016c <__adddf3>
 800ba46:	2200      	movs	r2, #0
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f7f4 ffd5 	bl	80009f8 <__aeabi_dcmpgt>
 800ba4e:	2800      	cmp	r0, #0
 800ba50:	d0be      	beq.n	800b9d0 <floor+0x40>
 800ba52:	2c00      	cmp	r4, #0
 800ba54:	da0a      	bge.n	800ba6c <floor+0xdc>
 800ba56:	2e14      	cmp	r6, #20
 800ba58:	d101      	bne.n	800ba5e <floor+0xce>
 800ba5a:	3401      	adds	r4, #1
 800ba5c:	e006      	b.n	800ba6c <floor+0xdc>
 800ba5e:	2301      	movs	r3, #1
 800ba60:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ba64:	40b3      	lsls	r3, r6
 800ba66:	441d      	add	r5, r3
 800ba68:	42af      	cmp	r7, r5
 800ba6a:	d8f6      	bhi.n	800ba5a <floor+0xca>
 800ba6c:	ea25 0508 	bic.w	r5, r5, r8
 800ba70:	e7ae      	b.n	800b9d0 <floor+0x40>
 800ba72:	2500      	movs	r5, #0
 800ba74:	462c      	mov	r4, r5
 800ba76:	e7ab      	b.n	800b9d0 <floor+0x40>
 800ba78:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ba7c:	e7a8      	b.n	800b9d0 <floor+0x40>
 800ba7e:	bf00      	nop
 800ba80:	8800759c 	.word	0x8800759c
 800ba84:	7e37e43c 	.word	0x7e37e43c
 800ba88:	bff00000 	.word	0xbff00000
 800ba8c:	000fffff 	.word	0x000fffff

0800ba90 <__ieee754_fmod>:
 800ba90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba94:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800ba98:	4684      	mov	ip, r0
 800ba9a:	461d      	mov	r5, r3
 800ba9c:	4608      	mov	r0, r1
 800ba9e:	4619      	mov	r1, r3
 800baa0:	ea57 0302 	orrs.w	r3, r7, r2
 800baa4:	4614      	mov	r4, r2
 800baa6:	4616      	mov	r6, r2
 800baa8:	4696      	mov	lr, r2
 800baaa:	d00c      	beq.n	800bac6 <__ieee754_fmod+0x36>
 800baac:	4b7b      	ldr	r3, [pc, #492]	; (800bc9c <__ieee754_fmod+0x20c>)
 800baae:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
 800bab2:	4599      	cmp	r9, r3
 800bab4:	4682      	mov	sl, r0
 800bab6:	dc06      	bgt.n	800bac6 <__ieee754_fmod+0x36>
 800bab8:	4253      	negs	r3, r2
 800baba:	4313      	orrs	r3, r2
 800babc:	4a78      	ldr	r2, [pc, #480]	; (800bca0 <__ieee754_fmod+0x210>)
 800babe:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d90d      	bls.n	800bae2 <__ieee754_fmod+0x52>
 800bac6:	4605      	mov	r5, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4622      	mov	r2, r4
 800bacc:	4660      	mov	r0, ip
 800bace:	4629      	mov	r1, r5
 800bad0:	f7f4 fd02 	bl	80004d8 <__aeabi_dmul>
 800bad4:	4602      	mov	r2, r0
 800bad6:	460b      	mov	r3, r1
 800bad8:	f7f4 fe28 	bl	800072c <__aeabi_ddiv>
 800badc:	4684      	mov	ip, r0
 800bade:	4608      	mov	r0, r1
 800bae0:	e00e      	b.n	800bb00 <__ieee754_fmod+0x70>
 800bae2:	45b9      	cmp	r9, r7
 800bae4:	46e0      	mov	r8, ip
 800bae6:	4661      	mov	r1, ip
 800bae8:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 800baec:	dc0d      	bgt.n	800bb0a <__ieee754_fmod+0x7a>
 800baee:	db07      	blt.n	800bb00 <__ieee754_fmod+0x70>
 800baf0:	45b4      	cmp	ip, r6
 800baf2:	d305      	bcc.n	800bb00 <__ieee754_fmod+0x70>
 800baf4:	d109      	bne.n	800bb0a <__ieee754_fmod+0x7a>
 800baf6:	4b6b      	ldr	r3, [pc, #428]	; (800bca4 <__ieee754_fmod+0x214>)
 800baf8:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800bafc:	e9d3 c000 	ldrd	ip, r0, [r3]
 800bb00:	4603      	mov	r3, r0
 800bb02:	4660      	mov	r0, ip
 800bb04:	4619      	mov	r1, r3
 800bb06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0a:	4a65      	ldr	r2, [pc, #404]	; (800bca0 <__ieee754_fmod+0x210>)
 800bb0c:	ea1a 0f02 	tst.w	sl, r2
 800bb10:	d149      	bne.n	800bba6 <__ieee754_fmod+0x116>
 800bb12:	f1b9 0f00 	cmp.w	r9, #0
 800bb16:	d13e      	bne.n	800bb96 <__ieee754_fmod+0x106>
 800bb18:	4643      	mov	r3, r8
 800bb1a:	4863      	ldr	r0, [pc, #396]	; (800bca8 <__ieee754_fmod+0x218>)
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	dc37      	bgt.n	800bb90 <__ieee754_fmod+0x100>
 800bb20:	4215      	tst	r5, r2
 800bb22:	d14f      	bne.n	800bbc4 <__ieee754_fmod+0x134>
 800bb24:	2f00      	cmp	r7, #0
 800bb26:	d146      	bne.n	800bbb6 <__ieee754_fmod+0x126>
 800bb28:	4633      	mov	r3, r6
 800bb2a:	4a5f      	ldr	r2, [pc, #380]	; (800bca8 <__ieee754_fmod+0x218>)
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dc3f      	bgt.n	800bbb0 <__ieee754_fmod+0x120>
 800bb30:	4b5e      	ldr	r3, [pc, #376]	; (800bcac <__ieee754_fmod+0x21c>)
 800bb32:	4298      	cmp	r0, r3
 800bb34:	db4a      	blt.n	800bbcc <__ieee754_fmod+0x13c>
 800bb36:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800bb3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb3e:	f8df c16c 	ldr.w	ip, [pc, #364]	; 800bcac <__ieee754_fmod+0x21c>
 800bb42:	4562      	cmp	r2, ip
 800bb44:	db57      	blt.n	800bbf6 <__ieee754_fmod+0x166>
 800bb46:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800bb4a:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800bb4e:	1a80      	subs	r0, r0, r2
 800bb50:	1b5e      	subs	r6, r3, r5
 800bb52:	eba1 070e 	sub.w	r7, r1, lr
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d163      	bne.n	800bc22 <__ieee754_fmod+0x192>
 800bb5a:	4571      	cmp	r1, lr
 800bb5c:	bf38      	it	cc
 800bb5e:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	bfa4      	itt	ge
 800bb66:	4639      	movge	r1, r7
 800bb68:	4633      	movge	r3, r6
 800bb6a:	ea53 0001 	orrs.w	r0, r3, r1
 800bb6e:	d0c2      	beq.n	800baf6 <__ieee754_fmod+0x66>
 800bb70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb74:	db6a      	blt.n	800bc4c <__ieee754_fmod+0x1bc>
 800bb76:	484d      	ldr	r0, [pc, #308]	; (800bcac <__ieee754_fmod+0x21c>)
 800bb78:	4282      	cmp	r2, r0
 800bb7a:	db6d      	blt.n	800bc58 <__ieee754_fmod+0x1c8>
 800bb7c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800bb80:	4323      	orrs	r3, r4
 800bb82:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800bb86:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bb8a:	468c      	mov	ip, r1
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	e7b7      	b.n	800bb00 <__ieee754_fmod+0x70>
 800bb90:	3801      	subs	r0, #1
 800bb92:	005b      	lsls	r3, r3, #1
 800bb94:	e7c2      	b.n	800bb1c <__ieee754_fmod+0x8c>
 800bb96:	4845      	ldr	r0, [pc, #276]	; (800bcac <__ieee754_fmod+0x21c>)
 800bb98:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	ddbf      	ble.n	800bb20 <__ieee754_fmod+0x90>
 800bba0:	3801      	subs	r0, #1
 800bba2:	005b      	lsls	r3, r3, #1
 800bba4:	e7fa      	b.n	800bb9c <__ieee754_fmod+0x10c>
 800bba6:	ea4f 5029 	mov.w	r0, r9, asr #20
 800bbaa:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800bbae:	e7b7      	b.n	800bb20 <__ieee754_fmod+0x90>
 800bbb0:	3a01      	subs	r2, #1
 800bbb2:	005b      	lsls	r3, r3, #1
 800bbb4:	e7ba      	b.n	800bb2c <__ieee754_fmod+0x9c>
 800bbb6:	4a3d      	ldr	r2, [pc, #244]	; (800bcac <__ieee754_fmod+0x21c>)
 800bbb8:	02fb      	lsls	r3, r7, #11
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	ddb8      	ble.n	800bb30 <__ieee754_fmod+0xa0>
 800bbbe:	3a01      	subs	r2, #1
 800bbc0:	005b      	lsls	r3, r3, #1
 800bbc2:	e7fa      	b.n	800bbba <__ieee754_fmod+0x12a>
 800bbc4:	153a      	asrs	r2, r7, #20
 800bbc6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bbca:	e7b1      	b.n	800bb30 <__ieee754_fmod+0xa0>
 800bbcc:	eba3 0c00 	sub.w	ip, r3, r0
 800bbd0:	f1bc 0f1f 	cmp.w	ip, #31
 800bbd4:	dc09      	bgt.n	800bbea <__ieee754_fmod+0x15a>
 800bbd6:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 800bbda:	fa09 f10c 	lsl.w	r1, r9, ip
 800bbde:	fa28 f303 	lsr.w	r3, r8, r3
 800bbe2:	430b      	orrs	r3, r1
 800bbe4:	fa08 f10c 	lsl.w	r1, r8, ip
 800bbe8:	e7a9      	b.n	800bb3e <__ieee754_fmod+0xae>
 800bbea:	4b31      	ldr	r3, [pc, #196]	; (800bcb0 <__ieee754_fmod+0x220>)
 800bbec:	2100      	movs	r1, #0
 800bbee:	1a1b      	subs	r3, r3, r0
 800bbf0:	fa08 f303 	lsl.w	r3, r8, r3
 800bbf4:	e7a3      	b.n	800bb3e <__ieee754_fmod+0xae>
 800bbf6:	ebac 0c02 	sub.w	ip, ip, r2
 800bbfa:	f1bc 0f1f 	cmp.w	ip, #31
 800bbfe:	dc09      	bgt.n	800bc14 <__ieee754_fmod+0x184>
 800bc00:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800bc04:	fa07 f70c 	lsl.w	r7, r7, ip
 800bc08:	fa26 f505 	lsr.w	r5, r6, r5
 800bc0c:	433d      	orrs	r5, r7
 800bc0e:	fa06 fe0c 	lsl.w	lr, r6, ip
 800bc12:	e79c      	b.n	800bb4e <__ieee754_fmod+0xbe>
 800bc14:	4d26      	ldr	r5, [pc, #152]	; (800bcb0 <__ieee754_fmod+0x220>)
 800bc16:	f04f 0e00 	mov.w	lr, #0
 800bc1a:	1aad      	subs	r5, r5, r2
 800bc1c:	fa06 f505 	lsl.w	r5, r6, r5
 800bc20:	e795      	b.n	800bb4e <__ieee754_fmod+0xbe>
 800bc22:	4571      	cmp	r1, lr
 800bc24:	bf38      	it	cc
 800bc26:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800bc2a:	2e00      	cmp	r6, #0
 800bc2c:	da05      	bge.n	800bc3a <__ieee754_fmod+0x1aa>
 800bc2e:	0fce      	lsrs	r6, r1, #31
 800bc30:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800bc34:	0049      	lsls	r1, r1, #1
 800bc36:	3801      	subs	r0, #1
 800bc38:	e78a      	b.n	800bb50 <__ieee754_fmod+0xc0>
 800bc3a:	ea56 0307 	orrs.w	r3, r6, r7
 800bc3e:	f43f af5a 	beq.w	800baf6 <__ieee754_fmod+0x66>
 800bc42:	0ffb      	lsrs	r3, r7, #31
 800bc44:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800bc48:	0079      	lsls	r1, r7, #1
 800bc4a:	e7f4      	b.n	800bc36 <__ieee754_fmod+0x1a6>
 800bc4c:	0fc8      	lsrs	r0, r1, #31
 800bc4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bc52:	0049      	lsls	r1, r1, #1
 800bc54:	3a01      	subs	r2, #1
 800bc56:	e78b      	b.n	800bb70 <__ieee754_fmod+0xe0>
 800bc58:	1a80      	subs	r0, r0, r2
 800bc5a:	2814      	cmp	r0, #20
 800bc5c:	dc0a      	bgt.n	800bc74 <__ieee754_fmod+0x1e4>
 800bc5e:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800bc62:	fa03 f202 	lsl.w	r2, r3, r2
 800bc66:	40c1      	lsrs	r1, r0
 800bc68:	430a      	orrs	r2, r1
 800bc6a:	4103      	asrs	r3, r0
 800bc6c:	4610      	mov	r0, r2
 800bc6e:	ea43 0104 	orr.w	r1, r3, r4
 800bc72:	e733      	b.n	800badc <__ieee754_fmod+0x4c>
 800bc74:	281f      	cmp	r0, #31
 800bc76:	dc07      	bgt.n	800bc88 <__ieee754_fmod+0x1f8>
 800bc78:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800bc7c:	40c1      	lsrs	r1, r0
 800bc7e:	fa03 f202 	lsl.w	r2, r3, r2
 800bc82:	430a      	orrs	r2, r1
 800bc84:	4623      	mov	r3, r4
 800bc86:	e7f1      	b.n	800bc6c <__ieee754_fmod+0x1dc>
 800bc88:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800bc8c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc90:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800bc94:	32e2      	adds	r2, #226	; 0xe2
 800bc96:	fa43 f202 	asr.w	r2, r3, r2
 800bc9a:	e7f3      	b.n	800bc84 <__ieee754_fmod+0x1f4>
 800bc9c:	7fefffff 	.word	0x7fefffff
 800bca0:	7ff00000 	.word	0x7ff00000
 800bca4:	0800cbf8 	.word	0x0800cbf8
 800bca8:	fffffbed 	.word	0xfffffbed
 800bcac:	fffffc02 	.word	0xfffffc02
 800bcb0:	fffffbe2 	.word	0xfffffbe2
 800bcb4:	00000000 	.word	0x00000000

0800bcb8 <__ieee754_rem_pio2>:
 800bcb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbc:	4614      	mov	r4, r2
 800bcbe:	4ac2      	ldr	r2, [pc, #776]	; (800bfc8 <__ieee754_rem_pio2+0x310>)
 800bcc0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bcc4:	b08d      	sub	sp, #52	; 0x34
 800bcc6:	4592      	cmp	sl, r2
 800bcc8:	9104      	str	r1, [sp, #16]
 800bcca:	dc07      	bgt.n	800bcdc <__ieee754_rem_pio2+0x24>
 800bccc:	2200      	movs	r2, #0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	e9c4 0100 	strd	r0, r1, [r4]
 800bcd4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bcd8:	2500      	movs	r5, #0
 800bcda:	e024      	b.n	800bd26 <__ieee754_rem_pio2+0x6e>
 800bcdc:	4abb      	ldr	r2, [pc, #748]	; (800bfcc <__ieee754_rem_pio2+0x314>)
 800bcde:	4592      	cmp	sl, r2
 800bce0:	dc72      	bgt.n	800bdc8 <__ieee754_rem_pio2+0x110>
 800bce2:	9b04      	ldr	r3, [sp, #16]
 800bce4:	4dba      	ldr	r5, [pc, #744]	; (800bfd0 <__ieee754_rem_pio2+0x318>)
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	a3a9      	add	r3, pc, #676	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2d8>)
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	dd36      	ble.n	800bd5e <__ieee754_rem_pio2+0xa6>
 800bcf0:	f7f4 fa3a 	bl	8000168 <__aeabi_dsub>
 800bcf4:	45aa      	cmp	sl, r5
 800bcf6:	4606      	mov	r6, r0
 800bcf8:	460f      	mov	r7, r1
 800bcfa:	d018      	beq.n	800bd2e <__ieee754_rem_pio2+0x76>
 800bcfc:	a3a6      	add	r3, pc, #664	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2e0>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fa31 	bl	8000168 <__aeabi_dsub>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4630      	mov	r0, r6
 800bd0c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd10:	4639      	mov	r1, r7
 800bd12:	f7f4 fa29 	bl	8000168 <__aeabi_dsub>
 800bd16:	a3a0      	add	r3, pc, #640	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2e0>)
 800bd18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1c:	f7f4 fa24 	bl	8000168 <__aeabi_dsub>
 800bd20:	2501      	movs	r5, #1
 800bd22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd26:	4628      	mov	r0, r5
 800bd28:	b00d      	add	sp, #52	; 0x34
 800bd2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2e:	a39c      	add	r3, pc, #624	; (adr r3, 800bfa0 <__ieee754_rem_pio2+0x2e8>)
 800bd30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd34:	f7f4 fa18 	bl	8000168 <__aeabi_dsub>
 800bd38:	a39b      	add	r3, pc, #620	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2f0>)
 800bd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd3e:	4606      	mov	r6, r0
 800bd40:	460f      	mov	r7, r1
 800bd42:	f7f4 fa11 	bl	8000168 <__aeabi_dsub>
 800bd46:	4602      	mov	r2, r0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	e9c4 2300 	strd	r2, r3, [r4]
 800bd50:	4639      	mov	r1, r7
 800bd52:	f7f4 fa09 	bl	8000168 <__aeabi_dsub>
 800bd56:	a394      	add	r3, pc, #592	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2f0>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	e7de      	b.n	800bd1c <__ieee754_rem_pio2+0x64>
 800bd5e:	f7f4 fa05 	bl	800016c <__adddf3>
 800bd62:	45aa      	cmp	sl, r5
 800bd64:	4606      	mov	r6, r0
 800bd66:	460f      	mov	r7, r1
 800bd68:	d016      	beq.n	800bd98 <__ieee754_rem_pio2+0xe0>
 800bd6a:	a38b      	add	r3, pc, #556	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2e0>)
 800bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd70:	f7f4 f9fc 	bl	800016c <__adddf3>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	4630      	mov	r0, r6
 800bd7a:	e9c4 2300 	strd	r2, r3, [r4]
 800bd7e:	4639      	mov	r1, r7
 800bd80:	f7f4 f9f2 	bl	8000168 <__aeabi_dsub>
 800bd84:	a384      	add	r3, pc, #528	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2e0>)
 800bd86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8a:	f7f4 f9ef 	bl	800016c <__adddf3>
 800bd8e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800bd92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bd96:	e7c6      	b.n	800bd26 <__ieee754_rem_pio2+0x6e>
 800bd98:	a381      	add	r3, pc, #516	; (adr r3, 800bfa0 <__ieee754_rem_pio2+0x2e8>)
 800bd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd9e:	f7f4 f9e5 	bl	800016c <__adddf3>
 800bda2:	a381      	add	r3, pc, #516	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2f0>)
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	4606      	mov	r6, r0
 800bdaa:	460f      	mov	r7, r1
 800bdac:	f7f4 f9de 	bl	800016c <__adddf3>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	e9c4 2300 	strd	r2, r3, [r4]
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 f9d4 	bl	8000168 <__aeabi_dsub>
 800bdc0:	a379      	add	r3, pc, #484	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2f0>)
 800bdc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc6:	e7e0      	b.n	800bd8a <__ieee754_rem_pio2+0xd2>
 800bdc8:	4a82      	ldr	r2, [pc, #520]	; (800bfd4 <__ieee754_rem_pio2+0x31c>)
 800bdca:	4592      	cmp	sl, r2
 800bdcc:	f300 80d4 	bgt.w	800bf78 <__ieee754_rem_pio2+0x2c0>
 800bdd0:	f000 fe1c 	bl	800ca0c <fabs>
 800bdd4:	a376      	add	r3, pc, #472	; (adr r3, 800bfb0 <__ieee754_rem_pio2+0x2f8>)
 800bdd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdda:	4606      	mov	r6, r0
 800bddc:	460f      	mov	r7, r1
 800bdde:	f7f4 fb7b 	bl	80004d8 <__aeabi_dmul>
 800bde2:	2200      	movs	r2, #0
 800bde4:	4b7c      	ldr	r3, [pc, #496]	; (800bfd8 <__ieee754_rem_pio2+0x320>)
 800bde6:	f7f4 f9c1 	bl	800016c <__adddf3>
 800bdea:	f7f4 fe25 	bl	8000a38 <__aeabi_d2iz>
 800bdee:	4605      	mov	r5, r0
 800bdf0:	f7f4 fb08 	bl	8000404 <__aeabi_i2d>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	460b      	mov	r3, r1
 800bdf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bdfc:	a364      	add	r3, pc, #400	; (adr r3, 800bf90 <__ieee754_rem_pio2+0x2d8>)
 800bdfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be02:	f7f4 fb69 	bl	80004d8 <__aeabi_dmul>
 800be06:	4602      	mov	r2, r0
 800be08:	460b      	mov	r3, r1
 800be0a:	4630      	mov	r0, r6
 800be0c:	4639      	mov	r1, r7
 800be0e:	f7f4 f9ab 	bl	8000168 <__aeabi_dsub>
 800be12:	a361      	add	r3, pc, #388	; (adr r3, 800bf98 <__ieee754_rem_pio2+0x2e0>)
 800be14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be18:	4680      	mov	r8, r0
 800be1a:	4689      	mov	r9, r1
 800be1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be20:	f7f4 fb5a 	bl	80004d8 <__aeabi_dmul>
 800be24:	2d1f      	cmp	r5, #31
 800be26:	4606      	mov	r6, r0
 800be28:	460f      	mov	r7, r1
 800be2a:	dc0e      	bgt.n	800be4a <__ieee754_rem_pio2+0x192>
 800be2c:	4b6b      	ldr	r3, [pc, #428]	; (800bfdc <__ieee754_rem_pio2+0x324>)
 800be2e:	1e6a      	subs	r2, r5, #1
 800be30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be34:	4553      	cmp	r3, sl
 800be36:	d008      	beq.n	800be4a <__ieee754_rem_pio2+0x192>
 800be38:	4632      	mov	r2, r6
 800be3a:	463b      	mov	r3, r7
 800be3c:	4640      	mov	r0, r8
 800be3e:	4649      	mov	r1, r9
 800be40:	f7f4 f992 	bl	8000168 <__aeabi_dsub>
 800be44:	e9c4 0100 	strd	r0, r1, [r4]
 800be48:	e012      	b.n	800be70 <__ieee754_rem_pio2+0x1b8>
 800be4a:	463b      	mov	r3, r7
 800be4c:	4632      	mov	r2, r6
 800be4e:	4640      	mov	r0, r8
 800be50:	4649      	mov	r1, r9
 800be52:	f7f4 f989 	bl	8000168 <__aeabi_dsub>
 800be56:	ea4f 532a 	mov.w	r3, sl, asr #20
 800be5a:	9305      	str	r3, [sp, #20]
 800be5c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800be60:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800be64:	2b10      	cmp	r3, #16
 800be66:	dc1f      	bgt.n	800bea8 <__ieee754_rem_pio2+0x1f0>
 800be68:	4602      	mov	r2, r0
 800be6a:	460b      	mov	r3, r1
 800be6c:	e9c4 2300 	strd	r2, r3, [r4]
 800be70:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800be74:	4640      	mov	r0, r8
 800be76:	4653      	mov	r3, sl
 800be78:	4649      	mov	r1, r9
 800be7a:	f7f4 f975 	bl	8000168 <__aeabi_dsub>
 800be7e:	4632      	mov	r2, r6
 800be80:	463b      	mov	r3, r7
 800be82:	f7f4 f971 	bl	8000168 <__aeabi_dsub>
 800be86:	460b      	mov	r3, r1
 800be88:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be8c:	9904      	ldr	r1, [sp, #16]
 800be8e:	4602      	mov	r2, r0
 800be90:	2900      	cmp	r1, #0
 800be92:	f6bf af48 	bge.w	800bd26 <__ieee754_rem_pio2+0x6e>
 800be96:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800be9a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800be9e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bea2:	60e3      	str	r3, [r4, #12]
 800bea4:	426d      	negs	r5, r5
 800bea6:	e73e      	b.n	800bd26 <__ieee754_rem_pio2+0x6e>
 800bea8:	a33d      	add	r3, pc, #244	; (adr r3, 800bfa0 <__ieee754_rem_pio2+0x2e8>)
 800beaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb2:	f7f4 fb11 	bl	80004d8 <__aeabi_dmul>
 800beb6:	4606      	mov	r6, r0
 800beb8:	460f      	mov	r7, r1
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4640      	mov	r0, r8
 800bec0:	4649      	mov	r1, r9
 800bec2:	f7f4 f951 	bl	8000168 <__aeabi_dsub>
 800bec6:	4602      	mov	r2, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	4682      	mov	sl, r0
 800becc:	468b      	mov	fp, r1
 800bece:	4640      	mov	r0, r8
 800bed0:	4649      	mov	r1, r9
 800bed2:	f7f4 f949 	bl	8000168 <__aeabi_dsub>
 800bed6:	4632      	mov	r2, r6
 800bed8:	463b      	mov	r3, r7
 800beda:	f7f4 f945 	bl	8000168 <__aeabi_dsub>
 800bede:	a332      	add	r3, pc, #200	; (adr r3, 800bfa8 <__ieee754_rem_pio2+0x2f0>)
 800bee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee4:	4606      	mov	r6, r0
 800bee6:	460f      	mov	r7, r1
 800bee8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beec:	f7f4 faf4 	bl	80004d8 <__aeabi_dmul>
 800bef0:	4632      	mov	r2, r6
 800bef2:	463b      	mov	r3, r7
 800bef4:	f7f4 f938 	bl	8000168 <__aeabi_dsub>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	4606      	mov	r6, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	4650      	mov	r0, sl
 800bf02:	4659      	mov	r1, fp
 800bf04:	f7f4 f930 	bl	8000168 <__aeabi_dsub>
 800bf08:	9a05      	ldr	r2, [sp, #20]
 800bf0a:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf0e:	1ad3      	subs	r3, r2, r3
 800bf10:	2b31      	cmp	r3, #49	; 0x31
 800bf12:	dc06      	bgt.n	800bf22 <__ieee754_rem_pio2+0x26a>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	46d0      	mov	r8, sl
 800bf1a:	46d9      	mov	r9, fp
 800bf1c:	e9c4 2300 	strd	r2, r3, [r4]
 800bf20:	e7a6      	b.n	800be70 <__ieee754_rem_pio2+0x1b8>
 800bf22:	a325      	add	r3, pc, #148	; (adr r3, 800bfb8 <__ieee754_rem_pio2+0x300>)
 800bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf2c:	f7f4 fad4 	bl	80004d8 <__aeabi_dmul>
 800bf30:	4606      	mov	r6, r0
 800bf32:	460f      	mov	r7, r1
 800bf34:	4602      	mov	r2, r0
 800bf36:	460b      	mov	r3, r1
 800bf38:	4650      	mov	r0, sl
 800bf3a:	4659      	mov	r1, fp
 800bf3c:	f7f4 f914 	bl	8000168 <__aeabi_dsub>
 800bf40:	4602      	mov	r2, r0
 800bf42:	460b      	mov	r3, r1
 800bf44:	4680      	mov	r8, r0
 800bf46:	4689      	mov	r9, r1
 800bf48:	4650      	mov	r0, sl
 800bf4a:	4659      	mov	r1, fp
 800bf4c:	f7f4 f90c 	bl	8000168 <__aeabi_dsub>
 800bf50:	4632      	mov	r2, r6
 800bf52:	463b      	mov	r3, r7
 800bf54:	f7f4 f908 	bl	8000168 <__aeabi_dsub>
 800bf58:	a319      	add	r3, pc, #100	; (adr r3, 800bfc0 <__ieee754_rem_pio2+0x308>)
 800bf5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5e:	4606      	mov	r6, r0
 800bf60:	460f      	mov	r7, r1
 800bf62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf66:	f7f4 fab7 	bl	80004d8 <__aeabi_dmul>
 800bf6a:	4632      	mov	r2, r6
 800bf6c:	463b      	mov	r3, r7
 800bf6e:	f7f4 f8fb 	bl	8000168 <__aeabi_dsub>
 800bf72:	4606      	mov	r6, r0
 800bf74:	460f      	mov	r7, r1
 800bf76:	e75f      	b.n	800be38 <__ieee754_rem_pio2+0x180>
 800bf78:	4a19      	ldr	r2, [pc, #100]	; (800bfe0 <__ieee754_rem_pio2+0x328>)
 800bf7a:	4592      	cmp	sl, r2
 800bf7c:	dd32      	ble.n	800bfe4 <__ieee754_rem_pio2+0x32c>
 800bf7e:	4602      	mov	r2, r0
 800bf80:	460b      	mov	r3, r1
 800bf82:	f7f4 f8f1 	bl	8000168 <__aeabi_dsub>
 800bf86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf8a:	e9c4 0100 	strd	r0, r1, [r4]
 800bf8e:	e6a3      	b.n	800bcd8 <__ieee754_rem_pio2+0x20>
 800bf90:	54400000 	.word	0x54400000
 800bf94:	3ff921fb 	.word	0x3ff921fb
 800bf98:	1a626331 	.word	0x1a626331
 800bf9c:	3dd0b461 	.word	0x3dd0b461
 800bfa0:	1a600000 	.word	0x1a600000
 800bfa4:	3dd0b461 	.word	0x3dd0b461
 800bfa8:	2e037073 	.word	0x2e037073
 800bfac:	3ba3198a 	.word	0x3ba3198a
 800bfb0:	6dc9c883 	.word	0x6dc9c883
 800bfb4:	3fe45f30 	.word	0x3fe45f30
 800bfb8:	2e000000 	.word	0x2e000000
 800bfbc:	3ba3198a 	.word	0x3ba3198a
 800bfc0:	252049c1 	.word	0x252049c1
 800bfc4:	397b839a 	.word	0x397b839a
 800bfc8:	3fe921fb 	.word	0x3fe921fb
 800bfcc:	4002d97b 	.word	0x4002d97b
 800bfd0:	3ff921fb 	.word	0x3ff921fb
 800bfd4:	413921fb 	.word	0x413921fb
 800bfd8:	3fe00000 	.word	0x3fe00000
 800bfdc:	0800cc08 	.word	0x0800cc08
 800bfe0:	7fefffff 	.word	0x7fefffff
 800bfe4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bfe8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bfec:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bff0:	460f      	mov	r7, r1
 800bff2:	4606      	mov	r6, r0
 800bff4:	f7f4 fd20 	bl	8000a38 <__aeabi_d2iz>
 800bff8:	f7f4 fa04 	bl	8000404 <__aeabi_i2d>
 800bffc:	4602      	mov	r2, r0
 800bffe:	460b      	mov	r3, r1
 800c000:	4630      	mov	r0, r6
 800c002:	4639      	mov	r1, r7
 800c004:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c008:	f7f4 f8ae 	bl	8000168 <__aeabi_dsub>
 800c00c:	2200      	movs	r2, #0
 800c00e:	4b22      	ldr	r3, [pc, #136]	; (800c098 <__ieee754_rem_pio2+0x3e0>)
 800c010:	f7f4 fa62 	bl	80004d8 <__aeabi_dmul>
 800c014:	460f      	mov	r7, r1
 800c016:	4606      	mov	r6, r0
 800c018:	f7f4 fd0e 	bl	8000a38 <__aeabi_d2iz>
 800c01c:	f7f4 f9f2 	bl	8000404 <__aeabi_i2d>
 800c020:	4602      	mov	r2, r0
 800c022:	460b      	mov	r3, r1
 800c024:	4630      	mov	r0, r6
 800c026:	4639      	mov	r1, r7
 800c028:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c02c:	f7f4 f89c 	bl	8000168 <__aeabi_dsub>
 800c030:	2200      	movs	r2, #0
 800c032:	4b19      	ldr	r3, [pc, #100]	; (800c098 <__ieee754_rem_pio2+0x3e0>)
 800c034:	f7f4 fa50 	bl	80004d8 <__aeabi_dmul>
 800c038:	f04f 0803 	mov.w	r8, #3
 800c03c:	2600      	movs	r6, #0
 800c03e:	2700      	movs	r7, #0
 800c040:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c044:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c048:	4632      	mov	r2, r6
 800c04a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c04e:	463b      	mov	r3, r7
 800c050:	46c2      	mov	sl, r8
 800c052:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c056:	f7f4 fca7 	bl	80009a8 <__aeabi_dcmpeq>
 800c05a:	2800      	cmp	r0, #0
 800c05c:	d1f4      	bne.n	800c048 <__ieee754_rem_pio2+0x390>
 800c05e:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <__ieee754_rem_pio2+0x3e4>)
 800c060:	462a      	mov	r2, r5
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	2302      	movs	r3, #2
 800c066:	4621      	mov	r1, r4
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	a806      	add	r0, sp, #24
 800c06c:	4653      	mov	r3, sl
 800c06e:	f000 f817 	bl	800c0a0 <__kernel_rem_pio2>
 800c072:	9b04      	ldr	r3, [sp, #16]
 800c074:	4605      	mov	r5, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	f6bf ae55 	bge.w	800bd26 <__ieee754_rem_pio2+0x6e>
 800c07c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c080:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c084:	e9c4 2300 	strd	r2, r3, [r4]
 800c088:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c08c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c090:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c094:	e706      	b.n	800bea4 <__ieee754_rem_pio2+0x1ec>
 800c096:	bf00      	nop
 800c098:	41700000 	.word	0x41700000
 800c09c:	0800cc88 	.word	0x0800cc88

0800c0a0 <__kernel_rem_pio2>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c0a8:	9308      	str	r3, [sp, #32]
 800c0aa:	9106      	str	r1, [sp, #24]
 800c0ac:	4bb6      	ldr	r3, [pc, #728]	; (800c388 <__kernel_rem_pio2+0x2e8>)
 800c0ae:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c0b0:	f112 0f14 	cmn.w	r2, #20
 800c0b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0b8:	bfa8      	it	ge
 800c0ba:	1ed4      	subge	r4, r2, #3
 800c0bc:	9302      	str	r3, [sp, #8]
 800c0be:	9b08      	ldr	r3, [sp, #32]
 800c0c0:	bfb8      	it	lt
 800c0c2:	2400      	movlt	r4, #0
 800c0c4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c0c8:	9307      	str	r3, [sp, #28]
 800c0ca:	bfa4      	itt	ge
 800c0cc:	2318      	movge	r3, #24
 800c0ce:	fb94 f4f3 	sdivge	r4, r4, r3
 800c0d2:	f06f 0317 	mvn.w	r3, #23
 800c0d6:	fb04 3303 	mla	r3, r4, r3, r3
 800c0da:	eb03 0b02 	add.w	fp, r3, r2
 800c0de:	9a07      	ldr	r2, [sp, #28]
 800c0e0:	9b02      	ldr	r3, [sp, #8]
 800c0e2:	1aa7      	subs	r7, r4, r2
 800c0e4:	eb03 0802 	add.w	r8, r3, r2
 800c0e8:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c0ea:	2500      	movs	r5, #0
 800c0ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	9009      	str	r0, [sp, #36]	; 0x24
 800c0f6:	ae20      	add	r6, sp, #128	; 0x80
 800c0f8:	4545      	cmp	r5, r8
 800c0fa:	dd14      	ble.n	800c126 <__kernel_rem_pio2+0x86>
 800c0fc:	f04f 0800 	mov.w	r8, #0
 800c100:	9a08      	ldr	r2, [sp, #32]
 800c102:	ab20      	add	r3, sp, #128	; 0x80
 800c104:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c108:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c10c:	9b02      	ldr	r3, [sp, #8]
 800c10e:	4598      	cmp	r8, r3
 800c110:	dc35      	bgt.n	800c17e <__kernel_rem_pio2+0xde>
 800c112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c114:	2200      	movs	r2, #0
 800c116:	f1a3 0908 	sub.w	r9, r3, #8
 800c11a:	2300      	movs	r3, #0
 800c11c:	462f      	mov	r7, r5
 800c11e:	2600      	movs	r6, #0
 800c120:	e9cd 2300 	strd	r2, r3, [sp]
 800c124:	e01f      	b.n	800c166 <__kernel_rem_pio2+0xc6>
 800c126:	42ef      	cmn	r7, r5
 800c128:	d40b      	bmi.n	800c142 <__kernel_rem_pio2+0xa2>
 800c12a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c12e:	e9cd 2300 	strd	r2, r3, [sp]
 800c132:	f7f4 f967 	bl	8000404 <__aeabi_i2d>
 800c136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c13a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c13e:	3501      	adds	r5, #1
 800c140:	e7da      	b.n	800c0f8 <__kernel_rem_pio2+0x58>
 800c142:	4610      	mov	r0, r2
 800c144:	4619      	mov	r1, r3
 800c146:	e7f8      	b.n	800c13a <__kernel_rem_pio2+0x9a>
 800c148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c14c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c150:	f7f4 f9c2 	bl	80004d8 <__aeabi_dmul>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c15c:	f7f4 f806 	bl	800016c <__adddf3>
 800c160:	e9cd 0100 	strd	r0, r1, [sp]
 800c164:	3601      	adds	r6, #1
 800c166:	9b07      	ldr	r3, [sp, #28]
 800c168:	3f08      	subs	r7, #8
 800c16a:	429e      	cmp	r6, r3
 800c16c:	ddec      	ble.n	800c148 <__kernel_rem_pio2+0xa8>
 800c16e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c172:	f108 0801 	add.w	r8, r8, #1
 800c176:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c17a:	3508      	adds	r5, #8
 800c17c:	e7c6      	b.n	800c10c <__kernel_rem_pio2+0x6c>
 800c17e:	9b02      	ldr	r3, [sp, #8]
 800c180:	aa0c      	add	r2, sp, #48	; 0x30
 800c182:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c186:	930b      	str	r3, [sp, #44]	; 0x2c
 800c188:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c18a:	9e02      	ldr	r6, [sp, #8]
 800c18c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c190:	930a      	str	r3, [sp, #40]	; 0x28
 800c192:	ab98      	add	r3, sp, #608	; 0x260
 800c194:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c198:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c19c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c19e:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c1a2:	46d0      	mov	r8, sl
 800c1a4:	46b1      	mov	r9, r6
 800c1a6:	af0c      	add	r7, sp, #48	; 0x30
 800c1a8:	9700      	str	r7, [sp, #0]
 800c1aa:	f1b9 0f00 	cmp.w	r9, #0
 800c1ae:	f1a8 0808 	sub.w	r8, r8, #8
 800c1b2:	dc70      	bgt.n	800c296 <__kernel_rem_pio2+0x1f6>
 800c1b4:	465a      	mov	r2, fp
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	f000 fc2d 	bl	800ca18 <scalbn>
 800c1be:	2200      	movs	r2, #0
 800c1c0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c1c4:	4604      	mov	r4, r0
 800c1c6:	460d      	mov	r5, r1
 800c1c8:	f7f4 f986 	bl	80004d8 <__aeabi_dmul>
 800c1cc:	f7ff fbe0 	bl	800b990 <floor>
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	4b6e      	ldr	r3, [pc, #440]	; (800c38c <__kernel_rem_pio2+0x2ec>)
 800c1d4:	f7f4 f980 	bl	80004d8 <__aeabi_dmul>
 800c1d8:	4602      	mov	r2, r0
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4620      	mov	r0, r4
 800c1de:	4629      	mov	r1, r5
 800c1e0:	f7f3 ffc2 	bl	8000168 <__aeabi_dsub>
 800c1e4:	460d      	mov	r5, r1
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	f7f4 fc26 	bl	8000a38 <__aeabi_d2iz>
 800c1ec:	9004      	str	r0, [sp, #16]
 800c1ee:	f7f4 f909 	bl	8000404 <__aeabi_i2d>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	4620      	mov	r0, r4
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	f7f3 ffb5 	bl	8000168 <__aeabi_dsub>
 800c1fe:	f1bb 0f00 	cmp.w	fp, #0
 800c202:	4680      	mov	r8, r0
 800c204:	4689      	mov	r9, r1
 800c206:	dd6f      	ble.n	800c2e8 <__kernel_rem_pio2+0x248>
 800c208:	1e71      	subs	r1, r6, #1
 800c20a:	ab0c      	add	r3, sp, #48	; 0x30
 800c20c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c210:	9c04      	ldr	r4, [sp, #16]
 800c212:	f1cb 0018 	rsb	r0, fp, #24
 800c216:	fa43 f200 	asr.w	r2, r3, r0
 800c21a:	4414      	add	r4, r2
 800c21c:	4082      	lsls	r2, r0
 800c21e:	1a9b      	subs	r3, r3, r2
 800c220:	aa0c      	add	r2, sp, #48	; 0x30
 800c222:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800c226:	f1cb 0217 	rsb	r2, fp, #23
 800c22a:	9404      	str	r4, [sp, #16]
 800c22c:	4113      	asrs	r3, r2
 800c22e:	9300      	str	r3, [sp, #0]
 800c230:	9b00      	ldr	r3, [sp, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	dd66      	ble.n	800c304 <__kernel_rem_pio2+0x264>
 800c236:	2200      	movs	r2, #0
 800c238:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c23c:	4614      	mov	r4, r2
 800c23e:	9b04      	ldr	r3, [sp, #16]
 800c240:	3301      	adds	r3, #1
 800c242:	9304      	str	r3, [sp, #16]
 800c244:	4296      	cmp	r6, r2
 800c246:	f300 80ad 	bgt.w	800c3a4 <__kernel_rem_pio2+0x304>
 800c24a:	f1bb 0f00 	cmp.w	fp, #0
 800c24e:	dd07      	ble.n	800c260 <__kernel_rem_pio2+0x1c0>
 800c250:	f1bb 0f01 	cmp.w	fp, #1
 800c254:	f000 80b5 	beq.w	800c3c2 <__kernel_rem_pio2+0x322>
 800c258:	f1bb 0f02 	cmp.w	fp, #2
 800c25c:	f000 80bb 	beq.w	800c3d6 <__kernel_rem_pio2+0x336>
 800c260:	9b00      	ldr	r3, [sp, #0]
 800c262:	2b02      	cmp	r3, #2
 800c264:	d14e      	bne.n	800c304 <__kernel_rem_pio2+0x264>
 800c266:	4642      	mov	r2, r8
 800c268:	464b      	mov	r3, r9
 800c26a:	2000      	movs	r0, #0
 800c26c:	4948      	ldr	r1, [pc, #288]	; (800c390 <__kernel_rem_pio2+0x2f0>)
 800c26e:	f7f3 ff7b 	bl	8000168 <__aeabi_dsub>
 800c272:	4680      	mov	r8, r0
 800c274:	4689      	mov	r9, r1
 800c276:	2c00      	cmp	r4, #0
 800c278:	d044      	beq.n	800c304 <__kernel_rem_pio2+0x264>
 800c27a:	465a      	mov	r2, fp
 800c27c:	2000      	movs	r0, #0
 800c27e:	4944      	ldr	r1, [pc, #272]	; (800c390 <__kernel_rem_pio2+0x2f0>)
 800c280:	f000 fbca 	bl	800ca18 <scalbn>
 800c284:	4602      	mov	r2, r0
 800c286:	460b      	mov	r3, r1
 800c288:	4640      	mov	r0, r8
 800c28a:	4649      	mov	r1, r9
 800c28c:	f7f3 ff6c 	bl	8000168 <__aeabi_dsub>
 800c290:	4680      	mov	r8, r0
 800c292:	4689      	mov	r9, r1
 800c294:	e036      	b.n	800c304 <__kernel_rem_pio2+0x264>
 800c296:	2200      	movs	r2, #0
 800c298:	4b3e      	ldr	r3, [pc, #248]	; (800c394 <__kernel_rem_pio2+0x2f4>)
 800c29a:	4620      	mov	r0, r4
 800c29c:	4629      	mov	r1, r5
 800c29e:	f7f4 f91b 	bl	80004d8 <__aeabi_dmul>
 800c2a2:	f7f4 fbc9 	bl	8000a38 <__aeabi_d2iz>
 800c2a6:	f7f4 f8ad 	bl	8000404 <__aeabi_i2d>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4b38      	ldr	r3, [pc, #224]	; (800c398 <__kernel_rem_pio2+0x2f8>)
 800c2b6:	f7f4 f90f 	bl	80004d8 <__aeabi_dmul>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	460b      	mov	r3, r1
 800c2be:	4620      	mov	r0, r4
 800c2c0:	4629      	mov	r1, r5
 800c2c2:	f7f3 ff51 	bl	8000168 <__aeabi_dsub>
 800c2c6:	f7f4 fbb7 	bl	8000a38 <__aeabi_d2iz>
 800c2ca:	9b00      	ldr	r3, [sp, #0]
 800c2cc:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c2d0:	f843 0b04 	str.w	r0, [r3], #4
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2da:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c2de:	f7f3 ff45 	bl	800016c <__adddf3>
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	460d      	mov	r5, r1
 800c2e6:	e760      	b.n	800c1aa <__kernel_rem_pio2+0x10a>
 800c2e8:	d105      	bne.n	800c2f6 <__kernel_rem_pio2+0x256>
 800c2ea:	1e73      	subs	r3, r6, #1
 800c2ec:	aa0c      	add	r2, sp, #48	; 0x30
 800c2ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2f2:	15db      	asrs	r3, r3, #23
 800c2f4:	e79b      	b.n	800c22e <__kernel_rem_pio2+0x18e>
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	4b28      	ldr	r3, [pc, #160]	; (800c39c <__kernel_rem_pio2+0x2fc>)
 800c2fa:	f7f4 fb73 	bl	80009e4 <__aeabi_dcmpge>
 800c2fe:	2800      	cmp	r0, #0
 800c300:	d13e      	bne.n	800c380 <__kernel_rem_pio2+0x2e0>
 800c302:	9000      	str	r0, [sp, #0]
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	4640      	mov	r0, r8
 800c30a:	4649      	mov	r1, r9
 800c30c:	f7f4 fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 800c310:	2800      	cmp	r0, #0
 800c312:	f000 80b2 	beq.w	800c47a <__kernel_rem_pio2+0x3da>
 800c316:	1e74      	subs	r4, r6, #1
 800c318:	4623      	mov	r3, r4
 800c31a:	2200      	movs	r2, #0
 800c31c:	9902      	ldr	r1, [sp, #8]
 800c31e:	428b      	cmp	r3, r1
 800c320:	da60      	bge.n	800c3e4 <__kernel_rem_pio2+0x344>
 800c322:	2a00      	cmp	r2, #0
 800c324:	d075      	beq.n	800c412 <__kernel_rem_pio2+0x372>
 800c326:	ab0c      	add	r3, sp, #48	; 0x30
 800c328:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c32c:	f1ab 0b18 	sub.w	fp, fp, #24
 800c330:	2b00      	cmp	r3, #0
 800c332:	f000 80a0 	beq.w	800c476 <__kernel_rem_pio2+0x3d6>
 800c336:	465a      	mov	r2, fp
 800c338:	2000      	movs	r0, #0
 800c33a:	4915      	ldr	r1, [pc, #84]	; (800c390 <__kernel_rem_pio2+0x2f0>)
 800c33c:	f000 fb6c 	bl	800ca18 <scalbn>
 800c340:	46a2      	mov	sl, r4
 800c342:	4606      	mov	r6, r0
 800c344:	460f      	mov	r7, r1
 800c346:	f04f 0800 	mov.w	r8, #0
 800c34a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c34c:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c394 <__kernel_rem_pio2+0x2f4>
 800c350:	00e5      	lsls	r5, r4, #3
 800c352:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c356:	f1ba 0f00 	cmp.w	sl, #0
 800c35a:	f280 80c4 	bge.w	800c4e6 <__kernel_rem_pio2+0x446>
 800c35e:	4626      	mov	r6, r4
 800c360:	2e00      	cmp	r6, #0
 800c362:	f2c0 80f6 	blt.w	800c552 <__kernel_rem_pio2+0x4b2>
 800c366:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <__kernel_rem_pio2+0x300>)
 800c368:	f04f 0a00 	mov.w	sl, #0
 800c36c:	9307      	str	r3, [sp, #28]
 800c36e:	ab70      	add	r3, sp, #448	; 0x1c0
 800c370:	f04f 0b00 	mov.w	fp, #0
 800c374:	f04f 0800 	mov.w	r8, #0
 800c378:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c37c:	1ba7      	subs	r7, r4, r6
 800c37e:	e0dc      	b.n	800c53a <__kernel_rem_pio2+0x49a>
 800c380:	2302      	movs	r3, #2
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	e757      	b.n	800c236 <__kernel_rem_pio2+0x196>
 800c386:	bf00      	nop
 800c388:	0800cdd0 	.word	0x0800cdd0
 800c38c:	40200000 	.word	0x40200000
 800c390:	3ff00000 	.word	0x3ff00000
 800c394:	3e700000 	.word	0x3e700000
 800c398:	41700000 	.word	0x41700000
 800c39c:	3fe00000 	.word	0x3fe00000
 800c3a0:	0800cd90 	.word	0x0800cd90
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	b944      	cbnz	r4, 800c3ba <__kernel_rem_pio2+0x31a>
 800c3a8:	b11b      	cbz	r3, 800c3b2 <__kernel_rem_pio2+0x312>
 800c3aa:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	461c      	mov	r4, r3
 800c3b4:	3201      	adds	r2, #1
 800c3b6:	3704      	adds	r7, #4
 800c3b8:	e744      	b.n	800c244 <__kernel_rem_pio2+0x1a4>
 800c3ba:	1acb      	subs	r3, r1, r3
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	4623      	mov	r3, r4
 800c3c0:	e7f7      	b.n	800c3b2 <__kernel_rem_pio2+0x312>
 800c3c2:	1e72      	subs	r2, r6, #1
 800c3c4:	ab0c      	add	r3, sp, #48	; 0x30
 800c3c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ca:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c3ce:	a90c      	add	r1, sp, #48	; 0x30
 800c3d0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c3d4:	e744      	b.n	800c260 <__kernel_rem_pio2+0x1c0>
 800c3d6:	1e72      	subs	r2, r6, #1
 800c3d8:	ab0c      	add	r3, sp, #48	; 0x30
 800c3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3de:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c3e2:	e7f4      	b.n	800c3ce <__kernel_rem_pio2+0x32e>
 800c3e4:	a90c      	add	r1, sp, #48	; 0x30
 800c3e6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	e795      	b.n	800c31c <__kernel_rem_pio2+0x27c>
 800c3f0:	3301      	adds	r3, #1
 800c3f2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c3f6:	2900      	cmp	r1, #0
 800c3f8:	d0fa      	beq.n	800c3f0 <__kernel_rem_pio2+0x350>
 800c3fa:	9a08      	ldr	r2, [sp, #32]
 800c3fc:	a920      	add	r1, sp, #128	; 0x80
 800c3fe:	18b2      	adds	r2, r6, r2
 800c400:	f106 0801 	add.w	r8, r6, #1
 800c404:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800c408:	18f4      	adds	r4, r6, r3
 800c40a:	4544      	cmp	r4, r8
 800c40c:	da04      	bge.n	800c418 <__kernel_rem_pio2+0x378>
 800c40e:	4626      	mov	r6, r4
 800c410:	e6bf      	b.n	800c192 <__kernel_rem_pio2+0xf2>
 800c412:	2301      	movs	r3, #1
 800c414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c416:	e7ec      	b.n	800c3f2 <__kernel_rem_pio2+0x352>
 800c418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c41a:	f04f 0900 	mov.w	r9, #0
 800c41e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c422:	f7f3 ffef 	bl	8000404 <__aeabi_i2d>
 800c426:	2600      	movs	r6, #0
 800c428:	2700      	movs	r7, #0
 800c42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c42c:	e9c5 0100 	strd	r0, r1, [r5]
 800c430:	3b08      	subs	r3, #8
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	9504      	str	r5, [sp, #16]
 800c436:	9b07      	ldr	r3, [sp, #28]
 800c438:	4599      	cmp	r9, r3
 800c43a:	dd05      	ble.n	800c448 <__kernel_rem_pio2+0x3a8>
 800c43c:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c440:	f108 0801 	add.w	r8, r8, #1
 800c444:	3508      	adds	r5, #8
 800c446:	e7e0      	b.n	800c40a <__kernel_rem_pio2+0x36a>
 800c448:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c44c:	9900      	ldr	r1, [sp, #0]
 800c44e:	f109 0901 	add.w	r9, r9, #1
 800c452:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c456:	9100      	str	r1, [sp, #0]
 800c458:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c45c:	f8cd c010 	str.w	ip, [sp, #16]
 800c460:	f7f4 f83a 	bl	80004d8 <__aeabi_dmul>
 800c464:	4602      	mov	r2, r0
 800c466:	460b      	mov	r3, r1
 800c468:	4630      	mov	r0, r6
 800c46a:	4639      	mov	r1, r7
 800c46c:	f7f3 fe7e 	bl	800016c <__adddf3>
 800c470:	4606      	mov	r6, r0
 800c472:	460f      	mov	r7, r1
 800c474:	e7df      	b.n	800c436 <__kernel_rem_pio2+0x396>
 800c476:	3c01      	subs	r4, #1
 800c478:	e755      	b.n	800c326 <__kernel_rem_pio2+0x286>
 800c47a:	f1cb 0200 	rsb	r2, fp, #0
 800c47e:	4640      	mov	r0, r8
 800c480:	4649      	mov	r1, r9
 800c482:	f000 fac9 	bl	800ca18 <scalbn>
 800c486:	2200      	movs	r2, #0
 800c488:	4ba3      	ldr	r3, [pc, #652]	; (800c718 <__kernel_rem_pio2+0x678>)
 800c48a:	4604      	mov	r4, r0
 800c48c:	460d      	mov	r5, r1
 800c48e:	f7f4 faa9 	bl	80009e4 <__aeabi_dcmpge>
 800c492:	b1f8      	cbz	r0, 800c4d4 <__kernel_rem_pio2+0x434>
 800c494:	2200      	movs	r2, #0
 800c496:	4ba1      	ldr	r3, [pc, #644]	; (800c71c <__kernel_rem_pio2+0x67c>)
 800c498:	4620      	mov	r0, r4
 800c49a:	4629      	mov	r1, r5
 800c49c:	f7f4 f81c 	bl	80004d8 <__aeabi_dmul>
 800c4a0:	f7f4 faca 	bl	8000a38 <__aeabi_d2iz>
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	f7f3 ffad 	bl	8000404 <__aeabi_i2d>
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	4b9a      	ldr	r3, [pc, #616]	; (800c718 <__kernel_rem_pio2+0x678>)
 800c4ae:	f7f4 f813 	bl	80004d8 <__aeabi_dmul>
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f7f3 fe55 	bl	8000168 <__aeabi_dsub>
 800c4be:	f7f4 fabb 	bl	8000a38 <__aeabi_d2iz>
 800c4c2:	1c74      	adds	r4, r6, #1
 800c4c4:	ab0c      	add	r3, sp, #48	; 0x30
 800c4c6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c4ca:	f10b 0b18 	add.w	fp, fp, #24
 800c4ce:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c4d2:	e730      	b.n	800c336 <__kernel_rem_pio2+0x296>
 800c4d4:	4620      	mov	r0, r4
 800c4d6:	4629      	mov	r1, r5
 800c4d8:	f7f4 faae 	bl	8000a38 <__aeabi_d2iz>
 800c4dc:	ab0c      	add	r3, sp, #48	; 0x30
 800c4de:	4634      	mov	r4, r6
 800c4e0:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c4e4:	e727      	b.n	800c336 <__kernel_rem_pio2+0x296>
 800c4e6:	ab0c      	add	r3, sp, #48	; 0x30
 800c4e8:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c4ec:	f7f3 ff8a 	bl	8000404 <__aeabi_i2d>
 800c4f0:	4632      	mov	r2, r6
 800c4f2:	463b      	mov	r3, r7
 800c4f4:	f7f3 fff0 	bl	80004d8 <__aeabi_dmul>
 800c4f8:	4642      	mov	r2, r8
 800c4fa:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c4fe:	464b      	mov	r3, r9
 800c500:	4630      	mov	r0, r6
 800c502:	4639      	mov	r1, r7
 800c504:	f7f3 ffe8 	bl	80004d8 <__aeabi_dmul>
 800c508:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c50c:	4606      	mov	r6, r0
 800c50e:	460f      	mov	r7, r1
 800c510:	e721      	b.n	800c356 <__kernel_rem_pio2+0x2b6>
 800c512:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c516:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c51a:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c51e:	f8cd c01c 	str.w	ip, [sp, #28]
 800c522:	f7f3 ffd9 	bl	80004d8 <__aeabi_dmul>
 800c526:	4602      	mov	r2, r0
 800c528:	460b      	mov	r3, r1
 800c52a:	4650      	mov	r0, sl
 800c52c:	4659      	mov	r1, fp
 800c52e:	f7f3 fe1d 	bl	800016c <__adddf3>
 800c532:	4682      	mov	sl, r0
 800c534:	468b      	mov	fp, r1
 800c536:	f108 0801 	add.w	r8, r8, #1
 800c53a:	9b02      	ldr	r3, [sp, #8]
 800c53c:	4598      	cmp	r8, r3
 800c53e:	dc01      	bgt.n	800c544 <__kernel_rem_pio2+0x4a4>
 800c540:	45b8      	cmp	r8, r7
 800c542:	dde6      	ble.n	800c512 <__kernel_rem_pio2+0x472>
 800c544:	ab48      	add	r3, sp, #288	; 0x120
 800c546:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c54a:	e9c7 ab00 	strd	sl, fp, [r7]
 800c54e:	3e01      	subs	r6, #1
 800c550:	e706      	b.n	800c360 <__kernel_rem_pio2+0x2c0>
 800c552:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c554:	2b02      	cmp	r3, #2
 800c556:	dc09      	bgt.n	800c56c <__kernel_rem_pio2+0x4cc>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	dc32      	bgt.n	800c5c2 <__kernel_rem_pio2+0x522>
 800c55c:	d058      	beq.n	800c610 <__kernel_rem_pio2+0x570>
 800c55e:	9b04      	ldr	r3, [sp, #16]
 800c560:	f003 0007 	and.w	r0, r3, #7
 800c564:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c56e:	2b03      	cmp	r3, #3
 800c570:	d1f5      	bne.n	800c55e <__kernel_rem_pio2+0x4be>
 800c572:	ab48      	add	r3, sp, #288	; 0x120
 800c574:	441d      	add	r5, r3
 800c576:	46aa      	mov	sl, r5
 800c578:	46a3      	mov	fp, r4
 800c57a:	f1bb 0f00 	cmp.w	fp, #0
 800c57e:	dc74      	bgt.n	800c66a <__kernel_rem_pio2+0x5ca>
 800c580:	46aa      	mov	sl, r5
 800c582:	46a3      	mov	fp, r4
 800c584:	f1bb 0f01 	cmp.w	fp, #1
 800c588:	f300 808e 	bgt.w	800c6a8 <__kernel_rem_pio2+0x608>
 800c58c:	2700      	movs	r7, #0
 800c58e:	463e      	mov	r6, r7
 800c590:	2c01      	cmp	r4, #1
 800c592:	f300 80a8 	bgt.w	800c6e6 <__kernel_rem_pio2+0x646>
 800c596:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c59a:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c59e:	9b00      	ldr	r3, [sp, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f040 80aa 	bne.w	800c6fa <__kernel_rem_pio2+0x65a>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	462a      	mov	r2, r5
 800c5aa:	9806      	ldr	r0, [sp, #24]
 800c5ac:	e9c0 2300 	strd	r2, r3, [r0]
 800c5b0:	4622      	mov	r2, r4
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c5b8:	463a      	mov	r2, r7
 800c5ba:	4633      	mov	r3, r6
 800c5bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c5c0:	e7cd      	b.n	800c55e <__kernel_rem_pio2+0x4be>
 800c5c2:	2000      	movs	r0, #0
 800c5c4:	46a0      	mov	r8, r4
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	ab48      	add	r3, sp, #288	; 0x120
 800c5ca:	441d      	add	r5, r3
 800c5cc:	f1b8 0f00 	cmp.w	r8, #0
 800c5d0:	da38      	bge.n	800c644 <__kernel_rem_pio2+0x5a4>
 800c5d2:	9b00      	ldr	r3, [sp, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d03c      	beq.n	800c652 <__kernel_rem_pio2+0x5b2>
 800c5d8:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c5dc:	4602      	mov	r2, r0
 800c5de:	462b      	mov	r3, r5
 800c5e0:	9d06      	ldr	r5, [sp, #24]
 800c5e2:	2601      	movs	r6, #1
 800c5e4:	e9c5 2300 	strd	r2, r3, [r5]
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c5ee:	f7f3 fdbb 	bl	8000168 <__aeabi_dsub>
 800c5f2:	4684      	mov	ip, r0
 800c5f4:	460f      	mov	r7, r1
 800c5f6:	ad48      	add	r5, sp, #288	; 0x120
 800c5f8:	42b4      	cmp	r4, r6
 800c5fa:	da2c      	bge.n	800c656 <__kernel_rem_pio2+0x5b6>
 800c5fc:	9b00      	ldr	r3, [sp, #0]
 800c5fe:	b10b      	cbz	r3, 800c604 <__kernel_rem_pio2+0x564>
 800c600:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c604:	4662      	mov	r2, ip
 800c606:	463b      	mov	r3, r7
 800c608:	9906      	ldr	r1, [sp, #24]
 800c60a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c60e:	e7a6      	b.n	800c55e <__kernel_rem_pio2+0x4be>
 800c610:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c612:	ab48      	add	r3, sp, #288	; 0x120
 800c614:	4637      	mov	r7, r6
 800c616:	441d      	add	r5, r3
 800c618:	2c00      	cmp	r4, #0
 800c61a:	da09      	bge.n	800c630 <__kernel_rem_pio2+0x590>
 800c61c:	9b00      	ldr	r3, [sp, #0]
 800c61e:	b10b      	cbz	r3, 800c624 <__kernel_rem_pio2+0x584>
 800c620:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c624:	4632      	mov	r2, r6
 800c626:	463b      	mov	r3, r7
 800c628:	9906      	ldr	r1, [sp, #24]
 800c62a:	e9c1 2300 	strd	r2, r3, [r1]
 800c62e:	e796      	b.n	800c55e <__kernel_rem_pio2+0x4be>
 800c630:	4630      	mov	r0, r6
 800c632:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c636:	4639      	mov	r1, r7
 800c638:	f7f3 fd98 	bl	800016c <__adddf3>
 800c63c:	3c01      	subs	r4, #1
 800c63e:	4606      	mov	r6, r0
 800c640:	460f      	mov	r7, r1
 800c642:	e7e9      	b.n	800c618 <__kernel_rem_pio2+0x578>
 800c644:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c648:	f7f3 fd90 	bl	800016c <__adddf3>
 800c64c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c650:	e7bc      	b.n	800c5cc <__kernel_rem_pio2+0x52c>
 800c652:	460d      	mov	r5, r1
 800c654:	e7c2      	b.n	800c5dc <__kernel_rem_pio2+0x53c>
 800c656:	4660      	mov	r0, ip
 800c658:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800c65c:	4639      	mov	r1, r7
 800c65e:	f7f3 fd85 	bl	800016c <__adddf3>
 800c662:	3601      	adds	r6, #1
 800c664:	4684      	mov	ip, r0
 800c666:	460f      	mov	r7, r1
 800c668:	e7c6      	b.n	800c5f8 <__kernel_rem_pio2+0x558>
 800c66a:	e9da 6700 	ldrd	r6, r7, [sl]
 800c66e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c672:	4632      	mov	r2, r6
 800c674:	463b      	mov	r3, r7
 800c676:	4640      	mov	r0, r8
 800c678:	4649      	mov	r1, r9
 800c67a:	f7f3 fd77 	bl	800016c <__adddf3>
 800c67e:	4602      	mov	r2, r0
 800c680:	460b      	mov	r3, r1
 800c682:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c686:	4640      	mov	r0, r8
 800c688:	4649      	mov	r1, r9
 800c68a:	f7f3 fd6d 	bl	8000168 <__aeabi_dsub>
 800c68e:	4632      	mov	r2, r6
 800c690:	463b      	mov	r3, r7
 800c692:	f7f3 fd6b 	bl	800016c <__adddf3>
 800c696:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c69a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c69e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c6a2:	e9ca 2300 	strd	r2, r3, [sl]
 800c6a6:	e768      	b.n	800c57a <__kernel_rem_pio2+0x4da>
 800c6a8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6ac:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c6b0:	4642      	mov	r2, r8
 800c6b2:	464b      	mov	r3, r9
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4639      	mov	r1, r7
 800c6b8:	f7f3 fd58 	bl	800016c <__adddf3>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	460b      	mov	r3, r1
 800c6c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	f7f3 fd4e 	bl	8000168 <__aeabi_dsub>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	f7f3 fd4c 	bl	800016c <__adddf3>
 800c6d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c6d8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c6dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c6e0:	e9ca 2300 	strd	r2, r3, [sl]
 800c6e4:	e74e      	b.n	800c584 <__kernel_rem_pio2+0x4e4>
 800c6e6:	4638      	mov	r0, r7
 800c6e8:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c6ec:	4631      	mov	r1, r6
 800c6ee:	f7f3 fd3d 	bl	800016c <__adddf3>
 800c6f2:	3c01      	subs	r4, #1
 800c6f4:	4607      	mov	r7, r0
 800c6f6:	460e      	mov	r6, r1
 800c6f8:	e74a      	b.n	800c590 <__kernel_rem_pio2+0x4f0>
 800c6fa:	9b06      	ldr	r3, [sp, #24]
 800c6fc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c700:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c704:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c708:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c70c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c710:	601d      	str	r5, [r3, #0]
 800c712:	615e      	str	r6, [r3, #20]
 800c714:	e723      	b.n	800c55e <__kernel_rem_pio2+0x4be>
 800c716:	bf00      	nop
 800c718:	41700000 	.word	0x41700000
 800c71c:	3e700000 	.word	0x3e700000

0800c720 <__kernel_cos>:
 800c720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c728:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c72c:	4680      	mov	r8, r0
 800c72e:	460f      	mov	r7, r1
 800c730:	e9cd 2300 	strd	r2, r3, [sp]
 800c734:	da04      	bge.n	800c740 <__kernel_cos+0x20>
 800c736:	f7f4 f97f 	bl	8000a38 <__aeabi_d2iz>
 800c73a:	2800      	cmp	r0, #0
 800c73c:	f000 8086 	beq.w	800c84c <__kernel_cos+0x12c>
 800c740:	4642      	mov	r2, r8
 800c742:	463b      	mov	r3, r7
 800c744:	4640      	mov	r0, r8
 800c746:	4639      	mov	r1, r7
 800c748:	f7f3 fec6 	bl	80004d8 <__aeabi_dmul>
 800c74c:	2200      	movs	r2, #0
 800c74e:	4b4e      	ldr	r3, [pc, #312]	; (800c888 <__kernel_cos+0x168>)
 800c750:	4604      	mov	r4, r0
 800c752:	460d      	mov	r5, r1
 800c754:	f7f3 fec0 	bl	80004d8 <__aeabi_dmul>
 800c758:	a33f      	add	r3, pc, #252	; (adr r3, 800c858 <__kernel_cos+0x138>)
 800c75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75e:	4682      	mov	sl, r0
 800c760:	468b      	mov	fp, r1
 800c762:	4620      	mov	r0, r4
 800c764:	4629      	mov	r1, r5
 800c766:	f7f3 feb7 	bl	80004d8 <__aeabi_dmul>
 800c76a:	a33d      	add	r3, pc, #244	; (adr r3, 800c860 <__kernel_cos+0x140>)
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f7f3 fcfc 	bl	800016c <__adddf3>
 800c774:	4622      	mov	r2, r4
 800c776:	462b      	mov	r3, r5
 800c778:	f7f3 feae 	bl	80004d8 <__aeabi_dmul>
 800c77c:	a33a      	add	r3, pc, #232	; (adr r3, 800c868 <__kernel_cos+0x148>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	f7f3 fcf1 	bl	8000168 <__aeabi_dsub>
 800c786:	4622      	mov	r2, r4
 800c788:	462b      	mov	r3, r5
 800c78a:	f7f3 fea5 	bl	80004d8 <__aeabi_dmul>
 800c78e:	a338      	add	r3, pc, #224	; (adr r3, 800c870 <__kernel_cos+0x150>)
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f7f3 fcea 	bl	800016c <__adddf3>
 800c798:	4622      	mov	r2, r4
 800c79a:	462b      	mov	r3, r5
 800c79c:	f7f3 fe9c 	bl	80004d8 <__aeabi_dmul>
 800c7a0:	a335      	add	r3, pc, #212	; (adr r3, 800c878 <__kernel_cos+0x158>)
 800c7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7a6:	f7f3 fcdf 	bl	8000168 <__aeabi_dsub>
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	f7f3 fe93 	bl	80004d8 <__aeabi_dmul>
 800c7b2:	a333      	add	r3, pc, #204	; (adr r3, 800c880 <__kernel_cos+0x160>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	f7f3 fcd8 	bl	800016c <__adddf3>
 800c7bc:	4622      	mov	r2, r4
 800c7be:	462b      	mov	r3, r5
 800c7c0:	f7f3 fe8a 	bl	80004d8 <__aeabi_dmul>
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	462b      	mov	r3, r5
 800c7c8:	f7f3 fe86 	bl	80004d8 <__aeabi_dmul>
 800c7cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	460d      	mov	r5, r1
 800c7d4:	4640      	mov	r0, r8
 800c7d6:	4639      	mov	r1, r7
 800c7d8:	f7f3 fe7e 	bl	80004d8 <__aeabi_dmul>
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4602      	mov	r2, r0
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	4620      	mov	r0, r4
 800c7e4:	f7f3 fcc0 	bl	8000168 <__aeabi_dsub>
 800c7e8:	4b28      	ldr	r3, [pc, #160]	; (800c88c <__kernel_cos+0x16c>)
 800c7ea:	4680      	mov	r8, r0
 800c7ec:	429e      	cmp	r6, r3
 800c7ee:	4689      	mov	r9, r1
 800c7f0:	dc0e      	bgt.n	800c810 <__kernel_cos+0xf0>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4650      	mov	r0, sl
 800c7f8:	4659      	mov	r1, fp
 800c7fa:	f7f3 fcb5 	bl	8000168 <__aeabi_dsub>
 800c7fe:	4602      	mov	r2, r0
 800c800:	2000      	movs	r0, #0
 800c802:	460b      	mov	r3, r1
 800c804:	4922      	ldr	r1, [pc, #136]	; (800c890 <__kernel_cos+0x170>)
 800c806:	f7f3 fcaf 	bl	8000168 <__aeabi_dsub>
 800c80a:	b003      	add	sp, #12
 800c80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c810:	2400      	movs	r4, #0
 800c812:	4b20      	ldr	r3, [pc, #128]	; (800c894 <__kernel_cos+0x174>)
 800c814:	4622      	mov	r2, r4
 800c816:	429e      	cmp	r6, r3
 800c818:	bfcc      	ite	gt
 800c81a:	4d1f      	ldrgt	r5, [pc, #124]	; (800c898 <__kernel_cos+0x178>)
 800c81c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c820:	462b      	mov	r3, r5
 800c822:	2000      	movs	r0, #0
 800c824:	491a      	ldr	r1, [pc, #104]	; (800c890 <__kernel_cos+0x170>)
 800c826:	f7f3 fc9f 	bl	8000168 <__aeabi_dsub>
 800c82a:	4622      	mov	r2, r4
 800c82c:	4606      	mov	r6, r0
 800c82e:	460f      	mov	r7, r1
 800c830:	462b      	mov	r3, r5
 800c832:	4650      	mov	r0, sl
 800c834:	4659      	mov	r1, fp
 800c836:	f7f3 fc97 	bl	8000168 <__aeabi_dsub>
 800c83a:	4642      	mov	r2, r8
 800c83c:	464b      	mov	r3, r9
 800c83e:	f7f3 fc93 	bl	8000168 <__aeabi_dsub>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4630      	mov	r0, r6
 800c848:	4639      	mov	r1, r7
 800c84a:	e7dc      	b.n	800c806 <__kernel_cos+0xe6>
 800c84c:	2000      	movs	r0, #0
 800c84e:	4910      	ldr	r1, [pc, #64]	; (800c890 <__kernel_cos+0x170>)
 800c850:	e7db      	b.n	800c80a <__kernel_cos+0xea>
 800c852:	bf00      	nop
 800c854:	f3af 8000 	nop.w
 800c858:	be8838d4 	.word	0xbe8838d4
 800c85c:	bda8fae9 	.word	0xbda8fae9
 800c860:	bdb4b1c4 	.word	0xbdb4b1c4
 800c864:	3e21ee9e 	.word	0x3e21ee9e
 800c868:	809c52ad 	.word	0x809c52ad
 800c86c:	3e927e4f 	.word	0x3e927e4f
 800c870:	19cb1590 	.word	0x19cb1590
 800c874:	3efa01a0 	.word	0x3efa01a0
 800c878:	16c15177 	.word	0x16c15177
 800c87c:	3f56c16c 	.word	0x3f56c16c
 800c880:	5555554c 	.word	0x5555554c
 800c884:	3fa55555 	.word	0x3fa55555
 800c888:	3fe00000 	.word	0x3fe00000
 800c88c:	3fd33332 	.word	0x3fd33332
 800c890:	3ff00000 	.word	0x3ff00000
 800c894:	3fe90000 	.word	0x3fe90000
 800c898:	3fd20000 	.word	0x3fd20000
 800c89c:	00000000 	.word	0x00000000

0800c8a0 <__kernel_sin>:
 800c8a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a4:	b086      	sub	sp, #24
 800c8a6:	e9cd 2300 	strd	r2, r3, [sp]
 800c8aa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c8ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c8b2:	4682      	mov	sl, r0
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c8b8:	da03      	bge.n	800c8c2 <__kernel_sin+0x22>
 800c8ba:	f7f4 f8bd 	bl	8000a38 <__aeabi_d2iz>
 800c8be:	2800      	cmp	r0, #0
 800c8c0:	d050      	beq.n	800c964 <__kernel_sin+0xc4>
 800c8c2:	4652      	mov	r2, sl
 800c8c4:	4623      	mov	r3, r4
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	4621      	mov	r1, r4
 800c8ca:	f7f3 fe05 	bl	80004d8 <__aeabi_dmul>
 800c8ce:	4606      	mov	r6, r0
 800c8d0:	460f      	mov	r7, r1
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	4650      	mov	r0, sl
 800c8d8:	4621      	mov	r1, r4
 800c8da:	f7f3 fdfd 	bl	80004d8 <__aeabi_dmul>
 800c8de:	a33e      	add	r3, pc, #248	; (adr r3, 800c9d8 <__kernel_sin+0x138>)
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	4680      	mov	r8, r0
 800c8e6:	4689      	mov	r9, r1
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	4639      	mov	r1, r7
 800c8ec:	f7f3 fdf4 	bl	80004d8 <__aeabi_dmul>
 800c8f0:	a33b      	add	r3, pc, #236	; (adr r3, 800c9e0 <__kernel_sin+0x140>)
 800c8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f6:	f7f3 fc37 	bl	8000168 <__aeabi_dsub>
 800c8fa:	4632      	mov	r2, r6
 800c8fc:	463b      	mov	r3, r7
 800c8fe:	f7f3 fdeb 	bl	80004d8 <__aeabi_dmul>
 800c902:	a339      	add	r3, pc, #228	; (adr r3, 800c9e8 <__kernel_sin+0x148>)
 800c904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c908:	f7f3 fc30 	bl	800016c <__adddf3>
 800c90c:	4632      	mov	r2, r6
 800c90e:	463b      	mov	r3, r7
 800c910:	f7f3 fde2 	bl	80004d8 <__aeabi_dmul>
 800c914:	a336      	add	r3, pc, #216	; (adr r3, 800c9f0 <__kernel_sin+0x150>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f7f3 fc25 	bl	8000168 <__aeabi_dsub>
 800c91e:	4632      	mov	r2, r6
 800c920:	463b      	mov	r3, r7
 800c922:	f7f3 fdd9 	bl	80004d8 <__aeabi_dmul>
 800c926:	a334      	add	r3, pc, #208	; (adr r3, 800c9f8 <__kernel_sin+0x158>)
 800c928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c92c:	f7f3 fc1e 	bl	800016c <__adddf3>
 800c930:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c934:	b9dd      	cbnz	r5, 800c96e <__kernel_sin+0xce>
 800c936:	4602      	mov	r2, r0
 800c938:	460b      	mov	r3, r1
 800c93a:	4630      	mov	r0, r6
 800c93c:	4639      	mov	r1, r7
 800c93e:	f7f3 fdcb 	bl	80004d8 <__aeabi_dmul>
 800c942:	a32f      	add	r3, pc, #188	; (adr r3, 800ca00 <__kernel_sin+0x160>)
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fc0e 	bl	8000168 <__aeabi_dsub>
 800c94c:	4642      	mov	r2, r8
 800c94e:	464b      	mov	r3, r9
 800c950:	f7f3 fdc2 	bl	80004d8 <__aeabi_dmul>
 800c954:	4602      	mov	r2, r0
 800c956:	460b      	mov	r3, r1
 800c958:	4650      	mov	r0, sl
 800c95a:	4621      	mov	r1, r4
 800c95c:	f7f3 fc06 	bl	800016c <__adddf3>
 800c960:	4682      	mov	sl, r0
 800c962:	460c      	mov	r4, r1
 800c964:	4650      	mov	r0, sl
 800c966:	4621      	mov	r1, r4
 800c968:	b006      	add	sp, #24
 800c96a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c96e:	2200      	movs	r2, #0
 800c970:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c974:	4b24      	ldr	r3, [pc, #144]	; (800ca08 <__kernel_sin+0x168>)
 800c976:	f7f3 fdaf 	bl	80004d8 <__aeabi_dmul>
 800c97a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c97e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c982:	4640      	mov	r0, r8
 800c984:	4649      	mov	r1, r9
 800c986:	f7f3 fda7 	bl	80004d8 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c992:	f7f3 fbe9 	bl	8000168 <__aeabi_dsub>
 800c996:	4632      	mov	r2, r6
 800c998:	463b      	mov	r3, r7
 800c99a:	f7f3 fd9d 	bl	80004d8 <__aeabi_dmul>
 800c99e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9a2:	f7f3 fbe1 	bl	8000168 <__aeabi_dsub>
 800c9a6:	a316      	add	r3, pc, #88	; (adr r3, 800ca00 <__kernel_sin+0x160>)
 800c9a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ac:	4606      	mov	r6, r0
 800c9ae:	460f      	mov	r7, r1
 800c9b0:	4640      	mov	r0, r8
 800c9b2:	4649      	mov	r1, r9
 800c9b4:	f7f3 fd90 	bl	80004d8 <__aeabi_dmul>
 800c9b8:	4602      	mov	r2, r0
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	4630      	mov	r0, r6
 800c9be:	4639      	mov	r1, r7
 800c9c0:	f7f3 fbd4 	bl	800016c <__adddf3>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	4621      	mov	r1, r4
 800c9cc:	f7f3 fbcc 	bl	8000168 <__aeabi_dsub>
 800c9d0:	e7c6      	b.n	800c960 <__kernel_sin+0xc0>
 800c9d2:	bf00      	nop
 800c9d4:	f3af 8000 	nop.w
 800c9d8:	5acfd57c 	.word	0x5acfd57c
 800c9dc:	3de5d93a 	.word	0x3de5d93a
 800c9e0:	8a2b9ceb 	.word	0x8a2b9ceb
 800c9e4:	3e5ae5e6 	.word	0x3e5ae5e6
 800c9e8:	57b1fe7d 	.word	0x57b1fe7d
 800c9ec:	3ec71de3 	.word	0x3ec71de3
 800c9f0:	19c161d5 	.word	0x19c161d5
 800c9f4:	3f2a01a0 	.word	0x3f2a01a0
 800c9f8:	1110f8a6 	.word	0x1110f8a6
 800c9fc:	3f811111 	.word	0x3f811111
 800ca00:	55555549 	.word	0x55555549
 800ca04:	3fc55555 	.word	0x3fc55555
 800ca08:	3fe00000 	.word	0x3fe00000

0800ca0c <fabs>:
 800ca0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca10:	4619      	mov	r1, r3
 800ca12:	4770      	bx	lr
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <scalbn>:
 800ca18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca1a:	4616      	mov	r6, r2
 800ca1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca20:	4604      	mov	r4, r0
 800ca22:	460d      	mov	r5, r1
 800ca24:	460b      	mov	r3, r1
 800ca26:	b992      	cbnz	r2, 800ca4e <scalbn+0x36>
 800ca28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ca2c:	4303      	orrs	r3, r0
 800ca2e:	d03c      	beq.n	800caaa <scalbn+0x92>
 800ca30:	4b31      	ldr	r3, [pc, #196]	; (800caf8 <scalbn+0xe0>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	f7f3 fd50 	bl	80004d8 <__aeabi_dmul>
 800ca38:	4b30      	ldr	r3, [pc, #192]	; (800cafc <scalbn+0xe4>)
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	429e      	cmp	r6, r3
 800ca3e:	460d      	mov	r5, r1
 800ca40:	da0f      	bge.n	800ca62 <scalbn+0x4a>
 800ca42:	a329      	add	r3, pc, #164	; (adr r3, 800cae8 <scalbn+0xd0>)
 800ca44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca48:	f7f3 fd46 	bl	80004d8 <__aeabi_dmul>
 800ca4c:	e006      	b.n	800ca5c <scalbn+0x44>
 800ca4e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800ca52:	42ba      	cmp	r2, r7
 800ca54:	d109      	bne.n	800ca6a <scalbn+0x52>
 800ca56:	4602      	mov	r2, r0
 800ca58:	f7f3 fb88 	bl	800016c <__adddf3>
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	460d      	mov	r5, r1
 800ca60:	e023      	b.n	800caaa <scalbn+0x92>
 800ca62:	460b      	mov	r3, r1
 800ca64:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca68:	3a36      	subs	r2, #54	; 0x36
 800ca6a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800ca6e:	428e      	cmp	r6, r1
 800ca70:	dd0e      	ble.n	800ca90 <scalbn+0x78>
 800ca72:	a31f      	add	r3, pc, #124	; (adr r3, 800caf0 <scalbn+0xd8>)
 800ca74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca78:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ca7c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ca80:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ca84:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ca88:	481d      	ldr	r0, [pc, #116]	; (800cb00 <scalbn+0xe8>)
 800ca8a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ca8e:	e7db      	b.n	800ca48 <scalbn+0x30>
 800ca90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ca94:	4432      	add	r2, r6
 800ca96:	428a      	cmp	r2, r1
 800ca98:	dceb      	bgt.n	800ca72 <scalbn+0x5a>
 800ca9a:	2a00      	cmp	r2, #0
 800ca9c:	dd08      	ble.n	800cab0 <scalbn+0x98>
 800ca9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800caa2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800caa6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800caaa:	4620      	mov	r0, r4
 800caac:	4629      	mov	r1, r5
 800caae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cab0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cab4:	da0c      	bge.n	800cad0 <scalbn+0xb8>
 800cab6:	a30c      	add	r3, pc, #48	; (adr r3, 800cae8 <scalbn+0xd0>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cac0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800cac4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cac8:	480e      	ldr	r0, [pc, #56]	; (800cb04 <scalbn+0xec>)
 800caca:	f041 011f 	orr.w	r1, r1, #31
 800cace:	e7bb      	b.n	800ca48 <scalbn+0x30>
 800cad0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cad4:	3236      	adds	r2, #54	; 0x36
 800cad6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cada:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cade:	4620      	mov	r0, r4
 800cae0:	4629      	mov	r1, r5
 800cae2:	2200      	movs	r2, #0
 800cae4:	4b08      	ldr	r3, [pc, #32]	; (800cb08 <scalbn+0xf0>)
 800cae6:	e7af      	b.n	800ca48 <scalbn+0x30>
 800cae8:	c2f8f359 	.word	0xc2f8f359
 800caec:	01a56e1f 	.word	0x01a56e1f
 800caf0:	8800759c 	.word	0x8800759c
 800caf4:	7e37e43c 	.word	0x7e37e43c
 800caf8:	43500000 	.word	0x43500000
 800cafc:	ffff3cb0 	.word	0xffff3cb0
 800cb00:	8800759c 	.word	0x8800759c
 800cb04:	c2f8f359 	.word	0xc2f8f359
 800cb08:	3c900000 	.word	0x3c900000

0800cb0c <_init>:
 800cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb0e:	bf00      	nop
 800cb10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb12:	bc08      	pop	{r3}
 800cb14:	469e      	mov	lr, r3
 800cb16:	4770      	bx	lr

0800cb18 <_fini>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	bf00      	nop
 800cb1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb1e:	bc08      	pop	{r3}
 800cb20:	469e      	mov	lr, r3
 800cb22:	4770      	bx	lr
