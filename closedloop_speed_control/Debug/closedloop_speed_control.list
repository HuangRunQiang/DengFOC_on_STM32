
closedloop_speed_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccfc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  0800ce10  0800ce10  0001ce10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0c0  0800d0c0  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800d0c0  0800d0c0  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d0c0  0800d0c0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d0c4  0800d0c4  0001d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800d0c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  20000228  0800d2f0  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001554  0800d2f0  00021554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b95  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003719  00000000  00000000  00034de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00038500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00039788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b825  00000000  00000000  0003a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001775c  00000000  00000000  0005606d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fa44  00000000  00000000  0006d7c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd20d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000556c  00000000  00000000  000fd260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000228 	.word	0x20000228
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cdf4 	.word	0x0800cdf4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000022c 	.word	0x2000022c
 800014c:	0800cdf4 	.word	0x0800cdf4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f001 fca8 	bl	8002b00 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 feb6 	bl	8004f2c <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f004 f990 	bl	80054e8 <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f001 fc93 	bl	8002b00 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f001 fc89 	bl	8002b00 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f003 ffd0 	bl	80051a4 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f004 f96e 	bl	80054e8 <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f001 fc71 	bl	8002b00 <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <LowPassFilter_operator>:
 *
 *  Created on: Jun 18, 2023
 *      Author: hht
 */
#include "lowpass_filter.h"
float LowPassFilter_operator(float x, struct LowPassFilter* filter){
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b087      	sub	sp, #28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
	float dt=5E-3f;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <LowPassFilter_operator+0x70>)
 8001248:	617b      	str	r3, [r7, #20]
	float alpha = filter->Tf/(filter->Tf + dt);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681c      	ldr	r4, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6979      	ldr	r1, [r7, #20]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fc6d 	bl	8000b34 <__addsf3>
 800125a:	4603      	mov	r3, r0
 800125c:	4619      	mov	r1, r3
 800125e:	4620      	mov	r0, r4
 8001260:	f7ff fe24 	bl	8000eac <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	613b      	str	r3, [r7, #16]
	float y = alpha*filter->y_prev + (1.0f - alpha)*x;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	6939      	ldr	r1, [r7, #16]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd68 	bl	8000d44 <__aeabi_fmul>
 8001274:	4603      	mov	r3, r0
 8001276:	461c      	mov	r4, r3
 8001278:	6939      	ldr	r1, [r7, #16]
 800127a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800127e:	f7ff fc57 	bl	8000b30 <__aeabi_fsub>
 8001282:	4603      	mov	r3, r0
 8001284:	6879      	ldr	r1, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fd5c 	bl	8000d44 <__aeabi_fmul>
 800128c:	4603      	mov	r3, r0
 800128e:	4619      	mov	r1, r3
 8001290:	4620      	mov	r0, r4
 8001292:	f7ff fc4f 	bl	8000b34 <__addsf3>
 8001296:	4603      	mov	r3, r0
 8001298:	60fb      	str	r3, [r7, #12]
	filter->y_prev = y;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	605a      	str	r2, [r3, #4]
	return y;
 80012a0:	68fb      	ldr	r3, [r7, #12]
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	371c      	adds	r7, #28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	3ba3d70a 	.word	0x3ba3d70a

080012b0 <cal_angular_vel>:
struct LowPassFilter filter= {.Tf=0.01,.y_prev=0.0f}; //Tf=10ms
// limit=voltage_power_supply/2;
struct PIDController pid_controller = {.P=0.5,.I=0.1,.D=0.0,.output_ramp=100.0,.limit=6,.error_prev=0,.output_prev=0,.integral_prev=0};


float cal_angular_vel(float angle_now){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
    if (angle_prev < 0){
 80012b8:	4b33      	ldr	r3, [pc, #204]	; (8001388 <cal_angular_vel+0xd8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f04f 0100 	mov.w	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fedd 	bl	8001080 <__aeabi_fcmplt>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <cal_angular_vel+0x28>
    	angle_prev=angle_now;
 80012cc:	4a2e      	ldr	r2, [pc, #184]	; (8001388 <cal_angular_vel+0xd8>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6013      	str	r3, [r2, #0]
    	return 0;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	e047      	b.n	8001368 <cal_angular_vel+0xb8>
    }
    float delta_angle=angle_now -angle_prev;
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <cal_angular_vel+0xd8>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fc26 	bl	8000b30 <__aeabi_fsub>
 80012e4:	4603      	mov	r3, r0
 80012e6:	60fb      	str	r3, [r7, #12]
    if (delta_angle >= 1.6*M_PI){
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff f89d 	bl	8000428 <__aeabi_f2d>
 80012ee:	a320      	add	r3, pc, #128	; (adr r3, 8001370 <cal_angular_vel+0xc0>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7ff fb76 	bl	80009e4 <__aeabi_dcmpge>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00f      	beq.n	800131e <cal_angular_vel+0x6e>
    	delta_angle-=2*M_PI;
 80012fe:	68f8      	ldr	r0, [r7, #12]
 8001300:	f7ff f892 	bl	8000428 <__aeabi_f2d>
 8001304:	a31c      	add	r3, pc, #112	; (adr r3, 8001378 <cal_angular_vel+0xc8>)
 8001306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130a:	f7fe ff2d 	bl	8000168 <__aeabi_dsub>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fbb7 	bl	8000a88 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	60fb      	str	r3, [r7, #12]
    }
    if (delta_angle <= -1.6*M_PI){
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff f882 	bl	8000428 <__aeabi_f2d>
 8001324:	a316      	add	r3, pc, #88	; (adr r3, 8001380 <cal_angular_vel+0xd0>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff fb51 	bl	80009d0 <__aeabi_dcmple>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00f      	beq.n	8001354 <cal_angular_vel+0xa4>
        	delta_angle+=2*M_PI;
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff f877 	bl	8000428 <__aeabi_f2d>
 800133a:	a30f      	add	r3, pc, #60	; (adr r3, 8001378 <cal_angular_vel+0xc8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7fe ff14 	bl	800016c <__adddf3>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fb9c 	bl	8000a88 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
    }
    angle_prev=angle_now;
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <cal_angular_vel+0xd8>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
    return delta_angle/Ts;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <cal_angular_vel+0xdc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7ff fda3 	bl	8000eac <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0


}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	769cf0e0 	.word	0x769cf0e0
 8001374:	40141b2f 	.word	0x40141b2f
 8001378:	54442d18 	.word	0x54442d18
 800137c:	401921fb 	.word	0x401921fb
 8001380:	769cf0e0 	.word	0x769cf0e0
 8001384:	c0141b2f 	.word	0xc0141b2f
 8001388:	20000018 	.word	0x20000018
 800138c:	20000014 	.word	0x20000014

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001396:	f001 f89b 	bl	80024d0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139a:	f000 f8b7 	bl	800150c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800139e:	f000 fa4b 	bl	8001838 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013a2:	f000 f90d 	bl	80015c0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80013a6:	f009 fa3f 	bl	800a828 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80013aa:	f000 f941 	bl	8001630 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013ae:	f000 f9f7 	bl	80017a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b8:	4847      	ldr	r0, [pc, #284]	; (80014d8 <main+0x148>)
 80013ba:	f001 fba1 	bl	8002b00 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013be:	2100      	movs	r1, #0
 80013c0:	4846      	ldr	r0, [pc, #280]	; (80014dc <main+0x14c>)
 80013c2:	f004 fa3f 	bl	8005844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80013c6:	2104      	movs	r1, #4
 80013c8:	4844      	ldr	r0, [pc, #272]	; (80014dc <main+0x14c>)
 80013ca:	f004 fa3b 	bl	8005844 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80013ce:	2108      	movs	r1, #8
 80013d0:	4842      	ldr	r0, [pc, #264]	; (80014dc <main+0x14c>)
 80013d2:	f004 fa37 	bl	8005844 <HAL_TIM_PWM_Start>

  setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 80013d6:	4b42      	ldr	r3, [pc, #264]	; (80014e0 <main+0x150>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4619      	mov	r1, r3
 80013dc:	4841      	ldr	r0, [pc, #260]	; (80014e4 <main+0x154>)
 80013de:	f000 fbeb 	bl	8001bb8 <_electricalAngle>
 80013e2:	4602      	mov	r2, r0
 80013e4:	4b40      	ldr	r3, [pc, #256]	; (80014e8 <main+0x158>)
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	4840      	ldr	r0, [pc, #256]	; (80014ec <main+0x15c>)
 80013ec:	f000 fd2c 	bl	8001e48 <setPhaseVoltage>
  HAL_Delay(3000);
 80013f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80013f4:	f001 f8ce 	bl	8002594 <HAL_Delay>
  uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 80013f8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80013fc:	2201      	movs	r2, #1
 80013fe:	4936      	ldr	r1, [pc, #216]	; (80014d8 <main+0x148>)
 8001400:	483b      	ldr	r0, [pc, #236]	; (80014f0 <main+0x160>)
 8001402:	f7ff fea9 	bl	8001158 <read>
 8001406:	4603      	mov	r3, r0
 8001408:	80fb      	strh	r3, [r7, #6]
  zero_electric_angle=_electricalAngle(M_PI*read_raw/MAX_ANGLE_VALUE,pole_pairs);
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	4618      	mov	r0, r3
 800140e:	f7fe fff9 	bl	8000404 <__aeabi_i2d>
 8001412:	a32f      	add	r3, pc, #188	; (adr r3, 80014d0 <main+0x140>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff f85e 	bl	80004d8 <__aeabi_dmul>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	4b32      	ldr	r3, [pc, #200]	; (80014f4 <main+0x164>)
 800142a:	f7ff f97f 	bl	800072c <__aeabi_ddiv>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb27 	bl	8000a88 <__aeabi_d2f>
 800143a:	4602      	mov	r2, r0
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <main+0x150>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	4610      	mov	r0, r2
 8001444:	f000 fbb8 	bl	8001bb8 <_electricalAngle>
 8001448:	4603      	mov	r3, r0
 800144a:	4a2b      	ldr	r2, [pc, #172]	; (80014f8 <main+0x168>)
 800144c:	6013      	str	r3, [r2, #0]
  setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <main+0x150>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	4823      	ldr	r0, [pc, #140]	; (80014e4 <main+0x154>)
 8001456:	f000 fbaf 	bl	8001bb8 <_electricalAngle>
 800145a:	4602      	mov	r2, r0
 800145c:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <main+0x158>)
 800145e:	f04f 0100 	mov.w	r1, #0
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f000 fcef 	bl	8001e48 <setPhaseVoltage>
  sprintf(data, "zero_electric_angle: %i \n", (int) floor(zero_electric_angle/M_PI*180));
 800146a:	4b23      	ldr	r3, [pc, #140]	; (80014f8 <main+0x168>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7fe ffda 	bl	8000428 <__aeabi_f2d>
 8001474:	a316      	add	r3, pc, #88	; (adr r3, 80014d0 <main+0x140>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f957 	bl	800072c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	4b1c      	ldr	r3, [pc, #112]	; (80014fc <main+0x16c>)
 800148c:	f7ff f824 	bl	80004d8 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	f00a fb56 	bl	800bb48 <floor>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fac8 	bl	8000a38 <__aeabi_d2iz>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4914      	ldr	r1, [pc, #80]	; (8001500 <main+0x170>)
 80014ae:	4815      	ldr	r0, [pc, #84]	; (8001504 <main+0x174>)
 80014b0:	f009 fe88 	bl	800b1c4 <siprintf>
  CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <main+0x174>)
 80014b6:	f7fe fe4b 	bl	8000150 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	4810      	ldr	r0, [pc, #64]	; (8001504 <main+0x174>)
 80014c2:	f009 fa6f 	bl	800a9a4 <CDC_Transmit_FS>
  HAL_TIM_Base_Start_IT(&htim2);
 80014c6:	4810      	ldr	r0, [pc, #64]	; (8001508 <main+0x178>)
 80014c8:	f004 f912 	bl	80056f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014cc:	e7fe      	b.n	80014cc <main+0x13c>
 80014ce:	bf00      	nop
 80014d0:	54442d18 	.word	0x54442d18
 80014d4:	400921fb 	.word	0x400921fb
 80014d8:	40010c00 	.word	0x40010c00
 80014dc:	2000029c 	.word	0x2000029c
 80014e0:	20000010 	.word	0x20000010
 80014e4:	4096cbe4 	.word	0x4096cbe4
 80014e8:	40012c00 	.word	0x40012c00
 80014ec:	40400000 	.word	0x40400000
 80014f0:	20000244 	.word	0x20000244
 80014f4:	40c00000 	.word	0x40c00000
 80014f8:	20000360 	.word	0x20000360
 80014fc:	40668000 	.word	0x40668000
 8001500:	0800ce10 	.word	0x0800ce10
 8001504:	2000032c 	.word	0x2000032c
 8001508:	200002e4 	.word	0x200002e4

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b094      	sub	sp, #80	; 0x50
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f009 fe4a 	bl	800b1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	605a      	str	r2, [r3, #4]
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001540:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800154a:	2301      	movs	r3, #1
 800154c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800154e:	2302      	movs	r3, #2
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001556:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800155c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001562:	4618      	mov	r0, r3
 8001564:	f002 ffc0 	bl	80044e8 <HAL_RCC_OscConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800156e:	f000 fae5 	bl	8001b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001572:	230f      	movs	r3, #15
 8001574:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001576:	2302      	movs	r3, #2
 8001578:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800157e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001582:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2102      	movs	r1, #2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 fa2c 	bl	80049ec <HAL_RCC_ClockConfig>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800159a:	f000 facf 	bl	8001b3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800159e:	2310      	movs	r3, #16
 80015a0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fb85 	bl	8004cb8 <HAL_RCCEx_PeriphCLKConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80015b4:	f000 fac2 	bl	8001b3c <Error_Handler>
  }
}
 80015b8:	bf00      	nop
 80015ba:	3750      	adds	r7, #80	; 0x50
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_SPI1_Init+0x68>)
 80015c6:	4a19      	ldr	r2, [pc, #100]	; (800162c <MX_SPI1_Init+0x6c>)
 80015c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_SPI1_Init+0x68>)
 80015cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_SPI1_Init+0x68>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015d8:	4b13      	ldr	r3, [pc, #76]	; (8001628 <MX_SPI1_Init+0x68>)
 80015da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_SPI1_Init+0x68>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <MX_SPI1_Init+0x68>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ec:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_SPI1_Init+0x68>)
 80015ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MX_SPI1_Init+0x68>)
 80015f6:	2220      	movs	r2, #32
 80015f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015fa:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <MX_SPI1_Init+0x68>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <MX_SPI1_Init+0x68>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001606:	4b08      	ldr	r3, [pc, #32]	; (8001628 <MX_SPI1_Init+0x68>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_SPI1_Init+0x68>)
 800160e:	220a      	movs	r2, #10
 8001610:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_SPI1_Init+0x68>)
 8001614:	f003 fc06 	bl	8004e24 <HAL_SPI_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800161e:	f000 fa8d 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000244 	.word	0x20000244
 800162c:	40013000 	.word	0x40013000

08001630 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b096      	sub	sp, #88	; 0x58
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001636:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	605a      	str	r2, [r3, #4]
 8001640:	609a      	str	r2, [r3, #8]
 8001642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001644:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	611a      	str	r2, [r3, #16]
 800165e:	615a      	str	r2, [r3, #20]
 8001660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2220      	movs	r2, #32
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f009 fda3 	bl	800b1b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <MX_TIM1_Init+0x168>)
 8001670:	4a4a      	ldr	r2, [pc, #296]	; (800179c <MX_TIM1_Init+0x16c>)
 8001672:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001674:	4b48      	ldr	r3, [pc, #288]	; (8001798 <MX_TIM1_Init+0x168>)
 8001676:	2200      	movs	r2, #0
 8001678:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <MX_TIM1_Init+0x168>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001680:	4b45      	ldr	r3, [pc, #276]	; (8001798 <MX_TIM1_Init+0x168>)
 8001682:	f640 125f 	movw	r2, #2399	; 0x95f
 8001686:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <MX_TIM1_Init+0x168>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <MX_TIM1_Init+0x168>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <MX_TIM1_Init+0x168>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800169a:	483f      	ldr	r0, [pc, #252]	; (8001798 <MX_TIM1_Init+0x168>)
 800169c:	f003 ffd8 	bl	8005650 <HAL_TIM_Base_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016a6:	f000 fa49 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016b4:	4619      	mov	r1, r3
 80016b6:	4838      	ldr	r0, [pc, #224]	; (8001798 <MX_TIM1_Init+0x168>)
 80016b8:	f004 fb2c 	bl	8005d14 <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80016c2:	f000 fa3b 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016c6:	4834      	ldr	r0, [pc, #208]	; (8001798 <MX_TIM1_Init+0x168>)
 80016c8:	f004 f864 	bl	8005794 <HAL_TIM_PWM_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80016d2:	f000 fa33 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016de:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016e2:	4619      	mov	r1, r3
 80016e4:	482c      	ldr	r0, [pc, #176]	; (8001798 <MX_TIM1_Init+0x168>)
 80016e6:	f004 fea1 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016f0:	f000 fa24 	bl	8001b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f4:	2360      	movs	r3, #96	; 0x60
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001708:	2300      	movs	r3, #0
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001714:	2200      	movs	r2, #0
 8001716:	4619      	mov	r1, r3
 8001718:	481f      	ldr	r0, [pc, #124]	; (8001798 <MX_TIM1_Init+0x168>)
 800171a:	f004 fa3d 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001724:	f000 fa0a 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172c:	2204      	movs	r2, #4
 800172e:	4619      	mov	r1, r3
 8001730:	4819      	ldr	r0, [pc, #100]	; (8001798 <MX_TIM1_Init+0x168>)
 8001732:	f004 fa31 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800173c:	f000 f9fe 	bl	8001b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2208      	movs	r2, #8
 8001746:	4619      	mov	r1, r3
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <MX_TIM1_Init+0x168>)
 800174a:	f004 fa25 	bl	8005b98 <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001754:	f000 f9f2 	bl	8001b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001760:	2300      	movs	r3, #0
 8001762:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800176c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001770:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	; (8001798 <MX_TIM1_Init+0x168>)
 800177c:	f004 feb4 	bl	80064e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001786:	f000 f9d9 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800178a:	4803      	ldr	r0, [pc, #12]	; (8001798 <MX_TIM1_Init+0x168>)
 800178c:	f000 fdce 	bl	800232c <HAL_TIM_MspPostInit>

}
 8001790:	bf00      	nop
 8001792:	3758      	adds	r7, #88	; 0x58
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	2000029c 	.word	0x2000029c
 800179c:	40012c00 	.word	0x40012c00

080017a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017a6:	f107 0308 	add.w	r3, r7, #8
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b4:	463b      	mov	r3, r7
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017bc:	4b1d      	ldr	r3, [pc, #116]	; (8001834 <MX_TIM2_Init+0x94>)
 80017be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_TIM2_Init+0x94>)
 80017c6:	2259      	movs	r2, #89	; 0x59
 80017c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_TIM2_Init+0x94>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 80017d0:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_TIM2_Init+0x94>)
 80017d2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80017d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_TIM2_Init+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_TIM2_Init+0x94>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_TIM2_Init+0x94>)
 80017e6:	f003 ff33 	bl	8005650 <HAL_TIM_Base_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017f0:	f000 f9a4 	bl	8001b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_TIM2_Init+0x94>)
 8001802:	f004 fa87 	bl	8005d14 <HAL_TIM_ConfigClockSource>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800180c:	f000 f996 	bl	8001b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_TIM2_Init+0x94>)
 800181e:	f004 fe05 	bl	800642c <HAL_TIMEx_MasterConfigSynchronization>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001828:	f000 f988 	bl	8001b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	200002e4 	.word	0x200002e4

08001838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183e:	f107 0310 	add.w	r3, r7, #16
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_GPIO_Init+0xf8>)
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	4a37      	ldr	r2, [pc, #220]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6193      	str	r3, [r2, #24]
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <MX_GPIO_Init+0xf8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0310 	and.w	r3, r3, #16
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <MX_GPIO_Init+0xf8>)
 800186a:	f043 0320 	orr.w	r3, r3, #32
 800186e:	6193      	str	r3, [r2, #24]
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	f003 0320 	and.w	r3, r3, #32
 8001878:	60bb      	str	r3, [r7, #8]
 800187a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187c:	4b2c      	ldr	r3, [pc, #176]	; (8001930 <MX_GPIO_Init+0xf8>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	4a2b      	ldr	r2, [pc, #172]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	6193      	str	r3, [r2, #24]
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <MX_GPIO_Init+0xf8>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <MX_GPIO_Init+0xf8>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <MX_GPIO_Init+0xf8>)
 800189a:	f043 0308 	orr.w	r3, r3, #8
 800189e:	6193      	str	r3, [r2, #24]
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_GPIO_Init+0xf8>)
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	603b      	str	r3, [r7, #0]
 80018aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018ac:	2200      	movs	r2, #0
 80018ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b2:	4820      	ldr	r0, [pc, #128]	; (8001934 <MX_GPIO_Init+0xfc>)
 80018b4:	f001 f924 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 80018b8:	2201      	movs	r2, #1
 80018ba:	2101      	movs	r1, #1
 80018bc:	481e      	ldr	r0, [pc, #120]	; (8001938 <MX_GPIO_Init+0x100>)
 80018be:	f001 f91f 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c8:	481b      	ldr	r0, [pc, #108]	; (8001938 <MX_GPIO_Init+0x100>)
 80018ca:	f001 f919 	bl	8002b00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2302      	movs	r3, #2
 80018de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 0310 	add.w	r3, r7, #16
 80018e4:	4619      	mov	r1, r3
 80018e6:	4813      	ldr	r0, [pc, #76]	; (8001934 <MX_GPIO_Init+0xfc>)
 80018e8:	f000 ff86 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f0:	2301      	movs	r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f8:	2303      	movs	r3, #3
 80018fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	; (8001938 <MX_GPIO_Init+0x100>)
 8001904:	f000 ff78 	bl	80027f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001908:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2302      	movs	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 800191a:	f107 0310 	add.w	r3, r7, #16
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <MX_GPIO_Init+0x100>)
 8001922:	f000 ff69 	bl	80027f8 <HAL_GPIO_Init>

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000
 8001934:	40011000 	.word	0x40011000
 8001938:	40010c00 	.word	0x40010c00
 800193c:	00000000 	.word	0x00000000

08001940 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a6d      	ldr	r2, [pc, #436]	; (8001b00 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	f040 80ce 	bne.w	8001aee <HAL_TIM_PeriodElapsedCallback+0x1ae>
  {



    index1+=1;
 8001952:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800195a:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 800195c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001960:	2201      	movs	r2, #1
 8001962:	4969      	ldr	r1, [pc, #420]	; (8001b08 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001964:	4869      	ldr	r0, [pc, #420]	; (8001b0c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001966:	f7ff fbf7 	bl	8001158 <read>
 800196a:	4603      	mov	r3, r0
 800196c:	83fb      	strh	r3, [r7, #30]
    float angle_now=(float)read_raw /(float)MAX_ANGLE_VALUE *2*M_PI*dir;
 800196e:	8bfb      	ldrh	r3, [r7, #30]
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff f98f 	bl	8000c94 <__aeabi_ui2f>
 8001976:	4603      	mov	r3, r0
 8001978:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fa95 	bl	8000eac <__aeabi_fdiv>
 8001982:	4603      	mov	r3, r0
 8001984:	4619      	mov	r1, r3
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f8d4 	bl	8000b34 <__addsf3>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd4a 	bl	8000428 <__aeabi_f2d>
 8001994:	a358      	add	r3, pc, #352	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	f7fe fd9d 	bl	80004d8 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	461d      	mov	r5, r3
 80019a6:	4b5a      	ldr	r3, [pc, #360]	; (8001b10 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fd2a 	bl	8000404 <__aeabi_i2d>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fd8e 	bl	80004d8 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f860 	bl	8000a88 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	61bb      	str	r3, [r7, #24]
//    sprintf(data, "angle_error : %i \n", (int) floor(angle_error/M_PI*180));
//       CDC_Transmit_FS((uint8_t*) data, strlen(data));
    //    open loop speed control
//        velocityOpenloop(5,5.5,TIM1);
//    closed loop speed control
    float angular_vel=cal_angular_vel(angle_now);
 80019cc:	69b8      	ldr	r0, [r7, #24]
 80019ce:	f7ff fc6f 	bl	80012b0 <cal_angular_vel>
 80019d2:	6178      	str	r0, [r7, #20]
    float filtered_vel=LowPassFilter_operator(angular_vel,&filter);
 80019d4:	494f      	ldr	r1, [pc, #316]	; (8001b14 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f7ff fc30 	bl	800123c <LowPassFilter_operator>
 80019dc:	6138      	str	r0, [r7, #16]
    float contorller_out=PID_operator(target_vel-filtered_vel,&pid_controller);
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6939      	ldr	r1, [r7, #16]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f8a3 	bl	8000b30 <__aeabi_fsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	494b      	ldr	r1, [pc, #300]	; (8001b1c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f000 fb12 	bl	8002018 <PID_operator>
 80019f4:	60f8      	str	r0, [r7, #12]
    setPhaseVoltage(_constrain(contorller_out,-voltage_power_supply/2,voltage_power_supply/2),  0, _electricalAngle(angle_now, pole_pairs),TIM1);
 80019f6:	4b4a      	ldr	r3, [pc, #296]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80019fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fa52 	bl	8000eac <__aeabi_fdiv>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	68f8      	ldr	r0, [r7, #12]
 8001a0e:	f7ff fb37 	bl	8001080 <__aeabi_fcmplt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001a20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fa41 	bl	8000eac <__aeabi_fdiv>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	e019      	b.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x124>
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fa37 	bl	8000eac <__aeabi_fdiv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	4619      	mov	r1, r3
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff fb3a 	bl	80010bc <__aeabi_fcmpgt>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d009      	beq.n	8001a62 <HAL_TIM_PeriodElapsedCallback+0x122>
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff fa28 	bl	8000eac <__aeabi_fdiv>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461c      	mov	r4, r3
 8001a60:	e000      	b.n	8001a64 <HAL_TIM_PeriodElapsedCallback+0x124>
 8001a62:	68fc      	ldr	r4, [r7, #12]
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	69b8      	ldr	r0, [r7, #24]
 8001a6c:	f000 f8a4 	bl	8001bb8 <_electricalAngle>
 8001a70:	4602      	mov	r2, r0
 8001a72:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001a74:	f04f 0100 	mov.w	r1, #0
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f000 f9e5 	bl	8001e48 <setPhaseVoltage>
//    sprintf(data, "angle_now : %i \t angle_prev : %i \n", (int) floor(angle_now/M_PI*180), (int) floor(angle_prev/M_PI*180));
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
    sprintf(data, "angular_vel : %i \n", (int) floor(angular_vel/M_PI*180));
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7fe fcd2 	bl	8000428 <__aeabi_f2d>
 8001a84:	a31c      	add	r3, pc, #112	; (adr r3, 8001af8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fe4f 	bl	800072c <__aeabi_ddiv>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001a9c:	f7fe fd1c 	bl	80004d8 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f00a f84e 	bl	800bb48 <floor>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7fe ffc0 	bl	8000a38 <__aeabi_d2iz>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	461a      	mov	r2, r3
 8001abc:	491c      	ldr	r1, [pc, #112]	; (8001b30 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ac0:	f009 fb80 	bl	800b1c4 <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001ac4:	481b      	ldr	r0, [pc, #108]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ac6:	f7fe fb43 	bl	8000150 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4818      	ldr	r0, [pc, #96]	; (8001b34 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001ad2:	f008 ff67 	bl	800a9a4 <CDC_Transmit_FS>





    if (index1 == 200){
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2bc8      	cmp	r3, #200	; 0xc8
 8001adc:	d107      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x1ae>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8001ae4:	f001 f824 	bl	8002b30 <HAL_GPIO_TogglePin>
    	index1=0;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	54442d18 	.word	0x54442d18
 8001afc:	400921fb 	.word	0x400921fb
 8001b00:	200002e4 	.word	0x200002e4
 8001b04:	20000364 	.word	0x20000364
 8001b08:	40010c00 	.word	0x40010c00
 8001b0c:	20000244 	.word	0x20000244
 8001b10:	2000000c 	.word	0x2000000c
 8001b14:	20000020 	.word	0x20000020
 8001b18:	2000001c 	.word	0x2000001c
 8001b1c:	20000028 	.word	0x20000028
 8001b20:	20000004 	.word	0x20000004
 8001b24:	20000010 	.word	0x20000010
 8001b28:	40012c00 	.word	0x40012c00
 8001b2c:	40668000 	.word	0x40668000
 8001b30:	0800ce2c 	.word	0x0800ce2c
 8001b34:	2000032c 	.word	0x2000032c
 8001b38:	40011000 	.word	0x40011000

08001b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr

08001b48 <_normalizeAngle>:
extern float shaft_angle;
extern int dir;
extern float voltage_limit;
extern float voltage_power_supply;
extern int period;
float _normalizeAngle(float angle){
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fc69 	bl	8000428 <__aeabi_f2d>
 8001b56:	a316      	add	r3, pc, #88	; (adr r3, 8001bb0 <_normalizeAngle+0x68>)
 8001b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5c:	f00a f8e0 	bl	800bd20 <fmod>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff8e 	bl	8000a88 <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8001b70:	f04f 0100 	mov.w	r1, #0
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f7ff fa97 	bl	80010a8 <__aeabi_fcmpge>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <_normalizeAngle+0x3c>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	e00e      	b.n	8001ba2 <_normalizeAngle+0x5a>
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7fe fc4f 	bl	8000428 <__aeabi_f2d>
 8001b8a:	a309      	add	r3, pc, #36	; (adr r3, 8001bb0 <_normalizeAngle+0x68>)
 8001b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b90:	f7fe faec 	bl	800016c <__adddf3>
 8001b94:	4602      	mov	r2, r0
 8001b96:	460b      	mov	r3, r1
 8001b98:	4610      	mov	r0, r2
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff74 	bl	8000a88 <__aeabi_d2f>
 8001ba0:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	f3af 8000 	nop.w
 8001bb0:	54442d18 	.word	0x54442d18
 8001bb4:	401921fb 	.word	0x401921fb

08001bb8 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  return _normalizeAngle(((float)(dir * pole_pairs)*shaft_angle)-zero_electric_angle);
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	; (8001c00 <_electricalAngle+0x48>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	fb02 f303 	mul.w	r3, r2, r3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f865 	bl	8000c9c <__aeabi_i2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f8b4 	bl	8000d44 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_electricalAngle+0x4c>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7fe ffa2 	bl	8000b30 <__aeabi_fsub>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ffaa 	bl	8001b48 <_normalizeAngle>
 8001bf4:	4603      	mov	r3, r0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000000c 	.word	0x2000000c
 8001c04:	20000360 	.word	0x20000360

08001c08 <setPwm>:





void setPwm(float Ua, float Ub, float Uc, TIM_TypeDef * TIM_BASE) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b088      	sub	sp, #32
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	60b9      	str	r1, [r7, #8]
 8001c12:	607a      	str	r2, [r7, #4]
 8001c14:	603b      	str	r3, [r7, #0]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8001c16:	f04f 0100 	mov.w	r1, #0
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fa30 	bl	8001080 <__aeabi_fcmplt>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <setPwm+0x24>
 8001c26:	f04f 0300 	mov.w	r3, #0
 8001c2a:	e00c      	b.n	8001c46 <setPwm+0x3e>
 8001c2c:	4b83      	ldr	r3, [pc, #524]	; (8001e3c <setPwm+0x234>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff fa42 	bl	80010bc <__aeabi_fcmpgt>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <setPwm+0x3c>
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <setPwm+0x234>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	e000      	b.n	8001c46 <setPwm+0x3e>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	68b8      	ldr	r0, [r7, #8]
 8001c4e:	f7ff fa17 	bl	8001080 <__aeabi_fcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <setPwm+0x56>
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e00c      	b.n	8001c78 <setPwm+0x70>
 8001c5e:	4b77      	ldr	r3, [pc, #476]	; (8001e3c <setPwm+0x234>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4619      	mov	r1, r3
 8001c64:	68b8      	ldr	r0, [r7, #8]
 8001c66:	f7ff fa29 	bl	80010bc <__aeabi_fcmpgt>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <setPwm+0x6e>
 8001c70:	4b72      	ldr	r3, [pc, #456]	; (8001e3c <setPwm+0x234>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	e000      	b.n	8001c78 <setPwm+0x70>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8001c7a:	f04f 0100 	mov.w	r1, #0
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff f9fe 	bl	8001080 <__aeabi_fcmplt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <setPwm+0x88>
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e00c      	b.n	8001caa <setPwm+0xa2>
 8001c90:	4b6a      	ldr	r3, [pc, #424]	; (8001e3c <setPwm+0x234>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4619      	mov	r1, r3
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f7ff fa10 	bl	80010bc <__aeabi_fcmpgt>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <setPwm+0xa0>
 8001ca2:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <setPwm+0x234>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	e000      	b.n	8001caa <setPwm+0xa2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	float dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8001cac:	4b64      	ldr	r3, [pc, #400]	; (8001e40 <setPwm+0x238>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff f8fa 	bl	8000eac <__aeabi_fdiv>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f04f 0100 	mov.w	r1, #0
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f9de 	bl	8001080 <__aeabi_fcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <setPwm+0xc8>
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e018      	b.n	8001d02 <setPwm+0xfa>
 8001cd0:	4b5b      	ldr	r3, [pc, #364]	; (8001e40 <setPwm+0x238>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f7ff f8e8 	bl	8000eac <__aeabi_fdiv>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f9ea 	bl	80010bc <__aeabi_fcmpgt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <setPwm+0xec>
 8001cee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cf2:	e006      	b.n	8001d02 <setPwm+0xfa>
 8001cf4:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <setPwm+0x238>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f7ff f8d6 	bl	8000eac <__aeabi_fdiv>
 8001d00:	4603      	mov	r3, r0
 8001d02:	61fb      	str	r3, [r7, #28]
	float dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8001d04:	4b4e      	ldr	r3, [pc, #312]	; (8001e40 <setPwm+0x238>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	68b8      	ldr	r0, [r7, #8]
 8001d0c:	f7ff f8ce 	bl	8000eac <__aeabi_fdiv>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff f9b2 	bl	8001080 <__aeabi_fcmplt>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <setPwm+0x120>
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e018      	b.n	8001d5a <setPwm+0x152>
 8001d28:	4b45      	ldr	r3, [pc, #276]	; (8001e40 <setPwm+0x238>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	68b8      	ldr	r0, [r7, #8]
 8001d30:	f7ff f8bc 	bl	8000eac <__aeabi_fdiv>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f9be 	bl	80010bc <__aeabi_fcmpgt>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <setPwm+0x144>
 8001d46:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d4a:	e006      	b.n	8001d5a <setPwm+0x152>
 8001d4c:	4b3c      	ldr	r3, [pc, #240]	; (8001e40 <setPwm+0x238>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	68b8      	ldr	r0, [r7, #8]
 8001d54:	f7ff f8aa 	bl	8000eac <__aeabi_fdiv>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	61bb      	str	r3, [r7, #24]
	float dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001d5c:	4b38      	ldr	r3, [pc, #224]	; (8001e40 <setPwm+0x238>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff f8a2 	bl	8000eac <__aeabi_fdiv>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f04f 0100 	mov.w	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff f986 	bl	8001080 <__aeabi_fcmplt>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <setPwm+0x178>
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e018      	b.n	8001db2 <setPwm+0x1aa>
 8001d80:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <setPwm+0x238>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4619      	mov	r1, r3
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff f890 	bl	8000eac <__aeabi_fdiv>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff f992 	bl	80010bc <__aeabi_fcmpgt>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <setPwm+0x19c>
 8001d9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001da2:	e006      	b.n	8001db2 <setPwm+0x1aa>
 8001da4:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <setPwm+0x238>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff f87e 	bl	8000eac <__aeabi_fdiv>
 8001db0:	4603      	mov	r3, r0
 8001db2:	617b      	str	r3, [r7, #20]

	//写入PWM到PWM 0 1 2 通道
	TIM_BASE->CCR1 = (uint32_t) roundf(dc_a*period);
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <setPwm+0x23c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe ff6f 	bl	8000c9c <__aeabi_i2f>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	69f9      	ldr	r1, [r7, #28]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe ffbe 	bl	8000d44 <__aeabi_fmul>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f009 ff82 	bl	800bcd4 <roundf>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f97c 	bl	80010d0 <__aeabi_f2uiz>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_BASE->CCR2 = (uint32_t) roundf(dc_b*period);
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <setPwm+0x23c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff5a 	bl	8000c9c <__aeabi_i2f>
 8001de8:	4603      	mov	r3, r0
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe ffa9 	bl	8000d44 <__aeabi_fmul>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f009 ff6d 	bl	800bcd4 <roundf>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f967 	bl	80010d0 <__aeabi_f2uiz>
 8001e02:	4602      	mov	r2, r0
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_BASE->CCR3 = (uint32_t) roundf(dc_c*period);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <setPwm+0x23c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe ff45 	bl	8000c9c <__aeabi_i2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	6979      	ldr	r1, [r7, #20]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe ff94 	bl	8000d44 <__aeabi_fmul>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f009 ff58 	bl	800bcd4 <roundf>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f952 	bl	80010d0 <__aeabi_f2uiz>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001e32:	bf00      	nop
 8001e34:	3720      	adds	r7, #32
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	20000004 	.word	0x20000004
 8001e44:	20000008 	.word	0x20000008

08001e48 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el, TIM_TypeDef * TIM_BASE) {
 8001e48:	b5b0      	push	{r4, r5, r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 8001e56:	4b6e      	ldr	r3, [pc, #440]	; (8002010 <setPhaseVoltage+0x1c8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fe69 	bl	8000b34 <__addsf3>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fe6f 	bl	8001b48 <_normalizeAngle>
 8001e6a:	6078      	str	r0, [r7, #4]
  // 帕克逆变换
  float Ualpha =  -Uq*sin(angle_el);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fad8 	bl	8000428 <__aeabi_f2d>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7fe fad3 	bl	8000428 <__aeabi_f2d>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f009 fedd 	bl	800bc48 <sin>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	f7fe fb1f 	bl	80004d8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fdf1 	bl	8000a88 <__aeabi_d2f>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
  float Ubeta =   Uq*cos(angle_el);
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f7fe fabc 	bl	8000428 <__aeabi_f2d>
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	460d      	mov	r5, r1
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7fe fab7 	bl	8000428 <__aeabi_f2d>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f009 fdf9 	bl	800bab8 <cos>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4620      	mov	r0, r4
 8001ecc:	4629      	mov	r1, r5
 8001ece:	f7fe fb03 	bl	80004d8 <__aeabi_dmul>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fdd5 	bl	8000a88 <__aeabi_d2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	623b      	str	r3, [r7, #32]

  // 克拉克逆变换
  float Ua = Ualpha + voltage_power_supply/2;
 8001ee2:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <setPhaseVoltage+0x1cc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe ffde 	bl	8000eac <__aeabi_fdiv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ef6:	f7fe fe1d 	bl	8000b34 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	61fb      	str	r3, [r7, #28]
  float Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 8001efe:	6a38      	ldr	r0, [r7, #32]
 8001f00:	f7fe fa92 	bl	8000428 <__aeabi_f2d>
 8001f04:	a340      	add	r3, pc, #256	; (adr r3, 8002008 <setPhaseVoltage+0x1c0>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fae5 	bl	80004d8 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4614      	mov	r4, r2
 8001f14:	461d      	mov	r5, r3
 8001f16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f18:	f7fe fa86 	bl	8000428 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4620      	mov	r0, r4
 8001f22:	4629      	mov	r1, r5
 8001f24:	f7fe f920 	bl	8000168 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 0200 	mov.w	r2, #0
 8001f34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f38:	f7fe fbf8 	bl	800072c <__aeabi_ddiv>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4b33      	ldr	r3, [pc, #204]	; (8002014 <setPhaseVoltage+0x1cc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe ffad 	bl	8000eac <__aeabi_fdiv>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fa67 	bl	8000428 <__aeabi_f2d>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe f903 	bl	800016c <__adddf3>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fd8b 	bl	8000a88 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	61bb      	str	r3, [r7, #24]
  float Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fa53 	bl	8000428 <__aeabi_f2d>
 8001f82:	4604      	mov	r4, r0
 8001f84:	460d      	mov	r5, r1
 8001f86:	6a38      	ldr	r0, [r7, #32]
 8001f88:	f7fe fa4e 	bl	8000428 <__aeabi_f2d>
 8001f8c:	a31e      	add	r3, pc, #120	; (adr r3, 8002008 <setPhaseVoltage+0x1c0>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe faa1 	bl	80004d8 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	f7fe f8e3 	bl	8000168 <__aeabi_dsub>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fb2:	f7fe fbbb 	bl	800072c <__aeabi_ddiv>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4614      	mov	r4, r2
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <setPhaseVoltage+0x1cc>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe ff70 	bl	8000eac <__aeabi_fdiv>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fa2a 	bl	8000428 <__aeabi_f2d>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	4629      	mov	r1, r5
 8001fdc:	f7fe f8c6 	bl	800016c <__adddf3>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fd4e 	bl	8000a88 <__aeabi_d2f>
 8001fec:	4603      	mov	r3, r0
 8001fee:	617b      	str	r3, [r7, #20]
  setPwm(Ua,Ub,Uc,TIM_BASE);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	69b9      	ldr	r1, [r7, #24]
 8001ff6:	69f8      	ldr	r0, [r7, #28]
 8001ff8:	f7ff fe06 	bl	8001c08 <setPwm>
}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bdb0      	pop	{r4, r5, r7, pc}
 8002004:	f3af 8000 	nop.w
 8002008:	e8584caa 	.word	0xe8584caa
 800200c:	3ffbb67a 	.word	0x3ffbb67a
 8002010:	20000360 	.word	0x20000360
 8002014:	20000004 	.word	0x20000004

08002018 <PID_operator>:
 *      Author: hht
 */

#include "pid.h"
#include "motor_control.h"
float PID_operator(float error, struct PIDController* pid){
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b088      	sub	sp, #32
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
	float Ts = 5E-3f;
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <PID_operator+0x1c8>)
 8002024:	61bb      	str	r3, [r7, #24]
	// P环

	float proportional = pid->P * error;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fe89 	bl	8000d44 <__aeabi_fmul>
 8002032:	4603      	mov	r3, r0
 8002034:	617b      	str	r3, [r7, #20]
	// Tustin 散点积分（I环）
	float integral = pid->integral_prev + pid->I*Ts*0.5f*(error + pid->error_prev);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	69dc      	ldr	r4, [r3, #28]
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	69b9      	ldr	r1, [r7, #24]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fe7f 	bl	8000d44 <__aeabi_fmul>
 8002046:	4603      	mov	r3, r0
 8002048:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fe79 	bl	8000d44 <__aeabi_fmul>
 8002052:	4603      	mov	r3, r0
 8002054:	461d      	mov	r5, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fd69 	bl	8000b34 <__addsf3>
 8002062:	4603      	mov	r3, r0
 8002064:	4619      	mov	r1, r3
 8002066:	4628      	mov	r0, r5
 8002068:	f7fe fe6c 	bl	8000d44 <__aeabi_fmul>
 800206c:	4603      	mov	r3, r0
 800206e:	4619      	mov	r1, r3
 8002070:	4620      	mov	r0, r4
 8002072:	f7fe fd5f 	bl	8000b34 <__addsf3>
 8002076:	4603      	mov	r3, r0
 8002078:	613b      	str	r3, [r7, #16]
	integral = _constrain(integral, -pid->limit, pid->limit);
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002082:	4619      	mov	r1, r3
 8002084:	6938      	ldr	r0, [r7, #16]
 8002086:	f7fe fffb 	bl	8001080 <__aeabi_fcmplt>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <PID_operator+0x82>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002098:	e00c      	b.n	80020b4 <PID_operator+0x9c>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	4619      	mov	r1, r3
 80020a0:	6938      	ldr	r0, [r7, #16]
 80020a2:	f7ff f80b 	bl	80010bc <__aeabi_fcmpgt>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <PID_operator+0x9a>
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	e000      	b.n	80020b4 <PID_operator+0x9c>
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	613b      	str	r3, [r7, #16]
	// D环（微分环节）
	float derivative = pid->D*(error - pid->error_prev)/Ts;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689c      	ldr	r4, [r3, #8]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	4619      	mov	r1, r3
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fd35 	bl	8000b30 <__aeabi_fsub>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4619      	mov	r1, r3
 80020ca:	4620      	mov	r0, r4
 80020cc:	f7fe fe3a 	bl	8000d44 <__aeabi_fmul>
 80020d0:	4603      	mov	r3, r0
 80020d2:	69b9      	ldr	r1, [r7, #24]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fee9 	bl	8000eac <__aeabi_fdiv>
 80020da:	4603      	mov	r3, r0
 80020dc:	60fb      	str	r3, [r7, #12]

	// 将P,I,D三环的计算值加起来
	float output = proportional + integral + derivative;
 80020de:	6939      	ldr	r1, [r7, #16]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7fe fd27 	bl	8000b34 <__addsf3>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4619      	mov	r1, r3
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fd22 	bl	8000b34 <__addsf3>
 80020f0:	4603      	mov	r3, r0
 80020f2:	61fb      	str	r3, [r7, #28]
	output = _constrain(output, -pid->limit, pid->limit);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80020fc:	4619      	mov	r1, r3
 80020fe:	69f8      	ldr	r0, [r7, #28]
 8002100:	f7fe ffbe 	bl	8001080 <__aeabi_fcmplt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d004      	beq.n	8002114 <PID_operator+0xfc>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002112:	e00c      	b.n	800212e <PID_operator+0x116>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	4619      	mov	r1, r3
 800211a:	69f8      	ldr	r0, [r7, #28]
 800211c:	f7fe ffce 	bl	80010bc <__aeabi_fcmpgt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <PID_operator+0x114>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	e000      	b.n	800212e <PID_operator+0x116>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	61fb      	str	r3, [r7, #28]

	if(pid->output_ramp > 0){
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f04f 0100 	mov.w	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe ffbf 	bl	80010bc <__aeabi_fcmpgt>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d03f      	beq.n	80021c4 <PID_operator+0x1ac>
		// 对PID的变化速率进行限制
		float output_rate = (output - pid->output_prev)/Ts;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4619      	mov	r1, r3
 800214a:	69f8      	ldr	r0, [r7, #28]
 800214c:	f7fe fcf0 	bl	8000b30 <__aeabi_fsub>
 8002150:	4603      	mov	r3, r0
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe fea9 	bl	8000eac <__aeabi_fdiv>
 800215a:	4603      	mov	r3, r0
 800215c:	60bb      	str	r3, [r7, #8]
		if (output_rate > pid->output_ramp)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	4619      	mov	r1, r3
 8002164:	68b8      	ldr	r0, [r7, #8]
 8002166:	f7fe ffa9 	bl	80010bc <__aeabi_fcmpgt>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00f      	beq.n	8002190 <PID_operator+0x178>
			output = pid->output_prev + pid->output_ramp*Ts;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	699c      	ldr	r4, [r3, #24]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	69b9      	ldr	r1, [r7, #24]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fde2 	bl	8000d44 <__aeabi_fmul>
 8002180:	4603      	mov	r3, r0
 8002182:	4619      	mov	r1, r3
 8002184:	4620      	mov	r0, r4
 8002186:	f7fe fcd5 	bl	8000b34 <__addsf3>
 800218a:	4603      	mov	r3, r0
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e019      	b.n	80021c4 <PID_operator+0x1ac>
		else if (output_rate < -pid->output_ramp)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002198:	4619      	mov	r1, r3
 800219a:	68b8      	ldr	r0, [r7, #8]
 800219c:	f7fe ff70 	bl	8001080 <__aeabi_fcmplt>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00e      	beq.n	80021c4 <PID_operator+0x1ac>
			output = pid->output_prev - pid->output_ramp*Ts;
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	699c      	ldr	r4, [r3, #24]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	69b9      	ldr	r1, [r7, #24]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fe fdc7 	bl	8000d44 <__aeabi_fmul>
 80021b6:	4603      	mov	r3, r0
 80021b8:	4619      	mov	r1, r3
 80021ba:	4620      	mov	r0, r4
 80021bc:	f7fe fcb8 	bl	8000b30 <__aeabi_fsub>
 80021c0:	4603      	mov	r3, r0
 80021c2:	61fb      	str	r3, [r7, #28]
	}
	// 保存值（为了下一次循环）
	pid->integral_prev = integral;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	61da      	str	r2, [r3, #28]
	pid->output_prev = output;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	619a      	str	r2, [r3, #24]
	pid->error_prev = error;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	615a      	str	r2, [r3, #20]
//	pid->timestamp_prev = timestamp_now;
	return output;
 80021d6:	69fb      	ldr	r3, [r7, #28]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bdb0      	pop	{r4, r5, r7, pc}
 80021e0:	3ba3d70a 	.word	0x3ba3d70a

080021e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <HAL_MspInit+0x40>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	4a0d      	ldr	r2, [pc, #52]	; (8002224 <HAL_MspInit+0x40>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	6193      	str	r3, [r2, #24]
 80021f6:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_MspInit+0x40>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b08      	ldr	r3, [pc, #32]	; (8002224 <HAL_MspInit+0x40>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	4a07      	ldr	r2, [pc, #28]	; (8002224 <HAL_MspInit+0x40>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	61d3      	str	r3, [r2, #28]
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_MspInit+0x40>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0310 	add.w	r3, r7, #16
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <HAL_SPI_MspInit+0x88>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d12f      	bne.n	80022a8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002248:	4b1a      	ldr	r3, [pc, #104]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	4a19      	ldr	r2, [pc, #100]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800224e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002252:	6193      	str	r3, [r2, #24]
 8002254:	4b17      	ldr	r3, [pc, #92]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 8002266:	f043 0304 	orr.w	r3, r3, #4
 800226a:	6193      	str	r3, [r2, #24]
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <HAL_SPI_MspInit+0x8c>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002278:	23a0      	movs	r3, #160	; 0xa0
 800227a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002280:	2303      	movs	r3, #3
 8002282:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	4619      	mov	r1, r3
 800228a:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_SPI_MspInit+0x90>)
 800228c:	f000 fab4 	bl	80027f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002290:	2340      	movs	r3, #64	; 0x40
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_SPI_MspInit+0x90>)
 80022a4:	f000 faa8 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013000 	.word	0x40013000
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010800 	.word	0x40010800

080022bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <HAL_TIM_Base_MspInit+0x68>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10c      	bne.n	80022e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022ce:	4b16      	ldr	r3, [pc, #88]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	4a15      	ldr	r2, [pc, #84]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022d8:	6193      	str	r3, [r2, #24]
 80022da:	4b13      	ldr	r3, [pc, #76]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022e6:	e018      	b.n	800231a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d113      	bne.n	800231a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022f2:	4b0d      	ldr	r3, [pc, #52]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_TIM_Base_MspInit+0x6c>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	2100      	movs	r1, #0
 800230e:	201c      	movs	r0, #28
 8002310:	f000 fa3b 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002314:	201c      	movs	r0, #28
 8002316:	f000 fa54 	bl	80027c2 <HAL_NVIC_EnableIRQ>
}
 800231a:	bf00      	nop
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40012c00 	.word	0x40012c00
 8002328:	40021000 	.word	0x40021000

0800232c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_TIM_MspPostInit+0x5c>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d118      	bne.n	800237e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <HAL_TIM_MspPostInit+0x60>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a0e      	ldr	r2, [pc, #56]	; (800238c <HAL_TIM_MspPostInit+0x60>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <HAL_TIM_MspPostInit+0x60>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002364:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236e:	2302      	movs	r3, #2
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_MspPostInit+0x64>)
 800237a:	f000 fa3d 	bl	80027f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800237e:	bf00      	nop
 8002380:	3720      	adds	r7, #32
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40012c00 	.word	0x40012c00
 800238c:	40021000 	.word	0x40021000
 8002390:	40010800 	.word	0x40010800

08002394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <NMI_Handler+0x4>

0800239a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <HardFault_Handler+0x4>

080023a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <MemManage_Handler+0x4>

080023a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023aa:	e7fe      	b.n	80023aa <BusFault_Handler+0x4>

080023ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023b0:	e7fe      	b.n	80023b0 <UsageFault_Handler+0x4>

080023b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bc80      	pop	{r7}
 80023bc:	4770      	bx	lr

080023be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023be:	b480      	push	{r7}
 80023c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023da:	f000 f8bf 	bl	800255c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80023ea:	f000 fceb 	bl	8002dc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20001038 	.word	0x20001038

080023f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023fc:	4802      	ldr	r0, [pc, #8]	; (8002408 <TIM2_IRQHandler+0x10>)
 80023fe:	f003 fac3 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002402:	bf00      	nop
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	200002e4 	.word	0x200002e4

0800240c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <_sbrk+0x5c>)
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <_sbrk+0x60>)
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002420:	4b13      	ldr	r3, [pc, #76]	; (8002470 <_sbrk+0x64>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d102      	bne.n	800242e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <_sbrk+0x64>)
 800242a:	4a12      	ldr	r2, [pc, #72]	; (8002474 <_sbrk+0x68>)
 800242c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800242e:	4b10      	ldr	r3, [pc, #64]	; (8002470 <_sbrk+0x64>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	429a      	cmp	r2, r3
 800243a:	d207      	bcs.n	800244c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800243c:	f008 fe90 	bl	800b160 <__errno>
 8002440:	4603      	mov	r3, r0
 8002442:	220c      	movs	r2, #12
 8002444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800244a:	e009      	b.n	8002460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800244c:	4b08      	ldr	r3, [pc, #32]	; (8002470 <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	4a05      	ldr	r2, [pc, #20]	; (8002470 <_sbrk+0x64>)
 800245c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800245e:	68fb      	ldr	r3, [r7, #12]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	20005000 	.word	0x20005000
 800246c:	00000400 	.word	0x00000400
 8002470:	20000368 	.word	0x20000368
 8002474:	20001558 	.word	0x20001558

08002478 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800247c:	bf00      	nop
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002484:	480c      	ldr	r0, [pc, #48]	; (80024b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002486:	490d      	ldr	r1, [pc, #52]	; (80024bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002488:	4a0d      	ldr	r2, [pc, #52]	; (80024c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800248a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800248c:	e002      	b.n	8002494 <LoopCopyDataInit>

0800248e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002490:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002492:	3304      	adds	r3, #4

08002494 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002494:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002496:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002498:	d3f9      	bcc.n	800248e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249a:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800249c:	4c0a      	ldr	r4, [pc, #40]	; (80024c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800249e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a0:	e001      	b.n	80024a6 <LoopFillZerobss>

080024a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a4:	3204      	adds	r2, #4

080024a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a8:	d3fb      	bcc.n	80024a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024aa:	f7ff ffe5 	bl	8002478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ae:	f008 fe5d 	bl	800b16c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024b2:	f7fe ff6d 	bl	8001390 <main>
  bx lr
 80024b6:	4770      	bx	lr
  ldr r0, =_sdata
 80024b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024bc:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80024c0:	0800d0c8 	.word	0x0800d0c8
  ldr r2, =_sbss
 80024c4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80024c8:	20001554 	.word	0x20001554

080024cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024cc:	e7fe      	b.n	80024cc <ADC1_2_IRQHandler>
	...

080024d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024d4:	4b08      	ldr	r3, [pc, #32]	; (80024f8 <HAL_Init+0x28>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_Init+0x28>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024e0:	2003      	movs	r0, #3
 80024e2:	f000 f947 	bl	8002774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024e6:	200f      	movs	r0, #15
 80024e8:	f000 f808 	bl	80024fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024ec:	f7ff fe7a 	bl	80021e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40022000 	.word	0x40022000

080024fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002504:	4b12      	ldr	r3, [pc, #72]	; (8002550 <HAL_InitTick+0x54>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b12      	ldr	r3, [pc, #72]	; (8002554 <HAL_InitTick+0x58>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	fbb3 f3f1 	udiv	r3, r3, r1
 8002516:	fbb2 f3f3 	udiv	r3, r2, r3
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f95f 	bl	80027de <HAL_SYSTICK_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e00e      	b.n	8002548 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b0f      	cmp	r3, #15
 800252e:	d80a      	bhi.n	8002546 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002530:	2200      	movs	r2, #0
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002538:	f000 f927 	bl	800278a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800253c:	4a06      	ldr	r2, [pc, #24]	; (8002558 <HAL_InitTick+0x5c>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20000048 	.word	0x20000048
 8002554:	20000050 	.word	0x20000050
 8002558:	2000004c 	.word	0x2000004c

0800255c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_IncTick+0x1c>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	461a      	mov	r2, r3
 8002566:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_IncTick+0x20>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4413      	add	r3, r2
 800256c:	4a03      	ldr	r2, [pc, #12]	; (800257c <HAL_IncTick+0x20>)
 800256e:	6013      	str	r3, [r2, #0]
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000050 	.word	0x20000050
 800257c:	2000036c 	.word	0x2000036c

08002580 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return uwTick;
 8002584:	4b02      	ldr	r3, [pc, #8]	; (8002590 <HAL_GetTick+0x10>)
 8002586:	681b      	ldr	r3, [r3, #0]
}
 8002588:	4618      	mov	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	2000036c 	.word	0x2000036c

08002594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800259c:	f7ff fff0 	bl	8002580 <HAL_GetTick>
 80025a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025ac:	d005      	beq.n	80025ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <HAL_Delay+0x44>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	461a      	mov	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4413      	add	r3, r2
 80025b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025ba:	bf00      	nop
 80025bc:	f7ff ffe0 	bl	8002580 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d8f7      	bhi.n	80025bc <HAL_Delay+0x28>
  {
  }
}
 80025cc:	bf00      	nop
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000050 	.word	0x20000050

080025dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025f8:	4013      	ands	r3, r2
 80025fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800260e:	4a04      	ldr	r2, [pc, #16]	; (8002620 <__NVIC_SetPriorityGrouping+0x44>)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	60d3      	str	r3, [r2, #12]
}
 8002614:	bf00      	nop
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <__NVIC_GetPriorityGrouping+0x18>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	0a1b      	lsrs	r3, r3, #8
 800262e:	f003 0307 	and.w	r3, r3, #7
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b00      	cmp	r3, #0
 8002650:	db0b      	blt.n	800266a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	f003 021f 	and.w	r2, r3, #31
 8002658:	4906      	ldr	r1, [pc, #24]	; (8002674 <__NVIC_EnableIRQ+0x34>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2001      	movs	r0, #1
 8002662:	fa00 f202 	lsl.w	r2, r0, r2
 8002666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100

08002678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	; (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	; (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b089      	sub	sp, #36	; 0x24
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f1c3 0307 	rsb	r3, r3, #7
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	bf28      	it	cs
 80026ea:	2304      	movcs	r3, #4
 80026ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2b06      	cmp	r3, #6
 80026f4:	d902      	bls.n	80026fc <NVIC_EncodePriority+0x30>
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3b03      	subs	r3, #3
 80026fa:	e000      	b.n	80026fe <NVIC_EncodePriority+0x32>
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	401a      	ands	r2, r3
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43d9      	mvns	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002724:	4313      	orrs	r3, r2
         );
}
 8002726:	4618      	mov	r0, r3
 8002728:	3724      	adds	r7, #36	; 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002740:	d301      	bcc.n	8002746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002742:	2301      	movs	r3, #1
 8002744:	e00f      	b.n	8002766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002746:	4a0a      	ldr	r2, [pc, #40]	; (8002770 <SysTick_Config+0x40>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3b01      	subs	r3, #1
 800274c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274e:	210f      	movs	r1, #15
 8002750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002754:	f7ff ff90 	bl	8002678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SysTick_Config+0x40>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	4b04      	ldr	r3, [pc, #16]	; (8002770 <SysTick_Config+0x40>)
 8002760:	2207      	movs	r2, #7
 8002762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	e000e010 	.word	0xe000e010

08002774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff2d 	bl	80025dc <__NVIC_SetPriorityGrouping>
}
 8002782:	bf00      	nop
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800278a:	b580      	push	{r7, lr}
 800278c:	b086      	sub	sp, #24
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	60b9      	str	r1, [r7, #8]
 8002794:	607a      	str	r2, [r7, #4]
 8002796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800279c:	f7ff ff42 	bl	8002624 <__NVIC_GetPriorityGrouping>
 80027a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	6978      	ldr	r0, [r7, #20]
 80027a8:	f7ff ff90 	bl	80026cc <NVIC_EncodePriority>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027b2:	4611      	mov	r1, r2
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7ff ff5f 	bl	8002678 <__NVIC_SetPriority>
}
 80027ba:	bf00      	nop
 80027bc:	3718      	adds	r7, #24
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}

080027c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b082      	sub	sp, #8
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	4603      	mov	r3, r0
 80027ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff35 	bl	8002640 <__NVIC_EnableIRQ>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b082      	sub	sp, #8
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f7ff ffa2 	bl	8002730 <SysTick_Config>
 80027ec:	4603      	mov	r3, r0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b08b      	sub	sp, #44	; 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002802:	2300      	movs	r3, #0
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800280a:	e169      	b.n	8002ae0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800280c:	2201      	movs	r2, #1
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	429a      	cmp	r2, r3
 8002826:	f040 8158 	bne.w	8002ada <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	4a9a      	ldr	r2, [pc, #616]	; (8002a98 <HAL_GPIO_Init+0x2a0>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d05e      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002834:	4a98      	ldr	r2, [pc, #608]	; (8002a98 <HAL_GPIO_Init+0x2a0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d875      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800283a:	4a98      	ldr	r2, [pc, #608]	; (8002a9c <HAL_GPIO_Init+0x2a4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d058      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002840:	4a96      	ldr	r2, [pc, #600]	; (8002a9c <HAL_GPIO_Init+0x2a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d86f      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002846:	4a96      	ldr	r2, [pc, #600]	; (8002aa0 <HAL_GPIO_Init+0x2a8>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d052      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 800284c:	4a94      	ldr	r2, [pc, #592]	; (8002aa0 <HAL_GPIO_Init+0x2a8>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d869      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002852:	4a94      	ldr	r2, [pc, #592]	; (8002aa4 <HAL_GPIO_Init+0x2ac>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d04c      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002858:	4a92      	ldr	r2, [pc, #584]	; (8002aa4 <HAL_GPIO_Init+0x2ac>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d863      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800285e:	4a92      	ldr	r2, [pc, #584]	; (8002aa8 <HAL_GPIO_Init+0x2b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d046      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
 8002864:	4a90      	ldr	r2, [pc, #576]	; (8002aa8 <HAL_GPIO_Init+0x2b0>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d85d      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 800286a:	2b12      	cmp	r3, #18
 800286c:	d82a      	bhi.n	80028c4 <HAL_GPIO_Init+0xcc>
 800286e:	2b12      	cmp	r3, #18
 8002870:	d859      	bhi.n	8002926 <HAL_GPIO_Init+0x12e>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <HAL_GPIO_Init+0x80>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	080028f3 	.word	0x080028f3
 800287c:	080028cd 	.word	0x080028cd
 8002880:	080028df 	.word	0x080028df
 8002884:	08002921 	.word	0x08002921
 8002888:	08002927 	.word	0x08002927
 800288c:	08002927 	.word	0x08002927
 8002890:	08002927 	.word	0x08002927
 8002894:	08002927 	.word	0x08002927
 8002898:	08002927 	.word	0x08002927
 800289c:	08002927 	.word	0x08002927
 80028a0:	08002927 	.word	0x08002927
 80028a4:	08002927 	.word	0x08002927
 80028a8:	08002927 	.word	0x08002927
 80028ac:	08002927 	.word	0x08002927
 80028b0:	08002927 	.word	0x08002927
 80028b4:	08002927 	.word	0x08002927
 80028b8:	08002927 	.word	0x08002927
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	4a79      	ldr	r2, [pc, #484]	; (8002aac <HAL_GPIO_Init+0x2b4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d013      	beq.n	80028f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028ca:	e02c      	b.n	8002926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	623b      	str	r3, [r7, #32]
          break;
 80028d2:	e029      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	3304      	adds	r3, #4
 80028da:	623b      	str	r3, [r7, #32]
          break;
 80028dc:	e024      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	3308      	adds	r3, #8
 80028e4:	623b      	str	r3, [r7, #32]
          break;
 80028e6:	e01f      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	330c      	adds	r3, #12
 80028ee:	623b      	str	r3, [r7, #32]
          break;
 80028f0:	e01a      	b.n	8002928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028fa:	2304      	movs	r3, #4
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e013      	b.n	8002928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002908:	2308      	movs	r3, #8
 800290a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	611a      	str	r2, [r3, #16]
          break;
 8002912:	e009      	b.n	8002928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002914:	2308      	movs	r3, #8
 8002916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69fa      	ldr	r2, [r7, #28]
 800291c:	615a      	str	r2, [r3, #20]
          break;
 800291e:	e003      	b.n	8002928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002920:	2300      	movs	r3, #0
 8002922:	623b      	str	r3, [r7, #32]
          break;
 8002924:	e000      	b.n	8002928 <HAL_GPIO_Init+0x130>
          break;
 8002926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	d801      	bhi.n	8002932 <HAL_GPIO_Init+0x13a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	e001      	b.n	8002936 <HAL_GPIO_Init+0x13e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3304      	adds	r3, #4
 8002936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	2bff      	cmp	r3, #255	; 0xff
 800293c:	d802      	bhi.n	8002944 <HAL_GPIO_Init+0x14c>
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x152>
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3b08      	subs	r3, #8
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	210f      	movs	r1, #15
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	fa01 f303 	lsl.w	r3, r1, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	401a      	ands	r2, r3
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 80b1 	beq.w	8002ada <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002978:	4b4d      	ldr	r3, [pc, #308]	; (8002ab0 <HAL_GPIO_Init+0x2b8>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4a4c      	ldr	r2, [pc, #304]	; (8002ab0 <HAL_GPIO_Init+0x2b8>)
 800297e:	f043 0301 	orr.w	r3, r3, #1
 8002982:	6193      	str	r3, [r2, #24]
 8002984:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_GPIO_Init+0x2b8>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002990:	4a48      	ldr	r2, [pc, #288]	; (8002ab4 <HAL_GPIO_Init+0x2bc>)
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	089b      	lsrs	r3, r3, #2
 8002996:	3302      	adds	r3, #2
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	220f      	movs	r2, #15
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	43db      	mvns	r3, r3
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <HAL_GPIO_Init+0x2c0>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_GPIO_Init+0x1ec>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <HAL_GPIO_Init+0x2c4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00d      	beq.n	80029e0 <HAL_GPIO_Init+0x1e8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a3e      	ldr	r2, [pc, #248]	; (8002ac0 <HAL_GPIO_Init+0x2c8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d007      	beq.n	80029dc <HAL_GPIO_Init+0x1e4>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_GPIO_Init+0x2cc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d101      	bne.n	80029d8 <HAL_GPIO_Init+0x1e0>
 80029d4:	2303      	movs	r3, #3
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029d8:	2304      	movs	r3, #4
 80029da:	e004      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029dc:	2302      	movs	r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_GPIO_Init+0x1ee>
 80029e4:	2300      	movs	r3, #0
 80029e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	68fa      	ldr	r2, [r7, #12]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029f6:	492f      	ldr	r1, [pc, #188]	; (8002ab4 <HAL_GPIO_Init+0x2bc>)
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d006      	beq.n	8002a1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a10:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	492c      	ldr	r1, [pc, #176]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]
 8002a1c:	e006      	b.n	8002a2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a1e:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	43db      	mvns	r3, r3
 8002a26:	4928      	ldr	r1, [pc, #160]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a28:	4013      	ands	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d006      	beq.n	8002a46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a38:	4b23      	ldr	r3, [pc, #140]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	4922      	ldr	r1, [pc, #136]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a46:	4b20      	ldr	r3, [pc, #128]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	491e      	ldr	r1, [pc, #120]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a50:	4013      	ands	r3, r2
 8002a52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d006      	beq.n	8002a6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a60:	4b19      	ldr	r3, [pc, #100]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]
 8002a6c:	e006      	b.n	8002a7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4914      	ldr	r1, [pc, #80]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a78:	4013      	ands	r3, r2
 8002a7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d021      	beq.n	8002acc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	68da      	ldr	r2, [r3, #12]
 8002a8c:	490e      	ldr	r1, [pc, #56]	; (8002ac8 <HAL_GPIO_Init+0x2d0>)
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	60cb      	str	r3, [r1, #12]
 8002a94:	e021      	b.n	8002ada <HAL_GPIO_Init+0x2e2>
 8002a96:	bf00      	nop
 8002a98:	10320000 	.word	0x10320000
 8002a9c:	10310000 	.word	0x10310000
 8002aa0:	10220000 	.word	0x10220000
 8002aa4:	10210000 	.word	0x10210000
 8002aa8:	10120000 	.word	0x10120000
 8002aac:	10110000 	.word	0x10110000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40010800 	.word	0x40010800
 8002abc:	40010c00 	.word	0x40010c00
 8002ac0:	40011000 	.word	0x40011000
 8002ac4:	40011400 	.word	0x40011400
 8002ac8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_GPIO_Init+0x304>)
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	4909      	ldr	r1, [pc, #36]	; (8002afc <HAL_GPIO_Init+0x304>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	3301      	adds	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f47f ae8e 	bne.w	800280c <HAL_GPIO_Init+0x14>
  }
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	372c      	adds	r7, #44	; 0x2c
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40010400 	.word	0x40010400

08002b00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	807b      	strh	r3, [r7, #2]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b10:	787b      	ldrb	r3, [r7, #1]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b16:	887a      	ldrh	r2, [r7, #2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b1c:	e003      	b.n	8002b26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b1e:	887b      	ldrh	r3, [r7, #2]
 8002b20:	041a      	lsls	r2, r3, #16
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	611a      	str	r2, [r3, #16]
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bc80      	pop	{r7}
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	4013      	ands	r3, r2
 8002b48:	041a      	lsls	r2, r3, #16
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43d9      	mvns	r1, r3
 8002b4e:	887b      	ldrh	r3, [r7, #2]
 8002b50:	400b      	ands	r3, r1
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b64:	b08b      	sub	sp, #44	; 0x2c
 8002b66:	af06      	add	r7, sp, #24
 8002b68:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0fd      	b.n	8002d70 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002b7a:	b2db      	uxtb	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d106      	bne.n	8002b8e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f008 f83f 	bl	800ac0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2203      	movs	r2, #3
 8002b92:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f003 fd2d 	bl	80065fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	687e      	ldr	r6, [r7, #4]
 8002ba8:	466d      	mov	r5, sp
 8002baa:	f106 0410 	add.w	r4, r6, #16
 8002bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	602b      	str	r3, [r5, #0]
 8002bb6:	1d33      	adds	r3, r6, #4
 8002bb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bba:	6838      	ldr	r0, [r7, #0]
 8002bbc:	f003 fcf7 	bl	80065ae <USB_CoreInit>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d005      	beq.n	8002bd2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e0ce      	b.n	8002d70 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f003 fd28 	bl	800662e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e04c      	b.n	8002c7e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	440b      	add	r3, r1
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	b298      	uxth	r0, r3
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	440b      	add	r3, r1
 8002c20:	3336      	adds	r3, #54	; 0x36
 8002c22:	4602      	mov	r2, r0
 8002c24:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c26:	7bfb      	ldrb	r3, [r7, #15]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	440b      	add	r3, r1
 8002c36:	3303      	adds	r3, #3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3338      	adds	r3, #56	; 0x38
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c50:	7bfa      	ldrb	r2, [r7, #15]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	440b      	add	r3, r1
 8002c5e:	333c      	adds	r3, #60	; 0x3c
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	440b      	add	r3, r1
 8002c72:	3340      	adds	r3, #64	; 0x40
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d3ad      	bcc.n	8002be4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	73fb      	strb	r3, [r7, #15]
 8002c8c:	e044      	b.n	8002d18 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002cb6:	7bfa      	ldrb	r2, [r7, #15]
 8002cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	440b      	add	r3, r1
 8002cc8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cd0:	7bfa      	ldrb	r2, [r7, #15]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cfc:	7bfa      	ldrb	r2, [r7, #15]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d12:	7bfb      	ldrb	r3, [r7, #15]
 8002d14:	3301      	adds	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	7bfa      	ldrb	r2, [r7, #15]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3b5      	bcc.n	8002c8e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	603b      	str	r3, [r7, #0]
 8002d28:	687e      	ldr	r6, [r7, #4]
 8002d2a:	466d      	mov	r5, sp
 8002d2c:	f106 0410 	add.w	r4, r6, #16
 8002d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	1d33      	adds	r3, r6, #4
 8002d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3c:	6838      	ldr	r0, [r7, #0]
 8002d3e:	f003 fc82 	bl	8006646 <USB_DevInit>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e00d      	b.n	8002d70 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f006 f935 	bl	8008fd8 <USB_DevDisconnect>

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3714      	adds	r7, #20
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d101      	bne.n	8002d8e <HAL_PCD_Start+0x16>
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	e016      	b.n	8002dbc <HAL_PCD_Start+0x44>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f003 fc17 	bl	80065ce <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002da0:	2101      	movs	r1, #1
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f008 f9a5 	bl	800b0f2 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f006 f909 	bl	8008fc4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f006 f90b 	bl	8008fec <USB_ReadInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ddc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002de0:	d102      	bne.n	8002de8 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fb5f 	bl	80034a6 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f006 f8fd 	bl	8008fec <USB_ReadInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfc:	d112      	bne.n	8002e24 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f007 ff73 	bl	800ad02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002e1c:	2100      	movs	r1, #0
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f923 	bl	800306a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f006 f8df 	bl	8008fec <USB_ReadInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e38:	d10b      	bne.n	8002e52 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f006 f8c8 	bl	8008fec <USB_ReadInterrupts>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e66:	d10b      	bne.n	8002e80 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e7a:	b292      	uxth	r2, r2
 8002e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f006 f8b1 	bl	8008fec <USB_ReadInterrupts>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e94:	d126      	bne.n	8002ee4 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0204 	bic.w	r2, r2, #4
 8002ea8:	b292      	uxth	r2, r2
 8002eaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0208 	bic.w	r2, r2, #8
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f007 ff54 	bl	800ad74 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ede:	b292      	uxth	r2, r2
 8002ee0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f006 f87f 	bl	8008fec <USB_ReadInterrupts>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef8:	f040 8082 	bne.w	8003000 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e010      	b.n	8002f24 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	7ffb      	ldrb	r3, [r7, #31]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	441a      	add	r2, r3
 8002f0e:	7ffb      	ldrb	r3, [r7, #31]
 8002f10:	8812      	ldrh	r2, [r2, #0]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	3320      	adds	r3, #32
 8002f18:	443b      	add	r3, r7
 8002f1a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002f1e:	7ffb      	ldrb	r3, [r7, #31]
 8002f20:	3301      	adds	r3, #1
 8002f22:	77fb      	strb	r3, [r7, #31]
 8002f24:	7ffb      	ldrb	r3, [r7, #31]
 8002f26:	2b07      	cmp	r3, #7
 8002f28:	d9eb      	bls.n	8002f02 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0201 	bic.w	r2, r2, #1
 8002f54:	b292      	uxth	r2, r2
 8002f56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002f5a:	bf00      	nop
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f6      	beq.n	8002f5c <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	b292      	uxth	r2, r2
 8002f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002f86:	2300      	movs	r3, #0
 8002f88:	77fb      	strb	r3, [r7, #31]
 8002f8a:	e00f      	b.n	8002fac <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002f8c:	7ffb      	ldrb	r3, [r7, #31]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	4611      	mov	r1, r2
 8002f94:	7ffa      	ldrb	r2, [r7, #31]
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	440a      	add	r2, r1
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	3320      	adds	r3, #32
 8002f9e:	443b      	add	r3, r7
 8002fa0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002fa4:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	7ffb      	ldrb	r3, [r7, #31]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	d9ec      	bls.n	8002f8c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f042 0208 	orr.w	r2, r2, #8
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fdc:	b292      	uxth	r2, r2
 8002fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0204 	orr.w	r2, r2, #4
 8002ff4:	b292      	uxth	r2, r2
 8002ff6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f007 fea0 	bl	800ad40 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f005 fff1 	bl	8008fec <USB_ReadInterrupts>
 800300a:	4603      	mov	r3, r0
 800300c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003014:	d10e      	bne.n	8003034 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800301e:	b29a      	uxth	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003028:	b292      	uxth	r2, r2
 800302a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f007 fe59 	bl	800ace6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f005 ffd7 	bl	8008fec <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003048:	d10b      	bne.n	8003062 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003052:	b29a      	uxth	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800305c:	b292      	uxth	r2, r2
 800305e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003062:	bf00      	nop
 8003064:	3720      	adds	r7, #32
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_PCD_SetAddress+0x1a>
 8003080:	2302      	movs	r3, #2
 8003082:	e013      	b.n	80030ac <HAL_PCD_SetAddress+0x42>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f005 ff7e 	bl	8008f9e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	461a      	mov	r2, r3
 80030c2:	4603      	mov	r3, r0
 80030c4:	70fb      	strb	r3, [r7, #3]
 80030c6:	460b      	mov	r3, r1
 80030c8:	803b      	strh	r3, [r7, #0]
 80030ca:	4613      	mov	r3, r2
 80030cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da0e      	bge.n	80030f8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	1c5a      	adds	r2, r3, #1
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	705a      	strb	r2, [r3, #1]
 80030f6:	e00e      	b.n	8003116 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f8:	78fb      	ldrb	r3, [r7, #3]
 80030fa:	f003 0207 	and.w	r2, r3, #7
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4413      	add	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	b2da      	uxtb	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003122:	883a      	ldrh	r2, [r7, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	78ba      	ldrb	r2, [r7, #2]
 800312c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d004      	beq.n	8003140 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003140:	78bb      	ldrb	r3, [r7, #2]
 8003142:	2b02      	cmp	r3, #2
 8003144:	d102      	bne.n	800314c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003152:	2b01      	cmp	r3, #1
 8003154:	d101      	bne.n	800315a <HAL_PCD_EP_Open+0xa6>
 8003156:	2302      	movs	r3, #2
 8003158:	e00e      	b.n	8003178 <HAL_PCD_EP_Open+0xc4>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68f9      	ldr	r1, [r7, #12]
 8003168:	4618      	mov	r0, r3
 800316a:	f003 fa8d 	bl	8006688 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003176:	7afb      	ldrb	r3, [r7, #11]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	460b      	mov	r3, r1
 800318a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800318c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da0e      	bge.n	80031b2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	4413      	add	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	705a      	strb	r2, [r3, #1]
 80031b0:	e00e      	b.n	80031d0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031b2:	78fb      	ldrb	r3, [r7, #3]
 80031b4:	f003 0207 	and.w	r2, r3, #7
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_PCD_EP_Close+0x6a>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e00e      	b.n	8003208 <HAL_PCD_EP_Close+0x88>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68f9      	ldr	r1, [r7, #12]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f003 fdaf 	bl	8006d5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	460b      	mov	r3, r1
 800321e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003220:	7afb      	ldrb	r3, [r7, #11]
 8003222:	f003 0207 	and.w	r2, r3, #7
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4413      	add	r3, r2
 8003236:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003250:	7afb      	ldrb	r3, [r7, #11]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	b2da      	uxtb	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800325c:	7afb      	ldrb	r3, [r7, #11]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	4618      	mov	r0, r3
 800326e:	f003 ff61 	bl	8007134 <USB_EPStartXfer>
 8003272:	e005      	b.n	8003280 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6979      	ldr	r1, [r7, #20]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 ff5a 	bl	8007134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	f003 0207 	and.w	r2, r3, #7
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80032ac:	681b      	ldr	r3, [r3, #0]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	603b      	str	r3, [r7, #0]
 80032c4:	460b      	mov	r3, r1
 80032c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032c8:	7afb      	ldrb	r3, [r7, #11]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	683a      	ldr	r2, [r7, #0]
 80032e8:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2200      	movs	r2, #0
 80032fc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2201      	movs	r2, #1
 8003302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003304:	7afb      	ldrb	r3, [r7, #11]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	b2da      	uxtb	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003310:	7afb      	ldrb	r3, [r7, #11]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6979      	ldr	r1, [r7, #20]
 8003320:	4618      	mov	r0, r3
 8003322:	f003 ff07 	bl	8007134 <USB_EPStartXfer>
 8003326:	e005      	b.n	8003334 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6979      	ldr	r1, [r7, #20]
 800332e:	4618      	mov	r0, r3
 8003330:	f003 ff00 	bl	8007134 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3718      	adds	r7, #24
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b084      	sub	sp, #16
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	f003 0207 	and.w	r2, r3, #7
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	429a      	cmp	r2, r3
 8003356:	d901      	bls.n	800335c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e04c      	b.n	80033f6 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800335c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da0e      	bge.n	8003382 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003364:	78fb      	ldrb	r3, [r7, #3]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	705a      	strb	r2, [r3, #1]
 8003380:	e00c      	b.n	800339c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2201      	movs	r2, #1
 80033a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_PCD_EP_SetStall+0x7e>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e01c      	b.n	80033f6 <HAL_PCD_EP_SetStall+0xb8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68f9      	ldr	r1, [r7, #12]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f005 fcea 	bl	8008da4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80033e4:	4619      	mov	r1, r3
 80033e6:	4610      	mov	r0, r2
 80033e8:	f005 fe0f 	bl	800900a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b084      	sub	sp, #16
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800340a:	78fb      	ldrb	r3, [r7, #3]
 800340c:	f003 020f 	and.w	r2, r3, #15
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	429a      	cmp	r2, r3
 8003416:	d901      	bls.n	800341c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e040      	b.n	800349e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800341c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003420:	2b00      	cmp	r3, #0
 8003422:	da0e      	bge.n	8003442 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	705a      	strb	r2, [r3, #1]
 8003440:	e00e      	b.n	8003460 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	f003 0207 	and.w	r2, r3, #7
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	4413      	add	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2200      	movs	r2, #0
 800345e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	b2da      	uxtb	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_PCD_EP_ClrStall+0x82>
 800347c:	2302      	movs	r3, #2
 800347e:	e00e      	b.n	800349e <HAL_PCD_EP_ClrStall+0xa0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	4618      	mov	r0, r3
 8003490:	f005 fcd8 	bl	8008e44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b08e      	sub	sp, #56	; 0x38
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80034ae:	e2ec      	b.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034b8:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80034ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80034c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f040 8161 	bne.w	8003792 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80034d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d152      	bne.n	8003580 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	81fb      	strh	r3, [r7, #14]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	89fb      	ldrh	r3, [r7, #14]
 80034f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3328      	adds	r3, #40	; 0x28
 8003502:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800350c:	b29b      	uxth	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	3302      	adds	r3, #2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	4413      	add	r3, r2
 8003522:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	441a      	add	r2, r3
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800353e:	2100      	movs	r1, #0
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f007 fbb6 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 829b 	beq.w	8003a8a <PCD_EP_ISR_Handler+0x5e4>
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f040 8296 	bne.w	8003a8a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003564:	b2db      	uxtb	r3, r3
 8003566:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800356a:	b2da      	uxtb	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b292      	uxth	r2, r2
 8003572:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800357e:	e284      	b.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003590:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003596:	2b00      	cmp	r3, #0
 8003598:	d034      	beq.n	8003604 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	461a      	mov	r2, r3
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	3306      	adds	r3, #6
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6812      	ldr	r2, [r2, #0]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6818      	ldr	r0, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80035d8:	b29b      	uxth	r3, r3
 80035da:	f005 fd66 	bl	80090aa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035ea:	4013      	ands	r3, r2
 80035ec:	823b      	strh	r3, [r7, #16]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	8a3a      	ldrh	r2, [r7, #16]
 80035f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035f8:	b292      	uxth	r2, r2
 80035fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f007 fb2b 	bl	800ac58 <HAL_PCD_SetupStageCallback>
 8003602:	e242      	b.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003604:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003608:	2b00      	cmp	r3, #0
 800360a:	f280 823e 	bge.w	8003a8a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	b29a      	uxth	r2, r3
 8003616:	f640 738f 	movw	r3, #3983	; 0xf8f
 800361a:	4013      	ands	r3, r2
 800361c:	83bb      	strh	r3, [r7, #28]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	8bba      	ldrh	r2, [r7, #28]
 8003624:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003628:	b292      	uxth	r2, r2
 800362a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4413      	add	r3, r2
 8003640:	3306      	adds	r3, #6
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d019      	beq.n	8003694 <PCD_EP_ISR_Handler+0x1ee>
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	695b      	ldr	r3, [r3, #20]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d015      	beq.n	8003694 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	6959      	ldr	r1, [r3, #20]
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003676:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003678:	b29b      	uxth	r3, r3
 800367a:	f005 fd16 	bl	80090aa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	695a      	ldr	r2, [r3, #20]
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	441a      	add	r2, r3
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800368c:	2100      	movs	r1, #0
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f007 faf4 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 81f2 	bne.w	8003a8a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	61bb      	str	r3, [r7, #24]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	461a      	mov	r2, r3
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	4413      	add	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d112      	bne.n	80036f4 <PCD_EP_ISR_Handler+0x24e>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036d8:	b29a      	uxth	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	801a      	strh	r2, [r3, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	881b      	ldrh	r3, [r3, #0]
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	e02f      	b.n	8003754 <PCD_EP_ISR_Handler+0x2ae>
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b3e      	cmp	r3, #62	; 0x3e
 80036fa:	d813      	bhi.n	8003724 <PCD_EP_ISR_Handler+0x27e>
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	691b      	ldr	r3, [r3, #16]
 8003700:	085b      	lsrs	r3, r3, #1
 8003702:	633b      	str	r3, [r7, #48]	; 0x30
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <PCD_EP_ISR_Handler+0x270>
 8003710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003712:	3301      	adds	r3, #1
 8003714:	633b      	str	r3, [r7, #48]	; 0x30
 8003716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003718:	b29b      	uxth	r3, r3
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	b29a      	uxth	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e017      	b.n	8003754 <PCD_EP_ISR_Handler+0x2ae>
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	095b      	lsrs	r3, r3, #5
 800372a:	633b      	str	r3, [r7, #48]	; 0x30
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f003 031f 	and.w	r3, r3, #31
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <PCD_EP_ISR_Handler+0x298>
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	3b01      	subs	r3, #1
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	b29b      	uxth	r3, r3
 8003742:	029b      	lsls	r3, r3, #10
 8003744:	b29b      	uxth	r3, r3
 8003746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800374a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800374e:	b29a      	uxth	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003764:	827b      	strh	r3, [r7, #18]
 8003766:	8a7b      	ldrh	r3, [r7, #18]
 8003768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800376c:	827b      	strh	r3, [r7, #18]
 800376e:	8a7b      	ldrh	r3, [r7, #18]
 8003770:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003774:	827b      	strh	r3, [r7, #18]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	8a7b      	ldrh	r3, [r7, #18]
 800377c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003784:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800378c:	b29b      	uxth	r3, r3
 800378e:	8013      	strh	r3, [r2, #0]
 8003790:	e17b      	b.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037a4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f280 80ea 	bge.w	8003982 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	b29a      	uxth	r2, r3
 80037c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80037c4:	4013      	ands	r3, r2
 80037c6:	853b      	strh	r3, [r7, #40]	; 0x28
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80037d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037dc:	b292      	uxth	r2, r2
 80037de:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80037e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	4413      	add	r3, r2
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	7b1b      	ldrb	r3, [r3, #12]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d122      	bne.n	8003844 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	3306      	adds	r3, #6
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003826:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003828:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 8087 	beq.w	800393e <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	6959      	ldr	r1, [r3, #20]
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	88da      	ldrh	r2, [r3, #6]
 800383c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800383e:	f005 fc34 	bl	80090aa <USB_ReadPMA>
 8003842:	e07c      	b.n	800393e <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	78db      	ldrb	r3, [r3, #3]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d108      	bne.n	800385e <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800384c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800384e:	461a      	mov	r2, r3
 8003850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f927 	bl	8003aa6 <HAL_PCD_EP_DB_Receive>
 8003858:	4603      	mov	r3, r0
 800385a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800385c:	e06f      	b.n	800393e <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	881b      	ldrh	r3, [r3, #0]
 800386e:	b29b      	uxth	r3, r3
 8003870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003878:	847b      	strh	r3, [r7, #34]	; 0x22
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	441a      	add	r2, r3
 8003888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800388a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800388e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800389a:	b29b      	uxth	r3, r3
 800389c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d021      	beq.n	80038fc <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	461a      	mov	r2, r3
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	3302      	adds	r3, #2
 80038ce:	005b      	lsls	r3, r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038e0:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80038e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02a      	beq.n	800393e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	6959      	ldr	r1, [r3, #20]
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	891a      	ldrh	r2, [r3, #8]
 80038f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80038f6:	f005 fbd8 	bl	80090aa <USB_ReadPMA>
 80038fa:	e020      	b.n	800393e <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	3306      	adds	r3, #6
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003926:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	6959      	ldr	r1, [r3, #20]
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	895a      	ldrh	r2, [r3, #10]
 8003938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800393a:	f005 fbb6 	bl	80090aa <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800393e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003940:	69da      	ldr	r2, [r3, #28]
 8003942:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003944:	441a      	add	r2, r3
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003950:	441a      	add	r2, r3
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d004      	beq.n	8003968 <PCD_EP_ISR_Handler+0x4c2>
 800395e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	429a      	cmp	r2, r3
 8003966:	d206      	bcs.n	8003976 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f007 f984 	bl	800ac7c <HAL_PCD_DataOutStageCallback>
 8003974:	e005      	b.n	8003982 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fbd9 	bl	8007134 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003982:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003988:	2b00      	cmp	r3, #0
 800398a:	d07e      	beq.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800398c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003990:	1c5a      	adds	r2, r3, #1
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	4413      	add	r3, r2
 800399e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	461a      	mov	r2, r3
 80039a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	881b      	ldrh	r3, [r3, #0]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80039b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ba:	843b      	strh	r3, [r7, #32]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	441a      	add	r2, r3
 80039ca:	8c3b      	ldrh	r3, [r7, #32]
 80039cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	78db      	ldrb	r3, [r3, #3]
 80039dc:	2b03      	cmp	r3, #3
 80039de:	d00c      	beq.n	80039fa <PCD_EP_ISR_Handler+0x554>
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	78db      	ldrb	r3, [r3, #3]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d146      	bne.n	8003a7e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80039f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80039f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d141      	bne.n	8003a7e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3302      	adds	r3, #2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6812      	ldr	r2, [r2, #0]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a22:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	8bfb      	ldrh	r3, [r7, #30]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d906      	bls.n	8003a3c <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	8bfb      	ldrh	r3, [r7, #30]
 8003a34:	1ad2      	subs	r2, r2, r3
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	619a      	str	r2, [r3, #24]
 8003a3a:	e002      	b.n	8003a42 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	2200      	movs	r2, #0
 8003a40:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f007 f92e 	bl	800acb2 <HAL_PCD_DataInStageCallback>
 8003a56:	e018      	b.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	8bfb      	ldrh	r3, [r7, #30]
 8003a5e:	441a      	add	r2, r3
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	8bfb      	ldrh	r3, [r7, #30]
 8003a6a:	441a      	add	r2, r3
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a76:	4618      	mov	r0, r3
 8003a78:	f003 fb5c 	bl	8007134 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003a7c:	e005      	b.n	8003a8a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003a7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003a80:	461a      	mov	r2, r3
 8003a82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f91b 	bl	8003cc0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	b21b      	sxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f6ff ad0a 	blt.w	80034b0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3738      	adds	r7, #56	; 0x38
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b088      	sub	sp, #32
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d07e      	beq.n	8003bbc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae0:	881b      	ldrh	r3, [r3, #0]
 8003ae2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ae6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	8b7b      	ldrh	r3, [r7, #26]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d306      	bcc.n	8003b00 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	8b7b      	ldrh	r3, [r7, #26]
 8003af8:	1ad2      	subs	r2, r2, r3
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	619a      	str	r2, [r3, #24]
 8003afe:	e002      	b.n	8003b06 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2200      	movs	r2, #0
 8003b04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d123      	bne.n	8003b56 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4413      	add	r3, r2
 8003b1c:	881b      	ldrh	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b28:	833b      	strh	r3, [r7, #24]
 8003b2a:	8b3b      	ldrh	r3, [r7, #24]
 8003b2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b30:	833b      	strh	r3, [r7, #24]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	441a      	add	r2, r3
 8003b40:	8b3b      	ldrh	r3, [r7, #24]
 8003b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01f      	beq.n	8003ba0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7a:	82fb      	strh	r3, [r7, #22]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	441a      	add	r2, r3
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ba0:	8b7b      	ldrh	r3, [r7, #26]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 8087 	beq.w	8003cb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	6959      	ldr	r1, [r3, #20]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	891a      	ldrh	r2, [r3, #8]
 8003bb4:	8b7b      	ldrh	r3, [r7, #26]
 8003bb6:	f005 fa78 	bl	80090aa <USB_ReadPMA>
 8003bba:	e07c      	b.n	8003cb6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	4413      	add	r3, r2
 8003bd0:	3306      	adds	r3, #6
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bde:	881b      	ldrh	r3, [r3, #0]
 8003be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	699a      	ldr	r2, [r3, #24]
 8003bea:	8b7b      	ldrh	r3, [r7, #26]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d306      	bcc.n	8003bfe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	1ad2      	subs	r2, r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	619a      	str	r2, [r3, #24]
 8003bfc:	e002      	b.n	8003c04 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d123      	bne.n	8003c54 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	881b      	ldrh	r3, [r3, #0]
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c26:	83fb      	strh	r3, [r7, #30]
 8003c28:	8bfb      	ldrh	r3, [r7, #30]
 8003c2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c2e:	83fb      	strh	r3, [r7, #30]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	441a      	add	r2, r3
 8003c3e:	8bfb      	ldrh	r3, [r7, #30]
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d11f      	bne.n	8003c9e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c78:	83bb      	strh	r3, [r7, #28]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	441a      	add	r2, r3
 8003c88:	8bbb      	ldrh	r3, [r7, #28]
 8003c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003c9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d008      	beq.n	8003cb6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	6959      	ldr	r1, [r3, #20]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	895a      	ldrh	r2, [r3, #10]
 8003cb0:	8b7b      	ldrh	r3, [r7, #26]
 8003cb2:	f005 f9fa 	bl	80090aa <USB_ReadPMA>
    }
  }

  return count;
 8003cb6:	8b7b      	ldrh	r3, [r7, #26]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b0a2      	sub	sp, #136	; 0x88
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 81c7 	beq.w	8004068 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	3302      	adds	r3, #2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6812      	ldr	r2, [r2, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d02:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d907      	bls.n	8003d22 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	619a      	str	r2, [r3, #24]
 8003d20:	e002      	b.n	8003d28 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2200      	movs	r2, #0
 8003d26:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f040 80b9 	bne.w	8003ea4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	785b      	ldrb	r3, [r3, #1]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d126      	bne.n	8003d88 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	4413      	add	r3, r2
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	011a      	lsls	r2, r3, #4
 8003d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d60:	627b      	str	r3, [r7, #36]	; 0x24
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d70:	801a      	strh	r2, [r3, #0]
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	801a      	strh	r2, [r3, #0]
 8003d86:	e01a      	b.n	8003dbe <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	785b      	ldrb	r3, [r3, #1]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d116      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0xfe>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	633b      	str	r3, [r7, #48]	; 0x30
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da4:	4413      	add	r3, r2
 8003da6:	633b      	str	r3, [r7, #48]	; 0x30
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	011a      	lsls	r2, r3, #4
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	4413      	add	r3, r2
 8003db2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dba:	2200      	movs	r2, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	623b      	str	r3, [r7, #32]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	785b      	ldrb	r3, [r3, #1]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d126      	bne.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x15a>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	461a      	mov	r2, r3
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4413      	add	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	011a      	lsls	r2, r3, #4
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	4413      	add	r3, r2
 8003dee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	801a      	strh	r2, [r3, #0]
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	881b      	ldrh	r3, [r3, #0]
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	801a      	strh	r2, [r3, #0]
 8003e18:	e017      	b.n	8003e4a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	785b      	ldrb	r3, [r3, #1]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d113      	bne.n	8003e4a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	4413      	add	r3, r2
 8003e32:	623b      	str	r3, [r7, #32]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	011a      	lsls	r2, r3, #4
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003e42:	61fb      	str	r3, [r7, #28]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	2200      	movs	r2, #0
 8003e48:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f006 ff2e 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 82d4 	beq.w	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	461a      	mov	r2, r3
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7c:	827b      	strh	r3, [r7, #18]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	441a      	add	r2, r3
 8003e8c:	8a7b      	ldrh	r3, [r7, #18]
 8003e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]
 8003ea2:	e2b2      	b.n	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003ea4:	88fb      	ldrh	r3, [r7, #6]
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d021      	beq.n	8003ef2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ec4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	441a      	add	r2, r3
 8003eda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ede:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ee2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ee6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 8286 	bne.w	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f06:	441a      	add	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f14:	441a      	add	r2, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d309      	bcc.n	8003f3a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f32:	1ad2      	subs	r2, r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	621a      	str	r2, [r3, #32]
 8003f38:	e015      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d107      	bne.n	8003f52 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003f42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f50:	e009      	b.n	8003f66 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2200      	movs	r2, #0
 8003f64:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d155      	bne.n	800401a <HAL_PCD_EP_DB_Transmit+0x35a>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f7c:	b29b      	uxth	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	4413      	add	r3, r2
 8003f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	011a      	lsls	r2, r3, #4
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	4413      	add	r3, r2
 8003f90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
 8003f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d112      	bne.n	8003fc2 <HAL_PCD_EP_DB_Transmit+0x302>
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003faa:	801a      	strh	r2, [r3, #0]
 8003fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fbe:	801a      	strh	r2, [r3, #0]
 8003fc0:	e047      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fc4:	2b3e      	cmp	r3, #62	; 0x3e
 8003fc6:	d811      	bhi.n	8003fec <HAL_PCD_EP_DB_Transmit+0x32c>
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <HAL_PCD_EP_DB_Transmit+0x31e>
 8003fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fda:	3301      	adds	r3, #1
 8003fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	029b      	lsls	r3, r3, #10
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe8:	801a      	strh	r2, [r3, #0]
 8003fea:	e032      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x392>
 8003fec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <HAL_PCD_EP_DB_Transmit+0x342>
 8003ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffe:	3b01      	subs	r3, #1
 8004000:	64bb      	str	r3, [r7, #72]	; 0x48
 8004002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004004:	b29b      	uxth	r3, r3
 8004006:	029b      	lsls	r3, r3, #10
 8004008:	b29b      	uxth	r3, r3
 800400a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800400e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004012:	b29a      	uxth	r2, r3
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	801a      	strh	r2, [r3, #0]
 8004018:	e01b      	b.n	8004052 <HAL_PCD_EP_DB_Transmit+0x392>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	785b      	ldrb	r3, [r3, #1]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d117      	bne.n	8004052 <HAL_PCD_EP_DB_Transmit+0x392>
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	643b      	str	r3, [r7, #64]	; 0x40
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004030:	b29b      	uxth	r3, r3
 8004032:	461a      	mov	r2, r3
 8004034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004036:	4413      	add	r3, r2
 8004038:	643b      	str	r3, [r7, #64]	; 0x40
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	011a      	lsls	r2, r3, #4
 8004040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004042:	4413      	add	r3, r2
 8004044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	b29a      	uxth	r2, r3
 800404e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004050:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	6959      	ldr	r1, [r3, #20]
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	891a      	ldrh	r2, [r3, #8]
 800405e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004060:	b29b      	uxth	r3, r3
 8004062:	f004 ffdd 	bl	8009020 <USB_WritePMA>
 8004066:	e1d0      	b.n	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004070:	b29b      	uxth	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	3306      	adds	r3, #6
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	6812      	ldr	r2, [r2, #0]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800408a:	881b      	ldrh	r3, [r3, #0]
 800408c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004090:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	699a      	ldr	r2, [r3, #24]
 8004098:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800409c:	429a      	cmp	r2, r3
 800409e:	d307      	bcc.n	80040b0 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	619a      	str	r2, [r3, #24]
 80040ae:	e002      	b.n	80040b6 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2200      	movs	r2, #0
 80040b4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f040 80c4 	bne.w	8004248 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d126      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0x456>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040dc:	4413      	add	r3, r2
 80040de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e8:	4413      	add	r3, r2
 80040ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80040f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410e:	b29a      	uxth	r2, r3
 8004110:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e01a      	b.n	800414c <HAL_PCD_EP_DB_Transmit+0x48c>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d116      	bne.n	800414c <HAL_PCD_EP_DB_Transmit+0x48c>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	677b      	str	r3, [r7, #116]	; 0x74
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412c:	b29b      	uxth	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004132:	4413      	add	r3, r2
 8004134:	677b      	str	r3, [r7, #116]	; 0x74
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	011a      	lsls	r2, r3, #4
 800413c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800413e:	4413      	add	r3, r2
 8004140:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004144:	673b      	str	r3, [r7, #112]	; 0x70
 8004146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	67bb      	str	r3, [r7, #120]	; 0x78
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d12f      	bne.n	80041ba <HAL_PCD_EP_DB_Transmit+0x4fa>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416a:	b29b      	uxth	r3, r3
 800416c:	461a      	mov	r2, r3
 800416e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004172:	4413      	add	r3, r2
 8004174:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	011a      	lsls	r2, r3, #4
 800417e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004182:	4413      	add	r3, r2
 8004184:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800418c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004198:	b29a      	uxth	r2, r3
 800419a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800419e:	801a      	strh	r2, [r3, #0]
 80041a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041b6:	801a      	strh	r2, [r3, #0]
 80041b8:	e017      	b.n	80041ea <HAL_PCD_EP_DB_Transmit+0x52a>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	785b      	ldrb	r3, [r3, #1]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d113      	bne.n	80041ea <HAL_PCD_EP_DB_Transmit+0x52a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	461a      	mov	r2, r3
 80041ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041d0:	4413      	add	r3, r2
 80041d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	011a      	lsls	r2, r3, #4
 80041da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041dc:	4413      	add	r3, r2
 80041de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e6:	2200      	movs	r2, #0
 80041e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	4619      	mov	r1, r3
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f006 fd5e 	bl	800acb2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80041f6:	88fb      	ldrh	r3, [r7, #6]
 80041f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f040 8104 	bne.w	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	461a      	mov	r2, r3
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	b29b      	uxth	r3, r3
 8004214:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800421c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	461a      	mov	r2, r3
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	441a      	add	r2, r3
 800422e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800423a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800423e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]
 8004246:	e0e0      	b.n	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004248:	88fb      	ldrh	r3, [r7, #6]
 800424a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d121      	bne.n	8004296 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800426c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	441a      	add	r2, r3
 800427e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800428a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800428e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004292:	b29b      	uxth	r3, r3
 8004294:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800429c:	2b01      	cmp	r3, #1
 800429e:	f040 80b4 	bne.w	800440a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	695a      	ldr	r2, [r3, #20]
 80042a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042aa:	441a      	add	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042b8:	441a      	add	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d309      	bcc.n	80042de <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	6a1a      	ldr	r2, [r3, #32]
 80042d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d6:	1ad2      	subs	r2, r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	621a      	str	r2, [r3, #32]
 80042dc:	e015      	b.n	800430a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80042e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80042ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042f4:	e009      	b.n	800430a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2200      	movs	r2, #0
 8004300:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	667b      	str	r3, [r7, #100]	; 0x64
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	785b      	ldrb	r3, [r3, #1]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d155      	bne.n	80043c4 <HAL_PCD_EP_DB_Transmit+0x704>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004326:	b29b      	uxth	r3, r3
 8004328:	461a      	mov	r2, r3
 800432a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800432c:	4413      	add	r3, r2
 800432e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	011a      	lsls	r2, r3, #4
 8004336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004338:	4413      	add	r3, r2
 800433a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800433e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004342:	2b00      	cmp	r3, #0
 8004344:	d112      	bne.n	800436c <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	b29b      	uxth	r3, r3
 800434c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004350:	b29a      	uxth	r2, r3
 8004352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004354:	801a      	strh	r2, [r3, #0]
 8004356:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	b29b      	uxth	r3, r3
 800435c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004364:	b29a      	uxth	r2, r3
 8004366:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004368:	801a      	strh	r2, [r3, #0]
 800436a:	e044      	b.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x736>
 800436c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800436e:	2b3e      	cmp	r3, #62	; 0x3e
 8004370:	d811      	bhi.n	8004396 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	657b      	str	r3, [r7, #84]	; 0x54
 8004378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d002      	beq.n	8004388 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004384:	3301      	adds	r3, #1
 8004386:	657b      	str	r3, [r7, #84]	; 0x54
 8004388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800438a:	b29b      	uxth	r3, r3
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	b29a      	uxth	r2, r3
 8004390:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004392:	801a      	strh	r2, [r3, #0]
 8004394:	e02f      	b.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x736>
 8004396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004398:	095b      	lsrs	r3, r3, #5
 800439a:	657b      	str	r3, [r7, #84]	; 0x54
 800439c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d102      	bne.n	80043ac <HAL_PCD_EP_DB_Transmit+0x6ec>
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	3b01      	subs	r3, #1
 80043aa:	657b      	str	r3, [r7, #84]	; 0x54
 80043ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	029b      	lsls	r3, r3, #10
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043bc:	b29a      	uxth	r2, r3
 80043be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c0:	801a      	strh	r2, [r3, #0]
 80043c2:	e018      	b.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x736>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d114      	bne.n	80043f6 <HAL_PCD_EP_DB_Transmit+0x736>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043da:	4413      	add	r3, r2
 80043dc:	667b      	str	r3, [r7, #100]	; 0x64
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	011a      	lsls	r2, r3, #4
 80043e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e6:	4413      	add	r3, r2
 80043e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043ec:	663b      	str	r3, [r7, #96]	; 0x60
 80043ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043f4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6959      	ldr	r1, [r3, #20]
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	895a      	ldrh	r2, [r3, #10]
 8004402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004404:	b29b      	uxth	r3, r3
 8004406:	f004 fe0b 	bl	8009020 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4413      	add	r3, r2
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004424:	823b      	strh	r3, [r7, #16]
 8004426:	8a3b      	ldrh	r3, [r7, #16]
 8004428:	f083 0310 	eor.w	r3, r3, #16
 800442c:	823b      	strh	r3, [r7, #16]
 800442e:	8a3b      	ldrh	r3, [r7, #16]
 8004430:	f083 0320 	eor.w	r3, r3, #32
 8004434:	823b      	strh	r3, [r7, #16]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	441a      	add	r2, r3
 8004444:	8a3b      	ldrh	r3, [r7, #16]
 8004446:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800444a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800444e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004456:	b29b      	uxth	r3, r3
 8004458:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3788      	adds	r7, #136	; 0x88
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607b      	str	r3, [r7, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	4613      	mov	r3, r2
 8004474:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004476:	897b      	ldrh	r3, [r7, #10]
 8004478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447c:	b29b      	uxth	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00b      	beq.n	800449a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004482:	897b      	ldrh	r3, [r7, #10]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	00db      	lsls	r3, r3, #3
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
 8004498:	e009      	b.n	80044ae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800449a:	897a      	ldrh	r2, [r7, #10]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4413      	add	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80044ae:	893b      	ldrh	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d107      	bne.n	80044c4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2200      	movs	r2, #0
 80044b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	80da      	strh	r2, [r3, #6]
 80044c2:	e00b      	b.n	80044dc <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2201      	movs	r2, #1
 80044c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b086      	sub	sp, #24
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e272      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8087 	beq.w	8004616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004508:	4b92      	ldr	r3, [pc, #584]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b04      	cmp	r3, #4
 8004512:	d00c      	beq.n	800452e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004514:	4b8f      	ldr	r3, [pc, #572]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f003 030c 	and.w	r3, r3, #12
 800451c:	2b08      	cmp	r3, #8
 800451e:	d112      	bne.n	8004546 <HAL_RCC_OscConfig+0x5e>
 8004520:	4b8c      	ldr	r3, [pc, #560]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d10b      	bne.n	8004546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452e:	4b89      	ldr	r3, [pc, #548]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d06c      	beq.n	8004614 <HAL_RCC_OscConfig+0x12c>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d168      	bne.n	8004614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e24c      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x76>
 8004550:	4b80      	ldr	r3, [pc, #512]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a7f      	ldr	r2, [pc, #508]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e02e      	b.n	80045bc <HAL_RCC_OscConfig+0xd4>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x98>
 8004566:	4b7b      	ldr	r3, [pc, #492]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a7a      	ldr	r2, [pc, #488]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800456c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	4b78      	ldr	r3, [pc, #480]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a77      	ldr	r2, [pc, #476]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e01d      	b.n	80045bc <HAL_RCC_OscConfig+0xd4>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004588:	d10c      	bne.n	80045a4 <HAL_RCC_OscConfig+0xbc>
 800458a:	4b72      	ldr	r3, [pc, #456]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a71      	ldr	r2, [pc, #452]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6e      	ldr	r2, [pc, #440]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800459c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	e00b      	b.n	80045bc <HAL_RCC_OscConfig+0xd4>
 80045a4:	4b6b      	ldr	r3, [pc, #428]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a6a      	ldr	r2, [pc, #424]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]
 80045b0:	4b68      	ldr	r3, [pc, #416]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a67      	ldr	r2, [pc, #412]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c4:	f7fd ffdc 	bl	8002580 <HAL_GetTick>
 80045c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045cc:	f7fd ffd8 	bl	8002580 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b64      	cmp	r3, #100	; 0x64
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e200      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045de:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d0f0      	beq.n	80045cc <HAL_RCC_OscConfig+0xe4>
 80045ea:	e014      	b.n	8004616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ec:	f7fd ffc8 	bl	8002580 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045f4:	f7fd ffc4 	bl	8002580 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b64      	cmp	r3, #100	; 0x64
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e1ec      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004606:	4b53      	ldr	r3, [pc, #332]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x10c>
 8004612:	e000      	b.n	8004616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d063      	beq.n	80046ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004622:	4b4c      	ldr	r3, [pc, #304]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800462e:	4b49      	ldr	r3, [pc, #292]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b08      	cmp	r3, #8
 8004638:	d11c      	bne.n	8004674 <HAL_RCC_OscConfig+0x18c>
 800463a:	4b46      	ldr	r3, [pc, #280]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d116      	bne.n	8004674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004646:	4b43      	ldr	r3, [pc, #268]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_RCC_OscConfig+0x176>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d001      	beq.n	800465e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e1c0      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b3d      	ldr	r3, [pc, #244]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4939      	ldr	r1, [pc, #228]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004672:	e03a      	b.n	80046ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d020      	beq.n	80046be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800467c:	4b36      	ldr	r3, [pc, #216]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fd ff7d 	bl	8002580 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800468a:	f7fd ff79 	bl	8002580 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e1a1      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469c:	4b2d      	ldr	r3, [pc, #180]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a8:	4b2a      	ldr	r3, [pc, #168]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4927      	ldr	r1, [pc, #156]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	600b      	str	r3, [r1, #0]
 80046bc:	e015      	b.n	80046ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046be:	4b26      	ldr	r3, [pc, #152]	; (8004758 <HAL_RCC_OscConfig+0x270>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c4:	f7fd ff5c 	bl	8002580 <HAL_GetTick>
 80046c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ca:	e008      	b.n	80046de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046cc:	f7fd ff58 	bl	8002580 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e180      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046de:	4b1d      	ldr	r3, [pc, #116]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1f0      	bne.n	80046cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03a      	beq.n	800476c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d019      	beq.n	8004732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046fe:	4b17      	ldr	r3, [pc, #92]	; (800475c <HAL_RCC_OscConfig+0x274>)
 8004700:	2201      	movs	r2, #1
 8004702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004704:	f7fd ff3c 	bl	8002580 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800470c:	f7fd ff38 	bl	8002580 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e160      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCC_OscConfig+0x26c>)
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d0f0      	beq.n	800470c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800472a:	2001      	movs	r0, #1
 800472c:	f000 faa6 	bl	8004c7c <RCC_Delay>
 8004730:	e01c      	b.n	800476c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004732:	4b0a      	ldr	r3, [pc, #40]	; (800475c <HAL_RCC_OscConfig+0x274>)
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004738:	f7fd ff22 	bl	8002580 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473e:	e00f      	b.n	8004760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004740:	f7fd ff1e 	bl	8002580 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d908      	bls.n	8004760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e146      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	42420000 	.word	0x42420000
 800475c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004760:	4b92      	ldr	r3, [pc, #584]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1e9      	bne.n	8004740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80a6 	beq.w	80048c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477a:	2300      	movs	r3, #0
 800477c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800477e:	4b8b      	ldr	r3, [pc, #556]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10d      	bne.n	80047a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	4b88      	ldr	r3, [pc, #544]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	4a87      	ldr	r2, [pc, #540]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004794:	61d3      	str	r3, [r2, #28]
 8004796:	4b85      	ldr	r3, [pc, #532]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004798:	69db      	ldr	r3, [r3, #28]
 800479a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479e:	60bb      	str	r3, [r7, #8]
 80047a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a2:	2301      	movs	r3, #1
 80047a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a6:	4b82      	ldr	r3, [pc, #520]	; (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d118      	bne.n	80047e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b2:	4b7f      	ldr	r3, [pc, #508]	; (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a7e      	ldr	r2, [pc, #504]	; (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047be:	f7fd fedf 	bl	8002580 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c6:	f7fd fedb 	bl	8002580 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b64      	cmp	r3, #100	; 0x64
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e103      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d8:	4b75      	ldr	r3, [pc, #468]	; (80049b0 <HAL_RCC_OscConfig+0x4c8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d106      	bne.n	80047fa <HAL_RCC_OscConfig+0x312>
 80047ec:	4b6f      	ldr	r3, [pc, #444]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a6e      	ldr	r2, [pc, #440]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	e02d      	b.n	8004856 <HAL_RCC_OscConfig+0x36e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10c      	bne.n	800481c <HAL_RCC_OscConfig+0x334>
 8004802:	4b6a      	ldr	r3, [pc, #424]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4a69      	ldr	r2, [pc, #420]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f023 0301 	bic.w	r3, r3, #1
 800480c:	6213      	str	r3, [r2, #32]
 800480e:	4b67      	ldr	r3, [pc, #412]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	4a66      	ldr	r2, [pc, #408]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004814:	f023 0304 	bic.w	r3, r3, #4
 8004818:	6213      	str	r3, [r2, #32]
 800481a:	e01c      	b.n	8004856 <HAL_RCC_OscConfig+0x36e>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b05      	cmp	r3, #5
 8004822:	d10c      	bne.n	800483e <HAL_RCC_OscConfig+0x356>
 8004824:	4b61      	ldr	r3, [pc, #388]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a60      	ldr	r2, [pc, #384]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	6213      	str	r3, [r2, #32]
 8004830:	4b5e      	ldr	r3, [pc, #376]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	4a5d      	ldr	r2, [pc, #372]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004836:	f043 0301 	orr.w	r3, r3, #1
 800483a:	6213      	str	r3, [r2, #32]
 800483c:	e00b      	b.n	8004856 <HAL_RCC_OscConfig+0x36e>
 800483e:	4b5b      	ldr	r3, [pc, #364]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a5a      	ldr	r2, [pc, #360]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6213      	str	r3, [r2, #32]
 800484a:	4b58      	ldr	r3, [pc, #352]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	4a57      	ldr	r2, [pc, #348]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004850:	f023 0304 	bic.w	r3, r3, #4
 8004854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d015      	beq.n	800488a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485e:	f7fd fe8f 	bl	8002580 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004864:	e00a      	b.n	800487c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004866:	f7fd fe8b 	bl	8002580 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	f241 3288 	movw	r2, #5000	; 0x1388
 8004874:	4293      	cmp	r3, r2
 8004876:	d901      	bls.n	800487c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004878:	2303      	movs	r3, #3
 800487a:	e0b1      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487c:	4b4b      	ldr	r3, [pc, #300]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ee      	beq.n	8004866 <HAL_RCC_OscConfig+0x37e>
 8004888:	e014      	b.n	80048b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fd fe79 	bl	8002580 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004890:	e00a      	b.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004892:	f7fd fe75 	bl	8002580 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e09b      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a8:	4b40      	ldr	r3, [pc, #256]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ee      	bne.n	8004892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048b4:	7dfb      	ldrb	r3, [r7, #23]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d105      	bne.n	80048c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ba:	4b3c      	ldr	r3, [pc, #240]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4a3b      	ldr	r2, [pc, #236]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8087 	beq.w	80049de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048d0:	4b36      	ldr	r3, [pc, #216]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d061      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d146      	bne.n	8004972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048e4:	4b33      	ldr	r3, [pc, #204]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ea:	f7fd fe49 	bl	8002580 <HAL_GetTick>
 80048ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f0:	e008      	b.n	8004904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f2:	f7fd fe45 	bl	8002580 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d901      	bls.n	8004904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e06d      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004904:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1f0      	bne.n	80048f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004918:	d108      	bne.n	800492c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800491a:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	4921      	ldr	r1, [pc, #132]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004928:	4313      	orrs	r3, r2
 800492a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492c:	4b1f      	ldr	r3, [pc, #124]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a19      	ldr	r1, [r3, #32]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	430b      	orrs	r3, r1
 800493e:	491b      	ldr	r1, [pc, #108]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004944:	4b1b      	ldr	r3, [pc, #108]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004946:	2201      	movs	r2, #1
 8004948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494a:	f7fd fe19 	bl	8002580 <HAL_GetTick>
 800494e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004950:	e008      	b.n	8004964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004952:	f7fd fe15 	bl	8002580 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b02      	cmp	r3, #2
 800495e:	d901      	bls.n	8004964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e03d      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004964:	4b11      	ldr	r3, [pc, #68]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d0f0      	beq.n	8004952 <HAL_RCC_OscConfig+0x46a>
 8004970:	e035      	b.n	80049de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004972:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fd fe02 	bl	8002580 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004980:	f7fd fdfe 	bl	8002580 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e026      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_OscConfig+0x4c4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0x498>
 800499e:	e01e      	b.n	80049de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d107      	bne.n	80049b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e019      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40007000 	.word	0x40007000
 80049b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049b8:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <HAL_RCC_OscConfig+0x500>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d106      	bne.n	80049da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d001      	beq.n	80049de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000

080049ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0d0      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a00:	4b6a      	ldr	r3, [pc, #424]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0307 	and.w	r3, r3, #7
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d910      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0e:	4b67      	ldr	r3, [pc, #412]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f023 0207 	bic.w	r2, r3, #7
 8004a16:	4965      	ldr	r1, [pc, #404]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0b8      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a52:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a66:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a6a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	494d      	ldr	r1, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d040      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d115      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aaa:	4b41      	ldr	r3, [pc, #260]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e073      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aba:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e06b      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004aca:	4b39      	ldr	r3, [pc, #228]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4936      	ldr	r1, [pc, #216]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004adc:	f7fd fd50 	bl	8002580 <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae4:	f7fd fd4c 	bl	8002580 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e053      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	4b2d      	ldr	r3, [pc, #180]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f003 020c 	and.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1eb      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b0c:	4b27      	ldr	r3, [pc, #156]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d210      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1a:	4b24      	ldr	r3, [pc, #144]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f023 0207 	bic.w	r2, r3, #7
 8004b22:	4922      	ldr	r1, [pc, #136]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_ClockConfig+0x1c0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8c:	5ccb      	ldrb	r3, [r1, r3]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1d0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd fcae 	bl	80024fc <HAL_InitTick>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	0800ce94 	.word	0x0800ce94
 8004bb8:	20000048 	.word	0x20000048
 8004bbc:	2000004c 	.word	0x2000004c

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	b490      	push	{r4, r7}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_RCC_GetSysClockFreq+0xac>)
 8004bc8:	1d3c      	adds	r4, r7, #4
 8004bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004bd0:	f240 2301 	movw	r3, #513	; 0x201
 8004bd4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	61bb      	str	r3, [r7, #24]
 8004bde:	2300      	movs	r3, #0
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
 8004be2:	2300      	movs	r3, #0
 8004be4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bea:	4b21      	ldr	r3, [pc, #132]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d002      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x40>
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d003      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x46>
 8004bfe:	e02b      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c00:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c02:	623b      	str	r3, [r7, #32]
      break;
 8004c04:	e02b      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	0c9b      	lsrs	r3, r3, #18
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	3328      	adds	r3, #40	; 0x28
 8004c10:	443b      	add	r3, r7
 8004c12:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004c16:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d012      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c22:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	0c5b      	lsrs	r3, r3, #17
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	3328      	adds	r3, #40	; 0x28
 8004c2e:	443b      	add	r3, r7
 8004c30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004c34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4a0e      	ldr	r2, [pc, #56]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c3a:	fb03 f202 	mul.w	r2, r3, r2
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
 8004c46:	e004      	b.n	8004c52 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	4a0b      	ldr	r2, [pc, #44]	; (8004c78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	623b      	str	r3, [r7, #32]
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004c5a:	623b      	str	r3, [r7, #32]
      break;
 8004c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3728      	adds	r7, #40	; 0x28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc90      	pop	{r4, r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	0800ce40 	.word	0x0800ce40
 8004c70:	40021000 	.word	0x40021000
 8004c74:	007a1200 	.word	0x007a1200
 8004c78:	003d0900 	.word	0x003d0900

08004c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <RCC_Delay+0x34>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <RCC_Delay+0x38>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	0a5b      	lsrs	r3, r3, #9
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	fb02 f303 	mul.w	r3, r2, r3
 8004c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c98:	bf00      	nop
  }
  while (Delay --);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	60fa      	str	r2, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f9      	bne.n	8004c98 <RCC_Delay+0x1c>
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr
 8004cb0:	20000048 	.word	0x20000048
 8004cb4:	10624dd3 	.word	0x10624dd3

08004cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b086      	sub	sp, #24
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d07d      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd8:	4b4f      	ldr	r3, [pc, #316]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cda:	69db      	ldr	r3, [r3, #28]
 8004cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10d      	bne.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce4:	4b4c      	ldr	r3, [pc, #304]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	4a4b      	ldr	r2, [pc, #300]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cee:	61d3      	str	r3, [r2, #28]
 8004cf0:	4b49      	ldr	r3, [pc, #292]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	60bb      	str	r3, [r7, #8]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	4b46      	ldr	r3, [pc, #280]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d118      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0c:	4b43      	ldr	r3, [pc, #268]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a42      	ldr	r2, [pc, #264]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d18:	f7fd fc32 	bl	8002580 <HAL_GetTick>
 8004d1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1e:	e008      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d20:	f7fd fc2e 	bl	8002580 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b64      	cmp	r3, #100	; 0x64
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e06d      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d32:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0f0      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d3e:	4b36      	ldr	r3, [pc, #216]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02e      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d027      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d5c:	4b2e      	ldr	r3, [pc, #184]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d66:	4b2e      	ldr	r3, [pc, #184]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d72:	4a29      	ldr	r2, [pc, #164]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d014      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d82:	f7fd fbfd 	bl	8002580 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d88:	e00a      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d8a:	f7fd fbf9 	bl	8002580 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d901      	bls.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e036      	b.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da0:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d0ee      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dac:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4917      	ldr	r1, [pc, #92]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc4:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ddc:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	490b      	ldr	r1, [pc, #44]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0310 	and.w	r3, r3, #16
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	4904      	ldr	r1, [pc, #16]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	42420440 	.word	0x42420440

08004e24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e076      	b.n	8004f24 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e46:	d009      	beq.n	8004e5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	61da      	str	r2, [r3, #28]
 8004e4e:	e005      	b.n	8004e5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd f9d6 	bl	8002228 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e92:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	0c1a      	lsrs	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f002 0204 	and.w	r2, r2, #4
 8004f02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	69da      	ldr	r2, [r3, #28]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b088      	sub	sp, #32
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_SPI_Transmit+0x22>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e126      	b.n	800519c <HAL_SPI_Transmit+0x270>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f56:	f7fd fb13 	bl	8002580 <HAL_GetTick>
 8004f5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004f5c:	88fb      	ldrh	r3, [r7, #6]
 8004f5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d002      	beq.n	8004f72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f70:	e10b      	b.n	800518a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d002      	beq.n	8004f7e <HAL_SPI_Transmit+0x52>
 8004f78:	88fb      	ldrh	r3, [r7, #6]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d102      	bne.n	8004f84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004f82:	e102      	b.n	800518a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2203      	movs	r2, #3
 8004f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	88fa      	ldrh	r2, [r7, #6]
 8004f9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	88fa      	ldrh	r2, [r7, #6]
 8004fa2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fca:	d10f      	bne.n	8004fec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d007      	beq.n	800500a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005008:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005012:	d14b      	bne.n	80050ac <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d002      	beq.n	8005022 <HAL_SPI_Transmit+0xf6>
 800501c:	8afb      	ldrh	r3, [r7, #22]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d13e      	bne.n	80050a0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005026:	881a      	ldrh	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005032:	1c9a      	adds	r2, r3, #2
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503c:	b29b      	uxth	r3, r3
 800503e:	3b01      	subs	r3, #1
 8005040:	b29a      	uxth	r2, r3
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005046:	e02b      	b.n	80050a0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b02      	cmp	r3, #2
 8005054:	d112      	bne.n	800507c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505a:	881a      	ldrh	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005066:	1c9a      	adds	r2, r3, #2
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b29a      	uxth	r2, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	86da      	strh	r2, [r3, #54]	; 0x36
 800507a:	e011      	b.n	80050a0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800507c:	f7fd fa80 	bl	8002580 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d803      	bhi.n	8005094 <HAL_SPI_Transmit+0x168>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005092:	d102      	bne.n	800509a <HAL_SPI_Transmit+0x16e>
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d102      	bne.n	80050a0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800509e:	e074      	b.n	800518a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1ce      	bne.n	8005048 <HAL_SPI_Transmit+0x11c>
 80050aa:	e04c      	b.n	8005146 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_SPI_Transmit+0x18e>
 80050b4:	8afb      	ldrh	r3, [r7, #22]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d140      	bne.n	800513c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	7812      	ldrb	r2, [r2, #0]
 80050c6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	3b01      	subs	r3, #1
 80050da:	b29a      	uxth	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80050e0:	e02c      	b.n	800513c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d113      	bne.n	8005118 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800510c:	b29b      	uxth	r3, r3
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	86da      	strh	r2, [r3, #54]	; 0x36
 8005116:	e011      	b.n	800513c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005118:	f7fd fa32 	bl	8002580 <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d803      	bhi.n	8005130 <HAL_SPI_Transmit+0x204>
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800512e:	d102      	bne.n	8005136 <HAL_SPI_Transmit+0x20a>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	77fb      	strb	r3, [r7, #31]
          goto error;
 800513a:	e026      	b.n	800518a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1cd      	bne.n	80050e2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	6839      	ldr	r1, [r7, #0]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f000 fa62 	bl	8005614 <SPI_EndRxTxTransaction>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005164:	2300      	movs	r3, #0
 8005166:	613b      	str	r3, [r7, #16]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	613b      	str	r3, [r7, #16]
 8005178:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	77fb      	strb	r3, [r7, #31]
 8005186:	e000      	b.n	800518a <HAL_SPI_Transmit+0x25e>
  }

error:
 8005188:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800519a:	7ffb      	ldrb	r3, [r7, #31]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3720      	adds	r7, #32
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08c      	sub	sp, #48	; 0x30
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80051b2:	2301      	movs	r3, #1
 80051b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_SPI_TransmitReceive+0x26>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e18a      	b.n	80054e0 <HAL_SPI_TransmitReceive+0x33c>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051d2:	f7fd f9d5 	bl	8002580 <HAL_GetTick>
 80051d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d00f      	beq.n	8005214 <HAL_SPI_TransmitReceive+0x70>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051fa:	d107      	bne.n	800520c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <HAL_SPI_TransmitReceive+0x68>
 8005204:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005208:	2b04      	cmp	r3, #4
 800520a:	d003      	beq.n	8005214 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800520c:	2302      	movs	r3, #2
 800520e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005212:	e15b      	b.n	80054cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x82>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x82>
 8005220:	887b      	ldrh	r3, [r7, #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d103      	bne.n	800522e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800522c:	e14e      	b.n	80054cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b04      	cmp	r3, #4
 8005238:	d003      	beq.n	8005242 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2205      	movs	r2, #5
 800523e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	887a      	ldrh	r2, [r7, #2]
 8005252:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	887a      	ldrh	r2, [r7, #2]
 8005258:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	887a      	ldrh	r2, [r7, #2]
 8005264:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	887a      	ldrh	r2, [r7, #2]
 800526a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005282:	2b40      	cmp	r3, #64	; 0x40
 8005284:	d007      	beq.n	8005296 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	681a      	ldr	r2, [r3, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005294:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800529e:	d178      	bne.n	8005392 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d002      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x10a>
 80052a8:	8b7b      	ldrh	r3, [r7, #26]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d166      	bne.n	800537c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b2:	881a      	ldrh	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	1c9a      	adds	r2, r3, #2
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	3b01      	subs	r3, #1
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052d2:	e053      	b.n	800537c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d11b      	bne.n	800531a <HAL_SPI_TransmitReceive+0x176>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d016      	beq.n	800531a <HAL_SPI_TransmitReceive+0x176>
 80052ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d113      	bne.n	800531a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f6:	881a      	ldrh	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	1c9a      	adds	r2, r3, #2
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800530c:	b29b      	uxth	r3, r3
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005316:	2300      	movs	r3, #0
 8005318:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d119      	bne.n	800535c <HAL_SPI_TransmitReceive+0x1b8>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d014      	beq.n	800535c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	b292      	uxth	r2, r2
 800533e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005358:	2301      	movs	r3, #1
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800535c:	f7fd f910 	bl	8002580 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005368:	429a      	cmp	r2, r3
 800536a:	d807      	bhi.n	800537c <HAL_SPI_TransmitReceive+0x1d8>
 800536c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005372:	d003      	beq.n	800537c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800537a:	e0a7      	b.n	80054cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1a6      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x130>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800538a:	b29b      	uxth	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1a1      	bne.n	80052d4 <HAL_SPI_TransmitReceive+0x130>
 8005390:	e07c      	b.n	800548c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <HAL_SPI_TransmitReceive+0x1fc>
 800539a:	8b7b      	ldrh	r3, [r7, #26]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d16b      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	7812      	ldrb	r2, [r2, #0]
 80053ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053c6:	e057      	b.n	8005478 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d11c      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x26c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <HAL_SPI_TransmitReceive+0x26c>
 80053e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d114      	bne.n	8005410 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	1c5a      	adds	r2, r3, #1
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005402:	b29b      	uxth	r3, r3
 8005404:	3b01      	subs	r3, #1
 8005406:	b29a      	uxth	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800540c:	2300      	movs	r3, #0
 800540e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b01      	cmp	r3, #1
 800541c:	d119      	bne.n	8005452 <HAL_SPI_TransmitReceive+0x2ae>
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005422:	b29b      	uxth	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d014      	beq.n	8005452 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800543a:	1c5a      	adds	r2, r3, #1
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005444:	b29b      	uxth	r3, r3
 8005446:	3b01      	subs	r3, #1
 8005448:	b29a      	uxth	r2, r3
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800544e:	2301      	movs	r3, #1
 8005450:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005452:	f7fd f895 	bl	8002580 <HAL_GetTick>
 8005456:	4602      	mov	r2, r0
 8005458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545a:	1ad3      	subs	r3, r2, r3
 800545c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800545e:	429a      	cmp	r2, r3
 8005460:	d803      	bhi.n	800546a <HAL_SPI_TransmitReceive+0x2c6>
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005468:	d102      	bne.n	8005470 <HAL_SPI_TransmitReceive+0x2cc>
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005476:	e029      	b.n	80054cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d1a2      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x224>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d19d      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800548c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800548e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f8bf 	bl	8005614 <SPI_EndRxTxTransaction>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d006      	beq.n	80054aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80054a8:	e010      	b.n	80054cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10b      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054b2:	2300      	movs	r3, #0
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	617b      	str	r3, [r7, #20]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	617b      	str	r3, [r7, #20]
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	e000      	b.n	80054cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80054ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3730      	adds	r7, #48	; 0x30
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f6:	b2db      	uxtb	r3, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
	...

08005504 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b088      	sub	sp, #32
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	603b      	str	r3, [r7, #0]
 8005510:	4613      	mov	r3, r2
 8005512:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005514:	f7fd f834 	bl	8002580 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	4413      	add	r3, r2
 8005522:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005524:	f7fd f82c 	bl	8002580 <HAL_GetTick>
 8005528:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800552a:	4b39      	ldr	r3, [pc, #228]	; (8005610 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	015b      	lsls	r3, r3, #5
 8005530:	0d1b      	lsrs	r3, r3, #20
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800553a:	e054      	b.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005542:	d050      	beq.n	80055e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005544:	f7fd f81c 	bl	8002580 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	429a      	cmp	r2, r3
 8005552:	d902      	bls.n	800555a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d13d      	bne.n	80055d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005568:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005572:	d111      	bne.n	8005598 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557c:	d004      	beq.n	8005588 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005586:	d107      	bne.n	8005598 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055a0:	d10f      	bne.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055b0:	601a      	str	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e017      	b.n	8005606 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689a      	ldr	r2, [r3, #8]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	4013      	ands	r3, r2
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	bf0c      	ite	eq
 80055f6:	2301      	moveq	r3, #1
 80055f8:	2300      	movne	r3, #0
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	461a      	mov	r2, r3
 80055fe:	79fb      	ldrb	r3, [r7, #7]
 8005600:	429a      	cmp	r2, r3
 8005602:	d19b      	bne.n	800553c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3720      	adds	r7, #32
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20000048 	.word	0x20000048

08005614 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af02      	add	r7, sp, #8
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2200      	movs	r2, #0
 8005628:	2180      	movs	r1, #128	; 0x80
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f7ff ff6a 	bl	8005504 <SPI_WaitFlagStateUntilTimeout>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d007      	beq.n	8005646 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e000      	b.n	8005648 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e041      	b.n	80056e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc fe20 	bl	80022bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4619      	mov	r1, r3
 800568e:	4610      	mov	r0, r2
 8005690:	f000 fc28 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b01      	cmp	r3, #1
 8005702:	d001      	beq.n	8005708 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e03a      	b.n	800577e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_TIM_Base_Start_IT+0x98>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00e      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x58>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005732:	d009      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x58>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a14      	ldr	r2, [pc, #80]	; (800578c <HAL_TIM_Base_Start_IT+0x9c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0x58>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a13      	ldr	r2, [pc, #76]	; (8005790 <HAL_TIM_Base_Start_IT+0xa0>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d111      	bne.n	800576c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b06      	cmp	r3, #6
 8005758:	d010      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f042 0201 	orr.w	r2, r2, #1
 8005768:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800576a:	e007      	b.n	800577c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bc80      	pop	{r7}
 8005786:	4770      	bx	lr
 8005788:	40012c00 	.word	0x40012c00
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800

08005794 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e041      	b.n	800582a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d106      	bne.n	80057c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f839 	bl	8005832 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4619      	mov	r1, r3
 80057d2:	4610      	mov	r0, r2
 80057d4:	f000 fb86 	bl	8005ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005832:	b480      	push	{r7}
 8005834:	b083      	sub	sp, #12
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800583a:	bf00      	nop
 800583c:	370c      	adds	r7, #12
 800583e:	46bd      	mov	sp, r7
 8005840:	bc80      	pop	{r7}
 8005842:	4770      	bx	lr

08005844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d109      	bne.n	8005868 <HAL_TIM_PWM_Start+0x24>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b01      	cmp	r3, #1
 800585e:	bf14      	ite	ne
 8005860:	2301      	movne	r3, #1
 8005862:	2300      	moveq	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	e022      	b.n	80058ae <HAL_TIM_PWM_Start+0x6a>
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	2b04      	cmp	r3, #4
 800586c:	d109      	bne.n	8005882 <HAL_TIM_PWM_Start+0x3e>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	bf14      	ite	ne
 800587a:	2301      	movne	r3, #1
 800587c:	2300      	moveq	r3, #0
 800587e:	b2db      	uxtb	r3, r3
 8005880:	e015      	b.n	80058ae <HAL_TIM_PWM_Start+0x6a>
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b08      	cmp	r3, #8
 8005886:	d109      	bne.n	800589c <HAL_TIM_PWM_Start+0x58>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b01      	cmp	r3, #1
 8005892:	bf14      	ite	ne
 8005894:	2301      	movne	r3, #1
 8005896:	2300      	moveq	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	e008      	b.n	80058ae <HAL_TIM_PWM_Start+0x6a>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e05e      	b.n	8005974 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d104      	bne.n	80058c6 <HAL_TIM_PWM_Start+0x82>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c4:	e013      	b.n	80058ee <HAL_TIM_PWM_Start+0xaa>
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d104      	bne.n	80058d6 <HAL_TIM_PWM_Start+0x92>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2202      	movs	r2, #2
 80058d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d4:	e00b      	b.n	80058ee <HAL_TIM_PWM_Start+0xaa>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b08      	cmp	r3, #8
 80058da:	d104      	bne.n	80058e6 <HAL_TIM_PWM_Start+0xa2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e4:	e003      	b.n	80058ee <HAL_TIM_PWM_Start+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2202      	movs	r2, #2
 80058ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2201      	movs	r2, #1
 80058f4:	6839      	ldr	r1, [r7, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fd74 	bl	80063e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1e      	ldr	r2, [pc, #120]	; (800597c <HAL_TIM_PWM_Start+0x138>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d107      	bne.n	8005916 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005914:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_TIM_PWM_Start+0x138>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00e      	beq.n	800593e <HAL_TIM_PWM_Start+0xfa>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005928:	d009      	beq.n	800593e <HAL_TIM_PWM_Start+0xfa>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a14      	ldr	r2, [pc, #80]	; (8005980 <HAL_TIM_PWM_Start+0x13c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d004      	beq.n	800593e <HAL_TIM_PWM_Start+0xfa>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a12      	ldr	r2, [pc, #72]	; (8005984 <HAL_TIM_PWM_Start+0x140>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d111      	bne.n	8005962 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b06      	cmp	r3, #6
 800594e:	d010      	beq.n	8005972 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005960:	e007      	b.n	8005972 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f042 0201 	orr.w	r2, r2, #1
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800

08005988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	f003 0302 	and.w	r3, r3, #2
 800599a:	2b02      	cmp	r3, #2
 800599c:	d122      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d11b      	bne.n	80059e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0202 	mvn.w	r2, #2
 80059b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f003 0303 	and.w	r3, r3, #3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa6f 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 80059d0:	e005      	b.n	80059de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fa62 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fa71 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d122      	bne.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d11b      	bne.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0204 	mvn.w	r2, #4
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 fa45 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fa38 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fa47 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d122      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d11b      	bne.n	8005a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0208 	mvn.w	r2, #8
 8005a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2204      	movs	r2, #4
 8005a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa1b 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 8005a78:	e005      	b.n	8005a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fa0e 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fa1d 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b10      	cmp	r3, #16
 8005a98:	d122      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b10      	cmp	r3, #16
 8005aa6:	d11b      	bne.n	8005ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f06f 0210 	mvn.w	r2, #16
 8005ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2208      	movs	r2, #8
 8005ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d003      	beq.n	8005ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f9f1 	bl	8005eae <HAL_TIM_IC_CaptureCallback>
 8005acc:	e005      	b.n	8005ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f9e4 	bl	8005e9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f9f3 	bl	8005ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d10e      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d107      	bne.n	8005b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0201 	mvn.w	r2, #1
 8005b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7fb ff1a 	bl	8001940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	d10e      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d107      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 fd32 	bl	800659c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b42:	2b40      	cmp	r3, #64	; 0x40
 8005b44:	d10e      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d107      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f9b7 	bl	8005ed2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0320 	and.w	r3, r3, #32
 8005b6e:	2b20      	cmp	r3, #32
 8005b70:	d10e      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0220 	mvn.w	r2, #32
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fcfd 	bl	800658a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d101      	bne.n	8005bb2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005bae:	2302      	movs	r3, #2
 8005bb0:	e0ac      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b0c      	cmp	r3, #12
 8005bbe:	f200 809f 	bhi.w	8005d00 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005bc2:	a201      	add	r2, pc, #4	; (adr r2, 8005bc8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bfd 	.word	0x08005bfd
 8005bcc:	08005d01 	.word	0x08005d01
 8005bd0:	08005d01 	.word	0x08005d01
 8005bd4:	08005d01 	.word	0x08005d01
 8005bd8:	08005c3d 	.word	0x08005c3d
 8005bdc:	08005d01 	.word	0x08005d01
 8005be0:	08005d01 	.word	0x08005d01
 8005be4:	08005d01 	.word	0x08005d01
 8005be8:	08005c7f 	.word	0x08005c7f
 8005bec:	08005d01 	.word	0x08005d01
 8005bf0:	08005d01 	.word	0x08005d01
 8005bf4:	08005d01 	.word	0x08005d01
 8005bf8:	08005cbf 	.word	0x08005cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68b9      	ldr	r1, [r7, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f9d0 	bl	8005fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0208 	orr.w	r2, r2, #8
 8005c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	699a      	ldr	r2, [r3, #24]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0204 	bic.w	r2, r2, #4
 8005c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6999      	ldr	r1, [r3, #24]
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	691a      	ldr	r2, [r3, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	619a      	str	r2, [r3, #24]
      break;
 8005c3a:	e062      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 fa16 	bl	8006074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	699a      	ldr	r2, [r3, #24]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6999      	ldr	r1, [r3, #24]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	021a      	lsls	r2, r3, #8
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	619a      	str	r2, [r3, #24]
      break;
 8005c7c:	e041      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68b9      	ldr	r1, [r7, #8]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f000 fa5f 	bl	8006148 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69da      	ldr	r2, [r3, #28]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f042 0208 	orr.w	r2, r2, #8
 8005c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	69da      	ldr	r2, [r3, #28]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0204 	bic.w	r2, r2, #4
 8005ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	69d9      	ldr	r1, [r3, #28]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	430a      	orrs	r2, r1
 8005cba:	61da      	str	r2, [r3, #28]
      break;
 8005cbc:	e021      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 faa9 	bl	800621c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69da      	ldr	r2, [r3, #28]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69d9      	ldr	r1, [r3, #28]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	021a      	lsls	r2, r3, #8
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	61da      	str	r2, [r3, #28]
      break;
 8005cfe:	e000      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005d00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d101      	bne.n	8005d2c <HAL_TIM_ConfigClockSource+0x18>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e0b3      	b.n	8005e94 <HAL_TIM_ConfigClockSource+0x180>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2202      	movs	r2, #2
 8005d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d64:	d03e      	beq.n	8005de4 <HAL_TIM_ConfigClockSource+0xd0>
 8005d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d6a:	f200 8087 	bhi.w	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	f000 8085 	beq.w	8005e80 <HAL_TIM_ConfigClockSource+0x16c>
 8005d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7a:	d87f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005d7c:	2b70      	cmp	r3, #112	; 0x70
 8005d7e:	d01a      	beq.n	8005db6 <HAL_TIM_ConfigClockSource+0xa2>
 8005d80:	2b70      	cmp	r3, #112	; 0x70
 8005d82:	d87b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005d84:	2b60      	cmp	r3, #96	; 0x60
 8005d86:	d050      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0x116>
 8005d88:	2b60      	cmp	r3, #96	; 0x60
 8005d8a:	d877      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005d8c:	2b50      	cmp	r3, #80	; 0x50
 8005d8e:	d03c      	beq.n	8005e0a <HAL_TIM_ConfigClockSource+0xf6>
 8005d90:	2b50      	cmp	r3, #80	; 0x50
 8005d92:	d873      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005d94:	2b40      	cmp	r3, #64	; 0x40
 8005d96:	d058      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x136>
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d86f      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005d9c:	2b30      	cmp	r3, #48	; 0x30
 8005d9e:	d064      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x156>
 8005da0:	2b30      	cmp	r3, #48	; 0x30
 8005da2:	d86b      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005da4:	2b20      	cmp	r3, #32
 8005da6:	d060      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x156>
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d867      	bhi.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d05c      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x156>
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d05a      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005db4:	e062      	b.n	8005e7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	6899      	ldr	r1, [r3, #8]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f000 faee 	bl	80063a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	609a      	str	r2, [r3, #8]
      break;
 8005de2:	e04e      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	6899      	ldr	r1, [r3, #8]
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	f000 fad7 	bl	80063a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e06:	609a      	str	r2, [r3, #8]
      break;
 8005e08:	e03b      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6818      	ldr	r0, [r3, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6859      	ldr	r1, [r3, #4]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	461a      	mov	r2, r3
 8005e18:	f000 fa4e 	bl	80062b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2150      	movs	r1, #80	; 0x50
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 faa5 	bl	8006372 <TIM_ITRx_SetConfig>
      break;
 8005e28:	e02b      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 fa6c 	bl	8006314 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2160      	movs	r1, #96	; 0x60
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fa95 	bl	8006372 <TIM_ITRx_SetConfig>
      break;
 8005e48:	e01b      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 fa2e 	bl	80062b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2140      	movs	r1, #64	; 0x40
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fa85 	bl	8006372 <TIM_ITRx_SetConfig>
      break;
 8005e68:	e00b      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4619      	mov	r1, r3
 8005e74:	4610      	mov	r0, r2
 8005e76:	f000 fa7c 	bl	8006372 <TIM_ITRx_SetConfig>
        break;
 8005e7a:	e002      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e7c:	bf00      	nop
 8005e7e:	e000      	b.n	8005e82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bc80      	pop	{r7}
 8005eac:	4770      	bx	lr

08005eae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b083      	sub	sp, #12
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bc80      	pop	{r7}
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bc80      	pop	{r7}
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr

08005ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a29      	ldr	r2, [pc, #164]	; (8005f9c <TIM_Base_SetConfig+0xb8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00b      	beq.n	8005f14 <TIM_Base_SetConfig+0x30>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f02:	d007      	beq.n	8005f14 <TIM_Base_SetConfig+0x30>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a26      	ldr	r2, [pc, #152]	; (8005fa0 <TIM_Base_SetConfig+0xbc>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_Base_SetConfig+0x30>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a25      	ldr	r2, [pc, #148]	; (8005fa4 <TIM_Base_SetConfig+0xc0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d108      	bne.n	8005f26 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <TIM_Base_SetConfig+0xb8>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d00b      	beq.n	8005f46 <TIM_Base_SetConfig+0x62>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f34:	d007      	beq.n	8005f46 <TIM_Base_SetConfig+0x62>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a19      	ldr	r2, [pc, #100]	; (8005fa0 <TIM_Base_SetConfig+0xbc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d003      	beq.n	8005f46 <TIM_Base_SetConfig+0x62>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a18      	ldr	r2, [pc, #96]	; (8005fa4 <TIM_Base_SetConfig+0xc0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d108      	bne.n	8005f58 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a07      	ldr	r2, [pc, #28]	; (8005f9c <TIM_Base_SetConfig+0xb8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d103      	bne.n	8005f8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	615a      	str	r2, [r3, #20]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bc80      	pop	{r7}
 8005f9a:	4770      	bx	lr
 8005f9c:	40012c00 	.word	0x40012c00
 8005fa0:	40000400 	.word	0x40000400
 8005fa4:	40000800 	.word	0x40000800

08005fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 0302 	bic.w	r3, r3, #2
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <TIM_OC1_SetConfig+0xc8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10c      	bne.n	800601e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0308 	bic.w	r3, r3, #8
 800600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a13      	ldr	r2, [pc, #76]	; (8006070 <TIM_OC1_SetConfig+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d111      	bne.n	800604a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800602c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	4313      	orrs	r3, r2
 800603e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	693a      	ldr	r2, [r7, #16]
 8006046:	4313      	orrs	r3, r2
 8006048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	621a      	str	r2, [r3, #32]
}
 8006064:	bf00      	nop
 8006066:	371c      	adds	r7, #28
 8006068:	46bd      	mov	sp, r7
 800606a:	bc80      	pop	{r7}
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00

08006074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f023 0210 	bic.w	r2, r3, #16
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	021b      	lsls	r3, r3, #8
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f023 0320 	bic.w	r3, r3, #32
 80060be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a1d      	ldr	r2, [pc, #116]	; (8006144 <TIM_OC2_SetConfig+0xd0>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10d      	bne.n	80060f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a14      	ldr	r2, [pc, #80]	; (8006144 <TIM_OC2_SetConfig+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d113      	bne.n	8006120 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	621a      	str	r2, [r3, #32]
}
 800613a:	bf00      	nop
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	bc80      	pop	{r7}
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00

08006148 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0303 	bic.w	r3, r3, #3
 800617e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006190:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a1d      	ldr	r2, [pc, #116]	; (8006218 <TIM_OC3_SetConfig+0xd0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10d      	bne.n	80061c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	021b      	lsls	r3, r3, #8
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a14      	ldr	r2, [pc, #80]	; (8006218 <TIM_OC3_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d113      	bne.n	80061f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	697a      	ldr	r2, [r7, #20]
 800620a:	621a      	str	r2, [r3, #32]
}
 800620c:	bf00      	nop
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr
 8006216:	bf00      	nop
 8006218:	40012c00 	.word	0x40012c00

0800621c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800624a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	021b      	lsls	r3, r3, #8
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	031b      	lsls	r3, r3, #12
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a0f      	ldr	r2, [pc, #60]	; (80062b4 <TIM_OC4_SetConfig+0x98>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d109      	bne.n	8006290 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006282:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	019b      	lsls	r3, r3, #6
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	4313      	orrs	r3, r2
 800628e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr
 80062b4:	40012c00 	.word	0x40012c00

080062b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b087      	sub	sp, #28
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0201 	bic.w	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f023 030a 	bic.w	r3, r3, #10
 80062f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	621a      	str	r2, [r3, #32]
}
 800630a:	bf00      	nop
 800630c:	371c      	adds	r7, #28
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b087      	sub	sp, #28
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	f023 0210 	bic.w	r2, r3, #16
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800633e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	031b      	lsls	r3, r3, #12
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006350:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	011b      	lsls	r3, r3, #4
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4313      	orrs	r3, r2
 800635a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	621a      	str	r2, [r3, #32]
}
 8006368:	bf00      	nop
 800636a:	371c      	adds	r7, #28
 800636c:	46bd      	mov	sp, r7
 800636e:	bc80      	pop	{r7}
 8006370:	4770      	bx	lr

08006372 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006388:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4313      	orrs	r3, r2
 8006390:	f043 0307 	orr.w	r3, r3, #7
 8006394:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	609a      	str	r2, [r3, #8]
}
 800639c:	bf00      	nop
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b087      	sub	sp, #28
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
 80063b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	021a      	lsls	r2, r3, #8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	431a      	orrs	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	609a      	str	r2, [r3, #8]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr

080063e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f003 031f 	and.w	r3, r3, #31
 80063f6:	2201      	movs	r2, #1
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6a1a      	ldr	r2, [r3, #32]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	43db      	mvns	r3, r3
 8006406:	401a      	ands	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6a1a      	ldr	r2, [r3, #32]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 031f 	and.w	r3, r3, #31
 8006416:	6879      	ldr	r1, [r7, #4]
 8006418:	fa01 f303 	lsl.w	r3, r1, r3
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800643c:	2b01      	cmp	r3, #1
 800643e:	d101      	bne.n	8006444 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006440:	2302      	movs	r3, #2
 8006442:	e046      	b.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a16      	ldr	r2, [pc, #88]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00e      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006490:	d009      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a12      	ldr	r2, [pc, #72]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a10      	ldr	r2, [pc, #64]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10c      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800

080064e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d101      	bne.n	8006504 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006500:	2302      	movs	r3, #2
 8006502:	e03d      	b.n	8006580 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	4313      	orrs	r3, r2
 8006534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4313      	orrs	r3, r2
 8006542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	69db      	ldr	r3, [r3, #28]
 800656a:	4313      	orrs	r3, r2
 800656c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bc80      	pop	{r7}
 8006588:	4770      	bx	lr

0800658a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	bc80      	pop	{r7}
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bc80      	pop	{r7}
 80065ac:	4770      	bx	lr

080065ae <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80065ae:	b084      	sub	sp, #16
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	f107 0014 	add.w	r0, r7, #20
 80065bc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	b004      	add	sp, #16
 80065cc:	4770      	bx	lr

080065ce <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80065de:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80065e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bc80      	pop	{r7}
 80065f8:	4770      	bx	lr

080065fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b085      	sub	sp, #20
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006602:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006606:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800660e:	b29a      	uxth	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	b29b      	uxth	r3, r3
 8006614:	43db      	mvns	r3, r3
 8006616:	b29b      	uxth	r3, r3
 8006618:	4013      	ands	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006622:	2300      	movs	r3, #0
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800662e:	b480      	push	{r7}
 8006630:	b083      	sub	sp, #12
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	460b      	mov	r3, r1
 8006638:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	bc80      	pop	{r7}
 8006644:	4770      	bx	lr

08006646 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006646:	b084      	sub	sp, #16
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	f107 0014 	add.w	r0, r7, #20
 8006654:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	bc80      	pop	{r7}
 8006682:	b004      	add	sp, #16
 8006684:	4770      	bx	lr
	...

08006688 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006688:	b480      	push	{r7}
 800668a:	b09b      	sub	sp, #108	; 0x6c
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006692:	2300      	movs	r3, #0
 8006694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	881b      	ldrh	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	78db      	ldrb	r3, [r3, #3]
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d81f      	bhi.n	80066fa <USB_ActivateEndpoint+0x72>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <USB_ActivateEndpoint+0x38>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066d1 	.word	0x080066d1
 80066c4:	080066ed 	.word	0x080066ed
 80066c8:	08006703 	.word	0x08006703
 80066cc:	080066df 	.word	0x080066df
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80066d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066d8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066dc:	e012      	b.n	8006704 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80066de:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066e2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80066e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066ea:	e00b      	b.n	8006704 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80066ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80066f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80066f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80066f8:	e004      	b.n	8006704 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006700:	e000      	b.n	8006704 <USB_ActivateEndpoint+0x7c>
      break;
 8006702:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	441a      	add	r2, r3
 800670e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006712:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006716:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800671a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800671e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006722:	b29b      	uxth	r3, r3
 8006724:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800673c:	b29a      	uxth	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	4313      	orrs	r3, r2
 8006746:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006758:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006760:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006768:	b29b      	uxth	r3, r3
 800676a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	7b1b      	ldrb	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	f040 8149 	bne.w	8006a08 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	785b      	ldrb	r3, [r3, #1]
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 8084 	beq.w	8006888 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	4413      	add	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	011a      	lsls	r2, r3, #4
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	88db      	ldrh	r3, [r3, #6]
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	81fb      	strh	r3, [r7, #14]
 80067c2:	89fb      	ldrh	r3, [r7, #14]
 80067c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01b      	beq.n	8006804 <USB_ActivateEndpoint+0x17c>
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	81bb      	strh	r3, [r7, #12]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	441a      	add	r2, r3
 80067ee:	89bb      	ldrh	r3, [r7, #12]
 80067f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006800:	b29b      	uxth	r3, r3
 8006802:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	78db      	ldrb	r3, [r3, #3]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d020      	beq.n	800684e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006822:	813b      	strh	r3, [r7, #8]
 8006824:	893b      	ldrh	r3, [r7, #8]
 8006826:	f083 0320 	eor.w	r3, r3, #32
 800682a:	813b      	strh	r3, [r7, #8]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	893b      	ldrh	r3, [r7, #8]
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]
 800684c:	e27f      	b.n	8006d4e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006864:	817b      	strh	r3, [r7, #10]
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	441a      	add	r2, r3
 8006870:	897b      	ldrh	r3, [r7, #10]
 8006872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800687e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006882:	b29b      	uxth	r3, r3
 8006884:	8013      	strh	r3, [r2, #0]
 8006886:	e262      	b.n	8006d4e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006898:	4413      	add	r3, r2
 800689a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	011a      	lsls	r2, r3, #4
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	88db      	ldrh	r3, [r3, #6]
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	005b      	lsls	r3, r3, #1
 80068b6:	b29a      	uxth	r2, r3
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	627b      	str	r3, [r7, #36]	; 0x24
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	4413      	add	r3, r2
 80068ce:	627b      	str	r3, [r7, #36]	; 0x24
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	011a      	lsls	r2, r3, #4
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	4413      	add	r3, r2
 80068da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068de:	623b      	str	r3, [r7, #32]
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d112      	bne.n	800690e <USB_ActivateEndpoint+0x286>
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	881b      	ldrh	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	801a      	strh	r2, [r3, #0]
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006902:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006906:	b29a      	uxth	r2, r3
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e02f      	b.n	800696e <USB_ActivateEndpoint+0x2e6>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b3e      	cmp	r3, #62	; 0x3e
 8006914:	d813      	bhi.n	800693e <USB_ActivateEndpoint+0x2b6>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	085b      	lsrs	r3, r3, #1
 800691c:	663b      	str	r3, [r7, #96]	; 0x60
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d002      	beq.n	8006930 <USB_ActivateEndpoint+0x2a8>
 800692a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800692c:	3301      	adds	r3, #1
 800692e:	663b      	str	r3, [r7, #96]	; 0x60
 8006930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006932:	b29b      	uxth	r3, r3
 8006934:	029b      	lsls	r3, r3, #10
 8006936:	b29a      	uxth	r2, r3
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e017      	b.n	800696e <USB_ActivateEndpoint+0x2e6>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	663b      	str	r3, [r7, #96]	; 0x60
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2b00      	cmp	r3, #0
 8006950:	d102      	bne.n	8006958 <USB_ActivateEndpoint+0x2d0>
 8006952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006954:	3b01      	subs	r3, #1
 8006956:	663b      	str	r3, [r7, #96]	; 0x60
 8006958:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800695a:	b29b      	uxth	r3, r3
 800695c:	029b      	lsls	r3, r3, #10
 800695e:	b29b      	uxth	r3, r3
 8006960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006968:	b29a      	uxth	r2, r3
 800696a:	6a3b      	ldr	r3, [r7, #32]
 800696c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	83fb      	strh	r3, [r7, #30]
 800697c:	8bfb      	ldrh	r3, [r7, #30]
 800697e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d01b      	beq.n	80069be <USB_ActivateEndpoint+0x336>
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699c:	83bb      	strh	r3, [r7, #28]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	8bbb      	ldrh	r3, [r7, #28]
 80069aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d4:	837b      	strh	r3, [r7, #26]
 80069d6:	8b7b      	ldrh	r3, [r7, #26]
 80069d8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80069dc:	837b      	strh	r3, [r7, #26]
 80069de:	8b7b      	ldrh	r3, [r7, #26]
 80069e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80069e4:	837b      	strh	r3, [r7, #26]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	441a      	add	r2, r3
 80069f0:	8b7b      	ldrh	r3, [r7, #26]
 80069f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	8013      	strh	r3, [r2, #0]
 8006a06:	e1a2      	b.n	8006d4e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	881b      	ldrh	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	441a      	add	r2, r3
 8006a2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006a30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a54:	4413      	add	r3, r2
 8006a56:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	011a      	lsls	r2, r3, #4
 8006a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a60:	4413      	add	r3, r2
 8006a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a66:	657b      	str	r3, [r7, #84]	; 0x54
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	891b      	ldrh	r3, [r3, #8]
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	461a      	mov	r2, r3
 8006a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a88:	4413      	add	r3, r2
 8006a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	011a      	lsls	r2, r3, #4
 8006a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8006a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	895b      	ldrh	r3, [r3, #10]
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	785b      	ldrb	r3, [r3, #1]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 8091 	bne.w	8006bd8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4413      	add	r3, r2
 8006ac0:	881b      	ldrh	r3, [r3, #0]
 8006ac2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006ac4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d01b      	beq.n	8006b06 <USB_ActivateEndpoint+0x47e>
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	881b      	ldrh	r3, [r3, #0]
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ae0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	441a      	add	r2, r3
 8006af0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006afa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	873b      	strh	r3, [r7, #56]	; 0x38
 8006b14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d01b      	beq.n	8006b56 <USB_ActivateEndpoint+0x4ce>
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	4413      	add	r3, r2
 8006b28:	881b      	ldrh	r3, [r3, #0]
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	441a      	add	r2, r3
 8006b40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	4413      	add	r3, r2
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb4:	867b      	strh	r3, [r7, #50]	; 0x32
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	009b      	lsls	r3, r3, #2
 8006bbe:	441a      	add	r2, r3
 8006bc0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	8013      	strh	r3, [r2, #0]
 8006bd6:	e0ba      	b.n	8006d4e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	881b      	ldrh	r3, [r3, #0]
 8006be4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006be8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d01d      	beq.n	8006c30 <USB_ActivateEndpoint+0x5a8>
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	441a      	add	r2, r3
 8006c18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	881b      	ldrh	r3, [r3, #0]
 8006c3c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006c40:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01d      	beq.n	8006c88 <USB_ActivateEndpoint+0x600>
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	881b      	ldrh	r3, [r3, #0]
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	781b      	ldrb	r3, [r3, #0]
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	441a      	add	r2, r3
 8006c70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	78db      	ldrb	r3, [r3, #3]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d024      	beq.n	8006cda <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	4413      	add	r3, r2
 8006c9a:	881b      	ldrh	r3, [r3, #0]
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006caa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cae:	f083 0320 	eor.w	r3, r3, #32
 8006cb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	441a      	add	r2, r3
 8006cc0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006cc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	8013      	strh	r3, [r2, #0]
 8006cd8:	e01d      	b.n	8006d16 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006cda:	687a      	ldr	r2, [r7, #4]
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4413      	add	r3, r2
 8006ce4:	881b      	ldrh	r3, [r3, #0]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cf0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	441a      	add	r2, r3
 8006cfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006d02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	441a      	add	r2, r3
 8006d38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	376c      	adds	r7, #108	; 0x6c
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b08d      	sub	sp, #52	; 0x34
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	7b1b      	ldrb	r3, [r3, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 808e 	bne.w	8006e8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d044      	beq.n	8006e02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	81bb      	strh	r3, [r7, #12]
 8006d86:	89bb      	ldrh	r3, [r7, #12]
 8006d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d01b      	beq.n	8006dc8 <USB_DeactivateEndpoint+0x6c>
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	4413      	add	r3, r2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da6:	817b      	strh	r3, [r7, #10]
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	441a      	add	r2, r3
 8006db2:	897b      	ldrh	r3, [r7, #10]
 8006db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4413      	add	r3, r2
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dde:	813b      	strh	r3, [r7, #8]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	441a      	add	r2, r3
 8006dea:	893b      	ldrh	r3, [r7, #8]
 8006dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	8013      	strh	r3, [r2, #0]
 8006e00:	e192      	b.n	8007128 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4413      	add	r3, r2
 8006e0c:	881b      	ldrh	r3, [r3, #0]
 8006e0e:	827b      	strh	r3, [r7, #18]
 8006e10:	8a7b      	ldrh	r3, [r7, #18]
 8006e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01b      	beq.n	8006e52 <USB_DeactivateEndpoint+0xf6>
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	4413      	add	r3, r2
 8006e24:	881b      	ldrh	r3, [r3, #0]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e30:	823b      	strh	r3, [r7, #16]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	8a3b      	ldrh	r3, [r7, #16]
 8006e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	881b      	ldrh	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	81fb      	strh	r3, [r7, #14]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	441a      	add	r2, r3
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]
 8006e8a:	e14d      	b.n	8007128 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	785b      	ldrb	r3, [r3, #1]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f040 80a5 	bne.w	8006fe0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	4413      	add	r3, r2
 8006ea0:	881b      	ldrh	r3, [r3, #0]
 8006ea2:	843b      	strh	r3, [r7, #32]
 8006ea4:	8c3b      	ldrh	r3, [r7, #32]
 8006ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d01b      	beq.n	8006ee6 <USB_DeactivateEndpoint+0x18a>
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	881b      	ldrh	r3, [r3, #0]
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec4:	83fb      	strh	r3, [r7, #30]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	441a      	add	r2, r3
 8006ed0:	8bfb      	ldrh	r3, [r7, #30]
 8006ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	881b      	ldrh	r3, [r3, #0]
 8006ef2:	83bb      	strh	r3, [r7, #28]
 8006ef4:	8bbb      	ldrh	r3, [r7, #28]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01b      	beq.n	8006f36 <USB_DeactivateEndpoint+0x1da>
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f14:	837b      	strh	r3, [r7, #26]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	441a      	add	r2, r3
 8006f20:	8b7b      	ldrh	r3, [r7, #26]
 8006f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f4c:	833b      	strh	r3, [r7, #24]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	441a      	add	r2, r3
 8006f58:	8b3b      	ldrh	r3, [r7, #24]
 8006f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f84:	82fb      	strh	r3, [r7, #22]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	441a      	add	r2, r3
 8006f90:	8afb      	ldrh	r3, [r7, #22]
 8006f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fbc:	82bb      	strh	r3, [r7, #20]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	441a      	add	r2, r3
 8006fc8:	8abb      	ldrh	r3, [r7, #20]
 8006fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	8013      	strh	r3, [r2, #0]
 8006fde:	e0a3      	b.n	8007128 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006fee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d01b      	beq.n	8007030 <USB_DeactivateEndpoint+0x2d4>
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	009b      	lsls	r3, r3, #2
 8007000:	4413      	add	r3, r2
 8007002:	881b      	ldrh	r3, [r3, #0]
 8007004:	b29b      	uxth	r3, r3
 8007006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800700e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	441a      	add	r2, r3
 800701a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800701c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702c:	b29b      	uxth	r3, r3
 800702e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	881b      	ldrh	r3, [r3, #0]
 800703c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800703e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01b      	beq.n	8007080 <USB_DeactivateEndpoint+0x324>
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	4413      	add	r3, r2
 8007052:	881b      	ldrh	r3, [r3, #0]
 8007054:	b29b      	uxth	r3, r3
 8007056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705e:	853b      	strh	r3, [r7, #40]	; 0x28
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	441a      	add	r2, r3
 800706a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800706c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007078:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800707c:	b29b      	uxth	r3, r3
 800707e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	441a      	add	r2, r3
 80070a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	441a      	add	r2, r3
 80070da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007106:	847b      	strh	r3, [r7, #34]	; 0x22
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	441a      	add	r2, r3
 8007112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800711c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007124:	b29b      	uxth	r3, r3
 8007126:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3734      	adds	r7, #52	; 0x34
 800712e:	46bd      	mov	sp, r7
 8007130:	bc80      	pop	{r7}
 8007132:	4770      	bx	lr

08007134 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b0cc      	sub	sp, #304	; 0x130
 8007138:	af00      	add	r7, sp, #0
 800713a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007142:	6018      	str	r0, [r3, #0]
 8007144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007148:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800714c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800714e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	785b      	ldrb	r3, [r3, #1]
 800715a:	2b01      	cmp	r3, #1
 800715c:	f041 817d 	bne.w	800845a <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	d908      	bls.n	800718e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800718c:	e007      	b.n	800719e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800719e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	7b1b      	ldrb	r3, [r3, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d152      	bne.n	8007254 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6959      	ldr	r1, [r3, #20]
 80071ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	88da      	ldrh	r2, [r3, #6]
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80071d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80071d4:	6800      	ldr	r0, [r0, #0]
 80071d6:	f001 ff23 	bl	8009020 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071de:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80071e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80071e6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	4619      	mov	r1, r3
 8007200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007204:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007208:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800720c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	440a      	add	r2, r1
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800721a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	011a      	lsls	r2, r3, #4
 8007224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007228:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4413      	add	r3, r2
 8007230:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007238:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800723c:	601a      	str	r2, [r3, #0]
 800723e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007242:	b29a      	uxth	r2, r3
 8007244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007248:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	801a      	strh	r2, [r3, #0]
 8007250:	f001 b8b5 	b.w	80083be <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	2b02      	cmp	r3, #2
 8007262:	f040 84c6 	bne.w	8007bf2 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	6a1a      	ldr	r2, [r3, #32]
 8007272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	691b      	ldr	r3, [r3, #16]
 800727e:	429a      	cmp	r2, r3
 8007280:	f240 8443 	bls.w	8007b0a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	4413      	add	r3, r2
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80072ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	441a      	add	r2, r3
 80072c8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80072cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80072d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072dc:	b29b      	uxth	r3, r3
 80072de:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f0:	1ad2      	subs	r2, r2, r3
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800730c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	881b      	ldrh	r3, [r3, #0]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 823e 	beq.w	80077a2 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800732e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007332:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007336:	6812      	ldr	r2, [r2, #0]
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800733e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f040 809a 	bne.w	8007480 <USB_EPStartXfer+0x34c>
 800734c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007354:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007358:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800735c:	6812      	ldr	r2, [r2, #0]
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800736e:	b29b      	uxth	r3, r3
 8007370:	4619      	mov	r1, r3
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800737a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800737e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	440a      	add	r2, r1
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	011a      	lsls	r2, r3, #4
 8007396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4413      	add	r3, r2
 80073a2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80073a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073aa:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d122      	bne.n	80073fe <USB_EPStartXfer+0x2ca>
 80073b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073ee:	b29a      	uxth	r2, r3
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	801a      	strh	r2, [r3, #0]
 80073fc:	e079      	b.n	80074f2 <USB_EPStartXfer+0x3be>
 80073fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007402:	2b3e      	cmp	r3, #62	; 0x3e
 8007404:	d81b      	bhi.n	800743e <USB_EPStartXfer+0x30a>
 8007406:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800740a:	085b      	lsrs	r3, r3, #1
 800740c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007410:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	2b00      	cmp	r3, #0
 800741a:	d004      	beq.n	8007426 <USB_EPStartXfer+0x2f2>
 800741c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007420:	3301      	adds	r3, #1
 8007422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800742a:	b29b      	uxth	r3, r3
 800742c:	029b      	lsls	r3, r3, #10
 800742e:	b29a      	uxth	r2, r3
 8007430:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007434:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	801a      	strh	r2, [r3, #0]
 800743c:	e059      	b.n	80074f2 <USB_EPStartXfer+0x3be>
 800743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744c:	f003 031f 	and.w	r3, r3, #31
 8007450:	2b00      	cmp	r3, #0
 8007452:	d104      	bne.n	800745e <USB_EPStartXfer+0x32a>
 8007454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007458:	3b01      	subs	r3, #1
 800745a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800745e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007462:	b29b      	uxth	r3, r3
 8007464:	029b      	lsls	r3, r3, #10
 8007466:	b29b      	uxth	r3, r3
 8007468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007470:	b29a      	uxth	r2, r3
 8007472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007476:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	801a      	strh	r2, [r3, #0]
 800747e:	e038      	b.n	80074f2 <USB_EPStartXfer+0x3be>
 8007480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007484:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	785b      	ldrb	r3, [r3, #1]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d130      	bne.n	80074f2 <USB_EPStartXfer+0x3be>
 8007490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800749e:	b29b      	uxth	r3, r3
 80074a0:	4619      	mov	r1, r3
 80074a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80074aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074ae:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80074b2:	6812      	ldr	r2, [r2, #0]
 80074b4:	440a      	add	r2, r1
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	011a      	lsls	r2, r3, #4
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4413      	add	r3, r2
 80074d2:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80074d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074de:	601a      	str	r2, [r3, #0]
 80074e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80074f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	895b      	ldrh	r3, [r3, #10]
 80074fe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007506:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6959      	ldr	r1, [r3, #20]
 800750e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007512:	b29b      	uxth	r3, r3
 8007514:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007518:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800751c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007520:	6800      	ldr	r0, [r0, #0]
 8007522:	f001 fd7d 	bl	8009020 <USB_WritePMA>
            ep->xfer_buff += len;
 8007526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800752a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	695a      	ldr	r2, [r3, #20]
 8007532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007536:	441a      	add	r2, r3
 8007538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	429a      	cmp	r2, r3
 800755e:	d90f      	bls.n	8007580 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	6a1a      	ldr	r2, [r3, #32]
 800756c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007576:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	621a      	str	r2, [r3, #32]
 800757e:	e00e      	b.n	800759e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2200      	movs	r2, #0
 800759c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f040 809a 	bne.w	80076e4 <USB_EPStartXfer+0x5b0>
 80075b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80075b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075bc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80075c0:	6812      	ldr	r2, [r2, #0]
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	4619      	mov	r1, r3
 80075d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075da:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80075de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80075e2:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80075e6:	6812      	ldr	r2, [r2, #0]
 80075e8:	440a      	add	r2, r1
 80075ea:	601a      	str	r2, [r3, #0]
 80075ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	011a      	lsls	r2, r3, #4
 80075fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4413      	add	r3, r2
 8007606:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800760a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800760e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007612:	601a      	str	r2, [r3, #0]
 8007614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007618:	2b00      	cmp	r3, #0
 800761a:	d122      	bne.n	8007662 <USB_EPStartXfer+0x52e>
 800761c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007620:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	881b      	ldrh	r3, [r3, #0]
 8007628:	b29b      	uxth	r3, r3
 800762a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800762e:	b29a      	uxth	r2, r3
 8007630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007634:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	801a      	strh	r2, [r3, #0]
 800763c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007640:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	881b      	ldrh	r3, [r3, #0]
 8007648:	b29b      	uxth	r3, r3
 800764a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800764e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007652:	b29a      	uxth	r2, r3
 8007654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007658:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e083      	b.n	800776a <USB_EPStartXfer+0x636>
 8007662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007666:	2b3e      	cmp	r3, #62	; 0x3e
 8007668:	d81b      	bhi.n	80076a2 <USB_EPStartXfer+0x56e>
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	085b      	lsrs	r3, r3, #1
 8007670:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b00      	cmp	r3, #0
 800767e:	d004      	beq.n	800768a <USB_EPStartXfer+0x556>
 8007680:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007684:	3301      	adds	r3, #1
 8007686:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800768a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800768e:	b29b      	uxth	r3, r3
 8007690:	029b      	lsls	r3, r3, #10
 8007692:	b29a      	uxth	r2, r3
 8007694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007698:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	801a      	strh	r2, [r3, #0]
 80076a0:	e063      	b.n	800776a <USB_EPStartXfer+0x636>
 80076a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a6:	095b      	lsrs	r3, r3, #5
 80076a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b0:	f003 031f 	and.w	r3, r3, #31
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d104      	bne.n	80076c2 <USB_EPStartXfer+0x58e>
 80076b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076bc:	3b01      	subs	r3, #1
 80076be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80076c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	029b      	lsls	r3, r3, #10
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	801a      	strh	r2, [r3, #0]
 80076e2:	e042      	b.n	800776a <USB_EPStartXfer+0x636>
 80076e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d13a      	bne.n	800776a <USB_EPStartXfer+0x636>
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80076fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007700:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007716:	b29b      	uxth	r3, r3
 8007718:	4619      	mov	r1, r3
 800771a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007722:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007726:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	440a      	add	r2, r1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	011a      	lsls	r2, r3, #4
 800773e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007742:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4413      	add	r3, r2
 800774a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800774e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007752:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800775c:	b29a      	uxth	r2, r3
 800775e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007762:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800776a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	891b      	ldrh	r3, [r3, #8]
 8007776:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800777a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800777e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	6959      	ldr	r1, [r3, #20]
 8007786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800778a:	b29b      	uxth	r3, r3
 800778c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007790:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007794:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007798:	6800      	ldr	r0, [r0, #0]
 800779a:	f001 fc41 	bl	8009020 <USB_WritePMA>
 800779e:	f000 be0e 	b.w	80083be <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80077a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d16d      	bne.n	800788e <USB_EPStartXfer+0x75a>
 80077b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077d2:	4413      	add	r3, r2
 80077d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	011a      	lsls	r2, r3, #4
 80077e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077e6:	4413      	add	r3, r2
 80077e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80077ec:	647b      	str	r3, [r7, #68]	; 0x44
 80077ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d112      	bne.n	800781c <USB_EPStartXfer+0x6e8>
 80077f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007800:	b29a      	uxth	r2, r3
 8007802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007810:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007814:	b29a      	uxth	r2, r3
 8007816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007818:	801a      	strh	r2, [r3, #0]
 800781a:	e063      	b.n	80078e4 <USB_EPStartXfer+0x7b0>
 800781c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007820:	2b3e      	cmp	r3, #62	; 0x3e
 8007822:	d817      	bhi.n	8007854 <USB_EPStartXfer+0x720>
 8007824:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007828:	085b      	lsrs	r3, r3, #1
 800782a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800782e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <USB_EPStartXfer+0x710>
 800783a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800783e:	3301      	adds	r3, #1
 8007840:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007844:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007848:	b29b      	uxth	r3, r3
 800784a:	029b      	lsls	r3, r3, #10
 800784c:	b29a      	uxth	r2, r3
 800784e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007850:	801a      	strh	r2, [r3, #0]
 8007852:	e047      	b.n	80078e4 <USB_EPStartXfer+0x7b0>
 8007854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007858:	095b      	lsrs	r3, r3, #5
 800785a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800785e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <USB_EPStartXfer+0x740>
 800786a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800786e:	3b01      	subs	r3, #1
 8007870:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007874:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007878:	b29b      	uxth	r3, r3
 800787a:	029b      	lsls	r3, r3, #10
 800787c:	b29b      	uxth	r3, r3
 800787e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007886:	b29a      	uxth	r2, r3
 8007888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788a:	801a      	strh	r2, [r3, #0]
 800788c:	e02a      	b.n	80078e4 <USB_EPStartXfer+0x7b0>
 800788e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d122      	bne.n	80078e4 <USB_EPStartXfer+0x7b0>
 800789e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	653b      	str	r3, [r7, #80]	; 0x50
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	461a      	mov	r2, r3
 80078bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078be:	4413      	add	r3, r2
 80078c0:	653b      	str	r3, [r7, #80]	; 0x50
 80078c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	011a      	lsls	r2, r3, #4
 80078d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80078d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80078e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	891b      	ldrh	r3, [r3, #8]
 80078f0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	6959      	ldr	r1, [r3, #20]
 8007900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007904:	b29b      	uxth	r3, r3
 8007906:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800790a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800790e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007912:	6800      	ldr	r0, [r0, #0]
 8007914:	f001 fb84 	bl	8009020 <USB_WritePMA>
            ep->xfer_buff += len;
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	695a      	ldr	r2, [r3, #20]
 8007924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007928:	441a      	add	r2, r3
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	429a      	cmp	r2, r3
 8007950:	d90f      	bls.n	8007972 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6a1a      	ldr	r2, [r3, #32]
 800795e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007962:	1ad2      	subs	r2, r2, r3
 8007964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007968:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	621a      	str	r2, [r3, #32]
 8007970:	e00e      	b.n	8007990 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2200      	movs	r2, #0
 800798e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	643b      	str	r3, [r7, #64]	; 0x40
 800799c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d16d      	bne.n	8007a88 <USB_EPStartXfer+0x954>
 80079ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80079b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	4413      	add	r3, r2
 80079ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	011a      	lsls	r2, r3, #4
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	4413      	add	r3, r2
 80079e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80079e6:	637b      	str	r3, [r7, #52]	; 0x34
 80079e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d112      	bne.n	8007a16 <USB_EPStartXfer+0x8e2>
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	881b      	ldrh	r3, [r3, #0]
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079fa:	b29a      	uxth	r2, r3
 80079fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e05d      	b.n	8007ad2 <USB_EPStartXfer+0x99e>
 8007a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a1a:	2b3e      	cmp	r3, #62	; 0x3e
 8007a1c:	d817      	bhi.n	8007a4e <USB_EPStartXfer+0x91a>
 8007a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a22:	085b      	lsrs	r3, r3, #1
 8007a24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <USB_EPStartXfer+0x90a>
 8007a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a38:	3301      	adds	r3, #1
 8007a3a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	029b      	lsls	r3, r3, #10
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4a:	801a      	strh	r2, [r3, #0]
 8007a4c:	e041      	b.n	8007ad2 <USB_EPStartXfer+0x99e>
 8007a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a5c:	f003 031f 	and.w	r3, r3, #31
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d104      	bne.n	8007a6e <USB_EPStartXfer+0x93a>
 8007a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	029b      	lsls	r3, r3, #10
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a84:	801a      	strh	r2, [r3, #0]
 8007a86:	e024      	b.n	8007ad2 <USB_EPStartXfer+0x99e>
 8007a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	785b      	ldrb	r3, [r3, #1]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d11c      	bne.n	8007ad2 <USB_EPStartXfer+0x99e>
 8007a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aac:	4413      	add	r3, r2
 8007aae:	643b      	str	r3, [r7, #64]	; 0x40
 8007ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	011a      	lsls	r2, r3, #4
 8007abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ac0:	4413      	add	r3, r2
 8007ac2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ac8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ad0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	895b      	ldrh	r3, [r3, #10]
 8007ade:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ae6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6959      	ldr	r1, [r3, #20]
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007af8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007afc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b00:	6800      	ldr	r0, [r0, #0]
 8007b02:	f001 fa8d 	bl	8009020 <USB_WritePMA>
 8007b06:	f000 bc5a 	b.w	80083be <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b40:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b90:	b29b      	uxth	r3, r3
 8007b92:	461a      	mov	r2, r3
 8007b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b96:	4413      	add	r3, r2
 8007b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	011a      	lsls	r2, r3, #4
 8007ba8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007baa:	4413      	add	r3, r2
 8007bac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb6:	b29a      	uxth	r2, r3
 8007bb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	891b      	ldrh	r3, [r3, #8]
 8007bc8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6959      	ldr	r1, [r3, #20]
 8007bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007be2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007be6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	f001 fa18 	bl	8009020 <USB_WritePMA>
 8007bf0:	e3e5      	b.n	80083be <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c18:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	441a      	add	r2, r3
 8007c36:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c42:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6a1a      	ldr	r2, [r3, #32]
 8007c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007c6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	881b      	ldrh	r3, [r3, #0]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 81bc 	beq.w	800800c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	785b      	ldrb	r3, [r3, #1]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d16d      	bne.n	8007d8e <USB_EPStartXfer+0xc5a>
 8007cb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	461a      	mov	r2, r3
 8007cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cd2:	4413      	add	r3, r2
 8007cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8007cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	011a      	lsls	r2, r3, #4
 8007ce4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007cec:	677b      	str	r3, [r7, #116]	; 0x74
 8007cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d112      	bne.n	8007d1c <USB_EPStartXfer+0xbe8>
 8007cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d00:	b29a      	uxth	r2, r3
 8007d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d04:	801a      	strh	r2, [r3, #0]
 8007d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d08:	881b      	ldrh	r3, [r3, #0]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d18:	801a      	strh	r2, [r3, #0]
 8007d1a:	e060      	b.n	8007dde <USB_EPStartXfer+0xcaa>
 8007d1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d20:	2b3e      	cmp	r3, #62	; 0x3e
 8007d22:	d817      	bhi.n	8007d54 <USB_EPStartXfer+0xc20>
 8007d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d28:	085b      	lsrs	r3, r3, #1
 8007d2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <USB_EPStartXfer+0xc10>
 8007d3a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d3e:	3301      	adds	r3, #1
 8007d40:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007d44:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	029b      	lsls	r3, r3, #10
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d50:	801a      	strh	r2, [r3, #0]
 8007d52:	e044      	b.n	8007dde <USB_EPStartXfer+0xcaa>
 8007d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d58:	095b      	lsrs	r3, r3, #5
 8007d5a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d62:	f003 031f 	and.w	r3, r3, #31
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <USB_EPStartXfer+0xc40>
 8007d6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d6e:	3b01      	subs	r3, #1
 8007d70:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007d74:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	029b      	lsls	r3, r3, #10
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d86:	b29a      	uxth	r2, r3
 8007d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d8a:	801a      	strh	r2, [r3, #0]
 8007d8c:	e027      	b.n	8007dde <USB_EPStartXfer+0xcaa>
 8007d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d11f      	bne.n	8007dde <USB_EPStartXfer+0xcaa>
 8007d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	461a      	mov	r2, r3
 8007db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007db4:	4413      	add	r3, r2
 8007db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	011a      	lsls	r2, r3, #4
 8007dc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007dcc:	4413      	add	r3, r2
 8007dce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ddc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	895b      	ldrh	r3, [r3, #10]
 8007dea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6959      	ldr	r1, [r3, #20]
 8007dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e0c:	6800      	ldr	r0, [r0, #0]
 8007e0e:	f001 f907 	bl	8009020 <USB_WritePMA>
          ep->xfer_buff += len;
 8007e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	695a      	ldr	r2, [r3, #20]
 8007e1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e22:	441a      	add	r2, r3
 8007e24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6a1a      	ldr	r2, [r3, #32]
 8007e3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d90f      	bls.n	8007e6c <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007e4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a1a      	ldr	r2, [r3, #32]
 8007e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e5c:	1ad2      	subs	r2, r2, r3
 8007e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	621a      	str	r2, [r3, #32]
 8007e6a:	e00e      	b.n	8007e8a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	6a1b      	ldr	r3, [r3, #32]
 8007e78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007e8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 8295 	beq.w	80083be <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d16d      	bne.n	8007f80 <USB_EPStartXfer+0xe4c>
 8007ea4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	66bb      	str	r3, [r7, #104]	; 0x68
 8007eb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ec4:	4413      	add	r3, r2
 8007ec6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ecc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	011a      	lsls	r2, r3, #4
 8007ed6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ede:	667b      	str	r3, [r7, #100]	; 0x64
 8007ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d112      	bne.n	8007f0e <USB_EPStartXfer+0xdda>
 8007ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eea:	881b      	ldrh	r3, [r3, #0]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ef6:	801a      	strh	r2, [r3, #0]
 8007ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efa:	881b      	ldrh	r3, [r3, #0]
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f0a:	801a      	strh	r2, [r3, #0]
 8007f0c:	e063      	b.n	8007fd6 <USB_EPStartXfer+0xea2>
 8007f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f12:	2b3e      	cmp	r3, #62	; 0x3e
 8007f14:	d817      	bhi.n	8007f46 <USB_EPStartXfer+0xe12>
 8007f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1a:	085b      	lsrs	r3, r3, #1
 8007f1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d004      	beq.n	8007f36 <USB_EPStartXfer+0xe02>
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f30:	3301      	adds	r3, #1
 8007f32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f42:	801a      	strh	r2, [r3, #0]
 8007f44:	e047      	b.n	8007fd6 <USB_EPStartXfer+0xea2>
 8007f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d104      	bne.n	8007f66 <USB_EPStartXfer+0xe32>
 8007f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f60:	3b01      	subs	r3, #1
 8007f62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	029b      	lsls	r3, r3, #10
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	e02a      	b.n	8007fd6 <USB_EPStartXfer+0xea2>
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	785b      	ldrb	r3, [r3, #1]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d122      	bne.n	8007fd6 <USB_EPStartXfer+0xea2>
 8007f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	673b      	str	r3, [r7, #112]	; 0x70
 8007f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	461a      	mov	r2, r3
 8007fae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fb0:	4413      	add	r3, r2
 8007fb2:	673b      	str	r3, [r7, #112]	; 0x70
 8007fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	011a      	lsls	r2, r3, #4
 8007fc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007fca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	891b      	ldrh	r3, [r3, #8]
 8007fe2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6959      	ldr	r1, [r3, #20]
 8007ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007ffc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008000:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008004:	6800      	ldr	r0, [r0, #0]
 8008006:	f001 f80b 	bl	8009020 <USB_WritePMA>
 800800a:	e1d8      	b.n	80083be <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	785b      	ldrb	r3, [r3, #1]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d178      	bne.n	800810e <USB_EPStartXfer+0xfda>
 800801c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008038:	b29b      	uxth	r3, r3
 800803a:	461a      	mov	r2, r3
 800803c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008040:	4413      	add	r3, r2
 8008042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	011a      	lsls	r2, r3, #4
 8008054:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008058:	4413      	add	r3, r2
 800805a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800805e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008066:	2b00      	cmp	r3, #0
 8008068:	d116      	bne.n	8008098 <USB_EPStartXfer+0xf64>
 800806a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800806e:	881b      	ldrh	r3, [r3, #0]
 8008070:	b29b      	uxth	r3, r3
 8008072:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008076:	b29a      	uxth	r2, r3
 8008078:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800807c:	801a      	strh	r2, [r3, #0]
 800807e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800808a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808e:	b29a      	uxth	r2, r3
 8008090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008094:	801a      	strh	r2, [r3, #0]
 8008096:	e06b      	b.n	8008170 <USB_EPStartXfer+0x103c>
 8008098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800809c:	2b3e      	cmp	r3, #62	; 0x3e
 800809e:	d818      	bhi.n	80080d2 <USB_EPStartXfer+0xf9e>
 80080a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a4:	085b      	lsrs	r3, r3, #1
 80080a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d004      	beq.n	80080c0 <USB_EPStartXfer+0xf8c>
 80080b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080ba:	3301      	adds	r3, #1
 80080bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080c0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	029b      	lsls	r3, r3, #10
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080ce:	801a      	strh	r2, [r3, #0]
 80080d0:	e04e      	b.n	8008170 <USB_EPStartXfer+0x103c>
 80080d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d6:	095b      	lsrs	r3, r3, #5
 80080d8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d104      	bne.n	80080f2 <USB_EPStartXfer+0xfbe>
 80080e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080ec:	3b01      	subs	r3, #1
 80080ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80080f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	029b      	lsls	r3, r3, #10
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008104:	b29a      	uxth	r2, r3
 8008106:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e030      	b.n	8008170 <USB_EPStartXfer+0x103c>
 800810e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	785b      	ldrb	r3, [r3, #1]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d128      	bne.n	8008170 <USB_EPStartXfer+0x103c>
 800811e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008122:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800812c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813a:	b29b      	uxth	r3, r3
 800813c:	461a      	mov	r2, r3
 800813e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008142:	4413      	add	r3, r2
 8008144:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800814c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	011a      	lsls	r2, r3, #4
 8008156:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800815a:	4413      	add	r3, r2
 800815c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008168:	b29a      	uxth	r2, r3
 800816a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800816e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	891b      	ldrh	r3, [r3, #8]
 800817c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008184:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6959      	ldr	r1, [r3, #20]
 800818c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008190:	b29b      	uxth	r3, r3
 8008192:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008196:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800819a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800819e:	6800      	ldr	r0, [r0, #0]
 80081a0:	f000 ff3e 	bl	8009020 <USB_WritePMA>
          ep->xfer_buff += len;
 80081a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695a      	ldr	r2, [r3, #20]
 80081b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081b4:	441a      	add	r2, r3
 80081b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6a1a      	ldr	r2, [r3, #32]
 80081ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d90f      	bls.n	80081fe <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80081de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6a1a      	ldr	r2, [r3, #32]
 80081ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ee:	1ad2      	subs	r2, r2, r3
 80081f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	621a      	str	r2, [r3, #32]
 80081fc:	e00e      	b.n	800821c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80081fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008202:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800820e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008212:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2200      	movs	r2, #0
 800821a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800821c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008220:	2b00      	cmp	r3, #0
 8008222:	f000 80cc 	beq.w	80083be <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008226:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008238:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d178      	bne.n	8008336 <USB_EPStartXfer+0x1202>
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008256:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008260:	b29b      	uxth	r3, r3
 8008262:	461a      	mov	r2, r3
 8008264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008268:	4413      	add	r3, r2
 800826a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800826e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008272:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	011a      	lsls	r2, r3, #4
 800827c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008280:	4413      	add	r3, r2
 8008282:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008286:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800828a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d116      	bne.n	80082c0 <USB_EPStartXfer+0x118c>
 8008292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008296:	881b      	ldrh	r3, [r3, #0]
 8008298:	b29b      	uxth	r3, r3
 800829a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800829e:	b29a      	uxth	r2, r3
 80082a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082a4:	801a      	strh	r2, [r3, #0]
 80082a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082aa:	881b      	ldrh	r3, [r3, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082bc:	801a      	strh	r2, [r3, #0]
 80082be:	e064      	b.n	800838a <USB_EPStartXfer+0x1256>
 80082c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c4:	2b3e      	cmp	r3, #62	; 0x3e
 80082c6:	d818      	bhi.n	80082fa <USB_EPStartXfer+0x11c6>
 80082c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082cc:	085b      	lsrs	r3, r3, #1
 80082ce:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d004      	beq.n	80082e8 <USB_EPStartXfer+0x11b4>
 80082de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082e2:	3301      	adds	r3, #1
 80082e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80082e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	029b      	lsls	r3, r3, #10
 80082f0:	b29a      	uxth	r2, r3
 80082f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	e047      	b.n	800838a <USB_EPStartXfer+0x1256>
 80082fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082fe:	095b      	lsrs	r3, r3, #5
 8008300:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008308:	f003 031f 	and.w	r3, r3, #31
 800830c:	2b00      	cmp	r3, #0
 800830e:	d104      	bne.n	800831a <USB_EPStartXfer+0x11e6>
 8008310:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008314:	3b01      	subs	r3, #1
 8008316:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800831a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800831e:	b29b      	uxth	r3, r3
 8008320:	029b      	lsls	r3, r3, #10
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800832c:	b29a      	uxth	r2, r3
 800832e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008332:	801a      	strh	r2, [r3, #0]
 8008334:	e029      	b.n	800838a <USB_EPStartXfer+0x1256>
 8008336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d121      	bne.n	800838a <USB_EPStartXfer+0x1256>
 8008346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800834a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008354:	b29b      	uxth	r3, r3
 8008356:	461a      	mov	r2, r3
 8008358:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800835c:	4413      	add	r3, r2
 800835e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	011a      	lsls	r2, r3, #4
 8008370:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008374:	4413      	add	r3, r2
 8008376:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800837a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800837e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008382:	b29a      	uxth	r2, r3
 8008384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008388:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800838a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	895b      	ldrh	r3, [r3, #10]
 8008396:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800839a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800839e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	6959      	ldr	r1, [r3, #20]
 80083a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80083b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80083b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80083b8:	6800      	ldr	r0, [r0, #0]
 80083ba:	f000 fe31 	bl	8009020 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80083be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083e0:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80083e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ec:	8013      	strh	r3, [r2, #0]
 80083ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80083f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80083fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80083fe:	8812      	ldrh	r2, [r2, #0]
 8008400:	f082 0210 	eor.w	r2, r2, #16
 8008404:	801a      	strh	r2, [r3, #0]
 8008406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800840e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008412:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008416:	8812      	ldrh	r2, [r2, #0]
 8008418:	f082 0220 	eor.w	r2, r2, #32
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800842c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	441a      	add	r2, r3
 8008438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800843c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008440:	881b      	ldrh	r3, [r3, #0]
 8008442:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008446:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800844a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800844e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008452:	b29b      	uxth	r3, r3
 8008454:	8013      	strh	r3, [r2, #0]
 8008456:	f000 bc9f 	b.w	8008d98 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	7b1b      	ldrb	r3, [r3, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 80ae 	bne.w	80085c8 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800846c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	429a      	cmp	r2, r3
 8008486:	d917      	bls.n	80084b8 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	699a      	ldr	r2, [r3, #24]
 80084a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084a8:	1ad2      	subs	r2, r2, r3
 80084aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	619a      	str	r2, [r3, #24]
 80084b6:	e00e      	b.n	80084d6 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80084b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80084c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2200      	movs	r2, #0
 80084d4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80084d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	461a      	mov	r2, r3
 80084f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80084fa:	4413      	add	r3, r2
 80084fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	011a      	lsls	r2, r3, #4
 800850e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008512:	4413      	add	r3, r2
 8008514:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800851c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d116      	bne.n	8008552 <USB_EPStartXfer+0x141e>
 8008524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008528:	881b      	ldrh	r3, [r3, #0]
 800852a:	b29b      	uxth	r3, r3
 800852c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008530:	b29a      	uxth	r2, r3
 8008532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800853c:	881b      	ldrh	r3, [r3, #0]
 800853e:	b29b      	uxth	r3, r3
 8008540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008548:	b29a      	uxth	r2, r3
 800854a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	e3e8      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
 8008552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008556:	2b3e      	cmp	r3, #62	; 0x3e
 8008558:	d818      	bhi.n	800858c <USB_EPStartXfer+0x1458>
 800855a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <USB_EPStartXfer+0x1446>
 8008570:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008574:	3301      	adds	r3, #1
 8008576:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800857a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800857e:	b29b      	uxth	r3, r3
 8008580:	029b      	lsls	r3, r3, #10
 8008582:	b29a      	uxth	r2, r3
 8008584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008588:	801a      	strh	r2, [r3, #0]
 800858a:	e3cb      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
 800858c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008590:	095b      	lsrs	r3, r3, #5
 8008592:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008596:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859a:	f003 031f 	and.w	r3, r3, #31
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d104      	bne.n	80085ac <USB_EPStartXfer+0x1478>
 80085a2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085a6:	3b01      	subs	r3, #1
 80085a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80085ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	029b      	lsls	r3, r3, #10
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e3ad      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80085c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	78db      	ldrb	r3, [r3, #3]
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	f040 8200 	bne.w	80089da <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80085da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	785b      	ldrb	r3, [r3, #1]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f040 8091 	bne.w	800870e <USB_EPStartXfer+0x15da>
 80085ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80085fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008610:	4413      	add	r3, r2
 8008612:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008616:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800861a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	011a      	lsls	r2, r3, #4
 8008624:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008628:	4413      	add	r3, r2
 800862a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800862e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008632:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008636:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d116      	bne.n	8008670 <USB_EPStartXfer+0x153c>
 8008642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008646:	881b      	ldrh	r3, [r3, #0]
 8008648:	b29b      	uxth	r3, r3
 800864a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800864e:	b29a      	uxth	r2, r3
 8008650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008654:	801a      	strh	r2, [r3, #0]
 8008656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800865a:	881b      	ldrh	r3, [r3, #0]
 800865c:	b29b      	uxth	r3, r3
 800865e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008666:	b29a      	uxth	r2, r3
 8008668:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800866c:	801a      	strh	r2, [r3, #0]
 800866e:	e083      	b.n	8008778 <USB_EPStartXfer+0x1644>
 8008670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	2b3e      	cmp	r3, #62	; 0x3e
 800867e:	d820      	bhi.n	80086c2 <USB_EPStartXfer+0x158e>
 8008680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	085b      	lsrs	r3, r3, #1
 800868e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <USB_EPStartXfer+0x157c>
 80086a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086aa:	3301      	adds	r3, #1
 80086ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	029b      	lsls	r3, r3, #10
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80086be:	801a      	strh	r2, [r3, #0]
 80086c0:	e05a      	b.n	8008778 <USB_EPStartXfer+0x1644>
 80086c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	095b      	lsrs	r3, r3, #5
 80086d0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d104      	bne.n	80086f2 <USB_EPStartXfer+0x15be>
 80086e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ec:	3b01      	subs	r3, #1
 80086ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	029b      	lsls	r3, r3, #10
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008704:	b29a      	uxth	r2, r3
 8008706:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800870a:	801a      	strh	r2, [r3, #0]
 800870c:	e034      	b.n	8008778 <USB_EPStartXfer+0x1644>
 800870e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	785b      	ldrb	r3, [r3, #1]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d12c      	bne.n	8008778 <USB_EPStartXfer+0x1644>
 800871e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800872c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008730:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800873a:	b29b      	uxth	r3, r3
 800873c:	461a      	mov	r2, r3
 800873e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008742:	4413      	add	r3, r2
 8008744:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800874c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	011a      	lsls	r2, r3, #4
 8008756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800875a:	4413      	add	r3, r2
 800875c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	b29a      	uxth	r2, r3
 8008772:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008776:	801a      	strh	r2, [r3, #0]
 8008778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	785b      	ldrb	r3, [r3, #1]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 8091 	bne.w	80088ba <USB_EPStartXfer+0x1786>
 8008798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087bc:	4413      	add	r3, r2
 80087be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	011a      	lsls	r2, r3, #4
 80087d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80087d4:	4413      	add	r3, r2
 80087d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80087da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d116      	bne.n	800881c <USB_EPStartXfer+0x16e8>
 80087ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008806:	881b      	ldrh	r3, [r3, #0]
 8008808:	b29b      	uxth	r3, r3
 800880a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800880e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008812:	b29a      	uxth	r2, r3
 8008814:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008818:	801a      	strh	r2, [r3, #0]
 800881a:	e07c      	b.n	8008916 <USB_EPStartXfer+0x17e2>
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b3e      	cmp	r3, #62	; 0x3e
 800882a:	d820      	bhi.n	800886e <USB_EPStartXfer+0x173a>
 800882c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	691b      	ldr	r3, [r3, #16]
 8008838:	085b      	lsrs	r3, r3, #1
 800883a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	f003 0301 	and.w	r3, r3, #1
 800884e:	2b00      	cmp	r3, #0
 8008850:	d004      	beq.n	800885c <USB_EPStartXfer+0x1728>
 8008852:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008856:	3301      	adds	r3, #1
 8008858:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800885c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008860:	b29b      	uxth	r3, r3
 8008862:	029b      	lsls	r3, r3, #10
 8008864:	b29a      	uxth	r2, r3
 8008866:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	e053      	b.n	8008916 <USB_EPStartXfer+0x17e2>
 800886e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	095b      	lsrs	r3, r3, #5
 800887c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008880:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008884:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	2b00      	cmp	r3, #0
 8008892:	d104      	bne.n	800889e <USB_EPStartXfer+0x176a>
 8008894:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008898:	3b01      	subs	r3, #1
 800889a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800889e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	029b      	lsls	r3, r3, #10
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088b0:	b29a      	uxth	r2, r3
 80088b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80088b6:	801a      	strh	r2, [r3, #0]
 80088b8:	e02d      	b.n	8008916 <USB_EPStartXfer+0x17e2>
 80088ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	785b      	ldrb	r3, [r3, #1]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d125      	bne.n	8008916 <USB_EPStartXfer+0x17e2>
 80088ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d8:	b29b      	uxth	r3, r3
 80088da:	461a      	mov	r2, r3
 80088dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088e0:	4413      	add	r3, r2
 80088e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	011a      	lsls	r2, r3, #4
 80088f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80088f8:	4413      	add	r3, r2
 80088fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	b29a      	uxth	r2, r3
 8008910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008914:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800891a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	69db      	ldr	r3, [r3, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	f000 81fe 	beq.w	8008d24 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800892c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008948:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800894c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <USB_EPStartXfer+0x182c>
 8008954:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10d      	bne.n	800897c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008960:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 81db 	bne.w	8008d24 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800896e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008976:	2b00      	cmp	r3, #0
 8008978:	f040 81d4 	bne.w	8008d24 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800897c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800898a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	b29b      	uxth	r3, r3
 800899a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800899e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80089a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	441a      	add	r2, r3
 80089c0:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80089c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	8013      	strh	r3, [r2, #0]
 80089d8:	e1a4      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80089da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	78db      	ldrb	r3, [r3, #3]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	f040 819a 	bne.w	8008d20 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80089ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	699a      	ldr	r2, [r3, #24]
 80089f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d917      	bls.n	8008a38 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a28:	1ad2      	subs	r2, r2, r3
 8008a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	619a      	str	r2, [r3, #24]
 8008a36:	e00e      	b.n	8008a56 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	699b      	ldr	r3, [r3, #24]
 8008a44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008a48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2200      	movs	r2, #0
 8008a54:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d178      	bne.n	8008b58 <USB_EPStartXfer+0x1a24>
 8008a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008a90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	011a      	lsls	r2, r3, #4
 8008a9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008aa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d116      	bne.n	8008ae2 <USB_EPStartXfer+0x19ae>
 8008ab4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ab8:	881b      	ldrh	r3, [r3, #0]
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008ac0:	b29a      	uxth	r2, r3
 8008ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ac6:	801a      	strh	r2, [r3, #0]
 8008ac8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ad8:	b29a      	uxth	r2, r3
 8008ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008ade:	801a      	strh	r2, [r3, #0]
 8008ae0:	e06b      	b.n	8008bba <USB_EPStartXfer+0x1a86>
 8008ae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ae8:	d818      	bhi.n	8008b1c <USB_EPStartXfer+0x19e8>
 8008aea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aee:	085b      	lsrs	r3, r3, #1
 8008af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d004      	beq.n	8008b0a <USB_EPStartXfer+0x19d6>
 8008b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b04:	3301      	adds	r3, #1
 8008b06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	029b      	lsls	r3, r3, #10
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b18:	801a      	strh	r2, [r3, #0]
 8008b1a:	e04e      	b.n	8008bba <USB_EPStartXfer+0x1a86>
 8008b1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b20:	095b      	lsrs	r3, r3, #5
 8008b22:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b2a:	f003 031f 	and.w	r3, r3, #31
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d104      	bne.n	8008b3c <USB_EPStartXfer+0x1a08>
 8008b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b36:	3b01      	subs	r3, #1
 8008b38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	029b      	lsls	r3, r3, #10
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b54:	801a      	strh	r2, [r3, #0]
 8008b56:	e030      	b.n	8008bba <USB_EPStartXfer+0x1a86>
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d128      	bne.n	8008bba <USB_EPStartXfer+0x1a86>
 8008b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	461a      	mov	r2, r3
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	011a      	lsls	r2, r3, #4
 8008ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba4:	4413      	add	r3, r2
 8008ba6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008baa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008bb2:	b29a      	uxth	r2, r3
 8008bb4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bb8:	801a      	strh	r2, [r3, #0]
 8008bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	785b      	ldrb	r3, [r3, #1]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d178      	bne.n	8008cca <USB_EPStartXfer+0x1b96>
 8008bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bfc:	4413      	add	r3, r2
 8008bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008c02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	011a      	lsls	r2, r3, #4
 8008c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c14:	4413      	add	r3, r2
 8008c16:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d116      	bne.n	8008c54 <USB_EPStartXfer+0x1b20>
 8008c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c2a:	881b      	ldrh	r3, [r3, #0]
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c38:	801a      	strh	r2, [r3, #0]
 8008c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	e067      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
 8008c54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c58:	2b3e      	cmp	r3, #62	; 0x3e
 8008c5a:	d818      	bhi.n	8008c8e <USB_EPStartXfer+0x1b5a>
 8008c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c60:	085b      	lsrs	r3, r3, #1
 8008c62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d004      	beq.n	8008c7c <USB_EPStartXfer+0x1b48>
 8008c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c76:	3301      	adds	r3, #1
 8008c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	029b      	lsls	r3, r3, #10
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c8a:	801a      	strh	r2, [r3, #0]
 8008c8c:	e04a      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
 8008c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c92:	095b      	lsrs	r3, r3, #5
 8008c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c9c:	f003 031f 	and.w	r3, r3, #31
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d104      	bne.n	8008cae <USB_EPStartXfer+0x1b7a>
 8008ca4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ca8:	3b01      	subs	r3, #1
 8008caa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	029b      	lsls	r3, r3, #10
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cc6:	801a      	strh	r2, [r3, #0]
 8008cc8:	e02c      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
 8008cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d124      	bne.n	8008d24 <USB_EPStartXfer+0x1bf0>
 8008cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ce8:	b29b      	uxth	r3, r3
 8008cea:	461a      	mov	r2, r3
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008cf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cfa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	011a      	lsls	r2, r3, #4
 8008d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d08:	4413      	add	r3, r2
 8008d0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d1c:	801a      	strh	r2, [r3, #0]
 8008d1e:	e001      	b.n	8008d24 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e03a      	b.n	8008d9a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	4413      	add	r3, r2
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	b29b      	uxth	r3, r3
 8008d42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008d4e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008d52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d56:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008d5a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008d5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d62:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b085      	sub	sp, #20
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	785b      	ldrb	r3, [r3, #1]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d020      	beq.n	8008df8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	781b      	ldrb	r3, [r3, #0]
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	4413      	add	r3, r2
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dcc:	81bb      	strh	r3, [r7, #12]
 8008dce:	89bb      	ldrh	r3, [r7, #12]
 8008dd0:	f083 0310 	eor.w	r3, r3, #16
 8008dd4:	81bb      	strh	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	441a      	add	r2, r3
 8008de0:	89bb      	ldrh	r3, [r7, #12]
 8008de2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008de6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	8013      	strh	r3, [r2, #0]
 8008df6:	e01f      	b.n	8008e38 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e0e:	81fb      	strh	r3, [r7, #14]
 8008e10:	89fb      	ldrh	r3, [r7, #14]
 8008e12:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008e16:	81fb      	strh	r3, [r7, #14]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	441a      	add	r2, r3
 8008e22:	89fb      	ldrh	r3, [r7, #14]
 8008e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bc80      	pop	{r7}
 8008e42:	4770      	bx	lr

08008e44 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	7b1b      	ldrb	r3, [r3, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 809d 	bne.w	8008f92 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	785b      	ldrb	r3, [r3, #1]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d04c      	beq.n	8008efa <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	4413      	add	r3, r2
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	823b      	strh	r3, [r7, #16]
 8008e6e:	8a3b      	ldrh	r3, [r7, #16]
 8008e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d01b      	beq.n	8008eb0 <USB_EPClearStall+0x6c>
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8e:	81fb      	strh	r3, [r7, #14]
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	89fb      	ldrh	r3, [r7, #14]
 8008e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ea8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	78db      	ldrb	r3, [r3, #3]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d06c      	beq.n	8008f92 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	881b      	ldrh	r3, [r3, #0]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ece:	81bb      	strh	r3, [r7, #12]
 8008ed0:	89bb      	ldrh	r3, [r7, #12]
 8008ed2:	f083 0320 	eor.w	r3, r3, #32
 8008ed6:	81bb      	strh	r3, [r7, #12]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	441a      	add	r2, r3
 8008ee2:	89bb      	ldrh	r3, [r7, #12]
 8008ee4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	8013      	strh	r3, [r2, #0]
 8008ef8:	e04b      	b.n	8008f92 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	82fb      	strh	r3, [r7, #22]
 8008f08:	8afb      	ldrh	r3, [r7, #22]
 8008f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d01b      	beq.n	8008f4a <USB_EPClearStall+0x106>
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f28:	82bb      	strh	r3, [r7, #20]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	441a      	add	r2, r3
 8008f34:	8abb      	ldrh	r3, [r7, #20]
 8008f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	4413      	add	r3, r2
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f60:	827b      	strh	r3, [r7, #18]
 8008f62:	8a7b      	ldrh	r3, [r7, #18]
 8008f64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f68:	827b      	strh	r3, [r7, #18]
 8008f6a:	8a7b      	ldrh	r3, [r7, #18]
 8008f6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f70:	827b      	strh	r3, [r7, #18]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	441a      	add	r2, r3
 8008f7c:	8a7b      	ldrh	r3, [r7, #18]
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	371c      	adds	r7, #28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr

08008f9e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2280      	movs	r2, #128	; 0x80
 8008fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	370c      	adds	r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr

08008fd8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bc80      	pop	{r7}
 8008fea:	4770      	bx	lr

08008fec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b085      	sub	sp, #20
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3714      	adds	r7, #20
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr

0800900a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009014:	2300      	movs	r3, #0
}
 8009016:	4618      	mov	r0, r3
 8009018:	370c      	adds	r7, #12
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr

08009020 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009020:	b480      	push	{r7}
 8009022:	b08d      	sub	sp, #52	; 0x34
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	4611      	mov	r1, r2
 800902c:	461a      	mov	r2, r3
 800902e:	460b      	mov	r3, r1
 8009030:	80fb      	strh	r3, [r7, #6]
 8009032:	4613      	mov	r3, r2
 8009034:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009036:	88bb      	ldrh	r3, [r7, #4]
 8009038:	3301      	adds	r3, #1
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009046:	88fb      	ldrh	r3, [r7, #6]
 8009048:	005a      	lsls	r2, r3, #1
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009052:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009058:	e01e      	b.n	8009098 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	3301      	adds	r3, #1
 8009064:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	b29b      	uxth	r3, r3
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	b29b      	uxth	r3, r3
 8009070:	461a      	mov	r2, r3
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	b29a      	uxth	r2, r3
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009082:	3302      	adds	r3, #2
 8009084:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	3302      	adds	r3, #2
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800908c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908e:	3301      	adds	r3, #1
 8009090:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8009092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009094:	3b01      	subs	r3, #1
 8009096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1dd      	bne.n	800905a <USB_WritePMA+0x3a>
  }
}
 800909e:	bf00      	nop
 80090a0:	bf00      	nop
 80090a2:	3734      	adds	r7, #52	; 0x34
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bc80      	pop	{r7}
 80090a8:	4770      	bx	lr

080090aa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b08b      	sub	sp, #44	; 0x2c
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	4611      	mov	r1, r2
 80090b6:	461a      	mov	r2, r3
 80090b8:	460b      	mov	r3, r1
 80090ba:	80fb      	strh	r3, [r7, #6]
 80090bc:	4613      	mov	r3, r2
 80090be:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80090c0:	88bb      	ldrh	r3, [r7, #4]
 80090c2:	085b      	lsrs	r3, r3, #1
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80090d0:	88fb      	ldrh	r3, [r7, #6]
 80090d2:	005a      	lsls	r2, r3, #1
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090dc:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
 80090e2:	e01b      	b.n	800911c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	881b      	ldrh	r3, [r3, #0]
 80090e8:	b29b      	uxth	r3, r3
 80090ea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80090ec:	6a3b      	ldr	r3, [r7, #32]
 80090ee:	3302      	adds	r3, #2
 80090f0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	3301      	adds	r3, #1
 80090fe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	0a1b      	lsrs	r3, r3, #8
 8009104:	b2da      	uxtb	r2, r3
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	3301      	adds	r3, #1
 800910e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	3302      	adds	r3, #2
 8009114:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	3b01      	subs	r3, #1
 800911a:	627b      	str	r3, [r7, #36]	; 0x24
 800911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e0      	bne.n	80090e4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8009122:	88bb      	ldrh	r3, [r7, #4]
 8009124:	f003 0301 	and.w	r3, r3, #1
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d007      	beq.n	800913e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	b2da      	uxtb	r2, r3
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	701a      	strb	r2, [r3, #0]
  }
}
 800913e:	bf00      	nop
 8009140:	372c      	adds	r7, #44	; 0x2c
 8009142:	46bd      	mov	sp, r7
 8009144:	bc80      	pop	{r7}
 8009146:	4770      	bx	lr

08009148 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	460b      	mov	r3, r1
 8009152:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	7c1b      	ldrb	r3, [r3, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d115      	bne.n	800918c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009164:	2202      	movs	r2, #2
 8009166:	2181      	movs	r1, #129	; 0x81
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f001 fe86 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2201      	movs	r2, #1
 8009172:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009174:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009178:	2202      	movs	r2, #2
 800917a:	2101      	movs	r1, #1
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fe7c 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2201      	movs	r2, #1
 8009186:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800918a:	e012      	b.n	80091b2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800918c:	2340      	movs	r3, #64	; 0x40
 800918e:	2202      	movs	r2, #2
 8009190:	2181      	movs	r1, #129	; 0x81
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f001 fe71 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800919e:	2340      	movs	r3, #64	; 0x40
 80091a0:	2202      	movs	r2, #2
 80091a2:	2101      	movs	r1, #1
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 fe68 	bl	800ae7a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2201      	movs	r2, #1
 80091ae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80091b2:	2308      	movs	r3, #8
 80091b4:	2203      	movs	r2, #3
 80091b6:	2182      	movs	r1, #130	; 0x82
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f001 fe5e 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80091c4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80091c8:	f001 ff7e 	bl	800b0c8 <USBD_static_malloc>
 80091cc:	4602      	mov	r2, r0
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d102      	bne.n	80091e4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80091de:	2301      	movs	r3, #1
 80091e0:	73fb      	strb	r3, [r7, #15]
 80091e2:	e026      	b.n	8009232 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2200      	movs	r2, #0
 80091fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2200      	movs	r2, #0
 8009202:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	7c1b      	ldrb	r3, [r3, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d109      	bne.n	8009222 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009218:	2101      	movs	r1, #1
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 ff1e 	bl	800b05c <USBD_LL_PrepareReceive>
 8009220:	e007      	b.n	8009232 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009228:	2340      	movs	r3, #64	; 0x40
 800922a:	2101      	movs	r1, #1
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 ff15 	bl	800b05c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009232:	7bfb      	ldrb	r3, [r7, #15]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3710      	adds	r7, #16
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	460b      	mov	r3, r1
 8009246:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800924c:	2181      	movs	r1, #129	; 0x81
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f001 fe39 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800925a:	2101      	movs	r1, #1
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 fe32 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800926a:	2182      	movs	r1, #130	; 0x82
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f001 fe2a 	bl	800aec6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2200      	movs	r2, #0
 8009276:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00e      	beq.n	80092a0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009292:	4618      	mov	r0, r3
 8009294:	f001 ff24 	bl	800b0e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80092a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b086      	sub	sp, #24
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80092c4:	2300      	movs	r3, #0
 80092c6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d039      	beq.n	8009348 <USBD_CDC_Setup+0x9e>
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d17f      	bne.n	80093d8 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	88db      	ldrh	r3, [r3, #6]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d029      	beq.n	8009334 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	b25b      	sxtb	r3, r3
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	da11      	bge.n	800930e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80092f6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	88d2      	ldrh	r2, [r2, #6]
 80092fc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80092fe:	6939      	ldr	r1, [r7, #16]
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	88db      	ldrh	r3, [r3, #6]
 8009304:	461a      	mov	r2, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f001 fa09 	bl	800a71e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800930c:	e06b      	b.n	80093e6 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	785a      	ldrb	r2, [r3, #1]
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	88db      	ldrh	r3, [r3, #6]
 800931c:	b2da      	uxtb	r2, r3
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009324:	6939      	ldr	r1, [r7, #16]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	88db      	ldrh	r3, [r3, #6]
 800932a:	461a      	mov	r2, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 fa24 	bl	800a77a <USBD_CtlPrepareRx>
      break;
 8009332:	e058      	b.n	80093e6 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	7850      	ldrb	r0, [r2, #1]
 8009340:	2200      	movs	r2, #0
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	4798      	blx	r3
      break;
 8009346:	e04e      	b.n	80093e6 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	2b0b      	cmp	r3, #11
 800934e:	d02e      	beq.n	80093ae <USBD_CDC_Setup+0x104>
 8009350:	2b0b      	cmp	r3, #11
 8009352:	dc38      	bgt.n	80093c6 <USBD_CDC_Setup+0x11c>
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <USBD_CDC_Setup+0xb4>
 8009358:	2b0a      	cmp	r3, #10
 800935a:	d014      	beq.n	8009386 <USBD_CDC_Setup+0xdc>
 800935c:	e033      	b.n	80093c6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009364:	2b03      	cmp	r3, #3
 8009366:	d107      	bne.n	8009378 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009368:	f107 030c 	add.w	r3, r7, #12
 800936c:	2202      	movs	r2, #2
 800936e:	4619      	mov	r1, r3
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f001 f9d4 	bl	800a71e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009376:	e02e      	b.n	80093d6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 f965 	bl	800a64a <USBD_CtlError>
            ret = USBD_FAIL;
 8009380:	2302      	movs	r3, #2
 8009382:	75fb      	strb	r3, [r7, #23]
          break;
 8009384:	e027      	b.n	80093d6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800938c:	2b03      	cmp	r3, #3
 800938e:	d107      	bne.n	80093a0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009390:	f107 030f 	add.w	r3, r7, #15
 8009394:	2201      	movs	r2, #1
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f001 f9c0 	bl	800a71e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800939e:	e01a      	b.n	80093d6 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f001 f951 	bl	800a64a <USBD_CtlError>
            ret = USBD_FAIL;
 80093a8:	2302      	movs	r3, #2
 80093aa:	75fb      	strb	r3, [r7, #23]
          break;
 80093ac:	e013      	b.n	80093d6 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b4:	2b03      	cmp	r3, #3
 80093b6:	d00d      	beq.n	80093d4 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 f945 	bl	800a64a <USBD_CtlError>
            ret = USBD_FAIL;
 80093c0:	2302      	movs	r3, #2
 80093c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80093c4:	e006      	b.n	80093d4 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80093c6:	6839      	ldr	r1, [r7, #0]
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f001 f93e 	bl	800a64a <USBD_CtlError>
          ret = USBD_FAIL;
 80093ce:	2302      	movs	r3, #2
 80093d0:	75fb      	strb	r3, [r7, #23]
          break;
 80093d2:	e000      	b.n	80093d6 <USBD_CDC_Setup+0x12c>
          break;
 80093d4:	bf00      	nop
      }
      break;
 80093d6:	e006      	b.n	80093e6 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 f935 	bl	800a64a <USBD_CtlError>
      ret = USBD_FAIL;
 80093e0:	2302      	movs	r3, #2
 80093e2:	75fb      	strb	r3, [r7, #23]
      break;
 80093e4:	bf00      	nop
  }

  return ret;
 80093e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3718      	adds	r7, #24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b084      	sub	sp, #16
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009402:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800940a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009412:	2b00      	cmp	r3, #0
 8009414:	d03a      	beq.n	800948c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009416:	78fa      	ldrb	r2, [r7, #3]
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	440b      	add	r3, r1
 8009424:	331c      	adds	r3, #28
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d029      	beq.n	8009480 <USBD_CDC_DataIn+0x90>
 800942c:	78fa      	ldrb	r2, [r7, #3]
 800942e:	6879      	ldr	r1, [r7, #4]
 8009430:	4613      	mov	r3, r2
 8009432:	009b      	lsls	r3, r3, #2
 8009434:	4413      	add	r3, r2
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	440b      	add	r3, r1
 800943a:	331c      	adds	r3, #28
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	78f9      	ldrb	r1, [r7, #3]
 8009440:	68b8      	ldr	r0, [r7, #8]
 8009442:	460b      	mov	r3, r1
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	4403      	add	r3, r0
 800944c:	3338      	adds	r3, #56	; 0x38
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	fbb2 f1f3 	udiv	r1, r2, r3
 8009454:	fb01 f303 	mul.w	r3, r1, r3
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	2b00      	cmp	r3, #0
 800945c:	d110      	bne.n	8009480 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800945e:	78fa      	ldrb	r2, [r7, #3]
 8009460:	6879      	ldr	r1, [r7, #4]
 8009462:	4613      	mov	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	440b      	add	r3, r1
 800946c:	331c      	adds	r3, #28
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009472:	78f9      	ldrb	r1, [r7, #3]
 8009474:	2300      	movs	r3, #0
 8009476:	2200      	movs	r2, #0
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f001 fdcc 	bl	800b016 <USBD_LL_Transmit>
 800947e:	e003      	b.n	8009488 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	e000      	b.n	800948e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800948c:	2302      	movs	r3, #2
  }
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	460b      	mov	r3, r1
 80094a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094a8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	4619      	mov	r1, r3
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f001 fdf7 	bl	800b0a2 <USBD_LL_GetRxDataSize>
 80094b4:	4602      	mov	r2, r0
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00d      	beq.n	80094e2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80094da:	4611      	mov	r1, r2
 80094dc:	4798      	blx	r3

    return USBD_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	e000      	b.n	80094e4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80094e2:	2302      	movs	r3, #2
  }
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094fa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009502:	2b00      	cmp	r3, #0
 8009504:	d015      	beq.n	8009532 <USBD_CDC_EP0_RxReady+0x46>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800950c:	2bff      	cmp	r3, #255	; 0xff
 800950e:	d010      	beq.n	8009532 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800951e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009526:	b292      	uxth	r2, r2
 8009528:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	22ff      	movs	r2, #255	; 0xff
 800952e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3710      	adds	r7, #16
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2243      	movs	r2, #67	; 0x43
 8009548:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800954a:	4b03      	ldr	r3, [pc, #12]	; (8009558 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	bc80      	pop	{r7}
 8009554:	4770      	bx	lr
 8009556:	bf00      	nop
 8009558:	200000dc 	.word	0x200000dc

0800955c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2243      	movs	r2, #67	; 0x43
 8009568:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800956a:	4b03      	ldr	r3, [pc, #12]	; (8009578 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800956c:	4618      	mov	r0, r3
 800956e:	370c      	adds	r7, #12
 8009570:	46bd      	mov	sp, r7
 8009572:	bc80      	pop	{r7}
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000098 	.word	0x20000098

0800957c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2243      	movs	r2, #67	; 0x43
 8009588:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800958a:	4b03      	ldr	r3, [pc, #12]	; (8009598 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800958c:	4618      	mov	r0, r3
 800958e:	370c      	adds	r7, #12
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr
 8009596:	bf00      	nop
 8009598:	20000120 	.word	0x20000120

0800959c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	220a      	movs	r2, #10
 80095a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80095aa:	4b03      	ldr	r3, [pc, #12]	; (80095b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	370c      	adds	r7, #12
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bc80      	pop	{r7}
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	20000054 	.word	0x20000054

080095bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80095c6:	2302      	movs	r3, #2
 80095c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d005      	beq.n	80095dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3714      	adds	r7, #20
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bc80      	pop	{r7}
 80095e6:	4770      	bx	lr

080095e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	bc80      	pop	{r7}
 8009618:	4770      	bx	lr

0800961a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800962a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	683a      	ldr	r2, [r7, #0]
 8009630:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	bc80      	pop	{r7}
 800963e:	4770      	bx	lr

08009640 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01c      	beq.n	8009694 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009660:	2b00      	cmp	r3, #0
 8009662:	d115      	bne.n	8009690 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2201      	movs	r2, #1
 8009668:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009682:	b29b      	uxth	r3, r3
 8009684:	2181      	movs	r1, #129	; 0x81
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f001 fcc5 	bl	800b016 <USBD_LL_Transmit>

      return USBD_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	e002      	b.n	8009696 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009690:	2301      	movs	r3, #1
 8009692:	e000      	b.n	8009696 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009694:	2302      	movs	r3, #2
  }
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d017      	beq.n	80096e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	7c1b      	ldrb	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80096ca:	2101      	movs	r1, #1
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f001 fcc5 	bl	800b05c <USBD_LL_PrepareReceive>
 80096d2:	e007      	b.n	80096e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80096da:	2340      	movs	r3, #64	; 0x40
 80096dc:	2101      	movs	r1, #1
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f001 fcbc 	bl	800b05c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80096e4:	2300      	movs	r3, #0
 80096e6:	e000      	b.n	80096ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80096e8:	2302      	movs	r3, #2
  }
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	60f8      	str	r0, [r7, #12]
 80096fa:	60b9      	str	r1, [r7, #8]
 80096fc:	4613      	mov	r3, r2
 80096fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009706:	2302      	movs	r3, #2
 8009708:	e01a      	b.n	8009740 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d003      	beq.n	800971c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	79fa      	ldrb	r2, [r7, #7]
 8009736:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f001 fb29 	bl	800ad90 <USBD_LL_Init>

  return USBD_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d006      	beq.n	800976a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
 8009768:	e001      	b.n	800976e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800976a:	2302      	movs	r3, #2
 800976c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009770:	4618      	mov	r0, r3
 8009772:	3714      	adds	r7, #20
 8009774:	46bd      	mov	sp, r7
 8009776:	bc80      	pop	{r7}
 8009778:	4770      	bx	lr

0800977a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f001 fb5e 	bl	800ae44 <USBD_LL_Start>

  return USBD_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3708      	adds	r7, #8
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009792:	b480      	push	{r7}
 8009794:	b083      	sub	sp, #12
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bc80      	pop	{r7}
 80097a4:	4770      	bx	lr

080097a6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80097b2:	2302      	movs	r3, #2
 80097b4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d00c      	beq.n	80097da <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	78fa      	ldrb	r2, [r7, #3]
 80097ca:	4611      	mov	r1, r2
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	4798      	blx	r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80097d6:	2300      	movs	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	78fa      	ldrb	r2, [r7, #3]
 80097fa:	4611      	mov	r1, r2
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	4798      	blx	r3

  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800981a:	6839      	ldr	r1, [r7, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 fed8 	bl	800a5d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009830:	461a      	mov	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800983e:	f003 031f 	and.w	r3, r3, #31
 8009842:	2b02      	cmp	r3, #2
 8009844:	d016      	beq.n	8009874 <USBD_LL_SetupStage+0x6a>
 8009846:	2b02      	cmp	r3, #2
 8009848:	d81c      	bhi.n	8009884 <USBD_LL_SetupStage+0x7a>
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <USBD_LL_SetupStage+0x4a>
 800984e:	2b01      	cmp	r3, #1
 8009850:	d008      	beq.n	8009864 <USBD_LL_SetupStage+0x5a>
 8009852:	e017      	b.n	8009884 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f9cb 	bl	8009bf8 <USBD_StdDevReq>
      break;
 8009862:	e01a      	b.n	800989a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800986a:	4619      	mov	r1, r3
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f000 fa2d 	bl	8009ccc <USBD_StdItfReq>
      break;
 8009872:	e012      	b.n	800989a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800987a:	4619      	mov	r1, r3
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 fa6d 	bl	8009d5c <USBD_StdEPReq>
      break;
 8009882:	e00a      	b.n	800989a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800988a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800988e:	b2db      	uxtb	r3, r3
 8009890:	4619      	mov	r1, r3
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 fb36 	bl	800af04 <USBD_LL_StallEP>
      break;
 8009898:	bf00      	nop
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3708      	adds	r7, #8
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	460b      	mov	r3, r1
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80098b2:	7afb      	ldrb	r3, [r7, #11]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d14b      	bne.n	8009950 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80098be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d134      	bne.n	8009934 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	68da      	ldr	r2, [r3, #12]
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d919      	bls.n	800990a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	1ad2      	subs	r2, r2, r3
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	68da      	ldr	r2, [r3, #12]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098ec:	429a      	cmp	r2, r3
 80098ee:	d203      	bcs.n	80098f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	e002      	b.n	80098fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 ff57 	bl	800a7b6 <USBD_CtlContinueRx>
 8009908:	e038      	b.n	800997c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800991c:	2b03      	cmp	r3, #3
 800991e:	d105      	bne.n	800992c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009926:	691b      	ldr	r3, [r3, #16]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800992c:	68f8      	ldr	r0, [r7, #12]
 800992e:	f000 ff54 	bl	800a7da <USBD_CtlSendStatus>
 8009932:	e023      	b.n	800997c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800993a:	2b05      	cmp	r3, #5
 800993c:	d11e      	bne.n	800997c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009946:	2100      	movs	r1, #0
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f001 fadb 	bl	800af04 <USBD_LL_StallEP>
 800994e:	e015      	b.n	800997c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00d      	beq.n	8009978 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009962:	2b03      	cmp	r3, #3
 8009964:	d108      	bne.n	8009978 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996c:	699b      	ldr	r3, [r3, #24]
 800996e:	7afa      	ldrb	r2, [r7, #11]
 8009970:	4611      	mov	r1, r2
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	4798      	blx	r3
 8009976:	e001      	b.n	800997c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009978:	2302      	movs	r3, #2
 800997a:	e000      	b.n	800997e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3718      	adds	r7, #24
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	460b      	mov	r3, r1
 8009990:	607a      	str	r2, [r7, #4]
 8009992:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009994:	7afb      	ldrb	r3, [r7, #11]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d17f      	bne.n	8009a9a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3314      	adds	r3, #20
 800999e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d15c      	bne.n	8009a64 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	68da      	ldr	r2, [r3, #12]
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d915      	bls.n	80099e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	68da      	ldr	r2, [r3, #12]
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	461a      	mov	r2, r3
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 fec1 	bl	800a756 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099d4:	2300      	movs	r3, #0
 80099d6:	2200      	movs	r2, #0
 80099d8:	2100      	movs	r1, #0
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f001 fb3e 	bl	800b05c <USBD_LL_PrepareReceive>
 80099e0:	e04e      	b.n	8009a80 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	6912      	ldr	r2, [r2, #16]
 80099ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80099ee:	fb01 f202 	mul.w	r2, r1, r2
 80099f2:	1a9b      	subs	r3, r3, r2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d11c      	bne.n	8009a32 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d316      	bcc.n	8009a32 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	689a      	ldr	r2, [r3, #8]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d20f      	bcs.n	8009a32 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009a12:	2200      	movs	r2, #0
 8009a14:	2100      	movs	r1, #0
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f000 fe9d 	bl	800a756 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009a24:	2300      	movs	r3, #0
 8009a26:	2200      	movs	r2, #0
 8009a28:	2100      	movs	r1, #0
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f001 fb16 	bl	800b05c <USBD_LL_PrepareReceive>
 8009a30:	e026      	b.n	8009a80 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00a      	beq.n	8009a54 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d105      	bne.n	8009a54 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009a54:	2180      	movs	r1, #128	; 0x80
 8009a56:	68f8      	ldr	r0, [r7, #12]
 8009a58:	f001 fa54 	bl	800af04 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fecf 	bl	800a800 <USBD_CtlReceiveStatus>
 8009a62:	e00d      	b.n	8009a80 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	d004      	beq.n	8009a78 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d103      	bne.n	8009a80 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009a78:	2180      	movs	r1, #128	; 0x80
 8009a7a:	68f8      	ldr	r0, [r7, #12]
 8009a7c:	f001 fa42 	bl	800af04 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009a86:	2b01      	cmp	r3, #1
 8009a88:	d11d      	bne.n	8009ac6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fe81 	bl	8009792 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009a98:	e015      	b.n	8009ac6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00d      	beq.n	8009ac2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009aac:	2b03      	cmp	r3, #3
 8009aae:	d108      	bne.n	8009ac2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	7afa      	ldrb	r2, [r7, #11]
 8009aba:	4611      	mov	r1, r2
 8009abc:	68f8      	ldr	r0, [r7, #12]
 8009abe:	4798      	blx	r3
 8009ac0:	e001      	b.n	8009ac6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e000      	b.n	8009ac8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009ad8:	2340      	movs	r3, #64	; 0x40
 8009ada:	2200      	movs	r2, #0
 8009adc:	2100      	movs	r1, #0
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 f9cb 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2240      	movs	r2, #64	; 0x40
 8009af0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	2200      	movs	r2, #0
 8009af8:	2180      	movs	r1, #128	; 0x80
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f001 f9bd 	bl	800ae7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2240      	movs	r2, #64	; 0x40
 8009b0a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d009      	beq.n	8009b48 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6852      	ldr	r2, [r2, #4]
 8009b40:	b2d2      	uxtb	r2, r2
 8009b42:	4611      	mov	r1, r2
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	4798      	blx	r3
  }

  return USBD_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009b52:	b480      	push	{r7}
 8009b54:	b083      	sub	sp, #12
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	78fa      	ldrb	r2, [r7, #3]
 8009b62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009b64:	2300      	movs	r3, #0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bc80      	pop	{r7}
 8009b6e:	4770      	bx	lr

08009b70 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2204      	movs	r2, #4
 8009b88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bc80      	pop	{r7}
 8009b96:	4770      	bx	lr

08009b98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d105      	bne.n	8009bb6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr

08009bc2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	b082      	sub	sp, #8
 8009bc6:	af00      	add	r7, sp, #0
 8009bc8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d10b      	bne.n	8009bec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009bec:	2300      	movs	r3, #0
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	3708      	adds	r7, #8
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c02:	2300      	movs	r3, #0
 8009c04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c0e:	2b40      	cmp	r3, #64	; 0x40
 8009c10:	d005      	beq.n	8009c1e <USBD_StdDevReq+0x26>
 8009c12:	2b40      	cmp	r3, #64	; 0x40
 8009c14:	d84f      	bhi.n	8009cb6 <USBD_StdDevReq+0xbe>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <USBD_StdDevReq+0x36>
 8009c1a:	2b20      	cmp	r3, #32
 8009c1c:	d14b      	bne.n	8009cb6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	6839      	ldr	r1, [r7, #0]
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	4798      	blx	r3
      break;
 8009c2c:	e048      	b.n	8009cc0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	785b      	ldrb	r3, [r3, #1]
 8009c32:	2b09      	cmp	r3, #9
 8009c34:	d839      	bhi.n	8009caa <USBD_StdDevReq+0xb2>
 8009c36:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <USBD_StdDevReq+0x44>)
 8009c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3c:	08009c8d 	.word	0x08009c8d
 8009c40:	08009ca1 	.word	0x08009ca1
 8009c44:	08009cab 	.word	0x08009cab
 8009c48:	08009c97 	.word	0x08009c97
 8009c4c:	08009cab 	.word	0x08009cab
 8009c50:	08009c6f 	.word	0x08009c6f
 8009c54:	08009c65 	.word	0x08009c65
 8009c58:	08009cab 	.word	0x08009cab
 8009c5c:	08009c83 	.word	0x08009c83
 8009c60:	08009c79 	.word	0x08009c79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f9dc 	bl	800a024 <USBD_GetDescriptor>
          break;
 8009c6c:	e022      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009c6e:	6839      	ldr	r1, [r7, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fb3f 	bl	800a2f4 <USBD_SetAddress>
          break;
 8009c76:	e01d      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fb7e 	bl	800a37c <USBD_SetConfig>
          break;
 8009c80:	e018      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009c82:	6839      	ldr	r1, [r7, #0]
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f000 fc07 	bl	800a498 <USBD_GetConfig>
          break;
 8009c8a:	e013      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009c8c:	6839      	ldr	r1, [r7, #0]
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fc37 	bl	800a502 <USBD_GetStatus>
          break;
 8009c94:	e00e      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fc65 	bl	800a568 <USBD_SetFeature>
          break;
 8009c9e:	e009      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	f000 fc74 	bl	800a590 <USBD_ClrFeature>
          break;
 8009ca8:	e004      	b.n	8009cb4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 fccc 	bl	800a64a <USBD_CtlError>
          break;
 8009cb2:	bf00      	nop
      }
      break;
 8009cb4:	e004      	b.n	8009cc0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fcc6 	bl	800a64a <USBD_CtlError>
      break;
 8009cbe:	bf00      	nop
  }

  return ret;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop

08009ccc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ce2:	2b40      	cmp	r3, #64	; 0x40
 8009ce4:	d005      	beq.n	8009cf2 <USBD_StdItfReq+0x26>
 8009ce6:	2b40      	cmp	r3, #64	; 0x40
 8009ce8:	d82e      	bhi.n	8009d48 <USBD_StdItfReq+0x7c>
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <USBD_StdItfReq+0x26>
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	d12a      	bne.n	8009d48 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	2b02      	cmp	r3, #2
 8009cfc:	d81d      	bhi.n	8009d3a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	889b      	ldrh	r3, [r3, #4]
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d813      	bhi.n	8009d30 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	4798      	blx	r3
 8009d16:	4603      	mov	r3, r0
 8009d18:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	88db      	ldrh	r3, [r3, #6]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <USBD_StdItfReq+0x78>
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10d      	bne.n	8009d44 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fd56 	bl	800a7da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009d2e:	e009      	b.n	8009d44 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009d30:	6839      	ldr	r1, [r7, #0]
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fc89 	bl	800a64a <USBD_CtlError>
          break;
 8009d38:	e004      	b.n	8009d44 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009d3a:	6839      	ldr	r1, [r7, #0]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fc84 	bl	800a64a <USBD_CtlError>
          break;
 8009d42:	e000      	b.n	8009d46 <USBD_StdItfReq+0x7a>
          break;
 8009d44:	bf00      	nop
      }
      break;
 8009d46:	e004      	b.n	8009d52 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fc7d 	bl	800a64a <USBD_CtlError>
      break;
 8009d50:	bf00      	nop
  }

  return USBD_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
 8009d64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009d66:	2300      	movs	r3, #0
 8009d68:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	889b      	ldrh	r3, [r3, #4]
 8009d6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d78:	2b40      	cmp	r3, #64	; 0x40
 8009d7a:	d007      	beq.n	8009d8c <USBD_StdEPReq+0x30>
 8009d7c:	2b40      	cmp	r3, #64	; 0x40
 8009d7e:	f200 8146 	bhi.w	800a00e <USBD_StdEPReq+0x2b2>
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <USBD_StdEPReq+0x40>
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	f040 8141 	bne.w	800a00e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d92:	689b      	ldr	r3, [r3, #8]
 8009d94:	6839      	ldr	r1, [r7, #0]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	4798      	blx	r3
      break;
 8009d9a:	e13d      	b.n	800a018 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d10a      	bne.n	8009dbe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dae:	689b      	ldr	r3, [r3, #8]
 8009db0:	6839      	ldr	r1, [r7, #0]
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	e12d      	b.n	800a01a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	785b      	ldrb	r3, [r3, #1]
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d007      	beq.n	8009dd6 <USBD_StdEPReq+0x7a>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	f300 811b 	bgt.w	800a002 <USBD_StdEPReq+0x2a6>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d072      	beq.n	8009eb6 <USBD_StdEPReq+0x15a>
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d03a      	beq.n	8009e4a <USBD_StdEPReq+0xee>
 8009dd4:	e115      	b.n	800a002 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d002      	beq.n	8009de6 <USBD_StdEPReq+0x8a>
 8009de0:	2b03      	cmp	r3, #3
 8009de2:	d015      	beq.n	8009e10 <USBD_StdEPReq+0xb4>
 8009de4:	e02b      	b.n	8009e3e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00c      	beq.n	8009e06 <USBD_StdEPReq+0xaa>
 8009dec:	7bbb      	ldrb	r3, [r7, #14]
 8009dee:	2b80      	cmp	r3, #128	; 0x80
 8009df0:	d009      	beq.n	8009e06 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009df2:	7bbb      	ldrb	r3, [r7, #14]
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 f884 	bl	800af04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009dfc:	2180      	movs	r1, #128	; 0x80
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f001 f880 	bl	800af04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e04:	e020      	b.n	8009e48 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009e06:	6839      	ldr	r1, [r7, #0]
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fc1e 	bl	800a64a <USBD_CtlError>
              break;
 8009e0e:	e01b      	b.n	8009e48 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	885b      	ldrh	r3, [r3, #2]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10e      	bne.n	8009e36 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <USBD_StdEPReq+0xda>
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b80      	cmp	r3, #128	; 0x80
 8009e22:	d008      	beq.n	8009e36 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	88db      	ldrh	r3, [r3, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d104      	bne.n	8009e36 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009e2c:	7bbb      	ldrb	r3, [r7, #14]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f867 	bl	800af04 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fccf 	bl	800a7da <USBD_CtlSendStatus>

              break;
 8009e3c:	e004      	b.n	8009e48 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009e3e:	6839      	ldr	r1, [r7, #0]
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f000 fc02 	bl	800a64a <USBD_CtlError>
              break;
 8009e46:	bf00      	nop
          }
          break;
 8009e48:	e0e0      	b.n	800a00c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d002      	beq.n	8009e5a <USBD_StdEPReq+0xfe>
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	d015      	beq.n	8009e84 <USBD_StdEPReq+0x128>
 8009e58:	e026      	b.n	8009ea8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d00c      	beq.n	8009e7a <USBD_StdEPReq+0x11e>
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	2b80      	cmp	r3, #128	; 0x80
 8009e64:	d009      	beq.n	8009e7a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	4619      	mov	r1, r3
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f001 f84a 	bl	800af04 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009e70:	2180      	movs	r1, #128	; 0x80
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f001 f846 	bl	800af04 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009e78:	e01c      	b.n	8009eb4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 fbe4 	bl	800a64a <USBD_CtlError>
              break;
 8009e82:	e017      	b.n	8009eb4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	885b      	ldrh	r3, [r3, #2]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d112      	bne.n	8009eb2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009e8c:	7bbb      	ldrb	r3, [r7, #14]
 8009e8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009e96:	7bbb      	ldrb	r3, [r7, #14]
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f001 f851 	bl	800af42 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fc9a 	bl	800a7da <USBD_CtlSendStatus>
              }
              break;
 8009ea6:	e004      	b.n	8009eb2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009ea8:	6839      	ldr	r1, [r7, #0]
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f000 fbcd 	bl	800a64a <USBD_CtlError>
              break;
 8009eb0:	e000      	b.n	8009eb4 <USBD_StdEPReq+0x158>
              break;
 8009eb2:	bf00      	nop
          }
          break;
 8009eb4:	e0aa      	b.n	800a00c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ebc:	2b02      	cmp	r3, #2
 8009ebe:	d002      	beq.n	8009ec6 <USBD_StdEPReq+0x16a>
 8009ec0:	2b03      	cmp	r3, #3
 8009ec2:	d032      	beq.n	8009f2a <USBD_StdEPReq+0x1ce>
 8009ec4:	e097      	b.n	8009ff6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d007      	beq.n	8009edc <USBD_StdEPReq+0x180>
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	2b80      	cmp	r3, #128	; 0x80
 8009ed0:	d004      	beq.n	8009edc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fbb8 	bl	800a64a <USBD_CtlError>
                break;
 8009eda:	e091      	b.n	800a000 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009edc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	da0b      	bge.n	8009efc <USBD_StdEPReq+0x1a0>
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	3310      	adds	r3, #16
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3304      	adds	r3, #4
 8009efa:	e00b      	b.n	8009f14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009efc:	7bbb      	ldrb	r3, [r7, #14]
 8009efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f02:	4613      	mov	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	4413      	add	r3, r2
 8009f12:	3304      	adds	r3, #4
 8009f14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2202      	movs	r2, #2
 8009f20:	4619      	mov	r1, r3
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	f000 fbfb 	bl	800a71e <USBD_CtlSendData>
              break;
 8009f28:	e06a      	b.n	800a000 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009f2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	da11      	bge.n	8009f56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009f32:	7bbb      	ldrb	r3, [r7, #14]
 8009f34:	f003 020f 	and.w	r2, r3, #15
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	3318      	adds	r3, #24
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d117      	bne.n	8009f7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f4c:	6839      	ldr	r1, [r7, #0]
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb7b 	bl	800a64a <USBD_CtlError>
                  break;
 8009f54:	e054      	b.n	800a000 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009f56:	7bbb      	ldrb	r3, [r7, #14]
 8009f58:	f003 020f 	and.w	r2, r3, #15
 8009f5c:	6879      	ldr	r1, [r7, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	440b      	add	r3, r1
 8009f68:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d104      	bne.n	8009f7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fb68 	bl	800a64a <USBD_CtlError>
                  break;
 8009f7a:	e041      	b.n	800a000 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009f7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	da0b      	bge.n	8009f9c <USBD_StdEPReq+0x240>
 8009f84:	7bbb      	ldrb	r3, [r7, #14]
 8009f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	3310      	adds	r3, #16
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	4413      	add	r3, r2
 8009f98:	3304      	adds	r3, #4
 8009f9a:	e00b      	b.n	8009fb4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009fa2:	4613      	mov	r3, r2
 8009fa4:	009b      	lsls	r3, r3, #2
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	4413      	add	r3, r2
 8009fb2:	3304      	adds	r3, #4
 8009fb4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009fb6:	7bbb      	ldrb	r3, [r7, #14]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d002      	beq.n	8009fc2 <USBD_StdEPReq+0x266>
 8009fbc:	7bbb      	ldrb	r3, [r7, #14]
 8009fbe:	2b80      	cmp	r3, #128	; 0x80
 8009fc0:	d103      	bne.n	8009fca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	601a      	str	r2, [r3, #0]
 8009fc8:	e00e      	b.n	8009fe8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 ffd6 	bl	800af80 <USBD_LL_IsStallEP>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	e002      	b.n	8009fe8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	2202      	movs	r2, #2
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fb95 	bl	800a71e <USBD_CtlSendData>
              break;
 8009ff4:	e004      	b.n	800a000 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009ff6:	6839      	ldr	r1, [r7, #0]
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f000 fb26 	bl	800a64a <USBD_CtlError>
              break;
 8009ffe:	bf00      	nop
          }
          break;
 800a000:	e004      	b.n	800a00c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fb20 	bl	800a64a <USBD_CtlError>
          break;
 800a00a:	bf00      	nop
      }
      break;
 800a00c:	e004      	b.n	800a018 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 fb1a 	bl	800a64a <USBD_CtlError>
      break;
 800a016:	bf00      	nop
  }

  return ret;
 800a018:	7bfb      	ldrb	r3, [r7, #15]
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3710      	adds	r7, #16
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}
	...

0800a024 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a02e:	2300      	movs	r3, #0
 800a030:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	885b      	ldrh	r3, [r3, #2]
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	b29b      	uxth	r3, r3
 800a042:	3b01      	subs	r3, #1
 800a044:	2b06      	cmp	r3, #6
 800a046:	f200 8128 	bhi.w	800a29a <USBD_GetDescriptor+0x276>
 800a04a:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <USBD_GetDescriptor+0x2c>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a06d 	.word	0x0800a06d
 800a054:	0800a085 	.word	0x0800a085
 800a058:	0800a0c5 	.word	0x0800a0c5
 800a05c:	0800a29b 	.word	0x0800a29b
 800a060:	0800a29b 	.word	0x0800a29b
 800a064:	0800a23b 	.word	0x0800a23b
 800a068:	0800a267 	.word	0x0800a267
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	7c12      	ldrb	r2, [r2, #16]
 800a078:	f107 0108 	add.w	r1, r7, #8
 800a07c:	4610      	mov	r0, r2
 800a07e:	4798      	blx	r3
 800a080:	60f8      	str	r0, [r7, #12]
      break;
 800a082:	e112      	b.n	800a2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	7c1b      	ldrb	r3, [r3, #16]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d10d      	bne.n	800a0a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a094:	f107 0208 	add.w	r2, r7, #8
 800a098:	4610      	mov	r0, r2
 800a09a:	4798      	blx	r3
 800a09c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a0a6:	e100      	b.n	800a2aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	f107 0208 	add.w	r2, r7, #8
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	4798      	blx	r3
 800a0b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	2202      	movs	r2, #2
 800a0c0:	701a      	strb	r2, [r3, #0]
      break;
 800a0c2:	e0f2      	b.n	800a2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	885b      	ldrh	r3, [r3, #2]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	f200 80ac 	bhi.w	800a228 <USBD_GetDescriptor+0x204>
 800a0d0:	a201      	add	r2, pc, #4	; (adr r2, 800a0d8 <USBD_GetDescriptor+0xb4>)
 800a0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d6:	bf00      	nop
 800a0d8:	0800a0f1 	.word	0x0800a0f1
 800a0dc:	0800a125 	.word	0x0800a125
 800a0e0:	0800a159 	.word	0x0800a159
 800a0e4:	0800a18d 	.word	0x0800a18d
 800a0e8:	0800a1c1 	.word	0x0800a1c1
 800a0ec:	0800a1f5 	.word	0x0800a1f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00b      	beq.n	800a114 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	7c12      	ldrb	r2, [r2, #16]
 800a108:	f107 0108 	add.w	r1, r7, #8
 800a10c:	4610      	mov	r0, r2
 800a10e:	4798      	blx	r3
 800a110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a112:	e091      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a114:	6839      	ldr	r1, [r7, #0]
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fa97 	bl	800a64a <USBD_CtlError>
            err++;
 800a11c:	7afb      	ldrb	r3, [r7, #11]
 800a11e:	3301      	adds	r3, #1
 800a120:	72fb      	strb	r3, [r7, #11]
          break;
 800a122:	e089      	b.n	800a238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00b      	beq.n	800a148 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	7c12      	ldrb	r2, [r2, #16]
 800a13c:	f107 0108 	add.w	r1, r7, #8
 800a140:	4610      	mov	r0, r2
 800a142:	4798      	blx	r3
 800a144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a146:	e077      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 fa7d 	bl	800a64a <USBD_CtlError>
            err++;
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	3301      	adds	r3, #1
 800a154:	72fb      	strb	r3, [r7, #11]
          break;
 800a156:	e06f      	b.n	800a238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d00b      	beq.n	800a17c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	7c12      	ldrb	r2, [r2, #16]
 800a170:	f107 0108 	add.w	r1, r7, #8
 800a174:	4610      	mov	r0, r2
 800a176:	4798      	blx	r3
 800a178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a17a:	e05d      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a17c:	6839      	ldr	r1, [r7, #0]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 fa63 	bl	800a64a <USBD_CtlError>
            err++;
 800a184:	7afb      	ldrb	r3, [r7, #11]
 800a186:	3301      	adds	r3, #1
 800a188:	72fb      	strb	r3, [r7, #11]
          break;
 800a18a:	e055      	b.n	800a238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00b      	beq.n	800a1b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	7c12      	ldrb	r2, [r2, #16]
 800a1a4:	f107 0108 	add.w	r1, r7, #8
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4798      	blx	r3
 800a1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1ae:	e043      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1b0:	6839      	ldr	r1, [r7, #0]
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa49 	bl	800a64a <USBD_CtlError>
            err++;
 800a1b8:	7afb      	ldrb	r3, [r7, #11]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a1be:	e03b      	b.n	800a238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1c6:	695b      	ldr	r3, [r3, #20]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1d2:	695b      	ldr	r3, [r3, #20]
 800a1d4:	687a      	ldr	r2, [r7, #4]
 800a1d6:	7c12      	ldrb	r2, [r2, #16]
 800a1d8:	f107 0108 	add.w	r1, r7, #8
 800a1dc:	4610      	mov	r0, r2
 800a1de:	4798      	blx	r3
 800a1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a1e2:	e029      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 fa2f 	bl	800a64a <USBD_CtlError>
            err++;
 800a1ec:	7afb      	ldrb	r3, [r7, #11]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a1f2:	e021      	b.n	800a238 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00b      	beq.n	800a218 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7c12      	ldrb	r2, [r2, #16]
 800a20c:	f107 0108 	add.w	r1, r7, #8
 800a210:	4610      	mov	r0, r2
 800a212:	4798      	blx	r3
 800a214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a216:	e00f      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a218:	6839      	ldr	r1, [r7, #0]
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa15 	bl	800a64a <USBD_CtlError>
            err++;
 800a220:	7afb      	ldrb	r3, [r7, #11]
 800a222:	3301      	adds	r3, #1
 800a224:	72fb      	strb	r3, [r7, #11]
          break;
 800a226:	e007      	b.n	800a238 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fa0d 	bl	800a64a <USBD_CtlError>
          err++;
 800a230:	7afb      	ldrb	r3, [r7, #11]
 800a232:	3301      	adds	r3, #1
 800a234:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a236:	e038      	b.n	800a2aa <USBD_GetDescriptor+0x286>
 800a238:	e037      	b.n	800a2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	7c1b      	ldrb	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24a:	f107 0208 	add.w	r2, r7, #8
 800a24e:	4610      	mov	r0, r2
 800a250:	4798      	blx	r3
 800a252:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a254:	e029      	b.n	800a2aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a256:	6839      	ldr	r1, [r7, #0]
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f000 f9f6 	bl	800a64a <USBD_CtlError>
        err++;
 800a25e:	7afb      	ldrb	r3, [r7, #11]
 800a260:	3301      	adds	r3, #1
 800a262:	72fb      	strb	r3, [r7, #11]
      break;
 800a264:	e021      	b.n	800a2aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7c1b      	ldrb	r3, [r3, #16]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10d      	bne.n	800a28a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a276:	f107 0208 	add.w	r2, r7, #8
 800a27a:	4610      	mov	r0, r2
 800a27c:	4798      	blx	r3
 800a27e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	3301      	adds	r3, #1
 800a284:	2207      	movs	r2, #7
 800a286:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a288:	e00f      	b.n	800a2aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a28a:	6839      	ldr	r1, [r7, #0]
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f9dc 	bl	800a64a <USBD_CtlError>
        err++;
 800a292:	7afb      	ldrb	r3, [r7, #11]
 800a294:	3301      	adds	r3, #1
 800a296:	72fb      	strb	r3, [r7, #11]
      break;
 800a298:	e007      	b.n	800a2aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a29a:	6839      	ldr	r1, [r7, #0]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f000 f9d4 	bl	800a64a <USBD_CtlError>
      err++;
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a2a8:	bf00      	nop
  }

  if (err != 0U)
 800a2aa:	7afb      	ldrb	r3, [r7, #11]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d11c      	bne.n	800a2ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a2b0:	893b      	ldrh	r3, [r7, #8]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d011      	beq.n	800a2da <USBD_GetDescriptor+0x2b6>
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	88db      	ldrh	r3, [r3, #6]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d00d      	beq.n	800a2da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	88da      	ldrh	r2, [r3, #6]
 800a2c2:	893b      	ldrh	r3, [r7, #8]
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	bf28      	it	cs
 800a2c8:	4613      	movcs	r3, r2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a2ce:	893b      	ldrh	r3, [r7, #8]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	68f9      	ldr	r1, [r7, #12]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f000 fa22 	bl	800a71e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	88db      	ldrh	r3, [r3, #6]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d104      	bne.n	800a2ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fa79 	bl	800a7da <USBD_CtlSendStatus>
 800a2e8:	e000      	b.n	800a2ec <USBD_GetDescriptor+0x2c8>
    return;
 800a2ea:	bf00      	nop
    }
  }
}
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop

0800a2f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	889b      	ldrh	r3, [r3, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d130      	bne.n	800a368 <USBD_SetAddress+0x74>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	88db      	ldrh	r3, [r3, #6]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d12c      	bne.n	800a368 <USBD_SetAddress+0x74>
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	885b      	ldrh	r3, [r3, #2]
 800a312:	2b7f      	cmp	r3, #127	; 0x7f
 800a314:	d828      	bhi.n	800a368 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	885b      	ldrh	r3, [r3, #2]
 800a31a:	b2db      	uxtb	r3, r3
 800a31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a320:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a328:	2b03      	cmp	r3, #3
 800a32a:	d104      	bne.n	800a336 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a32c:	6839      	ldr	r1, [r7, #0]
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f98b 	bl	800a64a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a334:	e01d      	b.n	800a372 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	7bfa      	ldrb	r2, [r7, #15]
 800a33a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a33e:	7bfb      	ldrb	r3, [r7, #15]
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fe48 	bl	800afd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 fa46 	bl	800a7da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d004      	beq.n	800a35e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a35c:	e009      	b.n	800a372 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2201      	movs	r2, #1
 800a362:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a366:	e004      	b.n	800a372 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f96d 	bl	800a64a <USBD_CtlError>
  }
}
 800a370:	bf00      	nop
 800a372:	bf00      	nop
 800a374:	3710      	adds	r7, #16
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
	...

0800a37c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b082      	sub	sp, #8
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	885b      	ldrh	r3, [r3, #2]
 800a38a:	b2da      	uxtb	r2, r3
 800a38c:	4b41      	ldr	r3, [pc, #260]	; (800a494 <USBD_SetConfig+0x118>)
 800a38e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a390:	4b40      	ldr	r3, [pc, #256]	; (800a494 <USBD_SetConfig+0x118>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d904      	bls.n	800a3a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a398:	6839      	ldr	r1, [r7, #0]
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f955 	bl	800a64a <USBD_CtlError>
 800a3a0:	e075      	b.n	800a48e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a8:	2b02      	cmp	r3, #2
 800a3aa:	d002      	beq.n	800a3b2 <USBD_SetConfig+0x36>
 800a3ac:	2b03      	cmp	r3, #3
 800a3ae:	d023      	beq.n	800a3f8 <USBD_SetConfig+0x7c>
 800a3b0:	e062      	b.n	800a478 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a3b2:	4b38      	ldr	r3, [pc, #224]	; (800a494 <USBD_SetConfig+0x118>)
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d01a      	beq.n	800a3f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a3ba:	4b36      	ldr	r3, [pc, #216]	; (800a494 <USBD_SetConfig+0x118>)
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2203      	movs	r2, #3
 800a3c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a3cc:	4b31      	ldr	r3, [pc, #196]	; (800a494 <USBD_SetConfig+0x118>)
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff f9e7 	bl	80097a6 <USBD_SetClassConfig>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d104      	bne.n	800a3e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a3de:	6839      	ldr	r1, [r7, #0]
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f000 f932 	bl	800a64a <USBD_CtlError>
            return;
 800a3e6:	e052      	b.n	800a48e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9f6 	bl	800a7da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a3ee:	e04e      	b.n	800a48e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f9f2 	bl	800a7da <USBD_CtlSendStatus>
        break;
 800a3f6:	e04a      	b.n	800a48e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a3f8:	4b26      	ldr	r3, [pc, #152]	; (800a494 <USBD_SetConfig+0x118>)
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d112      	bne.n	800a426 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a408:	4b22      	ldr	r3, [pc, #136]	; (800a494 <USBD_SetConfig+0x118>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	461a      	mov	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a412:	4b20      	ldr	r3, [pc, #128]	; (800a494 <USBD_SetConfig+0x118>)
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff f9e3 	bl	80097e4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f9db 	bl	800a7da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a424:	e033      	b.n	800a48e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a426:	4b1b      	ldr	r3, [pc, #108]	; (800a494 <USBD_SetConfig+0x118>)
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	461a      	mov	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	685b      	ldr	r3, [r3, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d01d      	beq.n	800a470 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	b2db      	uxtb	r3, r3
 800a43a:	4619      	mov	r1, r3
 800a43c:	6878      	ldr	r0, [r7, #4]
 800a43e:	f7ff f9d1 	bl	80097e4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a442:	4b14      	ldr	r3, [pc, #80]	; (800a494 <USBD_SetConfig+0x118>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	461a      	mov	r2, r3
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a44c:	4b11      	ldr	r3, [pc, #68]	; (800a494 <USBD_SetConfig+0x118>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f7ff f9a7 	bl	80097a6 <USBD_SetClassConfig>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d104      	bne.n	800a468 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f8f2 	bl	800a64a <USBD_CtlError>
            return;
 800a466:	e012      	b.n	800a48e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f9b6 	bl	800a7da <USBD_CtlSendStatus>
        break;
 800a46e:	e00e      	b.n	800a48e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 f9b2 	bl	800a7da <USBD_CtlSendStatus>
        break;
 800a476:	e00a      	b.n	800a48e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 f8e5 	bl	800a64a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a480:	4b04      	ldr	r3, [pc, #16]	; (800a494 <USBD_SetConfig+0x118>)
 800a482:	781b      	ldrb	r3, [r3, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f7ff f9ac 	bl	80097e4 <USBD_ClrClassConfig>
        break;
 800a48c:	bf00      	nop
    }
  }
}
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20000370 	.word	0x20000370

0800a498 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	88db      	ldrh	r3, [r3, #6]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	d004      	beq.n	800a4b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 f8cc 	bl	800a64a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a4b2:	e022      	b.n	800a4fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ba:	2b02      	cmp	r3, #2
 800a4bc:	dc02      	bgt.n	800a4c4 <USBD_GetConfig+0x2c>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dc03      	bgt.n	800a4ca <USBD_GetConfig+0x32>
 800a4c2:	e015      	b.n	800a4f0 <USBD_GetConfig+0x58>
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d00b      	beq.n	800a4e0 <USBD_GetConfig+0x48>
 800a4c8:	e012      	b.n	800a4f0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	4619      	mov	r1, r3
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 f920 	bl	800a71e <USBD_CtlSendData>
        break;
 800a4de:	e00c      	b.n	800a4fa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f918 	bl	800a71e <USBD_CtlSendData>
        break;
 800a4ee:	e004      	b.n	800a4fa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a4f0:	6839      	ldr	r1, [r7, #0]
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f000 f8a9 	bl	800a64a <USBD_CtlError>
        break;
 800a4f8:	bf00      	nop
}
 800a4fa:	bf00      	nop
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b082      	sub	sp, #8
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
 800a50a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a512:	3b01      	subs	r3, #1
 800a514:	2b02      	cmp	r3, #2
 800a516:	d81e      	bhi.n	800a556 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	88db      	ldrh	r3, [r3, #6]
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d004      	beq.n	800a52a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a520:	6839      	ldr	r1, [r7, #0]
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 f891 	bl	800a64a <USBD_CtlError>
        break;
 800a528:	e01a      	b.n	800a560 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d005      	beq.n	800a546 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f043 0202 	orr.w	r2, r3, #2
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	330c      	adds	r3, #12
 800a54a:	2202      	movs	r2, #2
 800a54c:	4619      	mov	r1, r3
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 f8e5 	bl	800a71e <USBD_CtlSendData>
      break;
 800a554:	e004      	b.n	800a560 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f876 	bl	800a64a <USBD_CtlError>
      break;
 800a55e:	bf00      	nop
  }
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	885b      	ldrh	r3, [r3, #2]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d106      	bne.n	800a588 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2201      	movs	r2, #1
 800a57e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f929 	bl	800a7da <USBD_CtlSendStatus>
  }
}
 800a588:	bf00      	nop
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d80b      	bhi.n	800a5be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	885b      	ldrh	r3, [r3, #2]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d10c      	bne.n	800a5c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 f90f 	bl	800a7da <USBD_CtlSendStatus>
      }
      break;
 800a5bc:	e004      	b.n	800a5c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a5be:	6839      	ldr	r1, [r7, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 f842 	bl	800a64a <USBD_CtlError>
      break;
 800a5c6:	e000      	b.n	800a5ca <USBD_ClrFeature+0x3a>
      break;
 800a5c8:	bf00      	nop
  }
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	785a      	ldrb	r2, [r3, #1]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	3302      	adds	r3, #2
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	3303      	adds	r3, #3
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4413      	add	r3, r2
 800a602:	b29a      	uxth	r2, r3
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	3304      	adds	r3, #4
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	b29a      	uxth	r2, r3
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	3305      	adds	r3, #5
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	b29b      	uxth	r3, r3
 800a618:	021b      	lsls	r3, r3, #8
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	4413      	add	r3, r2
 800a61e:	b29a      	uxth	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	3306      	adds	r3, #6
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	b29a      	uxth	r2, r3
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	3307      	adds	r3, #7
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	b29b      	uxth	r3, r3
 800a634:	021b      	lsls	r3, r3, #8
 800a636:	b29b      	uxth	r3, r3
 800a638:	4413      	add	r3, r2
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	80da      	strh	r2, [r3, #6]

}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	bc80      	pop	{r7}
 800a648:	4770      	bx	lr

0800a64a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a64a:	b580      	push	{r7, lr}
 800a64c:	b082      	sub	sp, #8
 800a64e:	af00      	add	r7, sp, #0
 800a650:	6078      	str	r0, [r7, #4]
 800a652:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a654:	2180      	movs	r1, #128	; 0x80
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fc54 	bl	800af04 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a65c:	2100      	movs	r1, #0
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fc50 	bl	800af04 <USBD_LL_StallEP>
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b086      	sub	sp, #24
 800a670:	af00      	add	r7, sp, #0
 800a672:	60f8      	str	r0, [r7, #12]
 800a674:	60b9      	str	r1, [r7, #8]
 800a676:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a678:	2300      	movs	r3, #0
 800a67a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d032      	beq.n	800a6e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f000 f834 	bl	800a6f0 <USBD_GetLen>
 800a688:	4603      	mov	r3, r0
 800a68a:	3301      	adds	r3, #1
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	005b      	lsls	r3, r3, #1
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a696:	7dfb      	ldrb	r3, [r7, #23]
 800a698:	1c5a      	adds	r2, r3, #1
 800a69a:	75fa      	strb	r2, [r7, #23]
 800a69c:	461a      	mov	r2, r3
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	7812      	ldrb	r2, [r2, #0]
 800a6a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a6a8:	7dfb      	ldrb	r3, [r7, #23]
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	75fa      	strb	r2, [r7, #23]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	2203      	movs	r2, #3
 800a6b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a6b8:	e012      	b.n	800a6e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	60fa      	str	r2, [r7, #12]
 800a6c0:	7dfa      	ldrb	r2, [r7, #23]
 800a6c2:	1c51      	adds	r1, r2, #1
 800a6c4:	75f9      	strb	r1, [r7, #23]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	68ba      	ldr	r2, [r7, #8]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	1c5a      	adds	r2, r3, #1
 800a6d4:	75fa      	strb	r2, [r7, #23]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	4413      	add	r3, r2
 800a6dc:	2200      	movs	r2, #0
 800a6de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d1e8      	bne.n	800a6ba <USBD_GetString+0x4e>
    }
  }
}
 800a6e8:	bf00      	nop
 800a6ea:	3718      	adds	r7, #24
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a6fc:	e005      	b.n	800a70a <USBD_GetLen+0x1a>
  {
    len++;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
 800a700:	3301      	adds	r3, #1
 800a702:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3301      	adds	r3, #1
 800a708:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f5      	bne.n	800a6fe <USBD_GetLen+0xe>
  }

  return len;
 800a712:	7bfb      	ldrb	r3, [r7, #15]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	bc80      	pop	{r7}
 800a71c:	4770      	bx	lr

0800a71e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	60f8      	str	r0, [r7, #12]
 800a726:	60b9      	str	r1, [r7, #8]
 800a728:	4613      	mov	r3, r2
 800a72a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2202      	movs	r2, #2
 800a730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a734:	88fa      	ldrh	r2, [r7, #6]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a73a:	88fa      	ldrh	r2, [r7, #6]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	68ba      	ldr	r2, [r7, #8]
 800a744:	2100      	movs	r1, #0
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 fc65 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	4613      	mov	r3, r2
 800a762:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a764:	88fb      	ldrh	r3, [r7, #6]
 800a766:	68ba      	ldr	r2, [r7, #8]
 800a768:	2100      	movs	r1, #0
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f000 fc53 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}

0800a77a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a77a:	b580      	push	{r7, lr}
 800a77c:	b084      	sub	sp, #16
 800a77e:	af00      	add	r7, sp, #0
 800a780:	60f8      	str	r0, [r7, #12]
 800a782:	60b9      	str	r1, [r7, #8]
 800a784:	4613      	mov	r3, r2
 800a786:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2203      	movs	r2, #3
 800a78c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a790:	88fa      	ldrh	r2, [r7, #6]
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a798:	88fa      	ldrh	r2, [r7, #6]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7a0:	88fb      	ldrh	r3, [r7, #6]
 800a7a2:	68ba      	ldr	r2, [r7, #8]
 800a7a4:	2100      	movs	r1, #0
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fc58 	bl	800b05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	3710      	adds	r7, #16
 800a7b2:	46bd      	mov	sp, r7
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b084      	sub	sp, #16
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a7c4:	88fb      	ldrh	r3, [r7, #6]
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	68f8      	ldr	r0, [r7, #12]
 800a7cc:	f000 fc46 	bl	800b05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b082      	sub	sp, #8
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2204      	movs	r2, #4
 800a7e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2100      	movs	r1, #0
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f000 fc10 	bl	800b016 <USBD_LL_Transmit>

  return USBD_OK;
 800a7f6:	2300      	movs	r3, #0
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2205      	movs	r2, #5
 800a80c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a810:	2300      	movs	r3, #0
 800a812:	2200      	movs	r2, #0
 800a814:	2100      	movs	r1, #0
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fc20 	bl	800b05c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a81c:	2300      	movs	r3, #0
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}
	...

0800a828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a82c:	2200      	movs	r2, #0
 800a82e:	4912      	ldr	r1, [pc, #72]	; (800a878 <MX_USB_DEVICE_Init+0x50>)
 800a830:	4812      	ldr	r0, [pc, #72]	; (800a87c <MX_USB_DEVICE_Init+0x54>)
 800a832:	f7fe ff5e 	bl	80096f2 <USBD_Init>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a83c:	f7f7 f97e 	bl	8001b3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a840:	490f      	ldr	r1, [pc, #60]	; (800a880 <MX_USB_DEVICE_Init+0x58>)
 800a842:	480e      	ldr	r0, [pc, #56]	; (800a87c <MX_USB_DEVICE_Init+0x54>)
 800a844:	f7fe ff80 	bl	8009748 <USBD_RegisterClass>
 800a848:	4603      	mov	r3, r0
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d001      	beq.n	800a852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a84e:	f7f7 f975 	bl	8001b3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a852:	490c      	ldr	r1, [pc, #48]	; (800a884 <MX_USB_DEVICE_Init+0x5c>)
 800a854:	4809      	ldr	r0, [pc, #36]	; (800a87c <MX_USB_DEVICE_Init+0x54>)
 800a856:	f7fe feb1 	bl	80095bc <USBD_CDC_RegisterInterface>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a860:	f7f7 f96c 	bl	8001b3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a864:	4805      	ldr	r0, [pc, #20]	; (800a87c <MX_USB_DEVICE_Init+0x54>)
 800a866:	f7fe ff88 	bl	800977a <USBD_Start>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a870:	f7f7 f964 	bl	8001b3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a874:	bf00      	nop
 800a876:	bd80      	pop	{r7, pc}
 800a878:	20000174 	.word	0x20000174
 800a87c:	20000374 	.word	0x20000374
 800a880:	20000060 	.word	0x20000060
 800a884:	20000164 	.word	0x20000164

0800a888 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a88c:	2200      	movs	r2, #0
 800a88e:	4905      	ldr	r1, [pc, #20]	; (800a8a4 <CDC_Init_FS+0x1c>)
 800a890:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <CDC_Init_FS+0x20>)
 800a892:	f7fe fea9 	bl	80095e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a896:	4905      	ldr	r1, [pc, #20]	; (800a8ac <CDC_Init_FS+0x24>)
 800a898:	4803      	ldr	r0, [pc, #12]	; (800a8a8 <CDC_Init_FS+0x20>)
 800a89a:	f7fe febe 	bl	800961a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a89e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	20000a38 	.word	0x20000a38
 800a8a8:	20000374 	.word	0x20000374
 800a8ac:	20000638 	.word	0x20000638

0800a8b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a8b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bc80      	pop	{r7}
 800a8bc:	4770      	bx	lr
	...

0800a8c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	6039      	str	r1, [r7, #0]
 800a8ca:	71fb      	strb	r3, [r7, #7]
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a8d0:	79fb      	ldrb	r3, [r7, #7]
 800a8d2:	2b23      	cmp	r3, #35	; 0x23
 800a8d4:	d84a      	bhi.n	800a96c <CDC_Control_FS+0xac>
 800a8d6:	a201      	add	r2, pc, #4	; (adr r2, 800a8dc <CDC_Control_FS+0x1c>)
 800a8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8dc:	0800a96d 	.word	0x0800a96d
 800a8e0:	0800a96d 	.word	0x0800a96d
 800a8e4:	0800a96d 	.word	0x0800a96d
 800a8e8:	0800a96d 	.word	0x0800a96d
 800a8ec:	0800a96d 	.word	0x0800a96d
 800a8f0:	0800a96d 	.word	0x0800a96d
 800a8f4:	0800a96d 	.word	0x0800a96d
 800a8f8:	0800a96d 	.word	0x0800a96d
 800a8fc:	0800a96d 	.word	0x0800a96d
 800a900:	0800a96d 	.word	0x0800a96d
 800a904:	0800a96d 	.word	0x0800a96d
 800a908:	0800a96d 	.word	0x0800a96d
 800a90c:	0800a96d 	.word	0x0800a96d
 800a910:	0800a96d 	.word	0x0800a96d
 800a914:	0800a96d 	.word	0x0800a96d
 800a918:	0800a96d 	.word	0x0800a96d
 800a91c:	0800a96d 	.word	0x0800a96d
 800a920:	0800a96d 	.word	0x0800a96d
 800a924:	0800a96d 	.word	0x0800a96d
 800a928:	0800a96d 	.word	0x0800a96d
 800a92c:	0800a96d 	.word	0x0800a96d
 800a930:	0800a96d 	.word	0x0800a96d
 800a934:	0800a96d 	.word	0x0800a96d
 800a938:	0800a96d 	.word	0x0800a96d
 800a93c:	0800a96d 	.word	0x0800a96d
 800a940:	0800a96d 	.word	0x0800a96d
 800a944:	0800a96d 	.word	0x0800a96d
 800a948:	0800a96d 	.word	0x0800a96d
 800a94c:	0800a96d 	.word	0x0800a96d
 800a950:	0800a96d 	.word	0x0800a96d
 800a954:	0800a96d 	.word	0x0800a96d
 800a958:	0800a96d 	.word	0x0800a96d
 800a95c:	0800a96d 	.word	0x0800a96d
 800a960:	0800a96d 	.word	0x0800a96d
 800a964:	0800a96d 	.word	0x0800a96d
 800a968:	0800a96d 	.word	0x0800a96d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a96c:	bf00      	nop
  }

  return (USBD_OK);
 800a96e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a970:	4618      	mov	r0, r3
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	bc80      	pop	{r7}
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop

0800a97c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a986:	6879      	ldr	r1, [r7, #4]
 800a988:	4805      	ldr	r0, [pc, #20]	; (800a9a0 <CDC_Receive_FS+0x24>)
 800a98a:	f7fe fe46 	bl	800961a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a98e:	4804      	ldr	r0, [pc, #16]	; (800a9a0 <CDC_Receive_FS+0x24>)
 800a990:	f7fe fe85 	bl	800969e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a994:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a996:	4618      	mov	r0, r3
 800a998:	3708      	adds	r7, #8
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	20000374 	.word	0x20000374

0800a9a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
 800a9ac:	460b      	mov	r3, r1
 800a9ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a9b4:	4b0d      	ldr	r3, [pc, #52]	; (800a9ec <CDC_Transmit_FS+0x48>)
 800a9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d001      	beq.n	800a9ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e00b      	b.n	800a9e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a9ca:	887b      	ldrh	r3, [r7, #2]
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4806      	ldr	r0, [pc, #24]	; (800a9ec <CDC_Transmit_FS+0x48>)
 800a9d2:	f7fe fe09 	bl	80095e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a9d6:	4805      	ldr	r0, [pc, #20]	; (800a9ec <CDC_Transmit_FS+0x48>)
 800a9d8:	f7fe fe32 	bl	8009640 <USBD_CDC_TransmitPacket>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a9e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	20000374 	.word	0x20000374

0800a9f0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	6039      	str	r1, [r7, #0]
 800a9fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	2212      	movs	r2, #18
 800aa00:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800aa02:	4b03      	ldr	r3, [pc, #12]	; (800aa10 <USBD_FS_DeviceDescriptor+0x20>)
}
 800aa04:	4618      	mov	r0, r3
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bc80      	pop	{r7}
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	20000190 	.word	0x20000190

0800aa14 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	6039      	str	r1, [r7, #0]
 800aa1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2204      	movs	r2, #4
 800aa24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800aa26:	4b03      	ldr	r3, [pc, #12]	; (800aa34 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bc80      	pop	{r7}
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	200001a4 	.word	0x200001a4

0800aa38 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	4603      	mov	r3, r0
 800aa40:	6039      	str	r1, [r7, #0]
 800aa42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d105      	bne.n	800aa56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	4907      	ldr	r1, [pc, #28]	; (800aa6c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa4e:	4808      	ldr	r0, [pc, #32]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa50:	f7ff fe0c 	bl	800a66c <USBD_GetString>
 800aa54:	e004      	b.n	800aa60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800aa56:	683a      	ldr	r2, [r7, #0]
 800aa58:	4904      	ldr	r1, [pc, #16]	; (800aa6c <USBD_FS_ProductStrDescriptor+0x34>)
 800aa5a:	4805      	ldr	r0, [pc, #20]	; (800aa70 <USBD_FS_ProductStrDescriptor+0x38>)
 800aa5c:	f7ff fe06 	bl	800a66c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aa60:	4b02      	ldr	r3, [pc, #8]	; (800aa6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	20000e38 	.word	0x20000e38
 800aa70:	0800ce50 	.word	0x0800ce50

0800aa74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	6039      	str	r1, [r7, #0]
 800aa7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800aa80:	683a      	ldr	r2, [r7, #0]
 800aa82:	4904      	ldr	r1, [pc, #16]	; (800aa94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800aa84:	4804      	ldr	r0, [pc, #16]	; (800aa98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800aa86:	f7ff fdf1 	bl	800a66c <USBD_GetString>
  return USBD_StrDesc;
 800aa8a:	4b02      	ldr	r3, [pc, #8]	; (800aa94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	3708      	adds	r7, #8
 800aa90:	46bd      	mov	sp, r7
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	20000e38 	.word	0x20000e38
 800aa98:	0800ce64 	.word	0x0800ce64

0800aa9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	6039      	str	r1, [r7, #0]
 800aaa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	221a      	movs	r2, #26
 800aaac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800aaae:	f000 f843 	bl	800ab38 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800aab2:	4b02      	ldr	r3, [pc, #8]	; (800aabc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	200001a8 	.word	0x200001a8

0800aac0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	4603      	mov	r3, r0
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d105      	bne.n	800aade <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4907      	ldr	r1, [pc, #28]	; (800aaf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aad6:	4808      	ldr	r0, [pc, #32]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aad8:	f7ff fdc8 	bl	800a66c <USBD_GetString>
 800aadc:	e004      	b.n	800aae8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	4904      	ldr	r1, [pc, #16]	; (800aaf4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800aae2:	4805      	ldr	r0, [pc, #20]	; (800aaf8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800aae4:	f7ff fdc2 	bl	800a66c <USBD_GetString>
  }
  return USBD_StrDesc;
 800aae8:	4b02      	ldr	r3, [pc, #8]	; (800aaf4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000e38 	.word	0x20000e38
 800aaf8:	0800ce78 	.word	0x0800ce78

0800aafc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b082      	sub	sp, #8
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	4603      	mov	r3, r0
 800ab04:	6039      	str	r1, [r7, #0]
 800ab06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ab08:	79fb      	ldrb	r3, [r7, #7]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d105      	bne.n	800ab1a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	4907      	ldr	r1, [pc, #28]	; (800ab30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab12:	4808      	ldr	r0, [pc, #32]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab14:	f7ff fdaa 	bl	800a66c <USBD_GetString>
 800ab18:	e004      	b.n	800ab24 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ab1a:	683a      	ldr	r2, [r7, #0]
 800ab1c:	4904      	ldr	r1, [pc, #16]	; (800ab30 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ab1e:	4805      	ldr	r0, [pc, #20]	; (800ab34 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ab20:	f7ff fda4 	bl	800a66c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ab26:	4618      	mov	r0, r3
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	20000e38 	.word	0x20000e38
 800ab34:	0800ce84 	.word	0x0800ce84

0800ab38 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ab3e:	4b0f      	ldr	r3, [pc, #60]	; (800ab7c <Get_SerialNum+0x44>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ab44:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <Get_SerialNum+0x48>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ab4a:	4b0e      	ldr	r3, [pc, #56]	; (800ab84 <Get_SerialNum+0x4c>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4413      	add	r3, r2
 800ab56:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d009      	beq.n	800ab72 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ab5e:	2208      	movs	r2, #8
 800ab60:	4909      	ldr	r1, [pc, #36]	; (800ab88 <Get_SerialNum+0x50>)
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 f814 	bl	800ab90 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ab68:	2204      	movs	r2, #4
 800ab6a:	4908      	ldr	r1, [pc, #32]	; (800ab8c <Get_SerialNum+0x54>)
 800ab6c:	68b8      	ldr	r0, [r7, #8]
 800ab6e:	f000 f80f 	bl	800ab90 <IntToUnicode>
  }
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	1ffff7e8 	.word	0x1ffff7e8
 800ab80:	1ffff7ec 	.word	0x1ffff7ec
 800ab84:	1ffff7f0 	.word	0x1ffff7f0
 800ab88:	200001aa 	.word	0x200001aa
 800ab8c:	200001ba 	.word	0x200001ba

0800ab90 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b087      	sub	sp, #28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aba2:	2300      	movs	r3, #0
 800aba4:	75fb      	strb	r3, [r7, #23]
 800aba6:	e027      	b.n	800abf8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	0f1b      	lsrs	r3, r3, #28
 800abac:	2b09      	cmp	r3, #9
 800abae:	d80b      	bhi.n	800abc8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	0f1b      	lsrs	r3, r3, #28
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	7dfb      	ldrb	r3, [r7, #23]
 800abb8:	005b      	lsls	r3, r3, #1
 800abba:	4619      	mov	r1, r3
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	440b      	add	r3, r1
 800abc0:	3230      	adds	r2, #48	; 0x30
 800abc2:	b2d2      	uxtb	r2, r2
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e00a      	b.n	800abde <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	0f1b      	lsrs	r3, r3, #28
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	005b      	lsls	r3, r3, #1
 800abd2:	4619      	mov	r1, r3
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	440b      	add	r3, r1
 800abd8:	3237      	adds	r2, #55	; 0x37
 800abda:	b2d2      	uxtb	r2, r2
 800abdc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	011b      	lsls	r3, r3, #4
 800abe2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800abe4:	7dfb      	ldrb	r3, [r7, #23]
 800abe6:	005b      	lsls	r3, r3, #1
 800abe8:	3301      	adds	r3, #1
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	4413      	add	r3, r2
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800abf2:	7dfb      	ldrb	r3, [r7, #23]
 800abf4:	3301      	adds	r3, #1
 800abf6:	75fb      	strb	r3, [r7, #23]
 800abf8:	7dfa      	ldrb	r2, [r7, #23]
 800abfa:	79fb      	ldrb	r3, [r7, #7]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d3d3      	bcc.n	800aba8 <IntToUnicode+0x18>
  }
}
 800ac00:	bf00      	nop
 800ac02:	bf00      	nop
 800ac04:	371c      	adds	r7, #28
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bc80      	pop	{r7}
 800ac0a:	4770      	bx	lr

0800ac0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a0d      	ldr	r2, [pc, #52]	; (800ac50 <HAL_PCD_MspInit+0x44>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d113      	bne.n	800ac46 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ac1e:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <HAL_PCD_MspInit+0x48>)
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	4a0c      	ldr	r2, [pc, #48]	; (800ac54 <HAL_PCD_MspInit+0x48>)
 800ac24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ac28:	61d3      	str	r3, [r2, #28]
 800ac2a:	4b0a      	ldr	r3, [pc, #40]	; (800ac54 <HAL_PCD_MspInit+0x48>)
 800ac2c:	69db      	ldr	r3, [r3, #28]
 800ac2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac32:	60fb      	str	r3, [r7, #12]
 800ac34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800ac36:	2200      	movs	r2, #0
 800ac38:	2100      	movs	r1, #0
 800ac3a:	2014      	movs	r0, #20
 800ac3c:	f7f7 fda5 	bl	800278a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800ac40:	2014      	movs	r0, #20
 800ac42:	f7f7 fdbe 	bl	80027c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ac46:	bf00      	nop
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	40005c00 	.word	0x40005c00
 800ac54:	40021000 	.word	0x40021000

0800ac58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	4610      	mov	r0, r2
 800ac70:	f7fe fdcb 	bl	800980a <USBD_LL_SetupStage>
}
 800ac74:	bf00      	nop
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b082      	sub	sp, #8
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	460b      	mov	r3, r1
 800ac86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ac8e:	78fa      	ldrb	r2, [r7, #3]
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	00db      	lsls	r3, r3, #3
 800ac9a:	440b      	add	r3, r1
 800ac9c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	4619      	mov	r1, r3
 800aca6:	f7fe fdfd 	bl	80098a4 <USBD_LL_DataOutStage>
}
 800acaa:	bf00      	nop
 800acac:	3708      	adds	r7, #8
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}

0800acb2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b082      	sub	sp, #8
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800acc4:	78fa      	ldrb	r2, [r7, #3]
 800acc6:	6879      	ldr	r1, [r7, #4]
 800acc8:	4613      	mov	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	440b      	add	r3, r1
 800acd2:	333c      	adds	r3, #60	; 0x3c
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	4619      	mov	r1, r3
 800acda:	f7fe fe54 	bl	8009986 <USBD_LL_DataInStage>
}
 800acde:	bf00      	nop
 800ace0:	3708      	adds	r7, #8
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bd80      	pop	{r7, pc}

0800ace6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ace6:	b580      	push	{r7, lr}
 800ace8:	b082      	sub	sp, #8
 800acea:	af00      	add	r7, sp, #0
 800acec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe ff64 	bl	8009bc2 <USBD_LL_SOF>
}
 800acfa:	bf00      	nop
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b084      	sub	sp, #16
 800ad06:	af00      	add	r7, sp, #0
 800ad08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	2b02      	cmp	r3, #2
 800ad14:	d001      	beq.n	800ad1a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ad16:	f7f6 ff11 	bl	8001b3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad20:	7bfa      	ldrb	r2, [r7, #15]
 800ad22:	4611      	mov	r1, r2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fe ff14 	bl	8009b52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7fe fecd 	bl	8009ad0 <USBD_LL_Reset>
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b082      	sub	sp, #8
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe ff0e 	bl	8009b70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	699b      	ldr	r3, [r3, #24]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <HAL_PCD_SuspendCallback+0x30>)
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	4a03      	ldr	r2, [pc, #12]	; (800ad70 <HAL_PCD_SuspendCallback+0x30>)
 800ad62:	f043 0306 	orr.w	r3, r3, #6
 800ad66:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ad68:	bf00      	nop
 800ad6a:	3708      	adds	r7, #8
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	e000ed00 	.word	0xe000ed00

0800ad74 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f7fe ff08 	bl	8009b98 <USBD_LL_Resume>
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ad98:	4a28      	ldr	r2, [pc, #160]	; (800ae3c <USBD_LL_Init+0xac>)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a26      	ldr	r2, [pc, #152]	; (800ae3c <USBD_LL_Init+0xac>)
 800ada4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ada8:	4b24      	ldr	r3, [pc, #144]	; (800ae3c <USBD_LL_Init+0xac>)
 800adaa:	4a25      	ldr	r2, [pc, #148]	; (800ae40 <USBD_LL_Init+0xb0>)
 800adac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800adae:	4b23      	ldr	r3, [pc, #140]	; (800ae3c <USBD_LL_Init+0xac>)
 800adb0:	2208      	movs	r2, #8
 800adb2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800adb4:	4b21      	ldr	r3, [pc, #132]	; (800ae3c <USBD_LL_Init+0xac>)
 800adb6:	2202      	movs	r2, #2
 800adb8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800adba:	4b20      	ldr	r3, [pc, #128]	; (800ae3c <USBD_LL_Init+0xac>)
 800adbc:	2200      	movs	r2, #0
 800adbe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800adc0:	4b1e      	ldr	r3, [pc, #120]	; (800ae3c <USBD_LL_Init+0xac>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800adc6:	4b1d      	ldr	r3, [pc, #116]	; (800ae3c <USBD_LL_Init+0xac>)
 800adc8:	2200      	movs	r2, #0
 800adca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800adcc:	481b      	ldr	r0, [pc, #108]	; (800ae3c <USBD_LL_Init+0xac>)
 800adce:	f7f7 fec8 	bl	8002b62 <HAL_PCD_Init>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800add8:	f7f6 feb0 	bl	8001b3c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ade2:	2318      	movs	r3, #24
 800ade4:	2200      	movs	r2, #0
 800ade6:	2100      	movs	r1, #0
 800ade8:	f7f9 fb3c 	bl	8004464 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adf2:	2358      	movs	r3, #88	; 0x58
 800adf4:	2200      	movs	r2, #0
 800adf6:	2180      	movs	r1, #128	; 0x80
 800adf8:	f7f9 fb34 	bl	8004464 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae02:	23c0      	movs	r3, #192	; 0xc0
 800ae04:	2200      	movs	r2, #0
 800ae06:	2181      	movs	r1, #129	; 0x81
 800ae08:	f7f9 fb2c 	bl	8004464 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae12:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ae16:	2200      	movs	r2, #0
 800ae18:	2101      	movs	r1, #1
 800ae1a:	f7f9 fb23 	bl	8004464 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae24:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae28:	2200      	movs	r2, #0
 800ae2a:	2182      	movs	r1, #130	; 0x82
 800ae2c:	f7f9 fb1a 	bl	8004464 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20001038 	.word	0x20001038
 800ae40:	40005c00 	.word	0x40005c00

0800ae44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7f7 ff8c 	bl	8002d78 <HAL_PCD_Start>
 800ae60:	4603      	mov	r3, r0
 800ae62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 f94e 	bl	800b108 <USBD_Get_USB_Status>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae70:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3710      	adds	r7, #16
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ae7a:	b580      	push	{r7, lr}
 800ae7c:	b084      	sub	sp, #16
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	4608      	mov	r0, r1
 800ae84:	4611      	mov	r1, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	4603      	mov	r3, r0
 800ae8a:	70fb      	strb	r3, [r7, #3]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70bb      	strb	r3, [r7, #2]
 800ae90:	4613      	mov	r3, r2
 800ae92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aea2:	78bb      	ldrb	r3, [r7, #2]
 800aea4:	883a      	ldrh	r2, [r7, #0]
 800aea6:	78f9      	ldrb	r1, [r7, #3]
 800aea8:	f7f8 f904 	bl	80030b4 <HAL_PCD_EP_Open>
 800aeac:	4603      	mov	r3, r0
 800aeae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeb0:	7bfb      	ldrb	r3, [r7, #15]
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 f928 	bl	800b108 <USBD_Get_USB_Status>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3710      	adds	r7, #16
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aed2:	2300      	movs	r3, #0
 800aed4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aed6:	2300      	movs	r3, #0
 800aed8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee0:	78fa      	ldrb	r2, [r7, #3]
 800aee2:	4611      	mov	r1, r2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7f8 f94b 	bl	8003180 <HAL_PCD_EP_Close>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeee:	7bfb      	ldrb	r3, [r7, #15]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f909 	bl	800b108 <USBD_Get_USB_Status>
 800aef6:	4603      	mov	r3, r0
 800aef8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aefa:	7bbb      	ldrb	r3, [r7, #14]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	460b      	mov	r3, r1
 800af0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af10:	2300      	movs	r3, #0
 800af12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af1e:	78fa      	ldrb	r2, [r7, #3]
 800af20:	4611      	mov	r1, r2
 800af22:	4618      	mov	r0, r3
 800af24:	f7f8 fa0b 	bl	800333e <HAL_PCD_EP_SetStall>
 800af28:	4603      	mov	r3, r0
 800af2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	4618      	mov	r0, r3
 800af30:	f000 f8ea 	bl	800b108 <USBD_Get_USB_Status>
 800af34:	4603      	mov	r3, r0
 800af36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af38:	7bbb      	ldrb	r3, [r7, #14]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b084      	sub	sp, #16
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
 800af4a:	460b      	mov	r3, r1
 800af4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af4e:	2300      	movs	r3, #0
 800af50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af5c:	78fa      	ldrb	r2, [r7, #3]
 800af5e:	4611      	mov	r1, r2
 800af60:	4618      	mov	r0, r3
 800af62:	f7f8 fa4c 	bl	80033fe <HAL_PCD_EP_ClrStall>
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af6a:	7bfb      	ldrb	r3, [r7, #15]
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 f8cb 	bl	800b108 <USBD_Get_USB_Status>
 800af72:	4603      	mov	r3, r0
 800af74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af76:	7bbb      	ldrb	r3, [r7, #14]
}
 800af78:	4618      	mov	r0, r3
 800af7a:	3710      	adds	r7, #16
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800af80:	b480      	push	{r7}
 800af82:	b085      	sub	sp, #20
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800af94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	da0c      	bge.n	800afb6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800af9c:	78fb      	ldrb	r3, [r7, #3]
 800af9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afa2:	68f9      	ldr	r1, [r7, #12]
 800afa4:	1c5a      	adds	r2, r3, #1
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	00db      	lsls	r3, r3, #3
 800afae:	440b      	add	r3, r1
 800afb0:	3302      	adds	r3, #2
 800afb2:	781b      	ldrb	r3, [r3, #0]
 800afb4:	e00b      	b.n	800afce <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800afb6:	78fb      	ldrb	r3, [r7, #3]
 800afb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afbc:	68f9      	ldr	r1, [r7, #12]
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	440b      	add	r3, r1
 800afc8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800afcc:	781b      	ldrb	r3, [r3, #0]
  }
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3714      	adds	r7, #20
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bc80      	pop	{r7}
 800afd6:	4770      	bx	lr

0800afd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	460b      	mov	r3, r1
 800afe2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afe4:	2300      	movs	r3, #0
 800afe6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afe8:	2300      	movs	r3, #0
 800afea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aff2:	78fa      	ldrb	r2, [r7, #3]
 800aff4:	4611      	mov	r1, r2
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7f8 f837 	bl	800306a <HAL_PCD_SetAddress>
 800affc:	4603      	mov	r3, r0
 800affe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	4618      	mov	r0, r3
 800b004:	f000 f880 	bl	800b108 <USBD_Get_USB_Status>
 800b008:	4603      	mov	r3, r0
 800b00a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b00c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b086      	sub	sp, #24
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	607a      	str	r2, [r7, #4]
 800b020:	461a      	mov	r2, r3
 800b022:	460b      	mov	r3, r1
 800b024:	72fb      	strb	r3, [r7, #11]
 800b026:	4613      	mov	r3, r2
 800b028:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b02e:	2300      	movs	r3, #0
 800b030:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b038:	893b      	ldrh	r3, [r7, #8]
 800b03a:	7af9      	ldrb	r1, [r7, #11]
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	f7f8 f93b 	bl	80032b8 <HAL_PCD_EP_Transmit>
 800b042:	4603      	mov	r3, r0
 800b044:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	4618      	mov	r0, r3
 800b04a:	f000 f85d 	bl	800b108 <USBD_Get_USB_Status>
 800b04e:	4603      	mov	r3, r0
 800b050:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b052:	7dbb      	ldrb	r3, [r7, #22]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	607a      	str	r2, [r7, #4]
 800b066:	461a      	mov	r2, r3
 800b068:	460b      	mov	r3, r1
 800b06a:	72fb      	strb	r3, [r7, #11]
 800b06c:	4613      	mov	r3, r2
 800b06e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b074:	2300      	movs	r3, #0
 800b076:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b07e:	893b      	ldrh	r3, [r7, #8]
 800b080:	7af9      	ldrb	r1, [r7, #11]
 800b082:	687a      	ldr	r2, [r7, #4]
 800b084:	f7f8 f8c4 	bl	8003210 <HAL_PCD_EP_Receive>
 800b088:	4603      	mov	r3, r0
 800b08a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b08c:	7dfb      	ldrb	r3, [r7, #23]
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 f83a 	bl	800b108 <USBD_Get_USB_Status>
 800b094:	4603      	mov	r3, r0
 800b096:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b098:	7dbb      	ldrb	r3, [r7, #22]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}

0800b0a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b0a2:	b580      	push	{r7, lr}
 800b0a4:	b082      	sub	sp, #8
 800b0a6:	af00      	add	r7, sp, #0
 800b0a8:	6078      	str	r0, [r7, #4]
 800b0aa:	460b      	mov	r3, r1
 800b0ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0b4:	78fa      	ldrb	r2, [r7, #3]
 800b0b6:	4611      	mov	r1, r2
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7f8 f8e6 	bl	800328a <HAL_PCD_EP_GetRxCount>
 800b0be:	4603      	mov	r3, r0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3708      	adds	r7, #8
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b0d0:	4b02      	ldr	r3, [pc, #8]	; (800b0dc <USBD_static_malloc+0x14>)
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	370c      	adds	r7, #12
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bc80      	pop	{r7}
 800b0da:	4770      	bx	lr
 800b0dc:	20001324 	.word	0x20001324

0800b0e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b083      	sub	sp, #12
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]

}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bc80      	pop	{r7}
 800b0f0:	4770      	bx	lr

0800b0f2 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f2:	b480      	push	{r7}
 800b0f4:	b083      	sub	sp, #12
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b0fe:	bf00      	nop
 800b100:	370c      	adds	r7, #12
 800b102:	46bd      	mov	sp, r7
 800b104:	bc80      	pop	{r7}
 800b106:	4770      	bx	lr

0800b108 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	4603      	mov	r3, r0
 800b110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b112:	2300      	movs	r3, #0
 800b114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b116:	79fb      	ldrb	r3, [r7, #7]
 800b118:	2b03      	cmp	r3, #3
 800b11a:	d817      	bhi.n	800b14c <USBD_Get_USB_Status+0x44>
 800b11c:	a201      	add	r2, pc, #4	; (adr r2, 800b124 <USBD_Get_USB_Status+0x1c>)
 800b11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b122:	bf00      	nop
 800b124:	0800b135 	.word	0x0800b135
 800b128:	0800b13b 	.word	0x0800b13b
 800b12c:	0800b141 	.word	0x0800b141
 800b130:	0800b147 	.word	0x0800b147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b134:	2300      	movs	r3, #0
 800b136:	73fb      	strb	r3, [r7, #15]
    break;
 800b138:	e00b      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b13a:	2302      	movs	r3, #2
 800b13c:	73fb      	strb	r3, [r7, #15]
    break;
 800b13e:	e008      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b140:	2301      	movs	r3, #1
 800b142:	73fb      	strb	r3, [r7, #15]
    break;
 800b144:	e005      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b146:	2302      	movs	r3, #2
 800b148:	73fb      	strb	r3, [r7, #15]
    break;
 800b14a:	e002      	b.n	800b152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b14c:	2302      	movs	r3, #2
 800b14e:	73fb      	strb	r3, [r7, #15]
    break;
 800b150:	bf00      	nop
  }
  return usb_status;
 800b152:	7bfb      	ldrb	r3, [r7, #15]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3714      	adds	r7, #20
 800b158:	46bd      	mov	sp, r7
 800b15a:	bc80      	pop	{r7}
 800b15c:	4770      	bx	lr
 800b15e:	bf00      	nop

0800b160 <__errno>:
 800b160:	4b01      	ldr	r3, [pc, #4]	; (800b168 <__errno+0x8>)
 800b162:	6818      	ldr	r0, [r3, #0]
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	200001c4 	.word	0x200001c4

0800b16c <__libc_init_array>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	2600      	movs	r6, #0
 800b170:	4d0c      	ldr	r5, [pc, #48]	; (800b1a4 <__libc_init_array+0x38>)
 800b172:	4c0d      	ldr	r4, [pc, #52]	; (800b1a8 <__libc_init_array+0x3c>)
 800b174:	1b64      	subs	r4, r4, r5
 800b176:	10a4      	asrs	r4, r4, #2
 800b178:	42a6      	cmp	r6, r4
 800b17a:	d109      	bne.n	800b190 <__libc_init_array+0x24>
 800b17c:	f001 fe3a 	bl	800cdf4 <_init>
 800b180:	2600      	movs	r6, #0
 800b182:	4d0a      	ldr	r5, [pc, #40]	; (800b1ac <__libc_init_array+0x40>)
 800b184:	4c0a      	ldr	r4, [pc, #40]	; (800b1b0 <__libc_init_array+0x44>)
 800b186:	1b64      	subs	r4, r4, r5
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	42a6      	cmp	r6, r4
 800b18c:	d105      	bne.n	800b19a <__libc_init_array+0x2e>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}
 800b190:	f855 3b04 	ldr.w	r3, [r5], #4
 800b194:	4798      	blx	r3
 800b196:	3601      	adds	r6, #1
 800b198:	e7ee      	b.n	800b178 <__libc_init_array+0xc>
 800b19a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b19e:	4798      	blx	r3
 800b1a0:	3601      	adds	r6, #1
 800b1a2:	e7f2      	b.n	800b18a <__libc_init_array+0x1e>
 800b1a4:	0800d0c0 	.word	0x0800d0c0
 800b1a8:	0800d0c0 	.word	0x0800d0c0
 800b1ac:	0800d0c0 	.word	0x0800d0c0
 800b1b0:	0800d0c4 	.word	0x0800d0c4

0800b1b4 <memset>:
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4402      	add	r2, r0
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d100      	bne.n	800b1be <memset+0xa>
 800b1bc:	4770      	bx	lr
 800b1be:	f803 1b01 	strb.w	r1, [r3], #1
 800b1c2:	e7f9      	b.n	800b1b8 <memset+0x4>

0800b1c4 <siprintf>:
 800b1c4:	b40e      	push	{r1, r2, r3}
 800b1c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1ca:	b500      	push	{lr}
 800b1cc:	b09c      	sub	sp, #112	; 0x70
 800b1ce:	ab1d      	add	r3, sp, #116	; 0x74
 800b1d0:	9002      	str	r0, [sp, #8]
 800b1d2:	9006      	str	r0, [sp, #24]
 800b1d4:	9107      	str	r1, [sp, #28]
 800b1d6:	9104      	str	r1, [sp, #16]
 800b1d8:	4808      	ldr	r0, [pc, #32]	; (800b1fc <siprintf+0x38>)
 800b1da:	4909      	ldr	r1, [pc, #36]	; (800b200 <siprintf+0x3c>)
 800b1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e0:	9105      	str	r1, [sp, #20]
 800b1e2:	6800      	ldr	r0, [r0, #0]
 800b1e4:	a902      	add	r1, sp, #8
 800b1e6:	9301      	str	r3, [sp, #4]
 800b1e8:	f000 f868 	bl	800b2bc <_svfiprintf_r>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	9b02      	ldr	r3, [sp, #8]
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	b01c      	add	sp, #112	; 0x70
 800b1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1f8:	b003      	add	sp, #12
 800b1fa:	4770      	bx	lr
 800b1fc:	200001c4 	.word	0x200001c4
 800b200:	ffff0208 	.word	0xffff0208

0800b204 <__ssputs_r>:
 800b204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b208:	688e      	ldr	r6, [r1, #8]
 800b20a:	4682      	mov	sl, r0
 800b20c:	429e      	cmp	r6, r3
 800b20e:	460c      	mov	r4, r1
 800b210:	4690      	mov	r8, r2
 800b212:	461f      	mov	r7, r3
 800b214:	d838      	bhi.n	800b288 <__ssputs_r+0x84>
 800b216:	898a      	ldrh	r2, [r1, #12]
 800b218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b21c:	d032      	beq.n	800b284 <__ssputs_r+0x80>
 800b21e:	6825      	ldr	r5, [r4, #0]
 800b220:	6909      	ldr	r1, [r1, #16]
 800b222:	3301      	adds	r3, #1
 800b224:	eba5 0901 	sub.w	r9, r5, r1
 800b228:	6965      	ldr	r5, [r4, #20]
 800b22a:	444b      	add	r3, r9
 800b22c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b234:	106d      	asrs	r5, r5, #1
 800b236:	429d      	cmp	r5, r3
 800b238:	bf38      	it	cc
 800b23a:	461d      	movcc	r5, r3
 800b23c:	0553      	lsls	r3, r2, #21
 800b23e:	d531      	bpl.n	800b2a4 <__ssputs_r+0xa0>
 800b240:	4629      	mov	r1, r5
 800b242:	f000 fb6f 	bl	800b924 <_malloc_r>
 800b246:	4606      	mov	r6, r0
 800b248:	b950      	cbnz	r0, 800b260 <__ssputs_r+0x5c>
 800b24a:	230c      	movs	r3, #12
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b250:	f8ca 3000 	str.w	r3, [sl]
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b260:	464a      	mov	r2, r9
 800b262:	6921      	ldr	r1, [r4, #16]
 800b264:	f000 face 	bl	800b804 <memcpy>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	6126      	str	r6, [r4, #16]
 800b276:	444e      	add	r6, r9
 800b278:	6026      	str	r6, [r4, #0]
 800b27a:	463e      	mov	r6, r7
 800b27c:	6165      	str	r5, [r4, #20]
 800b27e:	eba5 0509 	sub.w	r5, r5, r9
 800b282:	60a5      	str	r5, [r4, #8]
 800b284:	42be      	cmp	r6, r7
 800b286:	d900      	bls.n	800b28a <__ssputs_r+0x86>
 800b288:	463e      	mov	r6, r7
 800b28a:	4632      	mov	r2, r6
 800b28c:	4641      	mov	r1, r8
 800b28e:	6820      	ldr	r0, [r4, #0]
 800b290:	f000 fac6 	bl	800b820 <memmove>
 800b294:	68a3      	ldr	r3, [r4, #8]
 800b296:	2000      	movs	r0, #0
 800b298:	1b9b      	subs	r3, r3, r6
 800b29a:	60a3      	str	r3, [r4, #8]
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	4433      	add	r3, r6
 800b2a0:	6023      	str	r3, [r4, #0]
 800b2a2:	e7db      	b.n	800b25c <__ssputs_r+0x58>
 800b2a4:	462a      	mov	r2, r5
 800b2a6:	f000 fbb1 	bl	800ba0c <_realloc_r>
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d1e1      	bne.n	800b274 <__ssputs_r+0x70>
 800b2b0:	4650      	mov	r0, sl
 800b2b2:	6921      	ldr	r1, [r4, #16]
 800b2b4:	f000 face 	bl	800b854 <_free_r>
 800b2b8:	e7c7      	b.n	800b24a <__ssputs_r+0x46>
	...

0800b2bc <_svfiprintf_r>:
 800b2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c0:	4698      	mov	r8, r3
 800b2c2:	898b      	ldrh	r3, [r1, #12]
 800b2c4:	4607      	mov	r7, r0
 800b2c6:	061b      	lsls	r3, r3, #24
 800b2c8:	460d      	mov	r5, r1
 800b2ca:	4614      	mov	r4, r2
 800b2cc:	b09d      	sub	sp, #116	; 0x74
 800b2ce:	d50e      	bpl.n	800b2ee <_svfiprintf_r+0x32>
 800b2d0:	690b      	ldr	r3, [r1, #16]
 800b2d2:	b963      	cbnz	r3, 800b2ee <_svfiprintf_r+0x32>
 800b2d4:	2140      	movs	r1, #64	; 0x40
 800b2d6:	f000 fb25 	bl	800b924 <_malloc_r>
 800b2da:	6028      	str	r0, [r5, #0]
 800b2dc:	6128      	str	r0, [r5, #16]
 800b2de:	b920      	cbnz	r0, 800b2ea <_svfiprintf_r+0x2e>
 800b2e0:	230c      	movs	r3, #12
 800b2e2:	603b      	str	r3, [r7, #0]
 800b2e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2e8:	e0d1      	b.n	800b48e <_svfiprintf_r+0x1d2>
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	616b      	str	r3, [r5, #20]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2f2:	2320      	movs	r3, #32
 800b2f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2f8:	2330      	movs	r3, #48	; 0x30
 800b2fa:	f04f 0901 	mov.w	r9, #1
 800b2fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b302:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b4a8 <_svfiprintf_r+0x1ec>
 800b306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b30a:	4623      	mov	r3, r4
 800b30c:	469a      	mov	sl, r3
 800b30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b312:	b10a      	cbz	r2, 800b318 <_svfiprintf_r+0x5c>
 800b314:	2a25      	cmp	r2, #37	; 0x25
 800b316:	d1f9      	bne.n	800b30c <_svfiprintf_r+0x50>
 800b318:	ebba 0b04 	subs.w	fp, sl, r4
 800b31c:	d00b      	beq.n	800b336 <_svfiprintf_r+0x7a>
 800b31e:	465b      	mov	r3, fp
 800b320:	4622      	mov	r2, r4
 800b322:	4629      	mov	r1, r5
 800b324:	4638      	mov	r0, r7
 800b326:	f7ff ff6d 	bl	800b204 <__ssputs_r>
 800b32a:	3001      	adds	r0, #1
 800b32c:	f000 80aa 	beq.w	800b484 <_svfiprintf_r+0x1c8>
 800b330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b332:	445a      	add	r2, fp
 800b334:	9209      	str	r2, [sp, #36]	; 0x24
 800b336:	f89a 3000 	ldrb.w	r3, [sl]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	f000 80a2 	beq.w	800b484 <_svfiprintf_r+0x1c8>
 800b340:	2300      	movs	r3, #0
 800b342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b34a:	f10a 0a01 	add.w	sl, sl, #1
 800b34e:	9304      	str	r3, [sp, #16]
 800b350:	9307      	str	r3, [sp, #28]
 800b352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b356:	931a      	str	r3, [sp, #104]	; 0x68
 800b358:	4654      	mov	r4, sl
 800b35a:	2205      	movs	r2, #5
 800b35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b360:	4851      	ldr	r0, [pc, #324]	; (800b4a8 <_svfiprintf_r+0x1ec>)
 800b362:	f000 fa41 	bl	800b7e8 <memchr>
 800b366:	9a04      	ldr	r2, [sp, #16]
 800b368:	b9d8      	cbnz	r0, 800b3a2 <_svfiprintf_r+0xe6>
 800b36a:	06d0      	lsls	r0, r2, #27
 800b36c:	bf44      	itt	mi
 800b36e:	2320      	movmi	r3, #32
 800b370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b374:	0711      	lsls	r1, r2, #28
 800b376:	bf44      	itt	mi
 800b378:	232b      	movmi	r3, #43	; 0x2b
 800b37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b37e:	f89a 3000 	ldrb.w	r3, [sl]
 800b382:	2b2a      	cmp	r3, #42	; 0x2a
 800b384:	d015      	beq.n	800b3b2 <_svfiprintf_r+0xf6>
 800b386:	4654      	mov	r4, sl
 800b388:	2000      	movs	r0, #0
 800b38a:	f04f 0c0a 	mov.w	ip, #10
 800b38e:	9a07      	ldr	r2, [sp, #28]
 800b390:	4621      	mov	r1, r4
 800b392:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b396:	3b30      	subs	r3, #48	; 0x30
 800b398:	2b09      	cmp	r3, #9
 800b39a:	d94e      	bls.n	800b43a <_svfiprintf_r+0x17e>
 800b39c:	b1b0      	cbz	r0, 800b3cc <_svfiprintf_r+0x110>
 800b39e:	9207      	str	r2, [sp, #28]
 800b3a0:	e014      	b.n	800b3cc <_svfiprintf_r+0x110>
 800b3a2:	eba0 0308 	sub.w	r3, r0, r8
 800b3a6:	fa09 f303 	lsl.w	r3, r9, r3
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	46a2      	mov	sl, r4
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	e7d2      	b.n	800b358 <_svfiprintf_r+0x9c>
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	1d19      	adds	r1, r3, #4
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	9103      	str	r1, [sp, #12]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	bfbb      	ittet	lt
 800b3be:	425b      	neglt	r3, r3
 800b3c0:	f042 0202 	orrlt.w	r2, r2, #2
 800b3c4:	9307      	strge	r3, [sp, #28]
 800b3c6:	9307      	strlt	r3, [sp, #28]
 800b3c8:	bfb8      	it	lt
 800b3ca:	9204      	strlt	r2, [sp, #16]
 800b3cc:	7823      	ldrb	r3, [r4, #0]
 800b3ce:	2b2e      	cmp	r3, #46	; 0x2e
 800b3d0:	d10c      	bne.n	800b3ec <_svfiprintf_r+0x130>
 800b3d2:	7863      	ldrb	r3, [r4, #1]
 800b3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b3d6:	d135      	bne.n	800b444 <_svfiprintf_r+0x188>
 800b3d8:	9b03      	ldr	r3, [sp, #12]
 800b3da:	3402      	adds	r4, #2
 800b3dc:	1d1a      	adds	r2, r3, #4
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	9203      	str	r2, [sp, #12]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	bfb8      	it	lt
 800b3e6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3ea:	9305      	str	r3, [sp, #20]
 800b3ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b4ac <_svfiprintf_r+0x1f0>
 800b3f0:	2203      	movs	r2, #3
 800b3f2:	4650      	mov	r0, sl
 800b3f4:	7821      	ldrb	r1, [r4, #0]
 800b3f6:	f000 f9f7 	bl	800b7e8 <memchr>
 800b3fa:	b140      	cbz	r0, 800b40e <_svfiprintf_r+0x152>
 800b3fc:	2340      	movs	r3, #64	; 0x40
 800b3fe:	eba0 000a 	sub.w	r0, r0, sl
 800b402:	fa03 f000 	lsl.w	r0, r3, r0
 800b406:	9b04      	ldr	r3, [sp, #16]
 800b408:	3401      	adds	r4, #1
 800b40a:	4303      	orrs	r3, r0
 800b40c:	9304      	str	r3, [sp, #16]
 800b40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b412:	2206      	movs	r2, #6
 800b414:	4826      	ldr	r0, [pc, #152]	; (800b4b0 <_svfiprintf_r+0x1f4>)
 800b416:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b41a:	f000 f9e5 	bl	800b7e8 <memchr>
 800b41e:	2800      	cmp	r0, #0
 800b420:	d038      	beq.n	800b494 <_svfiprintf_r+0x1d8>
 800b422:	4b24      	ldr	r3, [pc, #144]	; (800b4b4 <_svfiprintf_r+0x1f8>)
 800b424:	bb1b      	cbnz	r3, 800b46e <_svfiprintf_r+0x1b2>
 800b426:	9b03      	ldr	r3, [sp, #12]
 800b428:	3307      	adds	r3, #7
 800b42a:	f023 0307 	bic.w	r3, r3, #7
 800b42e:	3308      	adds	r3, #8
 800b430:	9303      	str	r3, [sp, #12]
 800b432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b434:	4433      	add	r3, r6
 800b436:	9309      	str	r3, [sp, #36]	; 0x24
 800b438:	e767      	b.n	800b30a <_svfiprintf_r+0x4e>
 800b43a:	460c      	mov	r4, r1
 800b43c:	2001      	movs	r0, #1
 800b43e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b442:	e7a5      	b.n	800b390 <_svfiprintf_r+0xd4>
 800b444:	2300      	movs	r3, #0
 800b446:	f04f 0c0a 	mov.w	ip, #10
 800b44a:	4619      	mov	r1, r3
 800b44c:	3401      	adds	r4, #1
 800b44e:	9305      	str	r3, [sp, #20]
 800b450:	4620      	mov	r0, r4
 800b452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b456:	3a30      	subs	r2, #48	; 0x30
 800b458:	2a09      	cmp	r2, #9
 800b45a:	d903      	bls.n	800b464 <_svfiprintf_r+0x1a8>
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0c5      	beq.n	800b3ec <_svfiprintf_r+0x130>
 800b460:	9105      	str	r1, [sp, #20]
 800b462:	e7c3      	b.n	800b3ec <_svfiprintf_r+0x130>
 800b464:	4604      	mov	r4, r0
 800b466:	2301      	movs	r3, #1
 800b468:	fb0c 2101 	mla	r1, ip, r1, r2
 800b46c:	e7f0      	b.n	800b450 <_svfiprintf_r+0x194>
 800b46e:	ab03      	add	r3, sp, #12
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	462a      	mov	r2, r5
 800b474:	4638      	mov	r0, r7
 800b476:	4b10      	ldr	r3, [pc, #64]	; (800b4b8 <_svfiprintf_r+0x1fc>)
 800b478:	a904      	add	r1, sp, #16
 800b47a:	f3af 8000 	nop.w
 800b47e:	1c42      	adds	r2, r0, #1
 800b480:	4606      	mov	r6, r0
 800b482:	d1d6      	bne.n	800b432 <_svfiprintf_r+0x176>
 800b484:	89ab      	ldrh	r3, [r5, #12]
 800b486:	065b      	lsls	r3, r3, #25
 800b488:	f53f af2c 	bmi.w	800b2e4 <_svfiprintf_r+0x28>
 800b48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b48e:	b01d      	add	sp, #116	; 0x74
 800b490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b494:	ab03      	add	r3, sp, #12
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	462a      	mov	r2, r5
 800b49a:	4638      	mov	r0, r7
 800b49c:	4b06      	ldr	r3, [pc, #24]	; (800b4b8 <_svfiprintf_r+0x1fc>)
 800b49e:	a904      	add	r1, sp, #16
 800b4a0:	f000 f87c 	bl	800b59c <_printf_i>
 800b4a4:	e7eb      	b.n	800b47e <_svfiprintf_r+0x1c2>
 800b4a6:	bf00      	nop
 800b4a8:	0800cea4 	.word	0x0800cea4
 800b4ac:	0800ceaa 	.word	0x0800ceaa
 800b4b0:	0800ceae 	.word	0x0800ceae
 800b4b4:	00000000 	.word	0x00000000
 800b4b8:	0800b205 	.word	0x0800b205

0800b4bc <_printf_common>:
 800b4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	4699      	mov	r9, r3
 800b4c4:	688a      	ldr	r2, [r1, #8]
 800b4c6:	690b      	ldr	r3, [r1, #16]
 800b4c8:	4607      	mov	r7, r0
 800b4ca:	4293      	cmp	r3, r2
 800b4cc:	bfb8      	it	lt
 800b4ce:	4613      	movlt	r3, r2
 800b4d0:	6033      	str	r3, [r6, #0]
 800b4d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4dc:	b10a      	cbz	r2, 800b4e2 <_printf_common+0x26>
 800b4de:	3301      	adds	r3, #1
 800b4e0:	6033      	str	r3, [r6, #0]
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	0699      	lsls	r1, r3, #26
 800b4e6:	bf42      	ittt	mi
 800b4e8:	6833      	ldrmi	r3, [r6, #0]
 800b4ea:	3302      	addmi	r3, #2
 800b4ec:	6033      	strmi	r3, [r6, #0]
 800b4ee:	6825      	ldr	r5, [r4, #0]
 800b4f0:	f015 0506 	ands.w	r5, r5, #6
 800b4f4:	d106      	bne.n	800b504 <_printf_common+0x48>
 800b4f6:	f104 0a19 	add.w	sl, r4, #25
 800b4fa:	68e3      	ldr	r3, [r4, #12]
 800b4fc:	6832      	ldr	r2, [r6, #0]
 800b4fe:	1a9b      	subs	r3, r3, r2
 800b500:	42ab      	cmp	r3, r5
 800b502:	dc28      	bgt.n	800b556 <_printf_common+0x9a>
 800b504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b508:	1e13      	subs	r3, r2, #0
 800b50a:	6822      	ldr	r2, [r4, #0]
 800b50c:	bf18      	it	ne
 800b50e:	2301      	movne	r3, #1
 800b510:	0692      	lsls	r2, r2, #26
 800b512:	d42d      	bmi.n	800b570 <_printf_common+0xb4>
 800b514:	4649      	mov	r1, r9
 800b516:	4638      	mov	r0, r7
 800b518:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b51c:	47c0      	blx	r8
 800b51e:	3001      	adds	r0, #1
 800b520:	d020      	beq.n	800b564 <_printf_common+0xa8>
 800b522:	6823      	ldr	r3, [r4, #0]
 800b524:	68e5      	ldr	r5, [r4, #12]
 800b526:	f003 0306 	and.w	r3, r3, #6
 800b52a:	2b04      	cmp	r3, #4
 800b52c:	bf18      	it	ne
 800b52e:	2500      	movne	r5, #0
 800b530:	6832      	ldr	r2, [r6, #0]
 800b532:	f04f 0600 	mov.w	r6, #0
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	bf08      	it	eq
 800b53a:	1aad      	subeq	r5, r5, r2
 800b53c:	6922      	ldr	r2, [r4, #16]
 800b53e:	bf08      	it	eq
 800b540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b544:	4293      	cmp	r3, r2
 800b546:	bfc4      	itt	gt
 800b548:	1a9b      	subgt	r3, r3, r2
 800b54a:	18ed      	addgt	r5, r5, r3
 800b54c:	341a      	adds	r4, #26
 800b54e:	42b5      	cmp	r5, r6
 800b550:	d11a      	bne.n	800b588 <_printf_common+0xcc>
 800b552:	2000      	movs	r0, #0
 800b554:	e008      	b.n	800b568 <_printf_common+0xac>
 800b556:	2301      	movs	r3, #1
 800b558:	4652      	mov	r2, sl
 800b55a:	4649      	mov	r1, r9
 800b55c:	4638      	mov	r0, r7
 800b55e:	47c0      	blx	r8
 800b560:	3001      	adds	r0, #1
 800b562:	d103      	bne.n	800b56c <_printf_common+0xb0>
 800b564:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56c:	3501      	adds	r5, #1
 800b56e:	e7c4      	b.n	800b4fa <_printf_common+0x3e>
 800b570:	2030      	movs	r0, #48	; 0x30
 800b572:	18e1      	adds	r1, r4, r3
 800b574:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b57e:	4422      	add	r2, r4
 800b580:	3302      	adds	r3, #2
 800b582:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b586:	e7c5      	b.n	800b514 <_printf_common+0x58>
 800b588:	2301      	movs	r3, #1
 800b58a:	4622      	mov	r2, r4
 800b58c:	4649      	mov	r1, r9
 800b58e:	4638      	mov	r0, r7
 800b590:	47c0      	blx	r8
 800b592:	3001      	adds	r0, #1
 800b594:	d0e6      	beq.n	800b564 <_printf_common+0xa8>
 800b596:	3601      	adds	r6, #1
 800b598:	e7d9      	b.n	800b54e <_printf_common+0x92>
	...

0800b59c <_printf_i>:
 800b59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a0:	7e0f      	ldrb	r7, [r1, #24]
 800b5a2:	4691      	mov	r9, r2
 800b5a4:	2f78      	cmp	r7, #120	; 0x78
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	469a      	mov	sl, r3
 800b5ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b5ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b5b2:	d807      	bhi.n	800b5c4 <_printf_i+0x28>
 800b5b4:	2f62      	cmp	r7, #98	; 0x62
 800b5b6:	d80a      	bhi.n	800b5ce <_printf_i+0x32>
 800b5b8:	2f00      	cmp	r7, #0
 800b5ba:	f000 80d9 	beq.w	800b770 <_printf_i+0x1d4>
 800b5be:	2f58      	cmp	r7, #88	; 0x58
 800b5c0:	f000 80a4 	beq.w	800b70c <_printf_i+0x170>
 800b5c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b5cc:	e03a      	b.n	800b644 <_printf_i+0xa8>
 800b5ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b5d2:	2b15      	cmp	r3, #21
 800b5d4:	d8f6      	bhi.n	800b5c4 <_printf_i+0x28>
 800b5d6:	a101      	add	r1, pc, #4	; (adr r1, 800b5dc <_printf_i+0x40>)
 800b5d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5dc:	0800b635 	.word	0x0800b635
 800b5e0:	0800b649 	.word	0x0800b649
 800b5e4:	0800b5c5 	.word	0x0800b5c5
 800b5e8:	0800b5c5 	.word	0x0800b5c5
 800b5ec:	0800b5c5 	.word	0x0800b5c5
 800b5f0:	0800b5c5 	.word	0x0800b5c5
 800b5f4:	0800b649 	.word	0x0800b649
 800b5f8:	0800b5c5 	.word	0x0800b5c5
 800b5fc:	0800b5c5 	.word	0x0800b5c5
 800b600:	0800b5c5 	.word	0x0800b5c5
 800b604:	0800b5c5 	.word	0x0800b5c5
 800b608:	0800b757 	.word	0x0800b757
 800b60c:	0800b679 	.word	0x0800b679
 800b610:	0800b739 	.word	0x0800b739
 800b614:	0800b5c5 	.word	0x0800b5c5
 800b618:	0800b5c5 	.word	0x0800b5c5
 800b61c:	0800b779 	.word	0x0800b779
 800b620:	0800b5c5 	.word	0x0800b5c5
 800b624:	0800b679 	.word	0x0800b679
 800b628:	0800b5c5 	.word	0x0800b5c5
 800b62c:	0800b5c5 	.word	0x0800b5c5
 800b630:	0800b741 	.word	0x0800b741
 800b634:	682b      	ldr	r3, [r5, #0]
 800b636:	1d1a      	adds	r2, r3, #4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	602a      	str	r2, [r5, #0]
 800b63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b640:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b644:	2301      	movs	r3, #1
 800b646:	e0a4      	b.n	800b792 <_printf_i+0x1f6>
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	6829      	ldr	r1, [r5, #0]
 800b64c:	0606      	lsls	r6, r0, #24
 800b64e:	f101 0304 	add.w	r3, r1, #4
 800b652:	d50a      	bpl.n	800b66a <_printf_i+0xce>
 800b654:	680e      	ldr	r6, [r1, #0]
 800b656:	602b      	str	r3, [r5, #0]
 800b658:	2e00      	cmp	r6, #0
 800b65a:	da03      	bge.n	800b664 <_printf_i+0xc8>
 800b65c:	232d      	movs	r3, #45	; 0x2d
 800b65e:	4276      	negs	r6, r6
 800b660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b664:	230a      	movs	r3, #10
 800b666:	485e      	ldr	r0, [pc, #376]	; (800b7e0 <_printf_i+0x244>)
 800b668:	e019      	b.n	800b69e <_printf_i+0x102>
 800b66a:	680e      	ldr	r6, [r1, #0]
 800b66c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b670:	602b      	str	r3, [r5, #0]
 800b672:	bf18      	it	ne
 800b674:	b236      	sxthne	r6, r6
 800b676:	e7ef      	b.n	800b658 <_printf_i+0xbc>
 800b678:	682b      	ldr	r3, [r5, #0]
 800b67a:	6820      	ldr	r0, [r4, #0]
 800b67c:	1d19      	adds	r1, r3, #4
 800b67e:	6029      	str	r1, [r5, #0]
 800b680:	0601      	lsls	r1, r0, #24
 800b682:	d501      	bpl.n	800b688 <_printf_i+0xec>
 800b684:	681e      	ldr	r6, [r3, #0]
 800b686:	e002      	b.n	800b68e <_printf_i+0xf2>
 800b688:	0646      	lsls	r6, r0, #25
 800b68a:	d5fb      	bpl.n	800b684 <_printf_i+0xe8>
 800b68c:	881e      	ldrh	r6, [r3, #0]
 800b68e:	2f6f      	cmp	r7, #111	; 0x6f
 800b690:	bf0c      	ite	eq
 800b692:	2308      	moveq	r3, #8
 800b694:	230a      	movne	r3, #10
 800b696:	4852      	ldr	r0, [pc, #328]	; (800b7e0 <_printf_i+0x244>)
 800b698:	2100      	movs	r1, #0
 800b69a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b69e:	6865      	ldr	r5, [r4, #4]
 800b6a0:	2d00      	cmp	r5, #0
 800b6a2:	bfa8      	it	ge
 800b6a4:	6821      	ldrge	r1, [r4, #0]
 800b6a6:	60a5      	str	r5, [r4, #8]
 800b6a8:	bfa4      	itt	ge
 800b6aa:	f021 0104 	bicge.w	r1, r1, #4
 800b6ae:	6021      	strge	r1, [r4, #0]
 800b6b0:	b90e      	cbnz	r6, 800b6b6 <_printf_i+0x11a>
 800b6b2:	2d00      	cmp	r5, #0
 800b6b4:	d04d      	beq.n	800b752 <_printf_i+0x1b6>
 800b6b6:	4615      	mov	r5, r2
 800b6b8:	fbb6 f1f3 	udiv	r1, r6, r3
 800b6bc:	fb03 6711 	mls	r7, r3, r1, r6
 800b6c0:	5dc7      	ldrb	r7, [r0, r7]
 800b6c2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b6c6:	4637      	mov	r7, r6
 800b6c8:	42bb      	cmp	r3, r7
 800b6ca:	460e      	mov	r6, r1
 800b6cc:	d9f4      	bls.n	800b6b8 <_printf_i+0x11c>
 800b6ce:	2b08      	cmp	r3, #8
 800b6d0:	d10b      	bne.n	800b6ea <_printf_i+0x14e>
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	07de      	lsls	r6, r3, #31
 800b6d6:	d508      	bpl.n	800b6ea <_printf_i+0x14e>
 800b6d8:	6923      	ldr	r3, [r4, #16]
 800b6da:	6861      	ldr	r1, [r4, #4]
 800b6dc:	4299      	cmp	r1, r3
 800b6de:	bfde      	ittt	le
 800b6e0:	2330      	movle	r3, #48	; 0x30
 800b6e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6e6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b6ea:	1b52      	subs	r2, r2, r5
 800b6ec:	6122      	str	r2, [r4, #16]
 800b6ee:	464b      	mov	r3, r9
 800b6f0:	4621      	mov	r1, r4
 800b6f2:	4640      	mov	r0, r8
 800b6f4:	f8cd a000 	str.w	sl, [sp]
 800b6f8:	aa03      	add	r2, sp, #12
 800b6fa:	f7ff fedf 	bl	800b4bc <_printf_common>
 800b6fe:	3001      	adds	r0, #1
 800b700:	d14c      	bne.n	800b79c <_printf_i+0x200>
 800b702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b706:	b004      	add	sp, #16
 800b708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b70c:	4834      	ldr	r0, [pc, #208]	; (800b7e0 <_printf_i+0x244>)
 800b70e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b712:	6829      	ldr	r1, [r5, #0]
 800b714:	6823      	ldr	r3, [r4, #0]
 800b716:	f851 6b04 	ldr.w	r6, [r1], #4
 800b71a:	6029      	str	r1, [r5, #0]
 800b71c:	061d      	lsls	r5, r3, #24
 800b71e:	d514      	bpl.n	800b74a <_printf_i+0x1ae>
 800b720:	07df      	lsls	r7, r3, #31
 800b722:	bf44      	itt	mi
 800b724:	f043 0320 	orrmi.w	r3, r3, #32
 800b728:	6023      	strmi	r3, [r4, #0]
 800b72a:	b91e      	cbnz	r6, 800b734 <_printf_i+0x198>
 800b72c:	6823      	ldr	r3, [r4, #0]
 800b72e:	f023 0320 	bic.w	r3, r3, #32
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	2310      	movs	r3, #16
 800b736:	e7af      	b.n	800b698 <_printf_i+0xfc>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	f043 0320 	orr.w	r3, r3, #32
 800b73e:	6023      	str	r3, [r4, #0]
 800b740:	2378      	movs	r3, #120	; 0x78
 800b742:	4828      	ldr	r0, [pc, #160]	; (800b7e4 <_printf_i+0x248>)
 800b744:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b748:	e7e3      	b.n	800b712 <_printf_i+0x176>
 800b74a:	0659      	lsls	r1, r3, #25
 800b74c:	bf48      	it	mi
 800b74e:	b2b6      	uxthmi	r6, r6
 800b750:	e7e6      	b.n	800b720 <_printf_i+0x184>
 800b752:	4615      	mov	r5, r2
 800b754:	e7bb      	b.n	800b6ce <_printf_i+0x132>
 800b756:	682b      	ldr	r3, [r5, #0]
 800b758:	6826      	ldr	r6, [r4, #0]
 800b75a:	1d18      	adds	r0, r3, #4
 800b75c:	6961      	ldr	r1, [r4, #20]
 800b75e:	6028      	str	r0, [r5, #0]
 800b760:	0635      	lsls	r5, r6, #24
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	d501      	bpl.n	800b76a <_printf_i+0x1ce>
 800b766:	6019      	str	r1, [r3, #0]
 800b768:	e002      	b.n	800b770 <_printf_i+0x1d4>
 800b76a:	0670      	lsls	r0, r6, #25
 800b76c:	d5fb      	bpl.n	800b766 <_printf_i+0x1ca>
 800b76e:	8019      	strh	r1, [r3, #0]
 800b770:	2300      	movs	r3, #0
 800b772:	4615      	mov	r5, r2
 800b774:	6123      	str	r3, [r4, #16]
 800b776:	e7ba      	b.n	800b6ee <_printf_i+0x152>
 800b778:	682b      	ldr	r3, [r5, #0]
 800b77a:	2100      	movs	r1, #0
 800b77c:	1d1a      	adds	r2, r3, #4
 800b77e:	602a      	str	r2, [r5, #0]
 800b780:	681d      	ldr	r5, [r3, #0]
 800b782:	6862      	ldr	r2, [r4, #4]
 800b784:	4628      	mov	r0, r5
 800b786:	f000 f82f 	bl	800b7e8 <memchr>
 800b78a:	b108      	cbz	r0, 800b790 <_printf_i+0x1f4>
 800b78c:	1b40      	subs	r0, r0, r5
 800b78e:	6060      	str	r0, [r4, #4]
 800b790:	6863      	ldr	r3, [r4, #4]
 800b792:	6123      	str	r3, [r4, #16]
 800b794:	2300      	movs	r3, #0
 800b796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b79a:	e7a8      	b.n	800b6ee <_printf_i+0x152>
 800b79c:	462a      	mov	r2, r5
 800b79e:	4649      	mov	r1, r9
 800b7a0:	4640      	mov	r0, r8
 800b7a2:	6923      	ldr	r3, [r4, #16]
 800b7a4:	47d0      	blx	sl
 800b7a6:	3001      	adds	r0, #1
 800b7a8:	d0ab      	beq.n	800b702 <_printf_i+0x166>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	079b      	lsls	r3, r3, #30
 800b7ae:	d413      	bmi.n	800b7d8 <_printf_i+0x23c>
 800b7b0:	68e0      	ldr	r0, [r4, #12]
 800b7b2:	9b03      	ldr	r3, [sp, #12]
 800b7b4:	4298      	cmp	r0, r3
 800b7b6:	bfb8      	it	lt
 800b7b8:	4618      	movlt	r0, r3
 800b7ba:	e7a4      	b.n	800b706 <_printf_i+0x16a>
 800b7bc:	2301      	movs	r3, #1
 800b7be:	4632      	mov	r2, r6
 800b7c0:	4649      	mov	r1, r9
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	47d0      	blx	sl
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d09b      	beq.n	800b702 <_printf_i+0x166>
 800b7ca:	3501      	adds	r5, #1
 800b7cc:	68e3      	ldr	r3, [r4, #12]
 800b7ce:	9903      	ldr	r1, [sp, #12]
 800b7d0:	1a5b      	subs	r3, r3, r1
 800b7d2:	42ab      	cmp	r3, r5
 800b7d4:	dcf2      	bgt.n	800b7bc <_printf_i+0x220>
 800b7d6:	e7eb      	b.n	800b7b0 <_printf_i+0x214>
 800b7d8:	2500      	movs	r5, #0
 800b7da:	f104 0619 	add.w	r6, r4, #25
 800b7de:	e7f5      	b.n	800b7cc <_printf_i+0x230>
 800b7e0:	0800ceb5 	.word	0x0800ceb5
 800b7e4:	0800cec6 	.word	0x0800cec6

0800b7e8 <memchr>:
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	b2c9      	uxtb	r1, r1
 800b7ee:	4402      	add	r2, r0
 800b7f0:	4293      	cmp	r3, r2
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	d101      	bne.n	800b7fa <memchr+0x12>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e003      	b.n	800b802 <memchr+0x1a>
 800b7fa:	7804      	ldrb	r4, [r0, #0]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	428c      	cmp	r4, r1
 800b800:	d1f6      	bne.n	800b7f0 <memchr+0x8>
 800b802:	bd10      	pop	{r4, pc}

0800b804 <memcpy>:
 800b804:	440a      	add	r2, r1
 800b806:	4291      	cmp	r1, r2
 800b808:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b80c:	d100      	bne.n	800b810 <memcpy+0xc>
 800b80e:	4770      	bx	lr
 800b810:	b510      	push	{r4, lr}
 800b812:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b816:	4291      	cmp	r1, r2
 800b818:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b81c:	d1f9      	bne.n	800b812 <memcpy+0xe>
 800b81e:	bd10      	pop	{r4, pc}

0800b820 <memmove>:
 800b820:	4288      	cmp	r0, r1
 800b822:	b510      	push	{r4, lr}
 800b824:	eb01 0402 	add.w	r4, r1, r2
 800b828:	d902      	bls.n	800b830 <memmove+0x10>
 800b82a:	4284      	cmp	r4, r0
 800b82c:	4623      	mov	r3, r4
 800b82e:	d807      	bhi.n	800b840 <memmove+0x20>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	42a1      	cmp	r1, r4
 800b834:	d008      	beq.n	800b848 <memmove+0x28>
 800b836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b83e:	e7f8      	b.n	800b832 <memmove+0x12>
 800b840:	4601      	mov	r1, r0
 800b842:	4402      	add	r2, r0
 800b844:	428a      	cmp	r2, r1
 800b846:	d100      	bne.n	800b84a <memmove+0x2a>
 800b848:	bd10      	pop	{r4, pc}
 800b84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b852:	e7f7      	b.n	800b844 <memmove+0x24>

0800b854 <_free_r>:
 800b854:	b538      	push	{r3, r4, r5, lr}
 800b856:	4605      	mov	r5, r0
 800b858:	2900      	cmp	r1, #0
 800b85a:	d040      	beq.n	800b8de <_free_r+0x8a>
 800b85c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b860:	1f0c      	subs	r4, r1, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	bfb8      	it	lt
 800b866:	18e4      	addlt	r4, r4, r3
 800b868:	f000 f910 	bl	800ba8c <__malloc_lock>
 800b86c:	4a1c      	ldr	r2, [pc, #112]	; (800b8e0 <_free_r+0x8c>)
 800b86e:	6813      	ldr	r3, [r2, #0]
 800b870:	b933      	cbnz	r3, 800b880 <_free_r+0x2c>
 800b872:	6063      	str	r3, [r4, #4]
 800b874:	6014      	str	r4, [r2, #0]
 800b876:	4628      	mov	r0, r5
 800b878:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b87c:	f000 b90c 	b.w	800ba98 <__malloc_unlock>
 800b880:	42a3      	cmp	r3, r4
 800b882:	d908      	bls.n	800b896 <_free_r+0x42>
 800b884:	6820      	ldr	r0, [r4, #0]
 800b886:	1821      	adds	r1, r4, r0
 800b888:	428b      	cmp	r3, r1
 800b88a:	bf01      	itttt	eq
 800b88c:	6819      	ldreq	r1, [r3, #0]
 800b88e:	685b      	ldreq	r3, [r3, #4]
 800b890:	1809      	addeq	r1, r1, r0
 800b892:	6021      	streq	r1, [r4, #0]
 800b894:	e7ed      	b.n	800b872 <_free_r+0x1e>
 800b896:	461a      	mov	r2, r3
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	b10b      	cbz	r3, 800b8a0 <_free_r+0x4c>
 800b89c:	42a3      	cmp	r3, r4
 800b89e:	d9fa      	bls.n	800b896 <_free_r+0x42>
 800b8a0:	6811      	ldr	r1, [r2, #0]
 800b8a2:	1850      	adds	r0, r2, r1
 800b8a4:	42a0      	cmp	r0, r4
 800b8a6:	d10b      	bne.n	800b8c0 <_free_r+0x6c>
 800b8a8:	6820      	ldr	r0, [r4, #0]
 800b8aa:	4401      	add	r1, r0
 800b8ac:	1850      	adds	r0, r2, r1
 800b8ae:	4283      	cmp	r3, r0
 800b8b0:	6011      	str	r1, [r2, #0]
 800b8b2:	d1e0      	bne.n	800b876 <_free_r+0x22>
 800b8b4:	6818      	ldr	r0, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	4401      	add	r1, r0
 800b8ba:	6011      	str	r1, [r2, #0]
 800b8bc:	6053      	str	r3, [r2, #4]
 800b8be:	e7da      	b.n	800b876 <_free_r+0x22>
 800b8c0:	d902      	bls.n	800b8c8 <_free_r+0x74>
 800b8c2:	230c      	movs	r3, #12
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	e7d6      	b.n	800b876 <_free_r+0x22>
 800b8c8:	6820      	ldr	r0, [r4, #0]
 800b8ca:	1821      	adds	r1, r4, r0
 800b8cc:	428b      	cmp	r3, r1
 800b8ce:	bf01      	itttt	eq
 800b8d0:	6819      	ldreq	r1, [r3, #0]
 800b8d2:	685b      	ldreq	r3, [r3, #4]
 800b8d4:	1809      	addeq	r1, r1, r0
 800b8d6:	6021      	streq	r1, [r4, #0]
 800b8d8:	6063      	str	r3, [r4, #4]
 800b8da:	6054      	str	r4, [r2, #4]
 800b8dc:	e7cb      	b.n	800b876 <_free_r+0x22>
 800b8de:	bd38      	pop	{r3, r4, r5, pc}
 800b8e0:	20001544 	.word	0x20001544

0800b8e4 <sbrk_aligned>:
 800b8e4:	b570      	push	{r4, r5, r6, lr}
 800b8e6:	4e0e      	ldr	r6, [pc, #56]	; (800b920 <sbrk_aligned+0x3c>)
 800b8e8:	460c      	mov	r4, r1
 800b8ea:	6831      	ldr	r1, [r6, #0]
 800b8ec:	4605      	mov	r5, r0
 800b8ee:	b911      	cbnz	r1, 800b8f6 <sbrk_aligned+0x12>
 800b8f0:	f000 f8bc 	bl	800ba6c <_sbrk_r>
 800b8f4:	6030      	str	r0, [r6, #0]
 800b8f6:	4621      	mov	r1, r4
 800b8f8:	4628      	mov	r0, r5
 800b8fa:	f000 f8b7 	bl	800ba6c <_sbrk_r>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	d00a      	beq.n	800b918 <sbrk_aligned+0x34>
 800b902:	1cc4      	adds	r4, r0, #3
 800b904:	f024 0403 	bic.w	r4, r4, #3
 800b908:	42a0      	cmp	r0, r4
 800b90a:	d007      	beq.n	800b91c <sbrk_aligned+0x38>
 800b90c:	1a21      	subs	r1, r4, r0
 800b90e:	4628      	mov	r0, r5
 800b910:	f000 f8ac 	bl	800ba6c <_sbrk_r>
 800b914:	3001      	adds	r0, #1
 800b916:	d101      	bne.n	800b91c <sbrk_aligned+0x38>
 800b918:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b91c:	4620      	mov	r0, r4
 800b91e:	bd70      	pop	{r4, r5, r6, pc}
 800b920:	20001548 	.word	0x20001548

0800b924 <_malloc_r>:
 800b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	1ccd      	adds	r5, r1, #3
 800b92a:	f025 0503 	bic.w	r5, r5, #3
 800b92e:	3508      	adds	r5, #8
 800b930:	2d0c      	cmp	r5, #12
 800b932:	bf38      	it	cc
 800b934:	250c      	movcc	r5, #12
 800b936:	2d00      	cmp	r5, #0
 800b938:	4607      	mov	r7, r0
 800b93a:	db01      	blt.n	800b940 <_malloc_r+0x1c>
 800b93c:	42a9      	cmp	r1, r5
 800b93e:	d905      	bls.n	800b94c <_malloc_r+0x28>
 800b940:	230c      	movs	r3, #12
 800b942:	2600      	movs	r6, #0
 800b944:	603b      	str	r3, [r7, #0]
 800b946:	4630      	mov	r0, r6
 800b948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b94c:	4e2e      	ldr	r6, [pc, #184]	; (800ba08 <_malloc_r+0xe4>)
 800b94e:	f000 f89d 	bl	800ba8c <__malloc_lock>
 800b952:	6833      	ldr	r3, [r6, #0]
 800b954:	461c      	mov	r4, r3
 800b956:	bb34      	cbnz	r4, 800b9a6 <_malloc_r+0x82>
 800b958:	4629      	mov	r1, r5
 800b95a:	4638      	mov	r0, r7
 800b95c:	f7ff ffc2 	bl	800b8e4 <sbrk_aligned>
 800b960:	1c43      	adds	r3, r0, #1
 800b962:	4604      	mov	r4, r0
 800b964:	d14d      	bne.n	800ba02 <_malloc_r+0xde>
 800b966:	6834      	ldr	r4, [r6, #0]
 800b968:	4626      	mov	r6, r4
 800b96a:	2e00      	cmp	r6, #0
 800b96c:	d140      	bne.n	800b9f0 <_malloc_r+0xcc>
 800b96e:	6823      	ldr	r3, [r4, #0]
 800b970:	4631      	mov	r1, r6
 800b972:	4638      	mov	r0, r7
 800b974:	eb04 0803 	add.w	r8, r4, r3
 800b978:	f000 f878 	bl	800ba6c <_sbrk_r>
 800b97c:	4580      	cmp	r8, r0
 800b97e:	d13a      	bne.n	800b9f6 <_malloc_r+0xd2>
 800b980:	6821      	ldr	r1, [r4, #0]
 800b982:	3503      	adds	r5, #3
 800b984:	1a6d      	subs	r5, r5, r1
 800b986:	f025 0503 	bic.w	r5, r5, #3
 800b98a:	3508      	adds	r5, #8
 800b98c:	2d0c      	cmp	r5, #12
 800b98e:	bf38      	it	cc
 800b990:	250c      	movcc	r5, #12
 800b992:	4638      	mov	r0, r7
 800b994:	4629      	mov	r1, r5
 800b996:	f7ff ffa5 	bl	800b8e4 <sbrk_aligned>
 800b99a:	3001      	adds	r0, #1
 800b99c:	d02b      	beq.n	800b9f6 <_malloc_r+0xd2>
 800b99e:	6823      	ldr	r3, [r4, #0]
 800b9a0:	442b      	add	r3, r5
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	e00e      	b.n	800b9c4 <_malloc_r+0xa0>
 800b9a6:	6822      	ldr	r2, [r4, #0]
 800b9a8:	1b52      	subs	r2, r2, r5
 800b9aa:	d41e      	bmi.n	800b9ea <_malloc_r+0xc6>
 800b9ac:	2a0b      	cmp	r2, #11
 800b9ae:	d916      	bls.n	800b9de <_malloc_r+0xba>
 800b9b0:	1961      	adds	r1, r4, r5
 800b9b2:	42a3      	cmp	r3, r4
 800b9b4:	6025      	str	r5, [r4, #0]
 800b9b6:	bf18      	it	ne
 800b9b8:	6059      	strne	r1, [r3, #4]
 800b9ba:	6863      	ldr	r3, [r4, #4]
 800b9bc:	bf08      	it	eq
 800b9be:	6031      	streq	r1, [r6, #0]
 800b9c0:	5162      	str	r2, [r4, r5]
 800b9c2:	604b      	str	r3, [r1, #4]
 800b9c4:	4638      	mov	r0, r7
 800b9c6:	f104 060b 	add.w	r6, r4, #11
 800b9ca:	f000 f865 	bl	800ba98 <__malloc_unlock>
 800b9ce:	f026 0607 	bic.w	r6, r6, #7
 800b9d2:	1d23      	adds	r3, r4, #4
 800b9d4:	1af2      	subs	r2, r6, r3
 800b9d6:	d0b6      	beq.n	800b946 <_malloc_r+0x22>
 800b9d8:	1b9b      	subs	r3, r3, r6
 800b9da:	50a3      	str	r3, [r4, r2]
 800b9dc:	e7b3      	b.n	800b946 <_malloc_r+0x22>
 800b9de:	6862      	ldr	r2, [r4, #4]
 800b9e0:	42a3      	cmp	r3, r4
 800b9e2:	bf0c      	ite	eq
 800b9e4:	6032      	streq	r2, [r6, #0]
 800b9e6:	605a      	strne	r2, [r3, #4]
 800b9e8:	e7ec      	b.n	800b9c4 <_malloc_r+0xa0>
 800b9ea:	4623      	mov	r3, r4
 800b9ec:	6864      	ldr	r4, [r4, #4]
 800b9ee:	e7b2      	b.n	800b956 <_malloc_r+0x32>
 800b9f0:	4634      	mov	r4, r6
 800b9f2:	6876      	ldr	r6, [r6, #4]
 800b9f4:	e7b9      	b.n	800b96a <_malloc_r+0x46>
 800b9f6:	230c      	movs	r3, #12
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	603b      	str	r3, [r7, #0]
 800b9fc:	f000 f84c 	bl	800ba98 <__malloc_unlock>
 800ba00:	e7a1      	b.n	800b946 <_malloc_r+0x22>
 800ba02:	6025      	str	r5, [r4, #0]
 800ba04:	e7de      	b.n	800b9c4 <_malloc_r+0xa0>
 800ba06:	bf00      	nop
 800ba08:	20001544 	.word	0x20001544

0800ba0c <_realloc_r>:
 800ba0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba10:	4680      	mov	r8, r0
 800ba12:	4614      	mov	r4, r2
 800ba14:	460e      	mov	r6, r1
 800ba16:	b921      	cbnz	r1, 800ba22 <_realloc_r+0x16>
 800ba18:	4611      	mov	r1, r2
 800ba1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba1e:	f7ff bf81 	b.w	800b924 <_malloc_r>
 800ba22:	b92a      	cbnz	r2, 800ba30 <_realloc_r+0x24>
 800ba24:	f7ff ff16 	bl	800b854 <_free_r>
 800ba28:	4625      	mov	r5, r4
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba30:	f000 f838 	bl	800baa4 <_malloc_usable_size_r>
 800ba34:	4284      	cmp	r4, r0
 800ba36:	4607      	mov	r7, r0
 800ba38:	d802      	bhi.n	800ba40 <_realloc_r+0x34>
 800ba3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba3e:	d812      	bhi.n	800ba66 <_realloc_r+0x5a>
 800ba40:	4621      	mov	r1, r4
 800ba42:	4640      	mov	r0, r8
 800ba44:	f7ff ff6e 	bl	800b924 <_malloc_r>
 800ba48:	4605      	mov	r5, r0
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	d0ed      	beq.n	800ba2a <_realloc_r+0x1e>
 800ba4e:	42bc      	cmp	r4, r7
 800ba50:	4622      	mov	r2, r4
 800ba52:	4631      	mov	r1, r6
 800ba54:	bf28      	it	cs
 800ba56:	463a      	movcs	r2, r7
 800ba58:	f7ff fed4 	bl	800b804 <memcpy>
 800ba5c:	4631      	mov	r1, r6
 800ba5e:	4640      	mov	r0, r8
 800ba60:	f7ff fef8 	bl	800b854 <_free_r>
 800ba64:	e7e1      	b.n	800ba2a <_realloc_r+0x1e>
 800ba66:	4635      	mov	r5, r6
 800ba68:	e7df      	b.n	800ba2a <_realloc_r+0x1e>
	...

0800ba6c <_sbrk_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	2300      	movs	r3, #0
 800ba70:	4d05      	ldr	r5, [pc, #20]	; (800ba88 <_sbrk_r+0x1c>)
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	f7f6 fcc8 	bl	800240c <_sbrk>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_sbrk_r+0x1a>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_sbrk_r+0x1a>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	2000154c 	.word	0x2000154c

0800ba8c <__malloc_lock>:
 800ba8c:	4801      	ldr	r0, [pc, #4]	; (800ba94 <__malloc_lock+0x8>)
 800ba8e:	f000 b811 	b.w	800bab4 <__retarget_lock_acquire_recursive>
 800ba92:	bf00      	nop
 800ba94:	20001550 	.word	0x20001550

0800ba98 <__malloc_unlock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	; (800baa0 <__malloc_unlock+0x8>)
 800ba9a:	f000 b80c 	b.w	800bab6 <__retarget_lock_release_recursive>
 800ba9e:	bf00      	nop
 800baa0:	20001550 	.word	0x20001550

0800baa4 <_malloc_usable_size_r>:
 800baa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa8:	1f18      	subs	r0, r3, #4
 800baaa:	2b00      	cmp	r3, #0
 800baac:	bfbc      	itt	lt
 800baae:	580b      	ldrlt	r3, [r1, r0]
 800bab0:	18c0      	addlt	r0, r0, r3
 800bab2:	4770      	bx	lr

0800bab4 <__retarget_lock_acquire_recursive>:
 800bab4:	4770      	bx	lr

0800bab6 <__retarget_lock_release_recursive>:
 800bab6:	4770      	bx	lr

0800bab8 <cos>:
 800bab8:	b530      	push	{r4, r5, lr}
 800baba:	4a20      	ldr	r2, [pc, #128]	; (800bb3c <cos+0x84>)
 800babc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bac0:	4293      	cmp	r3, r2
 800bac2:	b087      	sub	sp, #28
 800bac4:	dc06      	bgt.n	800bad4 <cos+0x1c>
 800bac6:	2200      	movs	r2, #0
 800bac8:	2300      	movs	r3, #0
 800baca:	b007      	add	sp, #28
 800bacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bad0:	f000 bc56 	b.w	800c380 <__kernel_cos>
 800bad4:	4a1a      	ldr	r2, [pc, #104]	; (800bb40 <cos+0x88>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	dd05      	ble.n	800bae6 <cos+0x2e>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	f7f4 fb43 	bl	8000168 <__aeabi_dsub>
 800bae2:	b007      	add	sp, #28
 800bae4:	bd30      	pop	{r4, r5, pc}
 800bae6:	aa02      	add	r2, sp, #8
 800bae8:	f000 fa52 	bl	800bf90 <__ieee754_rem_pio2>
 800baec:	f000 0003 	and.w	r0, r0, #3
 800baf0:	2801      	cmp	r0, #1
 800baf2:	d009      	beq.n	800bb08 <cos+0x50>
 800baf4:	2802      	cmp	r0, #2
 800baf6:	d011      	beq.n	800bb1c <cos+0x64>
 800baf8:	b9b8      	cbnz	r0, 800bb2a <cos+0x72>
 800bafa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb02:	f000 fc3d 	bl	800c380 <__kernel_cos>
 800bb06:	e7ec      	b.n	800bae2 <cos+0x2a>
 800bb08:	9000      	str	r0, [sp, #0]
 800bb0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb12:	f001 f835 	bl	800cb80 <__kernel_sin>
 800bb16:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bb1a:	e7e2      	b.n	800bae2 <cos+0x2a>
 800bb1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb24:	f000 fc2c 	bl	800c380 <__kernel_cos>
 800bb28:	e7f5      	b.n	800bb16 <cos+0x5e>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb30:	9300      	str	r3, [sp, #0]
 800bb32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb36:	f001 f823 	bl	800cb80 <__kernel_sin>
 800bb3a:	e7d2      	b.n	800bae2 <cos+0x2a>
 800bb3c:	3fe921fb 	.word	0x3fe921fb
 800bb40:	7fefffff 	.word	0x7fefffff
 800bb44:	00000000 	.word	0x00000000

0800bb48 <floor>:
 800bb48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb4c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800bb50:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800bb54:	2e13      	cmp	r6, #19
 800bb56:	4602      	mov	r2, r0
 800bb58:	460b      	mov	r3, r1
 800bb5a:	4607      	mov	r7, r0
 800bb5c:	460c      	mov	r4, r1
 800bb5e:	4605      	mov	r5, r0
 800bb60:	dc33      	bgt.n	800bbca <floor+0x82>
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	da14      	bge.n	800bb90 <floor+0x48>
 800bb66:	a334      	add	r3, pc, #208	; (adr r3, 800bc38 <floor+0xf0>)
 800bb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6c:	f7f4 fafe 	bl	800016c <__adddf3>
 800bb70:	2200      	movs	r2, #0
 800bb72:	2300      	movs	r3, #0
 800bb74:	f7f4 ff40 	bl	80009f8 <__aeabi_dcmpgt>
 800bb78:	b138      	cbz	r0, 800bb8a <floor+0x42>
 800bb7a:	2c00      	cmp	r4, #0
 800bb7c:	da58      	bge.n	800bc30 <floor+0xe8>
 800bb7e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800bb82:	431d      	orrs	r5, r3
 800bb84:	d001      	beq.n	800bb8a <floor+0x42>
 800bb86:	2500      	movs	r5, #0
 800bb88:	4c2d      	ldr	r4, [pc, #180]	; (800bc40 <floor+0xf8>)
 800bb8a:	4623      	mov	r3, r4
 800bb8c:	462f      	mov	r7, r5
 800bb8e:	e025      	b.n	800bbdc <floor+0x94>
 800bb90:	4a2c      	ldr	r2, [pc, #176]	; (800bc44 <floor+0xfc>)
 800bb92:	fa42 f806 	asr.w	r8, r2, r6
 800bb96:	ea01 0208 	and.w	r2, r1, r8
 800bb9a:	4302      	orrs	r2, r0
 800bb9c:	d01e      	beq.n	800bbdc <floor+0x94>
 800bb9e:	a326      	add	r3, pc, #152	; (adr r3, 800bc38 <floor+0xf0>)
 800bba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba4:	f7f4 fae2 	bl	800016c <__adddf3>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f7f4 ff24 	bl	80009f8 <__aeabi_dcmpgt>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d0ea      	beq.n	800bb8a <floor+0x42>
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	bfbe      	ittt	lt
 800bbb8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bbbc:	fa43 f606 	asrlt.w	r6, r3, r6
 800bbc0:	19a4      	addlt	r4, r4, r6
 800bbc2:	2500      	movs	r5, #0
 800bbc4:	ea24 0408 	bic.w	r4, r4, r8
 800bbc8:	e7df      	b.n	800bb8a <floor+0x42>
 800bbca:	2e33      	cmp	r6, #51	; 0x33
 800bbcc:	dd0a      	ble.n	800bbe4 <floor+0x9c>
 800bbce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bbd2:	d103      	bne.n	800bbdc <floor+0x94>
 800bbd4:	f7f4 faca 	bl	800016c <__adddf3>
 800bbd8:	4607      	mov	r7, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4638      	mov	r0, r7
 800bbde:	4619      	mov	r1, r3
 800bbe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bbe8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800bbec:	fa22 f808 	lsr.w	r8, r2, r8
 800bbf0:	ea18 0f00 	tst.w	r8, r0
 800bbf4:	d0f2      	beq.n	800bbdc <floor+0x94>
 800bbf6:	a310      	add	r3, pc, #64	; (adr r3, 800bc38 <floor+0xf0>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fab6 	bl	800016c <__adddf3>
 800bc00:	2200      	movs	r2, #0
 800bc02:	2300      	movs	r3, #0
 800bc04:	f7f4 fef8 	bl	80009f8 <__aeabi_dcmpgt>
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d0be      	beq.n	800bb8a <floor+0x42>
 800bc0c:	2c00      	cmp	r4, #0
 800bc0e:	da02      	bge.n	800bc16 <floor+0xce>
 800bc10:	2e14      	cmp	r6, #20
 800bc12:	d103      	bne.n	800bc1c <floor+0xd4>
 800bc14:	3401      	adds	r4, #1
 800bc16:	ea25 0508 	bic.w	r5, r5, r8
 800bc1a:	e7b6      	b.n	800bb8a <floor+0x42>
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bc22:	fa03 f606 	lsl.w	r6, r3, r6
 800bc26:	4435      	add	r5, r6
 800bc28:	42bd      	cmp	r5, r7
 800bc2a:	bf38      	it	cc
 800bc2c:	18e4      	addcc	r4, r4, r3
 800bc2e:	e7f2      	b.n	800bc16 <floor+0xce>
 800bc30:	2500      	movs	r5, #0
 800bc32:	462c      	mov	r4, r5
 800bc34:	e7a9      	b.n	800bb8a <floor+0x42>
 800bc36:	bf00      	nop
 800bc38:	8800759c 	.word	0x8800759c
 800bc3c:	7e37e43c 	.word	0x7e37e43c
 800bc40:	bff00000 	.word	0xbff00000
 800bc44:	000fffff 	.word	0x000fffff

0800bc48 <sin>:
 800bc48:	b530      	push	{r4, r5, lr}
 800bc4a:	4a20      	ldr	r2, [pc, #128]	; (800bccc <sin+0x84>)
 800bc4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc50:	4293      	cmp	r3, r2
 800bc52:	b087      	sub	sp, #28
 800bc54:	dc06      	bgt.n	800bc64 <sin+0x1c>
 800bc56:	2300      	movs	r3, #0
 800bc58:	2200      	movs	r2, #0
 800bc5a:	9300      	str	r3, [sp, #0]
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	f000 ff8f 	bl	800cb80 <__kernel_sin>
 800bc62:	e006      	b.n	800bc72 <sin+0x2a>
 800bc64:	4a1a      	ldr	r2, [pc, #104]	; (800bcd0 <sin+0x88>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	dd05      	ble.n	800bc76 <sin+0x2e>
 800bc6a:	4602      	mov	r2, r0
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	f7f4 fa7b 	bl	8000168 <__aeabi_dsub>
 800bc72:	b007      	add	sp, #28
 800bc74:	bd30      	pop	{r4, r5, pc}
 800bc76:	aa02      	add	r2, sp, #8
 800bc78:	f000 f98a 	bl	800bf90 <__ieee754_rem_pio2>
 800bc7c:	f000 0003 	and.w	r0, r0, #3
 800bc80:	2801      	cmp	r0, #1
 800bc82:	d009      	beq.n	800bc98 <sin+0x50>
 800bc84:	2802      	cmp	r0, #2
 800bc86:	d00e      	beq.n	800bca6 <sin+0x5e>
 800bc88:	b9c0      	cbnz	r0, 800bcbc <sin+0x74>
 800bc8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc8e:	2301      	movs	r3, #1
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc96:	e7e2      	b.n	800bc5e <sin+0x16>
 800bc98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca0:	f000 fb6e 	bl	800c380 <__kernel_cos>
 800bca4:	e7e5      	b.n	800bc72 <sin+0x2a>
 800bca6:	2301      	movs	r3, #1
 800bca8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcac:	9300      	str	r3, [sp, #0]
 800bcae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcb2:	f000 ff65 	bl	800cb80 <__kernel_sin>
 800bcb6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bcba:	e7da      	b.n	800bc72 <sin+0x2a>
 800bcbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc4:	f000 fb5c 	bl	800c380 <__kernel_cos>
 800bcc8:	e7f5      	b.n	800bcb6 <sin+0x6e>
 800bcca:	bf00      	nop
 800bccc:	3fe921fb 	.word	0x3fe921fb
 800bcd0:	7fefffff 	.word	0x7fefffff

0800bcd4 <roundf>:
 800bcd4:	b508      	push	{r3, lr}
 800bcd6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bcda:	3b7f      	subs	r3, #127	; 0x7f
 800bcdc:	2b16      	cmp	r3, #22
 800bcde:	4601      	mov	r1, r0
 800bce0:	4602      	mov	r2, r0
 800bce2:	dc14      	bgt.n	800bd0e <roundf+0x3a>
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	da07      	bge.n	800bcf8 <roundf+0x24>
 800bce8:	3301      	adds	r3, #1
 800bcea:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800bcee:	d101      	bne.n	800bcf4 <roundf+0x20>
 800bcf0:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800bcf4:	4608      	mov	r0, r1
 800bcf6:	bd08      	pop	{r3, pc}
 800bcf8:	4808      	ldr	r0, [pc, #32]	; (800bd1c <roundf+0x48>)
 800bcfa:	4118      	asrs	r0, r3
 800bcfc:	4201      	tst	r1, r0
 800bcfe:	d0f9      	beq.n	800bcf4 <roundf+0x20>
 800bd00:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bd04:	4119      	asrs	r1, r3
 800bd06:	4411      	add	r1, r2
 800bd08:	ea21 0100 	bic.w	r1, r1, r0
 800bd0c:	e7f2      	b.n	800bcf4 <roundf+0x20>
 800bd0e:	2b80      	cmp	r3, #128	; 0x80
 800bd10:	d1f0      	bne.n	800bcf4 <roundf+0x20>
 800bd12:	f7f4 ff0f 	bl	8000b34 <__addsf3>
 800bd16:	4601      	mov	r1, r0
 800bd18:	e7ec      	b.n	800bcf4 <roundf+0x20>
 800bd1a:	bf00      	nop
 800bd1c:	007fffff 	.word	0x007fffff

0800bd20 <fmod>:
 800bd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd24:	4680      	mov	r8, r0
 800bd26:	4689      	mov	r9, r1
 800bd28:	4616      	mov	r6, r2
 800bd2a:	461f      	mov	r7, r3
 800bd2c:	f000 f820 	bl	800bd70 <__ieee754_fmod>
 800bd30:	4632      	mov	r2, r6
 800bd32:	4604      	mov	r4, r0
 800bd34:	460d      	mov	r5, r1
 800bd36:	463b      	mov	r3, r7
 800bd38:	4640      	mov	r0, r8
 800bd3a:	4649      	mov	r1, r9
 800bd3c:	f7f4 fe66 	bl	8000a0c <__aeabi_dcmpun>
 800bd40:	b990      	cbnz	r0, 800bd68 <fmod+0x48>
 800bd42:	2200      	movs	r2, #0
 800bd44:	2300      	movs	r3, #0
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fe2d 	bl	80009a8 <__aeabi_dcmpeq>
 800bd4e:	b158      	cbz	r0, 800bd68 <fmod+0x48>
 800bd50:	f7ff fa06 	bl	800b160 <__errno>
 800bd54:	2321      	movs	r3, #33	; 0x21
 800bd56:	2200      	movs	r2, #0
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4619      	mov	r1, r3
 800bd60:	f7f4 fce4 	bl	800072c <__aeabi_ddiv>
 800bd64:	4604      	mov	r4, r0
 800bd66:	460d      	mov	r5, r1
 800bd68:	4620      	mov	r0, r4
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800bd70 <__ieee754_fmod>:
 800bd70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd74:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800bd78:	460e      	mov	r6, r1
 800bd7a:	461d      	mov	r5, r3
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	ea58 0302 	orrs.w	r3, r8, r2
 800bd82:	4607      	mov	r7, r0
 800bd84:	4614      	mov	r4, r2
 800bd86:	4694      	mov	ip, r2
 800bd88:	4696      	mov	lr, r2
 800bd8a:	d00c      	beq.n	800bda6 <__ieee754_fmod+0x36>
 800bd8c:	4a7a      	ldr	r2, [pc, #488]	; (800bf78 <__ieee754_fmod+0x208>)
 800bd8e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800bd92:	4293      	cmp	r3, r2
 800bd94:	46b2      	mov	sl, r6
 800bd96:	dc06      	bgt.n	800bda6 <__ieee754_fmod+0x36>
 800bd98:	4262      	negs	r2, r4
 800bd9a:	4878      	ldr	r0, [pc, #480]	; (800bf7c <__ieee754_fmod+0x20c>)
 800bd9c:	4322      	orrs	r2, r4
 800bd9e:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800bda2:	4282      	cmp	r2, r0
 800bda4:	d90c      	bls.n	800bdc0 <__ieee754_fmod+0x50>
 800bda6:	460b      	mov	r3, r1
 800bda8:	4622      	mov	r2, r4
 800bdaa:	4638      	mov	r0, r7
 800bdac:	4631      	mov	r1, r6
 800bdae:	f7f4 fb93 	bl	80004d8 <__aeabi_dmul>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	f7f4 fcb9 	bl	800072c <__aeabi_ddiv>
 800bdba:	4607      	mov	r7, r0
 800bdbc:	460e      	mov	r6, r1
 800bdbe:	e00e      	b.n	800bdde <__ieee754_fmod+0x6e>
 800bdc0:	4543      	cmp	r3, r8
 800bdc2:	46b9      	mov	r9, r7
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800bdca:	dc0c      	bgt.n	800bde6 <__ieee754_fmod+0x76>
 800bdcc:	db07      	blt.n	800bdde <__ieee754_fmod+0x6e>
 800bdce:	4567      	cmp	r7, ip
 800bdd0:	d305      	bcc.n	800bdde <__ieee754_fmod+0x6e>
 800bdd2:	d108      	bne.n	800bde6 <__ieee754_fmod+0x76>
 800bdd4:	4b6a      	ldr	r3, [pc, #424]	; (800bf80 <__ieee754_fmod+0x210>)
 800bdd6:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800bdda:	e9d4 7600 	ldrd	r7, r6, [r4]
 800bdde:	4638      	mov	r0, r7
 800bde0:	4631      	mov	r1, r6
 800bde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bde6:	ea1a 0f00 	tst.w	sl, r0
 800bdea:	d14a      	bne.n	800be82 <__ieee754_fmod+0x112>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d141      	bne.n	800be74 <__ieee754_fmod+0x104>
 800bdf0:	464a      	mov	r2, r9
 800bdf2:	4864      	ldr	r0, [pc, #400]	; (800bf84 <__ieee754_fmod+0x214>)
 800bdf4:	2a00      	cmp	r2, #0
 800bdf6:	dc3a      	bgt.n	800be6e <__ieee754_fmod+0xfe>
 800bdf8:	4a60      	ldr	r2, [pc, #384]	; (800bf7c <__ieee754_fmod+0x20c>)
 800bdfa:	402a      	ands	r2, r5
 800bdfc:	2a00      	cmp	r2, #0
 800bdfe:	d14f      	bne.n	800bea0 <__ieee754_fmod+0x130>
 800be00:	f1b8 0f00 	cmp.w	r8, #0
 800be04:	d144      	bne.n	800be90 <__ieee754_fmod+0x120>
 800be06:	4666      	mov	r6, ip
 800be08:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800be0c:	2e00      	cmp	r6, #0
 800be0e:	dc3c      	bgt.n	800be8a <__ieee754_fmod+0x11a>
 800be10:	4e5d      	ldr	r6, [pc, #372]	; (800bf88 <__ieee754_fmod+0x218>)
 800be12:	42b0      	cmp	r0, r6
 800be14:	db49      	blt.n	800beaa <__ieee754_fmod+0x13a>
 800be16:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800be1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be1e:	4e5a      	ldr	r6, [pc, #360]	; (800bf88 <__ieee754_fmod+0x218>)
 800be20:	42b2      	cmp	r2, r6
 800be22:	db54      	blt.n	800bece <__ieee754_fmod+0x15e>
 800be24:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800be28:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800be2c:	1a80      	subs	r0, r0, r2
 800be2e:	1b5e      	subs	r6, r3, r5
 800be30:	eba1 070e 	sub.w	r7, r1, lr
 800be34:	2800      	cmp	r0, #0
 800be36:	d161      	bne.n	800befc <__ieee754_fmod+0x18c>
 800be38:	4571      	cmp	r1, lr
 800be3a:	bf38      	it	cc
 800be3c:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800be40:	2e00      	cmp	r6, #0
 800be42:	bfa4      	itt	ge
 800be44:	4639      	movge	r1, r7
 800be46:	4633      	movge	r3, r6
 800be48:	ea53 0001 	orrs.w	r0, r3, r1
 800be4c:	d0c2      	beq.n	800bdd4 <__ieee754_fmod+0x64>
 800be4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be52:	db68      	blt.n	800bf26 <__ieee754_fmod+0x1b6>
 800be54:	484c      	ldr	r0, [pc, #304]	; (800bf88 <__ieee754_fmod+0x218>)
 800be56:	4282      	cmp	r2, r0
 800be58:	db6b      	blt.n	800bf32 <__ieee754_fmod+0x1c2>
 800be5a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800be5e:	431c      	orrs	r4, r3
 800be60:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800be64:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800be68:	460f      	mov	r7, r1
 800be6a:	464e      	mov	r6, r9
 800be6c:	e7b7      	b.n	800bdde <__ieee754_fmod+0x6e>
 800be6e:	3801      	subs	r0, #1
 800be70:	0052      	lsls	r2, r2, #1
 800be72:	e7bf      	b.n	800bdf4 <__ieee754_fmod+0x84>
 800be74:	4844      	ldr	r0, [pc, #272]	; (800bf88 <__ieee754_fmod+0x218>)
 800be76:	02da      	lsls	r2, r3, #11
 800be78:	2a00      	cmp	r2, #0
 800be7a:	ddbd      	ble.n	800bdf8 <__ieee754_fmod+0x88>
 800be7c:	3801      	subs	r0, #1
 800be7e:	0052      	lsls	r2, r2, #1
 800be80:	e7fa      	b.n	800be78 <__ieee754_fmod+0x108>
 800be82:	1518      	asrs	r0, r3, #20
 800be84:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800be88:	e7b6      	b.n	800bdf8 <__ieee754_fmod+0x88>
 800be8a:	3a01      	subs	r2, #1
 800be8c:	0076      	lsls	r6, r6, #1
 800be8e:	e7bd      	b.n	800be0c <__ieee754_fmod+0x9c>
 800be90:	4a3d      	ldr	r2, [pc, #244]	; (800bf88 <__ieee754_fmod+0x218>)
 800be92:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800be96:	2e00      	cmp	r6, #0
 800be98:	ddba      	ble.n	800be10 <__ieee754_fmod+0xa0>
 800be9a:	3a01      	subs	r2, #1
 800be9c:	0076      	lsls	r6, r6, #1
 800be9e:	e7fa      	b.n	800be96 <__ieee754_fmod+0x126>
 800bea0:	ea4f 5228 	mov.w	r2, r8, asr #20
 800bea4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bea8:	e7b2      	b.n	800be10 <__ieee754_fmod+0xa0>
 800beaa:	1a31      	subs	r1, r6, r0
 800beac:	291f      	cmp	r1, #31
 800beae:	dc08      	bgt.n	800bec2 <__ieee754_fmod+0x152>
 800beb0:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800beb4:	408b      	lsls	r3, r1
 800beb6:	fa29 f606 	lsr.w	r6, r9, r6
 800beba:	4333      	orrs	r3, r6
 800bebc:	fa09 f101 	lsl.w	r1, r9, r1
 800bec0:	e7ad      	b.n	800be1e <__ieee754_fmod+0xae>
 800bec2:	4b32      	ldr	r3, [pc, #200]	; (800bf8c <__ieee754_fmod+0x21c>)
 800bec4:	2100      	movs	r1, #0
 800bec6:	1a1b      	subs	r3, r3, r0
 800bec8:	fa09 f303 	lsl.w	r3, r9, r3
 800becc:	e7a7      	b.n	800be1e <__ieee754_fmod+0xae>
 800bece:	eba6 0e02 	sub.w	lr, r6, r2
 800bed2:	f1be 0f1f 	cmp.w	lr, #31
 800bed6:	dc0a      	bgt.n	800beee <__ieee754_fmod+0x17e>
 800bed8:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800bedc:	fa08 f80e 	lsl.w	r8, r8, lr
 800bee0:	fa2c f505 	lsr.w	r5, ip, r5
 800bee4:	ea45 0508 	orr.w	r5, r5, r8
 800bee8:	fa0c fe0e 	lsl.w	lr, ip, lr
 800beec:	e79e      	b.n	800be2c <__ieee754_fmod+0xbc>
 800beee:	4d27      	ldr	r5, [pc, #156]	; (800bf8c <__ieee754_fmod+0x21c>)
 800bef0:	f04f 0e00 	mov.w	lr, #0
 800bef4:	1aad      	subs	r5, r5, r2
 800bef6:	fa0c f505 	lsl.w	r5, ip, r5
 800befa:	e797      	b.n	800be2c <__ieee754_fmod+0xbc>
 800befc:	4571      	cmp	r1, lr
 800befe:	bf38      	it	cc
 800bf00:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800bf04:	2e00      	cmp	r6, #0
 800bf06:	da05      	bge.n	800bf14 <__ieee754_fmod+0x1a4>
 800bf08:	0fce      	lsrs	r6, r1, #31
 800bf0a:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800bf0e:	0049      	lsls	r1, r1, #1
 800bf10:	3801      	subs	r0, #1
 800bf12:	e78c      	b.n	800be2e <__ieee754_fmod+0xbe>
 800bf14:	ea56 0307 	orrs.w	r3, r6, r7
 800bf18:	f43f af5c 	beq.w	800bdd4 <__ieee754_fmod+0x64>
 800bf1c:	0ffb      	lsrs	r3, r7, #31
 800bf1e:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800bf22:	0079      	lsls	r1, r7, #1
 800bf24:	e7f4      	b.n	800bf10 <__ieee754_fmod+0x1a0>
 800bf26:	0fc8      	lsrs	r0, r1, #31
 800bf28:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bf2c:	0049      	lsls	r1, r1, #1
 800bf2e:	3a01      	subs	r2, #1
 800bf30:	e78d      	b.n	800be4e <__ieee754_fmod+0xde>
 800bf32:	1a80      	subs	r0, r0, r2
 800bf34:	2814      	cmp	r0, #20
 800bf36:	dc0a      	bgt.n	800bf4e <__ieee754_fmod+0x1de>
 800bf38:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800bf3c:	fa03 f202 	lsl.w	r2, r3, r2
 800bf40:	40c1      	lsrs	r1, r0
 800bf42:	430a      	orrs	r2, r1
 800bf44:	4103      	asrs	r3, r0
 800bf46:	4610      	mov	r0, r2
 800bf48:	ea43 0104 	orr.w	r1, r3, r4
 800bf4c:	e735      	b.n	800bdba <__ieee754_fmod+0x4a>
 800bf4e:	281f      	cmp	r0, #31
 800bf50:	dc07      	bgt.n	800bf62 <__ieee754_fmod+0x1f2>
 800bf52:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800bf56:	40c1      	lsrs	r1, r0
 800bf58:	fa03 f202 	lsl.w	r2, r3, r2
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	4623      	mov	r3, r4
 800bf60:	e7f1      	b.n	800bf46 <__ieee754_fmod+0x1d6>
 800bf62:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800bf66:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf6a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800bf6e:	32e2      	adds	r2, #226	; 0xe2
 800bf70:	fa43 f202 	asr.w	r2, r3, r2
 800bf74:	e7f3      	b.n	800bf5e <__ieee754_fmod+0x1ee>
 800bf76:	bf00      	nop
 800bf78:	7fefffff 	.word	0x7fefffff
 800bf7c:	7ff00000 	.word	0x7ff00000
 800bf80:	0800ced8 	.word	0x0800ced8
 800bf84:	fffffbed 	.word	0xfffffbed
 800bf88:	fffffc02 	.word	0xfffffc02
 800bf8c:	fffffbe2 	.word	0xfffffbe2

0800bf90 <__ieee754_rem_pio2>:
 800bf90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf94:	4614      	mov	r4, r2
 800bf96:	4ac4      	ldr	r2, [pc, #784]	; (800c2a8 <__ieee754_rem_pio2+0x318>)
 800bf98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bf9c:	b08d      	sub	sp, #52	; 0x34
 800bf9e:	4592      	cmp	sl, r2
 800bfa0:	9104      	str	r1, [sp, #16]
 800bfa2:	dc07      	bgt.n	800bfb4 <__ieee754_rem_pio2+0x24>
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	e9c4 0100 	strd	r0, r1, [r4]
 800bfac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bfb0:	2500      	movs	r5, #0
 800bfb2:	e024      	b.n	800bffe <__ieee754_rem_pio2+0x6e>
 800bfb4:	4abd      	ldr	r2, [pc, #756]	; (800c2ac <__ieee754_rem_pio2+0x31c>)
 800bfb6:	4592      	cmp	sl, r2
 800bfb8:	dc72      	bgt.n	800c0a0 <__ieee754_rem_pio2+0x110>
 800bfba:	9b04      	ldr	r3, [sp, #16]
 800bfbc:	4dbc      	ldr	r5, [pc, #752]	; (800c2b0 <__ieee754_rem_pio2+0x320>)
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	a3ab      	add	r3, pc, #684	; (adr r3, 800c270 <__ieee754_rem_pio2+0x2e0>)
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	dd36      	ble.n	800c036 <__ieee754_rem_pio2+0xa6>
 800bfc8:	f7f4 f8ce 	bl	8000168 <__aeabi_dsub>
 800bfcc:	45aa      	cmp	sl, r5
 800bfce:	4606      	mov	r6, r0
 800bfd0:	460f      	mov	r7, r1
 800bfd2:	d018      	beq.n	800c006 <__ieee754_rem_pio2+0x76>
 800bfd4:	a3a8      	add	r3, pc, #672	; (adr r3, 800c278 <__ieee754_rem_pio2+0x2e8>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	f7f4 f8c5 	bl	8000168 <__aeabi_dsub>
 800bfde:	4602      	mov	r2, r0
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	e9c4 2300 	strd	r2, r3, [r4]
 800bfe8:	4639      	mov	r1, r7
 800bfea:	f7f4 f8bd 	bl	8000168 <__aeabi_dsub>
 800bfee:	a3a2      	add	r3, pc, #648	; (adr r3, 800c278 <__ieee754_rem_pio2+0x2e8>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	f7f4 f8b8 	bl	8000168 <__aeabi_dsub>
 800bff8:	2501      	movs	r5, #1
 800bffa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bffe:	4628      	mov	r0, r5
 800c000:	b00d      	add	sp, #52	; 0x34
 800c002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c006:	a39e      	add	r3, pc, #632	; (adr r3, 800c280 <__ieee754_rem_pio2+0x2f0>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f7f4 f8ac 	bl	8000168 <__aeabi_dsub>
 800c010:	a39d      	add	r3, pc, #628	; (adr r3, 800c288 <__ieee754_rem_pio2+0x2f8>)
 800c012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c016:	4606      	mov	r6, r0
 800c018:	460f      	mov	r7, r1
 800c01a:	f7f4 f8a5 	bl	8000168 <__aeabi_dsub>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4630      	mov	r0, r6
 800c024:	e9c4 2300 	strd	r2, r3, [r4]
 800c028:	4639      	mov	r1, r7
 800c02a:	f7f4 f89d 	bl	8000168 <__aeabi_dsub>
 800c02e:	a396      	add	r3, pc, #600	; (adr r3, 800c288 <__ieee754_rem_pio2+0x2f8>)
 800c030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c034:	e7de      	b.n	800bff4 <__ieee754_rem_pio2+0x64>
 800c036:	f7f4 f899 	bl	800016c <__adddf3>
 800c03a:	45aa      	cmp	sl, r5
 800c03c:	4606      	mov	r6, r0
 800c03e:	460f      	mov	r7, r1
 800c040:	d016      	beq.n	800c070 <__ieee754_rem_pio2+0xe0>
 800c042:	a38d      	add	r3, pc, #564	; (adr r3, 800c278 <__ieee754_rem_pio2+0x2e8>)
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	f7f4 f890 	bl	800016c <__adddf3>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4630      	mov	r0, r6
 800c052:	e9c4 2300 	strd	r2, r3, [r4]
 800c056:	4639      	mov	r1, r7
 800c058:	f7f4 f886 	bl	8000168 <__aeabi_dsub>
 800c05c:	a386      	add	r3, pc, #536	; (adr r3, 800c278 <__ieee754_rem_pio2+0x2e8>)
 800c05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c062:	f7f4 f883 	bl	800016c <__adddf3>
 800c066:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c06a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c06e:	e7c6      	b.n	800bffe <__ieee754_rem_pio2+0x6e>
 800c070:	a383      	add	r3, pc, #524	; (adr r3, 800c280 <__ieee754_rem_pio2+0x2f0>)
 800c072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c076:	f7f4 f879 	bl	800016c <__adddf3>
 800c07a:	a383      	add	r3, pc, #524	; (adr r3, 800c288 <__ieee754_rem_pio2+0x2f8>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	4606      	mov	r6, r0
 800c082:	460f      	mov	r7, r1
 800c084:	f7f4 f872 	bl	800016c <__adddf3>
 800c088:	4602      	mov	r2, r0
 800c08a:	460b      	mov	r3, r1
 800c08c:	4630      	mov	r0, r6
 800c08e:	e9c4 2300 	strd	r2, r3, [r4]
 800c092:	4639      	mov	r1, r7
 800c094:	f7f4 f868 	bl	8000168 <__aeabi_dsub>
 800c098:	a37b      	add	r3, pc, #492	; (adr r3, 800c288 <__ieee754_rem_pio2+0x2f8>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	e7e0      	b.n	800c062 <__ieee754_rem_pio2+0xd2>
 800c0a0:	4a84      	ldr	r2, [pc, #528]	; (800c2b4 <__ieee754_rem_pio2+0x324>)
 800c0a2:	4592      	cmp	sl, r2
 800c0a4:	f300 80d5 	bgt.w	800c252 <__ieee754_rem_pio2+0x2c2>
 800c0a8:	f000 fe20 	bl	800ccec <fabs>
 800c0ac:	a378      	add	r3, pc, #480	; (adr r3, 800c290 <__ieee754_rem_pio2+0x300>)
 800c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	f7f4 fa0f 	bl	80004d8 <__aeabi_dmul>
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	4b7e      	ldr	r3, [pc, #504]	; (800c2b8 <__ieee754_rem_pio2+0x328>)
 800c0be:	f7f4 f855 	bl	800016c <__adddf3>
 800c0c2:	f7f4 fcb9 	bl	8000a38 <__aeabi_d2iz>
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	f7f4 f99c 	bl	8000404 <__aeabi_i2d>
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c0d4:	a366      	add	r3, pc, #408	; (adr r3, 800c270 <__ieee754_rem_pio2+0x2e0>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	f7f4 f9fd 	bl	80004d8 <__aeabi_dmul>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	4639      	mov	r1, r7
 800c0e6:	f7f4 f83f 	bl	8000168 <__aeabi_dsub>
 800c0ea:	a363      	add	r3, pc, #396	; (adr r3, 800c278 <__ieee754_rem_pio2+0x2e8>)
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	4680      	mov	r8, r0
 800c0f2:	4689      	mov	r9, r1
 800c0f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0f8:	f7f4 f9ee 	bl	80004d8 <__aeabi_dmul>
 800c0fc:	2d1f      	cmp	r5, #31
 800c0fe:	4606      	mov	r6, r0
 800c100:	460f      	mov	r7, r1
 800c102:	dc0e      	bgt.n	800c122 <__ieee754_rem_pio2+0x192>
 800c104:	4b6d      	ldr	r3, [pc, #436]	; (800c2bc <__ieee754_rem_pio2+0x32c>)
 800c106:	1e6a      	subs	r2, r5, #1
 800c108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10c:	4553      	cmp	r3, sl
 800c10e:	d008      	beq.n	800c122 <__ieee754_rem_pio2+0x192>
 800c110:	4632      	mov	r2, r6
 800c112:	463b      	mov	r3, r7
 800c114:	4640      	mov	r0, r8
 800c116:	4649      	mov	r1, r9
 800c118:	f7f4 f826 	bl	8000168 <__aeabi_dsub>
 800c11c:	e9c4 0100 	strd	r0, r1, [r4]
 800c120:	e013      	b.n	800c14a <__ieee754_rem_pio2+0x1ba>
 800c122:	463b      	mov	r3, r7
 800c124:	4632      	mov	r2, r6
 800c126:	4640      	mov	r0, r8
 800c128:	4649      	mov	r1, r9
 800c12a:	f7f4 f81d 	bl	8000168 <__aeabi_dsub>
 800c12e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800c132:	9305      	str	r3, [sp, #20]
 800c134:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c138:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800c13c:	f1ba 0f10 	cmp.w	sl, #16
 800c140:	dc1f      	bgt.n	800c182 <__ieee754_rem_pio2+0x1f2>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	e9c4 2300 	strd	r2, r3, [r4]
 800c14a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c14e:	4640      	mov	r0, r8
 800c150:	4653      	mov	r3, sl
 800c152:	4649      	mov	r1, r9
 800c154:	f7f4 f808 	bl	8000168 <__aeabi_dsub>
 800c158:	4632      	mov	r2, r6
 800c15a:	463b      	mov	r3, r7
 800c15c:	f7f4 f804 	bl	8000168 <__aeabi_dsub>
 800c160:	460b      	mov	r3, r1
 800c162:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c166:	9904      	ldr	r1, [sp, #16]
 800c168:	4602      	mov	r2, r0
 800c16a:	2900      	cmp	r1, #0
 800c16c:	f6bf af47 	bge.w	800bffe <__ieee754_rem_pio2+0x6e>
 800c170:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800c174:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800c178:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c17c:	60e3      	str	r3, [r4, #12]
 800c17e:	426d      	negs	r5, r5
 800c180:	e73d      	b.n	800bffe <__ieee754_rem_pio2+0x6e>
 800c182:	a33f      	add	r3, pc, #252	; (adr r3, 800c280 <__ieee754_rem_pio2+0x2f0>)
 800c184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c18c:	f7f4 f9a4 	bl	80004d8 <__aeabi_dmul>
 800c190:	4606      	mov	r6, r0
 800c192:	460f      	mov	r7, r1
 800c194:	4602      	mov	r2, r0
 800c196:	460b      	mov	r3, r1
 800c198:	4640      	mov	r0, r8
 800c19a:	4649      	mov	r1, r9
 800c19c:	f7f3 ffe4 	bl	8000168 <__aeabi_dsub>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4682      	mov	sl, r0
 800c1a6:	468b      	mov	fp, r1
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	4649      	mov	r1, r9
 800c1ac:	f7f3 ffdc 	bl	8000168 <__aeabi_dsub>
 800c1b0:	4632      	mov	r2, r6
 800c1b2:	463b      	mov	r3, r7
 800c1b4:	f7f3 ffd8 	bl	8000168 <__aeabi_dsub>
 800c1b8:	a333      	add	r3, pc, #204	; (adr r3, 800c288 <__ieee754_rem_pio2+0x2f8>)
 800c1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1be:	4606      	mov	r6, r0
 800c1c0:	460f      	mov	r7, r1
 800c1c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1c6:	f7f4 f987 	bl	80004d8 <__aeabi_dmul>
 800c1ca:	4632      	mov	r2, r6
 800c1cc:	463b      	mov	r3, r7
 800c1ce:	f7f3 ffcb 	bl	8000168 <__aeabi_dsub>
 800c1d2:	4602      	mov	r2, r0
 800c1d4:	460b      	mov	r3, r1
 800c1d6:	4606      	mov	r6, r0
 800c1d8:	460f      	mov	r7, r1
 800c1da:	4650      	mov	r0, sl
 800c1dc:	4659      	mov	r1, fp
 800c1de:	f7f3 ffc3 	bl	8000168 <__aeabi_dsub>
 800c1e2:	9a05      	ldr	r2, [sp, #20]
 800c1e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	2b31      	cmp	r3, #49	; 0x31
 800c1ec:	dc06      	bgt.n	800c1fc <__ieee754_rem_pio2+0x26c>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	46d0      	mov	r8, sl
 800c1f4:	46d9      	mov	r9, fp
 800c1f6:	e9c4 2300 	strd	r2, r3, [r4]
 800c1fa:	e7a6      	b.n	800c14a <__ieee754_rem_pio2+0x1ba>
 800c1fc:	a326      	add	r3, pc, #152	; (adr r3, 800c298 <__ieee754_rem_pio2+0x308>)
 800c1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c202:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c206:	f7f4 f967 	bl	80004d8 <__aeabi_dmul>
 800c20a:	4606      	mov	r6, r0
 800c20c:	460f      	mov	r7, r1
 800c20e:	4602      	mov	r2, r0
 800c210:	460b      	mov	r3, r1
 800c212:	4650      	mov	r0, sl
 800c214:	4659      	mov	r1, fp
 800c216:	f7f3 ffa7 	bl	8000168 <__aeabi_dsub>
 800c21a:	4602      	mov	r2, r0
 800c21c:	460b      	mov	r3, r1
 800c21e:	4680      	mov	r8, r0
 800c220:	4689      	mov	r9, r1
 800c222:	4650      	mov	r0, sl
 800c224:	4659      	mov	r1, fp
 800c226:	f7f3 ff9f 	bl	8000168 <__aeabi_dsub>
 800c22a:	4632      	mov	r2, r6
 800c22c:	463b      	mov	r3, r7
 800c22e:	f7f3 ff9b 	bl	8000168 <__aeabi_dsub>
 800c232:	a31b      	add	r3, pc, #108	; (adr r3, 800c2a0 <__ieee754_rem_pio2+0x310>)
 800c234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c238:	4606      	mov	r6, r0
 800c23a:	460f      	mov	r7, r1
 800c23c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c240:	f7f4 f94a 	bl	80004d8 <__aeabi_dmul>
 800c244:	4632      	mov	r2, r6
 800c246:	463b      	mov	r3, r7
 800c248:	f7f3 ff8e 	bl	8000168 <__aeabi_dsub>
 800c24c:	4606      	mov	r6, r0
 800c24e:	460f      	mov	r7, r1
 800c250:	e75e      	b.n	800c110 <__ieee754_rem_pio2+0x180>
 800c252:	4a1b      	ldr	r2, [pc, #108]	; (800c2c0 <__ieee754_rem_pio2+0x330>)
 800c254:	4592      	cmp	sl, r2
 800c256:	dd35      	ble.n	800c2c4 <__ieee754_rem_pio2+0x334>
 800c258:	4602      	mov	r2, r0
 800c25a:	460b      	mov	r3, r1
 800c25c:	f7f3 ff84 	bl	8000168 <__aeabi_dsub>
 800c260:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c264:	e9c4 0100 	strd	r0, r1, [r4]
 800c268:	e6a2      	b.n	800bfb0 <__ieee754_rem_pio2+0x20>
 800c26a:	bf00      	nop
 800c26c:	f3af 8000 	nop.w
 800c270:	54400000 	.word	0x54400000
 800c274:	3ff921fb 	.word	0x3ff921fb
 800c278:	1a626331 	.word	0x1a626331
 800c27c:	3dd0b461 	.word	0x3dd0b461
 800c280:	1a600000 	.word	0x1a600000
 800c284:	3dd0b461 	.word	0x3dd0b461
 800c288:	2e037073 	.word	0x2e037073
 800c28c:	3ba3198a 	.word	0x3ba3198a
 800c290:	6dc9c883 	.word	0x6dc9c883
 800c294:	3fe45f30 	.word	0x3fe45f30
 800c298:	2e000000 	.word	0x2e000000
 800c29c:	3ba3198a 	.word	0x3ba3198a
 800c2a0:	252049c1 	.word	0x252049c1
 800c2a4:	397b839a 	.word	0x397b839a
 800c2a8:	3fe921fb 	.word	0x3fe921fb
 800c2ac:	4002d97b 	.word	0x4002d97b
 800c2b0:	3ff921fb 	.word	0x3ff921fb
 800c2b4:	413921fb 	.word	0x413921fb
 800c2b8:	3fe00000 	.word	0x3fe00000
 800c2bc:	0800cee8 	.word	0x0800cee8
 800c2c0:	7fefffff 	.word	0x7fefffff
 800c2c4:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c2c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c2cc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c2d0:	460f      	mov	r7, r1
 800c2d2:	4606      	mov	r6, r0
 800c2d4:	f7f4 fbb0 	bl	8000a38 <__aeabi_d2iz>
 800c2d8:	f7f4 f894 	bl	8000404 <__aeabi_i2d>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c2e8:	f7f3 ff3e 	bl	8000168 <__aeabi_dsub>
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	4b22      	ldr	r3, [pc, #136]	; (800c378 <__ieee754_rem_pio2+0x3e8>)
 800c2f0:	f7f4 f8f2 	bl	80004d8 <__aeabi_dmul>
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	f7f4 fb9e 	bl	8000a38 <__aeabi_d2iz>
 800c2fc:	f7f4 f882 	bl	8000404 <__aeabi_i2d>
 800c300:	4602      	mov	r2, r0
 800c302:	460b      	mov	r3, r1
 800c304:	4630      	mov	r0, r6
 800c306:	4639      	mov	r1, r7
 800c308:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c30c:	f7f3 ff2c 	bl	8000168 <__aeabi_dsub>
 800c310:	2200      	movs	r2, #0
 800c312:	4b19      	ldr	r3, [pc, #100]	; (800c378 <__ieee754_rem_pio2+0x3e8>)
 800c314:	f7f4 f8e0 	bl	80004d8 <__aeabi_dmul>
 800c318:	f04f 0803 	mov.w	r8, #3
 800c31c:	2600      	movs	r6, #0
 800c31e:	2700      	movs	r7, #0
 800c320:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c324:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800c328:	4632      	mov	r2, r6
 800c32a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800c32e:	463b      	mov	r3, r7
 800c330:	46c2      	mov	sl, r8
 800c332:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800c336:	f7f4 fb37 	bl	80009a8 <__aeabi_dcmpeq>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d1f4      	bne.n	800c328 <__ieee754_rem_pio2+0x398>
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <__ieee754_rem_pio2+0x3ec>)
 800c340:	462a      	mov	r2, r5
 800c342:	9301      	str	r3, [sp, #4]
 800c344:	2302      	movs	r3, #2
 800c346:	4621      	mov	r1, r4
 800c348:	9300      	str	r3, [sp, #0]
 800c34a:	a806      	add	r0, sp, #24
 800c34c:	4653      	mov	r3, sl
 800c34e:	f000 f8d5 	bl	800c4fc <__kernel_rem_pio2>
 800c352:	9b04      	ldr	r3, [sp, #16]
 800c354:	4605      	mov	r5, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	f6bf ae51 	bge.w	800bffe <__ieee754_rem_pio2+0x6e>
 800c35c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c360:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c364:	e9c4 2300 	strd	r2, r3, [r4]
 800c368:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c36c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c370:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c374:	e703      	b.n	800c17e <__ieee754_rem_pio2+0x1ee>
 800c376:	bf00      	nop
 800c378:	41700000 	.word	0x41700000
 800c37c:	0800cf68 	.word	0x0800cf68

0800c380 <__kernel_cos>:
 800c380:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c384:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c388:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c38c:	4680      	mov	r8, r0
 800c38e:	460f      	mov	r7, r1
 800c390:	e9cd 2300 	strd	r2, r3, [sp]
 800c394:	da04      	bge.n	800c3a0 <__kernel_cos+0x20>
 800c396:	f7f4 fb4f 	bl	8000a38 <__aeabi_d2iz>
 800c39a:	2800      	cmp	r0, #0
 800c39c:	f000 8086 	beq.w	800c4ac <__kernel_cos+0x12c>
 800c3a0:	4642      	mov	r2, r8
 800c3a2:	463b      	mov	r3, r7
 800c3a4:	4640      	mov	r0, r8
 800c3a6:	4639      	mov	r1, r7
 800c3a8:	f7f4 f896 	bl	80004d8 <__aeabi_dmul>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	4b4e      	ldr	r3, [pc, #312]	; (800c4e8 <__kernel_cos+0x168>)
 800c3b0:	4604      	mov	r4, r0
 800c3b2:	460d      	mov	r5, r1
 800c3b4:	f7f4 f890 	bl	80004d8 <__aeabi_dmul>
 800c3b8:	a33f      	add	r3, pc, #252	; (adr r3, 800c4b8 <__kernel_cos+0x138>)
 800c3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3be:	4682      	mov	sl, r0
 800c3c0:	468b      	mov	fp, r1
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	f7f4 f887 	bl	80004d8 <__aeabi_dmul>
 800c3ca:	a33d      	add	r3, pc, #244	; (adr r3, 800c4c0 <__kernel_cos+0x140>)
 800c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d0:	f7f3 fecc 	bl	800016c <__adddf3>
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	462b      	mov	r3, r5
 800c3d8:	f7f4 f87e 	bl	80004d8 <__aeabi_dmul>
 800c3dc:	a33a      	add	r3, pc, #232	; (adr r3, 800c4c8 <__kernel_cos+0x148>)
 800c3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e2:	f7f3 fec1 	bl	8000168 <__aeabi_dsub>
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	462b      	mov	r3, r5
 800c3ea:	f7f4 f875 	bl	80004d8 <__aeabi_dmul>
 800c3ee:	a338      	add	r3, pc, #224	; (adr r3, 800c4d0 <__kernel_cos+0x150>)
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	f7f3 feba 	bl	800016c <__adddf3>
 800c3f8:	4622      	mov	r2, r4
 800c3fa:	462b      	mov	r3, r5
 800c3fc:	f7f4 f86c 	bl	80004d8 <__aeabi_dmul>
 800c400:	a335      	add	r3, pc, #212	; (adr r3, 800c4d8 <__kernel_cos+0x158>)
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f7f3 feaf 	bl	8000168 <__aeabi_dsub>
 800c40a:	4622      	mov	r2, r4
 800c40c:	462b      	mov	r3, r5
 800c40e:	f7f4 f863 	bl	80004d8 <__aeabi_dmul>
 800c412:	a333      	add	r3, pc, #204	; (adr r3, 800c4e0 <__kernel_cos+0x160>)
 800c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c418:	f7f3 fea8 	bl	800016c <__adddf3>
 800c41c:	4622      	mov	r2, r4
 800c41e:	462b      	mov	r3, r5
 800c420:	f7f4 f85a 	bl	80004d8 <__aeabi_dmul>
 800c424:	4622      	mov	r2, r4
 800c426:	462b      	mov	r3, r5
 800c428:	f7f4 f856 	bl	80004d8 <__aeabi_dmul>
 800c42c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c430:	4604      	mov	r4, r0
 800c432:	460d      	mov	r5, r1
 800c434:	4640      	mov	r0, r8
 800c436:	4639      	mov	r1, r7
 800c438:	f7f4 f84e 	bl	80004d8 <__aeabi_dmul>
 800c43c:	460b      	mov	r3, r1
 800c43e:	4602      	mov	r2, r0
 800c440:	4629      	mov	r1, r5
 800c442:	4620      	mov	r0, r4
 800c444:	f7f3 fe90 	bl	8000168 <__aeabi_dsub>
 800c448:	4b28      	ldr	r3, [pc, #160]	; (800c4ec <__kernel_cos+0x16c>)
 800c44a:	4680      	mov	r8, r0
 800c44c:	429e      	cmp	r6, r3
 800c44e:	4689      	mov	r9, r1
 800c450:	dc0e      	bgt.n	800c470 <__kernel_cos+0xf0>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4650      	mov	r0, sl
 800c458:	4659      	mov	r1, fp
 800c45a:	f7f3 fe85 	bl	8000168 <__aeabi_dsub>
 800c45e:	4602      	mov	r2, r0
 800c460:	2000      	movs	r0, #0
 800c462:	460b      	mov	r3, r1
 800c464:	4922      	ldr	r1, [pc, #136]	; (800c4f0 <__kernel_cos+0x170>)
 800c466:	f7f3 fe7f 	bl	8000168 <__aeabi_dsub>
 800c46a:	b003      	add	sp, #12
 800c46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c470:	2400      	movs	r4, #0
 800c472:	4b20      	ldr	r3, [pc, #128]	; (800c4f4 <__kernel_cos+0x174>)
 800c474:	4622      	mov	r2, r4
 800c476:	429e      	cmp	r6, r3
 800c478:	bfcc      	ite	gt
 800c47a:	4d1f      	ldrgt	r5, [pc, #124]	; (800c4f8 <__kernel_cos+0x178>)
 800c47c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c480:	462b      	mov	r3, r5
 800c482:	2000      	movs	r0, #0
 800c484:	491a      	ldr	r1, [pc, #104]	; (800c4f0 <__kernel_cos+0x170>)
 800c486:	f7f3 fe6f 	bl	8000168 <__aeabi_dsub>
 800c48a:	4622      	mov	r2, r4
 800c48c:	4606      	mov	r6, r0
 800c48e:	460f      	mov	r7, r1
 800c490:	462b      	mov	r3, r5
 800c492:	4650      	mov	r0, sl
 800c494:	4659      	mov	r1, fp
 800c496:	f7f3 fe67 	bl	8000168 <__aeabi_dsub>
 800c49a:	4642      	mov	r2, r8
 800c49c:	464b      	mov	r3, r9
 800c49e:	f7f3 fe63 	bl	8000168 <__aeabi_dsub>
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	460b      	mov	r3, r1
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	4639      	mov	r1, r7
 800c4aa:	e7dc      	b.n	800c466 <__kernel_cos+0xe6>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	4910      	ldr	r1, [pc, #64]	; (800c4f0 <__kernel_cos+0x170>)
 800c4b0:	e7db      	b.n	800c46a <__kernel_cos+0xea>
 800c4b2:	bf00      	nop
 800c4b4:	f3af 8000 	nop.w
 800c4b8:	be8838d4 	.word	0xbe8838d4
 800c4bc:	bda8fae9 	.word	0xbda8fae9
 800c4c0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c4c4:	3e21ee9e 	.word	0x3e21ee9e
 800c4c8:	809c52ad 	.word	0x809c52ad
 800c4cc:	3e927e4f 	.word	0x3e927e4f
 800c4d0:	19cb1590 	.word	0x19cb1590
 800c4d4:	3efa01a0 	.word	0x3efa01a0
 800c4d8:	16c15177 	.word	0x16c15177
 800c4dc:	3f56c16c 	.word	0x3f56c16c
 800c4e0:	5555554c 	.word	0x5555554c
 800c4e4:	3fa55555 	.word	0x3fa55555
 800c4e8:	3fe00000 	.word	0x3fe00000
 800c4ec:	3fd33332 	.word	0x3fd33332
 800c4f0:	3ff00000 	.word	0x3ff00000
 800c4f4:	3fe90000 	.word	0x3fe90000
 800c4f8:	3fd20000 	.word	0x3fd20000

0800c4fc <__kernel_rem_pio2>:
 800c4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c500:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c504:	9308      	str	r3, [sp, #32]
 800c506:	9106      	str	r1, [sp, #24]
 800c508:	4bb6      	ldr	r3, [pc, #728]	; (800c7e4 <__kernel_rem_pio2+0x2e8>)
 800c50a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c50c:	f112 0f14 	cmn.w	r2, #20
 800c510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c514:	bfa8      	it	ge
 800c516:	1ed4      	subge	r4, r2, #3
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	9b08      	ldr	r3, [sp, #32]
 800c51c:	bfb8      	it	lt
 800c51e:	2400      	movlt	r4, #0
 800c520:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800c524:	9307      	str	r3, [sp, #28]
 800c526:	bfa4      	itt	ge
 800c528:	2318      	movge	r3, #24
 800c52a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c52e:	f06f 0317 	mvn.w	r3, #23
 800c532:	fb04 3303 	mla	r3, r4, r3, r3
 800c536:	eb03 0b02 	add.w	fp, r3, r2
 800c53a:	9a07      	ldr	r2, [sp, #28]
 800c53c:	9b02      	ldr	r3, [sp, #8]
 800c53e:	1aa7      	subs	r7, r4, r2
 800c540:	eb03 0802 	add.w	r8, r3, r2
 800c544:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c546:	2500      	movs	r5, #0
 800c548:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c54c:	2200      	movs	r2, #0
 800c54e:	2300      	movs	r3, #0
 800c550:	9009      	str	r0, [sp, #36]	; 0x24
 800c552:	ae20      	add	r6, sp, #128	; 0x80
 800c554:	4545      	cmp	r5, r8
 800c556:	dd14      	ble.n	800c582 <__kernel_rem_pio2+0x86>
 800c558:	f04f 0800 	mov.w	r8, #0
 800c55c:	9a08      	ldr	r2, [sp, #32]
 800c55e:	ab20      	add	r3, sp, #128	; 0x80
 800c560:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800c564:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800c568:	9b02      	ldr	r3, [sp, #8]
 800c56a:	4598      	cmp	r8, r3
 800c56c:	dc35      	bgt.n	800c5da <__kernel_rem_pio2+0xde>
 800c56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c570:	2200      	movs	r2, #0
 800c572:	f1a3 0908 	sub.w	r9, r3, #8
 800c576:	2300      	movs	r3, #0
 800c578:	462f      	mov	r7, r5
 800c57a:	2600      	movs	r6, #0
 800c57c:	e9cd 2300 	strd	r2, r3, [sp]
 800c580:	e01f      	b.n	800c5c2 <__kernel_rem_pio2+0xc6>
 800c582:	42ef      	cmn	r7, r5
 800c584:	d40b      	bmi.n	800c59e <__kernel_rem_pio2+0xa2>
 800c586:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c58a:	e9cd 2300 	strd	r2, r3, [sp]
 800c58e:	f7f3 ff39 	bl	8000404 <__aeabi_i2d>
 800c592:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c596:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c59a:	3501      	adds	r5, #1
 800c59c:	e7da      	b.n	800c554 <__kernel_rem_pio2+0x58>
 800c59e:	4610      	mov	r0, r2
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	e7f8      	b.n	800c596 <__kernel_rem_pio2+0x9a>
 800c5a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5a8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800c5ac:	f7f3 ff94 	bl	80004d8 <__aeabi_dmul>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5b8:	f7f3 fdd8 	bl	800016c <__adddf3>
 800c5bc:	e9cd 0100 	strd	r0, r1, [sp]
 800c5c0:	3601      	adds	r6, #1
 800c5c2:	9b07      	ldr	r3, [sp, #28]
 800c5c4:	3f08      	subs	r7, #8
 800c5c6:	429e      	cmp	r6, r3
 800c5c8:	ddec      	ble.n	800c5a4 <__kernel_rem_pio2+0xa8>
 800c5ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5ce:	f108 0801 	add.w	r8, r8, #1
 800c5d2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800c5d6:	3508      	adds	r5, #8
 800c5d8:	e7c6      	b.n	800c568 <__kernel_rem_pio2+0x6c>
 800c5da:	9b02      	ldr	r3, [sp, #8]
 800c5dc:	aa0c      	add	r2, sp, #48	; 0x30
 800c5de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c5e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c5e4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c5e6:	9e02      	ldr	r6, [sp, #8]
 800c5e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c5ec:	930a      	str	r3, [sp, #40]	; 0x28
 800c5ee:	ab98      	add	r3, sp, #608	; 0x260
 800c5f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5f4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800c5f8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c5fa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800c5fe:	46d0      	mov	r8, sl
 800c600:	46b1      	mov	r9, r6
 800c602:	af0c      	add	r7, sp, #48	; 0x30
 800c604:	9700      	str	r7, [sp, #0]
 800c606:	f1b9 0f00 	cmp.w	r9, #0
 800c60a:	f1a8 0808 	sub.w	r8, r8, #8
 800c60e:	dc71      	bgt.n	800c6f4 <__kernel_rem_pio2+0x1f8>
 800c610:	465a      	mov	r2, fp
 800c612:	4620      	mov	r0, r4
 800c614:	4629      	mov	r1, r5
 800c616:	f000 fb6f 	bl	800ccf8 <scalbn>
 800c61a:	2200      	movs	r2, #0
 800c61c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c620:	4604      	mov	r4, r0
 800c622:	460d      	mov	r5, r1
 800c624:	f7f3 ff58 	bl	80004d8 <__aeabi_dmul>
 800c628:	f7ff fa8e 	bl	800bb48 <floor>
 800c62c:	2200      	movs	r2, #0
 800c62e:	4b6e      	ldr	r3, [pc, #440]	; (800c7e8 <__kernel_rem_pio2+0x2ec>)
 800c630:	f7f3 ff52 	bl	80004d8 <__aeabi_dmul>
 800c634:	4602      	mov	r2, r0
 800c636:	460b      	mov	r3, r1
 800c638:	4620      	mov	r0, r4
 800c63a:	4629      	mov	r1, r5
 800c63c:	f7f3 fd94 	bl	8000168 <__aeabi_dsub>
 800c640:	460d      	mov	r5, r1
 800c642:	4604      	mov	r4, r0
 800c644:	f7f4 f9f8 	bl	8000a38 <__aeabi_d2iz>
 800c648:	9004      	str	r0, [sp, #16]
 800c64a:	f7f3 fedb 	bl	8000404 <__aeabi_i2d>
 800c64e:	4602      	mov	r2, r0
 800c650:	460b      	mov	r3, r1
 800c652:	4620      	mov	r0, r4
 800c654:	4629      	mov	r1, r5
 800c656:	f7f3 fd87 	bl	8000168 <__aeabi_dsub>
 800c65a:	f1bb 0f00 	cmp.w	fp, #0
 800c65e:	4680      	mov	r8, r0
 800c660:	4689      	mov	r9, r1
 800c662:	dd70      	ble.n	800c746 <__kernel_rem_pio2+0x24a>
 800c664:	1e72      	subs	r2, r6, #1
 800c666:	ab0c      	add	r3, sp, #48	; 0x30
 800c668:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c66c:	9c04      	ldr	r4, [sp, #16]
 800c66e:	f1cb 0118 	rsb	r1, fp, #24
 800c672:	fa40 f301 	asr.w	r3, r0, r1
 800c676:	441c      	add	r4, r3
 800c678:	408b      	lsls	r3, r1
 800c67a:	1ac0      	subs	r0, r0, r3
 800c67c:	ab0c      	add	r3, sp, #48	; 0x30
 800c67e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c682:	f1cb 0317 	rsb	r3, fp, #23
 800c686:	9404      	str	r4, [sp, #16]
 800c688:	fa40 f303 	asr.w	r3, r0, r3
 800c68c:	9300      	str	r3, [sp, #0]
 800c68e:	9b00      	ldr	r3, [sp, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	dd66      	ble.n	800c762 <__kernel_rem_pio2+0x266>
 800c694:	2200      	movs	r2, #0
 800c696:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c69a:	4614      	mov	r4, r2
 800c69c:	9b04      	ldr	r3, [sp, #16]
 800c69e:	3301      	adds	r3, #1
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	4296      	cmp	r6, r2
 800c6a4:	f300 80ac 	bgt.w	800c800 <__kernel_rem_pio2+0x304>
 800c6a8:	f1bb 0f00 	cmp.w	fp, #0
 800c6ac:	dd07      	ble.n	800c6be <__kernel_rem_pio2+0x1c2>
 800c6ae:	f1bb 0f01 	cmp.w	fp, #1
 800c6b2:	f000 80b4 	beq.w	800c81e <__kernel_rem_pio2+0x322>
 800c6b6:	f1bb 0f02 	cmp.w	fp, #2
 800c6ba:	f000 80ba 	beq.w	800c832 <__kernel_rem_pio2+0x336>
 800c6be:	9b00      	ldr	r3, [sp, #0]
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d14e      	bne.n	800c762 <__kernel_rem_pio2+0x266>
 800c6c4:	4642      	mov	r2, r8
 800c6c6:	464b      	mov	r3, r9
 800c6c8:	2000      	movs	r0, #0
 800c6ca:	4948      	ldr	r1, [pc, #288]	; (800c7ec <__kernel_rem_pio2+0x2f0>)
 800c6cc:	f7f3 fd4c 	bl	8000168 <__aeabi_dsub>
 800c6d0:	4680      	mov	r8, r0
 800c6d2:	4689      	mov	r9, r1
 800c6d4:	2c00      	cmp	r4, #0
 800c6d6:	d044      	beq.n	800c762 <__kernel_rem_pio2+0x266>
 800c6d8:	465a      	mov	r2, fp
 800c6da:	2000      	movs	r0, #0
 800c6dc:	4943      	ldr	r1, [pc, #268]	; (800c7ec <__kernel_rem_pio2+0x2f0>)
 800c6de:	f000 fb0b 	bl	800ccf8 <scalbn>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	4640      	mov	r0, r8
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	f7f3 fd3d 	bl	8000168 <__aeabi_dsub>
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	4689      	mov	r9, r1
 800c6f2:	e036      	b.n	800c762 <__kernel_rem_pio2+0x266>
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	4b3e      	ldr	r3, [pc, #248]	; (800c7f0 <__kernel_rem_pio2+0x2f4>)
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	4629      	mov	r1, r5
 800c6fc:	f7f3 feec 	bl	80004d8 <__aeabi_dmul>
 800c700:	f7f4 f99a 	bl	8000a38 <__aeabi_d2iz>
 800c704:	f7f3 fe7e 	bl	8000404 <__aeabi_i2d>
 800c708:	4602      	mov	r2, r0
 800c70a:	460b      	mov	r3, r1
 800c70c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c710:	2200      	movs	r2, #0
 800c712:	4b38      	ldr	r3, [pc, #224]	; (800c7f4 <__kernel_rem_pio2+0x2f8>)
 800c714:	f7f3 fee0 	bl	80004d8 <__aeabi_dmul>
 800c718:	4602      	mov	r2, r0
 800c71a:	460b      	mov	r3, r1
 800c71c:	4620      	mov	r0, r4
 800c71e:	4629      	mov	r1, r5
 800c720:	f7f3 fd22 	bl	8000168 <__aeabi_dsub>
 800c724:	f7f4 f988 	bl	8000a38 <__aeabi_d2iz>
 800c728:	9b00      	ldr	r3, [sp, #0]
 800c72a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800c72e:	f843 0b04 	str.w	r0, [r3], #4
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c738:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c73c:	f7f3 fd16 	bl	800016c <__adddf3>
 800c740:	4604      	mov	r4, r0
 800c742:	460d      	mov	r5, r1
 800c744:	e75f      	b.n	800c606 <__kernel_rem_pio2+0x10a>
 800c746:	d105      	bne.n	800c754 <__kernel_rem_pio2+0x258>
 800c748:	1e73      	subs	r3, r6, #1
 800c74a:	aa0c      	add	r2, sp, #48	; 0x30
 800c74c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c750:	15c3      	asrs	r3, r0, #23
 800c752:	e79b      	b.n	800c68c <__kernel_rem_pio2+0x190>
 800c754:	2200      	movs	r2, #0
 800c756:	4b28      	ldr	r3, [pc, #160]	; (800c7f8 <__kernel_rem_pio2+0x2fc>)
 800c758:	f7f4 f944 	bl	80009e4 <__aeabi_dcmpge>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d13e      	bne.n	800c7de <__kernel_rem_pio2+0x2e2>
 800c760:	9000      	str	r0, [sp, #0]
 800c762:	2200      	movs	r2, #0
 800c764:	2300      	movs	r3, #0
 800c766:	4640      	mov	r0, r8
 800c768:	4649      	mov	r1, r9
 800c76a:	f7f4 f91d 	bl	80009a8 <__aeabi_dcmpeq>
 800c76e:	2800      	cmp	r0, #0
 800c770:	f000 80b1 	beq.w	800c8d6 <__kernel_rem_pio2+0x3da>
 800c774:	1e74      	subs	r4, r6, #1
 800c776:	4623      	mov	r3, r4
 800c778:	2200      	movs	r2, #0
 800c77a:	9902      	ldr	r1, [sp, #8]
 800c77c:	428b      	cmp	r3, r1
 800c77e:	da5f      	bge.n	800c840 <__kernel_rem_pio2+0x344>
 800c780:	2a00      	cmp	r2, #0
 800c782:	d074      	beq.n	800c86e <__kernel_rem_pio2+0x372>
 800c784:	ab0c      	add	r3, sp, #48	; 0x30
 800c786:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c78a:	f1ab 0b18 	sub.w	fp, fp, #24
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 809f 	beq.w	800c8d2 <__kernel_rem_pio2+0x3d6>
 800c794:	465a      	mov	r2, fp
 800c796:	2000      	movs	r0, #0
 800c798:	4914      	ldr	r1, [pc, #80]	; (800c7ec <__kernel_rem_pio2+0x2f0>)
 800c79a:	f000 faad 	bl	800ccf8 <scalbn>
 800c79e:	46a2      	mov	sl, r4
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	f04f 0800 	mov.w	r8, #0
 800c7a8:	ab70      	add	r3, sp, #448	; 0x1c0
 800c7aa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c7f0 <__kernel_rem_pio2+0x2f4>
 800c7ae:	00e5      	lsls	r5, r4, #3
 800c7b0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c7b4:	f1ba 0f00 	cmp.w	sl, #0
 800c7b8:	f280 80c3 	bge.w	800c942 <__kernel_rem_pio2+0x446>
 800c7bc:	4626      	mov	r6, r4
 800c7be:	2e00      	cmp	r6, #0
 800c7c0:	f2c0 80f5 	blt.w	800c9ae <__kernel_rem_pio2+0x4b2>
 800c7c4:	4b0d      	ldr	r3, [pc, #52]	; (800c7fc <__kernel_rem_pio2+0x300>)
 800c7c6:	f04f 0a00 	mov.w	sl, #0
 800c7ca:	9307      	str	r3, [sp, #28]
 800c7cc:	ab70      	add	r3, sp, #448	; 0x1c0
 800c7ce:	f04f 0b00 	mov.w	fp, #0
 800c7d2:	f04f 0800 	mov.w	r8, #0
 800c7d6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c7da:	1ba7      	subs	r7, r4, r6
 800c7dc:	e0db      	b.n	800c996 <__kernel_rem_pio2+0x49a>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	e757      	b.n	800c694 <__kernel_rem_pio2+0x198>
 800c7e4:	0800d0b0 	.word	0x0800d0b0
 800c7e8:	40200000 	.word	0x40200000
 800c7ec:	3ff00000 	.word	0x3ff00000
 800c7f0:	3e700000 	.word	0x3e700000
 800c7f4:	41700000 	.word	0x41700000
 800c7f8:	3fe00000 	.word	0x3fe00000
 800c7fc:	0800d070 	.word	0x0800d070
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	b944      	cbnz	r4, 800c816 <__kernel_rem_pio2+0x31a>
 800c804:	b11b      	cbz	r3, 800c80e <__kernel_rem_pio2+0x312>
 800c806:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	2301      	movs	r3, #1
 800c80e:	461c      	mov	r4, r3
 800c810:	3201      	adds	r2, #1
 800c812:	3704      	adds	r7, #4
 800c814:	e745      	b.n	800c6a2 <__kernel_rem_pio2+0x1a6>
 800c816:	1acb      	subs	r3, r1, r3
 800c818:	603b      	str	r3, [r7, #0]
 800c81a:	4623      	mov	r3, r4
 800c81c:	e7f7      	b.n	800c80e <__kernel_rem_pio2+0x312>
 800c81e:	1e72      	subs	r2, r6, #1
 800c820:	ab0c      	add	r3, sp, #48	; 0x30
 800c822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c826:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c82a:	a90c      	add	r1, sp, #48	; 0x30
 800c82c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c830:	e745      	b.n	800c6be <__kernel_rem_pio2+0x1c2>
 800c832:	1e72      	subs	r2, r6, #1
 800c834:	ab0c      	add	r3, sp, #48	; 0x30
 800c836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c83e:	e7f4      	b.n	800c82a <__kernel_rem_pio2+0x32e>
 800c840:	a90c      	add	r1, sp, #48	; 0x30
 800c842:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c846:	3b01      	subs	r3, #1
 800c848:	430a      	orrs	r2, r1
 800c84a:	e796      	b.n	800c77a <__kernel_rem_pio2+0x27e>
 800c84c:	3401      	adds	r4, #1
 800c84e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c852:	2a00      	cmp	r2, #0
 800c854:	d0fa      	beq.n	800c84c <__kernel_rem_pio2+0x350>
 800c856:	9b08      	ldr	r3, [sp, #32]
 800c858:	f106 0801 	add.w	r8, r6, #1
 800c85c:	18f5      	adds	r5, r6, r3
 800c85e:	ab20      	add	r3, sp, #128	; 0x80
 800c860:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c864:	4434      	add	r4, r6
 800c866:	4544      	cmp	r4, r8
 800c868:	da04      	bge.n	800c874 <__kernel_rem_pio2+0x378>
 800c86a:	4626      	mov	r6, r4
 800c86c:	e6bf      	b.n	800c5ee <__kernel_rem_pio2+0xf2>
 800c86e:	2401      	movs	r4, #1
 800c870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c872:	e7ec      	b.n	800c84e <__kernel_rem_pio2+0x352>
 800c874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c876:	f04f 0900 	mov.w	r9, #0
 800c87a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c87e:	f7f3 fdc1 	bl	8000404 <__aeabi_i2d>
 800c882:	2600      	movs	r6, #0
 800c884:	2700      	movs	r7, #0
 800c886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c888:	e9c5 0100 	strd	r0, r1, [r5]
 800c88c:	3b08      	subs	r3, #8
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	9504      	str	r5, [sp, #16]
 800c892:	9b07      	ldr	r3, [sp, #28]
 800c894:	4599      	cmp	r9, r3
 800c896:	dd05      	ble.n	800c8a4 <__kernel_rem_pio2+0x3a8>
 800c898:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c89c:	f108 0801 	add.w	r8, r8, #1
 800c8a0:	3508      	adds	r5, #8
 800c8a2:	e7e0      	b.n	800c866 <__kernel_rem_pio2+0x36a>
 800c8a4:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c8a8:	9900      	ldr	r1, [sp, #0]
 800c8aa:	f109 0901 	add.w	r9, r9, #1
 800c8ae:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c8b2:	9100      	str	r1, [sp, #0]
 800c8b4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c8b8:	f8cd c010 	str.w	ip, [sp, #16]
 800c8bc:	f7f3 fe0c 	bl	80004d8 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	4639      	mov	r1, r7
 800c8c8:	f7f3 fc50 	bl	800016c <__adddf3>
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	e7df      	b.n	800c892 <__kernel_rem_pio2+0x396>
 800c8d2:	3c01      	subs	r4, #1
 800c8d4:	e756      	b.n	800c784 <__kernel_rem_pio2+0x288>
 800c8d6:	f1cb 0200 	rsb	r2, fp, #0
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f000 fa0b 	bl	800ccf8 <scalbn>
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	4ba4      	ldr	r3, [pc, #656]	; (800cb78 <__kernel_rem_pio2+0x67c>)
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	f7f4 f87b 	bl	80009e4 <__aeabi_dcmpge>
 800c8ee:	b1f8      	cbz	r0, 800c930 <__kernel_rem_pio2+0x434>
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	4ba2      	ldr	r3, [pc, #648]	; (800cb7c <__kernel_rem_pio2+0x680>)
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	f7f3 fdee 	bl	80004d8 <__aeabi_dmul>
 800c8fc:	f7f4 f89c 	bl	8000a38 <__aeabi_d2iz>
 800c900:	4607      	mov	r7, r0
 800c902:	f7f3 fd7f 	bl	8000404 <__aeabi_i2d>
 800c906:	2200      	movs	r2, #0
 800c908:	4b9b      	ldr	r3, [pc, #620]	; (800cb78 <__kernel_rem_pio2+0x67c>)
 800c90a:	f7f3 fde5 	bl	80004d8 <__aeabi_dmul>
 800c90e:	460b      	mov	r3, r1
 800c910:	4602      	mov	r2, r0
 800c912:	4629      	mov	r1, r5
 800c914:	4620      	mov	r0, r4
 800c916:	f7f3 fc27 	bl	8000168 <__aeabi_dsub>
 800c91a:	f7f4 f88d 	bl	8000a38 <__aeabi_d2iz>
 800c91e:	1c74      	adds	r4, r6, #1
 800c920:	ab0c      	add	r3, sp, #48	; 0x30
 800c922:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c926:	f10b 0b18 	add.w	fp, fp, #24
 800c92a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c92e:	e731      	b.n	800c794 <__kernel_rem_pio2+0x298>
 800c930:	4620      	mov	r0, r4
 800c932:	4629      	mov	r1, r5
 800c934:	f7f4 f880 	bl	8000a38 <__aeabi_d2iz>
 800c938:	ab0c      	add	r3, sp, #48	; 0x30
 800c93a:	4634      	mov	r4, r6
 800c93c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c940:	e728      	b.n	800c794 <__kernel_rem_pio2+0x298>
 800c942:	ab0c      	add	r3, sp, #48	; 0x30
 800c944:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c948:	f7f3 fd5c 	bl	8000404 <__aeabi_i2d>
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	f7f3 fdc2 	bl	80004d8 <__aeabi_dmul>
 800c954:	4642      	mov	r2, r8
 800c956:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c95a:	464b      	mov	r3, r9
 800c95c:	4630      	mov	r0, r6
 800c95e:	4639      	mov	r1, r7
 800c960:	f7f3 fdba 	bl	80004d8 <__aeabi_dmul>
 800c964:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c968:	4606      	mov	r6, r0
 800c96a:	460f      	mov	r7, r1
 800c96c:	e722      	b.n	800c7b4 <__kernel_rem_pio2+0x2b8>
 800c96e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c972:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c976:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c97a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c97e:	f7f3 fdab 	bl	80004d8 <__aeabi_dmul>
 800c982:	4602      	mov	r2, r0
 800c984:	460b      	mov	r3, r1
 800c986:	4650      	mov	r0, sl
 800c988:	4659      	mov	r1, fp
 800c98a:	f7f3 fbef 	bl	800016c <__adddf3>
 800c98e:	4682      	mov	sl, r0
 800c990:	468b      	mov	fp, r1
 800c992:	f108 0801 	add.w	r8, r8, #1
 800c996:	9b02      	ldr	r3, [sp, #8]
 800c998:	4598      	cmp	r8, r3
 800c99a:	dc01      	bgt.n	800c9a0 <__kernel_rem_pio2+0x4a4>
 800c99c:	45b8      	cmp	r8, r7
 800c99e:	dde6      	ble.n	800c96e <__kernel_rem_pio2+0x472>
 800c9a0:	ab48      	add	r3, sp, #288	; 0x120
 800c9a2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c9a6:	e9c7 ab00 	strd	sl, fp, [r7]
 800c9aa:	3e01      	subs	r6, #1
 800c9ac:	e707      	b.n	800c7be <__kernel_rem_pio2+0x2c2>
 800c9ae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c9b0:	2b02      	cmp	r3, #2
 800c9b2:	dc09      	bgt.n	800c9c8 <__kernel_rem_pio2+0x4cc>
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	dc32      	bgt.n	800ca1e <__kernel_rem_pio2+0x522>
 800c9b8:	d05a      	beq.n	800ca70 <__kernel_rem_pio2+0x574>
 800c9ba:	9b04      	ldr	r3, [sp, #16]
 800c9bc:	f003 0007 	and.w	r0, r3, #7
 800c9c0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9c8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c9ca:	2b03      	cmp	r3, #3
 800c9cc:	d1f5      	bne.n	800c9ba <__kernel_rem_pio2+0x4be>
 800c9ce:	ab48      	add	r3, sp, #288	; 0x120
 800c9d0:	441d      	add	r5, r3
 800c9d2:	46aa      	mov	sl, r5
 800c9d4:	46a3      	mov	fp, r4
 800c9d6:	f1bb 0f00 	cmp.w	fp, #0
 800c9da:	dc76      	bgt.n	800caca <__kernel_rem_pio2+0x5ce>
 800c9dc:	46aa      	mov	sl, r5
 800c9de:	46a3      	mov	fp, r4
 800c9e0:	f1bb 0f01 	cmp.w	fp, #1
 800c9e4:	f300 8090 	bgt.w	800cb08 <__kernel_rem_pio2+0x60c>
 800c9e8:	2700      	movs	r7, #0
 800c9ea:	463e      	mov	r6, r7
 800c9ec:	2c01      	cmp	r4, #1
 800c9ee:	f300 80aa 	bgt.w	800cb46 <__kernel_rem_pio2+0x64a>
 800c9f2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c9f6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c9fa:	9b00      	ldr	r3, [sp, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f040 80ac 	bne.w	800cb5a <__kernel_rem_pio2+0x65e>
 800ca02:	4603      	mov	r3, r0
 800ca04:	462a      	mov	r2, r5
 800ca06:	9806      	ldr	r0, [sp, #24]
 800ca08:	e9c0 2300 	strd	r2, r3, [r0]
 800ca0c:	4622      	mov	r2, r4
 800ca0e:	460b      	mov	r3, r1
 800ca10:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ca14:	463a      	mov	r2, r7
 800ca16:	4633      	mov	r3, r6
 800ca18:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ca1c:	e7cd      	b.n	800c9ba <__kernel_rem_pio2+0x4be>
 800ca1e:	2000      	movs	r0, #0
 800ca20:	46a0      	mov	r8, r4
 800ca22:	4601      	mov	r1, r0
 800ca24:	ab48      	add	r3, sp, #288	; 0x120
 800ca26:	441d      	add	r5, r3
 800ca28:	f1b8 0f00 	cmp.w	r8, #0
 800ca2c:	da3a      	bge.n	800caa4 <__kernel_rem_pio2+0x5a8>
 800ca2e:	9b00      	ldr	r3, [sp, #0]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d03e      	beq.n	800cab2 <__kernel_rem_pio2+0x5b6>
 800ca34:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800ca38:	4602      	mov	r2, r0
 800ca3a:	462b      	mov	r3, r5
 800ca3c:	9d06      	ldr	r5, [sp, #24]
 800ca3e:	2601      	movs	r6, #1
 800ca40:	e9c5 2300 	strd	r2, r3, [r5]
 800ca44:	460b      	mov	r3, r1
 800ca46:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800ca4a:	f7f3 fb8d 	bl	8000168 <__aeabi_dsub>
 800ca4e:	4684      	mov	ip, r0
 800ca50:	460f      	mov	r7, r1
 800ca52:	ad48      	add	r5, sp, #288	; 0x120
 800ca54:	42b4      	cmp	r4, r6
 800ca56:	f105 0508 	add.w	r5, r5, #8
 800ca5a:	da2c      	bge.n	800cab6 <__kernel_rem_pio2+0x5ba>
 800ca5c:	9b00      	ldr	r3, [sp, #0]
 800ca5e:	b10b      	cbz	r3, 800ca64 <__kernel_rem_pio2+0x568>
 800ca60:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ca64:	4662      	mov	r2, ip
 800ca66:	463b      	mov	r3, r7
 800ca68:	9906      	ldr	r1, [sp, #24]
 800ca6a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800ca6e:	e7a4      	b.n	800c9ba <__kernel_rem_pio2+0x4be>
 800ca70:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800ca72:	ab48      	add	r3, sp, #288	; 0x120
 800ca74:	4637      	mov	r7, r6
 800ca76:	441d      	add	r5, r3
 800ca78:	2c00      	cmp	r4, #0
 800ca7a:	da09      	bge.n	800ca90 <__kernel_rem_pio2+0x594>
 800ca7c:	9b00      	ldr	r3, [sp, #0]
 800ca7e:	b10b      	cbz	r3, 800ca84 <__kernel_rem_pio2+0x588>
 800ca80:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800ca84:	4632      	mov	r2, r6
 800ca86:	463b      	mov	r3, r7
 800ca88:	9906      	ldr	r1, [sp, #24]
 800ca8a:	e9c1 2300 	strd	r2, r3, [r1]
 800ca8e:	e794      	b.n	800c9ba <__kernel_rem_pio2+0x4be>
 800ca90:	4630      	mov	r0, r6
 800ca92:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f3 fb68 	bl	800016c <__adddf3>
 800ca9c:	3c01      	subs	r4, #1
 800ca9e:	4606      	mov	r6, r0
 800caa0:	460f      	mov	r7, r1
 800caa2:	e7e9      	b.n	800ca78 <__kernel_rem_pio2+0x57c>
 800caa4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800caa8:	f7f3 fb60 	bl	800016c <__adddf3>
 800caac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800cab0:	e7ba      	b.n	800ca28 <__kernel_rem_pio2+0x52c>
 800cab2:	460d      	mov	r5, r1
 800cab4:	e7c0      	b.n	800ca38 <__kernel_rem_pio2+0x53c>
 800cab6:	4660      	mov	r0, ip
 800cab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cabc:	4639      	mov	r1, r7
 800cabe:	f7f3 fb55 	bl	800016c <__adddf3>
 800cac2:	3601      	adds	r6, #1
 800cac4:	4684      	mov	ip, r0
 800cac6:	460f      	mov	r7, r1
 800cac8:	e7c4      	b.n	800ca54 <__kernel_rem_pio2+0x558>
 800caca:	e9da 6700 	ldrd	r6, r7, [sl]
 800cace:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800cad2:	4632      	mov	r2, r6
 800cad4:	463b      	mov	r3, r7
 800cad6:	4640      	mov	r0, r8
 800cad8:	4649      	mov	r1, r9
 800cada:	f7f3 fb47 	bl	800016c <__adddf3>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cae6:	4640      	mov	r0, r8
 800cae8:	4649      	mov	r1, r9
 800caea:	f7f3 fb3d 	bl	8000168 <__aeabi_dsub>
 800caee:	4632      	mov	r2, r6
 800caf0:	463b      	mov	r3, r7
 800caf2:	f7f3 fb3b 	bl	800016c <__adddf3>
 800caf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cafa:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cafe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cb02:	e9ca 2300 	strd	r2, r3, [sl]
 800cb06:	e766      	b.n	800c9d6 <__kernel_rem_pio2+0x4da>
 800cb08:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb0c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800cb10:	4642      	mov	r2, r8
 800cb12:	464b      	mov	r3, r9
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7f3 fb28 	bl	800016c <__adddf3>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	460b      	mov	r3, r1
 800cb20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb24:	4630      	mov	r0, r6
 800cb26:	4639      	mov	r1, r7
 800cb28:	f7f3 fb1e 	bl	8000168 <__aeabi_dsub>
 800cb2c:	4642      	mov	r2, r8
 800cb2e:	464b      	mov	r3, r9
 800cb30:	f7f3 fb1c 	bl	800016c <__adddf3>
 800cb34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb38:	e86a 0102 	strd	r0, r1, [sl], #-8
 800cb3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cb40:	e9ca 2300 	strd	r2, r3, [sl]
 800cb44:	e74c      	b.n	800c9e0 <__kernel_rem_pio2+0x4e4>
 800cb46:	4638      	mov	r0, r7
 800cb48:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	f7f3 fb0d 	bl	800016c <__adddf3>
 800cb52:	3c01      	subs	r4, #1
 800cb54:	4607      	mov	r7, r0
 800cb56:	460e      	mov	r6, r1
 800cb58:	e748      	b.n	800c9ec <__kernel_rem_pio2+0x4f0>
 800cb5a:	9b06      	ldr	r3, [sp, #24]
 800cb5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800cb60:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cb64:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800cb68:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800cb6c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800cb70:	601d      	str	r5, [r3, #0]
 800cb72:	615e      	str	r6, [r3, #20]
 800cb74:	e721      	b.n	800c9ba <__kernel_rem_pio2+0x4be>
 800cb76:	bf00      	nop
 800cb78:	41700000 	.word	0x41700000
 800cb7c:	3e700000 	.word	0x3e700000

0800cb80 <__kernel_sin>:
 800cb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb84:	b086      	sub	sp, #24
 800cb86:	e9cd 2300 	strd	r2, r3, [sp]
 800cb8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cb8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cb92:	4682      	mov	sl, r0
 800cb94:	460c      	mov	r4, r1
 800cb96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800cb98:	da03      	bge.n	800cba2 <__kernel_sin+0x22>
 800cb9a:	f7f3 ff4d 	bl	8000a38 <__aeabi_d2iz>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d050      	beq.n	800cc44 <__kernel_sin+0xc4>
 800cba2:	4652      	mov	r2, sl
 800cba4:	4623      	mov	r3, r4
 800cba6:	4650      	mov	r0, sl
 800cba8:	4621      	mov	r1, r4
 800cbaa:	f7f3 fc95 	bl	80004d8 <__aeabi_dmul>
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460f      	mov	r7, r1
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4650      	mov	r0, sl
 800cbb8:	4621      	mov	r1, r4
 800cbba:	f7f3 fc8d 	bl	80004d8 <__aeabi_dmul>
 800cbbe:	a33e      	add	r3, pc, #248	; (adr r3, 800ccb8 <__kernel_sin+0x138>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	4680      	mov	r8, r0
 800cbc6:	4689      	mov	r9, r1
 800cbc8:	4630      	mov	r0, r6
 800cbca:	4639      	mov	r1, r7
 800cbcc:	f7f3 fc84 	bl	80004d8 <__aeabi_dmul>
 800cbd0:	a33b      	add	r3, pc, #236	; (adr r3, 800ccc0 <__kernel_sin+0x140>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fac7 	bl	8000168 <__aeabi_dsub>
 800cbda:	4632      	mov	r2, r6
 800cbdc:	463b      	mov	r3, r7
 800cbde:	f7f3 fc7b 	bl	80004d8 <__aeabi_dmul>
 800cbe2:	a339      	add	r3, pc, #228	; (adr r3, 800ccc8 <__kernel_sin+0x148>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 fac0 	bl	800016c <__adddf3>
 800cbec:	4632      	mov	r2, r6
 800cbee:	463b      	mov	r3, r7
 800cbf0:	f7f3 fc72 	bl	80004d8 <__aeabi_dmul>
 800cbf4:	a336      	add	r3, pc, #216	; (adr r3, 800ccd0 <__kernel_sin+0x150>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	f7f3 fab5 	bl	8000168 <__aeabi_dsub>
 800cbfe:	4632      	mov	r2, r6
 800cc00:	463b      	mov	r3, r7
 800cc02:	f7f3 fc69 	bl	80004d8 <__aeabi_dmul>
 800cc06:	a334      	add	r3, pc, #208	; (adr r3, 800ccd8 <__kernel_sin+0x158>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	f7f3 faae 	bl	800016c <__adddf3>
 800cc10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc14:	b9dd      	cbnz	r5, 800cc4e <__kernel_sin+0xce>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	4639      	mov	r1, r7
 800cc1e:	f7f3 fc5b 	bl	80004d8 <__aeabi_dmul>
 800cc22:	a32f      	add	r3, pc, #188	; (adr r3, 800cce0 <__kernel_sin+0x160>)
 800cc24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc28:	f7f3 fa9e 	bl	8000168 <__aeabi_dsub>
 800cc2c:	4642      	mov	r2, r8
 800cc2e:	464b      	mov	r3, r9
 800cc30:	f7f3 fc52 	bl	80004d8 <__aeabi_dmul>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	4650      	mov	r0, sl
 800cc3a:	4621      	mov	r1, r4
 800cc3c:	f7f3 fa96 	bl	800016c <__adddf3>
 800cc40:	4682      	mov	sl, r0
 800cc42:	460c      	mov	r4, r1
 800cc44:	4650      	mov	r0, sl
 800cc46:	4621      	mov	r1, r4
 800cc48:	b006      	add	sp, #24
 800cc4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4e:	2200      	movs	r2, #0
 800cc50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cc54:	4b24      	ldr	r3, [pc, #144]	; (800cce8 <__kernel_sin+0x168>)
 800cc56:	f7f3 fc3f 	bl	80004d8 <__aeabi_dmul>
 800cc5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cc62:	4640      	mov	r0, r8
 800cc64:	4649      	mov	r1, r9
 800cc66:	f7f3 fc37 	bl	80004d8 <__aeabi_dmul>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc72:	f7f3 fa79 	bl	8000168 <__aeabi_dsub>
 800cc76:	4632      	mov	r2, r6
 800cc78:	463b      	mov	r3, r7
 800cc7a:	f7f3 fc2d 	bl	80004d8 <__aeabi_dmul>
 800cc7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc82:	f7f3 fa71 	bl	8000168 <__aeabi_dsub>
 800cc86:	a316      	add	r3, pc, #88	; (adr r3, 800cce0 <__kernel_sin+0x160>)
 800cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	460f      	mov	r7, r1
 800cc90:	4640      	mov	r0, r8
 800cc92:	4649      	mov	r1, r9
 800cc94:	f7f3 fc20 	bl	80004d8 <__aeabi_dmul>
 800cc98:	4602      	mov	r2, r0
 800cc9a:	460b      	mov	r3, r1
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	4639      	mov	r1, r7
 800cca0:	f7f3 fa64 	bl	800016c <__adddf3>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4650      	mov	r0, sl
 800ccaa:	4621      	mov	r1, r4
 800ccac:	f7f3 fa5c 	bl	8000168 <__aeabi_dsub>
 800ccb0:	e7c6      	b.n	800cc40 <__kernel_sin+0xc0>
 800ccb2:	bf00      	nop
 800ccb4:	f3af 8000 	nop.w
 800ccb8:	5acfd57c 	.word	0x5acfd57c
 800ccbc:	3de5d93a 	.word	0x3de5d93a
 800ccc0:	8a2b9ceb 	.word	0x8a2b9ceb
 800ccc4:	3e5ae5e6 	.word	0x3e5ae5e6
 800ccc8:	57b1fe7d 	.word	0x57b1fe7d
 800cccc:	3ec71de3 	.word	0x3ec71de3
 800ccd0:	19c161d5 	.word	0x19c161d5
 800ccd4:	3f2a01a0 	.word	0x3f2a01a0
 800ccd8:	1110f8a6 	.word	0x1110f8a6
 800ccdc:	3f811111 	.word	0x3f811111
 800cce0:	55555549 	.word	0x55555549
 800cce4:	3fc55555 	.word	0x3fc55555
 800cce8:	3fe00000 	.word	0x3fe00000

0800ccec <fabs>:
 800ccec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ccf0:	4770      	bx	lr
 800ccf2:	0000      	movs	r0, r0
 800ccf4:	0000      	movs	r0, r0
	...

0800ccf8 <scalbn>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800ccfe:	4604      	mov	r4, r0
 800cd00:	460d      	mov	r5, r1
 800cd02:	4617      	mov	r7, r2
 800cd04:	460b      	mov	r3, r1
 800cd06:	b996      	cbnz	r6, 800cd2e <scalbn+0x36>
 800cd08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cd0c:	4303      	orrs	r3, r0
 800cd0e:	d039      	beq.n	800cd84 <scalbn+0x8c>
 800cd10:	4b33      	ldr	r3, [pc, #204]	; (800cde0 <scalbn+0xe8>)
 800cd12:	2200      	movs	r2, #0
 800cd14:	f7f3 fbe0 	bl	80004d8 <__aeabi_dmul>
 800cd18:	4b32      	ldr	r3, [pc, #200]	; (800cde4 <scalbn+0xec>)
 800cd1a:	4604      	mov	r4, r0
 800cd1c:	429f      	cmp	r7, r3
 800cd1e:	460d      	mov	r5, r1
 800cd20:	da0f      	bge.n	800cd42 <scalbn+0x4a>
 800cd22:	a32b      	add	r3, pc, #172	; (adr r3, 800cdd0 <scalbn+0xd8>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fbd6 	bl	80004d8 <__aeabi_dmul>
 800cd2c:	e006      	b.n	800cd3c <scalbn+0x44>
 800cd2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800cd32:	4296      	cmp	r6, r2
 800cd34:	d10a      	bne.n	800cd4c <scalbn+0x54>
 800cd36:	4602      	mov	r2, r0
 800cd38:	f7f3 fa18 	bl	800016c <__adddf3>
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	460d      	mov	r5, r1
 800cd40:	e020      	b.n	800cd84 <scalbn+0x8c>
 800cd42:	460b      	mov	r3, r1
 800cd44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cd48:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800cd4c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800cd50:	19b9      	adds	r1, r7, r6
 800cd52:	4291      	cmp	r1, r2
 800cd54:	dd0e      	ble.n	800cd74 <scalbn+0x7c>
 800cd56:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800cd5a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800cd5e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800cd62:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800cd66:	4820      	ldr	r0, [pc, #128]	; (800cde8 <scalbn+0xf0>)
 800cd68:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800cd6c:	a31a      	add	r3, pc, #104	; (adr r3, 800cdd8 <scalbn+0xe0>)
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	e7d9      	b.n	800cd28 <scalbn+0x30>
 800cd74:	2900      	cmp	r1, #0
 800cd76:	dd08      	ble.n	800cd8a <scalbn+0x92>
 800cd78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cd7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cd80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cd84:	4620      	mov	r0, r4
 800cd86:	4629      	mov	r1, r5
 800cd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd8a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800cd8e:	da12      	bge.n	800cdb6 <scalbn+0xbe>
 800cd90:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cd94:	429f      	cmp	r7, r3
 800cd96:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800cd9a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800cd9e:	dcdc      	bgt.n	800cd5a <scalbn+0x62>
 800cda0:	a30b      	add	r3, pc, #44	; (adr r3, 800cdd0 <scalbn+0xd8>)
 800cda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800cdaa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800cdae:	480f      	ldr	r0, [pc, #60]	; (800cdec <scalbn+0xf4>)
 800cdb0:	f041 011f 	orr.w	r1, r1, #31
 800cdb4:	e7b8      	b.n	800cd28 <scalbn+0x30>
 800cdb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdba:	3136      	adds	r1, #54	; 0x36
 800cdbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	4629      	mov	r1, r5
 800cdc8:	2200      	movs	r2, #0
 800cdca:	4b09      	ldr	r3, [pc, #36]	; (800cdf0 <scalbn+0xf8>)
 800cdcc:	e7ac      	b.n	800cd28 <scalbn+0x30>
 800cdce:	bf00      	nop
 800cdd0:	c2f8f359 	.word	0xc2f8f359
 800cdd4:	01a56e1f 	.word	0x01a56e1f
 800cdd8:	8800759c 	.word	0x8800759c
 800cddc:	7e37e43c 	.word	0x7e37e43c
 800cde0:	43500000 	.word	0x43500000
 800cde4:	ffff3cb0 	.word	0xffff3cb0
 800cde8:	8800759c 	.word	0x8800759c
 800cdec:	c2f8f359 	.word	0xc2f8f359
 800cdf0:	3c900000 	.word	0x3c900000

0800cdf4 <_init>:
 800cdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdf6:	bf00      	nop
 800cdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdfa:	bc08      	pop	{r3}
 800cdfc:	469e      	mov	lr, r3
 800cdfe:	4770      	bx	lr

0800ce00 <_fini>:
 800ce00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce02:	bf00      	nop
 800ce04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce06:	bc08      	pop	{r3}
 800ce08:	469e      	mov	lr, r3
 800ce0a:	4770      	bx	lr
