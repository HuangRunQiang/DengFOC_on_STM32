
closedloop_position_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800cc28  0800cc28  0001cc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cedc  0800cedc  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800cedc  0800cedc  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cedc  0800cedc  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cedc  0800cedc  0001cedc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cee0  0800cee0  0001cee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800cee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  200001fc  0800d0e0  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  0800d0e0  00021548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014508  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003421  00000000  00000000  0003472d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00037b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00038d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b05d  00000000  00000000  00039e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016210  00000000  00000000  00054e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8d3  00000000  00000000  0006b085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa958  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  000fa9a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cc0c 	.word	0x0800cc0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800cc0c 	.word	0x0800cc0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f001 fbb6 	bl	800291c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 fdc4 	bl	8004d48 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f004 f89e 	bl	8005304 <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f001 fba1 	bl	800291c <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f001 fb97 	bl	800291c <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f003 fede 	bl	8004fc0 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f004 f87c 	bl	8005304 <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f001 fb7f 	bl	800291c <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0000      	movs	r0, r0
	...

08001240 <_normalizeAngle>:
//    u = tms - SysTick->VAL;
//  }
//  return (m * 1000 + (u * 1000) / tms);
//}

float _normalizeAngle(float angle){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f8ed 	bl	8000428 <__aeabi_f2d>
 800124e:	a316      	add	r3, pc, #88	; (adr r3, 80012a8 <_normalizeAngle+0x68>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f009 ffc4 	bl	800b1e0 <fmod>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc12 	bl	8000a88 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff ff1b 	bl	80010a8 <__aeabi_fcmpge>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_normalizeAngle+0x3c>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	e00e      	b.n	800129a <_normalizeAngle+0x5a>
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff f8d3 	bl	8000428 <__aeabi_f2d>
 8001282:	a309      	add	r3, pc, #36	; (adr r3, 80012a8 <_normalizeAngle+0x68>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7fe ff70 	bl	800016c <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbf8 	bl	8000a88 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	54442d18 	.word	0x54442d18
 80012ac:	401921fb 	.word	0x401921fb

080012b0 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  return _normalizeAngle(((float)(dir * pole_pairs)*shaft_angle)-zero_electric_angle);
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <_electricalAngle+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fce9 	bl	8000c9c <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd38 	bl	8000d44 <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_electricalAngle+0x4c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff fc26 	bl	8000b30 <__aeabi_fsub>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffaa 	bl	8001240 <_normalizeAngle>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000018 	.word	0x20000018
 80012fc:	20000334 	.word	0x20000334

08001300 <setPwm>:

void setPwm(float Ua, float Ub, float Uc) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 800130c:	f04f 0100 	mov.w	r1, #0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff feb5 	bl	8001080 <__aeabi_fcmplt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <setPwm+0x22>
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e00c      	b.n	800133c <setPwm+0x3c>
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <setPwm+0x244>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff fec7 	bl	80010bc <__aeabi_fcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <setPwm+0x3a>
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <setPwm+0x244>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	e000      	b.n	800133c <setPwm+0x3c>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f7ff fe9c 	bl	8001080 <__aeabi_fcmplt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <setPwm+0x54>
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e00c      	b.n	800136e <setPwm+0x6e>
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <setPwm+0x244>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f7ff feae 	bl	80010bc <__aeabi_fcmpgt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <setPwm+0x6c>
 8001366:	4b77      	ldr	r3, [pc, #476]	; (8001544 <setPwm+0x244>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e000      	b.n	800136e <setPwm+0x6e>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fe83 	bl	8001080 <__aeabi_fcmplt>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <setPwm+0x86>
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e00c      	b.n	80013a0 <setPwm+0xa0>
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <setPwm+0x244>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fe95 	bl	80010bc <__aeabi_fcmpgt>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <setPwm+0x9e>
 8001398:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <setPwm+0x244>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e000      	b.n	80013a0 <setPwm+0xa0>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 80013a2:	4b69      	ldr	r3, [pc, #420]	; (8001548 <setPwm+0x248>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff fd7f 	bl	8000eac <__aeabi_fdiv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe63 	bl	8001080 <__aeabi_fcmplt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <setPwm+0xc6>
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e018      	b.n	80013f8 <setPwm+0xf8>
 80013c6:	4b60      	ldr	r3, [pc, #384]	; (8001548 <setPwm+0x248>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff fd6d 	bl	8000eac <__aeabi_fdiv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe6f 	bl	80010bc <__aeabi_fcmpgt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <setPwm+0xea>
 80013e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013e8:	e006      	b.n	80013f8 <setPwm+0xf8>
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <setPwm+0x248>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fd5b 	bl	8000eac <__aeabi_fdiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a54      	ldr	r2, [pc, #336]	; (800154c <setPwm+0x24c>)
 80013fa:	6013      	str	r3, [r2, #0]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 80013fc:	4b52      	ldr	r3, [pc, #328]	; (8001548 <setPwm+0x248>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	68b8      	ldr	r0, [r7, #8]
 8001404:	f7ff fd52 	bl	8000eac <__aeabi_fdiv>
 8001408:	4603      	mov	r3, r0
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe36 	bl	8001080 <__aeabi_fcmplt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <setPwm+0x120>
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e018      	b.n	8001452 <setPwm+0x152>
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <setPwm+0x248>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f7ff fd40 	bl	8000eac <__aeabi_fdiv>
 800142c:	4603      	mov	r3, r0
 800142e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe42 	bl	80010bc <__aeabi_fcmpgt>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <setPwm+0x144>
 800143e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001442:	e006      	b.n	8001452 <setPwm+0x152>
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <setPwm+0x248>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f7ff fd2e 	bl	8000eac <__aeabi_fdiv>
 8001450:	4603      	mov	r3, r0
 8001452:	4a3f      	ldr	r2, [pc, #252]	; (8001550 <setPwm+0x250>)
 8001454:	6013      	str	r3, [r2, #0]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <setPwm+0x248>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fd25 	bl	8000eac <__aeabi_fdiv>
 8001462:	4603      	mov	r3, r0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe09 	bl	8001080 <__aeabi_fcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <setPwm+0x17a>
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e018      	b.n	80014ac <setPwm+0x1ac>
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <setPwm+0x248>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fd13 	bl	8000eac <__aeabi_fdiv>
 8001486:	4603      	mov	r3, r0
 8001488:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe15 	bl	80010bc <__aeabi_fcmpgt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <setPwm+0x19e>
 8001498:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800149c:	e006      	b.n	80014ac <setPwm+0x1ac>
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <setPwm+0x248>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fd01 	bl	8000eac <__aeabi_fdiv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <setPwm+0x254>)
 80014ae:	6013      	str	r3, [r2, #0]

	//写入PWM到PWM 0 1 2 通道
	TIM1->CCR1 = (uint32_t) roundf(dc_a*period);
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <setPwm+0x258>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fbf1 	bl	8000c9c <__aeabi_i2f>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <setPwm+0x24c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fc3e 	bl	8000d44 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f009 fe62 	bl	800b194 <roundf>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4c22      	ldr	r4, [pc, #136]	; (800155c <setPwm+0x25c>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fdfb 	bl	80010d0 <__aeabi_f2uiz>
 80014da:	4603      	mov	r3, r0
 80014dc:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) roundf(dc_b*period);
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <setPwm+0x258>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fbda 	bl	8000c9c <__aeabi_i2f>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <setPwm+0x250>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f7ff fc27 	bl	8000d44 <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 fe4b 	bl	800b194 <roundf>
 80014fe:	4603      	mov	r3, r0
 8001500:	4c16      	ldr	r4, [pc, #88]	; (800155c <setPwm+0x25c>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fde4 	bl	80010d0 <__aeabi_f2uiz>
 8001508:	4603      	mov	r3, r0
 800150a:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) roundf(dc_c*period);
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <setPwm+0x258>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fbc3 	bl	8000c9c <__aeabi_i2f>
 8001516:	4602      	mov	r2, r0
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <setPwm+0x254>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fc10 	bl	8000d44 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4618      	mov	r0, r3
 8001528:	f009 fe34 	bl	800b194 <roundf>
 800152c:	4603      	mov	r3, r0
 800152e:	4c0b      	ldr	r4, [pc, #44]	; (800155c <setPwm+0x25c>)
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fdcd 	bl	80010d0 <__aeabi_f2uiz>
 8001536:	4603      	mov	r3, r0
 8001538:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004
 800154c:	2000034c 	.word	0x2000034c
 8001550:	20000350 	.word	0x20000350
 8001554:	20000354 	.word	0x20000354
 8001558:	20000008 	.word	0x20000008
 800155c:	40012c00 	.word	0x40012c00

08001560 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el) {
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <setPhaseVoltage+0x1e8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fade 	bl	8000b34 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe60 	bl	8001240 <_normalizeAngle>
 8001580:	6078      	str	r0, [r7, #4]
  // 帕克逆变换
  Ualpha =  -Uq*sin(angle_el);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff4d 	bl	8000428 <__aeabi_f2d>
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7fe ff48 	bl	8000428 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f009 fdb2 	bl	800b108 <sin>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe ff94 	bl	80004d8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fa66 	bl	8000a88 <__aeabi_d2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a63      	ldr	r2, [pc, #396]	; (800174c <setPhaseVoltage+0x1ec>)
 80015c0:	6013      	str	r3, [r2, #0]
  Ubeta =   Uq*cos(angle_el);
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7fe ff30 	bl	8000428 <__aeabi_f2d>
 80015c8:	4604      	mov	r4, r0
 80015ca:	460d      	mov	r5, r1
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7fe ff2b 	bl	8000428 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f009 fccf 	bl	800af7c <cos>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe ff77 	bl	80004d8 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa49 	bl	8000a88 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a55      	ldr	r2, [pc, #340]	; (8001750 <setPhaseVoltage+0x1f0>)
 80015fa:	6013      	str	r3, [r2, #0]

  // 克拉克逆变换
  Ua = Ualpha + voltage_power_supply/2;
 80015fc:	4b55      	ldr	r3, [pc, #340]	; (8001754 <setPhaseVoltage+0x1f4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc51 	bl	8000eac <__aeabi_fdiv>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b4f      	ldr	r3, [pc, #316]	; (800174c <setPhaseVoltage+0x1ec>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f7ff fa8d 	bl	8000b34 <__addsf3>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <setPhaseVoltage+0x1f8>)
 8001620:	601a      	str	r2, [r3, #0]
  Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <setPhaseVoltage+0x1f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fefe 	bl	8000428 <__aeabi_f2d>
 800162c:	a344      	add	r3, pc, #272	; (adr r3, 8001740 <setPhaseVoltage+0x1e0>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ff51 	bl	80004d8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <setPhaseVoltage+0x1ec>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fef0 	bl	8000428 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fd8a 	bl	8000168 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001664:	f7ff f862 	bl	800072c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <setPhaseVoltage+0x1f4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fc17 	bl	8000eac <__aeabi_fdiv>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fed1 	bl	8000428 <__aeabi_f2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe fd6d 	bl	800016c <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9f5 	bl	8000a88 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a2e      	ldr	r2, [pc, #184]	; (800175c <setPhaseVoltage+0x1fc>)
 80016a2:	6013      	str	r3, [r2, #0]
  Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <setPhaseVoltage+0x1ec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe febb 	bl	8000428 <__aeabi_f2d>
 80016b2:	4604      	mov	r4, r0
 80016b4:	460d      	mov	r5, r1
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <setPhaseVoltage+0x1f0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe feb4 	bl	8000428 <__aeabi_f2d>
 80016c0:	a31f      	add	r3, pc, #124	; (adr r3, 8001740 <setPhaseVoltage+0x1e0>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ff07 	bl	80004d8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fd49 	bl	8000168 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e6:	f7ff f821 	bl	800072c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4614      	mov	r4, r2
 80016f0:	461d      	mov	r5, r3
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <setPhaseVoltage+0x1f4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fbd6 	bl	8000eac <__aeabi_fdiv>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe90 	bl	8000428 <__aeabi_f2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fd2c 	bl	800016c <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f9b4 	bl	8000a88 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <setPhaseVoltage+0x200>)
 8001724:	6013      	str	r3, [r2, #0]
  setPwm(Ua,Ub,Uc);
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <setPhaseVoltage+0x1f8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <setPhaseVoltage+0x1fc>)
 800172c:	6811      	ldr	r1, [r2, #0]
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <setPhaseVoltage+0x200>)
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fde4 	bl	8001300 <setPwm>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	e8584caa 	.word	0xe8584caa
 8001744:	3ffbb67a 	.word	0x3ffbb67a
 8001748:	20000334 	.word	0x20000334
 800174c:	20000338 	.word	0x20000338
 8001750:	2000033c 	.word	0x2000033c
 8001754:	20000004 	.word	0x20000004
 8001758:	20000340 	.word	0x20000340
 800175c:	20000344 	.word	0x20000344
 8001760:	20000348 	.word	0x20000348
 8001764:	00000000 	.word	0x00000000

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f000 fdbd 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f8b5 	bl	80018e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 fa49 	bl	8001c0c <MX_GPIO_Init>
  MX_SPI1_Init();
 800177a:	f000 f90b 	bl	8001994 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800177e:	f008 ff61 	bl	800a644 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001782:	f000 f93f 	bl	8001a04 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001786:	f000 f9f5 	bl	8001b74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	4847      	ldr	r0, [pc, #284]	; (80018b0 <main+0x148>)
 8001792:	f001 f8c3 	bl	800291c <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001796:	2100      	movs	r1, #0
 8001798:	4846      	ldr	r0, [pc, #280]	; (80018b4 <main+0x14c>)
 800179a:	f003 ff61 	bl	8005660 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800179e:	2104      	movs	r1, #4
 80017a0:	4844      	ldr	r0, [pc, #272]	; (80018b4 <main+0x14c>)
 80017a2:	f003 ff5d 	bl	8005660 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017a6:	2108      	movs	r1, #8
 80017a8:	4842      	ldr	r0, [pc, #264]	; (80018b4 <main+0x14c>)
 80017aa:	f003 ff59 	bl	8005660 <HAL_TIM_PWM_Start>

   setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs));
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <main+0x150>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4619      	mov	r1, r3
 80017b4:	4841      	ldr	r0, [pc, #260]	; (80018bc <main+0x154>)
 80017b6:	f7ff fd7b 	bl	80012b0 <_electricalAngle>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	483f      	ldr	r0, [pc, #252]	; (80018c0 <main+0x158>)
 80017c4:	f7ff fecc 	bl	8001560 <setPhaseVoltage>
   HAL_Delay(3000);
 80017c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017cc:	f000 fdf0 	bl	80023b0 <HAL_Delay>
   uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 80017d0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80017d4:	2201      	movs	r2, #1
 80017d6:	4936      	ldr	r1, [pc, #216]	; (80018b0 <main+0x148>)
 80017d8:	483a      	ldr	r0, [pc, #232]	; (80018c4 <main+0x15c>)
 80017da:	f7ff fcbd 	bl	8001158 <read>
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
   zero_electric_angle=_electricalAngle(M_PI*read_raw/MAX_ANGLE_VALUE,pole_pairs);
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe0d 	bl	8000404 <__aeabi_i2d>
 80017ea:	a32f      	add	r3, pc, #188	; (adr r3, 80018a8 <main+0x140>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe fe72 	bl	80004d8 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b31      	ldr	r3, [pc, #196]	; (80018c8 <main+0x160>)
 8001802:	f7fe ff93 	bl	800072c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f93b 	bl	8000a88 <__aeabi_d2f>
 8001812:	4602      	mov	r2, r0
 8001814:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <main+0x150>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff fd48 	bl	80012b0 <_electricalAngle>
 8001820:	4603      	mov	r3, r0
 8001822:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <main+0x164>)
 8001824:	6013      	str	r3, [r2, #0]
   setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs));
 8001826:	4b24      	ldr	r3, [pc, #144]	; (80018b8 <main+0x150>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	4823      	ldr	r0, [pc, #140]	; (80018bc <main+0x154>)
 800182e:	f7ff fd3f 	bl	80012b0 <_electricalAngle>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f7ff fe8f 	bl	8001560 <setPhaseVoltage>
   sprintf(data, "zero_electric_angle: %i \n", (int) floor(zero_electric_angle/M_PI*180));
 8001842:	4b22      	ldr	r3, [pc, #136]	; (80018cc <main+0x164>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f7fe fdee 	bl	8000428 <__aeabi_f2d>
 800184c:	a316      	add	r3, pc, #88	; (adr r3, 80018a8 <main+0x140>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe ff6b 	bl	800072c <__aeabi_ddiv>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <main+0x168>)
 8001864:	f7fe fe38 	bl	80004d8 <__aeabi_dmul>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4610      	mov	r0, r2
 800186e:	4619      	mov	r1, r3
 8001870:	f009 fbca 	bl	800b008 <floor>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4610      	mov	r0, r2
 800187a:	4619      	mov	r1, r3
 800187c:	f7ff f8dc 	bl	8000a38 <__aeabi_d2iz>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	4913      	ldr	r1, [pc, #76]	; (80018d4 <main+0x16c>)
 8001886:	4814      	ldr	r0, [pc, #80]	; (80018d8 <main+0x170>)
 8001888:	f00a fd46 	bl	800c318 <siprintf>
   CDC_Transmit_FS((uint8_t*) data, strlen(data));
 800188c:	4812      	ldr	r0, [pc, #72]	; (80018d8 <main+0x170>)
 800188e:	f7fe fc5f 	bl	8000150 <strlen>
 8001892:	4603      	mov	r3, r0
 8001894:	b29b      	uxth	r3, r3
 8001896:	4619      	mov	r1, r3
 8001898:	480f      	ldr	r0, [pc, #60]	; (80018d8 <main+0x170>)
 800189a:	f008 ff91 	bl	800a7c0 <CDC_Transmit_FS>
   HAL_TIM_Base_Start_IT(&htim2);
 800189e:	480f      	ldr	r0, [pc, #60]	; (80018dc <main+0x174>)
 80018a0:	f003 fe34 	bl	800550c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <main+0x13c>
 80018a6:	bf00      	nop
 80018a8:	54442d18 	.word	0x54442d18
 80018ac:	400921fb 	.word	0x400921fb
 80018b0:	40010c00 	.word	0x40010c00
 80018b4:	20000270 	.word	0x20000270
 80018b8:	2000000c 	.word	0x2000000c
 80018bc:	4096cbe4 	.word	0x4096cbe4
 80018c0:	40400000 	.word	0x40400000
 80018c4:	20000218 	.word	0x20000218
 80018c8:	40c00000 	.word	0x40c00000
 80018cc:	20000334 	.word	0x20000334
 80018d0:	40668000 	.word	0x40668000
 80018d4:	0800cc28 	.word	0x0800cc28
 80018d8:	20000300 	.word	0x20000300
 80018dc:	200002b8 	.word	0x200002b8

080018e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b094      	sub	sp, #80	; 0x50
 80018e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ea:	2228      	movs	r2, #40	; 0x28
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f00a fd0a 	bl	800c308 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001910:	2301      	movs	r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800191a:	2300      	movs	r3, #0
 800191c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191e:	2301      	movs	r3, #1
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001922:	2302      	movs	r3, #2
 8001924:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001926:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800192a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800192c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001930:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001936:	4618      	mov	r0, r3
 8001938:	f002 fce4 	bl	8004304 <HAL_RCC_OscConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001942:	f000 fb57 	bl	8001ff4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001946:	230f      	movs	r3, #15
 8001948:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800194a:	2302      	movs	r3, #2
 800194c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001956:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800195c:	f107 0314 	add.w	r3, r7, #20
 8001960:	2102      	movs	r1, #2
 8001962:	4618      	mov	r0, r3
 8001964:	f002 ff50 	bl	8004808 <HAL_RCC_ClockConfig>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800196e:	f000 fb41 	bl	8001ff4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001972:	2310      	movs	r3, #16
 8001974:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f003 f8a9 	bl	8004ad4 <HAL_RCCEx_PeriphCLKConfig>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001988:	f000 fb34 	bl	8001ff4 <Error_Handler>
  }
}
 800198c:	bf00      	nop
 800198e:	3750      	adds	r7, #80	; 0x50
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}

08001994 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_SPI1_Init+0x68>)
 800199a:	4a19      	ldr	r2, [pc, #100]	; (8001a00 <MX_SPI1_Init+0x6c>)
 800199c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_SPI1_Init+0x68>)
 80019a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019a6:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_SPI1_Init+0x68>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MX_SPI1_Init+0x68>)
 80019ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_SPI1_Init+0x68>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_SPI1_Init+0x68>)
 80019bc:	2200      	movs	r2, #0
 80019be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_SPI1_Init+0x68>)
 80019c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_SPI1_Init+0x68>)
 80019ca:	2220      	movs	r2, #32
 80019cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_SPI1_Init+0x68>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_SPI1_Init+0x68>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_SPI1_Init+0x68>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_SPI1_Init+0x68>)
 80019e2:	220a      	movs	r2, #10
 80019e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_SPI1_Init+0x68>)
 80019e8:	f003 f92a 	bl	8004c40 <HAL_SPI_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80019f2:	f000 faff 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000218 	.word	0x20000218
 8001a00:	40013000 	.word	0x40013000

08001a04 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b096      	sub	sp, #88	; 0x58
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	611a      	str	r2, [r3, #16]
 8001a32:	615a      	str	r2, [r3, #20]
 8001a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2220      	movs	r2, #32
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00a fc63 	bl	800c308 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a42:	4b4a      	ldr	r3, [pc, #296]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a44:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <MX_TIM1_Init+0x16c>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a48:	4b48      	ldr	r3, [pc, #288]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001a54:	4b45      	ldr	r3, [pc, #276]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a56:	f640 125f 	movw	r2, #2399	; 0x95f
 8001a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b43      	ldr	r3, [pc, #268]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a62:	4b42      	ldr	r3, [pc, #264]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a68:	4b40      	ldr	r3, [pc, #256]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a6e:	483f      	ldr	r0, [pc, #252]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a70:	f003 fcfc 	bl	800546c <HAL_TIM_Base_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a7a:	f000 fabb 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4838      	ldr	r0, [pc, #224]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a8c:	f004 f850 	bl	8005b30 <HAL_TIM_ConfigClockSource>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a96:	f000 faad 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a9a:	4834      	ldr	r0, [pc, #208]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001a9c:	f003 fd88 	bl	80055b0 <HAL_TIM_PWM_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001aa6:	f000 faa5 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ab2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	482c      	ldr	r0, [pc, #176]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001aba:	f004 fbc5 	bl	8006248 <HAL_TIMEx_MasterConfigSynchronization>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ac4:	f000 fa96 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac8:	2360      	movs	r3, #96	; 0x60
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	481f      	ldr	r0, [pc, #124]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001aee:	f003 ff61 	bl	80059b4 <HAL_TIM_PWM_ConfigChannel>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001af8:	f000 fa7c 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b00:	2204      	movs	r2, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4819      	ldr	r0, [pc, #100]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001b06:	f003 ff55 	bl	80059b4 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001b10:	f000 fa70 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b18:	2208      	movs	r2, #8
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4813      	ldr	r0, [pc, #76]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001b1e:	f003 ff49 	bl	80059b4 <HAL_TIM_PWM_ConfigChannel>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001b28:	f000 fa64 	bl	8001ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4807      	ldr	r0, [pc, #28]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001b50:	f004 fbd8 	bl	8006304 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001b5a:	f000 fa4b 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b5e:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MX_TIM1_Init+0x168>)
 8001b60:	f000 faf2 	bl	8002148 <HAL_TIM_MspPostInit>

}
 8001b64:	bf00      	nop
 8001b66:	3758      	adds	r7, #88	; 0x58
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000270 	.word	0x20000270
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001b92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001b9a:	2259      	movs	r2, #89	; 0x59
 8001b9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001ba6:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001bba:	f003 fc57 	bl	800546c <HAL_TIM_Base_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bc4:	f000 fa16 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001bd6:	f003 ffab 	bl	8005b30 <HAL_TIM_ConfigClockSource>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001be0:	f000 fa08 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_TIM2_Init+0x94>)
 8001bf2:	f004 fb29 	bl	8006248 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bfc:	f000 f9fa 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3718      	adds	r7, #24
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	200002b8 	.word	0x200002b8

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b088      	sub	sp, #32
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c20:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c26:	f043 0310 	orr.w	r3, r3, #16
 8001c2a:	6193      	str	r3, [r2, #24]
 8001c2c:	4b35      	ldr	r3, [pc, #212]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	f003 0310 	and.w	r3, r3, #16
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4a31      	ldr	r2, [pc, #196]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c3e:	f043 0320 	orr.w	r3, r3, #32
 8001c42:	6193      	str	r3, [r2, #24]
 8001c44:	4b2f      	ldr	r3, [pc, #188]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c50:	4b2c      	ldr	r3, [pc, #176]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a2b      	ldr	r2, [pc, #172]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c56:	f043 0304 	orr.w	r3, r3, #4
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b29      	ldr	r3, [pc, #164]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	4b26      	ldr	r3, [pc, #152]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a25      	ldr	r2, [pc, #148]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <MX_GPIO_Init+0xf8>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c86:	4820      	ldr	r0, [pc, #128]	; (8001d08 <MX_GPIO_Init+0xfc>)
 8001c88:	f000 fe48 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	2101      	movs	r1, #1
 8001c90:	481e      	ldr	r0, [pc, #120]	; (8001d0c <MX_GPIO_Init+0x100>)
 8001c92:	f000 fe43 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c9c:	481b      	ldr	r0, [pc, #108]	; (8001d0c <MX_GPIO_Init+0x100>)
 8001c9e:	f000 fe3d 	bl	800291c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0310 	add.w	r3, r7, #16
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4813      	ldr	r0, [pc, #76]	; (8001d08 <MX_GPIO_Init+0xfc>)
 8001cbc:	f000 fcaa 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_GPIO_Init+0x100>)
 8001cd8:	f000 fc9c 	bl	8002614 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2302      	movs	r3, #2
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0310 	add.w	r3, r7, #16
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_GPIO_Init+0x100>)
 8001cf6:	f000 fc8d 	bl	8002614 <HAL_GPIO_Init>

}
 8001cfa:	bf00      	nop
 8001cfc:	3720      	adds	r7, #32
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40011000 	.word	0x40011000
 8001d0c:	40010c00 	.word	0x40010c00

08001d10 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4aa9      	ldr	r2, [pc, #676]	; (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	f040 8140 	bne.w	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x292>
  {



    index1+=1;
 8001d22:	4ba8      	ldr	r3, [pc, #672]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	4aa6      	ldr	r2, [pc, #664]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001d2a:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 8001d2c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001d30:	2201      	movs	r2, #1
 8001d32:	49a5      	ldr	r1, [pc, #660]	; (8001fc8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d34:	48a5      	ldr	r0, [pc, #660]	; (8001fcc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d36:	f7ff fa0f 	bl	8001158 <read>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	827b      	strh	r3, [r7, #18]
    float angle_now=(float)read_raw /(float)MAX_ANGLE_VALUE *2*M_PI*dir;
 8001d3e:	8a7b      	ldrh	r3, [r7, #18]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe ffa7 	bl	8000c94 <__aeabi_ui2f>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f8ad 	bl	8000eac <__aeabi_fdiv>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe feec 	bl	8000b34 <__addsf3>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fb62 	bl	8000428 <__aeabi_f2d>
 8001d64:	a392      	add	r3, pc, #584	; (adr r3, 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6a:	f7fe fbb5 	bl	80004d8 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	4b96      	ldr	r3, [pc, #600]	; (8001fd0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7fe fb42 	bl	8000404 <__aeabi_i2d>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4620      	mov	r0, r4
 8001d86:	4629      	mov	r1, r5
 8001d88:	f7fe fba6 	bl	80004d8 <__aeabi_dmul>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	460b      	mov	r3, r1
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	f7fe fe78 	bl	8000a88 <__aeabi_d2f>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	60fb      	str	r3, [r7, #12]
    float angle_error=motor_target-angle_now;
 8001d9c:	4b8d      	ldr	r3, [pc, #564]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fec4 	bl	8000b30 <__aeabi_fsub>
 8001da8:	4603      	mov	r3, r0
 8001daa:	617b      	str	r3, [r7, #20]

    angle_error=_normalizeAngle(angle_error);
 8001dac:	6978      	ldr	r0, [r7, #20]
 8001dae:	f7ff fa47 	bl	8001240 <_normalizeAngle>
 8001db2:	6178      	str	r0, [r7, #20]
    if (angle_error > M_PI){
 8001db4:	6978      	ldr	r0, [r7, #20]
 8001db6:	f7fe fb37 	bl	8000428 <__aeabi_f2d>
 8001dba:	a37d      	add	r3, pc, #500	; (adr r3, 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fe1a 	bl	80009f8 <__aeabi_dcmpgt>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00f      	beq.n	8001dea <HAL_TIM_PeriodElapsedCallback+0xda>
    	angle_error-=2*M_PI;
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7fe fb2c 	bl	8000428 <__aeabi_f2d>
 8001dd0:	a379      	add	r3, pc, #484	; (adr r3, 8001fb8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe f9c7 	bl	8000168 <__aeabi_dsub>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fe51 	bl	8000a88 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	617b      	str	r3, [r7, #20]
    }
    setPhaseVoltage(_constrain(Kp*(angle_error)/M_PI*180,-voltage_power_supply/2,voltage_power_supply/2),0,_electricalAngle(angle_now,pole_pairs));
 8001dea:	4b7b      	ldr	r3, [pc, #492]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6979      	ldr	r1, [r7, #20]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ffa7 	bl	8000d44 <__aeabi_fmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fb15 	bl	8000428 <__aeabi_f2d>
 8001dfe:	a36c      	add	r3, pc, #432	; (adr r3, 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fc92 	bl	800072c <__aeabi_ddiv>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e16:	f7fe fb5f 	bl	80004d8 <__aeabi_dmul>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	4b6f      	ldr	r3, [pc, #444]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e2a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff f83c 	bl	8000eac <__aeabi_fdiv>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe faf6 	bl	8000428 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fdba 	bl	80009bc <__aeabi_dcmplt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00b      	beq.n	8001e66 <HAL_TIM_PeriodElapsedCallback+0x156>
 8001e4e:	4b64      	ldr	r3, [pc, #400]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff f826 	bl	8000eac <__aeabi_fdiv>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461c      	mov	r4, r3
 8001e64:	e058      	b.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0x208>
 8001e66:	4b5c      	ldr	r3, [pc, #368]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6979      	ldr	r1, [r7, #20]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7fe ff69 	bl	8000d44 <__aeabi_fmul>
 8001e72:	4603      	mov	r3, r0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fad7 	bl	8000428 <__aeabi_f2d>
 8001e7a:	a34d      	add	r3, pc, #308	; (adr r3, 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e80:	f7fe fc54 	bl	800072c <__aeabi_ddiv>
 8001e84:	4602      	mov	r2, r0
 8001e86:	460b      	mov	r3, r1
 8001e88:	4610      	mov	r0, r2
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b52      	ldr	r3, [pc, #328]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001e92:	f7fe fb21 	bl	80004d8 <__aeabi_dmul>
 8001e96:	4602      	mov	r2, r0
 8001e98:	460b      	mov	r3, r1
 8001e9a:	4614      	mov	r4, r2
 8001e9c:	461d      	mov	r5, r3
 8001e9e:	4b50      	ldr	r3, [pc, #320]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f800 	bl	8000eac <__aeabi_fdiv>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe faba 	bl	8000428 <__aeabi_f2d>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4620      	mov	r0, r4
 8001eba:	4629      	mov	r1, r5
 8001ebc:	f7fe fd9c 	bl	80009f8 <__aeabi_dcmpgt>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d009      	beq.n	8001eda <HAL_TIM_PeriodElapsedCallback+0x1ca>
 8001ec6:	4b46      	ldr	r3, [pc, #280]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe ffec 	bl	8000eac <__aeabi_fdiv>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	461c      	mov	r4, r3
 8001ed8:	e01e      	b.n	8001f18 <HAL_TIM_PeriodElapsedCallback+0x208>
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6979      	ldr	r1, [r7, #20]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe ff2f 	bl	8000d44 <__aeabi_fmul>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fa9d 	bl	8000428 <__aeabi_f2d>
 8001eee:	a330      	add	r3, pc, #192	; (adr r3, 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	f7fe fc1a 	bl	800072c <__aeabi_ddiv>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f06:	f7fe fae7 	bl	80004d8 <__aeabi_dmul>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	f7fe fdb9 	bl	8000a88 <__aeabi_d2f>
 8001f16:	4604      	mov	r4, r0
 8001f18:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff f9c6 	bl	80012b0 <_electricalAngle>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	f04f 0100 	mov.w	r1, #0
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff fb17 	bl	8001560 <setPhaseVoltage>
//    sprintf(data, "open loop control \n");
//    sprintf(data, "angle: %u \n", read_raw);
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
//    sprintf(data, "angle_now : %i \n", (int) floor(angle_now*180/M_PI));
//        CDC_Transmit_FS((uint8_t*) data, strlen(data));
    sprintf(data, "angle_error : %i \n", (int) floor(angle_error/M_PI*180));
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7fe fa78 	bl	8000428 <__aeabi_f2d>
 8001f38:	a31d      	add	r3, pc, #116	; (adr r3, 8001fb0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fbf5 	bl	800072c <__aeabi_ddiv>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f50:	f7fe fac2 	bl	80004d8 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4610      	mov	r0, r2
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	f009 f854 	bl	800b008 <floor>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f7fe fd66 	bl	8000a38 <__aeabi_d2iz>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	491d      	ldr	r1, [pc, #116]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001f72:	481e      	ldr	r0, [pc, #120]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f74:	f00a f9d0 	bl	800c318 <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001f78:	481c      	ldr	r0, [pc, #112]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f7a:	f7fe f8e9 	bl	8000150 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	4619      	mov	r1, r3
 8001f84:	4819      	ldr	r0, [pc, #100]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f86:	f008 fc1b 	bl	800a7c0 <CDC_Transmit_FS>

    if (index1 == 200){
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2bc8      	cmp	r3, #200	; 0xc8
 8001f90:	d107      	bne.n	8001fa2 <HAL_TIM_PeriodElapsedCallback+0x292>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001f98:	f000 fcd8 	bl	800294c <HAL_GPIO_TogglePin>
    	index1=0;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	f3af 8000 	nop.w
 8001fb0:	54442d18 	.word	0x54442d18
 8001fb4:	400921fb 	.word	0x400921fb
 8001fb8:	54442d18 	.word	0x54442d18
 8001fbc:	401921fb 	.word	0x401921fb
 8001fc0:	200002b8 	.word	0x200002b8
 8001fc4:	20000358 	.word	0x20000358
 8001fc8:	40010c00 	.word	0x40010c00
 8001fcc:	20000218 	.word	0x20000218
 8001fd0:	20000018 	.word	0x20000018
 8001fd4:	20000010 	.word	0x20000010
 8001fd8:	20000014 	.word	0x20000014
 8001fdc:	40668000 	.word	0x40668000
 8001fe0:	20000004 	.word	0x20000004
 8001fe4:	2000000c 	.word	0x2000000c
 8001fe8:	0800cc44 	.word	0x0800cc44
 8001fec:	20000300 	.word	0x20000300
 8001ff0:	40011000 	.word	0x40011000

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <Error_Handler+0x8>
	...

08002000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_MspInit+0x40>)
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_MspInit+0x40>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6193      	str	r3, [r2, #24]
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_MspInit+0x40>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	4b08      	ldr	r3, [pc, #32]	; (8002040 <HAL_MspInit+0x40>)
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4a07      	ldr	r2, [pc, #28]	; (8002040 <HAL_MspInit+0x40>)
 8002024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002028:	61d3      	str	r3, [r2, #28]
 800202a:	4b05      	ldr	r3, [pc, #20]	; (8002040 <HAL_MspInit+0x40>)
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40021000 	.word	0x40021000

08002044 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1b      	ldr	r2, [pc, #108]	; (80020cc <HAL_SPI_MspInit+0x88>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d12f      	bne.n	80020c4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_SPI_MspInit+0x8c>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_SPI_MspInit+0x8c>)
 800206a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_SPI_MspInit+0x8c>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_SPI_MspInit+0x8c>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_SPI_MspInit+0x8c>)
 8002082:	f043 0304 	orr.w	r3, r3, #4
 8002086:	6193      	str	r3, [r2, #24]
 8002088:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <HAL_SPI_MspInit+0x8c>)
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002094:	23a0      	movs	r3, #160	; 0xa0
 8002096:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	480b      	ldr	r0, [pc, #44]	; (80020d4 <HAL_SPI_MspInit+0x90>)
 80020a8:	f000 fab4 	bl	8002614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020ac:	2340      	movs	r3, #64	; 0x40
 80020ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b4:	2301      	movs	r3, #1
 80020b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	4805      	ldr	r0, [pc, #20]	; (80020d4 <HAL_SPI_MspInit+0x90>)
 80020c0:	f000 faa8 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020c4:	bf00      	nop
 80020c6:	3720      	adds	r7, #32
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	40013000 	.word	0x40013000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010800 	.word	0x40010800

080020d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a16      	ldr	r2, [pc, #88]	; (8002140 <HAL_TIM_Base_MspInit+0x68>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10c      	bne.n	8002104 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ea:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 80020f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f4:	6193      	str	r3, [r2, #24]
 80020f6:	4b13      	ldr	r3, [pc, #76]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002102:	e018      	b.n	8002136 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d113      	bne.n	8002136 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	61d3      	str	r3, [r2, #28]
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <HAL_TIM_Base_MspInit+0x6c>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002126:	2200      	movs	r2, #0
 8002128:	2100      	movs	r1, #0
 800212a:	201c      	movs	r0, #28
 800212c:	f000 fa3b 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002130:	201c      	movs	r0, #28
 8002132:	f000 fa54 	bl	80025de <HAL_NVIC_EnableIRQ>
}
 8002136:	bf00      	nop
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40012c00 	.word	0x40012c00
 8002144:	40021000 	.word	0x40021000

08002148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0310 	add.w	r3, r7, #16
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a10      	ldr	r2, [pc, #64]	; (80021a4 <HAL_TIM_MspPostInit+0x5c>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d118      	bne.n	800219a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002168:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <HAL_TIM_MspPostInit+0x60>)
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	4a0e      	ldr	r2, [pc, #56]	; (80021a8 <HAL_TIM_MspPostInit+0x60>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	6193      	str	r3, [r2, #24]
 8002174:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_TIM_MspPostInit+0x60>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002180:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002184:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2302      	movs	r3, #2
 800218c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218e:	f107 0310 	add.w	r3, r7, #16
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	; (80021ac <HAL_TIM_MspPostInit+0x64>)
 8002196:	f000 fa3d 	bl	8002614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800219a:	bf00      	nop
 800219c:	3720      	adds	r7, #32
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40012c00 	.word	0x40012c00
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010800 	.word	0x40010800

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc80      	pop	{r7}
 80021e4:	4770      	bx	lr

080021e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr

080021f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021f6:	f000 f8bf 	bl	8002378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002206:	f000 fceb 	bl	8002be0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000102c 	.word	0x2000102c

08002214 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM2_IRQHandler+0x10>)
 800221a:	f003 fac3 	bl	80057a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002b8 	.word	0x200002b8

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f00a f82c 	bl	800c2b4 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20005000 	.word	0x20005000
 8002288:	00000400 	.word	0x00000400
 800228c:	2000035c 	.word	0x2000035c
 8002290:	20001548 	.word	0x20001548

08002294 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022a2:	490d      	ldr	r1, [pc, #52]	; (80022d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022a8:	e002      	b.n	80022b0 <LoopCopyDataInit>

080022aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ae:	3304      	adds	r3, #4

080022b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022b4:	d3f9      	bcc.n	80022aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022b6:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022b8:	4c0a      	ldr	r4, [pc, #40]	; (80022e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022bc:	e001      	b.n	80022c2 <LoopFillZerobss>

080022be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c0:	3204      	adds	r2, #4

080022c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022c4:	d3fb      	bcc.n	80022be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022c6:	f7ff ffe5 	bl	8002294 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ca:	f009 fff9 	bl	800c2c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ce:	f7ff fa4b 	bl	8001768 <main>
  bx lr
 80022d2:	4770      	bx	lr
  ldr r0, =_sdata
 80022d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80022dc:	0800cee4 	.word	0x0800cee4
  ldr r2, =_sbss
 80022e0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80022e4:	20001548 	.word	0x20001548

080022e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC1_2_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f0:	4b08      	ldr	r3, [pc, #32]	; (8002314 <HAL_Init+0x28>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_Init+0x28>)
 80022f6:	f043 0310 	orr.w	r3, r3, #16
 80022fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022fc:	2003      	movs	r0, #3
 80022fe:	f000 f947 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002302:	200f      	movs	r0, #15
 8002304:	f000 f808 	bl	8002318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002308:	f7ff fe7a 	bl	8002000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	4618      	mov	r0, r3
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000

08002318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002320:	4b12      	ldr	r3, [pc, #72]	; (800236c <HAL_InitTick+0x54>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_InitTick+0x58>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4619      	mov	r1, r3
 800232a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800232e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f95f 	bl	80025fa <HAL_SYSTICK_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e00e      	b.n	8002364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2b0f      	cmp	r3, #15
 800234a:	d80a      	bhi.n	8002362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800234c:	2200      	movs	r2, #0
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002354:	f000 f927 	bl	80025a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002358:	4a06      	ldr	r2, [pc, #24]	; (8002374 <HAL_InitTick+0x5c>)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
 8002360:	e000      	b.n	8002364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
}
 8002364:	4618      	mov	r0, r3
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000001c 	.word	0x2000001c
 8002370:	20000024 	.word	0x20000024
 8002374:	20000020 	.word	0x20000020

08002378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800237c:	4b05      	ldr	r3, [pc, #20]	; (8002394 <HAL_IncTick+0x1c>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_IncTick+0x20>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4413      	add	r3, r2
 8002388:	4a03      	ldr	r2, [pc, #12]	; (8002398 <HAL_IncTick+0x20>)
 800238a:	6013      	str	r3, [r2, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr
 8002394:	20000024 	.word	0x20000024
 8002398:	20000360 	.word	0x20000360

0800239c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return uwTick;
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <HAL_GetTick+0x10>)
 80023a2:	681b      	ldr	r3, [r3, #0]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	20000360 	.word	0x20000360

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff fff0 	bl	800239c <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b0a      	ldr	r3, [pc, #40]	; (80023f4 <HAL_Delay+0x44>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffe0 	bl	800239c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	20000024 	.word	0x20000024

080023f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002414:	4013      	ands	r3, r2
 8002416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800242a:	4a04      	ldr	r2, [pc, #16]	; (800243c <__NVIC_SetPriorityGrouping+0x44>)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	60d3      	str	r3, [r2, #12]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002444:	4b04      	ldr	r3, [pc, #16]	; (8002458 <__NVIC_GetPriorityGrouping+0x18>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	f003 0307 	and.w	r3, r3, #7
}
 800244e:	4618      	mov	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	2b00      	cmp	r3, #0
 800246c:	db0b      	blt.n	8002486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	f003 021f 	and.w	r2, r3, #31
 8002474:	4906      	ldr	r1, [pc, #24]	; (8002490 <__NVIC_EnableIRQ+0x34>)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2001      	movs	r0, #1
 800247e:	fa00 f202 	lsl.w	r2, r0, r2
 8002482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002570:	f7ff ff90 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff2d 	bl	80023f8 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff42 	bl	8002440 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff90 	bl	80024e8 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5f 	bl	8002494 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff35 	bl	800245c <__NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa2 	bl	800254c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002614:	b480      	push	{r7}
 8002616:	b08b      	sub	sp, #44	; 0x2c
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002626:	e169      	b.n	80028fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002628:	2201      	movs	r2, #1
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	429a      	cmp	r2, r3
 8002642:	f040 8158 	bne.w	80028f6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	4a9a      	ldr	r2, [pc, #616]	; (80028b4 <HAL_GPIO_Init+0x2a0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d05e      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002650:	4a98      	ldr	r2, [pc, #608]	; (80028b4 <HAL_GPIO_Init+0x2a0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d875      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 8002656:	4a98      	ldr	r2, [pc, #608]	; (80028b8 <HAL_GPIO_Init+0x2a4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d058      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 800265c:	4a96      	ldr	r2, [pc, #600]	; (80028b8 <HAL_GPIO_Init+0x2a4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d86f      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 8002662:	4a96      	ldr	r2, [pc, #600]	; (80028bc <HAL_GPIO_Init+0x2a8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d052      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002668:	4a94      	ldr	r2, [pc, #592]	; (80028bc <HAL_GPIO_Init+0x2a8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d869      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 800266e:	4a94      	ldr	r2, [pc, #592]	; (80028c0 <HAL_GPIO_Init+0x2ac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d04c      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002674:	4a92      	ldr	r2, [pc, #584]	; (80028c0 <HAL_GPIO_Init+0x2ac>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d863      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 800267a:	4a92      	ldr	r2, [pc, #584]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d046      	beq.n	800270e <HAL_GPIO_Init+0xfa>
 8002680:	4a90      	ldr	r2, [pc, #576]	; (80028c4 <HAL_GPIO_Init+0x2b0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d85d      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d82a      	bhi.n	80026e0 <HAL_GPIO_Init+0xcc>
 800268a:	2b12      	cmp	r3, #18
 800268c:	d859      	bhi.n	8002742 <HAL_GPIO_Init+0x12e>
 800268e:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <HAL_GPIO_Init+0x80>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	0800270f 	.word	0x0800270f
 8002698:	080026e9 	.word	0x080026e9
 800269c:	080026fb 	.word	0x080026fb
 80026a0:	0800273d 	.word	0x0800273d
 80026a4:	08002743 	.word	0x08002743
 80026a8:	08002743 	.word	0x08002743
 80026ac:	08002743 	.word	0x08002743
 80026b0:	08002743 	.word	0x08002743
 80026b4:	08002743 	.word	0x08002743
 80026b8:	08002743 	.word	0x08002743
 80026bc:	08002743 	.word	0x08002743
 80026c0:	08002743 	.word	0x08002743
 80026c4:	08002743 	.word	0x08002743
 80026c8:	08002743 	.word	0x08002743
 80026cc:	08002743 	.word	0x08002743
 80026d0:	08002743 	.word	0x08002743
 80026d4:	08002743 	.word	0x08002743
 80026d8:	080026f1 	.word	0x080026f1
 80026dc:	08002705 	.word	0x08002705
 80026e0:	4a79      	ldr	r2, [pc, #484]	; (80028c8 <HAL_GPIO_Init+0x2b4>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d013      	beq.n	800270e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e6:	e02c      	b.n	8002742 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	623b      	str	r3, [r7, #32]
          break;
 80026ee:	e029      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	3304      	adds	r3, #4
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e024      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	3308      	adds	r3, #8
 8002700:	623b      	str	r3, [r7, #32]
          break;
 8002702:	e01f      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	330c      	adds	r3, #12
 800270a:	623b      	str	r3, [r7, #32]
          break;
 800270c:	e01a      	b.n	8002744 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d102      	bne.n	800271c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002716:	2304      	movs	r3, #4
 8002718:	623b      	str	r3, [r7, #32]
          break;
 800271a:	e013      	b.n	8002744 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d105      	bne.n	8002730 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002724:	2308      	movs	r3, #8
 8002726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	611a      	str	r2, [r3, #16]
          break;
 800272e:	e009      	b.n	8002744 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002730:	2308      	movs	r3, #8
 8002732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69fa      	ldr	r2, [r7, #28]
 8002738:	615a      	str	r2, [r3, #20]
          break;
 800273a:	e003      	b.n	8002744 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800273c:	2300      	movs	r3, #0
 800273e:	623b      	str	r3, [r7, #32]
          break;
 8002740:	e000      	b.n	8002744 <HAL_GPIO_Init+0x130>
          break;
 8002742:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2bff      	cmp	r3, #255	; 0xff
 8002748:	d801      	bhi.n	800274e <HAL_GPIO_Init+0x13a>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	e001      	b.n	8002752 <HAL_GPIO_Init+0x13e>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3304      	adds	r3, #4
 8002752:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d802      	bhi.n	8002760 <HAL_GPIO_Init+0x14c>
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	e002      	b.n	8002766 <HAL_GPIO_Init+0x152>
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	3b08      	subs	r3, #8
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	210f      	movs	r1, #15
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	6a39      	ldr	r1, [r7, #32]
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	431a      	orrs	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 80b1 	beq.w	80028f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002794:	4b4d      	ldr	r3, [pc, #308]	; (80028cc <HAL_GPIO_Init+0x2b8>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	4a4c      	ldr	r2, [pc, #304]	; (80028cc <HAL_GPIO_Init+0x2b8>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6193      	str	r3, [r2, #24]
 80027a0:	4b4a      	ldr	r3, [pc, #296]	; (80028cc <HAL_GPIO_Init+0x2b8>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60bb      	str	r3, [r7, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027ac:	4a48      	ldr	r2, [pc, #288]	; (80028d0 <HAL_GPIO_Init+0x2bc>)
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	089b      	lsrs	r3, r3, #2
 80027b2:	3302      	adds	r3, #2
 80027b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	220f      	movs	r2, #15
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a40      	ldr	r2, [pc, #256]	; (80028d4 <HAL_GPIO_Init+0x2c0>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d013      	beq.n	8002800 <HAL_GPIO_Init+0x1ec>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a3f      	ldr	r2, [pc, #252]	; (80028d8 <HAL_GPIO_Init+0x2c4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00d      	beq.n	80027fc <HAL_GPIO_Init+0x1e8>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a3e      	ldr	r2, [pc, #248]	; (80028dc <HAL_GPIO_Init+0x2c8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d007      	beq.n	80027f8 <HAL_GPIO_Init+0x1e4>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a3d      	ldr	r2, [pc, #244]	; (80028e0 <HAL_GPIO_Init+0x2cc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d101      	bne.n	80027f4 <HAL_GPIO_Init+0x1e0>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e006      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027f4:	2304      	movs	r3, #4
 80027f6:	e004      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e002      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <HAL_GPIO_Init+0x1ee>
 8002800:	2300      	movs	r3, #0
 8002802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002804:	f002 0203 	and.w	r2, r2, #3
 8002808:	0092      	lsls	r2, r2, #2
 800280a:	4093      	lsls	r3, r2
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002812:	492f      	ldr	r1, [pc, #188]	; (80028d0 <HAL_GPIO_Init+0x2bc>)
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	3302      	adds	r3, #2
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d006      	beq.n	800283a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800282c:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	492c      	ldr	r1, [pc, #176]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]
 8002838:	e006      	b.n	8002848 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	43db      	mvns	r3, r3
 8002842:	4928      	ldr	r1, [pc, #160]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002844:	4013      	ands	r3, r2
 8002846:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d006      	beq.n	8002862 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002854:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4922      	ldr	r1, [pc, #136]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	604b      	str	r3, [r1, #4]
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	43db      	mvns	r3, r3
 800286a:	491e      	ldr	r1, [pc, #120]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800286c:	4013      	ands	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d006      	beq.n	800288a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4918      	ldr	r1, [pc, #96]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	608b      	str	r3, [r1, #8]
 8002888:	e006      	b.n	8002898 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	43db      	mvns	r3, r3
 8002892:	4914      	ldr	r1, [pc, #80]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 8002894:	4013      	ands	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d021      	beq.n	80028e8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028a4:	4b0f      	ldr	r3, [pc, #60]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_GPIO_Init+0x2d0>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	60cb      	str	r3, [r1, #12]
 80028b0:	e021      	b.n	80028f6 <HAL_GPIO_Init+0x2e2>
 80028b2:	bf00      	nop
 80028b4:	10320000 	.word	0x10320000
 80028b8:	10310000 	.word	0x10310000
 80028bc:	10220000 	.word	0x10220000
 80028c0:	10210000 	.word	0x10210000
 80028c4:	10120000 	.word	0x10120000
 80028c8:	10110000 	.word	0x10110000
 80028cc:	40021000 	.word	0x40021000
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40010800 	.word	0x40010800
 80028d8:	40010c00 	.word	0x40010c00
 80028dc:	40011000 	.word	0x40011000
 80028e0:	40011400 	.word	0x40011400
 80028e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028e8:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4909      	ldr	r1, [pc, #36]	; (8002918 <HAL_GPIO_Init+0x304>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	3301      	adds	r3, #1
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	fa22 f303 	lsr.w	r3, r2, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	f47f ae8e 	bne.w	8002628 <HAL_GPIO_Init+0x14>
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	372c      	adds	r7, #44	; 0x2c
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr
 8002918:	40010400 	.word	0x40010400

0800291c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	807b      	strh	r3, [r7, #2]
 8002928:	4613      	mov	r3, r2
 800292a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800292c:	787b      	ldrb	r3, [r7, #1]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002932:	887a      	ldrh	r2, [r7, #2]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002938:	e003      	b.n	8002942 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800293a:	887b      	ldrh	r3, [r7, #2]
 800293c:	041a      	lsls	r2, r3, #16
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	611a      	str	r2, [r3, #16]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	460b      	mov	r3, r1
 8002956:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800295e:	887a      	ldrh	r2, [r7, #2]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	43d9      	mvns	r1, r3
 800296a:	887b      	ldrh	r3, [r7, #2]
 800296c:	400b      	ands	r3, r1
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	611a      	str	r2, [r3, #16]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr

0800297e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800297e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002980:	b08b      	sub	sp, #44	; 0x2c
 8002982:	af06      	add	r7, sp, #24
 8002984:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0fd      	b.n	8002b8c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d106      	bne.n	80029aa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f008 f83f 	bl	800aa28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2203      	movs	r2, #3
 80029ae:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f003 fd2d 	bl	8006416 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	687e      	ldr	r6, [r7, #4]
 80029c4:	466d      	mov	r5, sp
 80029c6:	f106 0410 	add.w	r4, r6, #16
 80029ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ce:	6823      	ldr	r3, [r4, #0]
 80029d0:	602b      	str	r3, [r5, #0]
 80029d2:	1d33      	adds	r3, r6, #4
 80029d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029d6:	6838      	ldr	r0, [r7, #0]
 80029d8:	f003 fcf7 	bl	80063ca <USB_CoreInit>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2202      	movs	r2, #2
 80029e6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e0ce      	b.n	8002b8c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2100      	movs	r1, #0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 fd28 	bl	800644a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]
 80029fe:	e04c      	b.n	8002a9a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	440b      	add	r3, r1
 8002a10:	3301      	adds	r3, #1
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	7bfa      	ldrb	r2, [r7, #15]
 8002a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	b298      	uxth	r0, r3
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	3336      	adds	r3, #54	; 0x36
 8002a3e:	4602      	mov	r2, r0
 8002a40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	440b      	add	r3, r1
 8002a52:	3303      	adds	r3, #3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	3338      	adds	r3, #56	; 0x38
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	333c      	adds	r3, #60	; 0x3c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3340      	adds	r3, #64	; 0x40
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	3301      	adds	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
 8002a9a:	7bfa      	ldrb	r2, [r7, #15]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d3ad      	bcc.n	8002a00 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	e044      	b.n	8002b34 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002aaa:	7bfa      	ldrb	r2, [r7, #15]
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	440b      	add	r3, r1
 8002ab8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ad6:	7bfa      	ldrb	r2, [r7, #15]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	440b      	add	r3, r1
 8002b10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	440b      	add	r3, r1
 8002b26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	3301      	adds	r3, #1
 8002b32:	73fb      	strb	r3, [r7, #15]
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d3b5      	bcc.n	8002aaa <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	687e      	ldr	r6, [r7, #4]
 8002b46:	466d      	mov	r5, sp
 8002b48:	f106 0410 	add.w	r4, r6, #16
 8002b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b50:	6823      	ldr	r3, [r4, #0]
 8002b52:	602b      	str	r3, [r5, #0]
 8002b54:	1d33      	adds	r3, r6, #4
 8002b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b58:	6838      	ldr	r0, [r7, #0]
 8002b5a:	f003 fc82 	bl	8006462 <USB_DevInit>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2202      	movs	r2, #2
 8002b68:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00d      	b.n	8002b8c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f006 f935 	bl	8008df4 <USB_DevDisconnect>

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d101      	bne.n	8002baa <HAL_PCD_Start+0x16>
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	e016      	b.n	8002bd8 <HAL_PCD_Start+0x44>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f003 fc17 	bl	80063ea <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f008 f9a5 	bl	800af0e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f006 f909 	bl	8008de0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b088      	sub	sp, #32
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f006 f90b 	bl	8008e08 <USB_ReadInterrupts>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bfc:	d102      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fb5f 	bl	80032c2 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f006 f8fd 	bl	8008e08 <USB_ReadInterrupts>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d112      	bne.n	8002c40 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c2c:	b292      	uxth	r2, r2
 8002c2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f007 ff73 	bl	800ab1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f923 	bl	8002e86 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f006 f8df 	bl	8008e08 <USB_ReadInterrupts>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c54:	d10b      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f006 f8c8 	bl	8008e08 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c82:	d10b      	bne.n	8002c9c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c96:	b292      	uxth	r2, r2
 8002c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f006 f8b1 	bl	8008e08 <USB_ReadInterrupts>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d126      	bne.n	8002d00 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 0204 	bic.w	r2, r2, #4
 8002cc4:	b292      	uxth	r2, r2
 8002cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0208 	bic.w	r2, r2, #8
 8002cdc:	b292      	uxth	r2, r2
 8002cde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f007 ff54 	bl	800ab90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f006 f87f 	bl	8008e08 <USB_ReadInterrupts>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d14:	f040 8082 	bne.w	8002e1c <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	77fb      	strb	r3, [r7, #31]
 8002d1c:	e010      	b.n	8002d40 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	7ffb      	ldrb	r3, [r7, #31]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	7ffb      	ldrb	r3, [r7, #31]
 8002d2c:	8812      	ldrh	r2, [r2, #0]
 8002d2e:	b292      	uxth	r2, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	3320      	adds	r3, #32
 8002d34:	443b      	add	r3, r7
 8002d36:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002d3a:	7ffb      	ldrb	r3, [r7, #31]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	7ffb      	ldrb	r3, [r7, #31]
 8002d42:	2b07      	cmp	r3, #7
 8002d44:	d9eb      	bls.n	8002d1e <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	b292      	uxth	r2, r2
 8002d5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0201 	bic.w	r2, r2, #1
 8002d70:	b292      	uxth	r2, r2
 8002d72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d76:	bf00      	nop
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f6      	beq.n	8002d78 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d9c:	b292      	uxth	r2, r2
 8002d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002da2:	2300      	movs	r3, #0
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e00f      	b.n	8002dc8 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002da8:	7ffb      	ldrb	r3, [r7, #31]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	4611      	mov	r1, r2
 8002db0:	7ffa      	ldrb	r2, [r7, #31]
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	440a      	add	r2, r1
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	3320      	adds	r3, #32
 8002dba:	443b      	add	r3, r7
 8002dbc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002dc0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002dc2:	7ffb      	ldrb	r3, [r7, #31]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	7ffb      	ldrb	r3, [r7, #31]
 8002dca:	2b07      	cmp	r3, #7
 8002dcc:	d9ec      	bls.n	8002da8 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0208 	orr.w	r2, r2, #8
 8002de0:	b292      	uxth	r2, r2
 8002de2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0204 	orr.w	r2, r2, #4
 8002e10:	b292      	uxth	r2, r2
 8002e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f007 fea0 	bl	800ab5c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 fff1 	bl	8008e08 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d10e      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e44:	b292      	uxth	r2, r2
 8002e46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f007 fe59 	bl	800ab02 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f005 ffd7 	bl	8008e08 <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e64:	d10b      	bne.n	8002e7e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002e7e:	bf00      	nop
 8002e80:	3720      	adds	r7, #32
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d101      	bne.n	8002ea0 <HAL_PCD_SetAddress+0x1a>
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	e013      	b.n	8002ec8 <HAL_PCD_SetAddress+0x42>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 ff7e 	bl	8008dba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	4608      	mov	r0, r1
 8002eda:	4611      	mov	r1, r2
 8002edc:	461a      	mov	r2, r3
 8002ede:	4603      	mov	r3, r0
 8002ee0:	70fb      	strb	r3, [r7, #3]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	803b      	strh	r3, [r7, #0]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da0e      	bge.n	8002f14 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef6:	78fb      	ldrb	r3, [r7, #3]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	705a      	strb	r2, [r3, #1]
 8002f12:	e00e      	b.n	8002f32 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 0207 	and.w	r2, r3, #7
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f32:	78fb      	ldrb	r3, [r7, #3]
 8002f34:	f003 0307 	and.w	r3, r3, #7
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f3e:	883a      	ldrh	r2, [r7, #0]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	78ba      	ldrb	r2, [r7, #2]
 8002f48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	785b      	ldrb	r3, [r3, #1]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d004      	beq.n	8002f5c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f5c:	78bb      	ldrb	r3, [r7, #2]
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d102      	bne.n	8002f68 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_PCD_EP_Open+0xa6>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e00e      	b.n	8002f94 <HAL_PCD_EP_Open+0xc4>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fa8d 	bl	80064a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002f92:	7afb      	ldrb	r3, [r7, #11]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	da0e      	bge.n	8002fce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	f003 0307 	and.w	r3, r3, #7
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	705a      	strb	r2, [r3, #1]
 8002fcc:	e00e      	b.n	8002fec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	f003 0207 	and.w	r2, r3, #7
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_PCD_EP_Close+0x6a>
 8003002:	2302      	movs	r3, #2
 8003004:	e00e      	b.n	8003024 <HAL_PCD_EP_Close+0x88>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68f9      	ldr	r1, [r7, #12]
 8003014:	4618      	mov	r0, r3
 8003016:	f003 fdaf 	bl	8006b78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	603b      	str	r3, [r7, #0]
 8003038:	460b      	mov	r3, r1
 800303a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303c:	7afb      	ldrb	r3, [r7, #11]
 800303e:	f003 0207 	and.w	r2, r3, #7
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2200      	movs	r2, #0
 800306a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	b2da      	uxtb	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003078:	7afb      	ldrb	r3, [r7, #11]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	4618      	mov	r0, r3
 800308a:	f003 ff61 	bl	8006f50 <USB_EPStartXfer>
 800308e:	e005      	b.n	800309c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6979      	ldr	r1, [r7, #20]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 ff5a 	bl	8006f50 <USB_EPStartXfer>
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a6:	b480      	push	{r7}
 80030a8:	b083      	sub	sp, #12
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	f003 0207 	and.w	r2, r3, #7
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	4413      	add	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	440b      	add	r3, r1
 80030c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80030c8:	681b      	ldr	r3, [r3, #0]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr

080030d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	460b      	mov	r3, r1
 80030e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030e4:	7afb      	ldrb	r3, [r7, #11]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	4613      	mov	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2201      	movs	r2, #1
 800311e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003120:	7afb      	ldrb	r3, [r7, #11]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	b2da      	uxtb	r2, r3
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800312c:	7afb      	ldrb	r3, [r7, #11]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6979      	ldr	r1, [r7, #20]
 800313c:	4618      	mov	r0, r3
 800313e:	f003 ff07 	bl	8006f50 <USB_EPStartXfer>
 8003142:	e005      	b.n	8003150 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6979      	ldr	r1, [r7, #20]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 ff00 	bl	8006f50 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	460b      	mov	r3, r1
 8003164:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003166:	78fb      	ldrb	r3, [r7, #3]
 8003168:	f003 0207 	and.w	r2, r3, #7
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d901      	bls.n	8003178 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04c      	b.n	8003212 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800317c:	2b00      	cmp	r3, #0
 800317e:	da0e      	bge.n	800319e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	705a      	strb	r2, [r3, #1]
 800319c:	e00c      	b.n	80031b8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031be:	78fb      	ldrb	r3, [r7, #3]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <HAL_PCD_EP_SetStall+0x7e>
 80031d4:	2302      	movs	r3, #2
 80031d6:	e01c      	b.n	8003212 <HAL_PCD_EP_SetStall+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68f9      	ldr	r1, [r7, #12]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 fcea 	bl	8008bc0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003200:	4619      	mov	r1, r3
 8003202:	4610      	mov	r0, r2
 8003204:	f005 fe0f 	bl	8008e26 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b084      	sub	sp, #16
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d901      	bls.n	8003238 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e040      	b.n	80032ba <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800323c:	2b00      	cmp	r3, #0
 800323e:	da0e      	bge.n	800325e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	1c5a      	adds	r2, r3, #1
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	705a      	strb	r2, [r3, #1]
 800325c:	e00e      	b.n	800327c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 0207 	and.w	r2, r3, #7
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	4413      	add	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	b2da      	uxtb	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_PCD_EP_ClrStall+0x82>
 8003298:	2302      	movs	r3, #2
 800329a:	e00e      	b.n	80032ba <HAL_PCD_EP_ClrStall+0xa0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68f9      	ldr	r1, [r7, #12]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f005 fcd8 	bl	8008c60 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b08e      	sub	sp, #56	; 0x38
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032ca:	e2ec      	b.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80032d4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80032d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80032e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f040 8161 	bne.w	80035ae <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d152      	bne.n	800339c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003302:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003306:	81fb      	strh	r3, [r7, #14]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	89fb      	ldrh	r3, [r7, #14]
 800330e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	3328      	adds	r3, #40	; 0x28
 800331e:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	461a      	mov	r2, r3
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4413      	add	r3, r2
 8003334:	3302      	adds	r3, #2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	687a      	ldr	r2, [r7, #4]
 800333a:	6812      	ldr	r2, [r2, #0]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	441a      	add	r2, r3
 8003356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003358:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800335a:	2100      	movs	r1, #0
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f007 fbb6 	bl	800aace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 829b 	beq.w	80038a6 <PCD_EP_ISR_Handler+0x5e4>
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 8296 	bne.w	80038a6 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003380:	b2db      	uxtb	r3, r3
 8003382:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003386:	b2da      	uxtb	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	b292      	uxth	r2, r2
 800338e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800339a:	e284      	b.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80033ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d034      	beq.n	8003420 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033be:	b29b      	uxth	r3, r3
 80033c0:	461a      	mov	r2, r3
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	3306      	adds	r3, #6
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	6812      	ldr	r2, [r2, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	f005 fd66 	bl	8008ec6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	b29a      	uxth	r2, r3
 8003402:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003406:	4013      	ands	r3, r2
 8003408:	823b      	strh	r3, [r7, #16]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	8a3a      	ldrh	r2, [r7, #16]
 8003410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003414:	b292      	uxth	r2, r2
 8003416:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f007 fb2b 	bl	800aa74 <HAL_PCD_SetupStageCallback>
 800341e:	e242      	b.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003420:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003424:	2b00      	cmp	r3, #0
 8003426:	f280 823e 	bge.w	80038a6 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	881b      	ldrh	r3, [r3, #0]
 8003430:	b29a      	uxth	r2, r3
 8003432:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003436:	4013      	ands	r3, r2
 8003438:	83bb      	strh	r3, [r7, #28]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	8bba      	ldrh	r2, [r7, #28]
 8003440:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003444:	b292      	uxth	r2, r2
 8003446:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003450:	b29b      	uxth	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	3306      	adds	r3, #6
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d019      	beq.n	80034b0 <PCD_EP_ISR_Handler+0x1ee>
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d015      	beq.n	80034b0 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	6959      	ldr	r1, [r3, #20]
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003494:	b29b      	uxth	r3, r3
 8003496:	f005 fd16 	bl	8008ec6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	441a      	add	r2, r3
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80034a8:	2100      	movs	r1, #0
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f007 faf4 	bl	800aa98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f040 81f2 	bne.w	80038a6 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	61bb      	str	r3, [r7, #24]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	461a      	mov	r2, r3
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	4413      	add	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034e0:	617b      	str	r3, [r7, #20]
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d112      	bne.n	8003510 <PCD_EP_ISR_Handler+0x24e>
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	801a      	strh	r2, [r3, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003508:	b29a      	uxth	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	e02f      	b.n	8003570 <PCD_EP_ISR_Handler+0x2ae>
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b3e      	cmp	r3, #62	; 0x3e
 8003516:	d813      	bhi.n	8003540 <PCD_EP_ISR_Handler+0x27e>
 8003518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	085b      	lsrs	r3, r3, #1
 800351e:	633b      	str	r3, [r7, #48]	; 0x30
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d002      	beq.n	8003532 <PCD_EP_ISR_Handler+0x270>
 800352c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352e:	3301      	adds	r3, #1
 8003530:	633b      	str	r3, [r7, #48]	; 0x30
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	b29b      	uxth	r3, r3
 8003536:	029b      	lsls	r3, r3, #10
 8003538:	b29a      	uxth	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	801a      	strh	r2, [r3, #0]
 800353e:	e017      	b.n	8003570 <PCD_EP_ISR_Handler+0x2ae>
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	095b      	lsrs	r3, r3, #5
 8003546:	633b      	str	r3, [r7, #48]	; 0x30
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2b00      	cmp	r3, #0
 8003552:	d102      	bne.n	800355a <PCD_EP_ISR_Handler+0x298>
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	3b01      	subs	r3, #1
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
 800355a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355c:	b29b      	uxth	r3, r3
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	b29b      	uxth	r3, r3
 8003562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356a:	b29a      	uxth	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003580:	827b      	strh	r3, [r7, #18]
 8003582:	8a7b      	ldrh	r3, [r7, #18]
 8003584:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003588:	827b      	strh	r3, [r7, #18]
 800358a:	8a7b      	ldrh	r3, [r7, #18]
 800358c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003590:	827b      	strh	r3, [r7, #18]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	8a7b      	ldrh	r3, [r7, #18]
 8003598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800359c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	8013      	strh	r3, [r2, #0]
 80035ac:	e17b      	b.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80035c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f280 80ea 	bge.w	800379e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80035e0:	4013      	ands	r3, r2
 80035e2:	853b      	strh	r3, [r7, #40]	; 0x28
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035f8:	b292      	uxth	r2, r2
 80035fa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035fc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	7b1b      	ldrb	r3, [r3, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d122      	bne.n	8003660 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003622:	b29b      	uxth	r3, r3
 8003624:	461a      	mov	r2, r3
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	3306      	adds	r3, #6
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	4413      	add	r3, r2
 8003638:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003642:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8003644:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8087 	beq.w	800375a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6818      	ldr	r0, [r3, #0]
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	6959      	ldr	r1, [r3, #20]
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	88da      	ldrh	r2, [r3, #6]
 8003658:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800365a:	f005 fc34 	bl	8008ec6 <USB_ReadPMA>
 800365e:	e07c      	b.n	800375a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	78db      	ldrb	r3, [r3, #3]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d108      	bne.n	800367a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003668:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800366a:	461a      	mov	r2, r3
 800366c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f927 	bl	80038c2 <HAL_PCD_EP_DB_Receive>
 8003674:	4603      	mov	r3, r0
 8003676:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003678:	e06f      	b.n	800375a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003694:	847b      	strh	r3, [r7, #34]	; 0x22
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	441a      	add	r2, r3
 80036a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80036a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	4413      	add	r3, r2
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d021      	beq.n	8003718 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4413      	add	r3, r2
 80036e8:	3302      	adds	r3, #2
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	6812      	ldr	r2, [r2, #0]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036fc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003700:	2b00      	cmp	r3, #0
 8003702:	d02a      	beq.n	800375a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6818      	ldr	r0, [r3, #0]
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	6959      	ldr	r1, [r3, #20]
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	891a      	ldrh	r2, [r3, #8]
 8003710:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003712:	f005 fbd8 	bl	8008ec6 <USB_ReadPMA>
 8003716:	e020      	b.n	800375a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003720:	b29b      	uxth	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	4413      	add	r3, r2
 800372c:	3306      	adds	r3, #6
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003740:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003742:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6818      	ldr	r0, [r3, #0]
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	6959      	ldr	r1, [r3, #20]
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	895a      	ldrh	r2, [r3, #10]
 8003754:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003756:	f005 fbb6 	bl	8008ec6 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003760:	441a      	add	r2, r3
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	695a      	ldr	r2, [r3, #20]
 800376a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800376c:	441a      	add	r2, r3
 800376e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003770:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d004      	beq.n	8003784 <PCD_EP_ISR_Handler+0x4c2>
 800377a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377e:	691b      	ldr	r3, [r3, #16]
 8003780:	429a      	cmp	r2, r3
 8003782:	d206      	bcs.n	8003792 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f007 f984 	bl	800aa98 <HAL_PCD_DataOutStageCallback>
 8003790:	e005      	b.n	800379e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	4618      	mov	r0, r3
 800379a:	f003 fbd9 	bl	8006f50 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800379e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d07e      	beq.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80037a8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4413      	add	r3, r2
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80037d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037d6:	843b      	strh	r3, [r7, #32]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	461a      	mov	r2, r3
 80037de:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	441a      	add	r2, r3
 80037e6:	8c3b      	ldrh	r3, [r7, #32]
 80037e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	78db      	ldrb	r3, [r3, #3]
 80037f8:	2b03      	cmp	r3, #3
 80037fa:	d00c      	beq.n	8003816 <PCD_EP_ISR_Handler+0x554>
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	78db      	ldrb	r3, [r3, #3]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003808:	2b02      	cmp	r3, #2
 800380a:	d146      	bne.n	800389a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800380c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d141      	bne.n	800389a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800381e:	b29b      	uxth	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	4413      	add	r3, r2
 800382a:	3302      	adds	r3, #2
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6812      	ldr	r2, [r2, #0]
 8003832:	4413      	add	r3, r2
 8003834:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800383e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	8bfb      	ldrh	r3, [r7, #30]
 8003846:	429a      	cmp	r2, r3
 8003848:	d906      	bls.n	8003858 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	699a      	ldr	r2, [r3, #24]
 800384e:	8bfb      	ldrh	r3, [r7, #30]
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	619a      	str	r2, [r3, #24]
 8003856:	e002      	b.n	800385e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	2200      	movs	r2, #0
 800385c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	4619      	mov	r1, r3
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f007 f92e 	bl	800aace <HAL_PCD_DataInStageCallback>
 8003872:	e018      	b.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	695a      	ldr	r2, [r3, #20]
 8003878:	8bfb      	ldrh	r3, [r7, #30]
 800387a:	441a      	add	r2, r3
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	8bfb      	ldrh	r3, [r7, #30]
 8003886:	441a      	add	r2, r3
 8003888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003892:	4618      	mov	r0, r3
 8003894:	f003 fb5c 	bl	8006f50 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003898:	e005      	b.n	80038a6 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800389a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800389c:	461a      	mov	r2, r3
 800389e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f91b 	bl	8003adc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	b21b      	sxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f6ff ad0a 	blt.w	80032cc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3738      	adds	r7, #56	; 0x38
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b088      	sub	sp, #32
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	4613      	mov	r3, r2
 80038ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d07e      	beq.n	80039d8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	4413      	add	r3, r2
 80038ee:	3302      	adds	r3, #2
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	6812      	ldr	r2, [r2, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003902:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	8b7b      	ldrh	r3, [r7, #26]
 800390a:	429a      	cmp	r2, r3
 800390c:	d306      	bcc.n	800391c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	8b7b      	ldrh	r3, [r7, #26]
 8003914:	1ad2      	subs	r2, r2, r3
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	619a      	str	r2, [r3, #24]
 800391a:	e002      	b.n	8003922 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2200      	movs	r2, #0
 8003920:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d123      	bne.n	8003972 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	461a      	mov	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	833b      	strh	r3, [r7, #24]
 8003946:	8b3b      	ldrh	r3, [r7, #24]
 8003948:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800394c:	833b      	strh	r3, [r7, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	441a      	add	r2, r3
 800395c:	8b3b      	ldrh	r3, [r7, #24]
 800395e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396e:	b29b      	uxth	r3, r3
 8003970:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003972:	88fb      	ldrh	r3, [r7, #6]
 8003974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01f      	beq.n	80039bc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	b29b      	uxth	r3, r3
 800398e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003996:	82fb      	strh	r3, [r7, #22]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	441a      	add	r2, r3
 80039a6:	8afb      	ldrh	r3, [r7, #22]
 80039a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039bc:	8b7b      	ldrh	r3, [r7, #26]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 8087 	beq.w	8003ad2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6959      	ldr	r1, [r3, #20]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	891a      	ldrh	r2, [r3, #8]
 80039d0:	8b7b      	ldrh	r3, [r7, #26]
 80039d2:	f005 fa78 	bl	8008ec6 <USB_ReadPMA>
 80039d6:	e07c      	b.n	8003ad2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	00db      	lsls	r3, r3, #3
 80039ea:	4413      	add	r3, r2
 80039ec:	3306      	adds	r3, #6
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	4413      	add	r3, r2
 80039f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a00:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	699a      	ldr	r2, [r3, #24]
 8003a06:	8b7b      	ldrh	r3, [r7, #26]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d306      	bcc.n	8003a1a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	699a      	ldr	r2, [r3, #24]
 8003a10:	8b7b      	ldrh	r3, [r7, #26]
 8003a12:	1ad2      	subs	r2, r2, r3
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	619a      	str	r2, [r3, #24]
 8003a18:	e002      	b.n	8003a20 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d123      	bne.n	8003a70 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a42:	83fb      	strh	r3, [r7, #30]
 8003a44:	8bfb      	ldrh	r3, [r7, #30]
 8003a46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a4a:	83fb      	strh	r3, [r7, #30]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	441a      	add	r2, r3
 8003a5a:	8bfb      	ldrh	r3, [r7, #30]
 8003a5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11f      	bne.n	8003aba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a94:	83bb      	strh	r3, [r7, #28]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	441a      	add	r2, r3
 8003aa4:	8bbb      	ldrh	r3, [r7, #28]
 8003aa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003aae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ab2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003aba:	8b7b      	ldrh	r3, [r7, #26]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d008      	beq.n	8003ad2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	6959      	ldr	r1, [r3, #20]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	895a      	ldrh	r2, [r3, #10]
 8003acc:	8b7b      	ldrh	r3, [r7, #26]
 8003ace:	f005 f9fa 	bl	8008ec6 <USB_ReadPMA>
    }
  }

  return count;
 8003ad2:	8b7b      	ldrh	r3, [r7, #26]
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b0a2      	sub	sp, #136	; 0x88
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 81c7 	beq.w	8003e84 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d907      	bls.n	8003b3e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003b36:	1ad2      	subs	r2, r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	619a      	str	r2, [r3, #24]
 8003b3c:	e002      	b.n	8003b44 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2200      	movs	r2, #0
 8003b42:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 80b9 	bne.w	8003cc0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	785b      	ldrb	r3, [r3, #1]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d126      	bne.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	461a      	mov	r2, r3
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	4413      	add	r3, r2
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	011a      	lsls	r2, r3, #4
 8003b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b76:	4413      	add	r3, r2
 8003b78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	e01a      	b.n	8003bda <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	785b      	ldrb	r3, [r3, #1]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d116      	bne.n	8003bda <HAL_PCD_EP_DB_Transmit+0xfe>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	4413      	add	r3, r2
 8003bc2:	633b      	str	r3, [r7, #48]	; 0x30
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	011a      	lsls	r2, r3, #4
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	4413      	add	r3, r2
 8003bce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d126      	bne.n	8003c36 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	011a      	lsls	r2, r3, #4
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	801a      	strh	r2, [r3, #0]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	801a      	strh	r2, [r3, #0]
 8003c34:	e017      	b.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	785b      	ldrb	r3, [r3, #1]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d113      	bne.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	623b      	str	r3, [r7, #32]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	011a      	lsls	r2, r3, #4
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2200      	movs	r2, #0
 8003c64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f006 ff2e 	bl	800aace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 82d4 	beq.w	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	881b      	ldrh	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c98:	827b      	strh	r3, [r7, #18]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	441a      	add	r2, r3
 8003ca8:	8a7b      	ldrh	r3, [r7, #18]
 8003caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	8013      	strh	r3, [r2, #0]
 8003cbe:	e2b2      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003cc0:	88fb      	ldrh	r3, [r7, #6]
 8003cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d021      	beq.n	8003d0e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	441a      	add	r2, r3
 8003cf6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	f040 8286 	bne.w	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d22:	441a      	add	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d30:	441a      	add	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d309      	bcc.n	8003d56 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d4e:	1ad2      	subs	r2, r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	621a      	str	r2, [r3, #32]
 8003d54:	e015      	b.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d107      	bne.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d6c:	e009      	b.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d155      	bne.n	8003e36 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9e:	4413      	add	r3, r2
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	011a      	lsls	r2, r3, #4
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	4413      	add	r3, r2
 8003dac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
 8003db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d112      	bne.n	8003dde <HAL_PCD_EP_DB_Transmit+0x302>
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	801a      	strh	r2, [r3, #0]
 8003dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dca:	881b      	ldrh	r3, [r3, #0]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e047      	b.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x392>
 8003dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de0:	2b3e      	cmp	r3, #62	; 0x3e
 8003de2:	d811      	bhi.n	8003e08 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de6:	085b      	lsrs	r3, r3, #1
 8003de8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d002      	beq.n	8003dfa <HAL_PCD_EP_DB_Transmit+0x31e>
 8003df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df6:	3301      	adds	r3, #1
 8003df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	801a      	strh	r2, [r3, #0]
 8003e06:	e032      	b.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x392>
 8003e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e10:	f003 031f 	and.w	r3, r3, #31
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_EP_DB_Transmit+0x342>
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	029b      	lsls	r3, r3, #10
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	801a      	strh	r2, [r3, #0]
 8003e34:	e01b      	b.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x392>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d117      	bne.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x392>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	643b      	str	r3, [r7, #64]	; 0x40
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e52:	4413      	add	r3, r2
 8003e54:	643b      	str	r3, [r7, #64]	; 0x40
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	011a      	lsls	r2, r3, #4
 8003e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5e:	4413      	add	r3, r2
 8003e60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6959      	ldr	r1, [r3, #20]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	891a      	ldrh	r2, [r3, #8]
 8003e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	f004 ffdd 	bl	8008e3c <USB_WritePMA>
 8003e82:	e1d0      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	4413      	add	r3, r2
 8003e98:	3306      	adds	r3, #6
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003eac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	699a      	ldr	r2, [r3, #24]
 8003eb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d307      	bcc.n	8003ecc <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	699a      	ldr	r2, [r3, #24]
 8003ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ec4:	1ad2      	subs	r2, r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	619a      	str	r2, [r3, #24]
 8003eca:	e002      	b.n	8003ed2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 80c4 	bne.w	8004064 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d126      	bne.n	8003f32 <HAL_PCD_EP_DB_Transmit+0x456>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ef8:	4413      	add	r3, r2
 8003efa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	011a      	lsls	r2, r3, #4
 8003f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f04:	4413      	add	r3, r2
 8003f06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	e01a      	b.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	785b      	ldrb	r3, [r3, #1]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d116      	bne.n	8003f68 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	677b      	str	r3, [r7, #116]	; 0x74
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f4e:	4413      	add	r3, r2
 8003f50:	677b      	str	r3, [r7, #116]	; 0x74
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	011a      	lsls	r2, r3, #4
 8003f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f60:	673b      	str	r3, [r7, #112]	; 0x70
 8003f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f64:	2200      	movs	r2, #0
 8003f66:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d12f      	bne.n	8003fd6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f8e:	4413      	add	r3, r2
 8003f90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	011a      	lsls	r2, r3, #4
 8003f9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fba:	801a      	strh	r2, [r3, #0]
 8003fbc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	e017      	b.n	8004006 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	785b      	ldrb	r3, [r3, #1]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d113      	bne.n	8004006 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fec:	4413      	add	r3, r2
 8003fee:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	011a      	lsls	r2, r3, #4
 8003ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ffe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004000:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004002:	2200      	movs	r2, #0
 8004004:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f006 fd5e 	bl	800aace <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 8104 	bne.w	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004038:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	441a      	add	r2, r3
 800404a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800404e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004056:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800405a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800405e:	b29b      	uxth	r3, r3
 8004060:	8013      	strh	r3, [r2, #0]
 8004062:	e0e0      	b.n	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004064:	88fb      	ldrh	r3, [r7, #6]
 8004066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d121      	bne.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	881b      	ldrh	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004088:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800409e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	f040 80b4 	bne.w	8004226 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040c6:	441a      	add	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	69da      	ldr	r2, [r3, #28]
 80040d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040d4:	441a      	add	r2, r3
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	6a1a      	ldr	r2, [r3, #32]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d309      	bcc.n	80040fa <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	621a      	str	r2, [r3, #32]
 80040f8:	e015      	b.n	8004126 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d107      	bne.n	8004112 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004106:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004110:	e009      	b.n	8004126 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	667b      	str	r3, [r7, #100]	; 0x64
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d155      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x704>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004142:	b29b      	uxth	r3, r3
 8004144:	461a      	mov	r2, r3
 8004146:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004148:	4413      	add	r3, r2
 800414a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	011a      	lsls	r2, r3, #4
 8004152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004154:	4413      	add	r3, r2
 8004156:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800415a:	65bb      	str	r3, [r7, #88]	; 0x58
 800415c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800415e:	2b00      	cmp	r3, #0
 8004160:	d112      	bne.n	8004188 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8004162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004164:	881b      	ldrh	r3, [r3, #0]
 8004166:	b29b      	uxth	r3, r3
 8004168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800416c:	b29a      	uxth	r2, r3
 800416e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004170:	801a      	strh	r2, [r3, #0]
 8004172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004174:	881b      	ldrh	r3, [r3, #0]
 8004176:	b29b      	uxth	r3, r3
 8004178:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004180:	b29a      	uxth	r2, r3
 8004182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004184:	801a      	strh	r2, [r3, #0]
 8004186:	e044      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x736>
 8004188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800418a:	2b3e      	cmp	r3, #62	; 0x3e
 800418c:	d811      	bhi.n	80041b2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	657b      	str	r3, [r7, #84]	; 0x54
 8004194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800419e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a0:	3301      	adds	r3, #1
 80041a2:	657b      	str	r3, [r7, #84]	; 0x54
 80041a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041ae:	801a      	strh	r2, [r3, #0]
 80041b0:	e02f      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x736>
 80041b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	657b      	str	r3, [r7, #84]	; 0x54
 80041b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	3b01      	subs	r3, #1
 80041c6:	657b      	str	r3, [r7, #84]	; 0x54
 80041c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	029b      	lsls	r3, r3, #10
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041d8:	b29a      	uxth	r2, r3
 80041da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e018      	b.n	8004212 <HAL_PCD_EP_DB_Transmit+0x736>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d114      	bne.n	8004212 <HAL_PCD_EP_DB_Transmit+0x736>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	461a      	mov	r2, r3
 80041f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f6:	4413      	add	r3, r2
 80041f8:	667b      	str	r3, [r7, #100]	; 0x64
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	011a      	lsls	r2, r3, #4
 8004200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004202:	4413      	add	r3, r2
 8004204:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004208:	663b      	str	r3, [r7, #96]	; 0x60
 800420a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800420c:	b29a      	uxth	r2, r3
 800420e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004210:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6959      	ldr	r1, [r3, #20]
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	895a      	ldrh	r2, [r3, #10]
 800421e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004220:	b29b      	uxth	r3, r3
 8004222:	f004 fe0b 	bl	8008e3c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	881b      	ldrh	r3, [r3, #0]
 8004236:	b29b      	uxth	r3, r3
 8004238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800423c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004240:	823b      	strh	r3, [r7, #16]
 8004242:	8a3b      	ldrh	r3, [r7, #16]
 8004244:	f083 0310 	eor.w	r3, r3, #16
 8004248:	823b      	strh	r3, [r7, #16]
 800424a:	8a3b      	ldrh	r3, [r7, #16]
 800424c:	f083 0320 	eor.w	r3, r3, #32
 8004250:	823b      	strh	r3, [r7, #16]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	461a      	mov	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	441a      	add	r2, r3
 8004260:	8a3b      	ldrh	r3, [r7, #16]
 8004262:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004266:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800426a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004272:	b29b      	uxth	r3, r3
 8004274:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3788      	adds	r7, #136	; 0x88
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	460b      	mov	r3, r1
 800428c:	817b      	strh	r3, [r7, #10]
 800428e:	4613      	mov	r3, r2
 8004290:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004298:	b29b      	uxth	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00b      	beq.n	80042b6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429e:	897b      	ldrh	r3, [r7, #10]
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e009      	b.n	80042ca <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042b6:	897a      	ldrh	r2, [r7, #10]
 80042b8:	4613      	mov	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	4413      	add	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042ca:	893b      	ldrh	r3, [r7, #8]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d107      	bne.n	80042e0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2200      	movs	r2, #0
 80042d4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	80da      	strh	r2, [r3, #6]
 80042de:	e00b      	b.n	80042f8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2201      	movs	r2, #1
 80042e4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0c1b      	lsrs	r3, r3, #16
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e272      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8087 	beq.w	8004432 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004324:	4b92      	ldr	r3, [pc, #584]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f003 030c 	and.w	r3, r3, #12
 800432c:	2b04      	cmp	r3, #4
 800432e:	d00c      	beq.n	800434a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004330:	4b8f      	ldr	r3, [pc, #572]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 030c 	and.w	r3, r3, #12
 8004338:	2b08      	cmp	r3, #8
 800433a:	d112      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
 800433c:	4b8c      	ldr	r3, [pc, #560]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004348:	d10b      	bne.n	8004362 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434a:	4b89      	ldr	r3, [pc, #548]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d06c      	beq.n	8004430 <HAL_RCC_OscConfig+0x12c>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d168      	bne.n	8004430 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e24c      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x76>
 800436c:	4b80      	ldr	r3, [pc, #512]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7f      	ldr	r2, [pc, #508]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e02e      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10c      	bne.n	800439c <HAL_RCC_OscConfig+0x98>
 8004382:	4b7b      	ldr	r3, [pc, #492]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a7a      	ldr	r2, [pc, #488]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004388:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b78      	ldr	r3, [pc, #480]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a77      	ldr	r2, [pc, #476]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004394:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	e01d      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a4:	d10c      	bne.n	80043c0 <HAL_RCC_OscConfig+0xbc>
 80043a6:	4b72      	ldr	r3, [pc, #456]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a71      	ldr	r2, [pc, #452]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	4b6f      	ldr	r3, [pc, #444]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6e      	ldr	r2, [pc, #440]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e00b      	b.n	80043d8 <HAL_RCC_OscConfig+0xd4>
 80043c0:	4b6b      	ldr	r3, [pc, #428]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a6a      	ldr	r2, [pc, #424]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	4b68      	ldr	r3, [pc, #416]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a67      	ldr	r2, [pc, #412]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d013      	beq.n	8004408 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd ffdc 	bl	800239c <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043e8:	f7fd ffd8 	bl	800239c <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b64      	cmp	r3, #100	; 0x64
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e200      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fa:	4b5d      	ldr	r3, [pc, #372]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d0f0      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe4>
 8004406:	e014      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004408:	f7fd ffc8 	bl	800239c <HAL_GetTick>
 800440c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004410:	f7fd ffc4 	bl	800239c <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b64      	cmp	r3, #100	; 0x64
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e1ec      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004422:	4b53      	ldr	r3, [pc, #332]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x10c>
 800442e:	e000      	b.n	8004432 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004430:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0302 	and.w	r3, r3, #2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d063      	beq.n	8004506 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800443e:	4b4c      	ldr	r3, [pc, #304]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00b      	beq.n	8004462 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800444a:	4b49      	ldr	r3, [pc, #292]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b08      	cmp	r3, #8
 8004454:	d11c      	bne.n	8004490 <HAL_RCC_OscConfig+0x18c>
 8004456:	4b46      	ldr	r3, [pc, #280]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d116      	bne.n	8004490 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d005      	beq.n	800447a <HAL_RCC_OscConfig+0x176>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d001      	beq.n	800447a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1c0      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447a:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4939      	ldr	r1, [pc, #228]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800448a:	4313      	orrs	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448e:	e03a      	b.n	8004506 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d020      	beq.n	80044da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004498:	4b36      	ldr	r3, [pc, #216]	; (8004574 <HAL_RCC_OscConfig+0x270>)
 800449a:	2201      	movs	r2, #1
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fd ff7d 	bl	800239c <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fd ff79 	bl	800239c <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1a1      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b8:	4b2d      	ldr	r3, [pc, #180]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0f0      	beq.n	80044a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c4:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4927      	ldr	r1, [pc, #156]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	600b      	str	r3, [r1, #0]
 80044d8:	e015      	b.n	8004506 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044da:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_RCC_OscConfig+0x270>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd ff5c 	bl	800239c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd ff58 	bl	800239c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e180      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044fa:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d03a      	beq.n	8004588 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d019      	beq.n	800454e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800451a:	4b17      	ldr	r3, [pc, #92]	; (8004578 <HAL_RCC_OscConfig+0x274>)
 800451c:	2201      	movs	r2, #1
 800451e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004520:	f7fd ff3c 	bl	800239c <HAL_GetTick>
 8004524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004528:	f7fd ff38 	bl	800239c <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e160      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800453a:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_RCC_OscConfig+0x26c>)
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d0f0      	beq.n	8004528 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004546:	2001      	movs	r0, #1
 8004548:	f000 faa6 	bl	8004a98 <RCC_Delay>
 800454c:	e01c      	b.n	8004588 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <HAL_RCC_OscConfig+0x274>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004554:	f7fd ff22 	bl	800239c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455a:	e00f      	b.n	800457c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd ff1e 	bl	800239c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d908      	bls.n	800457c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e146      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	42420000 	.word	0x42420000
 8004578:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800457c:	4b92      	ldr	r3, [pc, #584]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e9      	bne.n	800455c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	f000 80a6 	beq.w	80046e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004596:	2300      	movs	r3, #0
 8004598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459a:	4b8b      	ldr	r3, [pc, #556]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10d      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045a6:	4b88      	ldr	r3, [pc, #544]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	4a87      	ldr	r2, [pc, #540]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	61d3      	str	r3, [r2, #28]
 80045b2:	4b85      	ldr	r3, [pc, #532]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	69db      	ldr	r3, [r3, #28]
 80045b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ba:	60bb      	str	r3, [r7, #8]
 80045bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045be:	2301      	movs	r3, #1
 80045c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c2:	4b82      	ldr	r3, [pc, #520]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d118      	bne.n	8004600 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045ce:	4b7f      	ldr	r3, [pc, #508]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7e      	ldr	r2, [pc, #504]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045da:	f7fd fedf 	bl	800239c <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e2:	f7fd fedb 	bl	800239c <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b64      	cmp	r3, #100	; 0x64
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e103      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f4:	4b75      	ldr	r3, [pc, #468]	; (80047cc <HAL_RCC_OscConfig+0x4c8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x312>
 8004608:	4b6f      	ldr	r3, [pc, #444]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	6a1b      	ldr	r3, [r3, #32]
 800460c:	4a6e      	ldr	r2, [pc, #440]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6213      	str	r3, [r2, #32]
 8004614:	e02d      	b.n	8004672 <HAL_RCC_OscConfig+0x36e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x334>
 800461e:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a69      	ldr	r2, [pc, #420]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	f023 0301 	bic.w	r3, r3, #1
 8004628:	6213      	str	r3, [r2, #32]
 800462a:	4b67      	ldr	r3, [pc, #412]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	4a66      	ldr	r2, [pc, #408]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004630:	f023 0304 	bic.w	r3, r3, #4
 8004634:	6213      	str	r3, [r2, #32]
 8004636:	e01c      	b.n	8004672 <HAL_RCC_OscConfig+0x36e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b05      	cmp	r3, #5
 800463e:	d10c      	bne.n	800465a <HAL_RCC_OscConfig+0x356>
 8004640:	4b61      	ldr	r3, [pc, #388]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	4a60      	ldr	r2, [pc, #384]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	f043 0304 	orr.w	r3, r3, #4
 800464a:	6213      	str	r3, [r2, #32]
 800464c:	4b5e      	ldr	r3, [pc, #376]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	4a5d      	ldr	r2, [pc, #372]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004652:	f043 0301 	orr.w	r3, r3, #1
 8004656:	6213      	str	r3, [r2, #32]
 8004658:	e00b      	b.n	8004672 <HAL_RCC_OscConfig+0x36e>
 800465a:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a5a      	ldr	r2, [pc, #360]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6213      	str	r3, [r2, #32]
 8004666:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	f023 0304 	bic.w	r3, r3, #4
 8004670:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d015      	beq.n	80046a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467a:	f7fd fe8f 	bl	800239c <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fd fe8b 	bl	800239c <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0b1      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	4b4b      	ldr	r3, [pc, #300]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ee      	beq.n	8004682 <HAL_RCC_OscConfig+0x37e>
 80046a4:	e014      	b.n	80046d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046a6:	f7fd fe79 	bl	800239c <HAL_GetTick>
 80046aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046ac:	e00a      	b.n	80046c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ae:	f7fd fe75 	bl	800239c <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046bc:	4293      	cmp	r3, r2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e09b      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c4:	4b40      	ldr	r3, [pc, #256]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f003 0302 	and.w	r3, r3, #2
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ee      	bne.n	80046ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80046d0:	7dfb      	ldrb	r3, [r7, #23]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d105      	bne.n	80046e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b3c      	ldr	r3, [pc, #240]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4a3b      	ldr	r2, [pc, #236]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8087 	beq.w	80047fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f003 030c 	and.w	r3, r3, #12
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d061      	beq.n	80047bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d146      	bne.n	800478e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004700:	4b33      	ldr	r3, [pc, #204]	; (80047d0 <HAL_RCC_OscConfig+0x4cc>)
 8004702:	2200      	movs	r2, #0
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004706:	f7fd fe49 	bl	800239c <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470e:	f7fd fe45 	bl	800239c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e06d      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004720:	4b29      	ldr	r3, [pc, #164]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1f0      	bne.n	800470e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004734:	d108      	bne.n	8004748 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4921      	ldr	r1, [pc, #132]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a19      	ldr	r1, [r3, #32]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	430b      	orrs	r3, r1
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 800475c:	4313      	orrs	r3, r2
 800475e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004760:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <HAL_RCC_OscConfig+0x4cc>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004766:	f7fd fe19 	bl	800239c <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800476e:	f7fd fe15 	bl	800239c <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e03d      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x46a>
 800478c:	e035      	b.n	80047fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800478e:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_RCC_OscConfig+0x4cc>)
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004794:	f7fd fe02 	bl	800239c <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fd fdfe 	bl	800239c <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e026      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <HAL_RCC_OscConfig+0x4c4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0x498>
 80047ba:	e01e      	b.n	80047fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d107      	bne.n	80047d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e019      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40007000 	.word	0x40007000
 80047d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_OscConfig+0x500>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d106      	bne.n	80047f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000

08004808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d101      	bne.n	800481c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0d0      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800481c:	4b6a      	ldr	r3, [pc, #424]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	d910      	bls.n	800484c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482a:	4b67      	ldr	r3, [pc, #412]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f023 0207 	bic.w	r2, r3, #7
 8004832:	4965      	ldr	r1, [pc, #404]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b63      	ldr	r3, [pc, #396]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e0b8      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d020      	beq.n	800489a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4a58      	ldr	r2, [pc, #352]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800486a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800486e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800487c:	4b53      	ldr	r3, [pc, #332]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a52      	ldr	r2, [pc, #328]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004886:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004888:	4b50      	ldr	r3, [pc, #320]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	494d      	ldr	r1, [pc, #308]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004896:	4313      	orrs	r3, r2
 8004898:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d040      	beq.n	8004928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d115      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e07f      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d107      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c6:	4b41      	ldr	r3, [pc, #260]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d109      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e073      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d6:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e06b      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048e6:	4b39      	ldr	r3, [pc, #228]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f023 0203 	bic.w	r2, r3, #3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4936      	ldr	r1, [pc, #216]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f8:	f7fd fd50 	bl	800239c <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004900:	f7fd fd4c 	bl	800239c <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	; 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e053      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004916:	4b2d      	ldr	r3, [pc, #180]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f003 020c 	and.w	r2, r3, #12
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	429a      	cmp	r2, r3
 8004926:	d1eb      	bne.n	8004900 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004928:	4b27      	ldr	r3, [pc, #156]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	429a      	cmp	r2, r3
 8004934:	d210      	bcs.n	8004958 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004936:	4b24      	ldr	r3, [pc, #144]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 0207 	bic.w	r2, r3, #7
 800493e:	4922      	ldr	r1, [pc, #136]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	4313      	orrs	r3, r2
 8004944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <HAL_RCC_ClockConfig+0x1c0>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e032      	b.n	80049be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b00      	cmp	r3, #0
 8004962:	d008      	beq.n	8004976 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004964:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4916      	ldr	r1, [pc, #88]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004972:	4313      	orrs	r3, r2
 8004974:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d009      	beq.n	8004996 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004982:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	490e      	ldr	r1, [pc, #56]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 8004992:	4313      	orrs	r3, r2
 8004994:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004996:	f000 f821 	bl	80049dc <HAL_RCC_GetSysClockFreq>
 800499a:	4602      	mov	r2, r0
 800499c:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	091b      	lsrs	r3, r3, #4
 80049a2:	f003 030f 	and.w	r3, r3, #15
 80049a6:	490a      	ldr	r1, [pc, #40]	; (80049d0 <HAL_RCC_ClockConfig+0x1c8>)
 80049a8:	5ccb      	ldrb	r3, [r1, r3]
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a09      	ldr	r2, [pc, #36]	; (80049d4 <HAL_RCC_ClockConfig+0x1cc>)
 80049b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1d0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd fcae 	bl	8002318 <HAL_InitTick>

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40022000 	.word	0x40022000
 80049cc:	40021000 	.word	0x40021000
 80049d0:	0800ccac 	.word	0x0800ccac
 80049d4:	2000001c 	.word	0x2000001c
 80049d8:	20000020 	.word	0x20000020

080049dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049dc:	b490      	push	{r4, r7}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80049e2:	4b29      	ldr	r3, [pc, #164]	; (8004a88 <HAL_RCC_GetSysClockFreq+0xac>)
 80049e4:	1d3c      	adds	r4, r7, #4
 80049e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049ec:	f240 2301 	movw	r3, #513	; 0x201
 80049f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	2300      	movs	r3, #0
 80049f8:	61bb      	str	r3, [r7, #24]
 80049fa:	2300      	movs	r3, #0
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	2300      	movs	r3, #0
 8004a00:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a06:	4b21      	ldr	r3, [pc, #132]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 030c 	and.w	r3, r3, #12
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	d002      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x40>
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d003      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x46>
 8004a1a:	e02b      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a1c:	4b1c      	ldr	r3, [pc, #112]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a1e:	623b      	str	r3, [r7, #32]
      break;
 8004a20:	e02b      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	0c9b      	lsrs	r3, r3, #18
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	3328      	adds	r3, #40	; 0x28
 8004a2c:	443b      	add	r3, r7
 8004a2e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a32:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d012      	beq.n	8004a64 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	0c5b      	lsrs	r3, r3, #17
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	3328      	adds	r3, #40	; 0x28
 8004a4a:	443b      	add	r3, r7
 8004a4c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a50:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a56:	fb03 f202 	mul.w	r2, r3, r2
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
 8004a62:	e004      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	4a0b      	ldr	r2, [pc, #44]	; (8004a94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a68:	fb02 f303 	mul.w	r3, r2, r3
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	623b      	str	r3, [r7, #32]
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a76:	623b      	str	r3, [r7, #32]
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc90      	pop	{r4, r7}
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	0800cc58 	.word	0x0800cc58
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	007a1200 	.word	0x007a1200
 8004a94:	003d0900 	.word	0x003d0900

08004a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <RCC_Delay+0x34>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <RCC_Delay+0x38>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	0a5b      	lsrs	r3, r3, #9
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ab4:	bf00      	nop
  }
  while (Delay --);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f9      	bne.n	8004ab4 <RCC_Delay+0x1c>
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	2000001c 	.word	0x2000001c
 8004ad0:	10624dd3 	.word	0x10624dd3

08004ad4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d07d      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004af0:	2300      	movs	r3, #0
 8004af2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af4:	4b4f      	ldr	r3, [pc, #316]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af6:	69db      	ldr	r3, [r3, #28]
 8004af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b00:	4b4c      	ldr	r3, [pc, #304]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	4a4b      	ldr	r2, [pc, #300]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	61d3      	str	r3, [r2, #28]
 8004b0c:	4b49      	ldr	r3, [pc, #292]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	4b46      	ldr	r3, [pc, #280]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d118      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b28:	4b43      	ldr	r3, [pc, #268]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a42      	ldr	r2, [pc, #264]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b34:	f7fd fc32 	bl	800239c <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3a:	e008      	b.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b3c:	f7fd fc2e 	bl	800239c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b64      	cmp	r3, #100	; 0x64
 8004b48:	d901      	bls.n	8004b4e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e06d      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4e:	4b3a      	ldr	r3, [pc, #232]	; (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b5a:	4b36      	ldr	r3, [pc, #216]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5c:	6a1b      	ldr	r3, [r3, #32]
 8004b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b62:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d02e      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d027      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b78:	4b2e      	ldr	r3, [pc, #184]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b82:	4b2e      	ldr	r3, [pc, #184]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b88:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b8e:	4a29      	ldr	r2, [pc, #164]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d014      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fd fbfd 	bl	800239c <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba4:	e00a      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba6:	f7fd fbf9 	bl	800239c <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e036      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bbc:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	6a1b      	ldr	r3, [r3, #32]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ee      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	6a1b      	ldr	r3, [r3, #32]
 8004bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4917      	ldr	r1, [pc, #92]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bda:	7dfb      	ldrb	r3, [r7, #23]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d105      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be0:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4a13      	ldr	r2, [pc, #76]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bea:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	490b      	ldr	r1, [pc, #44]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0310 	and.w	r3, r3, #16
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d008      	beq.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	4904      	ldr	r1, [pc, #16]	; (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	42420440 	.word	0x42420440

08004c40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e076      	b.n	8004d40 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d108      	bne.n	8004c6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c62:	d009      	beq.n	8004c78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	61da      	str	r2, [r3, #28]
 8004c6a:	e005      	b.n	8004c78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fd f9d6 	bl	8002044 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69db      	ldr	r3, [r3, #28]
 8004cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfc:	ea42 0103 	orr.w	r1, r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	0c1a      	lsrs	r2, r3, #16
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f002 0204 	and.w	r2, r2, #4
 8004d1e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69da      	ldr	r2, [r3, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d2e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_SPI_Transmit+0x22>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e126      	b.n	8004fb8 <HAL_SPI_Transmit+0x270>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d72:	f7fd fb13 	bl	800239c <HAL_GetTick>
 8004d76:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d78:	88fb      	ldrh	r3, [r7, #6]
 8004d7a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d002      	beq.n	8004d8e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d8c:	e10b      	b.n	8004fa6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_Transmit+0x52>
 8004d94:	88fb      	ldrh	r3, [r7, #6]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d102      	bne.n	8004da0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d9e:	e102      	b.n	8004fa6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2203      	movs	r2, #3
 8004da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	88fa      	ldrh	r2, [r7, #6]
 8004db8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	88fa      	ldrh	r2, [r7, #6]
 8004dbe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de6:	d10f      	bne.n	8004e08 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d007      	beq.n	8004e26 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e2e:	d14b      	bne.n	8004ec8 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d002      	beq.n	8004e3e <HAL_SPI_Transmit+0xf6>
 8004e38:	8afb      	ldrh	r3, [r7, #22]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d13e      	bne.n	8004ebc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	1c9a      	adds	r2, r3, #2
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e62:	e02b      	b.n	8004ebc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d112      	bne.n	8004e98 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	881a      	ldrh	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e82:	1c9a      	adds	r2, r3, #2
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e96:	e011      	b.n	8004ebc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e98:	f7fd fa80 	bl	800239c <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	69bb      	ldr	r3, [r7, #24]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d803      	bhi.n	8004eb0 <HAL_SPI_Transmit+0x168>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_Transmit+0x16e>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eba:	e074      	b.n	8004fa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1ce      	bne.n	8004e64 <HAL_SPI_Transmit+0x11c>
 8004ec6:	e04c      	b.n	8004f62 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_SPI_Transmit+0x18e>
 8004ed0:	8afb      	ldrh	r3, [r7, #22]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d140      	bne.n	8004f58 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	7812      	ldrb	r2, [r2, #0]
 8004ee2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004efc:	e02c      	b.n	8004f58 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d113      	bne.n	8004f34 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	7812      	ldrb	r2, [r2, #0]
 8004f18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f32:	e011      	b.n	8004f58 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f34:	f7fd fa32 	bl	800239c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d803      	bhi.n	8004f4c <HAL_SPI_Transmit+0x204>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f4a:	d102      	bne.n	8004f52 <HAL_SPI_Transmit+0x20a>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d102      	bne.n	8004f58 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f56:	e026      	b.n	8004fa6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1cd      	bne.n	8004efe <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f62:	69ba      	ldr	r2, [r7, #24]
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fa62 	bl	8005430 <SPI_EndRxTxTransaction>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	613b      	str	r3, [r7, #16]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	613b      	str	r3, [r7, #16]
 8004f94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e000      	b.n	8004fa6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004fa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
 8004fcc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPI_TransmitReceive+0x26>
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	e18a      	b.n	80052fc <HAL_SPI_TransmitReceive+0x33c>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fee:	f7fd f9d5 	bl	800239c <HAL_GetTick>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005004:	887b      	ldrh	r3, [r7, #2]
 8005006:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800500c:	2b01      	cmp	r3, #1
 800500e:	d00f      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x70>
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005016:	d107      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d103      	bne.n	8005028 <HAL_SPI_TransmitReceive+0x68>
 8005020:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005024:	2b04      	cmp	r3, #4
 8005026:	d003      	beq.n	8005030 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005028:	2302      	movs	r3, #2
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800502e:	e15b      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d005      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x82>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d002      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x82>
 800503c:	887b      	ldrh	r3, [r7, #2]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d103      	bne.n	800504a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005048:	e14e      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b04      	cmp	r3, #4
 8005054:	d003      	beq.n	800505e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2205      	movs	r2, #5
 800505a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	887a      	ldrh	r2, [r7, #2]
 800506e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	887a      	ldrh	r2, [r7, #2]
 8005074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	887a      	ldrh	r2, [r7, #2]
 8005086:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d007      	beq.n	80050b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050ba:	d178      	bne.n	80051ae <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d002      	beq.n	80050ca <HAL_SPI_TransmitReceive+0x10a>
 80050c4:	8b7b      	ldrh	r3, [r7, #26]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d166      	bne.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	1c9a      	adds	r2, r3, #2
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050ee:	e053      	b.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d11b      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x176>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d016      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x176>
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d113      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	881a      	ldrh	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511e:	1c9a      	adds	r2, r3, #2
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29a      	uxth	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d119      	bne.n	8005178 <HAL_SPI_TransmitReceive+0x1b8>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d014      	beq.n	8005178 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	b292      	uxth	r2, r2
 800515a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	1c9a      	adds	r2, r3, #2
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005174:	2301      	movs	r3, #1
 8005176:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005178:	f7fd f910 	bl	800239c <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005184:	429a      	cmp	r2, r3
 8005186:	d807      	bhi.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
 8005188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800518e:	d003      	beq.n	8005198 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005196:	e0a7      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1a6      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x130>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1a1      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x130>
 80051ac:	e07c      	b.n	80052a8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x1fc>
 80051b6:	8b7b      	ldrh	r3, [r7, #26]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d16b      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	330c      	adds	r3, #12
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051e2:	e057      	b.n	8005294 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d11c      	bne.n	800522c <HAL_SPI_TransmitReceive+0x26c>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d017      	beq.n	800522c <HAL_SPI_TransmitReceive+0x26c>
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d114      	bne.n	800522c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	330c      	adds	r3, #12
 800520c:	7812      	ldrb	r2, [r2, #0]
 800520e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800521e:	b29b      	uxth	r3, r3
 8005220:	3b01      	subs	r3, #1
 8005222:	b29a      	uxth	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 0301 	and.w	r3, r3, #1
 8005236:	2b01      	cmp	r3, #1
 8005238:	d119      	bne.n	800526e <HAL_SPI_TransmitReceive+0x2ae>
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d014      	beq.n	800526e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005256:	1c5a      	adds	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800526a:	2301      	movs	r3, #1
 800526c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800526e:	f7fd f895 	bl	800239c <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800527a:	429a      	cmp	r2, r3
 800527c:	d803      	bhi.n	8005286 <HAL_SPI_TransmitReceive+0x2c6>
 800527e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005280:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005284:	d102      	bne.n	800528c <HAL_SPI_TransmitReceive+0x2cc>
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005292:	e029      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1a2      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x224>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d19d      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f8bf 	bl	8005430 <SPI_EndRxTxTransaction>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d006      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80052c4:	e010      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	e000      	b.n	80052e8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80052e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3730      	adds	r7, #48	; 0x30
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005312:	b2db      	uxtb	r3, r3
}
 8005314:	4618      	mov	r0, r3
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr
	...

08005320 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b088      	sub	sp, #32
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	603b      	str	r3, [r7, #0]
 800532c:	4613      	mov	r3, r2
 800532e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005330:	f7fd f834 	bl	800239c <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005338:	1a9b      	subs	r3, r3, r2
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	4413      	add	r3, r2
 800533e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005340:	f7fd f82c 	bl	800239c <HAL_GetTick>
 8005344:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005346:	4b39      	ldr	r3, [pc, #228]	; (800542c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	015b      	lsls	r3, r3, #5
 800534c:	0d1b      	lsrs	r3, r3, #20
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	fb02 f303 	mul.w	r3, r2, r3
 8005354:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005356:	e054      	b.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535e:	d050      	beq.n	8005402 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005360:	f7fd f81c 	bl	800239c <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	69fa      	ldr	r2, [r7, #28]
 800536c:	429a      	cmp	r2, r3
 800536e:	d902      	bls.n	8005376 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d13d      	bne.n	80053f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005384:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800538e:	d111      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005398:	d004      	beq.n	80053a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053a2:	d107      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d10f      	bne.n	80053de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e017      	b.n	8005422 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	3b01      	subs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	4013      	ands	r3, r2
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	461a      	mov	r2, r3
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	429a      	cmp	r2, r3
 800541e:	d19b      	bne.n	8005358 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2000001c 	.word	0x2000001c

08005430 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af02      	add	r7, sp, #8
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2200      	movs	r2, #0
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff ff6a 	bl	8005320 <SPI_WaitFlagStateUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e000      	b.n	8005464 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e041      	b.n	8005502 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fc fe20 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f000 fc28 	bl	8005d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d001      	beq.n	8005524 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e03a      	b.n	800559a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2202      	movs	r2, #2
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f042 0201 	orr.w	r2, r2, #1
 800553a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a18      	ldr	r2, [pc, #96]	; (80055a4 <HAL_TIM_Base_Start_IT+0x98>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x58>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554e:	d009      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x58>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a14      	ldr	r2, [pc, #80]	; (80055a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIM_Base_Start_IT+0x58>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a13      	ldr	r2, [pc, #76]	; (80055ac <HAL_TIM_Base_Start_IT+0xa0>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d111      	bne.n	8005588 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b06      	cmp	r3, #6
 8005574:	d010      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f042 0201 	orr.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005586:	e007      	b.n	8005598 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800

080055b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e041      	b.n	8005646 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f839 	bl	800564e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3304      	adds	r3, #4
 80055ec:	4619      	mov	r1, r3
 80055ee:	4610      	mov	r0, r2
 80055f0:	f000 fb86 	bl	8005d00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005656:	bf00      	nop
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	bc80      	pop	{r7}
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d109      	bne.n	8005684 <HAL_TIM_PWM_Start+0x24>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e022      	b.n	80056ca <HAL_TIM_PWM_Start+0x6a>
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b04      	cmp	r3, #4
 8005688:	d109      	bne.n	800569e <HAL_TIM_PWM_Start+0x3e>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	bf14      	ite	ne
 8005696:	2301      	movne	r3, #1
 8005698:	2300      	moveq	r3, #0
 800569a:	b2db      	uxtb	r3, r3
 800569c:	e015      	b.n	80056ca <HAL_TIM_PWM_Start+0x6a>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d109      	bne.n	80056b8 <HAL_TIM_PWM_Start+0x58>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	bf14      	ite	ne
 80056b0:	2301      	movne	r3, #1
 80056b2:	2300      	moveq	r3, #0
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	e008      	b.n	80056ca <HAL_TIM_PWM_Start+0x6a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e05e      	b.n	8005790 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_PWM_Start+0x82>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056e0:	e013      	b.n	800570a <HAL_TIM_PWM_Start+0xaa>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x92>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2202      	movs	r2, #2
 80056ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056f0:	e00b      	b.n	800570a <HAL_TIM_PWM_Start+0xaa>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b08      	cmp	r3, #8
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_PWM_Start+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2202      	movs	r2, #2
 80056fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005700:	e003      	b.n	800570a <HAL_TIM_PWM_Start+0xaa>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2201      	movs	r2, #1
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fd74 	bl	8006200 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <HAL_TIM_PWM_Start+0x138>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d107      	bne.n	8005732 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005730:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_TIM_PWM_Start+0x138>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d00e      	beq.n	800575a <HAL_TIM_PWM_Start+0xfa>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005744:	d009      	beq.n	800575a <HAL_TIM_PWM_Start+0xfa>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a14      	ldr	r2, [pc, #80]	; (800579c <HAL_TIM_PWM_Start+0x13c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d004      	beq.n	800575a <HAL_TIM_PWM_Start+0xfa>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a12      	ldr	r2, [pc, #72]	; (80057a0 <HAL_TIM_PWM_Start+0x140>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d111      	bne.n	800577e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2b06      	cmp	r3, #6
 800576a:	d010      	beq.n	800578e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f042 0201 	orr.w	r2, r2, #1
 800577a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577c:	e007      	b.n	800578e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0201 	orr.w	r2, r2, #1
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3710      	adds	r7, #16
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800

080057a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d122      	bne.n	8005800 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d11b      	bne.n	8005800 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0202 	mvn.w	r2, #2
 80057d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fa6f 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 80057ec:	e005      	b.n	80057fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fa62 	bl	8005cb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fa71 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f003 0304 	and.w	r3, r3, #4
 800580a:	2b04      	cmp	r3, #4
 800580c:	d122      	bne.n	8005854 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f003 0304 	and.w	r3, r3, #4
 8005818:	2b04      	cmp	r3, #4
 800581a:	d11b      	bne.n	8005854 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f06f 0204 	mvn.w	r2, #4
 8005824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2202      	movs	r2, #2
 800582a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005836:	2b00      	cmp	r3, #0
 8005838:	d003      	beq.n	8005842 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa45 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005840:	e005      	b.n	800584e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa38 	bl	8005cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fa47 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b08      	cmp	r3, #8
 8005860:	d122      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f003 0308 	and.w	r3, r3, #8
 800586c:	2b08      	cmp	r3, #8
 800586e:	d11b      	bne.n	80058a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f06f 0208 	mvn.w	r2, #8
 8005878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2204      	movs	r2, #4
 800587e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f003 0303 	and.w	r3, r3, #3
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa1b 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 8005894:	e005      	b.n	80058a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fa0e 	bl	8005cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 fa1d 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0310 	and.w	r3, r3, #16
 80058b2:	2b10      	cmp	r3, #16
 80058b4:	d122      	bne.n	80058fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b10      	cmp	r3, #16
 80058c2:	d11b      	bne.n	80058fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f06f 0210 	mvn.w	r2, #16
 80058cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2208      	movs	r2, #8
 80058d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9f1 	bl	8005cca <HAL_TIM_IC_CaptureCallback>
 80058e8:	e005      	b.n	80058f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f9e4 	bl	8005cb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f9f3 	bl	8005cdc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b01      	cmp	r3, #1
 8005908:	d10e      	bne.n	8005928 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d107      	bne.n	8005928 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f06f 0201 	mvn.w	r2, #1
 8005920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fc f9f4 	bl	8001d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d10e      	bne.n	8005954 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005940:	2b80      	cmp	r3, #128	; 0x80
 8005942:	d107      	bne.n	8005954 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800594c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fd32 	bl	80063b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d10e      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b40      	cmp	r3, #64	; 0x40
 800596e:	d107      	bne.n	8005980 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f9b7 	bl	8005cee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b20      	cmp	r3, #32
 800598c:	d10e      	bne.n	80059ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0320 	and.w	r3, r3, #32
 8005998:	2b20      	cmp	r3, #32
 800599a:	d107      	bne.n	80059ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0220 	mvn.w	r2, #32
 80059a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f000 fcfd 	bl	80063a6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059ac:	bf00      	nop
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e0ac      	b.n	8005b28 <HAL_TIM_PWM_ConfigChannel+0x174>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	f200 809f 	bhi.w	8005b1c <HAL_TIM_PWM_ConfigChannel+0x168>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	08005a19 	.word	0x08005a19
 80059e8:	08005b1d 	.word	0x08005b1d
 80059ec:	08005b1d 	.word	0x08005b1d
 80059f0:	08005b1d 	.word	0x08005b1d
 80059f4:	08005a59 	.word	0x08005a59
 80059f8:	08005b1d 	.word	0x08005b1d
 80059fc:	08005b1d 	.word	0x08005b1d
 8005a00:	08005b1d 	.word	0x08005b1d
 8005a04:	08005a9b 	.word	0x08005a9b
 8005a08:	08005b1d 	.word	0x08005b1d
 8005a0c:	08005b1d 	.word	0x08005b1d
 8005a10:	08005b1d 	.word	0x08005b1d
 8005a14:	08005adb 	.word	0x08005adb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f9d0 	bl	8005dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0208 	orr.w	r2, r2, #8
 8005a32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0204 	bic.w	r2, r2, #4
 8005a42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6999      	ldr	r1, [r3, #24]
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	691a      	ldr	r2, [r3, #16]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	619a      	str	r2, [r3, #24]
      break;
 8005a56:	e062      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fa16 	bl	8005e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6999      	ldr	r1, [r3, #24]
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	021a      	lsls	r2, r3, #8
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	619a      	str	r2, [r3, #24]
      break;
 8005a98:	e041      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fa5f 	bl	8005f64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f042 0208 	orr.w	r2, r2, #8
 8005ab4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0204 	bic.w	r2, r2, #4
 8005ac4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	69d9      	ldr	r1, [r3, #28]
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	691a      	ldr	r2, [r3, #16]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	61da      	str	r2, [r3, #28]
      break;
 8005ad8:	e021      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68b9      	ldr	r1, [r7, #8]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 faa9 	bl	8006038 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69d9      	ldr	r1, [r3, #28]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	021a      	lsls	r2, r3, #8
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	61da      	str	r2, [r3, #28]
      break;
 8005b1a:	e000      	b.n	8005b1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005b1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIM_ConfigClockSource+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e0b3      	b.n	8005cb0 <HAL_TIM_ConfigClockSource+0x180>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b80:	d03e      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xd0>
 8005b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b86:	f200 8087 	bhi.w	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8e:	f000 8085 	beq.w	8005c9c <HAL_TIM_ConfigClockSource+0x16c>
 8005b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b96:	d87f      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005b98:	2b70      	cmp	r3, #112	; 0x70
 8005b9a:	d01a      	beq.n	8005bd2 <HAL_TIM_ConfigClockSource+0xa2>
 8005b9c:	2b70      	cmp	r3, #112	; 0x70
 8005b9e:	d87b      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005ba0:	2b60      	cmp	r3, #96	; 0x60
 8005ba2:	d050      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x116>
 8005ba4:	2b60      	cmp	r3, #96	; 0x60
 8005ba6:	d877      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005ba8:	2b50      	cmp	r3, #80	; 0x50
 8005baa:	d03c      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0xf6>
 8005bac:	2b50      	cmp	r3, #80	; 0x50
 8005bae:	d873      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d058      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x136>
 8005bb4:	2b40      	cmp	r3, #64	; 0x40
 8005bb6:	d86f      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005bb8:	2b30      	cmp	r3, #48	; 0x30
 8005bba:	d064      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x156>
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	d86b      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d060      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x156>
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	d867      	bhi.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d05c      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x156>
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d05a      	beq.n	8005c86 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005bd0:	e062      	b.n	8005c98 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6818      	ldr	r0, [r3, #0]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f000 faee 	bl	80061c2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bf4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	609a      	str	r2, [r3, #8]
      break;
 8005bfe:	e04e      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f000 fad7 	bl	80061c2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c22:	609a      	str	r2, [r3, #8]
      break;
 8005c24:	e03b      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f000 fa4e 	bl	80060d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2150      	movs	r1, #80	; 0x50
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 faa5 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005c44:	e02b      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fa6c 	bl	8006130 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2160      	movs	r1, #96	; 0x60
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fa95 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005c64:	e01b      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6818      	ldr	r0, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	6859      	ldr	r1, [r3, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f000 fa2e 	bl	80060d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2140      	movs	r1, #64	; 0x40
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f000 fa85 	bl	800618e <TIM_ITRx_SetConfig>
      break;
 8005c84:	e00b      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4619      	mov	r1, r3
 8005c90:	4610      	mov	r0, r2
 8005c92:	f000 fa7c 	bl	800618e <TIM_ITRx_SetConfig>
        break;
 8005c96:	e002      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c98:	bf00      	nop
 8005c9a:	e000      	b.n	8005c9e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c9c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b083      	sub	sp, #12
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bc80      	pop	{r7}
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bc80      	pop	{r7}
 8005cfe:	4770      	bx	lr

08005d00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a29      	ldr	r2, [pc, #164]	; (8005db8 <TIM_Base_SetConfig+0xb8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d00b      	beq.n	8005d30 <TIM_Base_SetConfig+0x30>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d1e:	d007      	beq.n	8005d30 <TIM_Base_SetConfig+0x30>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a26      	ldr	r2, [pc, #152]	; (8005dbc <TIM_Base_SetConfig+0xbc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d003      	beq.n	8005d30 <TIM_Base_SetConfig+0x30>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a25      	ldr	r2, [pc, #148]	; (8005dc0 <TIM_Base_SetConfig+0xc0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d108      	bne.n	8005d42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <TIM_Base_SetConfig+0xb8>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d00b      	beq.n	8005d62 <TIM_Base_SetConfig+0x62>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d50:	d007      	beq.n	8005d62 <TIM_Base_SetConfig+0x62>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a19      	ldr	r2, [pc, #100]	; (8005dbc <TIM_Base_SetConfig+0xbc>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d003      	beq.n	8005d62 <TIM_Base_SetConfig+0x62>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a18      	ldr	r2, [pc, #96]	; (8005dc0 <TIM_Base_SetConfig+0xc0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d108      	bne.n	8005d74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a07      	ldr	r2, [pc, #28]	; (8005db8 <TIM_Base_SetConfig+0xb8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	615a      	str	r2, [r3, #20]
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bc80      	pop	{r7}
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40000400 	.word	0x40000400
 8005dc0:	40000800 	.word	0x40000800

08005dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 0302 	bic.w	r3, r3, #2
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <TIM_OC1_SetConfig+0xc8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10c      	bne.n	8005e3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f023 0308 	bic.w	r3, r3, #8
 8005e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f023 0304 	bic.w	r3, r3, #4
 8005e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <TIM_OC1_SetConfig+0xc8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d111      	bne.n	8005e66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	695b      	ldr	r3, [r3, #20]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	621a      	str	r2, [r3, #32]
}
 8005e80:	bf00      	nop
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40012c00 	.word	0x40012c00

08005e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f023 0210 	bic.w	r2, r3, #16
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f023 0320 	bic.w	r3, r3, #32
 8005eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	011b      	lsls	r3, r3, #4
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <TIM_OC2_SetConfig+0xd0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10d      	bne.n	8005f0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a14      	ldr	r2, [pc, #80]	; (8005f60 <TIM_OC2_SetConfig+0xd0>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d113      	bne.n	8005f3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	697a      	ldr	r2, [r7, #20]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bc80      	pop	{r7}
 8005f5e:	4770      	bx	lr
 8005f60:	40012c00 	.word	0x40012c00

08005f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	69db      	ldr	r3, [r3, #28]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	021b      	lsls	r3, r3, #8
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a1d      	ldr	r2, [pc, #116]	; (8006034 <TIM_OC3_SetConfig+0xd0>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d10d      	bne.n	8005fde <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a14      	ldr	r2, [pc, #80]	; (8006034 <TIM_OC3_SetConfig+0xd0>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d113      	bne.n	800600e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	4313      	orrs	r3, r2
 800600c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	621a      	str	r2, [r3, #32]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	bc80      	pop	{r7}
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00

08006038 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	69db      	ldr	r3, [r3, #28]
 800605e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800606e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	021b      	lsls	r3, r3, #8
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006082:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	031b      	lsls	r3, r3, #12
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <TIM_OC4_SetConfig+0x98>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d109      	bne.n	80060ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800609e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	019b      	lsls	r3, r3, #6
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc80      	pop	{r7}
 80060ce:	4770      	bx	lr
 80060d0:	40012c00 	.word	0x40012c00

080060d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f023 0201 	bic.w	r2, r3, #1
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	699b      	ldr	r3, [r3, #24]
 80060f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	011b      	lsls	r3, r3, #4
 8006104:	693a      	ldr	r2, [r7, #16]
 8006106:	4313      	orrs	r3, r2
 8006108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f023 030a 	bic.w	r3, r3, #10
 8006110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	4313      	orrs	r3, r2
 8006118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr

08006130 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f023 0210 	bic.w	r2, r3, #16
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800615a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	031b      	lsls	r3, r3, #12
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800616c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	4313      	orrs	r3, r2
 8006176:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr

0800618e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800618e:	b480      	push	{r7}
 8006190:	b085      	sub	sp, #20
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
 8006196:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f043 0307 	orr.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	609a      	str	r2, [r3, #8]
}
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	bc80      	pop	{r7}
 80061c0:	4770      	bx	lr

080061c2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b087      	sub	sp, #28
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061dc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	021a      	lsls	r2, r3, #8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	431a      	orrs	r2, r3
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	609a      	str	r2, [r3, #8]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	2201      	movs	r2, #1
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a1a      	ldr	r2, [r3, #32]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	43db      	mvns	r3, r3
 8006222:	401a      	ands	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1a      	ldr	r2, [r3, #32]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f003 031f 	and.w	r3, r3, #31
 8006232:	6879      	ldr	r1, [r7, #4]
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	621a      	str	r2, [r3, #32]
}
 800623e:	bf00      	nop
 8006240:	371c      	adds	r7, #28
 8006242:	46bd      	mov	sp, r7
 8006244:	bc80      	pop	{r7}
 8006246:	4770      	bx	lr

08006248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006258:	2b01      	cmp	r3, #1
 800625a:	d101      	bne.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800625c:	2302      	movs	r3, #2
 800625e:	e046      	b.n	80062ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a16      	ldr	r2, [pc, #88]	; (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d00e      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d009      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a12      	ldr	r2, [pc, #72]	; (80062fc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d004      	beq.n	80062c2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a10      	ldr	r2, [pc, #64]	; (8006300 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10c      	bne.n	80062dc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68ba      	ldr	r2, [r7, #8]
 80062da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800

08006304 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d101      	bne.n	8006320 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800631c:	2302      	movs	r3, #2
 800631e:	e03d      	b.n	800639c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	4313      	orrs	r3, r2
 8006342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	4313      	orrs	r3, r2
 8006350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ae:	bf00      	nop
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bc80      	pop	{r7}
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr

080063ca <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063ca:	b084      	sub	sp, #16
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	f107 0014 	add.w	r0, r7, #20
 80063d8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bc80      	pop	{r7}
 80063e6:	b004      	add	sp, #16
 80063e8:	4770      	bx	lr

080063ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063fa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063fe:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr

08006416 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006416:	b480      	push	{r7}
 8006418:	b085      	sub	sp, #20
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800641e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006422:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800642a:	b29a      	uxth	r2, r3
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	b29b      	uxth	r3, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	b29b      	uxth	r3, r3
 8006434:	4013      	ands	r3, r2
 8006436:	b29a      	uxth	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	460b      	mov	r3, r1
 8006454:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr

08006462 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006462:	b084      	sub	sp, #16
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	f107 0014 	add.w	r0, r7, #20
 8006470:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	b004      	add	sp, #16
 80064a0:	4770      	bx	lr
	...

080064a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b09b      	sub	sp, #108	; 0x6c
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80064c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	78db      	ldrb	r3, [r3, #3]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d81f      	bhi.n	8006516 <USB_ActivateEndpoint+0x72>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <USB_ActivateEndpoint+0x38>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	08006509 	.word	0x08006509
 80064e4:	0800651f 	.word	0x0800651f
 80064e8:	080064fb 	.word	0x080064fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064f4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064f8:	e012      	b.n	8006520 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064fe:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006502:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006506:	e00b      	b.n	8006520 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006508:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800650c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006510:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006514:	e004      	b.n	8006520 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800651c:	e000      	b.n	8006520 <USB_ActivateEndpoint+0x7c>
      break;
 800651e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	441a      	add	r2, r3
 800652a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800652e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800653a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653e:	b29b      	uxth	r3, r3
 8006540:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	b29b      	uxth	r3, r3
 8006550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006558:	b29a      	uxth	r2, r3
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	4313      	orrs	r3, r2
 8006562:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	441a      	add	r2, r3
 8006570:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8006574:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006578:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800657c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006584:	b29b      	uxth	r3, r3
 8006586:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	7b1b      	ldrb	r3, [r3, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	f040 8149 	bne.w	8006824 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	785b      	ldrb	r3, [r3, #1]
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8084 	beq.w	80066a4 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	617b      	str	r3, [r7, #20]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	461a      	mov	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	4413      	add	r3, r2
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	011a      	lsls	r2, r3, #4
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	88db      	ldrh	r3, [r3, #6]
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4413      	add	r3, r2
 80065da:	881b      	ldrh	r3, [r3, #0]
 80065dc:	81fb      	strh	r3, [r7, #14]
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d01b      	beq.n	8006620 <USB_ActivateEndpoint+0x17c>
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065fe:	81bb      	strh	r3, [r7, #12]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	89bb      	ldrh	r3, [r7, #12]
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006618:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	78db      	ldrb	r3, [r3, #3]
 8006624:	2b01      	cmp	r3, #1
 8006626:	d020      	beq.n	800666a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	881b      	ldrh	r3, [r3, #0]
 8006634:	b29b      	uxth	r3, r3
 8006636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800663a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663e:	813b      	strh	r3, [r7, #8]
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	f083 0320 	eor.w	r3, r3, #32
 8006646:	813b      	strh	r3, [r7, #8]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	781b      	ldrb	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	441a      	add	r2, r3
 8006652:	893b      	ldrh	r3, [r7, #8]
 8006654:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006658:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800665c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006664:	b29b      	uxth	r3, r3
 8006666:	8013      	strh	r3, [r2, #0]
 8006668:	e27f      	b.n	8006b6a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800667c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006680:	817b      	strh	r3, [r7, #10]
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	441a      	add	r2, r3
 800668c:	897b      	ldrh	r3, [r7, #10]
 800668e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	8013      	strh	r3, [r2, #0]
 80066a2:	e262      	b.n	8006b6a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b4:	4413      	add	r3, r2
 80066b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	011a      	lsls	r2, r3, #4
 80066be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c0:	4413      	add	r3, r2
 80066c2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80066c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	88db      	ldrh	r3, [r3, #6]
 80066cc:	085b      	lsrs	r3, r3, #1
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	627b      	str	r3, [r7, #36]	; 0x24
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	461a      	mov	r2, r3
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	4413      	add	r3, r2
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	011a      	lsls	r2, r3, #4
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	4413      	add	r3, r2
 80066f6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066fa:	623b      	str	r3, [r7, #32]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d112      	bne.n	800672a <USB_ActivateEndpoint+0x286>
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800670e:	b29a      	uxth	r2, r3
 8006710:	6a3b      	ldr	r3, [r7, #32]
 8006712:	801a      	strh	r2, [r3, #0]
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	b29b      	uxth	r3, r3
 800671a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800671e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006722:	b29a      	uxth	r2, r3
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	801a      	strh	r2, [r3, #0]
 8006728:	e02f      	b.n	800678a <USB_ActivateEndpoint+0x2e6>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	2b3e      	cmp	r3, #62	; 0x3e
 8006730:	d813      	bhi.n	800675a <USB_ActivateEndpoint+0x2b6>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	085b      	lsrs	r3, r3, #1
 8006738:	663b      	str	r3, [r7, #96]	; 0x60
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <USB_ActivateEndpoint+0x2a8>
 8006746:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006748:	3301      	adds	r3, #1
 800674a:	663b      	str	r3, [r7, #96]	; 0x60
 800674c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800674e:	b29b      	uxth	r3, r3
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	b29a      	uxth	r2, r3
 8006754:	6a3b      	ldr	r3, [r7, #32]
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e017      	b.n	800678a <USB_ActivateEndpoint+0x2e6>
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	095b      	lsrs	r3, r3, #5
 8006760:	663b      	str	r3, [r7, #96]	; 0x60
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	691b      	ldr	r3, [r3, #16]
 8006766:	f003 031f 	and.w	r3, r3, #31
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <USB_ActivateEndpoint+0x2d0>
 800676e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006770:	3b01      	subs	r3, #1
 8006772:	663b      	str	r3, [r7, #96]	; 0x60
 8006774:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006776:	b29b      	uxth	r3, r3
 8006778:	029b      	lsls	r3, r3, #10
 800677a:	b29b      	uxth	r3, r3
 800677c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006784:	b29a      	uxth	r2, r3
 8006786:	6a3b      	ldr	r3, [r7, #32]
 8006788:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	83fb      	strh	r3, [r7, #30]
 8006798:	8bfb      	ldrh	r3, [r7, #30]
 800679a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d01b      	beq.n	80067da <USB_ActivateEndpoint+0x336>
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	881b      	ldrh	r3, [r3, #0]
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b8:	83bb      	strh	r3, [r7, #28]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8bbb      	ldrh	r3, [r7, #28]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	837b      	strh	r3, [r7, #26]
 80067f2:	8b7b      	ldrh	r3, [r7, #26]
 80067f4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067f8:	837b      	strh	r3, [r7, #26]
 80067fa:	8b7b      	ldrh	r3, [r7, #26]
 80067fc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006800:	837b      	strh	r3, [r7, #26]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	441a      	add	r2, r3
 800680c:	8b7b      	ldrh	r3, [r7, #26]
 800680e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006812:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800681e:	b29b      	uxth	r3, r3
 8006820:	8013      	strh	r3, [r2, #0]
 8006822:	e1a2      	b.n	8006b6a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	441a      	add	r2, r3
 8006848:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800684c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006854:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800685c:	b29b      	uxth	r3, r3
 800685e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	65bb      	str	r3, [r7, #88]	; 0x58
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686a:	b29b      	uxth	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006870:	4413      	add	r3, r2
 8006872:	65bb      	str	r3, [r7, #88]	; 0x58
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	011a      	lsls	r2, r3, #4
 800687a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800687c:	4413      	add	r3, r2
 800687e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006882:	657b      	str	r3, [r7, #84]	; 0x54
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	891b      	ldrh	r3, [r3, #8]
 8006888:	085b      	lsrs	r3, r3, #1
 800688a:	b29b      	uxth	r3, r3
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	653b      	str	r3, [r7, #80]	; 0x50
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689e:	b29b      	uxth	r3, r3
 80068a0:	461a      	mov	r2, r3
 80068a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a4:	4413      	add	r3, r2
 80068a6:	653b      	str	r3, [r7, #80]	; 0x50
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	011a      	lsls	r2, r3, #4
 80068ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80068b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	895b      	ldrh	r3, [r3, #10]
 80068bc:	085b      	lsrs	r3, r3, #1
 80068be:	b29b      	uxth	r3, r3
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	785b      	ldrb	r3, [r3, #1]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 8091 	bne.w	80069f4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	4413      	add	r3, r2
 80068dc:	881b      	ldrh	r3, [r3, #0]
 80068de:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80068e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80068e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01b      	beq.n	8006922 <USB_ActivateEndpoint+0x47e>
 80068ea:	687a      	ldr	r2, [r7, #4]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	881b      	ldrh	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006900:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	441a      	add	r2, r3
 800690c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006916:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800691a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	881b      	ldrh	r3, [r3, #0]
 800692e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006930:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01b      	beq.n	8006972 <USB_ActivateEndpoint+0x4ce>
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	881b      	ldrh	r3, [r3, #0]
 8006946:	b29b      	uxth	r3, r3
 8006948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006950:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006988:	86bb      	strh	r3, [r7, #52]	; 0x34
 800698a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800698c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006990:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006992:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006994:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006998:	86bb      	strh	r3, [r7, #52]	; 0x34
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	441a      	add	r2, r3
 80069a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80069a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069d0:	867b      	strh	r3, [r7, #50]	; 0x32
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80069de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8013      	strh	r3, [r2, #0]
 80069f2:	e0ba      	b.n	8006b6a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	881b      	ldrh	r3, [r3, #0]
 8006a00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006a04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006a08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01d      	beq.n	8006a4c <USB_ActivateEndpoint+0x5a8>
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	881b      	ldrh	r3, [r3, #0]
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a26:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	441a      	add	r2, r3
 8006a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006a38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	881b      	ldrh	r3, [r3, #0]
 8006a58:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01d      	beq.n	8006aa4 <USB_ActivateEndpoint+0x600>
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	009b      	lsls	r3, r3, #2
 8006a70:	4413      	add	r3, r2
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	441a      	add	r2, r3
 8006a8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	78db      	ldrb	r3, [r3, #3]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d024      	beq.n	8006af6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	4413      	add	r3, r2
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ac6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006aca:	f083 0320 	eor.w	r3, r3, #32
 8006ace:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	441a      	add	r2, r3
 8006adc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006ae0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ae4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ae8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	8013      	strh	r3, [r2, #0]
 8006af4:	e01d      	b.n	8006b32 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006b10:	687a      	ldr	r2, [r7, #4]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	441a      	add	r2, r3
 8006b1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006b1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	4413      	add	r3, r2
 8006b3c:	881b      	ldrh	r3, [r3, #0]
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b48:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	441a      	add	r2, r3
 8006b54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	376c      	adds	r7, #108	; 0x6c
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc80      	pop	{r7}
 8006b76:	4770      	bx	lr

08006b78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b08d      	sub	sp, #52	; 0x34
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	7b1b      	ldrb	r3, [r3, #12]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f040 808e 	bne.w	8006ca8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	785b      	ldrb	r3, [r3, #1]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d044      	beq.n	8006c1e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4413      	add	r3, r2
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	81bb      	strh	r3, [r7, #12]
 8006ba2:	89bb      	ldrh	r3, [r7, #12]
 8006ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01b      	beq.n	8006be4 <USB_DeactivateEndpoint+0x6c>
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	881b      	ldrh	r3, [r3, #0]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc2:	817b      	strh	r3, [r7, #10]
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	441a      	add	r2, r3
 8006bce:	897b      	ldrh	r3, [r7, #10]
 8006bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006be0:	b29b      	uxth	r3, r3
 8006be2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bfa:	813b      	strh	r3, [r7, #8]
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	441a      	add	r2, r3
 8006c06:	893b      	ldrh	r3, [r7, #8]
 8006c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	8013      	strh	r3, [r2, #0]
 8006c1c:	e192      	b.n	8006f44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	827b      	strh	r3, [r7, #18]
 8006c2c:	8a7b      	ldrh	r3, [r7, #18]
 8006c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01b      	beq.n	8006c6e <USB_DeactivateEndpoint+0xf6>
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4c:	823b      	strh	r3, [r7, #16]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	009b      	lsls	r3, r3, #2
 8006c56:	441a      	add	r2, r3
 8006c58:	8a3b      	ldrh	r3, [r7, #16]
 8006c5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c84:	81fb      	strh	r3, [r7, #14]
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	441a      	add	r2, r3
 8006c90:	89fb      	ldrh	r3, [r7, #14]
 8006c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	8013      	strh	r3, [r2, #0]
 8006ca6:	e14d      	b.n	8006f44 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f040 80a5 	bne.w	8006dfc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	843b      	strh	r3, [r7, #32]
 8006cc0:	8c3b      	ldrh	r3, [r7, #32]
 8006cc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d01b      	beq.n	8006d02 <USB_DeactivateEndpoint+0x18a>
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	881b      	ldrh	r3, [r3, #0]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce0:	83fb      	strh	r3, [r7, #30]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	441a      	add	r2, r3
 8006cec:	8bfb      	ldrh	r3, [r7, #30]
 8006cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	4413      	add	r3, r2
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	83bb      	strh	r3, [r7, #28]
 8006d10:	8bbb      	ldrh	r3, [r7, #28]
 8006d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d01b      	beq.n	8006d52 <USB_DeactivateEndpoint+0x1da>
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	009b      	lsls	r3, r3, #2
 8006d22:	4413      	add	r3, r2
 8006d24:	881b      	ldrh	r3, [r3, #0]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d30:	837b      	strh	r3, [r7, #26]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	441a      	add	r2, r3
 8006d3c:	8b7b      	ldrh	r3, [r7, #26]
 8006d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	4413      	add	r3, r2
 8006d5c:	881b      	ldrh	r3, [r3, #0]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d68:	833b      	strh	r3, [r7, #24]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	441a      	add	r2, r3
 8006d74:	8b3b      	ldrh	r3, [r7, #24]
 8006d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	881b      	ldrh	r3, [r3, #0]
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006da0:	82fb      	strh	r3, [r7, #22]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	441a      	add	r2, r3
 8006dac:	8afb      	ldrh	r3, [r7, #22]
 8006dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	82bb      	strh	r3, [r7, #20]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	8abb      	ldrh	r3, [r7, #20]
 8006de6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	8013      	strh	r3, [r2, #0]
 8006dfa:	e0a3      	b.n	8006f44 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006e0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d01b      	beq.n	8006e4c <USB_DeactivateEndpoint+0x2d4>
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	4413      	add	r3, r2
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	4413      	add	r3, r2
 8006e56:	881b      	ldrh	r3, [r3, #0]
 8006e58:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d01b      	beq.n	8006e9c <USB_DeactivateEndpoint+0x324>
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e7a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	441a      	add	r2, r3
 8006e86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	881b      	ldrh	r3, [r3, #0]
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	441a      	add	r2, r3
 8006ebe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	4413      	add	r3, r2
 8006ede:	881b      	ldrh	r3, [r3, #0]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eea:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	441a      	add	r2, r3
 8006ef6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	847b      	strh	r3, [r7, #34]	; 0x22
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	441a      	add	r2, r3
 8006f2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3734      	adds	r7, #52	; 0x34
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b0cc      	sub	sp, #304	; 0x130
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5e:	6018      	str	r0, [r3, #0]
 8006f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f68:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	785b      	ldrb	r3, [r3, #1]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	f041 817d 	bne.w	8008276 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d908      	bls.n	8006faa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006fa8:	e007      	b.n	8006fba <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006fba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	7b1b      	ldrb	r3, [r3, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d152      	bne.n	8007070 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006fca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6959      	ldr	r1, [r3, #20]
 8006fd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	88da      	ldrh	r2, [r3, #6]
 8006fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006ff0:	6800      	ldr	r0, [r0, #0]
 8006ff2:	f001 ff23 	bl	8008e3c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006ffe:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007002:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007006:	6812      	ldr	r2, [r2, #0]
 8007008:	601a      	str	r2, [r3, #0]
 800700a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007018:	b29b      	uxth	r3, r3
 800701a:	4619      	mov	r1, r3
 800701c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007020:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007024:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007028:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800702c:	6812      	ldr	r2, [r2, #0]
 800702e:	440a      	add	r2, r1
 8007030:	601a      	str	r2, [r3, #0]
 8007032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	011a      	lsls	r2, r3, #4
 8007040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007044:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4413      	add	r3, r2
 800704c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007054:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007058:	601a      	str	r2, [r3, #0]
 800705a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800705e:	b29a      	uxth	r2, r3
 8007060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007064:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	801a      	strh	r2, [r3, #0]
 800706c:	f001 b8b5 	b.w	80081da <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	78db      	ldrb	r3, [r3, #3]
 800707c:	2b02      	cmp	r3, #2
 800707e:	f040 84c6 	bne.w	8007a0e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6a1a      	ldr	r2, [r3, #32]
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	429a      	cmp	r2, r3
 800709c:	f240 8443 	bls.w	8007926 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80070a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070c6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80070ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	441a      	add	r2, r3
 80070e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070f0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007100:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6a1a      	ldr	r2, [r3, #32]
 8007108:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800710c:	1ad2      	subs	r2, r2, r3
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800711a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b29b      	uxth	r3, r3
 8007138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 823e 	beq.w	80075be <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007146:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800714a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800714e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	601a      	str	r2, [r3, #0]
 8007156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800715a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 809a 	bne.w	800729c <USB_EPStartXfer+0x34c>
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007170:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007174:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007180:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800718a:	b29b      	uxth	r3, r3
 800718c:	4619      	mov	r1, r3
 800718e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007196:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800719a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	440a      	add	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	011a      	lsls	r2, r3, #4
 80071b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4413      	add	r3, r2
 80071be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80071c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071ca:	601a      	str	r2, [r3, #0]
 80071cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d122      	bne.n	800721a <USB_EPStartXfer+0x2ca>
 80071d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	881b      	ldrh	r3, [r3, #0]
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	801a      	strh	r2, [r3, #0]
 80071f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	881b      	ldrh	r3, [r3, #0]
 8007200:	b29b      	uxth	r3, r3
 8007202:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007206:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720a:	b29a      	uxth	r2, r3
 800720c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007210:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	801a      	strh	r2, [r3, #0]
 8007218:	e079      	b.n	800730e <USB_EPStartXfer+0x3be>
 800721a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721e:	2b3e      	cmp	r3, #62	; 0x3e
 8007220:	d81b      	bhi.n	800725a <USB_EPStartXfer+0x30a>
 8007222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007226:	085b      	lsrs	r3, r3, #1
 8007228:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800722c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <USB_EPStartXfer+0x2f2>
 8007238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800723c:	3301      	adds	r3, #1
 800723e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007246:	b29b      	uxth	r3, r3
 8007248:	029b      	lsls	r3, r3, #10
 800724a:	b29a      	uxth	r2, r3
 800724c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007250:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	801a      	strh	r2, [r3, #0]
 8007258:	e059      	b.n	800730e <USB_EPStartXfer+0x3be>
 800725a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800725e:	095b      	lsrs	r3, r3, #5
 8007260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007268:	f003 031f 	and.w	r3, r3, #31
 800726c:	2b00      	cmp	r3, #0
 800726e:	d104      	bne.n	800727a <USB_EPStartXfer+0x32a>
 8007270:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007274:	3b01      	subs	r3, #1
 8007276:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800727a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800727e:	b29b      	uxth	r3, r3
 8007280:	029b      	lsls	r3, r3, #10
 8007282:	b29b      	uxth	r3, r3
 8007284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728c:	b29a      	uxth	r2, r3
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	801a      	strh	r2, [r3, #0]
 800729a:	e038      	b.n	800730e <USB_EPStartXfer+0x3be>
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	785b      	ldrb	r3, [r3, #1]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d130      	bne.n	800730e <USB_EPStartXfer+0x3be>
 80072ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	4619      	mov	r1, r3
 80072be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80072c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80072ca:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	440a      	add	r2, r1
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	011a      	lsls	r2, r3, #4
 80072e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4413      	add	r3, r2
 80072ee:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80072f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	b29a      	uxth	r2, r3
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800730e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	895b      	ldrh	r3, [r3, #10]
 800731a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800731e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007322:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	6959      	ldr	r1, [r3, #20]
 800732a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800732e:	b29b      	uxth	r3, r3
 8007330:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007334:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007338:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800733c:	6800      	ldr	r0, [r0, #0]
 800733e:	f001 fd7d 	bl	8008e3c <USB_WritePMA>
            ep->xfer_buff += len;
 8007342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695a      	ldr	r2, [r3, #20]
 800734e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007352:	441a      	add	r2, r3
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6a1a      	ldr	r2, [r3, #32]
 800736c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007370:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	429a      	cmp	r2, r3
 800737a:	d90f      	bls.n	800739c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800738c:	1ad2      	subs	r2, r2, r3
 800738e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007392:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	621a      	str	r2, [r3, #32]
 800739a:	e00e      	b.n	80073ba <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800739c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80073ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	785b      	ldrb	r3, [r3, #1]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 809a 	bne.w	8007500 <USB_EPStartXfer+0x5b0>
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80073d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073d8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80073dc:	6812      	ldr	r2, [r2, #0]
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	4619      	mov	r1, r3
 80073f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80073fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073fe:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007402:	6812      	ldr	r2, [r2, #0]
 8007404:	440a      	add	r2, r1
 8007406:	601a      	str	r2, [r3, #0]
 8007408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800740c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	011a      	lsls	r2, r3, #4
 8007416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800741a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4413      	add	r3, r2
 8007422:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d122      	bne.n	800747e <USB_EPStartXfer+0x52e>
 8007438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800744a:	b29a      	uxth	r2, r3
 800744c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007450:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	801a      	strh	r2, [r3, #0]
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	b29b      	uxth	r3, r3
 8007466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800746a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746e:	b29a      	uxth	r2, r3
 8007470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007474:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	801a      	strh	r2, [r3, #0]
 800747c:	e083      	b.n	8007586 <USB_EPStartXfer+0x636>
 800747e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007482:	2b3e      	cmp	r3, #62	; 0x3e
 8007484:	d81b      	bhi.n	80074be <USB_EPStartXfer+0x56e>
 8007486:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800748a:	085b      	lsrs	r3, r3, #1
 800748c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <USB_EPStartXfer+0x556>
 800749c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074a0:	3301      	adds	r3, #1
 80074a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	029b      	lsls	r3, r3, #10
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	e063      	b.n	8007586 <USB_EPStartXfer+0x636>
 80074be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <USB_EPStartXfer+0x58e>
 80074d4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074d8:	3b01      	subs	r3, #1
 80074da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80074de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	029b      	lsls	r3, r3, #10
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	e042      	b.n	8007586 <USB_EPStartXfer+0x636>
 8007500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007504:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d13a      	bne.n	8007586 <USB_EPStartXfer+0x636>
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007518:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800751c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007520:	6812      	ldr	r2, [r2, #0]
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007532:	b29b      	uxth	r3, r3
 8007534:	4619      	mov	r1, r3
 8007536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800753a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800753e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007542:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8007546:	6812      	ldr	r2, [r2, #0]
 8007548:	440a      	add	r2, r1
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	011a      	lsls	r2, r3, #4
 800755a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800755e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4413      	add	r3, r2
 8007566:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800756a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007578:	b29a      	uxth	r2, r3
 800757a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	891b      	ldrh	r3, [r3, #8]
 8007592:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800759a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6959      	ldr	r1, [r3, #20]
 80075a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80075ac:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80075b0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80075b4:	6800      	ldr	r0, [r0, #0]
 80075b6:	f001 fc41 	bl	8008e3c <USB_WritePMA>
 80075ba:	f000 be0e 	b.w	80081da <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80075be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	785b      	ldrb	r3, [r3, #1]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d16d      	bne.n	80076aa <USB_EPStartXfer+0x75a>
 80075ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	461a      	mov	r2, r3
 80075ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ee:	4413      	add	r3, r2
 80075f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	011a      	lsls	r2, r3, #4
 8007600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007602:	4413      	add	r3, r2
 8007604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007608:	647b      	str	r3, [r7, #68]	; 0x44
 800760a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d112      	bne.n	8007638 <USB_EPStartXfer+0x6e8>
 8007612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	b29b      	uxth	r3, r3
 8007618:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800761c:	b29a      	uxth	r2, r3
 800761e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007624:	881b      	ldrh	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007630:	b29a      	uxth	r2, r3
 8007632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007634:	801a      	strh	r2, [r3, #0]
 8007636:	e063      	b.n	8007700 <USB_EPStartXfer+0x7b0>
 8007638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800763c:	2b3e      	cmp	r3, #62	; 0x3e
 800763e:	d817      	bhi.n	8007670 <USB_EPStartXfer+0x720>
 8007640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007644:	085b      	lsrs	r3, r3, #1
 8007646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800764a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	2b00      	cmp	r3, #0
 8007654:	d004      	beq.n	8007660 <USB_EPStartXfer+0x710>
 8007656:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800765a:	3301      	adds	r3, #1
 800765c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007660:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007664:	b29b      	uxth	r3, r3
 8007666:	029b      	lsls	r3, r3, #10
 8007668:	b29a      	uxth	r2, r3
 800766a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e047      	b.n	8007700 <USB_EPStartXfer+0x7b0>
 8007670:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800767a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800767e:	f003 031f 	and.w	r3, r3, #31
 8007682:	2b00      	cmp	r3, #0
 8007684:	d104      	bne.n	8007690 <USB_EPStartXfer+0x740>
 8007686:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800768a:	3b01      	subs	r3, #1
 800768c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007690:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007694:	b29b      	uxth	r3, r3
 8007696:	029b      	lsls	r3, r3, #10
 8007698:	b29b      	uxth	r3, r3
 800769a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076a6:	801a      	strh	r2, [r3, #0]
 80076a8:	e02a      	b.n	8007700 <USB_EPStartXfer+0x7b0>
 80076aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d122      	bne.n	8007700 <USB_EPStartXfer+0x7b0>
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	653b      	str	r3, [r7, #80]	; 0x50
 80076c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	461a      	mov	r2, r3
 80076d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076da:	4413      	add	r3, r2
 80076dc:	653b      	str	r3, [r7, #80]	; 0x50
 80076de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	011a      	lsls	r2, r3, #4
 80076ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ee:	4413      	add	r3, r2
 80076f0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	891b      	ldrh	r3, [r3, #8]
 800770c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	6959      	ldr	r1, [r3, #20]
 800771c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007720:	b29b      	uxth	r3, r3
 8007722:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007726:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800772a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800772e:	6800      	ldr	r0, [r0, #0]
 8007730:	f001 fb84 	bl	8008e3c <USB_WritePMA>
            ep->xfer_buff += len;
 8007734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007744:	441a      	add	r2, r3
 8007746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	429a      	cmp	r2, r3
 800776c:	d90f      	bls.n	800778e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800776e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6a1a      	ldr	r2, [r3, #32]
 800777a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	621a      	str	r2, [r3, #32]
 800778c:	e00e      	b.n	80077ac <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800778e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800779e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2200      	movs	r2, #0
 80077aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80077ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	643b      	str	r3, [r7, #64]	; 0x40
 80077b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d16d      	bne.n	80078a4 <USB_EPStartXfer+0x954>
 80077c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077e2:	b29b      	uxth	r3, r3
 80077e4:	461a      	mov	r2, r3
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	4413      	add	r3, r2
 80077ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80077ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	011a      	lsls	r2, r3, #4
 80077fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077fc:	4413      	add	r3, r2
 80077fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
 8007804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007808:	2b00      	cmp	r3, #0
 800780a:	d112      	bne.n	8007832 <USB_EPStartXfer+0x8e2>
 800780c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800780e:	881b      	ldrh	r3, [r3, #0]
 8007810:	b29b      	uxth	r3, r3
 8007812:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007816:	b29a      	uxth	r2, r3
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	801a      	strh	r2, [r3, #0]
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	b29b      	uxth	r3, r3
 8007822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800782a:	b29a      	uxth	r2, r3
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	801a      	strh	r2, [r3, #0]
 8007830:	e05d      	b.n	80078ee <USB_EPStartXfer+0x99e>
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	2b3e      	cmp	r3, #62	; 0x3e
 8007838:	d817      	bhi.n	800786a <USB_EPStartXfer+0x91a>
 800783a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d004      	beq.n	800785a <USB_EPStartXfer+0x90a>
 8007850:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007854:	3301      	adds	r3, #1
 8007856:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800785a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800785e:	b29b      	uxth	r3, r3
 8007860:	029b      	lsls	r3, r3, #10
 8007862:	b29a      	uxth	r2, r3
 8007864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007866:	801a      	strh	r2, [r3, #0]
 8007868:	e041      	b.n	80078ee <USB_EPStartXfer+0x99e>
 800786a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2b00      	cmp	r3, #0
 800787e:	d104      	bne.n	800788a <USB_EPStartXfer+0x93a>
 8007880:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007884:	3b01      	subs	r3, #1
 8007886:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800788a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800788e:	b29b      	uxth	r3, r3
 8007890:	029b      	lsls	r3, r3, #10
 8007892:	b29b      	uxth	r3, r3
 8007894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789c:	b29a      	uxth	r2, r3
 800789e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078a0:	801a      	strh	r2, [r3, #0]
 80078a2:	e024      	b.n	80078ee <USB_EPStartXfer+0x99e>
 80078a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	785b      	ldrb	r3, [r3, #1]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d11c      	bne.n	80078ee <USB_EPStartXfer+0x99e>
 80078b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	461a      	mov	r2, r3
 80078c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078c8:	4413      	add	r3, r2
 80078ca:	643b      	str	r3, [r7, #64]	; 0x40
 80078cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	011a      	lsls	r2, r3, #4
 80078da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078dc:	4413      	add	r3, r2
 80078de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80078e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	895b      	ldrh	r3, [r3, #10]
 80078fa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6959      	ldr	r1, [r3, #20]
 800790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790e:	b29b      	uxth	r3, r3
 8007910:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007914:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007918:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800791c:	6800      	ldr	r0, [r0, #0]
 800791e:	f001 fa8d 	bl	8008e3c <USB_WritePMA>
 8007922:	f000 bc5a 	b.w	80081da <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8007936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800793a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007944:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	4413      	add	r3, r2
 8007950:	881b      	ldrh	r3, [r3, #0]
 8007952:	b29b      	uxth	r3, r3
 8007954:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800795c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007964:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800796e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	441a      	add	r2, r3
 800797a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800797e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800798a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800798e:	b29b      	uxth	r3, r3
 8007990:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800799e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	461a      	mov	r2, r3
 80079b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079b2:	4413      	add	r3, r2
 80079b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	011a      	lsls	r2, r3, #4
 80079c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079c6:	4413      	add	r3, r2
 80079c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80079cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80079ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80079d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	891b      	ldrh	r3, [r3, #8]
 80079e4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	6959      	ldr	r1, [r3, #20]
 80079f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079fe:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007a02:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007a06:	6800      	ldr	r0, [r0, #0]
 8007a08:	f001 fa18 	bl	8008e3c <USB_WritePMA>
 8007a0c:	e3e5      	b.n	80081da <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007a0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	441a      	add	r2, r3
 8007a52:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007a56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a5e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6a1a      	ldr	r2, [r3, #32]
 8007a76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	881b      	ldrh	r3, [r3, #0]
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 81bc 	beq.w	8007e28 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	785b      	ldrb	r3, [r3, #1]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d16d      	bne.n	8007baa <USB_EPStartXfer+0xc5a>
 8007ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aee:	4413      	add	r3, r2
 8007af0:	67bb      	str	r3, [r7, #120]	; 0x78
 8007af2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	011a      	lsls	r2, r3, #4
 8007b00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b02:	4413      	add	r3, r2
 8007b04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b08:	677b      	str	r3, [r7, #116]	; 0x74
 8007b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d112      	bne.n	8007b38 <USB_EPStartXfer+0xbe8>
 8007b12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e060      	b.n	8007bfa <USB_EPStartXfer+0xcaa>
 8007b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b3c:	2b3e      	cmp	r3, #62	; 0x3e
 8007b3e:	d817      	bhi.n	8007b70 <USB_EPStartXfer+0xc20>
 8007b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d004      	beq.n	8007b60 <USB_EPStartXfer+0xc10>
 8007b56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	029b      	lsls	r3, r3, #10
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	e044      	b.n	8007bfa <USB_EPStartXfer+0xcaa>
 8007b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b74:	095b      	lsrs	r3, r3, #5
 8007b76:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b7e:	f003 031f 	and.w	r3, r3, #31
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <USB_EPStartXfer+0xc40>
 8007b86:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b90:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	029b      	lsls	r3, r3, #10
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ba2:	b29a      	uxth	r2, r3
 8007ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ba6:	801a      	strh	r2, [r3, #0]
 8007ba8:	e027      	b.n	8007bfa <USB_EPStartXfer+0xcaa>
 8007baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d11f      	bne.n	8007bfa <USB_EPStartXfer+0xcaa>
 8007bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	461a      	mov	r2, r3
 8007bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	011a      	lsls	r2, r3, #4
 8007be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007be8:	4413      	add	r3, r2
 8007bea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007bee:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007bf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	895b      	ldrh	r3, [r3, #10]
 8007c06:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6959      	ldr	r1, [r3, #20]
 8007c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007c20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007c24:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007c28:	6800      	ldr	r0, [r0, #0]
 8007c2a:	f001 f907 	bl	8008e3c <USB_WritePMA>
          ep->xfer_buff += len;
 8007c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695a      	ldr	r2, [r3, #20]
 8007c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c3e:	441a      	add	r2, r3
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6a1a      	ldr	r2, [r3, #32]
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d90f      	bls.n	8007c88 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c78:	1ad2      	subs	r2, r2, r3
 8007c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	621a      	str	r2, [r3, #32]
 8007c86:	e00e      	b.n	8007ca6 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007c88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6a1b      	ldr	r3, [r3, #32]
 8007c94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 8295 	beq.w	80081da <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d16d      	bne.n	8007d9c <USB_EPStartXfer+0xe4c>
 8007cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ce0:	4413      	add	r3, r2
 8007ce2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	011a      	lsls	r2, r3, #4
 8007cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cf4:	4413      	add	r3, r2
 8007cf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cfa:	667b      	str	r3, [r7, #100]	; 0x64
 8007cfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d112      	bne.n	8007d2a <USB_EPStartXfer+0xdda>
 8007d04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d06:	881b      	ldrh	r3, [r3, #0]
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d12:	801a      	strh	r2, [r3, #0]
 8007d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d16:	881b      	ldrh	r3, [r3, #0]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d26:	801a      	strh	r2, [r3, #0]
 8007d28:	e063      	b.n	8007df2 <USB_EPStartXfer+0xea2>
 8007d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d2e:	2b3e      	cmp	r3, #62	; 0x3e
 8007d30:	d817      	bhi.n	8007d62 <USB_EPStartXfer+0xe12>
 8007d32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d36:	085b      	lsrs	r3, r3, #1
 8007d38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d004      	beq.n	8007d52 <USB_EPStartXfer+0xe02>
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	029b      	lsls	r3, r3, #10
 8007d5a:	b29a      	uxth	r2, r3
 8007d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d5e:	801a      	strh	r2, [r3, #0]
 8007d60:	e047      	b.n	8007df2 <USB_EPStartXfer+0xea2>
 8007d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d70:	f003 031f 	and.w	r3, r3, #31
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d104      	bne.n	8007d82 <USB_EPStartXfer+0xe32>
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	029b      	lsls	r3, r3, #10
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d98:	801a      	strh	r2, [r3, #0]
 8007d9a:	e02a      	b.n	8007df2 <USB_EPStartXfer+0xea2>
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d122      	bne.n	8007df2 <USB_EPStartXfer+0xea2>
 8007dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	673b      	str	r3, [r7, #112]	; 0x70
 8007db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	461a      	mov	r2, r3
 8007dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dcc:	4413      	add	r3, r2
 8007dce:	673b      	str	r3, [r7, #112]	; 0x70
 8007dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	011a      	lsls	r2, r3, #4
 8007dde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007de0:	4413      	add	r3, r2
 8007de2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007df0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007df2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	891b      	ldrh	r3, [r3, #8]
 8007dfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	6959      	ldr	r1, [r3, #20]
 8007e0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007e18:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007e1c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007e20:	6800      	ldr	r0, [r0, #0]
 8007e22:	f001 f80b 	bl	8008e3c <USB_WritePMA>
 8007e26:	e1d8      	b.n	80081da <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	785b      	ldrb	r3, [r3, #1]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d178      	bne.n	8007f2a <USB_EPStartXfer+0xfda>
 8007e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	011a      	lsls	r2, r3, #4
 8007e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e74:	4413      	add	r3, r2
 8007e76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d116      	bne.n	8007eb4 <USB_EPStartXfer+0xf64>
 8007e86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e8a:	881b      	ldrh	r3, [r3, #0]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e98:	801a      	strh	r2, [r3, #0]
 8007e9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eb0:	801a      	strh	r2, [r3, #0]
 8007eb2:	e06b      	b.n	8007f8c <USB_EPStartXfer+0x103c>
 8007eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb8:	2b3e      	cmp	r3, #62	; 0x3e
 8007eba:	d818      	bhi.n	8007eee <USB_EPStartXfer+0xf9e>
 8007ebc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d004      	beq.n	8007edc <USB_EPStartXfer+0xf8c>
 8007ed2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007edc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	029b      	lsls	r3, r3, #10
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	e04e      	b.n	8007f8c <USB_EPStartXfer+0x103c>
 8007eee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d104      	bne.n	8007f0e <USB_EPStartXfer+0xfbe>
 8007f04:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007f0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	029b      	lsls	r3, r3, #10
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f20:	b29a      	uxth	r2, r3
 8007f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f26:	801a      	strh	r2, [r3, #0]
 8007f28:	e030      	b.n	8007f8c <USB_EPStartXfer+0x103c>
 8007f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	785b      	ldrb	r3, [r3, #1]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d128      	bne.n	8007f8c <USB_EPStartXfer+0x103c>
 8007f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f5e:	4413      	add	r3, r2
 8007f60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	011a      	lsls	r2, r3, #4
 8007f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f76:	4413      	add	r3, r2
 8007f78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f84:	b29a      	uxth	r2, r3
 8007f86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	891b      	ldrh	r3, [r3, #8]
 8007f98:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	6959      	ldr	r1, [r3, #20]
 8007fa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007fb2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007fb6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007fba:	6800      	ldr	r0, [r0, #0]
 8007fbc:	f000 ff3e 	bl	8008e3c <USB_WritePMA>
          ep->xfer_buff += len;
 8007fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fd0:	441a      	add	r2, r3
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6a1a      	ldr	r2, [r3, #32]
 8007fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	691b      	ldr	r3, [r3, #16]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d90f      	bls.n	800801a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6a1a      	ldr	r2, [r3, #32]
 8008006:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	621a      	str	r2, [r3, #32]
 8008018:	e00e      	b.n	8008038 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800801a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800802a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2200      	movs	r2, #0
 8008036:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8008038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80cc 	beq.w	80081da <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d178      	bne.n	8008152 <USB_EPStartXfer+0x1202>
 8008060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008064:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800806e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008072:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800807c:	b29b      	uxth	r3, r3
 800807e:	461a      	mov	r2, r3
 8008080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008084:	4413      	add	r3, r2
 8008086:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800808a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800808e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	011a      	lsls	r2, r3, #4
 8008098:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800809c:	4413      	add	r3, r2
 800809e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80080a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80080a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d116      	bne.n	80080dc <USB_EPStartXfer+0x118c>
 80080ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080b2:	881b      	ldrh	r3, [r3, #0]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080ba:	b29a      	uxth	r2, r3
 80080bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c0:	801a      	strh	r2, [r3, #0]
 80080c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c6:	881b      	ldrh	r3, [r3, #0]
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d8:	801a      	strh	r2, [r3, #0]
 80080da:	e064      	b.n	80081a6 <USB_EPStartXfer+0x1256>
 80080dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e0:	2b3e      	cmp	r3, #62	; 0x3e
 80080e2:	d818      	bhi.n	8008116 <USB_EPStartXfer+0x11c6>
 80080e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080e8:	085b      	lsrs	r3, r3, #1
 80080ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <USB_EPStartXfer+0x11b4>
 80080fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080fe:	3301      	adds	r3, #1
 8008100:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008104:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008108:	b29b      	uxth	r3, r3
 800810a:	029b      	lsls	r3, r3, #10
 800810c:	b29a      	uxth	r2, r3
 800810e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008112:	801a      	strh	r2, [r3, #0]
 8008114:	e047      	b.n	80081a6 <USB_EPStartXfer+0x1256>
 8008116:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800811a:	095b      	lsrs	r3, r3, #5
 800811c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008124:	f003 031f 	and.w	r3, r3, #31
 8008128:	2b00      	cmp	r3, #0
 800812a:	d104      	bne.n	8008136 <USB_EPStartXfer+0x11e6>
 800812c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008130:	3b01      	subs	r3, #1
 8008132:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800813a:	b29b      	uxth	r3, r3
 800813c:	029b      	lsls	r3, r3, #10
 800813e:	b29b      	uxth	r3, r3
 8008140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008148:	b29a      	uxth	r2, r3
 800814a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800814e:	801a      	strh	r2, [r3, #0]
 8008150:	e029      	b.n	80081a6 <USB_EPStartXfer+0x1256>
 8008152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d121      	bne.n	80081a6 <USB_EPStartXfer+0x1256>
 8008162:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008166:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008170:	b29b      	uxth	r3, r3
 8008172:	461a      	mov	r2, r3
 8008174:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008178:	4413      	add	r3, r2
 800817a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	011a      	lsls	r2, r3, #4
 800818c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008190:	4413      	add	r3, r2
 8008192:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008196:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800819a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800819e:	b29a      	uxth	r2, r3
 80081a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80081a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	895b      	ldrh	r3, [r3, #10]
 80081b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6959      	ldr	r1, [r3, #20]
 80081c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80081cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80081d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80081d4:	6800      	ldr	r0, [r0, #0]
 80081d6:	f000 fe31 	bl	8008e3c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081fc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008204:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008208:	8013      	strh	r3, [r2, #0]
 800820a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008212:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008216:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800821a:	8812      	ldrh	r2, [r2, #0]
 800821c:	f082 0210 	eor.w	r2, r2, #16
 8008220:	801a      	strh	r2, [r3, #0]
 8008222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008226:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800822a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800822e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008232:	8812      	ldrh	r2, [r2, #0]
 8008234:	f082 0220 	eor.w	r2, r2, #32
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008242:	681a      	ldr	r2, [r3, #0]
 8008244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	441a      	add	r2, r3
 8008254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008258:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800826a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800826e:	b29b      	uxth	r3, r3
 8008270:	8013      	strh	r3, [r2, #0]
 8008272:	f000 bc9f 	b.w	8008bb4 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800827a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	7b1b      	ldrb	r3, [r3, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f040 80ae 	bne.w	80083e4 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800828c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d917      	bls.n	80082d4 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80082a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80082b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	699a      	ldr	r2, [r3, #24]
 80082c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082c4:	1ad2      	subs	r2, r2, r3
 80082c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	619a      	str	r2, [r3, #24]
 80082d2:	e00e      	b.n	80082f2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80082d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	699b      	ldr	r3, [r3, #24]
 80082e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80082e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	2200      	movs	r2, #0
 80082f0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80082f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008304:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800830e:	b29b      	uxth	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008316:	4413      	add	r3, r2
 8008318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800831c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	011a      	lsls	r2, r3, #4
 800832a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800832e:	4413      	add	r3, r2
 8008330:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833c:	2b00      	cmp	r3, #0
 800833e:	d116      	bne.n	800836e <USB_EPStartXfer+0x141e>
 8008340:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800834c:	b29a      	uxth	r2, r3
 800834e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	b29b      	uxth	r3, r3
 800835c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008364:	b29a      	uxth	r2, r3
 8008366:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	e3e8      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
 800836e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008372:	2b3e      	cmp	r3, #62	; 0x3e
 8008374:	d818      	bhi.n	80083a8 <USB_EPStartXfer+0x1458>
 8008376:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800837a:	085b      	lsrs	r3, r3, #1
 800837c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008380:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d004      	beq.n	8008396 <USB_EPStartXfer+0x1446>
 800838c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008390:	3301      	adds	r3, #1
 8008392:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008396:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800839a:	b29b      	uxth	r3, r3
 800839c:	029b      	lsls	r3, r3, #10
 800839e:	b29a      	uxth	r2, r3
 80083a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083a4:	801a      	strh	r2, [r3, #0]
 80083a6:	e3cb      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
 80083a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083ac:	095b      	lsrs	r3, r3, #5
 80083ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d104      	bne.n	80083c8 <USB_EPStartXfer+0x1478>
 80083be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083c2:	3b01      	subs	r3, #1
 80083c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80083c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	029b      	lsls	r3, r3, #10
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083da:	b29a      	uxth	r2, r3
 80083dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	e3ad      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80083e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	78db      	ldrb	r3, [r3, #3]
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	f040 8200 	bne.w	80087f6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80083f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	785b      	ldrb	r3, [r3, #1]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f040 8091 	bne.w	800852a <USB_EPStartXfer+0x15da>
 8008408:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800841a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008424:	b29b      	uxth	r3, r3
 8008426:	461a      	mov	r2, r3
 8008428:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800842c:	4413      	add	r3, r2
 800842e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	011a      	lsls	r2, r3, #4
 8008440:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008444:	4413      	add	r3, r2
 8008446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800844a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800844e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d116      	bne.n	800848c <USB_EPStartXfer+0x153c>
 800845e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	b29b      	uxth	r3, r3
 8008466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800846a:	b29a      	uxth	r2, r3
 800846c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008470:	801a      	strh	r2, [r3, #0]
 8008472:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29b      	uxth	r3, r3
 800847a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800847e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008482:	b29a      	uxth	r2, r3
 8008484:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008488:	801a      	strh	r2, [r3, #0]
 800848a:	e083      	b.n	8008594 <USB_EPStartXfer+0x1644>
 800848c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	2b3e      	cmp	r3, #62	; 0x3e
 800849a:	d820      	bhi.n	80084de <USB_EPStartXfer+0x158e>
 800849c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	085b      	lsrs	r3, r3, #1
 80084aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d004      	beq.n	80084cc <USB_EPStartXfer+0x157c>
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c6:	3301      	adds	r3, #1
 80084c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	029b      	lsls	r3, r3, #10
 80084d4:	b29a      	uxth	r2, r3
 80084d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084da:	801a      	strh	r2, [r3, #0]
 80084dc:	e05a      	b.n	8008594 <USB_EPStartXfer+0x1644>
 80084de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691b      	ldr	r3, [r3, #16]
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	f003 031f 	and.w	r3, r3, #31
 8008500:	2b00      	cmp	r3, #0
 8008502:	d104      	bne.n	800850e <USB_EPStartXfer+0x15be>
 8008504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008508:	3b01      	subs	r3, #1
 800850a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008512:	b29b      	uxth	r3, r3
 8008514:	029b      	lsls	r3, r3, #10
 8008516:	b29b      	uxth	r3, r3
 8008518:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800851c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008520:	b29a      	uxth	r2, r3
 8008522:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e034      	b.n	8008594 <USB_EPStartXfer+0x1644>
 800852a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	785b      	ldrb	r3, [r3, #1]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d12c      	bne.n	8008594 <USB_EPStartXfer+0x1644>
 800853a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800854c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008556:	b29b      	uxth	r3, r3
 8008558:	461a      	mov	r2, r3
 800855a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800855e:	4413      	add	r3, r2
 8008560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008568:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	011a      	lsls	r2, r3, #4
 8008572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008576:	4413      	add	r3, r2
 8008578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800857c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	b29a      	uxth	r2, r3
 800858e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008592:	801a      	strh	r2, [r3, #0]
 8008594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f040 8091 	bne.w	80086d6 <USB_EPStartXfer+0x1786>
 80085b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	461a      	mov	r2, r3
 80085d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085d8:	4413      	add	r3, r2
 80085da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80085de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	011a      	lsls	r2, r3, #4
 80085ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085f0:	4413      	add	r3, r2
 80085f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d116      	bne.n	8008638 <USB_EPStartXfer+0x16e8>
 800860a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	b29b      	uxth	r3, r3
 8008612:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008616:	b29a      	uxth	r2, r3
 8008618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008622:	881b      	ldrh	r3, [r3, #0]
 8008624:	b29b      	uxth	r3, r3
 8008626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800862a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800862e:	b29a      	uxth	r2, r3
 8008630:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	e07c      	b.n	8008732 <USB_EPStartXfer+0x17e2>
 8008638:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800863c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	691b      	ldr	r3, [r3, #16]
 8008644:	2b3e      	cmp	r3, #62	; 0x3e
 8008646:	d820      	bhi.n	800868a <USB_EPStartXfer+0x173a>
 8008648:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800865a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0301 	and.w	r3, r3, #1
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <USB_EPStartXfer+0x1728>
 800866e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008672:	3301      	adds	r3, #1
 8008674:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008678:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800867c:	b29b      	uxth	r3, r3
 800867e:	029b      	lsls	r3, r3, #10
 8008680:	b29a      	uxth	r2, r3
 8008682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008686:	801a      	strh	r2, [r3, #0]
 8008688:	e053      	b.n	8008732 <USB_EPStartXfer+0x17e2>
 800868a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800868e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	095b      	lsrs	r3, r3, #5
 8008698:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800869c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	691b      	ldr	r3, [r3, #16]
 80086a8:	f003 031f 	and.w	r3, r3, #31
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d104      	bne.n	80086ba <USB_EPStartXfer+0x176a>
 80086b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086b4:	3b01      	subs	r3, #1
 80086b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80086ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80086be:	b29b      	uxth	r3, r3
 80086c0:	029b      	lsls	r3, r3, #10
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086cc:	b29a      	uxth	r2, r3
 80086ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086d2:	801a      	strh	r2, [r3, #0]
 80086d4:	e02d      	b.n	8008732 <USB_EPStartXfer+0x17e2>
 80086d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	2b01      	cmp	r3, #1
 80086e4:	d125      	bne.n	8008732 <USB_EPStartXfer+0x17e2>
 80086e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	461a      	mov	r2, r3
 80086f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086fc:	4413      	add	r3, r2
 80086fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	011a      	lsls	r2, r3, #4
 8008710:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008714:	4413      	add	r3, r2
 8008716:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800871a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800871e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008722:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	b29a      	uxth	r2, r3
 800872c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008730:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	69db      	ldr	r3, [r3, #28]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f000 81fe 	beq.w	8008b40 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008752:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008764:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800876c:	2b00      	cmp	r3, #0
 800876e:	d005      	beq.n	800877c <USB_EPStartXfer+0x182c>
 8008770:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10d      	bne.n	8008798 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800877c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 81db 	bne.w	8008b40 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800878a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800878e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008792:	2b00      	cmp	r3, #0
 8008794:	f040 81d4 	bne.w	8008b40 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087be:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80087c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	441a      	add	r2, r3
 80087dc:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80087e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	8013      	strh	r3, [r2, #0]
 80087f4:	e1a4      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80087f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	78db      	ldrb	r3, [r3, #3]
 8008802:	2b01      	cmp	r3, #1
 8008804:	f040 819a 	bne.w	8008b3c <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800880c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	699a      	ldr	r2, [r3, #24]
 8008814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d917      	bls.n	8008854 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008828:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	691b      	ldr	r3, [r3, #16]
 8008830:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8008834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008838:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	699a      	ldr	r2, [r3, #24]
 8008840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008844:	1ad2      	subs	r2, r2, r3
 8008846:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	619a      	str	r2, [r3, #24]
 8008852:	e00e      	b.n	8008872 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8008854:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008858:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8008864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	785b      	ldrb	r3, [r3, #1]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d178      	bne.n	8008974 <USB_EPStartXfer+0x1a24>
 8008882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008886:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008894:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800889e:	b29b      	uxth	r3, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088a6:	4413      	add	r3, r2
 80088a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	011a      	lsls	r2, r3, #4
 80088ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088be:	4413      	add	r3, r2
 80088c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d116      	bne.n	80088fe <USB_EPStartXfer+0x19ae>
 80088d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80088dc:	b29a      	uxth	r2, r3
 80088de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e2:	801a      	strh	r2, [r3, #0]
 80088e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	e06b      	b.n	80089d6 <USB_EPStartXfer+0x1a86>
 80088fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008902:	2b3e      	cmp	r3, #62	; 0x3e
 8008904:	d818      	bhi.n	8008938 <USB_EPStartXfer+0x19e8>
 8008906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008914:	f003 0301 	and.w	r3, r3, #1
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <USB_EPStartXfer+0x19d6>
 800891c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008920:	3301      	adds	r3, #1
 8008922:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800892a:	b29b      	uxth	r3, r3
 800892c:	029b      	lsls	r3, r3, #10
 800892e:	b29a      	uxth	r2, r3
 8008930:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008934:	801a      	strh	r2, [r3, #0]
 8008936:	e04e      	b.n	80089d6 <USB_EPStartXfer+0x1a86>
 8008938:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800893c:	095b      	lsrs	r3, r3, #5
 800893e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	2b00      	cmp	r3, #0
 800894c:	d104      	bne.n	8008958 <USB_EPStartXfer+0x1a08>
 800894e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008952:	3b01      	subs	r3, #1
 8008954:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800895c:	b29b      	uxth	r3, r3
 800895e:	029b      	lsls	r3, r3, #10
 8008960:	b29b      	uxth	r3, r3
 8008962:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008966:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896a:	b29a      	uxth	r2, r3
 800896c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008970:	801a      	strh	r2, [r3, #0]
 8008972:	e030      	b.n	80089d6 <USB_EPStartXfer+0x1a86>
 8008974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	785b      	ldrb	r3, [r3, #1]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d128      	bne.n	80089d6 <USB_EPStartXfer+0x1a86>
 8008984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	461a      	mov	r2, r3
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a8:	4413      	add	r3, r2
 80089aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	011a      	lsls	r2, r3, #4
 80089bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089c0:	4413      	add	r3, r2
 80089c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80089c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80089ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089ce:	b29a      	uxth	r2, r3
 80089d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80089d4:	801a      	strh	r2, [r3, #0]
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80089e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	785b      	ldrb	r3, [r3, #1]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d178      	bne.n	8008ae6 <USB_EPStartXfer+0x1b96>
 80089f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	461a      	mov	r2, r3
 8008a14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a18:	4413      	add	r3, r2
 8008a1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	011a      	lsls	r2, r3, #4
 8008a2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a30:	4413      	add	r3, r2
 8008a32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d116      	bne.n	8008a70 <USB_EPStartXfer+0x1b20>
 8008a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a46:	881b      	ldrh	r3, [r3, #0]
 8008a48:	b29b      	uxth	r3, r3
 8008a4a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a54:	801a      	strh	r2, [r3, #0]
 8008a56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e067      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
 8008a70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a74:	2b3e      	cmp	r3, #62	; 0x3e
 8008a76:	d818      	bhi.n	8008aaa <USB_EPStartXfer+0x1b5a>
 8008a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a7c:	085b      	lsrs	r3, r3, #1
 8008a7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d004      	beq.n	8008a98 <USB_EPStartXfer+0x1b48>
 8008a8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a92:	3301      	adds	r3, #1
 8008a94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	029b      	lsls	r3, r3, #10
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	e04a      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
 8008aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab8:	f003 031f 	and.w	r3, r3, #31
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d104      	bne.n	8008aca <USB_EPStartXfer+0x1b7a>
 8008ac0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ac4:	3b01      	subs	r3, #1
 8008ac6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008aca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	029b      	lsls	r3, r3, #10
 8008ad2:	b29b      	uxth	r3, r3
 8008ad4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ad8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ae2:	801a      	strh	r2, [r3, #0]
 8008ae4:	e02c      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	785b      	ldrb	r3, [r3, #1]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d124      	bne.n	8008b40 <USB_EPStartXfer+0x1bf0>
 8008af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	461a      	mov	r2, r3
 8008b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	011a      	lsls	r2, r3, #4
 8008b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b24:	4413      	add	r3, r2
 8008b26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b38:	801a      	strh	r2, [r3, #0]
 8008b3a:	e001      	b.n	8008b40 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e03a      	b.n	8008bb6 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	881b      	ldrh	r3, [r3, #0]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b66:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b6a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b72:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b76:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b7a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	781b      	ldrb	r3, [r3, #0]
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	441a      	add	r2, r3
 8008b9c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ba0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ba4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ba8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	785b      	ldrb	r3, [r3, #1]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d020      	beq.n	8008c14 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	881b      	ldrh	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008be8:	81bb      	strh	r3, [r7, #12]
 8008bea:	89bb      	ldrh	r3, [r7, #12]
 8008bec:	f083 0310 	eor.w	r3, r3, #16
 8008bf0:	81bb      	strh	r3, [r7, #12]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	441a      	add	r2, r3
 8008bfc:	89bb      	ldrh	r3, [r7, #12]
 8008bfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	8013      	strh	r3, [r2, #0]
 8008c12:	e01f      	b.n	8008c54 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4413      	add	r3, r2
 8008c1e:	881b      	ldrh	r3, [r3, #0]
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c2a:	81fb      	strh	r3, [r7, #14]
 8008c2c:	89fb      	ldrh	r3, [r7, #14]
 8008c2e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c32:	81fb      	strh	r3, [r7, #14]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	441a      	add	r2, r3
 8008c3e:	89fb      	ldrh	r3, [r7, #14]
 8008c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c54:	2300      	movs	r3, #0
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bc80      	pop	{r7}
 8008c5e:	4770      	bx	lr

08008c60 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	7b1b      	ldrb	r3, [r3, #12]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f040 809d 	bne.w	8008dae <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	785b      	ldrb	r3, [r3, #1]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d04c      	beq.n	8008d16 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	4413      	add	r3, r2
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	823b      	strh	r3, [r7, #16]
 8008c8a:	8a3b      	ldrh	r3, [r7, #16]
 8008c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d01b      	beq.n	8008ccc <USB_EPClearStall+0x6c>
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008caa:	81fb      	strh	r3, [r7, #14]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	89fb      	ldrh	r3, [r7, #14]
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d06c      	beq.n	8008dae <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4413      	add	r3, r2
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29b      	uxth	r3, r3
 8008ce2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cea:	81bb      	strh	r3, [r7, #12]
 8008cec:	89bb      	ldrh	r3, [r7, #12]
 8008cee:	f083 0320 	eor.w	r3, r3, #32
 8008cf2:	81bb      	strh	r3, [r7, #12]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	781b      	ldrb	r3, [r3, #0]
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	441a      	add	r2, r3
 8008cfe:	89bb      	ldrh	r3, [r7, #12]
 8008d00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	8013      	strh	r3, [r2, #0]
 8008d14:	e04b      	b.n	8008dae <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	009b      	lsls	r3, r3, #2
 8008d1e:	4413      	add	r3, r2
 8008d20:	881b      	ldrh	r3, [r3, #0]
 8008d22:	82fb      	strh	r3, [r7, #22]
 8008d24:	8afb      	ldrh	r3, [r7, #22]
 8008d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01b      	beq.n	8008d66 <USB_EPClearStall+0x106>
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	4413      	add	r3, r2
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d44:	82bb      	strh	r3, [r7, #20]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8abb      	ldrh	r3, [r7, #20]
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7c:	827b      	strh	r3, [r7, #18]
 8008d7e:	8a7b      	ldrh	r3, [r7, #18]
 8008d80:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d84:	827b      	strh	r3, [r7, #18]
 8008d86:	8a7b      	ldrh	r3, [r7, #18]
 8008d88:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d8c:	827b      	strh	r3, [r7, #18]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	441a      	add	r2, r3
 8008d98:	8a7b      	ldrh	r3, [r7, #18]
 8008d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	371c      	adds	r7, #28
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bc80      	pop	{r7}
 8008db8:	4770      	bx	lr

08008dba <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008dc6:	78fb      	ldrb	r3, [r7, #3]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d103      	bne.n	8008dd4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2280      	movs	r2, #128	; 0x80
 8008dd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr

08008df4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b083      	sub	sp, #12
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bc80      	pop	{r7}
 8008e06:	4770      	bx	lr

08008e08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3714      	adds	r7, #20
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bc80      	pop	{r7}
 8008e24:	4770      	bx	lr

08008e26 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008e26:	b480      	push	{r7}
 8008e28:	b083      	sub	sp, #12
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
 8008e2e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	370c      	adds	r7, #12
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr

08008e3c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b08d      	sub	sp, #52	; 0x34
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	4611      	mov	r1, r2
 8008e48:	461a      	mov	r2, r3
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	80fb      	strh	r3, [r7, #6]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e52:	88bb      	ldrh	r3, [r7, #4]
 8008e54:	3301      	adds	r3, #1
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	005a      	lsls	r2, r3, #1
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e6e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e74:	e01e      	b.n	8008eb4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7e:	3301      	adds	r3, #1
 8008e80:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	021b      	lsls	r3, r3, #8
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9e:	3302      	adds	r3, #2
 8008ea0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	3302      	adds	r3, #2
 8008ea6:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	3301      	adds	r3, #1
 8008eac:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1dd      	bne.n	8008e76 <USB_WritePMA+0x3a>
  }
}
 8008eba:	bf00      	nop
 8008ebc:	bf00      	nop
 8008ebe:	3734      	adds	r7, #52	; 0x34
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bc80      	pop	{r7}
 8008ec4:	4770      	bx	lr

08008ec6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008ec6:	b480      	push	{r7}
 8008ec8:	b08b      	sub	sp, #44	; 0x2c
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	60f8      	str	r0, [r7, #12]
 8008ece:	60b9      	str	r1, [r7, #8]
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	461a      	mov	r2, r3
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	80fb      	strh	r3, [r7, #6]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008edc:	88bb      	ldrh	r3, [r7, #4]
 8008ede:	085b      	lsrs	r3, r3, #1
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008eec:	88fb      	ldrh	r3, [r7, #6]
 8008eee:	005a      	lsls	r2, r3, #1
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	627b      	str	r3, [r7, #36]	; 0x24
 8008efe:	e01b      	b.n	8008f38 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	3302      	adds	r3, #2
 8008f0c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	b2da      	uxtb	r2, r3
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	0a1b      	lsrs	r3, r3, #8
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008f26:	69fb      	ldr	r3, [r7, #28]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	3302      	adds	r3, #2
 8008f30:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	3b01      	subs	r3, #1
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
 8008f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e0      	bne.n	8008f00 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008f3e:	88bb      	ldrh	r3, [r7, #4]
 8008f40:	f003 0301 	and.w	r3, r3, #1
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d007      	beq.n	8008f5a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	b2da      	uxtb	r2, r3
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	701a      	strb	r2, [r3, #0]
  }
}
 8008f5a:	bf00      	nop
 8008f5c:	372c      	adds	r7, #44	; 0x2c
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bc80      	pop	{r7}
 8008f62:	4770      	bx	lr

08008f64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	7c1b      	ldrb	r3, [r3, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d115      	bne.n	8008fa8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f80:	2202      	movs	r2, #2
 8008f82:	2181      	movs	r1, #129	; 0x81
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f001 fe86 	bl	800ac96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f94:	2202      	movs	r2, #2
 8008f96:	2101      	movs	r1, #1
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 fe7c 	bl	800ac96 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008fa6:	e012      	b.n	8008fce <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008fa8:	2340      	movs	r3, #64	; 0x40
 8008faa:	2202      	movs	r2, #2
 8008fac:	2181      	movs	r1, #129	; 0x81
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f001 fe71 	bl	800ac96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008fba:	2340      	movs	r3, #64	; 0x40
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	2101      	movs	r1, #1
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f001 fe68 	bl	800ac96 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2201      	movs	r2, #1
 8008fca:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008fce:	2308      	movs	r3, #8
 8008fd0:	2203      	movs	r2, #3
 8008fd2:	2182      	movs	r1, #130	; 0x82
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f001 fe5e 	bl	800ac96 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2201      	movs	r2, #1
 8008fde:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008fe0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008fe4:	f001 ff7e 	bl	800aee4 <USBD_static_malloc>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d102      	bne.n	8009000 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	73fb      	strb	r3, [r7, #15]
 8008ffe:	e026      	b.n	800904e <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009006:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	2200      	movs	r2, #0
 8009016:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	2200      	movs	r2, #0
 800901e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	7c1b      	ldrb	r3, [r3, #16]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009034:	2101      	movs	r1, #1
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f001 ff1e 	bl	800ae78 <USBD_LL_PrepareReceive>
 800903c:	e007      	b.n	800904e <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009044:	2340      	movs	r3, #64	; 0x40
 8009046:	2101      	movs	r1, #1
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 ff15 	bl	800ae78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3710      	adds	r7, #16
 8009054:	46bd      	mov	sp, r7
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	460b      	mov	r3, r1
 8009062:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009068:	2181      	movs	r1, #129	; 0x81
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f001 fe39 	bl	800ace2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009076:	2101      	movs	r1, #1
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f001 fe32 	bl	800ace2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009086:	2182      	movs	r1, #130	; 0x82
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 fe2a 	bl	800ace2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00e      	beq.n	80090bc <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 ff24 	bl	800aefc <USBD_static_free>
    pdev->pClassData = NULL;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b086      	sub	sp, #24
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090d6:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80090d8:	2300      	movs	r3, #0
 80090da:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d039      	beq.n	8009164 <USBD_CDC_Setup+0x9e>
 80090f0:	2b20      	cmp	r3, #32
 80090f2:	d17f      	bne.n	80091f4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	88db      	ldrh	r3, [r3, #6]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d029      	beq.n	8009150 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	b25b      	sxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	da11      	bge.n	800912a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	683a      	ldr	r2, [r7, #0]
 8009110:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009112:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	88d2      	ldrh	r2, [r2, #6]
 8009118:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800911a:	6939      	ldr	r1, [r7, #16]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	88db      	ldrh	r3, [r3, #6]
 8009120:	461a      	mov	r2, r3
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f001 fa09 	bl	800a53a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8009128:	e06b      	b.n	8009202 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	785a      	ldrb	r2, [r3, #1]
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	88db      	ldrh	r3, [r3, #6]
 8009138:	b2da      	uxtb	r2, r3
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009140:	6939      	ldr	r1, [r7, #16]
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	88db      	ldrh	r3, [r3, #6]
 8009146:	461a      	mov	r2, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f001 fa24 	bl	800a596 <USBD_CtlPrepareRx>
      break;
 800914e:	e058      	b.n	8009202 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	683a      	ldr	r2, [r7, #0]
 800915a:	7850      	ldrb	r0, [r2, #1]
 800915c:	2200      	movs	r2, #0
 800915e:	6839      	ldr	r1, [r7, #0]
 8009160:	4798      	blx	r3
      break;
 8009162:	e04e      	b.n	8009202 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	785b      	ldrb	r3, [r3, #1]
 8009168:	2b0b      	cmp	r3, #11
 800916a:	d02e      	beq.n	80091ca <USBD_CDC_Setup+0x104>
 800916c:	2b0b      	cmp	r3, #11
 800916e:	dc38      	bgt.n	80091e2 <USBD_CDC_Setup+0x11c>
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <USBD_CDC_Setup+0xb4>
 8009174:	2b0a      	cmp	r3, #10
 8009176:	d014      	beq.n	80091a2 <USBD_CDC_Setup+0xdc>
 8009178:	e033      	b.n	80091e2 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009180:	2b03      	cmp	r3, #3
 8009182:	d107      	bne.n	8009194 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009184:	f107 030c 	add.w	r3, r7, #12
 8009188:	2202      	movs	r2, #2
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f001 f9d4 	bl	800a53a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009192:	e02e      	b.n	80091f2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 f965 	bl	800a466 <USBD_CtlError>
            ret = USBD_FAIL;
 800919c:	2302      	movs	r3, #2
 800919e:	75fb      	strb	r3, [r7, #23]
          break;
 80091a0:	e027      	b.n	80091f2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a8:	2b03      	cmp	r3, #3
 80091aa:	d107      	bne.n	80091bc <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80091ac:	f107 030f 	add.w	r3, r7, #15
 80091b0:	2201      	movs	r2, #1
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f9c0 	bl	800a53a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80091ba:	e01a      	b.n	80091f2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 f951 	bl	800a466 <USBD_CtlError>
            ret = USBD_FAIL;
 80091c4:	2302      	movs	r3, #2
 80091c6:	75fb      	strb	r3, [r7, #23]
          break;
 80091c8:	e013      	b.n	80091f2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d00d      	beq.n	80091f0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80091d4:	6839      	ldr	r1, [r7, #0]
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f001 f945 	bl	800a466 <USBD_CtlError>
            ret = USBD_FAIL;
 80091dc:	2302      	movs	r3, #2
 80091de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80091e0:	e006      	b.n	80091f0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80091e2:	6839      	ldr	r1, [r7, #0]
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f001 f93e 	bl	800a466 <USBD_CtlError>
          ret = USBD_FAIL;
 80091ea:	2302      	movs	r3, #2
 80091ec:	75fb      	strb	r3, [r7, #23]
          break;
 80091ee:	e000      	b.n	80091f2 <USBD_CDC_Setup+0x12c>
          break;
 80091f0:	bf00      	nop
      }
      break;
 80091f2:	e006      	b.n	8009202 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091f4:	6839      	ldr	r1, [r7, #0]
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 f935 	bl	800a466 <USBD_CtlError>
      ret = USBD_FAIL;
 80091fc:	2302      	movs	r3, #2
 80091fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009200:	bf00      	nop
  }

  return ret;
 8009202:	7dfb      	ldrb	r3, [r7, #23]
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	460b      	mov	r3, r1
 8009216:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800921e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009226:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800922e:	2b00      	cmp	r3, #0
 8009230:	d03a      	beq.n	80092a8 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	331c      	adds	r3, #28
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d029      	beq.n	800929c <USBD_CDC_DataIn+0x90>
 8009248:	78fa      	ldrb	r2, [r7, #3]
 800924a:	6879      	ldr	r1, [r7, #4]
 800924c:	4613      	mov	r3, r2
 800924e:	009b      	lsls	r3, r3, #2
 8009250:	4413      	add	r3, r2
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	440b      	add	r3, r1
 8009256:	331c      	adds	r3, #28
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	78f9      	ldrb	r1, [r7, #3]
 800925c:	68b8      	ldr	r0, [r7, #8]
 800925e:	460b      	mov	r3, r1
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	4403      	add	r3, r0
 8009268:	3338      	adds	r3, #56	; 0x38
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	fbb2 f1f3 	udiv	r1, r2, r3
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d110      	bne.n	800929c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	440b      	add	r3, r1
 8009288:	331c      	adds	r3, #28
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800928e:	78f9      	ldrb	r1, [r7, #3]
 8009290:	2300      	movs	r3, #0
 8009292:	2200      	movs	r2, #0
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f001 fdcc 	bl	800ae32 <USBD_LL_Transmit>
 800929a:	e003      	b.n	80092a4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e000      	b.n	80092aa <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80092a8:	2302      	movs	r3, #2
  }
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b084      	sub	sp, #16
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	460b      	mov	r3, r1
 80092bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80092c6:	78fb      	ldrb	r3, [r7, #3]
 80092c8:	4619      	mov	r1, r3
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f001 fdf7 	bl	800aebe <USBD_LL_GetRxDataSize>
 80092d0:	4602      	mov	r2, r0
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00d      	beq.n	80092fe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	68fa      	ldr	r2, [r7, #12]
 80092ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092f0:	68fa      	ldr	r2, [r7, #12]
 80092f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092f6:	4611      	mov	r1, r2
 80092f8:	4798      	blx	r3

    return USBD_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e000      	b.n	8009300 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80092fe:	2302      	movs	r3, #2
  }
}
 8009300:	4618      	mov	r0, r3
 8009302:	3710      	adds	r7, #16
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009316:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800931e:	2b00      	cmp	r3, #0
 8009320:	d015      	beq.n	800934e <USBD_CDC_EP0_RxReady+0x46>
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009328:	2bff      	cmp	r3, #255	; 0xff
 800932a:	d010      	beq.n	800934e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	68fa      	ldr	r2, [r7, #12]
 8009336:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800933a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009342:	b292      	uxth	r2, r2
 8009344:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	22ff      	movs	r2, #255	; 0xff
 800934a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2243      	movs	r2, #67	; 0x43
 8009364:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009366:	4b03      	ldr	r3, [pc, #12]	; (8009374 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009368:	4618      	mov	r0, r3
 800936a:	370c      	adds	r7, #12
 800936c:	46bd      	mov	sp, r7
 800936e:	bc80      	pop	{r7}
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop
 8009374:	200000b0 	.word	0x200000b0

08009378 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	2243      	movs	r2, #67	; 0x43
 8009384:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009386:	4b03      	ldr	r3, [pc, #12]	; (8009394 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009388:	4618      	mov	r0, r3
 800938a:	370c      	adds	r7, #12
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr
 8009392:	bf00      	nop
 8009394:	2000006c 	.word	0x2000006c

08009398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2243      	movs	r2, #67	; 0x43
 80093a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80093a6:	4b03      	ldr	r3, [pc, #12]	; (80093b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bc80      	pop	{r7}
 80093b0:	4770      	bx	lr
 80093b2:	bf00      	nop
 80093b4:	200000f4 	.word	0x200000f4

080093b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	220a      	movs	r2, #10
 80093c4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80093c6:	4b03      	ldr	r3, [pc, #12]	; (80093d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bc80      	pop	{r7}
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop
 80093d4:	20000028 	.word	0x20000028

080093d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80093d8:	b480      	push	{r7}
 80093da:	b085      	sub	sp, #20
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80093e2:	2302      	movs	r3, #2
 80093e4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d005      	beq.n	80093f8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	683a      	ldr	r2, [r7, #0]
 80093f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	bc80      	pop	{r7}
 8009402:	4770      	bx	lr

08009404 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009418:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009422:	88fa      	ldrh	r2, [r7, #6]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	371c      	adds	r7, #28
 8009430:	46bd      	mov	sp, r7
 8009432:	bc80      	pop	{r7}
 8009434:	4770      	bx	lr

08009436 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009436:	b480      	push	{r7}
 8009438:	b085      	sub	sp, #20
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009446:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3714      	adds	r7, #20
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800946a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d01c      	beq.n	80094b0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800947c:	2b00      	cmp	r3, #0
 800947e:	d115      	bne.n	80094ac <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800949e:	b29b      	uxth	r3, r3
 80094a0:	2181      	movs	r1, #129	; 0x81
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f001 fcc5 	bl	800ae32 <USBD_LL_Transmit>

      return USBD_OK;
 80094a8:	2300      	movs	r3, #0
 80094aa:	e002      	b.n	80094b2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80094ac:	2301      	movs	r3, #1
 80094ae:	e000      	b.n	80094b2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80094b0:	2302      	movs	r3, #2
  }
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094c8:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d017      	beq.n	8009504 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7c1b      	ldrb	r3, [r3, #16]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d109      	bne.n	80094f0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094e6:	2101      	movs	r1, #1
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f001 fcc5 	bl	800ae78 <USBD_LL_PrepareReceive>
 80094ee:	e007      	b.n	8009500 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094f6:	2340      	movs	r3, #64	; 0x40
 80094f8:	2101      	movs	r1, #1
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fcbc 	bl	800ae78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009500:	2300      	movs	r3, #0
 8009502:	e000      	b.n	8009506 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009504:	2302      	movs	r3, #2
  }
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	60f8      	str	r0, [r7, #12]
 8009516:	60b9      	str	r1, [r7, #8]
 8009518:	4613      	mov	r3, r2
 800951a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009522:	2302      	movs	r3, #2
 8009524:	e01a      	b.n	800955c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	2200      	movs	r2, #0
 8009534:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	79fa      	ldrb	r2, [r7, #7]
 8009552:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f001 fb29 	bl	800abac <USBD_LL_Init>

  return USBD_OK;
 800955a:	2300      	movs	r3, #0
}
 800955c:	4618      	mov	r0, r3
 800955e:	3710      	adds	r7, #16
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009580:	2300      	movs	r3, #0
 8009582:	73fb      	strb	r3, [r7, #15]
 8009584:	e001      	b.n	800958a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	bc80      	pop	{r7}
 8009594:	4770      	bx	lr

08009596 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f001 fb5e 	bl	800ac60 <USBD_LL_Start>

  return USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80095ae:	b480      	push	{r7}
 80095b0:	b083      	sub	sp, #12
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	bc80      	pop	{r7}
 80095c0:	4770      	bx	lr

080095c2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	460b      	mov	r3, r1
 80095cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80095ce:	2302      	movs	r3, #2
 80095d0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00c      	beq.n	80095f6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	78fa      	ldrb	r2, [r7, #3]
 80095e6:	4611      	mov	r1, r2
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	4798      	blx	r3
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d101      	bne.n	80095f6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	4611      	mov	r1, r2
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	4798      	blx	r3

  return USBD_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b082      	sub	sp, #8
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009636:	6839      	ldr	r1, [r7, #0]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fed8 	bl	800a3ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800964c:	461a      	mov	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800965a:	f003 031f 	and.w	r3, r3, #31
 800965e:	2b02      	cmp	r3, #2
 8009660:	d016      	beq.n	8009690 <USBD_LL_SetupStage+0x6a>
 8009662:	2b02      	cmp	r3, #2
 8009664:	d81c      	bhi.n	80096a0 <USBD_LL_SetupStage+0x7a>
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <USBD_LL_SetupStage+0x4a>
 800966a:	2b01      	cmp	r3, #1
 800966c:	d008      	beq.n	8009680 <USBD_LL_SetupStage+0x5a>
 800966e:	e017      	b.n	80096a0 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f9cb 	bl	8009a14 <USBD_StdDevReq>
      break;
 800967e:	e01a      	b.n	80096b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009686:	4619      	mov	r1, r3
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 fa2d 	bl	8009ae8 <USBD_StdItfReq>
      break;
 800968e:	e012      	b.n	80096b6 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009696:	4619      	mov	r1, r3
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fa6d 	bl	8009b78 <USBD_StdEPReq>
      break;
 800969e:	e00a      	b.n	80096b6 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80096a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	4619      	mov	r1, r3
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 fb36 	bl	800ad20 <USBD_LL_StallEP>
      break;
 80096b4:	bf00      	nop
  }

  return USBD_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	460b      	mov	r3, r1
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d14b      	bne.n	800976c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80096da:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096e2:	2b03      	cmp	r3, #3
 80096e4:	d134      	bne.n	8009750 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	68da      	ldr	r2, [r3, #12]
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d919      	bls.n	8009726 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	1ad2      	subs	r2, r2, r3
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009708:	429a      	cmp	r2, r3
 800970a:	d203      	bcs.n	8009714 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009710:	b29b      	uxth	r3, r3
 8009712:	e002      	b.n	800971a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009718:	b29b      	uxth	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	6879      	ldr	r1, [r7, #4]
 800971e:	68f8      	ldr	r0, [r7, #12]
 8009720:	f000 ff57 	bl	800a5d2 <USBD_CtlContinueRx>
 8009724:	e038      	b.n	8009798 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972c:	691b      	ldr	r3, [r3, #16]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009738:	2b03      	cmp	r3, #3
 800973a:	d105      	bne.n	8009748 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 ff54 	bl	800a5f6 <USBD_CtlSendStatus>
 800974e:	e023      	b.n	8009798 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009756:	2b05      	cmp	r3, #5
 8009758:	d11e      	bne.n	8009798 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009762:	2100      	movs	r1, #0
 8009764:	68f8      	ldr	r0, [r7, #12]
 8009766:	f001 fadb 	bl	800ad20 <USBD_LL_StallEP>
 800976a:	e015      	b.n	8009798 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00d      	beq.n	8009794 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800977e:	2b03      	cmp	r3, #3
 8009780:	d108      	bne.n	8009794 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	7afa      	ldrb	r2, [r7, #11]
 800978c:	4611      	mov	r1, r2
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	4798      	blx	r3
 8009792:	e001      	b.n	8009798 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009794:	2302      	movs	r3, #2
 8009796:	e000      	b.n	800979a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3718      	adds	r7, #24
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b086      	sub	sp, #24
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	60f8      	str	r0, [r7, #12]
 80097aa:	460b      	mov	r3, r1
 80097ac:	607a      	str	r2, [r7, #4]
 80097ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80097b0:	7afb      	ldrb	r3, [r7, #11]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d17f      	bne.n	80098b6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3314      	adds	r3, #20
 80097ba:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097c2:	2b02      	cmp	r3, #2
 80097c4:	d15c      	bne.n	8009880 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d915      	bls.n	80097fe <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	1ad2      	subs	r2, r2, r3
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	b29b      	uxth	r3, r3
 80097e6:	461a      	mov	r2, r3
 80097e8:	6879      	ldr	r1, [r7, #4]
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 fec1 	bl	800a572 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f0:	2300      	movs	r3, #0
 80097f2:	2200      	movs	r2, #0
 80097f4:	2100      	movs	r1, #0
 80097f6:	68f8      	ldr	r0, [r7, #12]
 80097f8:	f001 fb3e 	bl	800ae78 <USBD_LL_PrepareReceive>
 80097fc:	e04e      	b.n	800989c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	697a      	ldr	r2, [r7, #20]
 8009804:	6912      	ldr	r2, [r2, #16]
 8009806:	fbb3 f1f2 	udiv	r1, r3, r2
 800980a:	fb01 f202 	mul.w	r2, r1, r2
 800980e:	1a9b      	subs	r3, r3, r2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d11c      	bne.n	800984e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800981c:	429a      	cmp	r2, r3
 800981e:	d316      	bcc.n	800984e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800982a:	429a      	cmp	r2, r3
 800982c:	d20f      	bcs.n	800984e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800982e:	2200      	movs	r2, #0
 8009830:	2100      	movs	r1, #0
 8009832:	68f8      	ldr	r0, [r7, #12]
 8009834:	f000 fe9d 	bl	800a572 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009840:	2300      	movs	r3, #0
 8009842:	2200      	movs	r2, #0
 8009844:	2100      	movs	r1, #0
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f001 fb16 	bl	800ae78 <USBD_LL_PrepareReceive>
 800984c:	e026      	b.n	800989c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00a      	beq.n	8009870 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009860:	2b03      	cmp	r3, #3
 8009862:	d105      	bne.n	8009870 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009870:	2180      	movs	r1, #128	; 0x80
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f001 fa54 	bl	800ad20 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 fecf 	bl	800a61c <USBD_CtlReceiveStatus>
 800987e:	e00d      	b.n	800989c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009886:	2b04      	cmp	r3, #4
 8009888:	d004      	beq.n	8009894 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009890:	2b00      	cmp	r3, #0
 8009892:	d103      	bne.n	800989c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009894:	2180      	movs	r1, #128	; 0x80
 8009896:	68f8      	ldr	r0, [r7, #12]
 8009898:	f001 fa42 	bl	800ad20 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d11d      	bne.n	80098e2 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f7ff fe81 	bl	80095ae <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80098b4:	e015      	b.n	80098e2 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d00d      	beq.n	80098de <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80098c8:	2b03      	cmp	r3, #3
 80098ca:	d108      	bne.n	80098de <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098d2:	695b      	ldr	r3, [r3, #20]
 80098d4:	7afa      	ldrb	r2, [r7, #11]
 80098d6:	4611      	mov	r1, r2
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	4798      	blx	r3
 80098dc:	e001      	b.n	80098e2 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80098de:	2302      	movs	r3, #2
 80098e0:	e000      	b.n	80098e4 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098f4:	2340      	movs	r3, #64	; 0x40
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 f9cb 	bl	800ac96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2240      	movs	r2, #64	; 0x40
 800990c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009910:	2340      	movs	r3, #64	; 0x40
 8009912:	2200      	movs	r2, #0
 8009914:	2180      	movs	r1, #128	; 0x80
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f001 f9bd 	bl	800ac96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2201      	movs	r2, #1
 8009920:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2240      	movs	r2, #64	; 0x40
 8009926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800994c:	2b00      	cmp	r3, #0
 800994e:	d009      	beq.n	8009964 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6852      	ldr	r2, [r2, #4]
 800995c:	b2d2      	uxtb	r2, r2
 800995e:	4611      	mov	r1, r2
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	4798      	blx	r3
  }

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	460b      	mov	r3, r1
 8009978:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	78fa      	ldrb	r2, [r7, #3]
 800997e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	370c      	adds	r7, #12
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr

0800998c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800998c:	b480      	push	{r7}
 800998e:	b083      	sub	sp, #12
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2204      	movs	r2, #4
 80099a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80099a8:	2300      	movs	r3, #0
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr

080099b4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c2:	2b04      	cmp	r3, #4
 80099c4:	d105      	bne.n	80099d2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	370c      	adds	r7, #12
 80099d8:	46bd      	mov	sp, r7
 80099da:	bc80      	pop	{r7}
 80099dc:	4770      	bx	lr

080099de <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b082      	sub	sp, #8
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d10b      	bne.n	8009a08 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d005      	beq.n	8009a08 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	781b      	ldrb	r3, [r3, #0]
 8009a26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d005      	beq.n	8009a3a <USBD_StdDevReq+0x26>
 8009a2e:	2b40      	cmp	r3, #64	; 0x40
 8009a30:	d84f      	bhi.n	8009ad2 <USBD_StdDevReq+0xbe>
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d009      	beq.n	8009a4a <USBD_StdDevReq+0x36>
 8009a36:	2b20      	cmp	r3, #32
 8009a38:	d14b      	bne.n	8009ad2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	4798      	blx	r3
      break;
 8009a48:	e048      	b.n	8009adc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	785b      	ldrb	r3, [r3, #1]
 8009a4e:	2b09      	cmp	r3, #9
 8009a50:	d839      	bhi.n	8009ac6 <USBD_StdDevReq+0xb2>
 8009a52:	a201      	add	r2, pc, #4	; (adr r2, 8009a58 <USBD_StdDevReq+0x44>)
 8009a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a58:	08009aa9 	.word	0x08009aa9
 8009a5c:	08009abd 	.word	0x08009abd
 8009a60:	08009ac7 	.word	0x08009ac7
 8009a64:	08009ab3 	.word	0x08009ab3
 8009a68:	08009ac7 	.word	0x08009ac7
 8009a6c:	08009a8b 	.word	0x08009a8b
 8009a70:	08009a81 	.word	0x08009a81
 8009a74:	08009ac7 	.word	0x08009ac7
 8009a78:	08009a9f 	.word	0x08009a9f
 8009a7c:	08009a95 	.word	0x08009a95
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f9dc 	bl	8009e40 <USBD_GetDescriptor>
          break;
 8009a88:	e022      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fb3f 	bl	800a110 <USBD_SetAddress>
          break;
 8009a92:	e01d      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fb7e 	bl	800a198 <USBD_SetConfig>
          break;
 8009a9c:	e018      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fc07 	bl	800a2b4 <USBD_GetConfig>
          break;
 8009aa6:	e013      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fc37 	bl	800a31e <USBD_GetStatus>
          break;
 8009ab0:	e00e      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 fc65 	bl	800a384 <USBD_SetFeature>
          break;
 8009aba:	e009      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009abc:	6839      	ldr	r1, [r7, #0]
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fc74 	bl	800a3ac <USBD_ClrFeature>
          break;
 8009ac4:	e004      	b.n	8009ad0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009ac6:	6839      	ldr	r1, [r7, #0]
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fccc 	bl	800a466 <USBD_CtlError>
          break;
 8009ace:	bf00      	nop
      }
      break;
 8009ad0:	e004      	b.n	8009adc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009ad2:	6839      	ldr	r1, [r7, #0]
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fcc6 	bl	800a466 <USBD_CtlError>
      break;
 8009ada:	bf00      	nop
  }

  return ret;
 8009adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3710      	adds	r7, #16
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop

08009ae8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009af2:	2300      	movs	r3, #0
 8009af4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009afe:	2b40      	cmp	r3, #64	; 0x40
 8009b00:	d005      	beq.n	8009b0e <USBD_StdItfReq+0x26>
 8009b02:	2b40      	cmp	r3, #64	; 0x40
 8009b04:	d82e      	bhi.n	8009b64 <USBD_StdItfReq+0x7c>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <USBD_StdItfReq+0x26>
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	d12a      	bne.n	8009b64 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b14:	3b01      	subs	r3, #1
 8009b16:	2b02      	cmp	r3, #2
 8009b18:	d81d      	bhi.n	8009b56 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	889b      	ldrh	r3, [r3, #4]
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d813      	bhi.n	8009b4c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	6839      	ldr	r1, [r7, #0]
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	88db      	ldrh	r3, [r3, #6]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d110      	bne.n	8009b60 <USBD_StdItfReq+0x78>
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10d      	bne.n	8009b60 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fd56 	bl	800a5f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b4a:	e009      	b.n	8009b60 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009b4c:	6839      	ldr	r1, [r7, #0]
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 fc89 	bl	800a466 <USBD_CtlError>
          break;
 8009b54:	e004      	b.n	8009b60 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fc84 	bl	800a466 <USBD_CtlError>
          break;
 8009b5e:	e000      	b.n	8009b62 <USBD_StdItfReq+0x7a>
          break;
 8009b60:	bf00      	nop
      }
      break;
 8009b62:	e004      	b.n	8009b6e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fc7d 	bl	800a466 <USBD_CtlError>
      break;
 8009b6c:	bf00      	nop
  }

  return USBD_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	889b      	ldrh	r3, [r3, #4]
 8009b8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b94:	2b40      	cmp	r3, #64	; 0x40
 8009b96:	d007      	beq.n	8009ba8 <USBD_StdEPReq+0x30>
 8009b98:	2b40      	cmp	r3, #64	; 0x40
 8009b9a:	f200 8146 	bhi.w	8009e2a <USBD_StdEPReq+0x2b2>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00a      	beq.n	8009bb8 <USBD_StdEPReq+0x40>
 8009ba2:	2b20      	cmp	r3, #32
 8009ba4:	f040 8141 	bne.w	8009e2a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	6839      	ldr	r1, [r7, #0]
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	4798      	blx	r3
      break;
 8009bb6:	e13d      	b.n	8009e34 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	d10a      	bne.n	8009bda <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	6839      	ldr	r1, [r7, #0]
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	4798      	blx	r3
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	e12d      	b.n	8009e36 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	785b      	ldrb	r3, [r3, #1]
 8009bde:	2b03      	cmp	r3, #3
 8009be0:	d007      	beq.n	8009bf2 <USBD_StdEPReq+0x7a>
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	f300 811b 	bgt.w	8009e1e <USBD_StdEPReq+0x2a6>
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d072      	beq.n	8009cd2 <USBD_StdEPReq+0x15a>
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d03a      	beq.n	8009c66 <USBD_StdEPReq+0xee>
 8009bf0:	e115      	b.n	8009e1e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d002      	beq.n	8009c02 <USBD_StdEPReq+0x8a>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d015      	beq.n	8009c2c <USBD_StdEPReq+0xb4>
 8009c00:	e02b      	b.n	8009c5a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d00c      	beq.n	8009c22 <USBD_StdEPReq+0xaa>
 8009c08:	7bbb      	ldrb	r3, [r7, #14]
 8009c0a:	2b80      	cmp	r3, #128	; 0x80
 8009c0c:	d009      	beq.n	8009c22 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c0e:	7bbb      	ldrb	r3, [r7, #14]
 8009c10:	4619      	mov	r1, r3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f001 f884 	bl	800ad20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c18:	2180      	movs	r1, #128	; 0x80
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 f880 	bl	800ad20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c20:	e020      	b.n	8009c64 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009c22:	6839      	ldr	r1, [r7, #0]
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fc1e 	bl	800a466 <USBD_CtlError>
              break;
 8009c2a:	e01b      	b.n	8009c64 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	885b      	ldrh	r3, [r3, #2]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d10e      	bne.n	8009c52 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <USBD_StdEPReq+0xda>
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	2b80      	cmp	r3, #128	; 0x80
 8009c3e:	d008      	beq.n	8009c52 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	88db      	ldrh	r3, [r3, #6]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d104      	bne.n	8009c52 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f001 f867 	bl	800ad20 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 fccf 	bl	800a5f6 <USBD_CtlSendStatus>

              break;
 8009c58:	e004      	b.n	8009c64 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009c5a:	6839      	ldr	r1, [r7, #0]
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fc02 	bl	800a466 <USBD_CtlError>
              break;
 8009c62:	bf00      	nop
          }
          break;
 8009c64:	e0e0      	b.n	8009e28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c6c:	2b02      	cmp	r3, #2
 8009c6e:	d002      	beq.n	8009c76 <USBD_StdEPReq+0xfe>
 8009c70:	2b03      	cmp	r3, #3
 8009c72:	d015      	beq.n	8009ca0 <USBD_StdEPReq+0x128>
 8009c74:	e026      	b.n	8009cc4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00c      	beq.n	8009c96 <USBD_StdEPReq+0x11e>
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
 8009c7e:	2b80      	cmp	r3, #128	; 0x80
 8009c80:	d009      	beq.n	8009c96 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c82:	7bbb      	ldrb	r3, [r7, #14]
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f001 f84a 	bl	800ad20 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c8c:	2180      	movs	r1, #128	; 0x80
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 f846 	bl	800ad20 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c94:	e01c      	b.n	8009cd0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 fbe4 	bl	800a466 <USBD_CtlError>
              break;
 8009c9e:	e017      	b.n	8009cd0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	885b      	ldrh	r3, [r3, #2]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d112      	bne.n	8009cce <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ca8:	7bbb      	ldrb	r3, [r7, #14]
 8009caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d004      	beq.n	8009cbc <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009cb2:	7bbb      	ldrb	r3, [r7, #14]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f001 f851 	bl	800ad5e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fc9a 	bl	800a5f6 <USBD_CtlSendStatus>
              }
              break;
 8009cc2:	e004      	b.n	8009cce <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009cc4:	6839      	ldr	r1, [r7, #0]
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fbcd 	bl	800a466 <USBD_CtlError>
              break;
 8009ccc:	e000      	b.n	8009cd0 <USBD_StdEPReq+0x158>
              break;
 8009cce:	bf00      	nop
          }
          break;
 8009cd0:	e0aa      	b.n	8009e28 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d002      	beq.n	8009ce2 <USBD_StdEPReq+0x16a>
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d032      	beq.n	8009d46 <USBD_StdEPReq+0x1ce>
 8009ce0:	e097      	b.n	8009e12 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d007      	beq.n	8009cf8 <USBD_StdEPReq+0x180>
 8009ce8:	7bbb      	ldrb	r3, [r7, #14]
 8009cea:	2b80      	cmp	r3, #128	; 0x80
 8009cec:	d004      	beq.n	8009cf8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009cee:	6839      	ldr	r1, [r7, #0]
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fbb8 	bl	800a466 <USBD_CtlError>
                break;
 8009cf6:	e091      	b.n	8009e1c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	da0b      	bge.n	8009d18 <USBD_StdEPReq+0x1a0>
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d06:	4613      	mov	r3, r2
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	3310      	adds	r3, #16
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	4413      	add	r3, r2
 8009d14:	3304      	adds	r3, #4
 8009d16:	e00b      	b.n	8009d30 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d18:	7bbb      	ldrb	r3, [r7, #14]
 8009d1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d1e:	4613      	mov	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	4413      	add	r3, r2
 8009d24:	009b      	lsls	r3, r3, #2
 8009d26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	3304      	adds	r3, #4
 8009d30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2200      	movs	r2, #0
 8009d36:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fbfb 	bl	800a53a <USBD_CtlSendData>
              break;
 8009d44:	e06a      	b.n	8009e1c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	da11      	bge.n	8009d72 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	f003 020f 	and.w	r2, r3, #15
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	4613      	mov	r3, r2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	009b      	lsls	r3, r3, #2
 8009d5e:	440b      	add	r3, r1
 8009d60:	3318      	adds	r3, #24
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d117      	bne.n	8009d98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d68:	6839      	ldr	r1, [r7, #0]
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fb7b 	bl	800a466 <USBD_CtlError>
                  break;
 8009d70:	e054      	b.n	8009e1c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d72:	7bbb      	ldrb	r3, [r7, #14]
 8009d74:	f003 020f 	and.w	r2, r3, #15
 8009d78:	6879      	ldr	r1, [r7, #4]
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	4413      	add	r3, r2
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	440b      	add	r3, r1
 8009d84:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d8e:	6839      	ldr	r1, [r7, #0]
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 fb68 	bl	800a466 <USBD_CtlError>
                  break;
 8009d96:	e041      	b.n	8009e1c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da0b      	bge.n	8009db8 <USBD_StdEPReq+0x240>
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
 8009da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009da6:	4613      	mov	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4413      	add	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	3310      	adds	r3, #16
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	4413      	add	r3, r2
 8009db4:	3304      	adds	r3, #4
 8009db6:	e00b      	b.n	8009dd0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009db8:	7bbb      	ldrb	r3, [r7, #14]
 8009dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	4413      	add	r3, r2
 8009dce:	3304      	adds	r3, #4
 8009dd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <USBD_StdEPReq+0x266>
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
 8009dda:	2b80      	cmp	r3, #128	; 0x80
 8009ddc:	d103      	bne.n	8009de6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e00e      	b.n	8009e04 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 ffd6 	bl	800ad9c <USBD_LL_IsStallEP>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d003      	beq.n	8009dfe <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	e002      	b.n	8009e04 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2202      	movs	r2, #2
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fb95 	bl	800a53a <USBD_CtlSendData>
              break;
 8009e10:	e004      	b.n	8009e1c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb26 	bl	800a466 <USBD_CtlError>
              break;
 8009e1a:	bf00      	nop
          }
          break;
 8009e1c:	e004      	b.n	8009e28 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009e1e:	6839      	ldr	r1, [r7, #0]
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f000 fb20 	bl	800a466 <USBD_CtlError>
          break;
 8009e26:	bf00      	nop
      }
      break;
 8009e28:	e004      	b.n	8009e34 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009e2a:	6839      	ldr	r1, [r7, #0]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 fb1a 	bl	800a466 <USBD_CtlError>
      break;
 8009e32:	bf00      	nop
  }

  return ret;
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3710      	adds	r7, #16
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
	...

08009e40 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
 8009e48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	885b      	ldrh	r3, [r3, #2]
 8009e5a:	0a1b      	lsrs	r3, r3, #8
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	3b01      	subs	r3, #1
 8009e60:	2b06      	cmp	r3, #6
 8009e62:	f200 8128 	bhi.w	800a0b6 <USBD_GetDescriptor+0x276>
 8009e66:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <USBD_GetDescriptor+0x2c>)
 8009e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6c:	08009e89 	.word	0x08009e89
 8009e70:	08009ea1 	.word	0x08009ea1
 8009e74:	08009ee1 	.word	0x08009ee1
 8009e78:	0800a0b7 	.word	0x0800a0b7
 8009e7c:	0800a0b7 	.word	0x0800a0b7
 8009e80:	0800a057 	.word	0x0800a057
 8009e84:	0800a083 	.word	0x0800a083
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	7c12      	ldrb	r2, [r2, #16]
 8009e94:	f107 0108 	add.w	r1, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
      break;
 8009e9e:	e112      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7c1b      	ldrb	r3, [r3, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10d      	bne.n	8009ec4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	f107 0208 	add.w	r2, r7, #8
 8009eb4:	4610      	mov	r0, r2
 8009eb6:	4798      	blx	r3
 8009eb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	2202      	movs	r2, #2
 8009ec0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009ec2:	e100      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	f107 0208 	add.w	r2, r7, #8
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	2202      	movs	r2, #2
 8009edc:	701a      	strb	r2, [r3, #0]
      break;
 8009ede:	e0f2      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	885b      	ldrh	r3, [r3, #2]
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	2b05      	cmp	r3, #5
 8009ee8:	f200 80ac 	bhi.w	800a044 <USBD_GetDescriptor+0x204>
 8009eec:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <USBD_GetDescriptor+0xb4>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f0d 	.word	0x08009f0d
 8009ef8:	08009f41 	.word	0x08009f41
 8009efc:	08009f75 	.word	0x08009f75
 8009f00:	08009fa9 	.word	0x08009fa9
 8009f04:	08009fdd 	.word	0x08009fdd
 8009f08:	0800a011 	.word	0x0800a011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00b      	beq.n	8009f30 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	7c12      	ldrb	r2, [r2, #16]
 8009f24:	f107 0108 	add.w	r1, r7, #8
 8009f28:	4610      	mov	r0, r2
 8009f2a:	4798      	blx	r3
 8009f2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2e:	e091      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f30:	6839      	ldr	r1, [r7, #0]
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fa97 	bl	800a466 <USBD_CtlError>
            err++;
 8009f38:	7afb      	ldrb	r3, [r7, #11]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3e:	e089      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d00b      	beq.n	8009f64 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	7c12      	ldrb	r2, [r2, #16]
 8009f58:	f107 0108 	add.w	r1, r7, #8
 8009f5c:	4610      	mov	r0, r2
 8009f5e:	4798      	blx	r3
 8009f60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f62:	e077      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 fa7d 	bl	800a466 <USBD_CtlError>
            err++;
 8009f6c:	7afb      	ldrb	r3, [r7, #11]
 8009f6e:	3301      	adds	r3, #1
 8009f70:	72fb      	strb	r3, [r7, #11]
          break;
 8009f72:	e06f      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d00b      	beq.n	8009f98 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	7c12      	ldrb	r2, [r2, #16]
 8009f8c:	f107 0108 	add.w	r1, r7, #8
 8009f90:	4610      	mov	r0, r2
 8009f92:	4798      	blx	r3
 8009f94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f96:	e05d      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f98:	6839      	ldr	r1, [r7, #0]
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa63 	bl	800a466 <USBD_CtlError>
            err++;
 8009fa0:	7afb      	ldrb	r3, [r7, #11]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa6:	e055      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	687a      	ldr	r2, [r7, #4]
 8009fbe:	7c12      	ldrb	r2, [r2, #16]
 8009fc0:	f107 0108 	add.w	r1, r7, #8
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	4798      	blx	r3
 8009fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fca:	e043      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fcc:	6839      	ldr	r1, [r7, #0]
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fa49 	bl	800a466 <USBD_CtlError>
            err++;
 8009fd4:	7afb      	ldrb	r3, [r7, #11]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8009fda:	e03b      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d00b      	beq.n	800a000 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	7c12      	ldrb	r2, [r2, #16]
 8009ff4:	f107 0108 	add.w	r1, r7, #8
 8009ff8:	4610      	mov	r0, r2
 8009ffa:	4798      	blx	r3
 8009ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffe:	e029      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a000:	6839      	ldr	r1, [r7, #0]
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 fa2f 	bl	800a466 <USBD_CtlError>
            err++;
 800a008:	7afb      	ldrb	r3, [r7, #11]
 800a00a:	3301      	adds	r3, #1
 800a00c:	72fb      	strb	r3, [r7, #11]
          break;
 800a00e:	e021      	b.n	800a054 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00b      	beq.n	800a034 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	7c12      	ldrb	r2, [r2, #16]
 800a028:	f107 0108 	add.w	r1, r7, #8
 800a02c:	4610      	mov	r0, r2
 800a02e:	4798      	blx	r3
 800a030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a032:	e00f      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a034:	6839      	ldr	r1, [r7, #0]
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa15 	bl	800a466 <USBD_CtlError>
            err++;
 800a03c:	7afb      	ldrb	r3, [r7, #11]
 800a03e:	3301      	adds	r3, #1
 800a040:	72fb      	strb	r3, [r7, #11]
          break;
 800a042:	e007      	b.n	800a054 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a044:	6839      	ldr	r1, [r7, #0]
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 fa0d 	bl	800a466 <USBD_CtlError>
          err++;
 800a04c:	7afb      	ldrb	r3, [r7, #11]
 800a04e:	3301      	adds	r3, #1
 800a050:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a052:	e038      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
 800a054:	e037      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	7c1b      	ldrb	r3, [r3, #16]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d109      	bne.n	800a072 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a066:	f107 0208 	add.w	r2, r7, #8
 800a06a:	4610      	mov	r0, r2
 800a06c:	4798      	blx	r3
 800a06e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a070:	e029      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a072:	6839      	ldr	r1, [r7, #0]
 800a074:	6878      	ldr	r0, [r7, #4]
 800a076:	f000 f9f6 	bl	800a466 <USBD_CtlError>
        err++;
 800a07a:	7afb      	ldrb	r3, [r7, #11]
 800a07c:	3301      	adds	r3, #1
 800a07e:	72fb      	strb	r3, [r7, #11]
      break;
 800a080:	e021      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	7c1b      	ldrb	r3, [r3, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10d      	bne.n	800a0a6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a092:	f107 0208 	add.w	r2, r7, #8
 800a096:	4610      	mov	r0, r2
 800a098:	4798      	blx	r3
 800a09a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a0a4:	e00f      	b.n	800a0c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a0a6:	6839      	ldr	r1, [r7, #0]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f9dc 	bl	800a466 <USBD_CtlError>
        err++;
 800a0ae:	7afb      	ldrb	r3, [r7, #11]
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0b4:	e007      	b.n	800a0c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a0b6:	6839      	ldr	r1, [r7, #0]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f9d4 	bl	800a466 <USBD_CtlError>
      err++;
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a0c4:	bf00      	nop
  }

  if (err != 0U)
 800a0c6:	7afb      	ldrb	r3, [r7, #11]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d11c      	bne.n	800a106 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a0cc:	893b      	ldrh	r3, [r7, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d011      	beq.n	800a0f6 <USBD_GetDescriptor+0x2b6>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	88db      	ldrh	r3, [r3, #6]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00d      	beq.n	800a0f6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	88da      	ldrh	r2, [r3, #6]
 800a0de:	893b      	ldrh	r3, [r7, #8]
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	bf28      	it	cs
 800a0e4:	4613      	movcs	r3, r2
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0ea:	893b      	ldrh	r3, [r7, #8]
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fa22 	bl	800a53a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	88db      	ldrh	r3, [r3, #6]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d104      	bne.n	800a108 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa79 	bl	800a5f6 <USBD_CtlSendStatus>
 800a104:	e000      	b.n	800a108 <USBD_GetDescriptor+0x2c8>
    return;
 800a106:	bf00      	nop
    }
  }
}
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop

0800a110 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	889b      	ldrh	r3, [r3, #4]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d130      	bne.n	800a184 <USBD_SetAddress+0x74>
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	88db      	ldrh	r3, [r3, #6]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d12c      	bne.n	800a184 <USBD_SetAddress+0x74>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	885b      	ldrh	r3, [r3, #2]
 800a12e:	2b7f      	cmp	r3, #127	; 0x7f
 800a130:	d828      	bhi.n	800a184 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	885b      	ldrh	r3, [r3, #2]
 800a136:	b2db      	uxtb	r3, r3
 800a138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a13c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a144:	2b03      	cmp	r3, #3
 800a146:	d104      	bne.n	800a152 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a148:	6839      	ldr	r1, [r7, #0]
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f000 f98b 	bl	800a466 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a150:	e01d      	b.n	800a18e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	7bfa      	ldrb	r2, [r7, #15]
 800a156:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a15a:	7bfb      	ldrb	r3, [r7, #15]
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fe48 	bl	800adf4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f000 fa46 	bl	800a5f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a16a:	7bfb      	ldrb	r3, [r7, #15]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d004      	beq.n	800a17a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a178:	e009      	b.n	800a18e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a182:	e004      	b.n	800a18e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f96d 	bl	800a466 <USBD_CtlError>
  }
}
 800a18c:	bf00      	nop
 800a18e:	bf00      	nop
 800a190:	3710      	adds	r7, #16
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	885b      	ldrh	r3, [r3, #2]
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	4b41      	ldr	r3, [pc, #260]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a1aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1ac:	4b40      	ldr	r3, [pc, #256]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	2b01      	cmp	r3, #1
 800a1b2:	d904      	bls.n	800a1be <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a1b4:	6839      	ldr	r1, [r7, #0]
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f000 f955 	bl	800a466 <USBD_CtlError>
 800a1bc:	e075      	b.n	800a2aa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d002      	beq.n	800a1ce <USBD_SetConfig+0x36>
 800a1c8:	2b03      	cmp	r3, #3
 800a1ca:	d023      	beq.n	800a214 <USBD_SetConfig+0x7c>
 800a1cc:	e062      	b.n	800a294 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a1ce:	4b38      	ldr	r3, [pc, #224]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d01a      	beq.n	800a20c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a1d6:	4b36      	ldr	r3, [pc, #216]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	461a      	mov	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2203      	movs	r2, #3
 800a1e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1e8:	4b31      	ldr	r3, [pc, #196]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7ff f9e7 	bl	80095c2 <USBD_SetClassConfig>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d104      	bne.n	800a204 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a1fa:	6839      	ldr	r1, [r7, #0]
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	f000 f932 	bl	800a466 <USBD_CtlError>
            return;
 800a202:	e052      	b.n	800a2aa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f000 f9f6 	bl	800a5f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a20a:	e04e      	b.n	800a2aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 f9f2 	bl	800a5f6 <USBD_CtlSendStatus>
        break;
 800a212:	e04a      	b.n	800a2aa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a214:	4b26      	ldr	r3, [pc, #152]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d112      	bne.n	800a242 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a224:	4b22      	ldr	r3, [pc, #136]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a22e:	4b20      	ldr	r3, [pc, #128]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a230:	781b      	ldrb	r3, [r3, #0]
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7ff f9e3 	bl	8009600 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 f9db 	bl	800a5f6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a240:	e033      	b.n	800a2aa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a242:	4b1b      	ldr	r3, [pc, #108]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d01d      	beq.n	800a28c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	b2db      	uxtb	r3, r3
 800a256:	4619      	mov	r1, r3
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	f7ff f9d1 	bl	8009600 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a260:	781b      	ldrb	r3, [r3, #0]
 800a262:	461a      	mov	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a268:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7ff f9a7 	bl	80095c2 <USBD_SetClassConfig>
 800a274:	4603      	mov	r3, r0
 800a276:	2b02      	cmp	r3, #2
 800a278:	d104      	bne.n	800a284 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a27a:	6839      	ldr	r1, [r7, #0]
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 f8f2 	bl	800a466 <USBD_CtlError>
            return;
 800a282:	e012      	b.n	800a2aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f9b6 	bl	800a5f6 <USBD_CtlSendStatus>
        break;
 800a28a:	e00e      	b.n	800a2aa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f9b2 	bl	800a5f6 <USBD_CtlSendStatus>
        break;
 800a292:	e00a      	b.n	800a2aa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f8e5 	bl	800a466 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a29c:	4b04      	ldr	r3, [pc, #16]	; (800a2b0 <USBD_SetConfig+0x118>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	4619      	mov	r1, r3
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f7ff f9ac 	bl	8009600 <USBD_ClrClassConfig>
        break;
 800a2a8:	bf00      	nop
    }
  }
}
 800a2aa:	3708      	adds	r7, #8
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20000364 	.word	0x20000364

0800a2b4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	88db      	ldrh	r3, [r3, #6]
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d004      	beq.n	800a2d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 f8cc 	bl	800a466 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2ce:	e022      	b.n	800a316 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	dc02      	bgt.n	800a2e0 <USBD_GetConfig+0x2c>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dc03      	bgt.n	800a2e6 <USBD_GetConfig+0x32>
 800a2de:	e015      	b.n	800a30c <USBD_GetConfig+0x58>
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d00b      	beq.n	800a2fc <USBD_GetConfig+0x48>
 800a2e4:	e012      	b.n	800a30c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	4619      	mov	r1, r3
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	f000 f920 	bl	800a53a <USBD_CtlSendData>
        break;
 800a2fa:	e00c      	b.n	800a316 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	2201      	movs	r2, #1
 800a302:	4619      	mov	r1, r3
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 f918 	bl	800a53a <USBD_CtlSendData>
        break;
 800a30a:	e004      	b.n	800a316 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f000 f8a9 	bl	800a466 <USBD_CtlError>
        break;
 800a314:	bf00      	nop
}
 800a316:	bf00      	nop
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b082      	sub	sp, #8
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32e:	3b01      	subs	r3, #1
 800a330:	2b02      	cmp	r3, #2
 800a332:	d81e      	bhi.n	800a372 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	88db      	ldrh	r3, [r3, #6]
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d004      	beq.n	800a346 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 f891 	bl	800a466 <USBD_CtlError>
        break;
 800a344:	e01a      	b.n	800a37c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2201      	movs	r2, #1
 800a34a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	f043 0202 	orr.w	r2, r3, #2
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	330c      	adds	r3, #12
 800a366:	2202      	movs	r2, #2
 800a368:	4619      	mov	r1, r3
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f8e5 	bl	800a53a <USBD_CtlSendData>
      break;
 800a370:	e004      	b.n	800a37c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f876 	bl	800a466 <USBD_CtlError>
      break;
 800a37a:	bf00      	nop
  }
}
 800a37c:	bf00      	nop
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	885b      	ldrh	r3, [r3, #2]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d106      	bne.n	800a3a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2201      	movs	r2, #1
 800a39a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 f929 	bl	800a5f6 <USBD_CtlSendStatus>
  }
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d80b      	bhi.n	800a3da <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	885b      	ldrh	r3, [r3, #2]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d10c      	bne.n	800a3e4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 f90f 	bl	800a5f6 <USBD_CtlSendStatus>
      }
      break;
 800a3d8:	e004      	b.n	800a3e4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a3da:	6839      	ldr	r1, [r7, #0]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 f842 	bl	800a466 <USBD_CtlError>
      break;
 800a3e2:	e000      	b.n	800a3e6 <USBD_ClrFeature+0x3a>
      break;
 800a3e4:	bf00      	nop
  }
}
 800a3e6:	bf00      	nop
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}

0800a3ee <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3ee:	b480      	push	{r7}
 800a3f0:	b083      	sub	sp, #12
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6078      	str	r0, [r7, #4]
 800a3f6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	781a      	ldrb	r2, [r3, #0]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	785a      	ldrb	r2, [r3, #1]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	3302      	adds	r3, #2
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	b29a      	uxth	r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	3303      	adds	r3, #3
 800a414:	781b      	ldrb	r3, [r3, #0]
 800a416:	b29b      	uxth	r3, r3
 800a418:	021b      	lsls	r3, r3, #8
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	4413      	add	r3, r2
 800a41e:	b29a      	uxth	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	3304      	adds	r3, #4
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b29a      	uxth	r2, r3
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	3305      	adds	r3, #5
 800a430:	781b      	ldrb	r3, [r3, #0]
 800a432:	b29b      	uxth	r3, r3
 800a434:	021b      	lsls	r3, r3, #8
 800a436:	b29b      	uxth	r3, r3
 800a438:	4413      	add	r3, r2
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	3306      	adds	r3, #6
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	b29a      	uxth	r2, r3
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	3307      	adds	r3, #7
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	b29b      	uxth	r3, r3
 800a450:	021b      	lsls	r3, r3, #8
 800a452:	b29b      	uxth	r3, r3
 800a454:	4413      	add	r3, r2
 800a456:	b29a      	uxth	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	80da      	strh	r2, [r3, #6]

}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	bc80      	pop	{r7}
 800a464:	4770      	bx	lr

0800a466 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b082      	sub	sp, #8
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a470:	2180      	movs	r1, #128	; 0x80
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fc54 	bl	800ad20 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a478:	2100      	movs	r1, #0
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fc50 	bl	800ad20 <USBD_LL_StallEP>
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
 800a492:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a494:	2300      	movs	r3, #0
 800a496:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d032      	beq.n	800a504 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f000 f834 	bl	800a50c <USBD_GetLen>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	b29a      	uxth	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	1c5a      	adds	r2, r3, #1
 800a4b6:	75fa      	strb	r2, [r7, #23]
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	4413      	add	r3, r2
 800a4be:	687a      	ldr	r2, [r7, #4]
 800a4c0:	7812      	ldrb	r2, [r2, #0]
 800a4c2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a4c4:	7dfb      	ldrb	r3, [r7, #23]
 800a4c6:	1c5a      	adds	r2, r3, #1
 800a4c8:	75fa      	strb	r2, [r7, #23]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a4d4:	e012      	b.n	800a4fc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	1c5a      	adds	r2, r3, #1
 800a4da:	60fa      	str	r2, [r7, #12]
 800a4dc:	7dfa      	ldrb	r2, [r7, #23]
 800a4de:	1c51      	adds	r1, r2, #1
 800a4e0:	75f9      	strb	r1, [r7, #23]
 800a4e2:	4611      	mov	r1, r2
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	440a      	add	r2, r1
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	75fa      	strb	r2, [r7, #23]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	68bb      	ldr	r3, [r7, #8]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d1e8      	bne.n	800a4d6 <USBD_GetString+0x4e>
    }
  }
}
 800a504:	bf00      	nop
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a518:	e005      	b.n	800a526 <USBD_GetLen+0x1a>
  {
    len++;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	3301      	adds	r3, #1
 800a51e:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	3301      	adds	r3, #1
 800a524:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f5      	bne.n	800a51a <USBD_GetLen+0xe>
  }

  return len;
 800a52e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a530:	4618      	mov	r0, r3
 800a532:	3714      	adds	r7, #20
 800a534:	46bd      	mov	sp, r7
 800a536:	bc80      	pop	{r7}
 800a538:	4770      	bx	lr

0800a53a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	60f8      	str	r0, [r7, #12]
 800a542:	60b9      	str	r1, [r7, #8]
 800a544:	4613      	mov	r3, r2
 800a546:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2202      	movs	r2, #2
 800a54c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a550:	88fa      	ldrh	r2, [r7, #6]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a556:	88fa      	ldrh	r2, [r7, #6]
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a55c:	88fb      	ldrh	r3, [r7, #6]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	2100      	movs	r1, #0
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 fc65 	bl	800ae32 <USBD_LL_Transmit>

  return USBD_OK;
 800a568:	2300      	movs	r3, #0
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3710      	adds	r7, #16
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b084      	sub	sp, #16
 800a576:	af00      	add	r7, sp, #0
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	4613      	mov	r3, r2
 800a57e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a580:	88fb      	ldrh	r3, [r7, #6]
 800a582:	68ba      	ldr	r2, [r7, #8]
 800a584:	2100      	movs	r1, #0
 800a586:	68f8      	ldr	r0, [r7, #12]
 800a588:	f000 fc53 	bl	800ae32 <USBD_LL_Transmit>

  return USBD_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	60f8      	str	r0, [r7, #12]
 800a59e:	60b9      	str	r1, [r7, #8]
 800a5a0:	4613      	mov	r3, r2
 800a5a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	2203      	movs	r2, #3
 800a5a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5ac:	88fa      	ldrh	r2, [r7, #6]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a5b4:	88fa      	ldrh	r2, [r7, #6]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5bc:	88fb      	ldrh	r3, [r7, #6]
 800a5be:	68ba      	ldr	r2, [r7, #8]
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f000 fc58 	bl	800ae78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3710      	adds	r7, #16
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	60f8      	str	r0, [r7, #12]
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	4613      	mov	r3, r2
 800a5de:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5e0:	88fb      	ldrh	r3, [r7, #6]
 800a5e2:	68ba      	ldr	r2, [r7, #8]
 800a5e4:	2100      	movs	r1, #0
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fc46 	bl	800ae78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b082      	sub	sp, #8
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2204      	movs	r2, #4
 800a602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a606:	2300      	movs	r3, #0
 800a608:	2200      	movs	r2, #0
 800a60a:	2100      	movs	r1, #0
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc10 	bl	800ae32 <USBD_LL_Transmit>

  return USBD_OK;
 800a612:	2300      	movs	r3, #0
}
 800a614:	4618      	mov	r0, r3
 800a616:	3708      	adds	r7, #8
 800a618:	46bd      	mov	sp, r7
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2205      	movs	r2, #5
 800a628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a62c:	2300      	movs	r3, #0
 800a62e:	2200      	movs	r2, #0
 800a630:	2100      	movs	r1, #0
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 fc20 	bl	800ae78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a638:	2300      	movs	r3, #0
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
	...

0800a644 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a648:	2200      	movs	r2, #0
 800a64a:	4912      	ldr	r1, [pc, #72]	; (800a694 <MX_USB_DEVICE_Init+0x50>)
 800a64c:	4812      	ldr	r0, [pc, #72]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a64e:	f7fe ff5e 	bl	800950e <USBD_Init>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d001      	beq.n	800a65c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a658:	f7f7 fccc 	bl	8001ff4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a65c:	490f      	ldr	r1, [pc, #60]	; (800a69c <MX_USB_DEVICE_Init+0x58>)
 800a65e:	480e      	ldr	r0, [pc, #56]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a660:	f7fe ff80 	bl	8009564 <USBD_RegisterClass>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d001      	beq.n	800a66e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a66a:	f7f7 fcc3 	bl	8001ff4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a66e:	490c      	ldr	r1, [pc, #48]	; (800a6a0 <MX_USB_DEVICE_Init+0x5c>)
 800a670:	4809      	ldr	r0, [pc, #36]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a672:	f7fe feb1 	bl	80093d8 <USBD_CDC_RegisterInterface>
 800a676:	4603      	mov	r3, r0
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a67c:	f7f7 fcba 	bl	8001ff4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a680:	4805      	ldr	r0, [pc, #20]	; (800a698 <MX_USB_DEVICE_Init+0x54>)
 800a682:	f7fe ff88 	bl	8009596 <USBD_Start>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a68c:	f7f7 fcb2 	bl	8001ff4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a690:	bf00      	nop
 800a692:	bd80      	pop	{r7, pc}
 800a694:	20000148 	.word	0x20000148
 800a698:	20000368 	.word	0x20000368
 800a69c:	20000034 	.word	0x20000034
 800a6a0:	20000138 	.word	0x20000138

0800a6a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	4905      	ldr	r1, [pc, #20]	; (800a6c0 <CDC_Init_FS+0x1c>)
 800a6ac:	4805      	ldr	r0, [pc, #20]	; (800a6c4 <CDC_Init_FS+0x20>)
 800a6ae:	f7fe fea9 	bl	8009404 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a6b2:	4905      	ldr	r1, [pc, #20]	; (800a6c8 <CDC_Init_FS+0x24>)
 800a6b4:	4803      	ldr	r0, [pc, #12]	; (800a6c4 <CDC_Init_FS+0x20>)
 800a6b6:	f7fe febe 	bl	8009436 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a6ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	20000a2c 	.word	0x20000a2c
 800a6c4:	20000368 	.word	0x20000368
 800a6c8:	2000062c 	.word	0x2000062c

0800a6cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a6d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bc80      	pop	{r7}
 800a6d8:	4770      	bx	lr
	...

0800a6dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	6039      	str	r1, [r7, #0]
 800a6e6:	71fb      	strb	r3, [r7, #7]
 800a6e8:	4613      	mov	r3, r2
 800a6ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b23      	cmp	r3, #35	; 0x23
 800a6f0:	d84a      	bhi.n	800a788 <CDC_Control_FS+0xac>
 800a6f2:	a201      	add	r2, pc, #4	; (adr r2, 800a6f8 <CDC_Control_FS+0x1c>)
 800a6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f8:	0800a789 	.word	0x0800a789
 800a6fc:	0800a789 	.word	0x0800a789
 800a700:	0800a789 	.word	0x0800a789
 800a704:	0800a789 	.word	0x0800a789
 800a708:	0800a789 	.word	0x0800a789
 800a70c:	0800a789 	.word	0x0800a789
 800a710:	0800a789 	.word	0x0800a789
 800a714:	0800a789 	.word	0x0800a789
 800a718:	0800a789 	.word	0x0800a789
 800a71c:	0800a789 	.word	0x0800a789
 800a720:	0800a789 	.word	0x0800a789
 800a724:	0800a789 	.word	0x0800a789
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	0800a789 	.word	0x0800a789
 800a730:	0800a789 	.word	0x0800a789
 800a734:	0800a789 	.word	0x0800a789
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a789 	.word	0x0800a789
 800a740:	0800a789 	.word	0x0800a789
 800a744:	0800a789 	.word	0x0800a789
 800a748:	0800a789 	.word	0x0800a789
 800a74c:	0800a789 	.word	0x0800a789
 800a750:	0800a789 	.word	0x0800a789
 800a754:	0800a789 	.word	0x0800a789
 800a758:	0800a789 	.word	0x0800a789
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	0800a789 	.word	0x0800a789
 800a764:	0800a789 	.word	0x0800a789
 800a768:	0800a789 	.word	0x0800a789
 800a76c:	0800a789 	.word	0x0800a789
 800a770:	0800a789 	.word	0x0800a789
 800a774:	0800a789 	.word	0x0800a789
 800a778:	0800a789 	.word	0x0800a789
 800a77c:	0800a789 	.word	0x0800a789
 800a780:	0800a789 	.word	0x0800a789
 800a784:	0800a789 	.word	0x0800a789
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a788:	bf00      	nop
  }

  return (USBD_OK);
 800a78a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	370c      	adds	r7, #12
 800a790:	46bd      	mov	sp, r7
 800a792:	bc80      	pop	{r7}
 800a794:	4770      	bx	lr
 800a796:	bf00      	nop

0800a798 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4805      	ldr	r0, [pc, #20]	; (800a7bc <CDC_Receive_FS+0x24>)
 800a7a6:	f7fe fe46 	bl	8009436 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a7aa:	4804      	ldr	r0, [pc, #16]	; (800a7bc <CDC_Receive_FS+0x24>)
 800a7ac:	f7fe fe85 	bl	80094ba <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a7b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	20000368 	.word	0x20000368

0800a7c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a7d0:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	e00b      	b.n	800a7fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6879      	ldr	r1, [r7, #4]
 800a7ec:	4806      	ldr	r0, [pc, #24]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7ee:	f7fe fe09 	bl	8009404 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7f2:	4805      	ldr	r0, [pc, #20]	; (800a808 <CDC_Transmit_FS+0x48>)
 800a7f4:	f7fe fe32 	bl	800945c <USBD_CDC_TransmitPacket>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20000368 	.word	0x20000368

0800a80c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2212      	movs	r2, #18
 800a81c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a81e:	4b03      	ldr	r3, [pc, #12]	; (800a82c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	bc80      	pop	{r7}
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	20000164 	.word	0x20000164

0800a830 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	4603      	mov	r3, r0
 800a838:	6039      	str	r1, [r7, #0]
 800a83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2204      	movs	r2, #4
 800a840:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a842:	4b03      	ldr	r3, [pc, #12]	; (800a850 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a844:	4618      	mov	r0, r3
 800a846:	370c      	adds	r7, #12
 800a848:	46bd      	mov	sp, r7
 800a84a:	bc80      	pop	{r7}
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	20000178 	.word	0x20000178

0800a854 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	6039      	str	r1, [r7, #0]
 800a85e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a860:	79fb      	ldrb	r3, [r7, #7]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d105      	bne.n	800a872 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a866:	683a      	ldr	r2, [r7, #0]
 800a868:	4907      	ldr	r1, [pc, #28]	; (800a888 <USBD_FS_ProductStrDescriptor+0x34>)
 800a86a:	4808      	ldr	r0, [pc, #32]	; (800a88c <USBD_FS_ProductStrDescriptor+0x38>)
 800a86c:	f7ff fe0c 	bl	800a488 <USBD_GetString>
 800a870:	e004      	b.n	800a87c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a872:	683a      	ldr	r2, [r7, #0]
 800a874:	4904      	ldr	r1, [pc, #16]	; (800a888 <USBD_FS_ProductStrDescriptor+0x34>)
 800a876:	4805      	ldr	r0, [pc, #20]	; (800a88c <USBD_FS_ProductStrDescriptor+0x38>)
 800a878:	f7ff fe06 	bl	800a488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a87c:	4b02      	ldr	r3, [pc, #8]	; (800a888 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000e2c 	.word	0x20000e2c
 800a88c:	0800cc68 	.word	0x0800cc68

0800a890 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	4603      	mov	r3, r0
 800a898:	6039      	str	r1, [r7, #0]
 800a89a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a89c:	683a      	ldr	r2, [r7, #0]
 800a89e:	4904      	ldr	r1, [pc, #16]	; (800a8b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8a0:	4804      	ldr	r0, [pc, #16]	; (800a8b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8a2:	f7ff fdf1 	bl	800a488 <USBD_GetString>
  return USBD_StrDesc;
 800a8a6:	4b02      	ldr	r3, [pc, #8]	; (800a8b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3708      	adds	r7, #8
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}
 800a8b0:	20000e2c 	.word	0x20000e2c
 800a8b4:	0800cc7c 	.word	0x0800cc7c

0800a8b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	6039      	str	r1, [r7, #0]
 800a8c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	221a      	movs	r2, #26
 800a8c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a8ca:	f000 f843 	bl	800a954 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a8ce:	4b02      	ldr	r3, [pc, #8]	; (800a8d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3708      	adds	r7, #8
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	2000017c 	.word	0x2000017c

0800a8dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	6039      	str	r1, [r7, #0]
 800a8e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d105      	bne.n	800a8fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	4907      	ldr	r1, [pc, #28]	; (800a910 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8f2:	4808      	ldr	r0, [pc, #32]	; (800a914 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8f4:	f7ff fdc8 	bl	800a488 <USBD_GetString>
 800a8f8:	e004      	b.n	800a904 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8fa:	683a      	ldr	r2, [r7, #0]
 800a8fc:	4904      	ldr	r1, [pc, #16]	; (800a910 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8fe:	4805      	ldr	r0, [pc, #20]	; (800a914 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a900:	f7ff fdc2 	bl	800a488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a904:	4b02      	ldr	r3, [pc, #8]	; (800a910 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a906:	4618      	mov	r0, r3
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
 800a90e:	bf00      	nop
 800a910:	20000e2c 	.word	0x20000e2c
 800a914:	0800cc90 	.word	0x0800cc90

0800a918 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	4603      	mov	r3, r0
 800a920:	6039      	str	r1, [r7, #0]
 800a922:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a924:	79fb      	ldrb	r3, [r7, #7]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d105      	bne.n	800a936 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a92a:	683a      	ldr	r2, [r7, #0]
 800a92c:	4907      	ldr	r1, [pc, #28]	; (800a94c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a92e:	4808      	ldr	r0, [pc, #32]	; (800a950 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a930:	f7ff fdaa 	bl	800a488 <USBD_GetString>
 800a934:	e004      	b.n	800a940 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	4904      	ldr	r1, [pc, #16]	; (800a94c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a93a:	4805      	ldr	r0, [pc, #20]	; (800a950 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a93c:	f7ff fda4 	bl	800a488 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a940:	4b02      	ldr	r3, [pc, #8]	; (800a94c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a942:	4618      	mov	r0, r3
 800a944:	3708      	adds	r7, #8
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}
 800a94a:	bf00      	nop
 800a94c:	20000e2c 	.word	0x20000e2c
 800a950:	0800cc9c 	.word	0x0800cc9c

0800a954 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b084      	sub	sp, #16
 800a958:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a95a:	4b0f      	ldr	r3, [pc, #60]	; (800a998 <Get_SerialNum+0x44>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a960:	4b0e      	ldr	r3, [pc, #56]	; (800a99c <Get_SerialNum+0x48>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a966:	4b0e      	ldr	r3, [pc, #56]	; (800a9a0 <Get_SerialNum+0x4c>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4413      	add	r3, r2
 800a972:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a97a:	2208      	movs	r2, #8
 800a97c:	4909      	ldr	r1, [pc, #36]	; (800a9a4 <Get_SerialNum+0x50>)
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f000 f814 	bl	800a9ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a984:	2204      	movs	r2, #4
 800a986:	4908      	ldr	r1, [pc, #32]	; (800a9a8 <Get_SerialNum+0x54>)
 800a988:	68b8      	ldr	r0, [r7, #8]
 800a98a:	f000 f80f 	bl	800a9ac <IntToUnicode>
  }
}
 800a98e:	bf00      	nop
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	1ffff7e8 	.word	0x1ffff7e8
 800a99c:	1ffff7ec 	.word	0x1ffff7ec
 800a9a0:	1ffff7f0 	.word	0x1ffff7f0
 800a9a4:	2000017e 	.word	0x2000017e
 800a9a8:	2000018e 	.word	0x2000018e

0800a9ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a9be:	2300      	movs	r3, #0
 800a9c0:	75fb      	strb	r3, [r7, #23]
 800a9c2:	e027      	b.n	800aa14 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	0f1b      	lsrs	r3, r3, #28
 800a9c8:	2b09      	cmp	r3, #9
 800a9ca:	d80b      	bhi.n	800a9e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	0f1b      	lsrs	r3, r3, #28
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	440b      	add	r3, r1
 800a9dc:	3230      	adds	r2, #48	; 0x30
 800a9de:	b2d2      	uxtb	r2, r2
 800a9e0:	701a      	strb	r2, [r3, #0]
 800a9e2:	e00a      	b.n	800a9fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	0f1b      	lsrs	r3, r3, #28
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	005b      	lsls	r3, r3, #1
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	440b      	add	r3, r1
 800a9f4:	3237      	adds	r2, #55	; 0x37
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	011b      	lsls	r3, r3, #4
 800a9fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa00:	7dfb      	ldrb	r3, [r7, #23]
 800aa02:	005b      	lsls	r3, r3, #1
 800aa04:	3301      	adds	r3, #1
 800aa06:	68ba      	ldr	r2, [r7, #8]
 800aa08:	4413      	add	r3, r2
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	3301      	adds	r3, #1
 800aa12:	75fb      	strb	r3, [r7, #23]
 800aa14:	7dfa      	ldrb	r2, [r7, #23]
 800aa16:	79fb      	ldrb	r3, [r7, #7]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d3d3      	bcc.n	800a9c4 <IntToUnicode+0x18>
  }
}
 800aa1c:	bf00      	nop
 800aa1e:	bf00      	nop
 800aa20:	371c      	adds	r7, #28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bc80      	pop	{r7}
 800aa26:	4770      	bx	lr

0800aa28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a0d      	ldr	r2, [pc, #52]	; (800aa6c <HAL_PCD_MspInit+0x44>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d113      	bne.n	800aa62 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800aa3a:	4b0d      	ldr	r3, [pc, #52]	; (800aa70 <HAL_PCD_MspInit+0x48>)
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	4a0c      	ldr	r2, [pc, #48]	; (800aa70 <HAL_PCD_MspInit+0x48>)
 800aa40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800aa44:	61d3      	str	r3, [r2, #28]
 800aa46:	4b0a      	ldr	r3, [pc, #40]	; (800aa70 <HAL_PCD_MspInit+0x48>)
 800aa48:	69db      	ldr	r3, [r3, #28]
 800aa4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aa52:	2200      	movs	r2, #0
 800aa54:	2100      	movs	r1, #0
 800aa56:	2014      	movs	r0, #20
 800aa58:	f7f7 fda5 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa5c:	2014      	movs	r0, #20
 800aa5e:	f7f7 fdbe 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa62:	bf00      	nop
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	40005c00 	.word	0x40005c00
 800aa70:	40021000 	.word	0x40021000

0800aa74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	f7fe fdcb 	bl	8009626 <USBD_LL_SetupStage>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	6879      	ldr	r1, [r7, #4]
 800aaae:	4613      	mov	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	440b      	add	r3, r1
 800aab8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aabc:	681a      	ldr	r2, [r3, #0]
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	4619      	mov	r1, r3
 800aac2:	f7fe fdfd 	bl	80096c0 <USBD_LL_DataOutStage>
}
 800aac6:	bf00      	nop
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b082      	sub	sp, #8
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	6078      	str	r0, [r7, #4]
 800aad6:	460b      	mov	r3, r1
 800aad8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aae0:	78fa      	ldrb	r2, [r7, #3]
 800aae2:	6879      	ldr	r1, [r7, #4]
 800aae4:	4613      	mov	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4413      	add	r3, r2
 800aaea:	00db      	lsls	r3, r3, #3
 800aaec:	440b      	add	r3, r1
 800aaee:	333c      	adds	r3, #60	; 0x3c
 800aaf0:	681a      	ldr	r2, [r3, #0]
 800aaf2:	78fb      	ldrb	r3, [r7, #3]
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	f7fe fe54 	bl	80097a2 <USBD_LL_DataInStage>
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7fe ff64 	bl	80099de <USBD_LL_SOF>
}
 800ab16:	bf00      	nop
 800ab18:	3708      	adds	r7, #8
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd80      	pop	{r7, pc}

0800ab1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1e:	b580      	push	{r7, lr}
 800ab20:	b084      	sub	sp, #16
 800ab22:	af00      	add	r7, sp, #0
 800ab24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ab26:	2301      	movs	r3, #1
 800ab28:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d001      	beq.n	800ab36 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ab32:	f7f7 fa5f 	bl	8001ff4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab3c:	7bfa      	ldrb	r2, [r7, #15]
 800ab3e:	4611      	mov	r1, r2
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7fe ff14 	bl	800996e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f7fe fecd 	bl	80098ec <USBD_LL_Reset>
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
	...

0800ab5c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe ff0e 	bl	800998c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab78:	4b04      	ldr	r3, [pc, #16]	; (800ab8c <HAL_PCD_SuspendCallback+0x30>)
 800ab7a:	691b      	ldr	r3, [r3, #16]
 800ab7c:	4a03      	ldr	r2, [pc, #12]	; (800ab8c <HAL_PCD_SuspendCallback+0x30>)
 800ab7e:	f043 0306 	orr.w	r3, r3, #6
 800ab82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab84:	bf00      	nop
 800ab86:	3708      	adds	r7, #8
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	bd80      	pop	{r7, pc}
 800ab8c:	e000ed00 	.word	0xe000ed00

0800ab90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe ff08 	bl	80099b4 <USBD_LL_Resume>
}
 800aba4:	bf00      	nop
 800aba6:	3708      	adds	r7, #8
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800abb4:	4a28      	ldr	r2, [pc, #160]	; (800ac58 <USBD_LL_Init+0xac>)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a26      	ldr	r2, [pc, #152]	; (800ac58 <USBD_LL_Init+0xac>)
 800abc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800abc4:	4b24      	ldr	r3, [pc, #144]	; (800ac58 <USBD_LL_Init+0xac>)
 800abc6:	4a25      	ldr	r2, [pc, #148]	; (800ac5c <USBD_LL_Init+0xb0>)
 800abc8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800abca:	4b23      	ldr	r3, [pc, #140]	; (800ac58 <USBD_LL_Init+0xac>)
 800abcc:	2208      	movs	r2, #8
 800abce:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800abd0:	4b21      	ldr	r3, [pc, #132]	; (800ac58 <USBD_LL_Init+0xac>)
 800abd2:	2202      	movs	r2, #2
 800abd4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800abd6:	4b20      	ldr	r3, [pc, #128]	; (800ac58 <USBD_LL_Init+0xac>)
 800abd8:	2200      	movs	r2, #0
 800abda:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800abdc:	4b1e      	ldr	r3, [pc, #120]	; (800ac58 <USBD_LL_Init+0xac>)
 800abde:	2200      	movs	r2, #0
 800abe0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800abe2:	4b1d      	ldr	r3, [pc, #116]	; (800ac58 <USBD_LL_Init+0xac>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800abe8:	481b      	ldr	r0, [pc, #108]	; (800ac58 <USBD_LL_Init+0xac>)
 800abea:	f7f7 fec8 	bl	800297e <HAL_PCD_Init>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d001      	beq.n	800abf8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800abf4:	f7f7 f9fe 	bl	8001ff4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abfe:	2318      	movs	r3, #24
 800ac00:	2200      	movs	r2, #0
 800ac02:	2100      	movs	r1, #0
 800ac04:	f7f9 fb3c 	bl	8004280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac0e:	2358      	movs	r3, #88	; 0x58
 800ac10:	2200      	movs	r2, #0
 800ac12:	2180      	movs	r1, #128	; 0x80
 800ac14:	f7f9 fb34 	bl	8004280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac1e:	23c0      	movs	r3, #192	; 0xc0
 800ac20:	2200      	movs	r2, #0
 800ac22:	2181      	movs	r1, #129	; 0x81
 800ac24:	f7f9 fb2c 	bl	8004280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800ac32:	2200      	movs	r2, #0
 800ac34:	2101      	movs	r1, #1
 800ac36:	f7f9 fb23 	bl	8004280 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac44:	2200      	movs	r2, #0
 800ac46:	2182      	movs	r1, #130	; 0x82
 800ac48:	f7f9 fb1a 	bl	8004280 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac4c:	2300      	movs	r3, #0
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000102c 	.word	0x2000102c
 800ac5c:	40005c00 	.word	0x40005c00

0800ac60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7f7 ff8c 	bl	8002b94 <HAL_PCD_Start>
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac80:	7bfb      	ldrb	r3, [r7, #15]
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 f94e 	bl	800af24 <USBD_Get_USB_Status>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac8c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}

0800ac96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac96:	b580      	push	{r7, lr}
 800ac98:	b084      	sub	sp, #16
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
 800ac9e:	4608      	mov	r0, r1
 800aca0:	4611      	mov	r1, r2
 800aca2:	461a      	mov	r2, r3
 800aca4:	4603      	mov	r3, r0
 800aca6:	70fb      	strb	r3, [r7, #3]
 800aca8:	460b      	mov	r3, r1
 800acaa:	70bb      	strb	r3, [r7, #2]
 800acac:	4613      	mov	r3, r2
 800acae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800acbe:	78bb      	ldrb	r3, [r7, #2]
 800acc0:	883a      	ldrh	r2, [r7, #0]
 800acc2:	78f9      	ldrb	r1, [r7, #3]
 800acc4:	f7f8 f904 	bl	8002ed0 <HAL_PCD_EP_Open>
 800acc8:	4603      	mov	r3, r0
 800acca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800accc:	7bfb      	ldrb	r3, [r7, #15]
 800acce:	4618      	mov	r0, r3
 800acd0:	f000 f928 	bl	800af24 <USBD_Get_USB_Status>
 800acd4:	4603      	mov	r3, r0
 800acd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acd8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3710      	adds	r7, #16
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}

0800ace2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	460b      	mov	r3, r1
 800acec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf2:	2300      	movs	r3, #0
 800acf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acfc:	78fa      	ldrb	r2, [r7, #3]
 800acfe:	4611      	mov	r1, r2
 800ad00:	4618      	mov	r0, r3
 800ad02:	f7f8 f94b 	bl	8002f9c <HAL_PCD_EP_Close>
 800ad06:	4603      	mov	r3, r0
 800ad08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	f000 f909 	bl	800af24 <USBD_Get_USB_Status>
 800ad12:	4603      	mov	r3, r0
 800ad14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3710      	adds	r7, #16
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad30:	2300      	movs	r3, #0
 800ad32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f8 fa0b 	bl	800315a <HAL_PCD_EP_SetStall>
 800ad44:	4603      	mov	r3, r0
 800ad46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 f8ea 	bl	800af24 <USBD_Get_USB_Status>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}

0800ad5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	b084      	sub	sp, #16
 800ad62:	af00      	add	r7, sp, #0
 800ad64:	6078      	str	r0, [r7, #4]
 800ad66:	460b      	mov	r3, r1
 800ad68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad78:	78fa      	ldrb	r2, [r7, #3]
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f7f8 fa4c 	bl	800321a <HAL_PCD_EP_ClrStall>
 800ad82:	4603      	mov	r3, r0
 800ad84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad86:	7bfb      	ldrb	r3, [r7, #15]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 f8cb 	bl	800af24 <USBD_Get_USB_Status>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad92:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3710      	adds	r7, #16
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
 800ada4:	460b      	mov	r3, r1
 800ada6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800adb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	da0c      	bge.n	800add2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adbe:	68f9      	ldr	r1, [r7, #12]
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	00db      	lsls	r3, r3, #3
 800adca:	440b      	add	r3, r1
 800adcc:	3302      	adds	r3, #2
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	e00b      	b.n	800adea <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800add8:	68f9      	ldr	r1, [r7, #12]
 800adda:	4613      	mov	r3, r2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	00db      	lsls	r3, r3, #3
 800ade2:	440b      	add	r3, r1
 800ade4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ade8:	781b      	ldrb	r3, [r3, #0]
  }
}
 800adea:	4618      	mov	r0, r3
 800adec:	3714      	adds	r7, #20
 800adee:	46bd      	mov	sp, r7
 800adf0:	bc80      	pop	{r7}
 800adf2:	4770      	bx	lr

0800adf4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae0e:	78fa      	ldrb	r2, [r7, #3]
 800ae10:	4611      	mov	r1, r2
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7f8 f837 	bl	8002e86 <HAL_PCD_SetAddress>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f880 	bl	800af24 <USBD_Get_USB_Status>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3710      	adds	r7, #16
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b086      	sub	sp, #24
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	60f8      	str	r0, [r7, #12]
 800ae3a:	607a      	str	r2, [r7, #4]
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	460b      	mov	r3, r1
 800ae40:	72fb      	strb	r3, [r7, #11]
 800ae42:	4613      	mov	r3, r2
 800ae44:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae46:	2300      	movs	r3, #0
 800ae48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae54:	893b      	ldrh	r3, [r7, #8]
 800ae56:	7af9      	ldrb	r1, [r7, #11]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	f7f8 f93b 	bl	80030d4 <HAL_PCD_EP_Transmit>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 f85d 	bl	800af24 <USBD_Get_USB_Status>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3718      	adds	r7, #24
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b086      	sub	sp, #24
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	607a      	str	r2, [r7, #4]
 800ae82:	461a      	mov	r2, r3
 800ae84:	460b      	mov	r3, r1
 800ae86:	72fb      	strb	r3, [r7, #11]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae9a:	893b      	ldrh	r3, [r7, #8]
 800ae9c:	7af9      	ldrb	r1, [r7, #11]
 800ae9e:	687a      	ldr	r2, [r7, #4]
 800aea0:	f7f8 f8c4 	bl	800302c <HAL_PCD_EP_Receive>
 800aea4:	4603      	mov	r3, r0
 800aea6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aea8:	7dfb      	ldrb	r3, [r7, #23]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f000 f83a 	bl	800af24 <USBD_Get_USB_Status>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aeb4:	7dbb      	ldrb	r3, [r7, #22]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3718      	adds	r7, #24
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
 800aec6:	460b      	mov	r3, r1
 800aec8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aed0:	78fa      	ldrb	r2, [r7, #3]
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7f8 f8e6 	bl	80030a6 <HAL_PCD_EP_GetRxCount>
 800aeda:	4603      	mov	r3, r0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3708      	adds	r7, #8
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aeec:	4b02      	ldr	r3, [pc, #8]	; (800aef8 <USBD_static_malloc+0x14>)
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bc80      	pop	{r7}
 800aef6:	4770      	bx	lr
 800aef8:	20001318 	.word	0x20001318

0800aefc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]

}
 800af04:	bf00      	nop
 800af06:	370c      	adds	r7, #12
 800af08:	46bd      	mov	sp, r7
 800af0a:	bc80      	pop	{r7}
 800af0c:	4770      	bx	lr

0800af0e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af0e:	b480      	push	{r7}
 800af10:	b083      	sub	sp, #12
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800af1a:	bf00      	nop
 800af1c:	370c      	adds	r7, #12
 800af1e:	46bd      	mov	sp, r7
 800af20:	bc80      	pop	{r7}
 800af22:	4770      	bx	lr

0800af24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	4603      	mov	r3, r0
 800af2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d817      	bhi.n	800af68 <USBD_Get_USB_Status+0x44>
 800af38:	a201      	add	r2, pc, #4	; (adr r2, 800af40 <USBD_Get_USB_Status+0x1c>)
 800af3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af3e:	bf00      	nop
 800af40:	0800af51 	.word	0x0800af51
 800af44:	0800af57 	.word	0x0800af57
 800af48:	0800af5d 	.word	0x0800af5d
 800af4c:	0800af63 	.word	0x0800af63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
    break;
 800af54:	e00b      	b.n	800af6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af56:	2302      	movs	r3, #2
 800af58:	73fb      	strb	r3, [r7, #15]
    break;
 800af5a:	e008      	b.n	800af6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af5c:	2301      	movs	r3, #1
 800af5e:	73fb      	strb	r3, [r7, #15]
    break;
 800af60:	e005      	b.n	800af6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af62:	2302      	movs	r3, #2
 800af64:	73fb      	strb	r3, [r7, #15]
    break;
 800af66:	e002      	b.n	800af6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af68:	2302      	movs	r3, #2
 800af6a:	73fb      	strb	r3, [r7, #15]
    break;
 800af6c:	bf00      	nop
  }
  return usb_status;
 800af6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af70:	4618      	mov	r0, r3
 800af72:	3714      	adds	r7, #20
 800af74:	46bd      	mov	sp, r7
 800af76:	bc80      	pop	{r7}
 800af78:	4770      	bx	lr
 800af7a:	bf00      	nop

0800af7c <cos>:
 800af7c:	b530      	push	{r4, r5, lr}
 800af7e:	4a20      	ldr	r2, [pc, #128]	; (800b000 <cos+0x84>)
 800af80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af84:	4293      	cmp	r3, r2
 800af86:	b087      	sub	sp, #28
 800af88:	dc06      	bgt.n	800af98 <cos+0x1c>
 800af8a:	2200      	movs	r2, #0
 800af8c:	2300      	movs	r3, #0
 800af8e:	b007      	add	sp, #28
 800af90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af94:	f000 bc54 	b.w	800b840 <__kernel_cos>
 800af98:	4a1a      	ldr	r2, [pc, #104]	; (800b004 <cos+0x88>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	dd05      	ble.n	800afaa <cos+0x2e>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	f7f5 f8e1 	bl	8000168 <__aeabi_dsub>
 800afa6:	b007      	add	sp, #28
 800afa8:	bd30      	pop	{r4, r5, pc}
 800afaa:	aa02      	add	r2, sp, #8
 800afac:	f000 fa50 	bl	800b450 <__ieee754_rem_pio2>
 800afb0:	f000 0003 	and.w	r0, r0, #3
 800afb4:	2801      	cmp	r0, #1
 800afb6:	d009      	beq.n	800afcc <cos+0x50>
 800afb8:	2802      	cmp	r0, #2
 800afba:	d011      	beq.n	800afe0 <cos+0x64>
 800afbc:	b9b8      	cbnz	r0, 800afee <cos+0x72>
 800afbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afc6:	f000 fc3b 	bl	800b840 <__kernel_cos>
 800afca:	e7ec      	b.n	800afa6 <cos+0x2a>
 800afcc:	9000      	str	r0, [sp, #0]
 800afce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afd6:	f001 f833 	bl	800c040 <__kernel_sin>
 800afda:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800afde:	e7e2      	b.n	800afa6 <cos+0x2a>
 800afe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afe4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afe8:	f000 fc2a 	bl	800b840 <__kernel_cos>
 800afec:	e7f5      	b.n	800afda <cos+0x5e>
 800afee:	2301      	movs	r3, #1
 800aff0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800affa:	f001 f821 	bl	800c040 <__kernel_sin>
 800affe:	e7d2      	b.n	800afa6 <cos+0x2a>
 800b000:	3fe921fb 	.word	0x3fe921fb
 800b004:	7fefffff 	.word	0x7fefffff

0800b008 <floor>:
 800b008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b00c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800b010:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800b014:	2e13      	cmp	r6, #19
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	4607      	mov	r7, r0
 800b01c:	460c      	mov	r4, r1
 800b01e:	4605      	mov	r5, r0
 800b020:	dc33      	bgt.n	800b08a <floor+0x82>
 800b022:	2e00      	cmp	r6, #0
 800b024:	da14      	bge.n	800b050 <floor+0x48>
 800b026:	a334      	add	r3, pc, #208	; (adr r3, 800b0f8 <floor+0xf0>)
 800b028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02c:	f7f5 f89e 	bl	800016c <__adddf3>
 800b030:	2200      	movs	r2, #0
 800b032:	2300      	movs	r3, #0
 800b034:	f7f5 fce0 	bl	80009f8 <__aeabi_dcmpgt>
 800b038:	b138      	cbz	r0, 800b04a <floor+0x42>
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	da58      	bge.n	800b0f0 <floor+0xe8>
 800b03e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b042:	431d      	orrs	r5, r3
 800b044:	d001      	beq.n	800b04a <floor+0x42>
 800b046:	2500      	movs	r5, #0
 800b048:	4c2d      	ldr	r4, [pc, #180]	; (800b100 <floor+0xf8>)
 800b04a:	4623      	mov	r3, r4
 800b04c:	462f      	mov	r7, r5
 800b04e:	e025      	b.n	800b09c <floor+0x94>
 800b050:	4a2c      	ldr	r2, [pc, #176]	; (800b104 <floor+0xfc>)
 800b052:	fa42 f806 	asr.w	r8, r2, r6
 800b056:	ea01 0208 	and.w	r2, r1, r8
 800b05a:	4302      	orrs	r2, r0
 800b05c:	d01e      	beq.n	800b09c <floor+0x94>
 800b05e:	a326      	add	r3, pc, #152	; (adr r3, 800b0f8 <floor+0xf0>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 f882 	bl	800016c <__adddf3>
 800b068:	2200      	movs	r2, #0
 800b06a:	2300      	movs	r3, #0
 800b06c:	f7f5 fcc4 	bl	80009f8 <__aeabi_dcmpgt>
 800b070:	2800      	cmp	r0, #0
 800b072:	d0ea      	beq.n	800b04a <floor+0x42>
 800b074:	2c00      	cmp	r4, #0
 800b076:	bfbe      	ittt	lt
 800b078:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b07c:	fa43 f606 	asrlt.w	r6, r3, r6
 800b080:	19a4      	addlt	r4, r4, r6
 800b082:	2500      	movs	r5, #0
 800b084:	ea24 0408 	bic.w	r4, r4, r8
 800b088:	e7df      	b.n	800b04a <floor+0x42>
 800b08a:	2e33      	cmp	r6, #51	; 0x33
 800b08c:	dd0a      	ble.n	800b0a4 <floor+0x9c>
 800b08e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b092:	d103      	bne.n	800b09c <floor+0x94>
 800b094:	f7f5 f86a 	bl	800016c <__adddf3>
 800b098:	4607      	mov	r7, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4638      	mov	r0, r7
 800b09e:	4619      	mov	r1, r3
 800b0a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0a8:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b0ac:	fa22 f808 	lsr.w	r8, r2, r8
 800b0b0:	ea18 0f00 	tst.w	r8, r0
 800b0b4:	d0f2      	beq.n	800b09c <floor+0x94>
 800b0b6:	a310      	add	r3, pc, #64	; (adr r3, 800b0f8 <floor+0xf0>)
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f7f5 f856 	bl	800016c <__adddf3>
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f7f5 fc98 	bl	80009f8 <__aeabi_dcmpgt>
 800b0c8:	2800      	cmp	r0, #0
 800b0ca:	d0be      	beq.n	800b04a <floor+0x42>
 800b0cc:	2c00      	cmp	r4, #0
 800b0ce:	da02      	bge.n	800b0d6 <floor+0xce>
 800b0d0:	2e14      	cmp	r6, #20
 800b0d2:	d103      	bne.n	800b0dc <floor+0xd4>
 800b0d4:	3401      	adds	r4, #1
 800b0d6:	ea25 0508 	bic.w	r5, r5, r8
 800b0da:	e7b6      	b.n	800b04a <floor+0x42>
 800b0dc:	2301      	movs	r3, #1
 800b0de:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b0e2:	fa03 f606 	lsl.w	r6, r3, r6
 800b0e6:	4435      	add	r5, r6
 800b0e8:	42bd      	cmp	r5, r7
 800b0ea:	bf38      	it	cc
 800b0ec:	18e4      	addcc	r4, r4, r3
 800b0ee:	e7f2      	b.n	800b0d6 <floor+0xce>
 800b0f0:	2500      	movs	r5, #0
 800b0f2:	462c      	mov	r4, r5
 800b0f4:	e7a9      	b.n	800b04a <floor+0x42>
 800b0f6:	bf00      	nop
 800b0f8:	8800759c 	.word	0x8800759c
 800b0fc:	7e37e43c 	.word	0x7e37e43c
 800b100:	bff00000 	.word	0xbff00000
 800b104:	000fffff 	.word	0x000fffff

0800b108 <sin>:
 800b108:	b530      	push	{r4, r5, lr}
 800b10a:	4a20      	ldr	r2, [pc, #128]	; (800b18c <sin+0x84>)
 800b10c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b110:	4293      	cmp	r3, r2
 800b112:	b087      	sub	sp, #28
 800b114:	dc06      	bgt.n	800b124 <sin+0x1c>
 800b116:	2300      	movs	r3, #0
 800b118:	2200      	movs	r2, #0
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	2300      	movs	r3, #0
 800b11e:	f000 ff8f 	bl	800c040 <__kernel_sin>
 800b122:	e006      	b.n	800b132 <sin+0x2a>
 800b124:	4a1a      	ldr	r2, [pc, #104]	; (800b190 <sin+0x88>)
 800b126:	4293      	cmp	r3, r2
 800b128:	dd05      	ble.n	800b136 <sin+0x2e>
 800b12a:	4602      	mov	r2, r0
 800b12c:	460b      	mov	r3, r1
 800b12e:	f7f5 f81b 	bl	8000168 <__aeabi_dsub>
 800b132:	b007      	add	sp, #28
 800b134:	bd30      	pop	{r4, r5, pc}
 800b136:	aa02      	add	r2, sp, #8
 800b138:	f000 f98a 	bl	800b450 <__ieee754_rem_pio2>
 800b13c:	f000 0003 	and.w	r0, r0, #3
 800b140:	2801      	cmp	r0, #1
 800b142:	d009      	beq.n	800b158 <sin+0x50>
 800b144:	2802      	cmp	r0, #2
 800b146:	d00e      	beq.n	800b166 <sin+0x5e>
 800b148:	b9c0      	cbnz	r0, 800b17c <sin+0x74>
 800b14a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b14e:	2301      	movs	r3, #1
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b156:	e7e2      	b.n	800b11e <sin+0x16>
 800b158:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b15c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b160:	f000 fb6e 	bl	800b840 <__kernel_cos>
 800b164:	e7e5      	b.n	800b132 <sin+0x2a>
 800b166:	2301      	movs	r3, #1
 800b168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b172:	f000 ff65 	bl	800c040 <__kernel_sin>
 800b176:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b17a:	e7da      	b.n	800b132 <sin+0x2a>
 800b17c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b180:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b184:	f000 fb5c 	bl	800b840 <__kernel_cos>
 800b188:	e7f5      	b.n	800b176 <sin+0x6e>
 800b18a:	bf00      	nop
 800b18c:	3fe921fb 	.word	0x3fe921fb
 800b190:	7fefffff 	.word	0x7fefffff

0800b194 <roundf>:
 800b194:	b508      	push	{r3, lr}
 800b196:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b19a:	3b7f      	subs	r3, #127	; 0x7f
 800b19c:	2b16      	cmp	r3, #22
 800b19e:	4601      	mov	r1, r0
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	dc14      	bgt.n	800b1ce <roundf+0x3a>
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da07      	bge.n	800b1b8 <roundf+0x24>
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b1ae:	d101      	bne.n	800b1b4 <roundf+0x20>
 800b1b0:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b1b4:	4608      	mov	r0, r1
 800b1b6:	bd08      	pop	{r3, pc}
 800b1b8:	4808      	ldr	r0, [pc, #32]	; (800b1dc <roundf+0x48>)
 800b1ba:	4118      	asrs	r0, r3
 800b1bc:	4201      	tst	r1, r0
 800b1be:	d0f9      	beq.n	800b1b4 <roundf+0x20>
 800b1c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1c4:	4119      	asrs	r1, r3
 800b1c6:	4411      	add	r1, r2
 800b1c8:	ea21 0100 	bic.w	r1, r1, r0
 800b1cc:	e7f2      	b.n	800b1b4 <roundf+0x20>
 800b1ce:	2b80      	cmp	r3, #128	; 0x80
 800b1d0:	d1f0      	bne.n	800b1b4 <roundf+0x20>
 800b1d2:	f7f5 fcaf 	bl	8000b34 <__addsf3>
 800b1d6:	4601      	mov	r1, r0
 800b1d8:	e7ec      	b.n	800b1b4 <roundf+0x20>
 800b1da:	bf00      	nop
 800b1dc:	007fffff 	.word	0x007fffff

0800b1e0 <fmod>:
 800b1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4689      	mov	r9, r1
 800b1e8:	4616      	mov	r6, r2
 800b1ea:	461f      	mov	r7, r3
 800b1ec:	f000 f820 	bl	800b230 <__ieee754_fmod>
 800b1f0:	4632      	mov	r2, r6
 800b1f2:	4604      	mov	r4, r0
 800b1f4:	460d      	mov	r5, r1
 800b1f6:	463b      	mov	r3, r7
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	f7f5 fc06 	bl	8000a0c <__aeabi_dcmpun>
 800b200:	b990      	cbnz	r0, 800b228 <fmod+0x48>
 800b202:	2200      	movs	r2, #0
 800b204:	2300      	movs	r3, #0
 800b206:	4630      	mov	r0, r6
 800b208:	4639      	mov	r1, r7
 800b20a:	f7f5 fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800b20e:	b158      	cbz	r0, 800b228 <fmod+0x48>
 800b210:	f001 f850 	bl	800c2b4 <__errno>
 800b214:	2321      	movs	r3, #33	; 0x21
 800b216:	2200      	movs	r2, #0
 800b218:	6003      	str	r3, [r0, #0]
 800b21a:	2300      	movs	r3, #0
 800b21c:	4610      	mov	r0, r2
 800b21e:	4619      	mov	r1, r3
 800b220:	f7f5 fa84 	bl	800072c <__aeabi_ddiv>
 800b224:	4604      	mov	r4, r0
 800b226:	460d      	mov	r5, r1
 800b228:	4620      	mov	r0, r4
 800b22a:	4629      	mov	r1, r5
 800b22c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b230 <__ieee754_fmod>:
 800b230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b234:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800b238:	460e      	mov	r6, r1
 800b23a:	461d      	mov	r5, r3
 800b23c:	4619      	mov	r1, r3
 800b23e:	ea58 0302 	orrs.w	r3, r8, r2
 800b242:	4607      	mov	r7, r0
 800b244:	4614      	mov	r4, r2
 800b246:	4694      	mov	ip, r2
 800b248:	4696      	mov	lr, r2
 800b24a:	d00c      	beq.n	800b266 <__ieee754_fmod+0x36>
 800b24c:	4a7a      	ldr	r2, [pc, #488]	; (800b438 <__ieee754_fmod+0x208>)
 800b24e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b252:	4293      	cmp	r3, r2
 800b254:	46b2      	mov	sl, r6
 800b256:	dc06      	bgt.n	800b266 <__ieee754_fmod+0x36>
 800b258:	4262      	negs	r2, r4
 800b25a:	4878      	ldr	r0, [pc, #480]	; (800b43c <__ieee754_fmod+0x20c>)
 800b25c:	4322      	orrs	r2, r4
 800b25e:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800b262:	4282      	cmp	r2, r0
 800b264:	d90c      	bls.n	800b280 <__ieee754_fmod+0x50>
 800b266:	460b      	mov	r3, r1
 800b268:	4622      	mov	r2, r4
 800b26a:	4638      	mov	r0, r7
 800b26c:	4631      	mov	r1, r6
 800b26e:	f7f5 f933 	bl	80004d8 <__aeabi_dmul>
 800b272:	4602      	mov	r2, r0
 800b274:	460b      	mov	r3, r1
 800b276:	f7f5 fa59 	bl	800072c <__aeabi_ddiv>
 800b27a:	4607      	mov	r7, r0
 800b27c:	460e      	mov	r6, r1
 800b27e:	e00e      	b.n	800b29e <__ieee754_fmod+0x6e>
 800b280:	4543      	cmp	r3, r8
 800b282:	46b9      	mov	r9, r7
 800b284:	4639      	mov	r1, r7
 800b286:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800b28a:	dc0c      	bgt.n	800b2a6 <__ieee754_fmod+0x76>
 800b28c:	db07      	blt.n	800b29e <__ieee754_fmod+0x6e>
 800b28e:	4567      	cmp	r7, ip
 800b290:	d305      	bcc.n	800b29e <__ieee754_fmod+0x6e>
 800b292:	d108      	bne.n	800b2a6 <__ieee754_fmod+0x76>
 800b294:	4b6a      	ldr	r3, [pc, #424]	; (800b440 <__ieee754_fmod+0x210>)
 800b296:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800b29a:	e9d4 7600 	ldrd	r7, r6, [r4]
 800b29e:	4638      	mov	r0, r7
 800b2a0:	4631      	mov	r1, r6
 800b2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2a6:	ea1a 0f00 	tst.w	sl, r0
 800b2aa:	d14a      	bne.n	800b342 <__ieee754_fmod+0x112>
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d141      	bne.n	800b334 <__ieee754_fmod+0x104>
 800b2b0:	464a      	mov	r2, r9
 800b2b2:	4864      	ldr	r0, [pc, #400]	; (800b444 <__ieee754_fmod+0x214>)
 800b2b4:	2a00      	cmp	r2, #0
 800b2b6:	dc3a      	bgt.n	800b32e <__ieee754_fmod+0xfe>
 800b2b8:	4a60      	ldr	r2, [pc, #384]	; (800b43c <__ieee754_fmod+0x20c>)
 800b2ba:	402a      	ands	r2, r5
 800b2bc:	2a00      	cmp	r2, #0
 800b2be:	d14f      	bne.n	800b360 <__ieee754_fmod+0x130>
 800b2c0:	f1b8 0f00 	cmp.w	r8, #0
 800b2c4:	d144      	bne.n	800b350 <__ieee754_fmod+0x120>
 800b2c6:	4666      	mov	r6, ip
 800b2c8:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	dc3c      	bgt.n	800b34a <__ieee754_fmod+0x11a>
 800b2d0:	4e5d      	ldr	r6, [pc, #372]	; (800b448 <__ieee754_fmod+0x218>)
 800b2d2:	42b0      	cmp	r0, r6
 800b2d4:	db49      	blt.n	800b36a <__ieee754_fmod+0x13a>
 800b2d6:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b2da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2de:	4e5a      	ldr	r6, [pc, #360]	; (800b448 <__ieee754_fmod+0x218>)
 800b2e0:	42b2      	cmp	r2, r6
 800b2e2:	db54      	blt.n	800b38e <__ieee754_fmod+0x15e>
 800b2e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b2e8:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800b2ec:	1a80      	subs	r0, r0, r2
 800b2ee:	1b5e      	subs	r6, r3, r5
 800b2f0:	eba1 070e 	sub.w	r7, r1, lr
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d161      	bne.n	800b3bc <__ieee754_fmod+0x18c>
 800b2f8:	4571      	cmp	r1, lr
 800b2fa:	bf38      	it	cc
 800b2fc:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b300:	2e00      	cmp	r6, #0
 800b302:	bfa4      	itt	ge
 800b304:	4639      	movge	r1, r7
 800b306:	4633      	movge	r3, r6
 800b308:	ea53 0001 	orrs.w	r0, r3, r1
 800b30c:	d0c2      	beq.n	800b294 <__ieee754_fmod+0x64>
 800b30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b312:	db68      	blt.n	800b3e6 <__ieee754_fmod+0x1b6>
 800b314:	484c      	ldr	r0, [pc, #304]	; (800b448 <__ieee754_fmod+0x218>)
 800b316:	4282      	cmp	r2, r0
 800b318:	db6b      	blt.n	800b3f2 <__ieee754_fmod+0x1c2>
 800b31a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b31e:	431c      	orrs	r4, r3
 800b320:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b324:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800b328:	460f      	mov	r7, r1
 800b32a:	464e      	mov	r6, r9
 800b32c:	e7b7      	b.n	800b29e <__ieee754_fmod+0x6e>
 800b32e:	3801      	subs	r0, #1
 800b330:	0052      	lsls	r2, r2, #1
 800b332:	e7bf      	b.n	800b2b4 <__ieee754_fmod+0x84>
 800b334:	4844      	ldr	r0, [pc, #272]	; (800b448 <__ieee754_fmod+0x218>)
 800b336:	02da      	lsls	r2, r3, #11
 800b338:	2a00      	cmp	r2, #0
 800b33a:	ddbd      	ble.n	800b2b8 <__ieee754_fmod+0x88>
 800b33c:	3801      	subs	r0, #1
 800b33e:	0052      	lsls	r2, r2, #1
 800b340:	e7fa      	b.n	800b338 <__ieee754_fmod+0x108>
 800b342:	1518      	asrs	r0, r3, #20
 800b344:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800b348:	e7b6      	b.n	800b2b8 <__ieee754_fmod+0x88>
 800b34a:	3a01      	subs	r2, #1
 800b34c:	0076      	lsls	r6, r6, #1
 800b34e:	e7bd      	b.n	800b2cc <__ieee754_fmod+0x9c>
 800b350:	4a3d      	ldr	r2, [pc, #244]	; (800b448 <__ieee754_fmod+0x218>)
 800b352:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800b356:	2e00      	cmp	r6, #0
 800b358:	ddba      	ble.n	800b2d0 <__ieee754_fmod+0xa0>
 800b35a:	3a01      	subs	r2, #1
 800b35c:	0076      	lsls	r6, r6, #1
 800b35e:	e7fa      	b.n	800b356 <__ieee754_fmod+0x126>
 800b360:	ea4f 5228 	mov.w	r2, r8, asr #20
 800b364:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b368:	e7b2      	b.n	800b2d0 <__ieee754_fmod+0xa0>
 800b36a:	1a31      	subs	r1, r6, r0
 800b36c:	291f      	cmp	r1, #31
 800b36e:	dc08      	bgt.n	800b382 <__ieee754_fmod+0x152>
 800b370:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800b374:	408b      	lsls	r3, r1
 800b376:	fa29 f606 	lsr.w	r6, r9, r6
 800b37a:	4333      	orrs	r3, r6
 800b37c:	fa09 f101 	lsl.w	r1, r9, r1
 800b380:	e7ad      	b.n	800b2de <__ieee754_fmod+0xae>
 800b382:	4b32      	ldr	r3, [pc, #200]	; (800b44c <__ieee754_fmod+0x21c>)
 800b384:	2100      	movs	r1, #0
 800b386:	1a1b      	subs	r3, r3, r0
 800b388:	fa09 f303 	lsl.w	r3, r9, r3
 800b38c:	e7a7      	b.n	800b2de <__ieee754_fmod+0xae>
 800b38e:	eba6 0e02 	sub.w	lr, r6, r2
 800b392:	f1be 0f1f 	cmp.w	lr, #31
 800b396:	dc0a      	bgt.n	800b3ae <__ieee754_fmod+0x17e>
 800b398:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800b39c:	fa08 f80e 	lsl.w	r8, r8, lr
 800b3a0:	fa2c f505 	lsr.w	r5, ip, r5
 800b3a4:	ea45 0508 	orr.w	r5, r5, r8
 800b3a8:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b3ac:	e79e      	b.n	800b2ec <__ieee754_fmod+0xbc>
 800b3ae:	4d27      	ldr	r5, [pc, #156]	; (800b44c <__ieee754_fmod+0x21c>)
 800b3b0:	f04f 0e00 	mov.w	lr, #0
 800b3b4:	1aad      	subs	r5, r5, r2
 800b3b6:	fa0c f505 	lsl.w	r5, ip, r5
 800b3ba:	e797      	b.n	800b2ec <__ieee754_fmod+0xbc>
 800b3bc:	4571      	cmp	r1, lr
 800b3be:	bf38      	it	cc
 800b3c0:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b3c4:	2e00      	cmp	r6, #0
 800b3c6:	da05      	bge.n	800b3d4 <__ieee754_fmod+0x1a4>
 800b3c8:	0fce      	lsrs	r6, r1, #31
 800b3ca:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800b3ce:	0049      	lsls	r1, r1, #1
 800b3d0:	3801      	subs	r0, #1
 800b3d2:	e78c      	b.n	800b2ee <__ieee754_fmod+0xbe>
 800b3d4:	ea56 0307 	orrs.w	r3, r6, r7
 800b3d8:	f43f af5c 	beq.w	800b294 <__ieee754_fmod+0x64>
 800b3dc:	0ffb      	lsrs	r3, r7, #31
 800b3de:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800b3e2:	0079      	lsls	r1, r7, #1
 800b3e4:	e7f4      	b.n	800b3d0 <__ieee754_fmod+0x1a0>
 800b3e6:	0fc8      	lsrs	r0, r1, #31
 800b3e8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b3ec:	0049      	lsls	r1, r1, #1
 800b3ee:	3a01      	subs	r2, #1
 800b3f0:	e78d      	b.n	800b30e <__ieee754_fmod+0xde>
 800b3f2:	1a80      	subs	r0, r0, r2
 800b3f4:	2814      	cmp	r0, #20
 800b3f6:	dc0a      	bgt.n	800b40e <__ieee754_fmod+0x1de>
 800b3f8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b3fc:	fa03 f202 	lsl.w	r2, r3, r2
 800b400:	40c1      	lsrs	r1, r0
 800b402:	430a      	orrs	r2, r1
 800b404:	4103      	asrs	r3, r0
 800b406:	4610      	mov	r0, r2
 800b408:	ea43 0104 	orr.w	r1, r3, r4
 800b40c:	e735      	b.n	800b27a <__ieee754_fmod+0x4a>
 800b40e:	281f      	cmp	r0, #31
 800b410:	dc07      	bgt.n	800b422 <__ieee754_fmod+0x1f2>
 800b412:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b416:	40c1      	lsrs	r1, r0
 800b418:	fa03 f202 	lsl.w	r2, r3, r2
 800b41c:	430a      	orrs	r2, r1
 800b41e:	4623      	mov	r3, r4
 800b420:	e7f1      	b.n	800b406 <__ieee754_fmod+0x1d6>
 800b422:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b426:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b42a:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b42e:	32e2      	adds	r2, #226	; 0xe2
 800b430:	fa43 f202 	asr.w	r2, r3, r2
 800b434:	e7f3      	b.n	800b41e <__ieee754_fmod+0x1ee>
 800b436:	bf00      	nop
 800b438:	7fefffff 	.word	0x7fefffff
 800b43c:	7ff00000 	.word	0x7ff00000
 800b440:	0800ccc0 	.word	0x0800ccc0
 800b444:	fffffbed 	.word	0xfffffbed
 800b448:	fffffc02 	.word	0xfffffc02
 800b44c:	fffffbe2 	.word	0xfffffbe2

0800b450 <__ieee754_rem_pio2>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	4614      	mov	r4, r2
 800b456:	4ac4      	ldr	r2, [pc, #784]	; (800b768 <__ieee754_rem_pio2+0x318>)
 800b458:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b45c:	b08d      	sub	sp, #52	; 0x34
 800b45e:	4592      	cmp	sl, r2
 800b460:	9104      	str	r1, [sp, #16]
 800b462:	dc07      	bgt.n	800b474 <__ieee754_rem_pio2+0x24>
 800b464:	2200      	movs	r2, #0
 800b466:	2300      	movs	r3, #0
 800b468:	e9c4 0100 	strd	r0, r1, [r4]
 800b46c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b470:	2500      	movs	r5, #0
 800b472:	e024      	b.n	800b4be <__ieee754_rem_pio2+0x6e>
 800b474:	4abd      	ldr	r2, [pc, #756]	; (800b76c <__ieee754_rem_pio2+0x31c>)
 800b476:	4592      	cmp	sl, r2
 800b478:	dc72      	bgt.n	800b560 <__ieee754_rem_pio2+0x110>
 800b47a:	9b04      	ldr	r3, [sp, #16]
 800b47c:	4dbc      	ldr	r5, [pc, #752]	; (800b770 <__ieee754_rem_pio2+0x320>)
 800b47e:	2b00      	cmp	r3, #0
 800b480:	a3ab      	add	r3, pc, #684	; (adr r3, 800b730 <__ieee754_rem_pio2+0x2e0>)
 800b482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b486:	dd36      	ble.n	800b4f6 <__ieee754_rem_pio2+0xa6>
 800b488:	f7f4 fe6e 	bl	8000168 <__aeabi_dsub>
 800b48c:	45aa      	cmp	sl, r5
 800b48e:	4606      	mov	r6, r0
 800b490:	460f      	mov	r7, r1
 800b492:	d018      	beq.n	800b4c6 <__ieee754_rem_pio2+0x76>
 800b494:	a3a8      	add	r3, pc, #672	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2e8>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 fe65 	bl	8000168 <__aeabi_dsub>
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	e9c4 2300 	strd	r2, r3, [r4]
 800b4a8:	4639      	mov	r1, r7
 800b4aa:	f7f4 fe5d 	bl	8000168 <__aeabi_dsub>
 800b4ae:	a3a2      	add	r3, pc, #648	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2e8>)
 800b4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b4:	f7f4 fe58 	bl	8000168 <__aeabi_dsub>
 800b4b8:	2501      	movs	r5, #1
 800b4ba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4be:	4628      	mov	r0, r5
 800b4c0:	b00d      	add	sp, #52	; 0x34
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	a39e      	add	r3, pc, #632	; (adr r3, 800b740 <__ieee754_rem_pio2+0x2f0>)
 800b4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4cc:	f7f4 fe4c 	bl	8000168 <__aeabi_dsub>
 800b4d0:	a39d      	add	r3, pc, #628	; (adr r3, 800b748 <__ieee754_rem_pio2+0x2f8>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	460f      	mov	r7, r1
 800b4da:	f7f4 fe45 	bl	8000168 <__aeabi_dsub>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	e9c4 2300 	strd	r2, r3, [r4]
 800b4e8:	4639      	mov	r1, r7
 800b4ea:	f7f4 fe3d 	bl	8000168 <__aeabi_dsub>
 800b4ee:	a396      	add	r3, pc, #600	; (adr r3, 800b748 <__ieee754_rem_pio2+0x2f8>)
 800b4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f4:	e7de      	b.n	800b4b4 <__ieee754_rem_pio2+0x64>
 800b4f6:	f7f4 fe39 	bl	800016c <__adddf3>
 800b4fa:	45aa      	cmp	sl, r5
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	460f      	mov	r7, r1
 800b500:	d016      	beq.n	800b530 <__ieee754_rem_pio2+0xe0>
 800b502:	a38d      	add	r3, pc, #564	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2e8>)
 800b504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b508:	f7f4 fe30 	bl	800016c <__adddf3>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4630      	mov	r0, r6
 800b512:	e9c4 2300 	strd	r2, r3, [r4]
 800b516:	4639      	mov	r1, r7
 800b518:	f7f4 fe26 	bl	8000168 <__aeabi_dsub>
 800b51c:	a386      	add	r3, pc, #536	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2e8>)
 800b51e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b522:	f7f4 fe23 	bl	800016c <__adddf3>
 800b526:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b52a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b52e:	e7c6      	b.n	800b4be <__ieee754_rem_pio2+0x6e>
 800b530:	a383      	add	r3, pc, #524	; (adr r3, 800b740 <__ieee754_rem_pio2+0x2f0>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f4 fe19 	bl	800016c <__adddf3>
 800b53a:	a383      	add	r3, pc, #524	; (adr r3, 800b748 <__ieee754_rem_pio2+0x2f8>)
 800b53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b540:	4606      	mov	r6, r0
 800b542:	460f      	mov	r7, r1
 800b544:	f7f4 fe12 	bl	800016c <__adddf3>
 800b548:	4602      	mov	r2, r0
 800b54a:	460b      	mov	r3, r1
 800b54c:	4630      	mov	r0, r6
 800b54e:	e9c4 2300 	strd	r2, r3, [r4]
 800b552:	4639      	mov	r1, r7
 800b554:	f7f4 fe08 	bl	8000168 <__aeabi_dsub>
 800b558:	a37b      	add	r3, pc, #492	; (adr r3, 800b748 <__ieee754_rem_pio2+0x2f8>)
 800b55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55e:	e7e0      	b.n	800b522 <__ieee754_rem_pio2+0xd2>
 800b560:	4a84      	ldr	r2, [pc, #528]	; (800b774 <__ieee754_rem_pio2+0x324>)
 800b562:	4592      	cmp	sl, r2
 800b564:	f300 80d5 	bgt.w	800b712 <__ieee754_rem_pio2+0x2c2>
 800b568:	f000 fe20 	bl	800c1ac <fabs>
 800b56c:	a378      	add	r3, pc, #480	; (adr r3, 800b750 <__ieee754_rem_pio2+0x300>)
 800b56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b572:	4606      	mov	r6, r0
 800b574:	460f      	mov	r7, r1
 800b576:	f7f4 ffaf 	bl	80004d8 <__aeabi_dmul>
 800b57a:	2200      	movs	r2, #0
 800b57c:	4b7e      	ldr	r3, [pc, #504]	; (800b778 <__ieee754_rem_pio2+0x328>)
 800b57e:	f7f4 fdf5 	bl	800016c <__adddf3>
 800b582:	f7f5 fa59 	bl	8000a38 <__aeabi_d2iz>
 800b586:	4605      	mov	r5, r0
 800b588:	f7f4 ff3c 	bl	8000404 <__aeabi_i2d>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b594:	a366      	add	r3, pc, #408	; (adr r3, 800b730 <__ieee754_rem_pio2+0x2e0>)
 800b596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59a:	f7f4 ff9d 	bl	80004d8 <__aeabi_dmul>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	460b      	mov	r3, r1
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	f7f4 fddf 	bl	8000168 <__aeabi_dsub>
 800b5aa:	a363      	add	r3, pc, #396	; (adr r3, 800b738 <__ieee754_rem_pio2+0x2e8>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	4680      	mov	r8, r0
 800b5b2:	4689      	mov	r9, r1
 800b5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5b8:	f7f4 ff8e 	bl	80004d8 <__aeabi_dmul>
 800b5bc:	2d1f      	cmp	r5, #31
 800b5be:	4606      	mov	r6, r0
 800b5c0:	460f      	mov	r7, r1
 800b5c2:	dc0e      	bgt.n	800b5e2 <__ieee754_rem_pio2+0x192>
 800b5c4:	4b6d      	ldr	r3, [pc, #436]	; (800b77c <__ieee754_rem_pio2+0x32c>)
 800b5c6:	1e6a      	subs	r2, r5, #1
 800b5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5cc:	4553      	cmp	r3, sl
 800b5ce:	d008      	beq.n	800b5e2 <__ieee754_rem_pio2+0x192>
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	4640      	mov	r0, r8
 800b5d6:	4649      	mov	r1, r9
 800b5d8:	f7f4 fdc6 	bl	8000168 <__aeabi_dsub>
 800b5dc:	e9c4 0100 	strd	r0, r1, [r4]
 800b5e0:	e013      	b.n	800b60a <__ieee754_rem_pio2+0x1ba>
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	4632      	mov	r2, r6
 800b5e6:	4640      	mov	r0, r8
 800b5e8:	4649      	mov	r1, r9
 800b5ea:	f7f4 fdbd 	bl	8000168 <__aeabi_dsub>
 800b5ee:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b5f2:	9305      	str	r3, [sp, #20]
 800b5f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5f8:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b5fc:	f1ba 0f10 	cmp.w	sl, #16
 800b600:	dc1f      	bgt.n	800b642 <__ieee754_rem_pio2+0x1f2>
 800b602:	4602      	mov	r2, r0
 800b604:	460b      	mov	r3, r1
 800b606:	e9c4 2300 	strd	r2, r3, [r4]
 800b60a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b60e:	4640      	mov	r0, r8
 800b610:	4653      	mov	r3, sl
 800b612:	4649      	mov	r1, r9
 800b614:	f7f4 fda8 	bl	8000168 <__aeabi_dsub>
 800b618:	4632      	mov	r2, r6
 800b61a:	463b      	mov	r3, r7
 800b61c:	f7f4 fda4 	bl	8000168 <__aeabi_dsub>
 800b620:	460b      	mov	r3, r1
 800b622:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b626:	9904      	ldr	r1, [sp, #16]
 800b628:	4602      	mov	r2, r0
 800b62a:	2900      	cmp	r1, #0
 800b62c:	f6bf af47 	bge.w	800b4be <__ieee754_rem_pio2+0x6e>
 800b630:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b634:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b638:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b63c:	60e3      	str	r3, [r4, #12]
 800b63e:	426d      	negs	r5, r5
 800b640:	e73d      	b.n	800b4be <__ieee754_rem_pio2+0x6e>
 800b642:	a33f      	add	r3, pc, #252	; (adr r3, 800b740 <__ieee754_rem_pio2+0x2f0>)
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b64c:	f7f4 ff44 	bl	80004d8 <__aeabi_dmul>
 800b650:	4606      	mov	r6, r0
 800b652:	460f      	mov	r7, r1
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4640      	mov	r0, r8
 800b65a:	4649      	mov	r1, r9
 800b65c:	f7f4 fd84 	bl	8000168 <__aeabi_dsub>
 800b660:	4602      	mov	r2, r0
 800b662:	460b      	mov	r3, r1
 800b664:	4682      	mov	sl, r0
 800b666:	468b      	mov	fp, r1
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	f7f4 fd7c 	bl	8000168 <__aeabi_dsub>
 800b670:	4632      	mov	r2, r6
 800b672:	463b      	mov	r3, r7
 800b674:	f7f4 fd78 	bl	8000168 <__aeabi_dsub>
 800b678:	a333      	add	r3, pc, #204	; (adr r3, 800b748 <__ieee754_rem_pio2+0x2f8>)
 800b67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67e:	4606      	mov	r6, r0
 800b680:	460f      	mov	r7, r1
 800b682:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b686:	f7f4 ff27 	bl	80004d8 <__aeabi_dmul>
 800b68a:	4632      	mov	r2, r6
 800b68c:	463b      	mov	r3, r7
 800b68e:	f7f4 fd6b 	bl	8000168 <__aeabi_dsub>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	4606      	mov	r6, r0
 800b698:	460f      	mov	r7, r1
 800b69a:	4650      	mov	r0, sl
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f4 fd63 	bl	8000168 <__aeabi_dsub>
 800b6a2:	9a05      	ldr	r2, [sp, #20]
 800b6a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6a8:	1ad3      	subs	r3, r2, r3
 800b6aa:	2b31      	cmp	r3, #49	; 0x31
 800b6ac:	dc06      	bgt.n	800b6bc <__ieee754_rem_pio2+0x26c>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	46d0      	mov	r8, sl
 800b6b4:	46d9      	mov	r9, fp
 800b6b6:	e9c4 2300 	strd	r2, r3, [r4]
 800b6ba:	e7a6      	b.n	800b60a <__ieee754_rem_pio2+0x1ba>
 800b6bc:	a326      	add	r3, pc, #152	; (adr r3, 800b758 <__ieee754_rem_pio2+0x308>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6c6:	f7f4 ff07 	bl	80004d8 <__aeabi_dmul>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	460f      	mov	r7, r1
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	460b      	mov	r3, r1
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	4659      	mov	r1, fp
 800b6d6:	f7f4 fd47 	bl	8000168 <__aeabi_dsub>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	4680      	mov	r8, r0
 800b6e0:	4689      	mov	r9, r1
 800b6e2:	4650      	mov	r0, sl
 800b6e4:	4659      	mov	r1, fp
 800b6e6:	f7f4 fd3f 	bl	8000168 <__aeabi_dsub>
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	f7f4 fd3b 	bl	8000168 <__aeabi_dsub>
 800b6f2:	a31b      	add	r3, pc, #108	; (adr r3, 800b760 <__ieee754_rem_pio2+0x310>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	460f      	mov	r7, r1
 800b6fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b700:	f7f4 feea 	bl	80004d8 <__aeabi_dmul>
 800b704:	4632      	mov	r2, r6
 800b706:	463b      	mov	r3, r7
 800b708:	f7f4 fd2e 	bl	8000168 <__aeabi_dsub>
 800b70c:	4606      	mov	r6, r0
 800b70e:	460f      	mov	r7, r1
 800b710:	e75e      	b.n	800b5d0 <__ieee754_rem_pio2+0x180>
 800b712:	4a1b      	ldr	r2, [pc, #108]	; (800b780 <__ieee754_rem_pio2+0x330>)
 800b714:	4592      	cmp	sl, r2
 800b716:	dd35      	ble.n	800b784 <__ieee754_rem_pio2+0x334>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	f7f4 fd24 	bl	8000168 <__aeabi_dsub>
 800b720:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b724:	e9c4 0100 	strd	r0, r1, [r4]
 800b728:	e6a2      	b.n	800b470 <__ieee754_rem_pio2+0x20>
 800b72a:	bf00      	nop
 800b72c:	f3af 8000 	nop.w
 800b730:	54400000 	.word	0x54400000
 800b734:	3ff921fb 	.word	0x3ff921fb
 800b738:	1a626331 	.word	0x1a626331
 800b73c:	3dd0b461 	.word	0x3dd0b461
 800b740:	1a600000 	.word	0x1a600000
 800b744:	3dd0b461 	.word	0x3dd0b461
 800b748:	2e037073 	.word	0x2e037073
 800b74c:	3ba3198a 	.word	0x3ba3198a
 800b750:	6dc9c883 	.word	0x6dc9c883
 800b754:	3fe45f30 	.word	0x3fe45f30
 800b758:	2e000000 	.word	0x2e000000
 800b75c:	3ba3198a 	.word	0x3ba3198a
 800b760:	252049c1 	.word	0x252049c1
 800b764:	397b839a 	.word	0x397b839a
 800b768:	3fe921fb 	.word	0x3fe921fb
 800b76c:	4002d97b 	.word	0x4002d97b
 800b770:	3ff921fb 	.word	0x3ff921fb
 800b774:	413921fb 	.word	0x413921fb
 800b778:	3fe00000 	.word	0x3fe00000
 800b77c:	0800ccd0 	.word	0x0800ccd0
 800b780:	7fefffff 	.word	0x7fefffff
 800b784:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b788:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b78c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b790:	460f      	mov	r7, r1
 800b792:	4606      	mov	r6, r0
 800b794:	f7f5 f950 	bl	8000a38 <__aeabi_d2iz>
 800b798:	f7f4 fe34 	bl	8000404 <__aeabi_i2d>
 800b79c:	4602      	mov	r2, r0
 800b79e:	460b      	mov	r3, r1
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	4639      	mov	r1, r7
 800b7a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7a8:	f7f4 fcde 	bl	8000168 <__aeabi_dsub>
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	4b22      	ldr	r3, [pc, #136]	; (800b838 <__ieee754_rem_pio2+0x3e8>)
 800b7b0:	f7f4 fe92 	bl	80004d8 <__aeabi_dmul>
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	4606      	mov	r6, r0
 800b7b8:	f7f5 f93e 	bl	8000a38 <__aeabi_d2iz>
 800b7bc:	f7f4 fe22 	bl	8000404 <__aeabi_i2d>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	4639      	mov	r1, r7
 800b7c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7cc:	f7f4 fccc 	bl	8000168 <__aeabi_dsub>
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	4b19      	ldr	r3, [pc, #100]	; (800b838 <__ieee754_rem_pio2+0x3e8>)
 800b7d4:	f7f4 fe80 	bl	80004d8 <__aeabi_dmul>
 800b7d8:	f04f 0803 	mov.w	r8, #3
 800b7dc:	2600      	movs	r6, #0
 800b7de:	2700      	movs	r7, #0
 800b7e0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b7e4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b7e8:	4632      	mov	r2, r6
 800b7ea:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	46c2      	mov	sl, r8
 800b7f2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b7f6:	f7f5 f8d7 	bl	80009a8 <__aeabi_dcmpeq>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d1f4      	bne.n	800b7e8 <__ieee754_rem_pio2+0x398>
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <__ieee754_rem_pio2+0x3ec>)
 800b800:	462a      	mov	r2, r5
 800b802:	9301      	str	r3, [sp, #4]
 800b804:	2302      	movs	r3, #2
 800b806:	4621      	mov	r1, r4
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	a806      	add	r0, sp, #24
 800b80c:	4653      	mov	r3, sl
 800b80e:	f000 f8d5 	bl	800b9bc <__kernel_rem_pio2>
 800b812:	9b04      	ldr	r3, [sp, #16]
 800b814:	4605      	mov	r5, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	f6bf ae51 	bge.w	800b4be <__ieee754_rem_pio2+0x6e>
 800b81c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b820:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b824:	e9c4 2300 	strd	r2, r3, [r4]
 800b828:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b82c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b830:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b834:	e703      	b.n	800b63e <__ieee754_rem_pio2+0x1ee>
 800b836:	bf00      	nop
 800b838:	41700000 	.word	0x41700000
 800b83c:	0800cd50 	.word	0x0800cd50

0800b840 <__kernel_cos>:
 800b840:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b844:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b848:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b84c:	4680      	mov	r8, r0
 800b84e:	460f      	mov	r7, r1
 800b850:	e9cd 2300 	strd	r2, r3, [sp]
 800b854:	da04      	bge.n	800b860 <__kernel_cos+0x20>
 800b856:	f7f5 f8ef 	bl	8000a38 <__aeabi_d2iz>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	f000 8086 	beq.w	800b96c <__kernel_cos+0x12c>
 800b860:	4642      	mov	r2, r8
 800b862:	463b      	mov	r3, r7
 800b864:	4640      	mov	r0, r8
 800b866:	4639      	mov	r1, r7
 800b868:	f7f4 fe36 	bl	80004d8 <__aeabi_dmul>
 800b86c:	2200      	movs	r2, #0
 800b86e:	4b4e      	ldr	r3, [pc, #312]	; (800b9a8 <__kernel_cos+0x168>)
 800b870:	4604      	mov	r4, r0
 800b872:	460d      	mov	r5, r1
 800b874:	f7f4 fe30 	bl	80004d8 <__aeabi_dmul>
 800b878:	a33f      	add	r3, pc, #252	; (adr r3, 800b978 <__kernel_cos+0x138>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	4682      	mov	sl, r0
 800b880:	468b      	mov	fp, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 fe27 	bl	80004d8 <__aeabi_dmul>
 800b88a:	a33d      	add	r3, pc, #244	; (adr r3, 800b980 <__kernel_cos+0x140>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fc6c 	bl	800016c <__adddf3>
 800b894:	4622      	mov	r2, r4
 800b896:	462b      	mov	r3, r5
 800b898:	f7f4 fe1e 	bl	80004d8 <__aeabi_dmul>
 800b89c:	a33a      	add	r3, pc, #232	; (adr r3, 800b988 <__kernel_cos+0x148>)
 800b89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a2:	f7f4 fc61 	bl	8000168 <__aeabi_dsub>
 800b8a6:	4622      	mov	r2, r4
 800b8a8:	462b      	mov	r3, r5
 800b8aa:	f7f4 fe15 	bl	80004d8 <__aeabi_dmul>
 800b8ae:	a338      	add	r3, pc, #224	; (adr r3, 800b990 <__kernel_cos+0x150>)
 800b8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b4:	f7f4 fc5a 	bl	800016c <__adddf3>
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	f7f4 fe0c 	bl	80004d8 <__aeabi_dmul>
 800b8c0:	a335      	add	r3, pc, #212	; (adr r3, 800b998 <__kernel_cos+0x158>)
 800b8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c6:	f7f4 fc4f 	bl	8000168 <__aeabi_dsub>
 800b8ca:	4622      	mov	r2, r4
 800b8cc:	462b      	mov	r3, r5
 800b8ce:	f7f4 fe03 	bl	80004d8 <__aeabi_dmul>
 800b8d2:	a333      	add	r3, pc, #204	; (adr r3, 800b9a0 <__kernel_cos+0x160>)
 800b8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d8:	f7f4 fc48 	bl	800016c <__adddf3>
 800b8dc:	4622      	mov	r2, r4
 800b8de:	462b      	mov	r3, r5
 800b8e0:	f7f4 fdfa 	bl	80004d8 <__aeabi_dmul>
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f7f4 fdf6 	bl	80004d8 <__aeabi_dmul>
 800b8ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	460d      	mov	r5, r1
 800b8f4:	4640      	mov	r0, r8
 800b8f6:	4639      	mov	r1, r7
 800b8f8:	f7f4 fdee 	bl	80004d8 <__aeabi_dmul>
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	4602      	mov	r2, r0
 800b900:	4629      	mov	r1, r5
 800b902:	4620      	mov	r0, r4
 800b904:	f7f4 fc30 	bl	8000168 <__aeabi_dsub>
 800b908:	4b28      	ldr	r3, [pc, #160]	; (800b9ac <__kernel_cos+0x16c>)
 800b90a:	4680      	mov	r8, r0
 800b90c:	429e      	cmp	r6, r3
 800b90e:	4689      	mov	r9, r1
 800b910:	dc0e      	bgt.n	800b930 <__kernel_cos+0xf0>
 800b912:	4602      	mov	r2, r0
 800b914:	460b      	mov	r3, r1
 800b916:	4650      	mov	r0, sl
 800b918:	4659      	mov	r1, fp
 800b91a:	f7f4 fc25 	bl	8000168 <__aeabi_dsub>
 800b91e:	4602      	mov	r2, r0
 800b920:	2000      	movs	r0, #0
 800b922:	460b      	mov	r3, r1
 800b924:	4922      	ldr	r1, [pc, #136]	; (800b9b0 <__kernel_cos+0x170>)
 800b926:	f7f4 fc1f 	bl	8000168 <__aeabi_dsub>
 800b92a:	b003      	add	sp, #12
 800b92c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b930:	2400      	movs	r4, #0
 800b932:	4b20      	ldr	r3, [pc, #128]	; (800b9b4 <__kernel_cos+0x174>)
 800b934:	4622      	mov	r2, r4
 800b936:	429e      	cmp	r6, r3
 800b938:	bfcc      	ite	gt
 800b93a:	4d1f      	ldrgt	r5, [pc, #124]	; (800b9b8 <__kernel_cos+0x178>)
 800b93c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b940:	462b      	mov	r3, r5
 800b942:	2000      	movs	r0, #0
 800b944:	491a      	ldr	r1, [pc, #104]	; (800b9b0 <__kernel_cos+0x170>)
 800b946:	f7f4 fc0f 	bl	8000168 <__aeabi_dsub>
 800b94a:	4622      	mov	r2, r4
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	462b      	mov	r3, r5
 800b952:	4650      	mov	r0, sl
 800b954:	4659      	mov	r1, fp
 800b956:	f7f4 fc07 	bl	8000168 <__aeabi_dsub>
 800b95a:	4642      	mov	r2, r8
 800b95c:	464b      	mov	r3, r9
 800b95e:	f7f4 fc03 	bl	8000168 <__aeabi_dsub>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	4630      	mov	r0, r6
 800b968:	4639      	mov	r1, r7
 800b96a:	e7dc      	b.n	800b926 <__kernel_cos+0xe6>
 800b96c:	2000      	movs	r0, #0
 800b96e:	4910      	ldr	r1, [pc, #64]	; (800b9b0 <__kernel_cos+0x170>)
 800b970:	e7db      	b.n	800b92a <__kernel_cos+0xea>
 800b972:	bf00      	nop
 800b974:	f3af 8000 	nop.w
 800b978:	be8838d4 	.word	0xbe8838d4
 800b97c:	bda8fae9 	.word	0xbda8fae9
 800b980:	bdb4b1c4 	.word	0xbdb4b1c4
 800b984:	3e21ee9e 	.word	0x3e21ee9e
 800b988:	809c52ad 	.word	0x809c52ad
 800b98c:	3e927e4f 	.word	0x3e927e4f
 800b990:	19cb1590 	.word	0x19cb1590
 800b994:	3efa01a0 	.word	0x3efa01a0
 800b998:	16c15177 	.word	0x16c15177
 800b99c:	3f56c16c 	.word	0x3f56c16c
 800b9a0:	5555554c 	.word	0x5555554c
 800b9a4:	3fa55555 	.word	0x3fa55555
 800b9a8:	3fe00000 	.word	0x3fe00000
 800b9ac:	3fd33332 	.word	0x3fd33332
 800b9b0:	3ff00000 	.word	0x3ff00000
 800b9b4:	3fe90000 	.word	0x3fe90000
 800b9b8:	3fd20000 	.word	0x3fd20000

0800b9bc <__kernel_rem_pio2>:
 800b9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b9c4:	9308      	str	r3, [sp, #32]
 800b9c6:	9106      	str	r1, [sp, #24]
 800b9c8:	4bb6      	ldr	r3, [pc, #728]	; (800bca4 <__kernel_rem_pio2+0x2e8>)
 800b9ca:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b9cc:	f112 0f14 	cmn.w	r2, #20
 800b9d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9d4:	bfa8      	it	ge
 800b9d6:	1ed4      	subge	r4, r2, #3
 800b9d8:	9302      	str	r3, [sp, #8]
 800b9da:	9b08      	ldr	r3, [sp, #32]
 800b9dc:	bfb8      	it	lt
 800b9de:	2400      	movlt	r4, #0
 800b9e0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b9e4:	9307      	str	r3, [sp, #28]
 800b9e6:	bfa4      	itt	ge
 800b9e8:	2318      	movge	r3, #24
 800b9ea:	fb94 f4f3 	sdivge	r4, r4, r3
 800b9ee:	f06f 0317 	mvn.w	r3, #23
 800b9f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b9f6:	eb03 0b02 	add.w	fp, r3, r2
 800b9fa:	9a07      	ldr	r2, [sp, #28]
 800b9fc:	9b02      	ldr	r3, [sp, #8]
 800b9fe:	1aa7      	subs	r7, r4, r2
 800ba00:	eb03 0802 	add.w	r8, r3, r2
 800ba04:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ba06:	2500      	movs	r5, #0
 800ba08:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9009      	str	r0, [sp, #36]	; 0x24
 800ba12:	ae20      	add	r6, sp, #128	; 0x80
 800ba14:	4545      	cmp	r5, r8
 800ba16:	dd14      	ble.n	800ba42 <__kernel_rem_pio2+0x86>
 800ba18:	f04f 0800 	mov.w	r8, #0
 800ba1c:	9a08      	ldr	r2, [sp, #32]
 800ba1e:	ab20      	add	r3, sp, #128	; 0x80
 800ba20:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800ba24:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ba28:	9b02      	ldr	r3, [sp, #8]
 800ba2a:	4598      	cmp	r8, r3
 800ba2c:	dc35      	bgt.n	800ba9a <__kernel_rem_pio2+0xde>
 800ba2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba30:	2200      	movs	r2, #0
 800ba32:	f1a3 0908 	sub.w	r9, r3, #8
 800ba36:	2300      	movs	r3, #0
 800ba38:	462f      	mov	r7, r5
 800ba3a:	2600      	movs	r6, #0
 800ba3c:	e9cd 2300 	strd	r2, r3, [sp]
 800ba40:	e01f      	b.n	800ba82 <__kernel_rem_pio2+0xc6>
 800ba42:	42ef      	cmn	r7, r5
 800ba44:	d40b      	bmi.n	800ba5e <__kernel_rem_pio2+0xa2>
 800ba46:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba4a:	e9cd 2300 	strd	r2, r3, [sp]
 800ba4e:	f7f4 fcd9 	bl	8000404 <__aeabi_i2d>
 800ba52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba56:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba5a:	3501      	adds	r5, #1
 800ba5c:	e7da      	b.n	800ba14 <__kernel_rem_pio2+0x58>
 800ba5e:	4610      	mov	r0, r2
 800ba60:	4619      	mov	r1, r3
 800ba62:	e7f8      	b.n	800ba56 <__kernel_rem_pio2+0x9a>
 800ba64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba68:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ba6c:	f7f4 fd34 	bl	80004d8 <__aeabi_dmul>
 800ba70:	4602      	mov	r2, r0
 800ba72:	460b      	mov	r3, r1
 800ba74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba78:	f7f4 fb78 	bl	800016c <__adddf3>
 800ba7c:	e9cd 0100 	strd	r0, r1, [sp]
 800ba80:	3601      	adds	r6, #1
 800ba82:	9b07      	ldr	r3, [sp, #28]
 800ba84:	3f08      	subs	r7, #8
 800ba86:	429e      	cmp	r6, r3
 800ba88:	ddec      	ble.n	800ba64 <__kernel_rem_pio2+0xa8>
 800ba8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba8e:	f108 0801 	add.w	r8, r8, #1
 800ba92:	e8ea 2302 	strd	r2, r3, [sl], #8
 800ba96:	3508      	adds	r5, #8
 800ba98:	e7c6      	b.n	800ba28 <__kernel_rem_pio2+0x6c>
 800ba9a:	9b02      	ldr	r3, [sp, #8]
 800ba9c:	aa0c      	add	r2, sp, #48	; 0x30
 800ba9e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baa2:	930b      	str	r3, [sp, #44]	; 0x2c
 800baa4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800baa6:	9e02      	ldr	r6, [sp, #8]
 800baa8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800baac:	930a      	str	r3, [sp, #40]	; 0x28
 800baae:	ab98      	add	r3, sp, #608	; 0x260
 800bab0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bab4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800bab8:	ab70      	add	r3, sp, #448	; 0x1c0
 800baba:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800babe:	46d0      	mov	r8, sl
 800bac0:	46b1      	mov	r9, r6
 800bac2:	af0c      	add	r7, sp, #48	; 0x30
 800bac4:	9700      	str	r7, [sp, #0]
 800bac6:	f1b9 0f00 	cmp.w	r9, #0
 800baca:	f1a8 0808 	sub.w	r8, r8, #8
 800bace:	dc71      	bgt.n	800bbb4 <__kernel_rem_pio2+0x1f8>
 800bad0:	465a      	mov	r2, fp
 800bad2:	4620      	mov	r0, r4
 800bad4:	4629      	mov	r1, r5
 800bad6:	f000 fb6f 	bl	800c1b8 <scalbn>
 800bada:	2200      	movs	r2, #0
 800badc:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bae0:	4604      	mov	r4, r0
 800bae2:	460d      	mov	r5, r1
 800bae4:	f7f4 fcf8 	bl	80004d8 <__aeabi_dmul>
 800bae8:	f7ff fa8e 	bl	800b008 <floor>
 800baec:	2200      	movs	r2, #0
 800baee:	4b6e      	ldr	r3, [pc, #440]	; (800bca8 <__kernel_rem_pio2+0x2ec>)
 800baf0:	f7f4 fcf2 	bl	80004d8 <__aeabi_dmul>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4620      	mov	r0, r4
 800bafa:	4629      	mov	r1, r5
 800bafc:	f7f4 fb34 	bl	8000168 <__aeabi_dsub>
 800bb00:	460d      	mov	r5, r1
 800bb02:	4604      	mov	r4, r0
 800bb04:	f7f4 ff98 	bl	8000a38 <__aeabi_d2iz>
 800bb08:	9004      	str	r0, [sp, #16]
 800bb0a:	f7f4 fc7b 	bl	8000404 <__aeabi_i2d>
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	4620      	mov	r0, r4
 800bb14:	4629      	mov	r1, r5
 800bb16:	f7f4 fb27 	bl	8000168 <__aeabi_dsub>
 800bb1a:	f1bb 0f00 	cmp.w	fp, #0
 800bb1e:	4680      	mov	r8, r0
 800bb20:	4689      	mov	r9, r1
 800bb22:	dd70      	ble.n	800bc06 <__kernel_rem_pio2+0x24a>
 800bb24:	1e72      	subs	r2, r6, #1
 800bb26:	ab0c      	add	r3, sp, #48	; 0x30
 800bb28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bb2c:	9c04      	ldr	r4, [sp, #16]
 800bb2e:	f1cb 0118 	rsb	r1, fp, #24
 800bb32:	fa40 f301 	asr.w	r3, r0, r1
 800bb36:	441c      	add	r4, r3
 800bb38:	408b      	lsls	r3, r1
 800bb3a:	1ac0      	subs	r0, r0, r3
 800bb3c:	ab0c      	add	r3, sp, #48	; 0x30
 800bb3e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bb42:	f1cb 0317 	rsb	r3, fp, #23
 800bb46:	9404      	str	r4, [sp, #16]
 800bb48:	fa40 f303 	asr.w	r3, r0, r3
 800bb4c:	9300      	str	r3, [sp, #0]
 800bb4e:	9b00      	ldr	r3, [sp, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dd66      	ble.n	800bc22 <__kernel_rem_pio2+0x266>
 800bb54:	2200      	movs	r2, #0
 800bb56:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb5a:	4614      	mov	r4, r2
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	4296      	cmp	r6, r2
 800bb64:	f300 80ac 	bgt.w	800bcc0 <__kernel_rem_pio2+0x304>
 800bb68:	f1bb 0f00 	cmp.w	fp, #0
 800bb6c:	dd07      	ble.n	800bb7e <__kernel_rem_pio2+0x1c2>
 800bb6e:	f1bb 0f01 	cmp.w	fp, #1
 800bb72:	f000 80b4 	beq.w	800bcde <__kernel_rem_pio2+0x322>
 800bb76:	f1bb 0f02 	cmp.w	fp, #2
 800bb7a:	f000 80ba 	beq.w	800bcf2 <__kernel_rem_pio2+0x336>
 800bb7e:	9b00      	ldr	r3, [sp, #0]
 800bb80:	2b02      	cmp	r3, #2
 800bb82:	d14e      	bne.n	800bc22 <__kernel_rem_pio2+0x266>
 800bb84:	4642      	mov	r2, r8
 800bb86:	464b      	mov	r3, r9
 800bb88:	2000      	movs	r0, #0
 800bb8a:	4948      	ldr	r1, [pc, #288]	; (800bcac <__kernel_rem_pio2+0x2f0>)
 800bb8c:	f7f4 faec 	bl	8000168 <__aeabi_dsub>
 800bb90:	4680      	mov	r8, r0
 800bb92:	4689      	mov	r9, r1
 800bb94:	2c00      	cmp	r4, #0
 800bb96:	d044      	beq.n	800bc22 <__kernel_rem_pio2+0x266>
 800bb98:	465a      	mov	r2, fp
 800bb9a:	2000      	movs	r0, #0
 800bb9c:	4943      	ldr	r1, [pc, #268]	; (800bcac <__kernel_rem_pio2+0x2f0>)
 800bb9e:	f000 fb0b 	bl	800c1b8 <scalbn>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4640      	mov	r0, r8
 800bba8:	4649      	mov	r1, r9
 800bbaa:	f7f4 fadd 	bl	8000168 <__aeabi_dsub>
 800bbae:	4680      	mov	r8, r0
 800bbb0:	4689      	mov	r9, r1
 800bbb2:	e036      	b.n	800bc22 <__kernel_rem_pio2+0x266>
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4b3e      	ldr	r3, [pc, #248]	; (800bcb0 <__kernel_rem_pio2+0x2f4>)
 800bbb8:	4620      	mov	r0, r4
 800bbba:	4629      	mov	r1, r5
 800bbbc:	f7f4 fc8c 	bl	80004d8 <__aeabi_dmul>
 800bbc0:	f7f4 ff3a 	bl	8000a38 <__aeabi_d2iz>
 800bbc4:	f7f4 fc1e 	bl	8000404 <__aeabi_i2d>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	460b      	mov	r3, r1
 800bbcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	4b38      	ldr	r3, [pc, #224]	; (800bcb4 <__kernel_rem_pio2+0x2f8>)
 800bbd4:	f7f4 fc80 	bl	80004d8 <__aeabi_dmul>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	460b      	mov	r3, r1
 800bbdc:	4620      	mov	r0, r4
 800bbde:	4629      	mov	r1, r5
 800bbe0:	f7f4 fac2 	bl	8000168 <__aeabi_dsub>
 800bbe4:	f7f4 ff28 	bl	8000a38 <__aeabi_d2iz>
 800bbe8:	9b00      	ldr	r3, [sp, #0]
 800bbea:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bbee:	f843 0b04 	str.w	r0, [r3], #4
 800bbf2:	9300      	str	r3, [sp, #0]
 800bbf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbf8:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bbfc:	f7f4 fab6 	bl	800016c <__adddf3>
 800bc00:	4604      	mov	r4, r0
 800bc02:	460d      	mov	r5, r1
 800bc04:	e75f      	b.n	800bac6 <__kernel_rem_pio2+0x10a>
 800bc06:	d105      	bne.n	800bc14 <__kernel_rem_pio2+0x258>
 800bc08:	1e73      	subs	r3, r6, #1
 800bc0a:	aa0c      	add	r2, sp, #48	; 0x30
 800bc0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bc10:	15c3      	asrs	r3, r0, #23
 800bc12:	e79b      	b.n	800bb4c <__kernel_rem_pio2+0x190>
 800bc14:	2200      	movs	r2, #0
 800bc16:	4b28      	ldr	r3, [pc, #160]	; (800bcb8 <__kernel_rem_pio2+0x2fc>)
 800bc18:	f7f4 fee4 	bl	80009e4 <__aeabi_dcmpge>
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	d13e      	bne.n	800bc9e <__kernel_rem_pio2+0x2e2>
 800bc20:	9000      	str	r0, [sp, #0]
 800bc22:	2200      	movs	r2, #0
 800bc24:	2300      	movs	r3, #0
 800bc26:	4640      	mov	r0, r8
 800bc28:	4649      	mov	r1, r9
 800bc2a:	f7f4 febd 	bl	80009a8 <__aeabi_dcmpeq>
 800bc2e:	2800      	cmp	r0, #0
 800bc30:	f000 80b1 	beq.w	800bd96 <__kernel_rem_pio2+0x3da>
 800bc34:	1e74      	subs	r4, r6, #1
 800bc36:	4623      	mov	r3, r4
 800bc38:	2200      	movs	r2, #0
 800bc3a:	9902      	ldr	r1, [sp, #8]
 800bc3c:	428b      	cmp	r3, r1
 800bc3e:	da5f      	bge.n	800bd00 <__kernel_rem_pio2+0x344>
 800bc40:	2a00      	cmp	r2, #0
 800bc42:	d074      	beq.n	800bd2e <__kernel_rem_pio2+0x372>
 800bc44:	ab0c      	add	r3, sp, #48	; 0x30
 800bc46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bc4a:	f1ab 0b18 	sub.w	fp, fp, #24
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 809f 	beq.w	800bd92 <__kernel_rem_pio2+0x3d6>
 800bc54:	465a      	mov	r2, fp
 800bc56:	2000      	movs	r0, #0
 800bc58:	4914      	ldr	r1, [pc, #80]	; (800bcac <__kernel_rem_pio2+0x2f0>)
 800bc5a:	f000 faad 	bl	800c1b8 <scalbn>
 800bc5e:	46a2      	mov	sl, r4
 800bc60:	4606      	mov	r6, r0
 800bc62:	460f      	mov	r7, r1
 800bc64:	f04f 0800 	mov.w	r8, #0
 800bc68:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc6a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800bcb0 <__kernel_rem_pio2+0x2f4>
 800bc6e:	00e5      	lsls	r5, r4, #3
 800bc70:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800bc74:	f1ba 0f00 	cmp.w	sl, #0
 800bc78:	f280 80c3 	bge.w	800be02 <__kernel_rem_pio2+0x446>
 800bc7c:	4626      	mov	r6, r4
 800bc7e:	2e00      	cmp	r6, #0
 800bc80:	f2c0 80f5 	blt.w	800be6e <__kernel_rem_pio2+0x4b2>
 800bc84:	4b0d      	ldr	r3, [pc, #52]	; (800bcbc <__kernel_rem_pio2+0x300>)
 800bc86:	f04f 0a00 	mov.w	sl, #0
 800bc8a:	9307      	str	r3, [sp, #28]
 800bc8c:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc8e:	f04f 0b00 	mov.w	fp, #0
 800bc92:	f04f 0800 	mov.w	r8, #0
 800bc96:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bc9a:	1ba7      	subs	r7, r4, r6
 800bc9c:	e0db      	b.n	800be56 <__kernel_rem_pio2+0x49a>
 800bc9e:	2302      	movs	r3, #2
 800bca0:	9300      	str	r3, [sp, #0]
 800bca2:	e757      	b.n	800bb54 <__kernel_rem_pio2+0x198>
 800bca4:	0800ce98 	.word	0x0800ce98
 800bca8:	40200000 	.word	0x40200000
 800bcac:	3ff00000 	.word	0x3ff00000
 800bcb0:	3e700000 	.word	0x3e700000
 800bcb4:	41700000 	.word	0x41700000
 800bcb8:	3fe00000 	.word	0x3fe00000
 800bcbc:	0800ce58 	.word	0x0800ce58
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	b944      	cbnz	r4, 800bcd6 <__kernel_rem_pio2+0x31a>
 800bcc4:	b11b      	cbz	r3, 800bcce <__kernel_rem_pio2+0x312>
 800bcc6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bcca:	603b      	str	r3, [r7, #0]
 800bccc:	2301      	movs	r3, #1
 800bcce:	461c      	mov	r4, r3
 800bcd0:	3201      	adds	r2, #1
 800bcd2:	3704      	adds	r7, #4
 800bcd4:	e745      	b.n	800bb62 <__kernel_rem_pio2+0x1a6>
 800bcd6:	1acb      	subs	r3, r1, r3
 800bcd8:	603b      	str	r3, [r7, #0]
 800bcda:	4623      	mov	r3, r4
 800bcdc:	e7f7      	b.n	800bcce <__kernel_rem_pio2+0x312>
 800bcde:	1e72      	subs	r2, r6, #1
 800bce0:	ab0c      	add	r3, sp, #48	; 0x30
 800bce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bcea:	a90c      	add	r1, sp, #48	; 0x30
 800bcec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bcf0:	e745      	b.n	800bb7e <__kernel_rem_pio2+0x1c2>
 800bcf2:	1e72      	subs	r2, r6, #1
 800bcf4:	ab0c      	add	r3, sp, #48	; 0x30
 800bcf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcfa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bcfe:	e7f4      	b.n	800bcea <__kernel_rem_pio2+0x32e>
 800bd00:	a90c      	add	r1, sp, #48	; 0x30
 800bd02:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	e796      	b.n	800bc3a <__kernel_rem_pio2+0x27e>
 800bd0c:	3401      	adds	r4, #1
 800bd0e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bd12:	2a00      	cmp	r2, #0
 800bd14:	d0fa      	beq.n	800bd0c <__kernel_rem_pio2+0x350>
 800bd16:	9b08      	ldr	r3, [sp, #32]
 800bd18:	f106 0801 	add.w	r8, r6, #1
 800bd1c:	18f5      	adds	r5, r6, r3
 800bd1e:	ab20      	add	r3, sp, #128	; 0x80
 800bd20:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bd24:	4434      	add	r4, r6
 800bd26:	4544      	cmp	r4, r8
 800bd28:	da04      	bge.n	800bd34 <__kernel_rem_pio2+0x378>
 800bd2a:	4626      	mov	r6, r4
 800bd2c:	e6bf      	b.n	800baae <__kernel_rem_pio2+0xf2>
 800bd2e:	2401      	movs	r4, #1
 800bd30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd32:	e7ec      	b.n	800bd0e <__kernel_rem_pio2+0x352>
 800bd34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd36:	f04f 0900 	mov.w	r9, #0
 800bd3a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bd3e:	f7f4 fb61 	bl	8000404 <__aeabi_i2d>
 800bd42:	2600      	movs	r6, #0
 800bd44:	2700      	movs	r7, #0
 800bd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd48:	e9c5 0100 	strd	r0, r1, [r5]
 800bd4c:	3b08      	subs	r3, #8
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	9504      	str	r5, [sp, #16]
 800bd52:	9b07      	ldr	r3, [sp, #28]
 800bd54:	4599      	cmp	r9, r3
 800bd56:	dd05      	ble.n	800bd64 <__kernel_rem_pio2+0x3a8>
 800bd58:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800bd5c:	f108 0801 	add.w	r8, r8, #1
 800bd60:	3508      	adds	r5, #8
 800bd62:	e7e0      	b.n	800bd26 <__kernel_rem_pio2+0x36a>
 800bd64:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bd68:	9900      	ldr	r1, [sp, #0]
 800bd6a:	f109 0901 	add.w	r9, r9, #1
 800bd6e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bd72:	9100      	str	r1, [sp, #0]
 800bd74:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800bd78:	f8cd c010 	str.w	ip, [sp, #16]
 800bd7c:	f7f4 fbac 	bl	80004d8 <__aeabi_dmul>
 800bd80:	4602      	mov	r2, r0
 800bd82:	460b      	mov	r3, r1
 800bd84:	4630      	mov	r0, r6
 800bd86:	4639      	mov	r1, r7
 800bd88:	f7f4 f9f0 	bl	800016c <__adddf3>
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	460f      	mov	r7, r1
 800bd90:	e7df      	b.n	800bd52 <__kernel_rem_pio2+0x396>
 800bd92:	3c01      	subs	r4, #1
 800bd94:	e756      	b.n	800bc44 <__kernel_rem_pio2+0x288>
 800bd96:	f1cb 0200 	rsb	r2, fp, #0
 800bd9a:	4640      	mov	r0, r8
 800bd9c:	4649      	mov	r1, r9
 800bd9e:	f000 fa0b 	bl	800c1b8 <scalbn>
 800bda2:	2200      	movs	r2, #0
 800bda4:	4ba4      	ldr	r3, [pc, #656]	; (800c038 <__kernel_rem_pio2+0x67c>)
 800bda6:	4604      	mov	r4, r0
 800bda8:	460d      	mov	r5, r1
 800bdaa:	f7f4 fe1b 	bl	80009e4 <__aeabi_dcmpge>
 800bdae:	b1f8      	cbz	r0, 800bdf0 <__kernel_rem_pio2+0x434>
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	4ba2      	ldr	r3, [pc, #648]	; (800c03c <__kernel_rem_pio2+0x680>)
 800bdb4:	4620      	mov	r0, r4
 800bdb6:	4629      	mov	r1, r5
 800bdb8:	f7f4 fb8e 	bl	80004d8 <__aeabi_dmul>
 800bdbc:	f7f4 fe3c 	bl	8000a38 <__aeabi_d2iz>
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	f7f4 fb1f 	bl	8000404 <__aeabi_i2d>
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	4b9b      	ldr	r3, [pc, #620]	; (800c038 <__kernel_rem_pio2+0x67c>)
 800bdca:	f7f4 fb85 	bl	80004d8 <__aeabi_dmul>
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f7f4 f9c7 	bl	8000168 <__aeabi_dsub>
 800bdda:	f7f4 fe2d 	bl	8000a38 <__aeabi_d2iz>
 800bdde:	1c74      	adds	r4, r6, #1
 800bde0:	ab0c      	add	r3, sp, #48	; 0x30
 800bde2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bde6:	f10b 0b18 	add.w	fp, fp, #24
 800bdea:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800bdee:	e731      	b.n	800bc54 <__kernel_rem_pio2+0x298>
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fe20 	bl	8000a38 <__aeabi_d2iz>
 800bdf8:	ab0c      	add	r3, sp, #48	; 0x30
 800bdfa:	4634      	mov	r4, r6
 800bdfc:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800be00:	e728      	b.n	800bc54 <__kernel_rem_pio2+0x298>
 800be02:	ab0c      	add	r3, sp, #48	; 0x30
 800be04:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800be08:	f7f4 fafc 	bl	8000404 <__aeabi_i2d>
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	f7f4 fb62 	bl	80004d8 <__aeabi_dmul>
 800be14:	4642      	mov	r2, r8
 800be16:	e86b 0102 	strd	r0, r1, [fp], #-8
 800be1a:	464b      	mov	r3, r9
 800be1c:	4630      	mov	r0, r6
 800be1e:	4639      	mov	r1, r7
 800be20:	f7f4 fb5a 	bl	80004d8 <__aeabi_dmul>
 800be24:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800be28:	4606      	mov	r6, r0
 800be2a:	460f      	mov	r7, r1
 800be2c:	e722      	b.n	800bc74 <__kernel_rem_pio2+0x2b8>
 800be2e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800be32:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800be36:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800be3a:	f8cd c01c 	str.w	ip, [sp, #28]
 800be3e:	f7f4 fb4b 	bl	80004d8 <__aeabi_dmul>
 800be42:	4602      	mov	r2, r0
 800be44:	460b      	mov	r3, r1
 800be46:	4650      	mov	r0, sl
 800be48:	4659      	mov	r1, fp
 800be4a:	f7f4 f98f 	bl	800016c <__adddf3>
 800be4e:	4682      	mov	sl, r0
 800be50:	468b      	mov	fp, r1
 800be52:	f108 0801 	add.w	r8, r8, #1
 800be56:	9b02      	ldr	r3, [sp, #8]
 800be58:	4598      	cmp	r8, r3
 800be5a:	dc01      	bgt.n	800be60 <__kernel_rem_pio2+0x4a4>
 800be5c:	45b8      	cmp	r8, r7
 800be5e:	dde6      	ble.n	800be2e <__kernel_rem_pio2+0x472>
 800be60:	ab48      	add	r3, sp, #288	; 0x120
 800be62:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800be66:	e9c7 ab00 	strd	sl, fp, [r7]
 800be6a:	3e01      	subs	r6, #1
 800be6c:	e707      	b.n	800bc7e <__kernel_rem_pio2+0x2c2>
 800be6e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800be70:	2b02      	cmp	r3, #2
 800be72:	dc09      	bgt.n	800be88 <__kernel_rem_pio2+0x4cc>
 800be74:	2b00      	cmp	r3, #0
 800be76:	dc32      	bgt.n	800bede <__kernel_rem_pio2+0x522>
 800be78:	d05a      	beq.n	800bf30 <__kernel_rem_pio2+0x574>
 800be7a:	9b04      	ldr	r3, [sp, #16]
 800be7c:	f003 0007 	and.w	r0, r3, #7
 800be80:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be88:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d1f5      	bne.n	800be7a <__kernel_rem_pio2+0x4be>
 800be8e:	ab48      	add	r3, sp, #288	; 0x120
 800be90:	441d      	add	r5, r3
 800be92:	46aa      	mov	sl, r5
 800be94:	46a3      	mov	fp, r4
 800be96:	f1bb 0f00 	cmp.w	fp, #0
 800be9a:	dc76      	bgt.n	800bf8a <__kernel_rem_pio2+0x5ce>
 800be9c:	46aa      	mov	sl, r5
 800be9e:	46a3      	mov	fp, r4
 800bea0:	f1bb 0f01 	cmp.w	fp, #1
 800bea4:	f300 8090 	bgt.w	800bfc8 <__kernel_rem_pio2+0x60c>
 800bea8:	2700      	movs	r7, #0
 800beaa:	463e      	mov	r6, r7
 800beac:	2c01      	cmp	r4, #1
 800beae:	f300 80aa 	bgt.w	800c006 <__kernel_rem_pio2+0x64a>
 800beb2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800beb6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800beba:	9b00      	ldr	r3, [sp, #0]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f040 80ac 	bne.w	800c01a <__kernel_rem_pio2+0x65e>
 800bec2:	4603      	mov	r3, r0
 800bec4:	462a      	mov	r2, r5
 800bec6:	9806      	ldr	r0, [sp, #24]
 800bec8:	e9c0 2300 	strd	r2, r3, [r0]
 800becc:	4622      	mov	r2, r4
 800bece:	460b      	mov	r3, r1
 800bed0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bed4:	463a      	mov	r2, r7
 800bed6:	4633      	mov	r3, r6
 800bed8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bedc:	e7cd      	b.n	800be7a <__kernel_rem_pio2+0x4be>
 800bede:	2000      	movs	r0, #0
 800bee0:	46a0      	mov	r8, r4
 800bee2:	4601      	mov	r1, r0
 800bee4:	ab48      	add	r3, sp, #288	; 0x120
 800bee6:	441d      	add	r5, r3
 800bee8:	f1b8 0f00 	cmp.w	r8, #0
 800beec:	da3a      	bge.n	800bf64 <__kernel_rem_pio2+0x5a8>
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d03e      	beq.n	800bf72 <__kernel_rem_pio2+0x5b6>
 800bef4:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800bef8:	4602      	mov	r2, r0
 800befa:	462b      	mov	r3, r5
 800befc:	9d06      	ldr	r5, [sp, #24]
 800befe:	2601      	movs	r6, #1
 800bf00:	e9c5 2300 	strd	r2, r3, [r5]
 800bf04:	460b      	mov	r3, r1
 800bf06:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bf0a:	f7f4 f92d 	bl	8000168 <__aeabi_dsub>
 800bf0e:	4684      	mov	ip, r0
 800bf10:	460f      	mov	r7, r1
 800bf12:	ad48      	add	r5, sp, #288	; 0x120
 800bf14:	42b4      	cmp	r4, r6
 800bf16:	f105 0508 	add.w	r5, r5, #8
 800bf1a:	da2c      	bge.n	800bf76 <__kernel_rem_pio2+0x5ba>
 800bf1c:	9b00      	ldr	r3, [sp, #0]
 800bf1e:	b10b      	cbz	r3, 800bf24 <__kernel_rem_pio2+0x568>
 800bf20:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bf24:	4662      	mov	r2, ip
 800bf26:	463b      	mov	r3, r7
 800bf28:	9906      	ldr	r1, [sp, #24]
 800bf2a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bf2e:	e7a4      	b.n	800be7a <__kernel_rem_pio2+0x4be>
 800bf30:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800bf32:	ab48      	add	r3, sp, #288	; 0x120
 800bf34:	4637      	mov	r7, r6
 800bf36:	441d      	add	r5, r3
 800bf38:	2c00      	cmp	r4, #0
 800bf3a:	da09      	bge.n	800bf50 <__kernel_rem_pio2+0x594>
 800bf3c:	9b00      	ldr	r3, [sp, #0]
 800bf3e:	b10b      	cbz	r3, 800bf44 <__kernel_rem_pio2+0x588>
 800bf40:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bf44:	4632      	mov	r2, r6
 800bf46:	463b      	mov	r3, r7
 800bf48:	9906      	ldr	r1, [sp, #24]
 800bf4a:	e9c1 2300 	strd	r2, r3, [r1]
 800bf4e:	e794      	b.n	800be7a <__kernel_rem_pio2+0x4be>
 800bf50:	4630      	mov	r0, r6
 800bf52:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf56:	4639      	mov	r1, r7
 800bf58:	f7f4 f908 	bl	800016c <__adddf3>
 800bf5c:	3c01      	subs	r4, #1
 800bf5e:	4606      	mov	r6, r0
 800bf60:	460f      	mov	r7, r1
 800bf62:	e7e9      	b.n	800bf38 <__kernel_rem_pio2+0x57c>
 800bf64:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf68:	f7f4 f900 	bl	800016c <__adddf3>
 800bf6c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bf70:	e7ba      	b.n	800bee8 <__kernel_rem_pio2+0x52c>
 800bf72:	460d      	mov	r5, r1
 800bf74:	e7c0      	b.n	800bef8 <__kernel_rem_pio2+0x53c>
 800bf76:	4660      	mov	r0, ip
 800bf78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf7c:	4639      	mov	r1, r7
 800bf7e:	f7f4 f8f5 	bl	800016c <__adddf3>
 800bf82:	3601      	adds	r6, #1
 800bf84:	4684      	mov	ip, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	e7c4      	b.n	800bf14 <__kernel_rem_pio2+0x558>
 800bf8a:	e9da 6700 	ldrd	r6, r7, [sl]
 800bf8e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bf92:	4632      	mov	r2, r6
 800bf94:	463b      	mov	r3, r7
 800bf96:	4640      	mov	r0, r8
 800bf98:	4649      	mov	r1, r9
 800bf9a:	f7f4 f8e7 	bl	800016c <__adddf3>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	460b      	mov	r3, r1
 800bfa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfa6:	4640      	mov	r0, r8
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	f7f4 f8dd 	bl	8000168 <__aeabi_dsub>
 800bfae:	4632      	mov	r2, r6
 800bfb0:	463b      	mov	r3, r7
 800bfb2:	f7f4 f8db 	bl	800016c <__adddf3>
 800bfb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfba:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bfbe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bfc2:	e9ca 2300 	strd	r2, r3, [sl]
 800bfc6:	e766      	b.n	800be96 <__kernel_rem_pio2+0x4da>
 800bfc8:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfcc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bfd0:	4642      	mov	r2, r8
 800bfd2:	464b      	mov	r3, r9
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	4639      	mov	r1, r7
 800bfd8:	f7f4 f8c8 	bl	800016c <__adddf3>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	460b      	mov	r3, r1
 800bfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	f7f4 f8be 	bl	8000168 <__aeabi_dsub>
 800bfec:	4642      	mov	r2, r8
 800bfee:	464b      	mov	r3, r9
 800bff0:	f7f4 f8bc 	bl	800016c <__adddf3>
 800bff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bff8:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bffc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c000:	e9ca 2300 	strd	r2, r3, [sl]
 800c004:	e74c      	b.n	800bea0 <__kernel_rem_pio2+0x4e4>
 800c006:	4638      	mov	r0, r7
 800c008:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c00c:	4631      	mov	r1, r6
 800c00e:	f7f4 f8ad 	bl	800016c <__adddf3>
 800c012:	3c01      	subs	r4, #1
 800c014:	4607      	mov	r7, r0
 800c016:	460e      	mov	r6, r1
 800c018:	e748      	b.n	800beac <__kernel_rem_pio2+0x4f0>
 800c01a:	9b06      	ldr	r3, [sp, #24]
 800c01c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c020:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c024:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c028:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c02c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c030:	601d      	str	r5, [r3, #0]
 800c032:	615e      	str	r6, [r3, #20]
 800c034:	e721      	b.n	800be7a <__kernel_rem_pio2+0x4be>
 800c036:	bf00      	nop
 800c038:	41700000 	.word	0x41700000
 800c03c:	3e700000 	.word	0x3e700000

0800c040 <__kernel_sin>:
 800c040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c044:	b086      	sub	sp, #24
 800c046:	e9cd 2300 	strd	r2, r3, [sp]
 800c04a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c04e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c052:	4682      	mov	sl, r0
 800c054:	460c      	mov	r4, r1
 800c056:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c058:	da03      	bge.n	800c062 <__kernel_sin+0x22>
 800c05a:	f7f4 fced 	bl	8000a38 <__aeabi_d2iz>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d050      	beq.n	800c104 <__kernel_sin+0xc4>
 800c062:	4652      	mov	r2, sl
 800c064:	4623      	mov	r3, r4
 800c066:	4650      	mov	r0, sl
 800c068:	4621      	mov	r1, r4
 800c06a:	f7f4 fa35 	bl	80004d8 <__aeabi_dmul>
 800c06e:	4606      	mov	r6, r0
 800c070:	460f      	mov	r7, r1
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	4650      	mov	r0, sl
 800c078:	4621      	mov	r1, r4
 800c07a:	f7f4 fa2d 	bl	80004d8 <__aeabi_dmul>
 800c07e:	a33e      	add	r3, pc, #248	; (adr r3, 800c178 <__kernel_sin+0x138>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	4680      	mov	r8, r0
 800c086:	4689      	mov	r9, r1
 800c088:	4630      	mov	r0, r6
 800c08a:	4639      	mov	r1, r7
 800c08c:	f7f4 fa24 	bl	80004d8 <__aeabi_dmul>
 800c090:	a33b      	add	r3, pc, #236	; (adr r3, 800c180 <__kernel_sin+0x140>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 f867 	bl	8000168 <__aeabi_dsub>
 800c09a:	4632      	mov	r2, r6
 800c09c:	463b      	mov	r3, r7
 800c09e:	f7f4 fa1b 	bl	80004d8 <__aeabi_dmul>
 800c0a2:	a339      	add	r3, pc, #228	; (adr r3, 800c188 <__kernel_sin+0x148>)
 800c0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a8:	f7f4 f860 	bl	800016c <__adddf3>
 800c0ac:	4632      	mov	r2, r6
 800c0ae:	463b      	mov	r3, r7
 800c0b0:	f7f4 fa12 	bl	80004d8 <__aeabi_dmul>
 800c0b4:	a336      	add	r3, pc, #216	; (adr r3, 800c190 <__kernel_sin+0x150>)
 800c0b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ba:	f7f4 f855 	bl	8000168 <__aeabi_dsub>
 800c0be:	4632      	mov	r2, r6
 800c0c0:	463b      	mov	r3, r7
 800c0c2:	f7f4 fa09 	bl	80004d8 <__aeabi_dmul>
 800c0c6:	a334      	add	r3, pc, #208	; (adr r3, 800c198 <__kernel_sin+0x158>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f7f4 f84e 	bl	800016c <__adddf3>
 800c0d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0d4:	b9dd      	cbnz	r5, 800c10e <__kernel_sin+0xce>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 f9fb 	bl	80004d8 <__aeabi_dmul>
 800c0e2:	a32f      	add	r3, pc, #188	; (adr r3, 800c1a0 <__kernel_sin+0x160>)
 800c0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e8:	f7f4 f83e 	bl	8000168 <__aeabi_dsub>
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	f7f4 f9f2 	bl	80004d8 <__aeabi_dmul>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	4650      	mov	r0, sl
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	f7f4 f836 	bl	800016c <__adddf3>
 800c100:	4682      	mov	sl, r0
 800c102:	460c      	mov	r4, r1
 800c104:	4650      	mov	r0, sl
 800c106:	4621      	mov	r1, r4
 800c108:	b006      	add	sp, #24
 800c10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10e:	2200      	movs	r2, #0
 800c110:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c114:	4b24      	ldr	r3, [pc, #144]	; (800c1a8 <__kernel_sin+0x168>)
 800c116:	f7f4 f9df 	bl	80004d8 <__aeabi_dmul>
 800c11a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c11e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c122:	4640      	mov	r0, r8
 800c124:	4649      	mov	r1, r9
 800c126:	f7f4 f9d7 	bl	80004d8 <__aeabi_dmul>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c132:	f7f4 f819 	bl	8000168 <__aeabi_dsub>
 800c136:	4632      	mov	r2, r6
 800c138:	463b      	mov	r3, r7
 800c13a:	f7f4 f9cd 	bl	80004d8 <__aeabi_dmul>
 800c13e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c142:	f7f4 f811 	bl	8000168 <__aeabi_dsub>
 800c146:	a316      	add	r3, pc, #88	; (adr r3, 800c1a0 <__kernel_sin+0x160>)
 800c148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14c:	4606      	mov	r6, r0
 800c14e:	460f      	mov	r7, r1
 800c150:	4640      	mov	r0, r8
 800c152:	4649      	mov	r1, r9
 800c154:	f7f4 f9c0 	bl	80004d8 <__aeabi_dmul>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f804 	bl	800016c <__adddf3>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4650      	mov	r0, sl
 800c16a:	4621      	mov	r1, r4
 800c16c:	f7f3 fffc 	bl	8000168 <__aeabi_dsub>
 800c170:	e7c6      	b.n	800c100 <__kernel_sin+0xc0>
 800c172:	bf00      	nop
 800c174:	f3af 8000 	nop.w
 800c178:	5acfd57c 	.word	0x5acfd57c
 800c17c:	3de5d93a 	.word	0x3de5d93a
 800c180:	8a2b9ceb 	.word	0x8a2b9ceb
 800c184:	3e5ae5e6 	.word	0x3e5ae5e6
 800c188:	57b1fe7d 	.word	0x57b1fe7d
 800c18c:	3ec71de3 	.word	0x3ec71de3
 800c190:	19c161d5 	.word	0x19c161d5
 800c194:	3f2a01a0 	.word	0x3f2a01a0
 800c198:	1110f8a6 	.word	0x1110f8a6
 800c19c:	3f811111 	.word	0x3f811111
 800c1a0:	55555549 	.word	0x55555549
 800c1a4:	3fc55555 	.word	0x3fc55555
 800c1a8:	3fe00000 	.word	0x3fe00000

0800c1ac <fabs>:
 800c1ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c1b0:	4770      	bx	lr
 800c1b2:	0000      	movs	r0, r0
 800c1b4:	0000      	movs	r0, r0
	...

0800c1b8 <scalbn>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c1be:	4604      	mov	r4, r0
 800c1c0:	460d      	mov	r5, r1
 800c1c2:	4617      	mov	r7, r2
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	b996      	cbnz	r6, 800c1ee <scalbn+0x36>
 800c1c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1cc:	4303      	orrs	r3, r0
 800c1ce:	d039      	beq.n	800c244 <scalbn+0x8c>
 800c1d0:	4b33      	ldr	r3, [pc, #204]	; (800c2a0 <scalbn+0xe8>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f980 	bl	80004d8 <__aeabi_dmul>
 800c1d8:	4b32      	ldr	r3, [pc, #200]	; (800c2a4 <scalbn+0xec>)
 800c1da:	4604      	mov	r4, r0
 800c1dc:	429f      	cmp	r7, r3
 800c1de:	460d      	mov	r5, r1
 800c1e0:	da0f      	bge.n	800c202 <scalbn+0x4a>
 800c1e2:	a32b      	add	r3, pc, #172	; (adr r3, 800c290 <scalbn+0xd8>)
 800c1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e8:	f7f4 f976 	bl	80004d8 <__aeabi_dmul>
 800c1ec:	e006      	b.n	800c1fc <scalbn+0x44>
 800c1ee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c1f2:	4296      	cmp	r6, r2
 800c1f4:	d10a      	bne.n	800c20c <scalbn+0x54>
 800c1f6:	4602      	mov	r2, r0
 800c1f8:	f7f3 ffb8 	bl	800016c <__adddf3>
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	460d      	mov	r5, r1
 800c200:	e020      	b.n	800c244 <scalbn+0x8c>
 800c202:	460b      	mov	r3, r1
 800c204:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c208:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c20c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c210:	19b9      	adds	r1, r7, r6
 800c212:	4291      	cmp	r1, r2
 800c214:	dd0e      	ble.n	800c234 <scalbn+0x7c>
 800c216:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c21a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c21e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c222:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c226:	4820      	ldr	r0, [pc, #128]	; (800c2a8 <scalbn+0xf0>)
 800c228:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c22c:	a31a      	add	r3, pc, #104	; (adr r3, 800c298 <scalbn+0xe0>)
 800c22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c232:	e7d9      	b.n	800c1e8 <scalbn+0x30>
 800c234:	2900      	cmp	r1, #0
 800c236:	dd08      	ble.n	800c24a <scalbn+0x92>
 800c238:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c23c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c240:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c244:	4620      	mov	r0, r4
 800c246:	4629      	mov	r1, r5
 800c248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c24a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c24e:	da12      	bge.n	800c276 <scalbn+0xbe>
 800c250:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c254:	429f      	cmp	r7, r3
 800c256:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c25a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c25e:	dcdc      	bgt.n	800c21a <scalbn+0x62>
 800c260:	a30b      	add	r3, pc, #44	; (adr r3, 800c290 <scalbn+0xd8>)
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c26a:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c26e:	480f      	ldr	r0, [pc, #60]	; (800c2ac <scalbn+0xf4>)
 800c270:	f041 011f 	orr.w	r1, r1, #31
 800c274:	e7b8      	b.n	800c1e8 <scalbn+0x30>
 800c276:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c27a:	3136      	adds	r1, #54	; 0x36
 800c27c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c280:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c284:	4620      	mov	r0, r4
 800c286:	4629      	mov	r1, r5
 800c288:	2200      	movs	r2, #0
 800c28a:	4b09      	ldr	r3, [pc, #36]	; (800c2b0 <scalbn+0xf8>)
 800c28c:	e7ac      	b.n	800c1e8 <scalbn+0x30>
 800c28e:	bf00      	nop
 800c290:	c2f8f359 	.word	0xc2f8f359
 800c294:	01a56e1f 	.word	0x01a56e1f
 800c298:	8800759c 	.word	0x8800759c
 800c29c:	7e37e43c 	.word	0x7e37e43c
 800c2a0:	43500000 	.word	0x43500000
 800c2a4:	ffff3cb0 	.word	0xffff3cb0
 800c2a8:	8800759c 	.word	0x8800759c
 800c2ac:	c2f8f359 	.word	0xc2f8f359
 800c2b0:	3c900000 	.word	0x3c900000

0800c2b4 <__errno>:
 800c2b4:	4b01      	ldr	r3, [pc, #4]	; (800c2bc <__errno+0x8>)
 800c2b6:	6818      	ldr	r0, [r3, #0]
 800c2b8:	4770      	bx	lr
 800c2ba:	bf00      	nop
 800c2bc:	20000198 	.word	0x20000198

0800c2c0 <__libc_init_array>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	2600      	movs	r6, #0
 800c2c4:	4d0c      	ldr	r5, [pc, #48]	; (800c2f8 <__libc_init_array+0x38>)
 800c2c6:	4c0d      	ldr	r4, [pc, #52]	; (800c2fc <__libc_init_array+0x3c>)
 800c2c8:	1b64      	subs	r4, r4, r5
 800c2ca:	10a4      	asrs	r4, r4, #2
 800c2cc:	42a6      	cmp	r6, r4
 800c2ce:	d109      	bne.n	800c2e4 <__libc_init_array+0x24>
 800c2d0:	f000 fc9c 	bl	800cc0c <_init>
 800c2d4:	2600      	movs	r6, #0
 800c2d6:	4d0a      	ldr	r5, [pc, #40]	; (800c300 <__libc_init_array+0x40>)
 800c2d8:	4c0a      	ldr	r4, [pc, #40]	; (800c304 <__libc_init_array+0x44>)
 800c2da:	1b64      	subs	r4, r4, r5
 800c2dc:	10a4      	asrs	r4, r4, #2
 800c2de:	42a6      	cmp	r6, r4
 800c2e0:	d105      	bne.n	800c2ee <__libc_init_array+0x2e>
 800c2e2:	bd70      	pop	{r4, r5, r6, pc}
 800c2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2e8:	4798      	blx	r3
 800c2ea:	3601      	adds	r6, #1
 800c2ec:	e7ee      	b.n	800c2cc <__libc_init_array+0xc>
 800c2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2f2:	4798      	blx	r3
 800c2f4:	3601      	adds	r6, #1
 800c2f6:	e7f2      	b.n	800c2de <__libc_init_array+0x1e>
 800c2f8:	0800cedc 	.word	0x0800cedc
 800c2fc:	0800cedc 	.word	0x0800cedc
 800c300:	0800cedc 	.word	0x0800cedc
 800c304:	0800cee0 	.word	0x0800cee0

0800c308 <memset>:
 800c308:	4603      	mov	r3, r0
 800c30a:	4402      	add	r2, r0
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d100      	bne.n	800c312 <memset+0xa>
 800c310:	4770      	bx	lr
 800c312:	f803 1b01 	strb.w	r1, [r3], #1
 800c316:	e7f9      	b.n	800c30c <memset+0x4>

0800c318 <siprintf>:
 800c318:	b40e      	push	{r1, r2, r3}
 800c31a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c31e:	b500      	push	{lr}
 800c320:	b09c      	sub	sp, #112	; 0x70
 800c322:	ab1d      	add	r3, sp, #116	; 0x74
 800c324:	9002      	str	r0, [sp, #8]
 800c326:	9006      	str	r0, [sp, #24]
 800c328:	9107      	str	r1, [sp, #28]
 800c32a:	9104      	str	r1, [sp, #16]
 800c32c:	4808      	ldr	r0, [pc, #32]	; (800c350 <siprintf+0x38>)
 800c32e:	4909      	ldr	r1, [pc, #36]	; (800c354 <siprintf+0x3c>)
 800c330:	f853 2b04 	ldr.w	r2, [r3], #4
 800c334:	9105      	str	r1, [sp, #20]
 800c336:	6800      	ldr	r0, [r0, #0]
 800c338:	a902      	add	r1, sp, #8
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	f000 f868 	bl	800c410 <_svfiprintf_r>
 800c340:	2200      	movs	r2, #0
 800c342:	9b02      	ldr	r3, [sp, #8]
 800c344:	701a      	strb	r2, [r3, #0]
 800c346:	b01c      	add	sp, #112	; 0x70
 800c348:	f85d eb04 	ldr.w	lr, [sp], #4
 800c34c:	b003      	add	sp, #12
 800c34e:	4770      	bx	lr
 800c350:	20000198 	.word	0x20000198
 800c354:	ffff0208 	.word	0xffff0208

0800c358 <__ssputs_r>:
 800c358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c35c:	688e      	ldr	r6, [r1, #8]
 800c35e:	4682      	mov	sl, r0
 800c360:	429e      	cmp	r6, r3
 800c362:	460c      	mov	r4, r1
 800c364:	4690      	mov	r8, r2
 800c366:	461f      	mov	r7, r3
 800c368:	d838      	bhi.n	800c3dc <__ssputs_r+0x84>
 800c36a:	898a      	ldrh	r2, [r1, #12]
 800c36c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c370:	d032      	beq.n	800c3d8 <__ssputs_r+0x80>
 800c372:	6825      	ldr	r5, [r4, #0]
 800c374:	6909      	ldr	r1, [r1, #16]
 800c376:	3301      	adds	r3, #1
 800c378:	eba5 0901 	sub.w	r9, r5, r1
 800c37c:	6965      	ldr	r5, [r4, #20]
 800c37e:	444b      	add	r3, r9
 800c380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c388:	106d      	asrs	r5, r5, #1
 800c38a:	429d      	cmp	r5, r3
 800c38c:	bf38      	it	cc
 800c38e:	461d      	movcc	r5, r3
 800c390:	0553      	lsls	r3, r2, #21
 800c392:	d531      	bpl.n	800c3f8 <__ssputs_r+0xa0>
 800c394:	4629      	mov	r1, r5
 800c396:	f000 fb6f 	bl	800ca78 <_malloc_r>
 800c39a:	4606      	mov	r6, r0
 800c39c:	b950      	cbnz	r0, 800c3b4 <__ssputs_r+0x5c>
 800c39e:	230c      	movs	r3, #12
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3a4:	f8ca 3000 	str.w	r3, [sl]
 800c3a8:	89a3      	ldrh	r3, [r4, #12]
 800c3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ae:	81a3      	strh	r3, [r4, #12]
 800c3b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3b4:	464a      	mov	r2, r9
 800c3b6:	6921      	ldr	r1, [r4, #16]
 800c3b8:	f000 face 	bl	800c958 <memcpy>
 800c3bc:	89a3      	ldrh	r3, [r4, #12]
 800c3be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3c6:	81a3      	strh	r3, [r4, #12]
 800c3c8:	6126      	str	r6, [r4, #16]
 800c3ca:	444e      	add	r6, r9
 800c3cc:	6026      	str	r6, [r4, #0]
 800c3ce:	463e      	mov	r6, r7
 800c3d0:	6165      	str	r5, [r4, #20]
 800c3d2:	eba5 0509 	sub.w	r5, r5, r9
 800c3d6:	60a5      	str	r5, [r4, #8]
 800c3d8:	42be      	cmp	r6, r7
 800c3da:	d900      	bls.n	800c3de <__ssputs_r+0x86>
 800c3dc:	463e      	mov	r6, r7
 800c3de:	4632      	mov	r2, r6
 800c3e0:	4641      	mov	r1, r8
 800c3e2:	6820      	ldr	r0, [r4, #0]
 800c3e4:	f000 fac6 	bl	800c974 <memmove>
 800c3e8:	68a3      	ldr	r3, [r4, #8]
 800c3ea:	2000      	movs	r0, #0
 800c3ec:	1b9b      	subs	r3, r3, r6
 800c3ee:	60a3      	str	r3, [r4, #8]
 800c3f0:	6823      	ldr	r3, [r4, #0]
 800c3f2:	4433      	add	r3, r6
 800c3f4:	6023      	str	r3, [r4, #0]
 800c3f6:	e7db      	b.n	800c3b0 <__ssputs_r+0x58>
 800c3f8:	462a      	mov	r2, r5
 800c3fa:	f000 fbb1 	bl	800cb60 <_realloc_r>
 800c3fe:	4606      	mov	r6, r0
 800c400:	2800      	cmp	r0, #0
 800c402:	d1e1      	bne.n	800c3c8 <__ssputs_r+0x70>
 800c404:	4650      	mov	r0, sl
 800c406:	6921      	ldr	r1, [r4, #16]
 800c408:	f000 face 	bl	800c9a8 <_free_r>
 800c40c:	e7c7      	b.n	800c39e <__ssputs_r+0x46>
	...

0800c410 <_svfiprintf_r>:
 800c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c414:	4698      	mov	r8, r3
 800c416:	898b      	ldrh	r3, [r1, #12]
 800c418:	4607      	mov	r7, r0
 800c41a:	061b      	lsls	r3, r3, #24
 800c41c:	460d      	mov	r5, r1
 800c41e:	4614      	mov	r4, r2
 800c420:	b09d      	sub	sp, #116	; 0x74
 800c422:	d50e      	bpl.n	800c442 <_svfiprintf_r+0x32>
 800c424:	690b      	ldr	r3, [r1, #16]
 800c426:	b963      	cbnz	r3, 800c442 <_svfiprintf_r+0x32>
 800c428:	2140      	movs	r1, #64	; 0x40
 800c42a:	f000 fb25 	bl	800ca78 <_malloc_r>
 800c42e:	6028      	str	r0, [r5, #0]
 800c430:	6128      	str	r0, [r5, #16]
 800c432:	b920      	cbnz	r0, 800c43e <_svfiprintf_r+0x2e>
 800c434:	230c      	movs	r3, #12
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c43c:	e0d1      	b.n	800c5e2 <_svfiprintf_r+0x1d2>
 800c43e:	2340      	movs	r3, #64	; 0x40
 800c440:	616b      	str	r3, [r5, #20]
 800c442:	2300      	movs	r3, #0
 800c444:	9309      	str	r3, [sp, #36]	; 0x24
 800c446:	2320      	movs	r3, #32
 800c448:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c44c:	2330      	movs	r3, #48	; 0x30
 800c44e:	f04f 0901 	mov.w	r9, #1
 800c452:	f8cd 800c 	str.w	r8, [sp, #12]
 800c456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c5fc <_svfiprintf_r+0x1ec>
 800c45a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c45e:	4623      	mov	r3, r4
 800c460:	469a      	mov	sl, r3
 800c462:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c466:	b10a      	cbz	r2, 800c46c <_svfiprintf_r+0x5c>
 800c468:	2a25      	cmp	r2, #37	; 0x25
 800c46a:	d1f9      	bne.n	800c460 <_svfiprintf_r+0x50>
 800c46c:	ebba 0b04 	subs.w	fp, sl, r4
 800c470:	d00b      	beq.n	800c48a <_svfiprintf_r+0x7a>
 800c472:	465b      	mov	r3, fp
 800c474:	4622      	mov	r2, r4
 800c476:	4629      	mov	r1, r5
 800c478:	4638      	mov	r0, r7
 800c47a:	f7ff ff6d 	bl	800c358 <__ssputs_r>
 800c47e:	3001      	adds	r0, #1
 800c480:	f000 80aa 	beq.w	800c5d8 <_svfiprintf_r+0x1c8>
 800c484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c486:	445a      	add	r2, fp
 800c488:	9209      	str	r2, [sp, #36]	; 0x24
 800c48a:	f89a 3000 	ldrb.w	r3, [sl]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	f000 80a2 	beq.w	800c5d8 <_svfiprintf_r+0x1c8>
 800c494:	2300      	movs	r3, #0
 800c496:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c49a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c49e:	f10a 0a01 	add.w	sl, sl, #1
 800c4a2:	9304      	str	r3, [sp, #16]
 800c4a4:	9307      	str	r3, [sp, #28]
 800c4a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4aa:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ac:	4654      	mov	r4, sl
 800c4ae:	2205      	movs	r2, #5
 800c4b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b4:	4851      	ldr	r0, [pc, #324]	; (800c5fc <_svfiprintf_r+0x1ec>)
 800c4b6:	f000 fa41 	bl	800c93c <memchr>
 800c4ba:	9a04      	ldr	r2, [sp, #16]
 800c4bc:	b9d8      	cbnz	r0, 800c4f6 <_svfiprintf_r+0xe6>
 800c4be:	06d0      	lsls	r0, r2, #27
 800c4c0:	bf44      	itt	mi
 800c4c2:	2320      	movmi	r3, #32
 800c4c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4c8:	0711      	lsls	r1, r2, #28
 800c4ca:	bf44      	itt	mi
 800c4cc:	232b      	movmi	r3, #43	; 0x2b
 800c4ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d6:	2b2a      	cmp	r3, #42	; 0x2a
 800c4d8:	d015      	beq.n	800c506 <_svfiprintf_r+0xf6>
 800c4da:	4654      	mov	r4, sl
 800c4dc:	2000      	movs	r0, #0
 800c4de:	f04f 0c0a 	mov.w	ip, #10
 800c4e2:	9a07      	ldr	r2, [sp, #28]
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ea:	3b30      	subs	r3, #48	; 0x30
 800c4ec:	2b09      	cmp	r3, #9
 800c4ee:	d94e      	bls.n	800c58e <_svfiprintf_r+0x17e>
 800c4f0:	b1b0      	cbz	r0, 800c520 <_svfiprintf_r+0x110>
 800c4f2:	9207      	str	r2, [sp, #28]
 800c4f4:	e014      	b.n	800c520 <_svfiprintf_r+0x110>
 800c4f6:	eba0 0308 	sub.w	r3, r0, r8
 800c4fa:	fa09 f303 	lsl.w	r3, r9, r3
 800c4fe:	4313      	orrs	r3, r2
 800c500:	46a2      	mov	sl, r4
 800c502:	9304      	str	r3, [sp, #16]
 800c504:	e7d2      	b.n	800c4ac <_svfiprintf_r+0x9c>
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	1d19      	adds	r1, r3, #4
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	9103      	str	r1, [sp, #12]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	bfbb      	ittet	lt
 800c512:	425b      	neglt	r3, r3
 800c514:	f042 0202 	orrlt.w	r2, r2, #2
 800c518:	9307      	strge	r3, [sp, #28]
 800c51a:	9307      	strlt	r3, [sp, #28]
 800c51c:	bfb8      	it	lt
 800c51e:	9204      	strlt	r2, [sp, #16]
 800c520:	7823      	ldrb	r3, [r4, #0]
 800c522:	2b2e      	cmp	r3, #46	; 0x2e
 800c524:	d10c      	bne.n	800c540 <_svfiprintf_r+0x130>
 800c526:	7863      	ldrb	r3, [r4, #1]
 800c528:	2b2a      	cmp	r3, #42	; 0x2a
 800c52a:	d135      	bne.n	800c598 <_svfiprintf_r+0x188>
 800c52c:	9b03      	ldr	r3, [sp, #12]
 800c52e:	3402      	adds	r4, #2
 800c530:	1d1a      	adds	r2, r3, #4
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	9203      	str	r2, [sp, #12]
 800c536:	2b00      	cmp	r3, #0
 800c538:	bfb8      	it	lt
 800c53a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c53e:	9305      	str	r3, [sp, #20]
 800c540:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c600 <_svfiprintf_r+0x1f0>
 800c544:	2203      	movs	r2, #3
 800c546:	4650      	mov	r0, sl
 800c548:	7821      	ldrb	r1, [r4, #0]
 800c54a:	f000 f9f7 	bl	800c93c <memchr>
 800c54e:	b140      	cbz	r0, 800c562 <_svfiprintf_r+0x152>
 800c550:	2340      	movs	r3, #64	; 0x40
 800c552:	eba0 000a 	sub.w	r0, r0, sl
 800c556:	fa03 f000 	lsl.w	r0, r3, r0
 800c55a:	9b04      	ldr	r3, [sp, #16]
 800c55c:	3401      	adds	r4, #1
 800c55e:	4303      	orrs	r3, r0
 800c560:	9304      	str	r3, [sp, #16]
 800c562:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c566:	2206      	movs	r2, #6
 800c568:	4826      	ldr	r0, [pc, #152]	; (800c604 <_svfiprintf_r+0x1f4>)
 800c56a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c56e:	f000 f9e5 	bl	800c93c <memchr>
 800c572:	2800      	cmp	r0, #0
 800c574:	d038      	beq.n	800c5e8 <_svfiprintf_r+0x1d8>
 800c576:	4b24      	ldr	r3, [pc, #144]	; (800c608 <_svfiprintf_r+0x1f8>)
 800c578:	bb1b      	cbnz	r3, 800c5c2 <_svfiprintf_r+0x1b2>
 800c57a:	9b03      	ldr	r3, [sp, #12]
 800c57c:	3307      	adds	r3, #7
 800c57e:	f023 0307 	bic.w	r3, r3, #7
 800c582:	3308      	adds	r3, #8
 800c584:	9303      	str	r3, [sp, #12]
 800c586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c588:	4433      	add	r3, r6
 800c58a:	9309      	str	r3, [sp, #36]	; 0x24
 800c58c:	e767      	b.n	800c45e <_svfiprintf_r+0x4e>
 800c58e:	460c      	mov	r4, r1
 800c590:	2001      	movs	r0, #1
 800c592:	fb0c 3202 	mla	r2, ip, r2, r3
 800c596:	e7a5      	b.n	800c4e4 <_svfiprintf_r+0xd4>
 800c598:	2300      	movs	r3, #0
 800c59a:	f04f 0c0a 	mov.w	ip, #10
 800c59e:	4619      	mov	r1, r3
 800c5a0:	3401      	adds	r4, #1
 800c5a2:	9305      	str	r3, [sp, #20]
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5aa:	3a30      	subs	r2, #48	; 0x30
 800c5ac:	2a09      	cmp	r2, #9
 800c5ae:	d903      	bls.n	800c5b8 <_svfiprintf_r+0x1a8>
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0c5      	beq.n	800c540 <_svfiprintf_r+0x130>
 800c5b4:	9105      	str	r1, [sp, #20]
 800c5b6:	e7c3      	b.n	800c540 <_svfiprintf_r+0x130>
 800c5b8:	4604      	mov	r4, r0
 800c5ba:	2301      	movs	r3, #1
 800c5bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c0:	e7f0      	b.n	800c5a4 <_svfiprintf_r+0x194>
 800c5c2:	ab03      	add	r3, sp, #12
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	462a      	mov	r2, r5
 800c5c8:	4638      	mov	r0, r7
 800c5ca:	4b10      	ldr	r3, [pc, #64]	; (800c60c <_svfiprintf_r+0x1fc>)
 800c5cc:	a904      	add	r1, sp, #16
 800c5ce:	f3af 8000 	nop.w
 800c5d2:	1c42      	adds	r2, r0, #1
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	d1d6      	bne.n	800c586 <_svfiprintf_r+0x176>
 800c5d8:	89ab      	ldrh	r3, [r5, #12]
 800c5da:	065b      	lsls	r3, r3, #25
 800c5dc:	f53f af2c 	bmi.w	800c438 <_svfiprintf_r+0x28>
 800c5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5e2:	b01d      	add	sp, #116	; 0x74
 800c5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5e8:	ab03      	add	r3, sp, #12
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4638      	mov	r0, r7
 800c5f0:	4b06      	ldr	r3, [pc, #24]	; (800c60c <_svfiprintf_r+0x1fc>)
 800c5f2:	a904      	add	r1, sp, #16
 800c5f4:	f000 f87c 	bl	800c6f0 <_printf_i>
 800c5f8:	e7eb      	b.n	800c5d2 <_svfiprintf_r+0x1c2>
 800c5fa:	bf00      	nop
 800c5fc:	0800cea8 	.word	0x0800cea8
 800c600:	0800ceae 	.word	0x0800ceae
 800c604:	0800ceb2 	.word	0x0800ceb2
 800c608:	00000000 	.word	0x00000000
 800c60c:	0800c359 	.word	0x0800c359

0800c610 <_printf_common>:
 800c610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c614:	4616      	mov	r6, r2
 800c616:	4699      	mov	r9, r3
 800c618:	688a      	ldr	r2, [r1, #8]
 800c61a:	690b      	ldr	r3, [r1, #16]
 800c61c:	4607      	mov	r7, r0
 800c61e:	4293      	cmp	r3, r2
 800c620:	bfb8      	it	lt
 800c622:	4613      	movlt	r3, r2
 800c624:	6033      	str	r3, [r6, #0]
 800c626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c62a:	460c      	mov	r4, r1
 800c62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c630:	b10a      	cbz	r2, 800c636 <_printf_common+0x26>
 800c632:	3301      	adds	r3, #1
 800c634:	6033      	str	r3, [r6, #0]
 800c636:	6823      	ldr	r3, [r4, #0]
 800c638:	0699      	lsls	r1, r3, #26
 800c63a:	bf42      	ittt	mi
 800c63c:	6833      	ldrmi	r3, [r6, #0]
 800c63e:	3302      	addmi	r3, #2
 800c640:	6033      	strmi	r3, [r6, #0]
 800c642:	6825      	ldr	r5, [r4, #0]
 800c644:	f015 0506 	ands.w	r5, r5, #6
 800c648:	d106      	bne.n	800c658 <_printf_common+0x48>
 800c64a:	f104 0a19 	add.w	sl, r4, #25
 800c64e:	68e3      	ldr	r3, [r4, #12]
 800c650:	6832      	ldr	r2, [r6, #0]
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	42ab      	cmp	r3, r5
 800c656:	dc28      	bgt.n	800c6aa <_printf_common+0x9a>
 800c658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c65c:	1e13      	subs	r3, r2, #0
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	bf18      	it	ne
 800c662:	2301      	movne	r3, #1
 800c664:	0692      	lsls	r2, r2, #26
 800c666:	d42d      	bmi.n	800c6c4 <_printf_common+0xb4>
 800c668:	4649      	mov	r1, r9
 800c66a:	4638      	mov	r0, r7
 800c66c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c670:	47c0      	blx	r8
 800c672:	3001      	adds	r0, #1
 800c674:	d020      	beq.n	800c6b8 <_printf_common+0xa8>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	68e5      	ldr	r5, [r4, #12]
 800c67a:	f003 0306 	and.w	r3, r3, #6
 800c67e:	2b04      	cmp	r3, #4
 800c680:	bf18      	it	ne
 800c682:	2500      	movne	r5, #0
 800c684:	6832      	ldr	r2, [r6, #0]
 800c686:	f04f 0600 	mov.w	r6, #0
 800c68a:	68a3      	ldr	r3, [r4, #8]
 800c68c:	bf08      	it	eq
 800c68e:	1aad      	subeq	r5, r5, r2
 800c690:	6922      	ldr	r2, [r4, #16]
 800c692:	bf08      	it	eq
 800c694:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c698:	4293      	cmp	r3, r2
 800c69a:	bfc4      	itt	gt
 800c69c:	1a9b      	subgt	r3, r3, r2
 800c69e:	18ed      	addgt	r5, r5, r3
 800c6a0:	341a      	adds	r4, #26
 800c6a2:	42b5      	cmp	r5, r6
 800c6a4:	d11a      	bne.n	800c6dc <_printf_common+0xcc>
 800c6a6:	2000      	movs	r0, #0
 800c6a8:	e008      	b.n	800c6bc <_printf_common+0xac>
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	4652      	mov	r2, sl
 800c6ae:	4649      	mov	r1, r9
 800c6b0:	4638      	mov	r0, r7
 800c6b2:	47c0      	blx	r8
 800c6b4:	3001      	adds	r0, #1
 800c6b6:	d103      	bne.n	800c6c0 <_printf_common+0xb0>
 800c6b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	e7c4      	b.n	800c64e <_printf_common+0x3e>
 800c6c4:	2030      	movs	r0, #48	; 0x30
 800c6c6:	18e1      	adds	r1, r4, r3
 800c6c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6cc:	1c5a      	adds	r2, r3, #1
 800c6ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6d2:	4422      	add	r2, r4
 800c6d4:	3302      	adds	r3, #2
 800c6d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6da:	e7c5      	b.n	800c668 <_printf_common+0x58>
 800c6dc:	2301      	movs	r3, #1
 800c6de:	4622      	mov	r2, r4
 800c6e0:	4649      	mov	r1, r9
 800c6e2:	4638      	mov	r0, r7
 800c6e4:	47c0      	blx	r8
 800c6e6:	3001      	adds	r0, #1
 800c6e8:	d0e6      	beq.n	800c6b8 <_printf_common+0xa8>
 800c6ea:	3601      	adds	r6, #1
 800c6ec:	e7d9      	b.n	800c6a2 <_printf_common+0x92>
	...

0800c6f0 <_printf_i>:
 800c6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f4:	7e0f      	ldrb	r7, [r1, #24]
 800c6f6:	4691      	mov	r9, r2
 800c6f8:	2f78      	cmp	r7, #120	; 0x78
 800c6fa:	4680      	mov	r8, r0
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	469a      	mov	sl, r3
 800c700:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c702:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c706:	d807      	bhi.n	800c718 <_printf_i+0x28>
 800c708:	2f62      	cmp	r7, #98	; 0x62
 800c70a:	d80a      	bhi.n	800c722 <_printf_i+0x32>
 800c70c:	2f00      	cmp	r7, #0
 800c70e:	f000 80d9 	beq.w	800c8c4 <_printf_i+0x1d4>
 800c712:	2f58      	cmp	r7, #88	; 0x58
 800c714:	f000 80a4 	beq.w	800c860 <_printf_i+0x170>
 800c718:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c71c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c720:	e03a      	b.n	800c798 <_printf_i+0xa8>
 800c722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c726:	2b15      	cmp	r3, #21
 800c728:	d8f6      	bhi.n	800c718 <_printf_i+0x28>
 800c72a:	a101      	add	r1, pc, #4	; (adr r1, 800c730 <_printf_i+0x40>)
 800c72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c730:	0800c789 	.word	0x0800c789
 800c734:	0800c79d 	.word	0x0800c79d
 800c738:	0800c719 	.word	0x0800c719
 800c73c:	0800c719 	.word	0x0800c719
 800c740:	0800c719 	.word	0x0800c719
 800c744:	0800c719 	.word	0x0800c719
 800c748:	0800c79d 	.word	0x0800c79d
 800c74c:	0800c719 	.word	0x0800c719
 800c750:	0800c719 	.word	0x0800c719
 800c754:	0800c719 	.word	0x0800c719
 800c758:	0800c719 	.word	0x0800c719
 800c75c:	0800c8ab 	.word	0x0800c8ab
 800c760:	0800c7cd 	.word	0x0800c7cd
 800c764:	0800c88d 	.word	0x0800c88d
 800c768:	0800c719 	.word	0x0800c719
 800c76c:	0800c719 	.word	0x0800c719
 800c770:	0800c8cd 	.word	0x0800c8cd
 800c774:	0800c719 	.word	0x0800c719
 800c778:	0800c7cd 	.word	0x0800c7cd
 800c77c:	0800c719 	.word	0x0800c719
 800c780:	0800c719 	.word	0x0800c719
 800c784:	0800c895 	.word	0x0800c895
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	1d1a      	adds	r2, r3, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	602a      	str	r2, [r5, #0]
 800c790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c798:	2301      	movs	r3, #1
 800c79a:	e0a4      	b.n	800c8e6 <_printf_i+0x1f6>
 800c79c:	6820      	ldr	r0, [r4, #0]
 800c79e:	6829      	ldr	r1, [r5, #0]
 800c7a0:	0606      	lsls	r6, r0, #24
 800c7a2:	f101 0304 	add.w	r3, r1, #4
 800c7a6:	d50a      	bpl.n	800c7be <_printf_i+0xce>
 800c7a8:	680e      	ldr	r6, [r1, #0]
 800c7aa:	602b      	str	r3, [r5, #0]
 800c7ac:	2e00      	cmp	r6, #0
 800c7ae:	da03      	bge.n	800c7b8 <_printf_i+0xc8>
 800c7b0:	232d      	movs	r3, #45	; 0x2d
 800c7b2:	4276      	negs	r6, r6
 800c7b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7b8:	230a      	movs	r3, #10
 800c7ba:	485e      	ldr	r0, [pc, #376]	; (800c934 <_printf_i+0x244>)
 800c7bc:	e019      	b.n	800c7f2 <_printf_i+0x102>
 800c7be:	680e      	ldr	r6, [r1, #0]
 800c7c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c7c4:	602b      	str	r3, [r5, #0]
 800c7c6:	bf18      	it	ne
 800c7c8:	b236      	sxthne	r6, r6
 800c7ca:	e7ef      	b.n	800c7ac <_printf_i+0xbc>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	6820      	ldr	r0, [r4, #0]
 800c7d0:	1d19      	adds	r1, r3, #4
 800c7d2:	6029      	str	r1, [r5, #0]
 800c7d4:	0601      	lsls	r1, r0, #24
 800c7d6:	d501      	bpl.n	800c7dc <_printf_i+0xec>
 800c7d8:	681e      	ldr	r6, [r3, #0]
 800c7da:	e002      	b.n	800c7e2 <_printf_i+0xf2>
 800c7dc:	0646      	lsls	r6, r0, #25
 800c7de:	d5fb      	bpl.n	800c7d8 <_printf_i+0xe8>
 800c7e0:	881e      	ldrh	r6, [r3, #0]
 800c7e2:	2f6f      	cmp	r7, #111	; 0x6f
 800c7e4:	bf0c      	ite	eq
 800c7e6:	2308      	moveq	r3, #8
 800c7e8:	230a      	movne	r3, #10
 800c7ea:	4852      	ldr	r0, [pc, #328]	; (800c934 <_printf_i+0x244>)
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7f2:	6865      	ldr	r5, [r4, #4]
 800c7f4:	2d00      	cmp	r5, #0
 800c7f6:	bfa8      	it	ge
 800c7f8:	6821      	ldrge	r1, [r4, #0]
 800c7fa:	60a5      	str	r5, [r4, #8]
 800c7fc:	bfa4      	itt	ge
 800c7fe:	f021 0104 	bicge.w	r1, r1, #4
 800c802:	6021      	strge	r1, [r4, #0]
 800c804:	b90e      	cbnz	r6, 800c80a <_printf_i+0x11a>
 800c806:	2d00      	cmp	r5, #0
 800c808:	d04d      	beq.n	800c8a6 <_printf_i+0x1b6>
 800c80a:	4615      	mov	r5, r2
 800c80c:	fbb6 f1f3 	udiv	r1, r6, r3
 800c810:	fb03 6711 	mls	r7, r3, r1, r6
 800c814:	5dc7      	ldrb	r7, [r0, r7]
 800c816:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c81a:	4637      	mov	r7, r6
 800c81c:	42bb      	cmp	r3, r7
 800c81e:	460e      	mov	r6, r1
 800c820:	d9f4      	bls.n	800c80c <_printf_i+0x11c>
 800c822:	2b08      	cmp	r3, #8
 800c824:	d10b      	bne.n	800c83e <_printf_i+0x14e>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	07de      	lsls	r6, r3, #31
 800c82a:	d508      	bpl.n	800c83e <_printf_i+0x14e>
 800c82c:	6923      	ldr	r3, [r4, #16]
 800c82e:	6861      	ldr	r1, [r4, #4]
 800c830:	4299      	cmp	r1, r3
 800c832:	bfde      	ittt	le
 800c834:	2330      	movle	r3, #48	; 0x30
 800c836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c83a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c83e:	1b52      	subs	r2, r2, r5
 800c840:	6122      	str	r2, [r4, #16]
 800c842:	464b      	mov	r3, r9
 800c844:	4621      	mov	r1, r4
 800c846:	4640      	mov	r0, r8
 800c848:	f8cd a000 	str.w	sl, [sp]
 800c84c:	aa03      	add	r2, sp, #12
 800c84e:	f7ff fedf 	bl	800c610 <_printf_common>
 800c852:	3001      	adds	r0, #1
 800c854:	d14c      	bne.n	800c8f0 <_printf_i+0x200>
 800c856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c85a:	b004      	add	sp, #16
 800c85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c860:	4834      	ldr	r0, [pc, #208]	; (800c934 <_printf_i+0x244>)
 800c862:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c866:	6829      	ldr	r1, [r5, #0]
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	f851 6b04 	ldr.w	r6, [r1], #4
 800c86e:	6029      	str	r1, [r5, #0]
 800c870:	061d      	lsls	r5, r3, #24
 800c872:	d514      	bpl.n	800c89e <_printf_i+0x1ae>
 800c874:	07df      	lsls	r7, r3, #31
 800c876:	bf44      	itt	mi
 800c878:	f043 0320 	orrmi.w	r3, r3, #32
 800c87c:	6023      	strmi	r3, [r4, #0]
 800c87e:	b91e      	cbnz	r6, 800c888 <_printf_i+0x198>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	f023 0320 	bic.w	r3, r3, #32
 800c886:	6023      	str	r3, [r4, #0]
 800c888:	2310      	movs	r3, #16
 800c88a:	e7af      	b.n	800c7ec <_printf_i+0xfc>
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	f043 0320 	orr.w	r3, r3, #32
 800c892:	6023      	str	r3, [r4, #0]
 800c894:	2378      	movs	r3, #120	; 0x78
 800c896:	4828      	ldr	r0, [pc, #160]	; (800c938 <_printf_i+0x248>)
 800c898:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c89c:	e7e3      	b.n	800c866 <_printf_i+0x176>
 800c89e:	0659      	lsls	r1, r3, #25
 800c8a0:	bf48      	it	mi
 800c8a2:	b2b6      	uxthmi	r6, r6
 800c8a4:	e7e6      	b.n	800c874 <_printf_i+0x184>
 800c8a6:	4615      	mov	r5, r2
 800c8a8:	e7bb      	b.n	800c822 <_printf_i+0x132>
 800c8aa:	682b      	ldr	r3, [r5, #0]
 800c8ac:	6826      	ldr	r6, [r4, #0]
 800c8ae:	1d18      	adds	r0, r3, #4
 800c8b0:	6961      	ldr	r1, [r4, #20]
 800c8b2:	6028      	str	r0, [r5, #0]
 800c8b4:	0635      	lsls	r5, r6, #24
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	d501      	bpl.n	800c8be <_printf_i+0x1ce>
 800c8ba:	6019      	str	r1, [r3, #0]
 800c8bc:	e002      	b.n	800c8c4 <_printf_i+0x1d4>
 800c8be:	0670      	lsls	r0, r6, #25
 800c8c0:	d5fb      	bpl.n	800c8ba <_printf_i+0x1ca>
 800c8c2:	8019      	strh	r1, [r3, #0]
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	4615      	mov	r5, r2
 800c8c8:	6123      	str	r3, [r4, #16]
 800c8ca:	e7ba      	b.n	800c842 <_printf_i+0x152>
 800c8cc:	682b      	ldr	r3, [r5, #0]
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	1d1a      	adds	r2, r3, #4
 800c8d2:	602a      	str	r2, [r5, #0]
 800c8d4:	681d      	ldr	r5, [r3, #0]
 800c8d6:	6862      	ldr	r2, [r4, #4]
 800c8d8:	4628      	mov	r0, r5
 800c8da:	f000 f82f 	bl	800c93c <memchr>
 800c8de:	b108      	cbz	r0, 800c8e4 <_printf_i+0x1f4>
 800c8e0:	1b40      	subs	r0, r0, r5
 800c8e2:	6060      	str	r0, [r4, #4]
 800c8e4:	6863      	ldr	r3, [r4, #4]
 800c8e6:	6123      	str	r3, [r4, #16]
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ee:	e7a8      	b.n	800c842 <_printf_i+0x152>
 800c8f0:	462a      	mov	r2, r5
 800c8f2:	4649      	mov	r1, r9
 800c8f4:	4640      	mov	r0, r8
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	47d0      	blx	sl
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	d0ab      	beq.n	800c856 <_printf_i+0x166>
 800c8fe:	6823      	ldr	r3, [r4, #0]
 800c900:	079b      	lsls	r3, r3, #30
 800c902:	d413      	bmi.n	800c92c <_printf_i+0x23c>
 800c904:	68e0      	ldr	r0, [r4, #12]
 800c906:	9b03      	ldr	r3, [sp, #12]
 800c908:	4298      	cmp	r0, r3
 800c90a:	bfb8      	it	lt
 800c90c:	4618      	movlt	r0, r3
 800c90e:	e7a4      	b.n	800c85a <_printf_i+0x16a>
 800c910:	2301      	movs	r3, #1
 800c912:	4632      	mov	r2, r6
 800c914:	4649      	mov	r1, r9
 800c916:	4640      	mov	r0, r8
 800c918:	47d0      	blx	sl
 800c91a:	3001      	adds	r0, #1
 800c91c:	d09b      	beq.n	800c856 <_printf_i+0x166>
 800c91e:	3501      	adds	r5, #1
 800c920:	68e3      	ldr	r3, [r4, #12]
 800c922:	9903      	ldr	r1, [sp, #12]
 800c924:	1a5b      	subs	r3, r3, r1
 800c926:	42ab      	cmp	r3, r5
 800c928:	dcf2      	bgt.n	800c910 <_printf_i+0x220>
 800c92a:	e7eb      	b.n	800c904 <_printf_i+0x214>
 800c92c:	2500      	movs	r5, #0
 800c92e:	f104 0619 	add.w	r6, r4, #25
 800c932:	e7f5      	b.n	800c920 <_printf_i+0x230>
 800c934:	0800ceb9 	.word	0x0800ceb9
 800c938:	0800ceca 	.word	0x0800ceca

0800c93c <memchr>:
 800c93c:	4603      	mov	r3, r0
 800c93e:	b510      	push	{r4, lr}
 800c940:	b2c9      	uxtb	r1, r1
 800c942:	4402      	add	r2, r0
 800c944:	4293      	cmp	r3, r2
 800c946:	4618      	mov	r0, r3
 800c948:	d101      	bne.n	800c94e <memchr+0x12>
 800c94a:	2000      	movs	r0, #0
 800c94c:	e003      	b.n	800c956 <memchr+0x1a>
 800c94e:	7804      	ldrb	r4, [r0, #0]
 800c950:	3301      	adds	r3, #1
 800c952:	428c      	cmp	r4, r1
 800c954:	d1f6      	bne.n	800c944 <memchr+0x8>
 800c956:	bd10      	pop	{r4, pc}

0800c958 <memcpy>:
 800c958:	440a      	add	r2, r1
 800c95a:	4291      	cmp	r1, r2
 800c95c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c960:	d100      	bne.n	800c964 <memcpy+0xc>
 800c962:	4770      	bx	lr
 800c964:	b510      	push	{r4, lr}
 800c966:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c96a:	4291      	cmp	r1, r2
 800c96c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c970:	d1f9      	bne.n	800c966 <memcpy+0xe>
 800c972:	bd10      	pop	{r4, pc}

0800c974 <memmove>:
 800c974:	4288      	cmp	r0, r1
 800c976:	b510      	push	{r4, lr}
 800c978:	eb01 0402 	add.w	r4, r1, r2
 800c97c:	d902      	bls.n	800c984 <memmove+0x10>
 800c97e:	4284      	cmp	r4, r0
 800c980:	4623      	mov	r3, r4
 800c982:	d807      	bhi.n	800c994 <memmove+0x20>
 800c984:	1e43      	subs	r3, r0, #1
 800c986:	42a1      	cmp	r1, r4
 800c988:	d008      	beq.n	800c99c <memmove+0x28>
 800c98a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c98e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c992:	e7f8      	b.n	800c986 <memmove+0x12>
 800c994:	4601      	mov	r1, r0
 800c996:	4402      	add	r2, r0
 800c998:	428a      	cmp	r2, r1
 800c99a:	d100      	bne.n	800c99e <memmove+0x2a>
 800c99c:	bd10      	pop	{r4, pc}
 800c99e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9a6:	e7f7      	b.n	800c998 <memmove+0x24>

0800c9a8 <_free_r>:
 800c9a8:	b538      	push	{r3, r4, r5, lr}
 800c9aa:	4605      	mov	r5, r0
 800c9ac:	2900      	cmp	r1, #0
 800c9ae:	d040      	beq.n	800ca32 <_free_r+0x8a>
 800c9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9b4:	1f0c      	subs	r4, r1, #4
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	bfb8      	it	lt
 800c9ba:	18e4      	addlt	r4, r4, r3
 800c9bc:	f000 f910 	bl	800cbe0 <__malloc_lock>
 800c9c0:	4a1c      	ldr	r2, [pc, #112]	; (800ca34 <_free_r+0x8c>)
 800c9c2:	6813      	ldr	r3, [r2, #0]
 800c9c4:	b933      	cbnz	r3, 800c9d4 <_free_r+0x2c>
 800c9c6:	6063      	str	r3, [r4, #4]
 800c9c8:	6014      	str	r4, [r2, #0]
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9d0:	f000 b90c 	b.w	800cbec <__malloc_unlock>
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d908      	bls.n	800c9ea <_free_r+0x42>
 800c9d8:	6820      	ldr	r0, [r4, #0]
 800c9da:	1821      	adds	r1, r4, r0
 800c9dc:	428b      	cmp	r3, r1
 800c9de:	bf01      	itttt	eq
 800c9e0:	6819      	ldreq	r1, [r3, #0]
 800c9e2:	685b      	ldreq	r3, [r3, #4]
 800c9e4:	1809      	addeq	r1, r1, r0
 800c9e6:	6021      	streq	r1, [r4, #0]
 800c9e8:	e7ed      	b.n	800c9c6 <_free_r+0x1e>
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	b10b      	cbz	r3, 800c9f4 <_free_r+0x4c>
 800c9f0:	42a3      	cmp	r3, r4
 800c9f2:	d9fa      	bls.n	800c9ea <_free_r+0x42>
 800c9f4:	6811      	ldr	r1, [r2, #0]
 800c9f6:	1850      	adds	r0, r2, r1
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d10b      	bne.n	800ca14 <_free_r+0x6c>
 800c9fc:	6820      	ldr	r0, [r4, #0]
 800c9fe:	4401      	add	r1, r0
 800ca00:	1850      	adds	r0, r2, r1
 800ca02:	4283      	cmp	r3, r0
 800ca04:	6011      	str	r1, [r2, #0]
 800ca06:	d1e0      	bne.n	800c9ca <_free_r+0x22>
 800ca08:	6818      	ldr	r0, [r3, #0]
 800ca0a:	685b      	ldr	r3, [r3, #4]
 800ca0c:	4401      	add	r1, r0
 800ca0e:	6011      	str	r1, [r2, #0]
 800ca10:	6053      	str	r3, [r2, #4]
 800ca12:	e7da      	b.n	800c9ca <_free_r+0x22>
 800ca14:	d902      	bls.n	800ca1c <_free_r+0x74>
 800ca16:	230c      	movs	r3, #12
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	e7d6      	b.n	800c9ca <_free_r+0x22>
 800ca1c:	6820      	ldr	r0, [r4, #0]
 800ca1e:	1821      	adds	r1, r4, r0
 800ca20:	428b      	cmp	r3, r1
 800ca22:	bf01      	itttt	eq
 800ca24:	6819      	ldreq	r1, [r3, #0]
 800ca26:	685b      	ldreq	r3, [r3, #4]
 800ca28:	1809      	addeq	r1, r1, r0
 800ca2a:	6021      	streq	r1, [r4, #0]
 800ca2c:	6063      	str	r3, [r4, #4]
 800ca2e:	6054      	str	r4, [r2, #4]
 800ca30:	e7cb      	b.n	800c9ca <_free_r+0x22>
 800ca32:	bd38      	pop	{r3, r4, r5, pc}
 800ca34:	20001538 	.word	0x20001538

0800ca38 <sbrk_aligned>:
 800ca38:	b570      	push	{r4, r5, r6, lr}
 800ca3a:	4e0e      	ldr	r6, [pc, #56]	; (800ca74 <sbrk_aligned+0x3c>)
 800ca3c:	460c      	mov	r4, r1
 800ca3e:	6831      	ldr	r1, [r6, #0]
 800ca40:	4605      	mov	r5, r0
 800ca42:	b911      	cbnz	r1, 800ca4a <sbrk_aligned+0x12>
 800ca44:	f000 f8bc 	bl	800cbc0 <_sbrk_r>
 800ca48:	6030      	str	r0, [r6, #0]
 800ca4a:	4621      	mov	r1, r4
 800ca4c:	4628      	mov	r0, r5
 800ca4e:	f000 f8b7 	bl	800cbc0 <_sbrk_r>
 800ca52:	1c43      	adds	r3, r0, #1
 800ca54:	d00a      	beq.n	800ca6c <sbrk_aligned+0x34>
 800ca56:	1cc4      	adds	r4, r0, #3
 800ca58:	f024 0403 	bic.w	r4, r4, #3
 800ca5c:	42a0      	cmp	r0, r4
 800ca5e:	d007      	beq.n	800ca70 <sbrk_aligned+0x38>
 800ca60:	1a21      	subs	r1, r4, r0
 800ca62:	4628      	mov	r0, r5
 800ca64:	f000 f8ac 	bl	800cbc0 <_sbrk_r>
 800ca68:	3001      	adds	r0, #1
 800ca6a:	d101      	bne.n	800ca70 <sbrk_aligned+0x38>
 800ca6c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca70:	4620      	mov	r0, r4
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	2000153c 	.word	0x2000153c

0800ca78 <_malloc_r>:
 800ca78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7c:	1ccd      	adds	r5, r1, #3
 800ca7e:	f025 0503 	bic.w	r5, r5, #3
 800ca82:	3508      	adds	r5, #8
 800ca84:	2d0c      	cmp	r5, #12
 800ca86:	bf38      	it	cc
 800ca88:	250c      	movcc	r5, #12
 800ca8a:	2d00      	cmp	r5, #0
 800ca8c:	4607      	mov	r7, r0
 800ca8e:	db01      	blt.n	800ca94 <_malloc_r+0x1c>
 800ca90:	42a9      	cmp	r1, r5
 800ca92:	d905      	bls.n	800caa0 <_malloc_r+0x28>
 800ca94:	230c      	movs	r3, #12
 800ca96:	2600      	movs	r6, #0
 800ca98:	603b      	str	r3, [r7, #0]
 800ca9a:	4630      	mov	r0, r6
 800ca9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800caa0:	4e2e      	ldr	r6, [pc, #184]	; (800cb5c <_malloc_r+0xe4>)
 800caa2:	f000 f89d 	bl	800cbe0 <__malloc_lock>
 800caa6:	6833      	ldr	r3, [r6, #0]
 800caa8:	461c      	mov	r4, r3
 800caaa:	bb34      	cbnz	r4, 800cafa <_malloc_r+0x82>
 800caac:	4629      	mov	r1, r5
 800caae:	4638      	mov	r0, r7
 800cab0:	f7ff ffc2 	bl	800ca38 <sbrk_aligned>
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	4604      	mov	r4, r0
 800cab8:	d14d      	bne.n	800cb56 <_malloc_r+0xde>
 800caba:	6834      	ldr	r4, [r6, #0]
 800cabc:	4626      	mov	r6, r4
 800cabe:	2e00      	cmp	r6, #0
 800cac0:	d140      	bne.n	800cb44 <_malloc_r+0xcc>
 800cac2:	6823      	ldr	r3, [r4, #0]
 800cac4:	4631      	mov	r1, r6
 800cac6:	4638      	mov	r0, r7
 800cac8:	eb04 0803 	add.w	r8, r4, r3
 800cacc:	f000 f878 	bl	800cbc0 <_sbrk_r>
 800cad0:	4580      	cmp	r8, r0
 800cad2:	d13a      	bne.n	800cb4a <_malloc_r+0xd2>
 800cad4:	6821      	ldr	r1, [r4, #0]
 800cad6:	3503      	adds	r5, #3
 800cad8:	1a6d      	subs	r5, r5, r1
 800cada:	f025 0503 	bic.w	r5, r5, #3
 800cade:	3508      	adds	r5, #8
 800cae0:	2d0c      	cmp	r5, #12
 800cae2:	bf38      	it	cc
 800cae4:	250c      	movcc	r5, #12
 800cae6:	4638      	mov	r0, r7
 800cae8:	4629      	mov	r1, r5
 800caea:	f7ff ffa5 	bl	800ca38 <sbrk_aligned>
 800caee:	3001      	adds	r0, #1
 800caf0:	d02b      	beq.n	800cb4a <_malloc_r+0xd2>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	442b      	add	r3, r5
 800caf6:	6023      	str	r3, [r4, #0]
 800caf8:	e00e      	b.n	800cb18 <_malloc_r+0xa0>
 800cafa:	6822      	ldr	r2, [r4, #0]
 800cafc:	1b52      	subs	r2, r2, r5
 800cafe:	d41e      	bmi.n	800cb3e <_malloc_r+0xc6>
 800cb00:	2a0b      	cmp	r2, #11
 800cb02:	d916      	bls.n	800cb32 <_malloc_r+0xba>
 800cb04:	1961      	adds	r1, r4, r5
 800cb06:	42a3      	cmp	r3, r4
 800cb08:	6025      	str	r5, [r4, #0]
 800cb0a:	bf18      	it	ne
 800cb0c:	6059      	strne	r1, [r3, #4]
 800cb0e:	6863      	ldr	r3, [r4, #4]
 800cb10:	bf08      	it	eq
 800cb12:	6031      	streq	r1, [r6, #0]
 800cb14:	5162      	str	r2, [r4, r5]
 800cb16:	604b      	str	r3, [r1, #4]
 800cb18:	4638      	mov	r0, r7
 800cb1a:	f104 060b 	add.w	r6, r4, #11
 800cb1e:	f000 f865 	bl	800cbec <__malloc_unlock>
 800cb22:	f026 0607 	bic.w	r6, r6, #7
 800cb26:	1d23      	adds	r3, r4, #4
 800cb28:	1af2      	subs	r2, r6, r3
 800cb2a:	d0b6      	beq.n	800ca9a <_malloc_r+0x22>
 800cb2c:	1b9b      	subs	r3, r3, r6
 800cb2e:	50a3      	str	r3, [r4, r2]
 800cb30:	e7b3      	b.n	800ca9a <_malloc_r+0x22>
 800cb32:	6862      	ldr	r2, [r4, #4]
 800cb34:	42a3      	cmp	r3, r4
 800cb36:	bf0c      	ite	eq
 800cb38:	6032      	streq	r2, [r6, #0]
 800cb3a:	605a      	strne	r2, [r3, #4]
 800cb3c:	e7ec      	b.n	800cb18 <_malloc_r+0xa0>
 800cb3e:	4623      	mov	r3, r4
 800cb40:	6864      	ldr	r4, [r4, #4]
 800cb42:	e7b2      	b.n	800caaa <_malloc_r+0x32>
 800cb44:	4634      	mov	r4, r6
 800cb46:	6876      	ldr	r6, [r6, #4]
 800cb48:	e7b9      	b.n	800cabe <_malloc_r+0x46>
 800cb4a:	230c      	movs	r3, #12
 800cb4c:	4638      	mov	r0, r7
 800cb4e:	603b      	str	r3, [r7, #0]
 800cb50:	f000 f84c 	bl	800cbec <__malloc_unlock>
 800cb54:	e7a1      	b.n	800ca9a <_malloc_r+0x22>
 800cb56:	6025      	str	r5, [r4, #0]
 800cb58:	e7de      	b.n	800cb18 <_malloc_r+0xa0>
 800cb5a:	bf00      	nop
 800cb5c:	20001538 	.word	0x20001538

0800cb60 <_realloc_r>:
 800cb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb64:	4680      	mov	r8, r0
 800cb66:	4614      	mov	r4, r2
 800cb68:	460e      	mov	r6, r1
 800cb6a:	b921      	cbnz	r1, 800cb76 <_realloc_r+0x16>
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb72:	f7ff bf81 	b.w	800ca78 <_malloc_r>
 800cb76:	b92a      	cbnz	r2, 800cb84 <_realloc_r+0x24>
 800cb78:	f7ff ff16 	bl	800c9a8 <_free_r>
 800cb7c:	4625      	mov	r5, r4
 800cb7e:	4628      	mov	r0, r5
 800cb80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb84:	f000 f838 	bl	800cbf8 <_malloc_usable_size_r>
 800cb88:	4284      	cmp	r4, r0
 800cb8a:	4607      	mov	r7, r0
 800cb8c:	d802      	bhi.n	800cb94 <_realloc_r+0x34>
 800cb8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb92:	d812      	bhi.n	800cbba <_realloc_r+0x5a>
 800cb94:	4621      	mov	r1, r4
 800cb96:	4640      	mov	r0, r8
 800cb98:	f7ff ff6e 	bl	800ca78 <_malloc_r>
 800cb9c:	4605      	mov	r5, r0
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d0ed      	beq.n	800cb7e <_realloc_r+0x1e>
 800cba2:	42bc      	cmp	r4, r7
 800cba4:	4622      	mov	r2, r4
 800cba6:	4631      	mov	r1, r6
 800cba8:	bf28      	it	cs
 800cbaa:	463a      	movcs	r2, r7
 800cbac:	f7ff fed4 	bl	800c958 <memcpy>
 800cbb0:	4631      	mov	r1, r6
 800cbb2:	4640      	mov	r0, r8
 800cbb4:	f7ff fef8 	bl	800c9a8 <_free_r>
 800cbb8:	e7e1      	b.n	800cb7e <_realloc_r+0x1e>
 800cbba:	4635      	mov	r5, r6
 800cbbc:	e7df      	b.n	800cb7e <_realloc_r+0x1e>
	...

0800cbc0 <_sbrk_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4d05      	ldr	r5, [pc, #20]	; (800cbdc <_sbrk_r+0x1c>)
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	602b      	str	r3, [r5, #0]
 800cbcc:	f7f5 fb2c 	bl	8002228 <_sbrk>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d102      	bne.n	800cbda <_sbrk_r+0x1a>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b103      	cbz	r3, 800cbda <_sbrk_r+0x1a>
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	20001540 	.word	0x20001540

0800cbe0 <__malloc_lock>:
 800cbe0:	4801      	ldr	r0, [pc, #4]	; (800cbe8 <__malloc_lock+0x8>)
 800cbe2:	f000 b811 	b.w	800cc08 <__retarget_lock_acquire_recursive>
 800cbe6:	bf00      	nop
 800cbe8:	20001544 	.word	0x20001544

0800cbec <__malloc_unlock>:
 800cbec:	4801      	ldr	r0, [pc, #4]	; (800cbf4 <__malloc_unlock+0x8>)
 800cbee:	f000 b80c 	b.w	800cc0a <__retarget_lock_release_recursive>
 800cbf2:	bf00      	nop
 800cbf4:	20001544 	.word	0x20001544

0800cbf8 <_malloc_usable_size_r>:
 800cbf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbfc:	1f18      	subs	r0, r3, #4
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	bfbc      	itt	lt
 800cc02:	580b      	ldrlt	r3, [r1, r0]
 800cc04:	18c0      	addlt	r0, r0, r3
 800cc06:	4770      	bx	lr

0800cc08 <__retarget_lock_acquire_recursive>:
 800cc08:	4770      	bx	lr

0800cc0a <__retarget_lock_release_recursive>:
 800cc0a:	4770      	bx	lr

0800cc0c <_init>:
 800cc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc0e:	bf00      	nop
 800cc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc12:	bc08      	pop	{r3}
 800cc14:	469e      	mov	lr, r3
 800cc16:	4770      	bx	lr

0800cc18 <_fini>:
 800cc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc1a:	bf00      	nop
 800cc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc1e:	bc08      	pop	{r3}
 800cc20:	469e      	mov	lr, r3
 800cc22:	4770      	bx	lr
