
closedloop_position_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cacc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800cbe0  0800cbe0  0001cbe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce94  0800ce94  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce94  0800ce94  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce94  0800ce94  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce94  0800ce94  0001ce94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce98  0800ce98  0001ce98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ce9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  200001fc  0800d098  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001528  0800d098  00021528  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000147d4  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003556  00000000  00000000  000349f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00037f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00039190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b56a  00000000  00000000  0003a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d6c  00000000  00000000  00055792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8eb  00000000  00000000  0006c4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbde9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  000fbe3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cbc4 	.word	0x0800cbc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800cbc4 	.word	0x0800cbc4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f001 fb92 	bl	80028d4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 fda0 	bl	8004d00 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f004 f87a 	bl	80052bc <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f001 fb7d 	bl	80028d4 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f001 fb73 	bl	80028d4 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f003 feba 	bl	8004f78 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f004 f858 	bl	80052bc <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f001 fb5b 	bl	80028d4 <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0000      	movs	r0, r0
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f001 f82d 	bl	80022a4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 f8b7 	bl	80013bc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f000 fa4b 	bl	80016e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001252:	f000 f90d 	bl	8001470 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001256:	f009 f9d1 	bl	800a5fc <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800125a:	f000 f941 	bl	80014e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800125e:	f000 f9f7 	bl	8001650 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001268:	4847      	ldr	r0, [pc, #284]	; (8001388 <main+0x148>)
 800126a:	f001 fb33 	bl	80028d4 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800126e:	2100      	movs	r1, #0
 8001270:	4846      	ldr	r0, [pc, #280]	; (800138c <main+0x14c>)
 8001272:	f004 f9d1 	bl	8005618 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001276:	2104      	movs	r1, #4
 8001278:	4844      	ldr	r0, [pc, #272]	; (800138c <main+0x14c>)
 800127a:	f004 f9cd 	bl	8005618 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800127e:	2108      	movs	r1, #8
 8001280:	4842      	ldr	r0, [pc, #264]	; (800138c <main+0x14c>)
 8001282:	f004 f9c9 	bl	8005618 <HAL_TIM_PWM_Start>

  setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <main+0x150>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4619      	mov	r1, r3
 800128c:	4841      	ldr	r0, [pc, #260]	; (8001394 <main+0x154>)
 800128e:	f000 fc63 	bl	8001b58 <_electricalAngle>
 8001292:	4602      	mov	r2, r0
 8001294:	4b40      	ldr	r3, [pc, #256]	; (8001398 <main+0x158>)
 8001296:	f04f 0100 	mov.w	r1, #0
 800129a:	4840      	ldr	r0, [pc, #256]	; (800139c <main+0x15c>)
 800129c:	f000 fda4 	bl	8001de8 <setPhaseVoltage>
  HAL_Delay(3000);
 80012a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012a4:	f001 f860 	bl	8002368 <HAL_Delay>
  uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 80012a8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80012ac:	2201      	movs	r2, #1
 80012ae:	4936      	ldr	r1, [pc, #216]	; (8001388 <main+0x148>)
 80012b0:	483b      	ldr	r0, [pc, #236]	; (80013a0 <main+0x160>)
 80012b2:	f7ff ff51 	bl	8001158 <read>
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
  zero_electric_angle=_electricalAngle(M_PI*read_raw/MAX_ANGLE_VALUE,pole_pairs);
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8a1 	bl	8000404 <__aeabi_i2d>
 80012c2:	a32f      	add	r3, pc, #188	; (adr r3, 8001380 <main+0x140>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f906 	bl	80004d8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <main+0x164>)
 80012da:	f7ff fa27 	bl	800072c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fbcf 	bl	8000a88 <__aeabi_d2f>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <main+0x150>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	4610      	mov	r0, r2
 80012f4:	f000 fc30 	bl	8001b58 <_electricalAngle>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4a2b      	ldr	r2, [pc, #172]	; (80013a8 <main+0x168>)
 80012fc:	6013      	str	r3, [r2, #0]
  setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 80012fe:	4b24      	ldr	r3, [pc, #144]	; (8001390 <main+0x150>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4823      	ldr	r0, [pc, #140]	; (8001394 <main+0x154>)
 8001306:	f000 fc27 	bl	8001b58 <_electricalAngle>
 800130a:	4602      	mov	r2, r0
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <main+0x158>)
 800130e:	f04f 0100 	mov.w	r1, #0
 8001312:	f04f 0000 	mov.w	r0, #0
 8001316:	f000 fd67 	bl	8001de8 <setPhaseVoltage>
  sprintf(data, "zero_electric_angle: %i \n", (int) floor(zero_electric_angle/M_PI*180));
 800131a:	4b23      	ldr	r3, [pc, #140]	; (80013a8 <main+0x168>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f882 	bl	8000428 <__aeabi_f2d>
 8001324:	a316      	add	r3, pc, #88	; (adr r3, 8001380 <main+0x140>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff f9ff 	bl	800072c <__aeabi_ddiv>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4610      	mov	r0, r2
 8001334:	4619      	mov	r1, r3
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <main+0x16c>)
 800133c:	f7ff f8cc 	bl	80004d8 <__aeabi_dmul>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f009 fe3a 	bl	800afc0 <floor>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb70 	bl	8000a38 <__aeabi_d2iz>
 8001358:	4603      	mov	r3, r0
 800135a:	461a      	mov	r2, r3
 800135c:	4914      	ldr	r1, [pc, #80]	; (80013b0 <main+0x170>)
 800135e:	4815      	ldr	r0, [pc, #84]	; (80013b4 <main+0x174>)
 8001360:	f00a ffb6 	bl	800c2d0 <siprintf>
  CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001364:	4813      	ldr	r0, [pc, #76]	; (80013b4 <main+0x174>)
 8001366:	f7fe fef3 	bl	8000150 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29b      	uxth	r3, r3
 800136e:	4619      	mov	r1, r3
 8001370:	4810      	ldr	r0, [pc, #64]	; (80013b4 <main+0x174>)
 8001372:	f009 fa01 	bl	800a778 <CDC_Transmit_FS>
  HAL_TIM_Base_Start_IT(&htim2);
 8001376:	4810      	ldr	r0, [pc, #64]	; (80013b8 <main+0x178>)
 8001378:	f004 f8a4 	bl	80054c4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800137c:	e7fe      	b.n	800137c <main+0x13c>
 800137e:	bf00      	nop
 8001380:	54442d18 	.word	0x54442d18
 8001384:	400921fb 	.word	0x400921fb
 8001388:	40010c00 	.word	0x40010c00
 800138c:	20000270 	.word	0x20000270
 8001390:	20000010 	.word	0x20000010
 8001394:	4096cbe4 	.word	0x4096cbe4
 8001398:	40012c00 	.word	0x40012c00
 800139c:	40400000 	.word	0x40400000
 80013a0:	20000218 	.word	0x20000218
 80013a4:	40c00000 	.word	0x40c00000
 80013a8:	20000334 	.word	0x20000334
 80013ac:	40668000 	.word	0x40668000
 80013b0:	0800cbe0 	.word	0x0800cbe0
 80013b4:	20000300 	.word	0x20000300
 80013b8:	200002b8 	.word	0x200002b8

080013bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b094      	sub	sp, #80	; 0x50
 80013c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2228      	movs	r2, #40	; 0x28
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f00a ff78 	bl	800c2c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	2301      	movs	r3, #1
 80013fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fe:	2302      	movs	r3, #2
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001406:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001408:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800140c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	4618      	mov	r0, r3
 8001414:	f002 ff52 	bl	80042bc <HAL_RCC_OscConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800141e:	f000 fb5b 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	230f      	movs	r3, #15
 8001424:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	2302      	movs	r3, #2
 8001428:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001432:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001434:	2300      	movs	r3, #0
 8001436:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2102      	movs	r1, #2
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f9be 	bl	80047c0 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800144a:	f000 fb45 	bl	8001ad8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800144e:	2310      	movs	r3, #16
 8001450:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fb17 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001464:	f000 fb38 	bl	8001ad8 <Error_Handler>
  }
}
 8001468:	bf00      	nop
 800146a:	3750      	adds	r7, #80	; 0x50
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <MX_SPI1_Init+0x68>)
 8001476:	4a19      	ldr	r2, [pc, #100]	; (80014dc <MX_SPI1_Init+0x6c>)
 8001478:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <MX_SPI1_Init+0x68>)
 800147c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001480:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001482:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <MX_SPI1_Init+0x68>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <MX_SPI1_Init+0x68>)
 800148a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800148e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_SPI1_Init+0x68>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_SPI1_Init+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_SPI1_Init+0x68>)
 800149e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_SPI1_Init+0x68>)
 80014a6:	2220      	movs	r2, #32
 80014a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_SPI1_Init+0x68>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_SPI1_Init+0x68>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_SPI1_Init+0x68>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_SPI1_Init+0x68>)
 80014be:	220a      	movs	r2, #10
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_SPI1_Init+0x68>)
 80014c4:	f003 fb98 	bl	8004bf8 <HAL_SPI_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80014ce:	f000 fb03 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000218 	.word	0x20000218
 80014dc:	40013000 	.word	0x40013000

080014e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b096      	sub	sp, #88	; 0x58
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
 800150e:	615a      	str	r2, [r3, #20]
 8001510:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f00a fed1 	bl	800c2c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151e:	4b4a      	ldr	r3, [pc, #296]	; (8001648 <MX_TIM1_Init+0x168>)
 8001520:	4a4a      	ldr	r2, [pc, #296]	; (800164c <MX_TIM1_Init+0x16c>)
 8001522:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001524:	4b48      	ldr	r3, [pc, #288]	; (8001648 <MX_TIM1_Init+0x168>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <MX_TIM1_Init+0x168>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001530:	4b45      	ldr	r3, [pc, #276]	; (8001648 <MX_TIM1_Init+0x168>)
 8001532:	f640 125f 	movw	r2, #2399	; 0x95f
 8001536:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b43      	ldr	r3, [pc, #268]	; (8001648 <MX_TIM1_Init+0x168>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153e:	4b42      	ldr	r3, [pc, #264]	; (8001648 <MX_TIM1_Init+0x168>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001544:	4b40      	ldr	r3, [pc, #256]	; (8001648 <MX_TIM1_Init+0x168>)
 8001546:	2200      	movs	r2, #0
 8001548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800154a:	483f      	ldr	r0, [pc, #252]	; (8001648 <MX_TIM1_Init+0x168>)
 800154c:	f003 ff6a 	bl	8005424 <HAL_TIM_Base_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001556:	f000 fabf 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001560:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001564:	4619      	mov	r1, r3
 8001566:	4838      	ldr	r0, [pc, #224]	; (8001648 <MX_TIM1_Init+0x168>)
 8001568:	f004 fabe 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001572:	f000 fab1 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001576:	4834      	ldr	r0, [pc, #208]	; (8001648 <MX_TIM1_Init+0x168>)
 8001578:	f003 fff6 	bl	8005568 <HAL_TIM_PWM_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001582:	f000 faa9 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800158e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001592:	4619      	mov	r1, r3
 8001594:	482c      	ldr	r0, [pc, #176]	; (8001648 <MX_TIM1_Init+0x168>)
 8001596:	f004 fe33 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015a0:	f000 fa9a 	bl	8001ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a4:	2360      	movs	r3, #96	; 0x60
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015bc:	2300      	movs	r3, #0
 80015be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c4:	2200      	movs	r2, #0
 80015c6:	4619      	mov	r1, r3
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <MX_TIM1_Init+0x168>)
 80015ca:	f004 f9cf 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80015d4:	f000 fa80 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	2204      	movs	r2, #4
 80015de:	4619      	mov	r1, r3
 80015e0:	4819      	ldr	r0, [pc, #100]	; (8001648 <MX_TIM1_Init+0x168>)
 80015e2:	f004 f9c3 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015ec:	f000 fa74 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	2208      	movs	r2, #8
 80015f6:	4619      	mov	r1, r3
 80015f8:	4813      	ldr	r0, [pc, #76]	; (8001648 <MX_TIM1_Init+0x168>)
 80015fa:	f004 f9b7 	bl	800596c <HAL_TIM_PWM_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001604:	f000 fa68 	bl	8001ad8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4619      	mov	r1, r3
 800162a:	4807      	ldr	r0, [pc, #28]	; (8001648 <MX_TIM1_Init+0x168>)
 800162c:	f004 fe46 	bl	80062bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001636:	f000 fa4f 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800163a:	4803      	ldr	r0, [pc, #12]	; (8001648 <MX_TIM1_Init+0x168>)
 800163c:	f000 fd60 	bl	8002100 <HAL_TIM_MspPostInit>

}
 8001640:	bf00      	nop
 8001642:	3758      	adds	r7, #88	; 0x58
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000270 	.word	0x20000270
 800164c:	40012c00 	.word	0x40012c00

08001650 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001664:	463b      	mov	r3, r7
 8001666:	2200      	movs	r2, #0
 8001668:	601a      	str	r2, [r3, #0]
 800166a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800166c:	4b1d      	ldr	r3, [pc, #116]	; (80016e4 <MX_TIM2_Init+0x94>)
 800166e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001672:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001676:	2259      	movs	r2, #89	; 0x59
 8001678:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_TIM2_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001682:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001686:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <MX_TIM2_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001694:	4813      	ldr	r0, [pc, #76]	; (80016e4 <MX_TIM2_Init+0x94>)
 8001696:	f003 fec5 	bl	8005424 <HAL_TIM_Base_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016a0:	f000 fa1a 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <MX_TIM2_Init+0x94>)
 80016b2:	f004 fa19 	bl	8005ae8 <HAL_TIM_ConfigClockSource>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016bc:	f000 fa0c 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	2300      	movs	r3, #0
 80016c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016c8:	463b      	mov	r3, r7
 80016ca:	4619      	mov	r1, r3
 80016cc:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_TIM2_Init+0x94>)
 80016ce:	f004 fd97 	bl	8006200 <HAL_TIMEx_MasterConfigSynchronization>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016d8:	f000 f9fe 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200002b8 	.word	0x200002b8

080016e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ee:	f107 0310 	add.w	r3, r7, #16
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	609a      	str	r2, [r3, #8]
 80016fa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fc:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <MX_GPIO_Init+0xf8>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	4a37      	ldr	r2, [pc, #220]	; (80017e0 <MX_GPIO_Init+0xf8>)
 8001702:	f043 0310 	orr.w	r3, r3, #16
 8001706:	6193      	str	r3, [r2, #24]
 8001708:	4b35      	ldr	r3, [pc, #212]	; (80017e0 <MX_GPIO_Init+0xf8>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	f003 0310 	and.w	r3, r3, #16
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001714:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <MX_GPIO_Init+0xf8>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a31      	ldr	r2, [pc, #196]	; (80017e0 <MX_GPIO_Init+0xf8>)
 800171a:	f043 0320 	orr.w	r3, r3, #32
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <MX_GPIO_Init+0xf8>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0320 	and.w	r3, r3, #32
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_GPIO_Init+0xf8>)
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	4a2b      	ldr	r2, [pc, #172]	; (80017e0 <MX_GPIO_Init+0xf8>)
 8001732:	f043 0304 	orr.w	r3, r3, #4
 8001736:	6193      	str	r3, [r2, #24]
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_GPIO_Init+0xf8>)
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_GPIO_Init+0xf8>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a25      	ldr	r2, [pc, #148]	; (80017e0 <MX_GPIO_Init+0xf8>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <MX_GPIO_Init+0xf8>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	603b      	str	r3, [r7, #0]
 800175a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800175c:	2200      	movs	r2, #0
 800175e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001762:	4820      	ldr	r0, [pc, #128]	; (80017e4 <MX_GPIO_Init+0xfc>)
 8001764:	f001 f8b6 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2101      	movs	r1, #1
 800176c:	481e      	ldr	r0, [pc, #120]	; (80017e8 <MX_GPIO_Init+0x100>)
 800176e:	f001 f8b1 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001772:	2200      	movs	r2, #0
 8001774:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <MX_GPIO_Init+0x100>)
 800177a:	f001 f8ab 	bl	80028d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800177e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001782:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001784:	2301      	movs	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	2302      	movs	r3, #2
 800178e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4619      	mov	r1, r3
 8001796:	4813      	ldr	r0, [pc, #76]	; (80017e4 <MX_GPIO_Init+0xfc>)
 8001798:	f000 ff18 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 800179c:	2301      	movs	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a0:	2301      	movs	r3, #1
 80017a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	4619      	mov	r1, r3
 80017b2:	480d      	ldr	r0, [pc, #52]	; (80017e8 <MX_GPIO_Init+0x100>)
 80017b4:	f000 ff0a 	bl	80025cc <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 80017b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 80017ca:	f107 0310 	add.w	r3, r7, #16
 80017ce:	4619      	mov	r1, r3
 80017d0:	4805      	ldr	r0, [pc, #20]	; (80017e8 <MX_GPIO_Init+0x100>)
 80017d2:	f000 fefb 	bl	80025cc <HAL_GPIO_Init>

}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40010c00 	.word	0x40010c00
 80017ec:	00000000 	.word	0x00000000

080017f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4aa9      	ldr	r2, [pc, #676]	; (8001aa0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	f040 8140 	bne.w	8001a82 <HAL_TIM_PeriodElapsedCallback+0x292>
  {



    index1+=1;
 8001802:	4ba8      	ldr	r3, [pc, #672]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	4aa6      	ldr	r2, [pc, #664]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 800180a:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 800180c:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001810:	2201      	movs	r2, #1
 8001812:	49a5      	ldr	r1, [pc, #660]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001814:	48a5      	ldr	r0, [pc, #660]	; (8001aac <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001816:	f7ff fc9f 	bl	8001158 <read>
 800181a:	4603      	mov	r3, r0
 800181c:	827b      	strh	r3, [r7, #18]
    float angle_now=(float)read_raw /(float)MAX_ANGLE_VALUE *2*M_PI*dir;
 800181e:	8a7b      	ldrh	r3, [r7, #18]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fa37 	bl	8000c94 <__aeabi_ui2f>
 8001826:	4603      	mov	r3, r0
 8001828:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff fb3d 	bl	8000eac <__aeabi_fdiv>
 8001832:	4603      	mov	r3, r0
 8001834:	4619      	mov	r1, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff f97c 	bl	8000b34 <__addsf3>
 800183c:	4603      	mov	r3, r0
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fdf2 	bl	8000428 <__aeabi_f2d>
 8001844:	a392      	add	r3, pc, #584	; (adr r3, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	f7fe fe45 	bl	80004d8 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4614      	mov	r4, r2
 8001854:	461d      	mov	r5, r3
 8001856:	4b96      	ldr	r3, [pc, #600]	; (8001ab0 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f7fe fdd2 	bl	8000404 <__aeabi_i2d>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4620      	mov	r0, r4
 8001866:	4629      	mov	r1, r5
 8001868:	f7fe fe36 	bl	80004d8 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7ff f908 	bl	8000a88 <__aeabi_d2f>
 8001878:	4603      	mov	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
    float angle_error=motor_target-angle_now;
 800187c:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68f9      	ldr	r1, [r7, #12]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff f954 	bl	8000b30 <__aeabi_fsub>
 8001888:	4603      	mov	r3, r0
 800188a:	617b      	str	r3, [r7, #20]

    angle_error=_normalizeAngle(angle_error);
 800188c:	6978      	ldr	r0, [r7, #20]
 800188e:	f000 f92b 	bl	8001ae8 <_normalizeAngle>
 8001892:	6178      	str	r0, [r7, #20]
    if (angle_error > M_PI){
 8001894:	6978      	ldr	r0, [r7, #20]
 8001896:	f7fe fdc7 	bl	8000428 <__aeabi_f2d>
 800189a:	a37d      	add	r3, pc, #500	; (adr r3, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a0:	f7ff f8aa 	bl	80009f8 <__aeabi_dcmpgt>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00f      	beq.n	80018ca <HAL_TIM_PeriodElapsedCallback+0xda>
    	angle_error-=2*M_PI;
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7fe fdbc 	bl	8000428 <__aeabi_f2d>
 80018b0:	a379      	add	r3, pc, #484	; (adr r3, 8001a98 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fc57 	bl	8000168 <__aeabi_dsub>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f8e1 	bl	8000a88 <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	617b      	str	r3, [r7, #20]
    }
//    close loop position control
    setPhaseVoltage(_constrain(Kp*(angle_error)/M_PI*180,-voltage_power_supply/2,voltage_power_supply/2),0,_electricalAngle(angle_now,pole_pairs),TIM1);
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6979      	ldr	r1, [r7, #20]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fa37 	bl	8000d44 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fda5 	bl	8000428 <__aeabi_f2d>
 80018de:	a36c      	add	r3, pc, #432	; (adr r3, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe ff22 	bl	800072c <__aeabi_ddiv>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b71      	ldr	r3, [pc, #452]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80018f6:	f7fe fdef 	bl	80004d8 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4614      	mov	r4, r2
 8001900:	461d      	mov	r5, r3
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800190a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff facc 	bl	8000eac <__aeabi_fdiv>
 8001914:	4603      	mov	r3, r0
 8001916:	4618      	mov	r0, r3
 8001918:	f7fe fd86 	bl	8000428 <__aeabi_f2d>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4620      	mov	r0, r4
 8001922:	4629      	mov	r1, r5
 8001924:	f7ff f84a 	bl	80009bc <__aeabi_dcmplt>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_TIM_PeriodElapsedCallback+0x156>
 800192e:	4b64      	ldr	r3, [pc, #400]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001936:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fab6 	bl	8000eac <__aeabi_fdiv>
 8001940:	4603      	mov	r3, r0
 8001942:	461c      	mov	r4, r3
 8001944:	e058      	b.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x208>
 8001946:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6979      	ldr	r1, [r7, #20]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f9f9 	bl	8000d44 <__aeabi_fmul>
 8001952:	4603      	mov	r3, r0
 8001954:	4618      	mov	r0, r3
 8001956:	f7fe fd67 	bl	8000428 <__aeabi_f2d>
 800195a:	a34d      	add	r3, pc, #308	; (adr r3, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001960:	f7fe fee4 	bl	800072c <__aeabi_ddiv>
 8001964:	4602      	mov	r2, r0
 8001966:	460b      	mov	r3, r1
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b52      	ldr	r3, [pc, #328]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001972:	f7fe fdb1 	bl	80004d8 <__aeabi_dmul>
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	461d      	mov	r5, r3
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fa90 	bl	8000eac <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fd4a 	bl	8000428 <__aeabi_f2d>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4620      	mov	r0, r4
 800199a:	4629      	mov	r1, r5
 800199c:	f7ff f82c 	bl	80009f8 <__aeabi_dcmpgt>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x1ca>
 80019a6:	4b46      	ldr	r3, [pc, #280]	; (8001ac0 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa7c 	bl	8000eac <__aeabi_fdiv>
 80019b4:	4603      	mov	r3, r0
 80019b6:	461c      	mov	r4, r3
 80019b8:	e01e      	b.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x208>
 80019ba:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6979      	ldr	r1, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f9bf 	bl	8000d44 <__aeabi_fmul>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fd2d 	bl	8000428 <__aeabi_f2d>
 80019ce:	a330      	add	r3, pc, #192	; (adr r3, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe feaa 	bl	800072c <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b35      	ldr	r3, [pc, #212]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80019e6:	f7fe fd77 	bl	80004d8 <__aeabi_dmul>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f849 	bl	8000a88 <__aeabi_d2f>
 80019f6:	4604      	mov	r4, r0
 80019f8:	4b32      	ldr	r3, [pc, #200]	; (8001ac4 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f000 f8aa 	bl	8001b58 <_electricalAngle>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001a08:	f04f 0100 	mov.w	r1, #0
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f000 f9eb 	bl	8001de8 <setPhaseVoltage>
//    sprintf(data, "open loop control \n");
//    sprintf(data, "angle: %u \n", read_raw);
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
//    sprintf(data, "angle_now : %i \n", (int) floor(angle_now*180/M_PI));
//        CDC_Transmit_FS((uint8_t*) data, strlen(data));
    sprintf(data, "angle_error : %i \n", (int) floor(angle_error/M_PI*180));
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7fe fd08 	bl	8000428 <__aeabi_f2d>
 8001a18:	a31d      	add	r3, pc, #116	; (adr r3, 8001a90 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fe85 	bl	800072c <__aeabi_ddiv>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001a30:	f7fe fd52 	bl	80004d8 <__aeabi_dmul>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f009 fac0 	bl	800afc0 <floor>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7fe fff6 	bl	8000a38 <__aeabi_d2iz>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	461a      	mov	r2, r3
 8001a50:	491e      	ldr	r1, [pc, #120]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001a52:	481f      	ldr	r0, [pc, #124]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a54:	f00a fc3c 	bl	800c2d0 <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001a58:	481d      	ldr	r0, [pc, #116]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a5a:	f7fe fb79 	bl	8000150 <strlen>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	4619      	mov	r1, r3
 8001a64:	481a      	ldr	r0, [pc, #104]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001a66:	f008 fe87 	bl	800a778 <CDC_Transmit_FS>

    if (index1 == 200){
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2bc8      	cmp	r3, #200	; 0xc8
 8001a70:	d107      	bne.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x292>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a76:	4817      	ldr	r0, [pc, #92]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001a78:	f000 ff44 	bl	8002904 <HAL_GPIO_TogglePin>
    	index1=0;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	f3af 8000 	nop.w
 8001a90:	54442d18 	.word	0x54442d18
 8001a94:	400921fb 	.word	0x400921fb
 8001a98:	54442d18 	.word	0x54442d18
 8001a9c:	401921fb 	.word	0x401921fb
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	20000338 	.word	0x20000338
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	20000218 	.word	0x20000218
 8001ab0:	2000000c 	.word	0x2000000c
 8001ab4:	20000014 	.word	0x20000014
 8001ab8:	20000018 	.word	0x20000018
 8001abc:	40668000 	.word	0x40668000
 8001ac0:	20000004 	.word	0x20000004
 8001ac4:	20000010 	.word	0x20000010
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	0800cbfc 	.word	0x0800cbfc
 8001ad0:	20000300 	.word	0x20000300
 8001ad4:	40011000 	.word	0x40011000

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	0000      	movs	r0, r0
	...

08001ae8 <_normalizeAngle>:
extern float shaft_angle;
extern int dir;
extern float voltage_limit;
extern float voltage_power_supply;
extern int period;
float _normalizeAngle(float angle){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7fe fc99 	bl	8000428 <__aeabi_f2d>
 8001af6:	a316      	add	r3, pc, #88	; (adr r3, 8001b50 <_normalizeAngle+0x68>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f009 fb4c 	bl	800b198 <fmod>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7fe ffbe 	bl	8000a88 <__aeabi_d2f>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8001b10:	f04f 0100 	mov.w	r1, #0
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff fac7 	bl	80010a8 <__aeabi_fcmpge>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <_normalizeAngle+0x3c>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	e00e      	b.n	8001b42 <_normalizeAngle+0x5a>
 8001b24:	68f8      	ldr	r0, [r7, #12]
 8001b26:	f7fe fc7f 	bl	8000428 <__aeabi_f2d>
 8001b2a:	a309      	add	r3, pc, #36	; (adr r3, 8001b50 <_normalizeAngle+0x68>)
 8001b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b30:	f7fe fb1c 	bl	800016c <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ffa4 	bl	8000a88 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	f3af 8000 	nop.w
 8001b50:	54442d18 	.word	0x54442d18
 8001b54:	401921fb 	.word	0x401921fb

08001b58 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  return _normalizeAngle(((float)(dir * pole_pairs)*shaft_angle)-zero_electric_angle);
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <_electricalAngle+0x48>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	fb02 f303 	mul.w	r3, r2, r3
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f895 	bl	8000c9c <__aeabi_i2f>
 8001b72:	4603      	mov	r3, r0
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f8e4 	bl	8000d44 <__aeabi_fmul>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_electricalAngle+0x4c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f7fe ffd2 	bl	8000b30 <__aeabi_fsub>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff ffaa 	bl	8001ae8 <_normalizeAngle>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000000c 	.word	0x2000000c
 8001ba4:	20000334 	.word	0x20000334

08001ba8 <setPwm>:





void setPwm(float Ua, float Ub, float Uc, TIM_TypeDef * TIM_BASE) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
 8001bb4:	603b      	str	r3, [r7, #0]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8001bb6:	f04f 0100 	mov.w	r1, #0
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f7ff fa60 	bl	8001080 <__aeabi_fcmplt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <setPwm+0x24>
 8001bc6:	f04f 0300 	mov.w	r3, #0
 8001bca:	e00c      	b.n	8001be6 <setPwm+0x3e>
 8001bcc:	4b83      	ldr	r3, [pc, #524]	; (8001ddc <setPwm+0x234>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fa72 	bl	80010bc <__aeabi_fcmpgt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <setPwm+0x3c>
 8001bde:	4b7f      	ldr	r3, [pc, #508]	; (8001ddc <setPwm+0x234>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e000      	b.n	8001be6 <setPwm+0x3e>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8001be8:	f04f 0100 	mov.w	r1, #0
 8001bec:	68b8      	ldr	r0, [r7, #8]
 8001bee:	f7ff fa47 	bl	8001080 <__aeabi_fcmplt>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <setPwm+0x56>
 8001bf8:	f04f 0300 	mov.w	r3, #0
 8001bfc:	e00c      	b.n	8001c18 <setPwm+0x70>
 8001bfe:	4b77      	ldr	r3, [pc, #476]	; (8001ddc <setPwm+0x234>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4619      	mov	r1, r3
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fa59 	bl	80010bc <__aeabi_fcmpgt>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <setPwm+0x6e>
 8001c10:	4b72      	ldr	r3, [pc, #456]	; (8001ddc <setPwm+0x234>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e000      	b.n	8001c18 <setPwm+0x70>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff fa2e 	bl	8001080 <__aeabi_fcmplt>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <setPwm+0x88>
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	e00c      	b.n	8001c4a <setPwm+0xa2>
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <setPwm+0x234>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fa40 	bl	80010bc <__aeabi_fcmpgt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <setPwm+0xa0>
 8001c42:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <setPwm+0x234>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	e000      	b.n	8001c4a <setPwm+0xa2>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	float dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8001c4c:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <setPwm+0x238>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	68f8      	ldr	r0, [r7, #12]
 8001c54:	f7ff f92a 	bl	8000eac <__aeabi_fdiv>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fa0e 	bl	8001080 <__aeabi_fcmplt>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <setPwm+0xc8>
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	e018      	b.n	8001ca2 <setPwm+0xfa>
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <setPwm+0x238>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4619      	mov	r1, r3
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f7ff f918 	bl	8000eac <__aeabi_fdiv>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa1a 	bl	80010bc <__aeabi_fcmpgt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <setPwm+0xec>
 8001c8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c92:	e006      	b.n	8001ca2 <setPwm+0xfa>
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <setPwm+0x238>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f7ff f906 	bl	8000eac <__aeabi_fdiv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	61fb      	str	r3, [r7, #28]
	float dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 8001ca4:	4b4e      	ldr	r3, [pc, #312]	; (8001de0 <setPwm+0x238>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4619      	mov	r1, r3
 8001caa:	68b8      	ldr	r0, [r7, #8]
 8001cac:	f7ff f8fe 	bl	8000eac <__aeabi_fdiv>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f04f 0100 	mov.w	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f9e2 	bl	8001080 <__aeabi_fcmplt>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <setPwm+0x120>
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	e018      	b.n	8001cfa <setPwm+0x152>
 8001cc8:	4b45      	ldr	r3, [pc, #276]	; (8001de0 <setPwm+0x238>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68b8      	ldr	r0, [r7, #8]
 8001cd0:	f7ff f8ec 	bl	8000eac <__aeabi_fdiv>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff f9ee 	bl	80010bc <__aeabi_fcmpgt>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <setPwm+0x144>
 8001ce6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cea:	e006      	b.n	8001cfa <setPwm+0x152>
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <setPwm+0x238>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	68b8      	ldr	r0, [r7, #8]
 8001cf4:	f7ff f8da 	bl	8000eac <__aeabi_fdiv>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	61bb      	str	r3, [r7, #24]
	float dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001cfc:	4b38      	ldr	r3, [pc, #224]	; (8001de0 <setPwm+0x238>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4619      	mov	r1, r3
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff f8d2 	bl	8000eac <__aeabi_fdiv>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f04f 0100 	mov.w	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f9b6 	bl	8001080 <__aeabi_fcmplt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <setPwm+0x178>
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e018      	b.n	8001d52 <setPwm+0x1aa>
 8001d20:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <setPwm+0x238>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4619      	mov	r1, r3
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff f8c0 	bl	8000eac <__aeabi_fdiv>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f9c2 	bl	80010bc <__aeabi_fcmpgt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <setPwm+0x19c>
 8001d3e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d42:	e006      	b.n	8001d52 <setPwm+0x1aa>
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <setPwm+0x238>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff f8ae 	bl	8000eac <__aeabi_fdiv>
 8001d50:	4603      	mov	r3, r0
 8001d52:	617b      	str	r3, [r7, #20]

	//写入PWM到PWM 0 1 2 通道
	TIM_BASE->CCR1 = (uint32_t) roundf(dc_a*period);
 8001d54:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <setPwm+0x23c>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe ff9f 	bl	8000c9c <__aeabi_i2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	69f9      	ldr	r1, [r7, #28]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ffee 	bl	8000d44 <__aeabi_fmul>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f009 f9ee 	bl	800b14c <roundf>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f9ac 	bl	80010d0 <__aeabi_f2uiz>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_BASE->CCR2 = (uint32_t) roundf(dc_b*period);
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <setPwm+0x23c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe ff8a 	bl	8000c9c <__aeabi_i2f>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	69b9      	ldr	r1, [r7, #24]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe ffd9 	bl	8000d44 <__aeabi_fmul>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f009 f9d9 	bl	800b14c <roundf>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff f997 	bl	80010d0 <__aeabi_f2uiz>
 8001da2:	4602      	mov	r2, r0
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_BASE->CCR3 = (uint32_t) roundf(dc_c*period);
 8001da8:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <setPwm+0x23c>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7fe ff75 	bl	8000c9c <__aeabi_i2f>
 8001db2:	4603      	mov	r3, r0
 8001db4:	6979      	ldr	r1, [r7, #20]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe ffc4 	bl	8000d44 <__aeabi_fmul>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f009 f9c4 	bl	800b14c <roundf>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f982 	bl	80010d0 <__aeabi_f2uiz>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c

}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	20000004 	.word	0x20000004
 8001de4:	20000008 	.word	0x20000008

08001de8 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el, TIM_TypeDef * TIM_BASE) {
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
 8001df4:	603b      	str	r3, [r7, #0]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 8001df6:	4b6e      	ldr	r3, [pc, #440]	; (8001fb0 <setPhaseVoltage+0x1c8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fe99 	bl	8000b34 <__addsf3>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe6f 	bl	8001ae8 <_normalizeAngle>
 8001e0a:	6078      	str	r0, [r7, #4]
  // 帕克逆变换
  float Ualpha =  -Uq*sin(angle_el);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb08 	bl	8000428 <__aeabi_f2d>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	460d      	mov	r5, r1
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7fe fb03 	bl	8000428 <__aeabi_f2d>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f009 f949 	bl	800b0c0 <sin>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4620      	mov	r0, r4
 8001e34:	4629      	mov	r1, r5
 8001e36:	f7fe fb4f 	bl	80004d8 <__aeabi_dmul>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe21 	bl	8000a88 <__aeabi_d2f>
 8001e46:	4603      	mov	r3, r0
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
  float Ubeta =   Uq*cos(angle_el);
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7fe faec 	bl	8000428 <__aeabi_f2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe fae7 	bl	8000428 <__aeabi_f2d>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f009 f867 	bl	800af34 <cos>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe fb33 	bl	80004d8 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe05 	bl	8000a88 <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	623b      	str	r3, [r7, #32]

  // 克拉克逆变换
  float Ua = Ualpha + voltage_power_supply/2;
 8001e82:	4b4c      	ldr	r3, [pc, #304]	; (8001fb4 <setPhaseVoltage+0x1cc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff f80e 	bl	8000eac <__aeabi_fdiv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4619      	mov	r1, r3
 8001e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e96:	f7fe fe4d 	bl	8000b34 <__addsf3>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	61fb      	str	r3, [r7, #28]
  float Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 8001e9e:	6a38      	ldr	r0, [r7, #32]
 8001ea0:	f7fe fac2 	bl	8000428 <__aeabi_f2d>
 8001ea4:	a340      	add	r3, pc, #256	; (adr r3, 8001fa8 <setPhaseVoltage+0x1c0>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	f7fe fb15 	bl	80004d8 <__aeabi_dmul>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4614      	mov	r4, r2
 8001eb4:	461d      	mov	r5, r3
 8001eb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001eb8:	f7fe fab6 	bl	8000428 <__aeabi_f2d>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	4620      	mov	r0, r4
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	f7fe f950 	bl	8000168 <__aeabi_dsub>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ed8:	f7fe fc28 	bl	800072c <__aeabi_ddiv>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4614      	mov	r4, r2
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <setPhaseVoltage+0x1cc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe ffdd 	bl	8000eac <__aeabi_fdiv>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fa97 	bl	8000428 <__aeabi_f2d>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4620      	mov	r0, r4
 8001f00:	4629      	mov	r1, r5
 8001f02:	f7fe f933 	bl	800016c <__adddf3>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4610      	mov	r0, r2
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f7fe fdbb 	bl	8000a88 <__aeabi_d2f>
 8001f12:	4603      	mov	r3, r0
 8001f14:	61bb      	str	r3, [r7, #24]
  float Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fa83 	bl	8000428 <__aeabi_f2d>
 8001f22:	4604      	mov	r4, r0
 8001f24:	460d      	mov	r5, r1
 8001f26:	6a38      	ldr	r0, [r7, #32]
 8001f28:	f7fe fa7e 	bl	8000428 <__aeabi_f2d>
 8001f2c:	a31e      	add	r3, pc, #120	; (adr r3, 8001fa8 <setPhaseVoltage+0x1c0>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fad1 	bl	80004d8 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe f913 	bl	8000168 <__aeabi_dsub>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4610      	mov	r0, r2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f52:	f7fe fbeb 	bl	800072c <__aeabi_ddiv>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4614      	mov	r4, r2
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <setPhaseVoltage+0x1cc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe ffa0 	bl	8000eac <__aeabi_fdiv>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7fe fa5a 	bl	8000428 <__aeabi_f2d>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4620      	mov	r0, r4
 8001f7a:	4629      	mov	r1, r5
 8001f7c:	f7fe f8f6 	bl	800016c <__adddf3>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fd7e 	bl	8000a88 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	617b      	str	r3, [r7, #20]
  setPwm(Ua,Ub,Uc,TIM_BASE);
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	69b9      	ldr	r1, [r7, #24]
 8001f96:	69f8      	ldr	r0, [r7, #28]
 8001f98:	f7ff fe06 	bl	8001ba8 <setPwm>
}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	; 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fa4:	f3af 8000 	nop.w
 8001fa8:	e8584caa 	.word	0xe8584caa
 8001fac:	3ffbb67a 	.word	0x3ffbb67a
 8001fb0:	20000334 	.word	0x20000334
 8001fb4:	20000004 	.word	0x20000004

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_MspInit+0x40>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_MspInit+0x40>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_MspInit+0x40>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_MspInit+0x40>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_MspInit+0x40>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <HAL_MspInit+0x40>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bc80      	pop	{r7}
 8001ff6:	4770      	bx	lr
 8001ff8:	40021000 	.word	0x40021000

08001ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0310 	add.w	r3, r7, #16
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1b      	ldr	r2, [pc, #108]	; (8002084 <HAL_SPI_MspInit+0x88>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d12f      	bne.n	800207c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800201c:	4b1a      	ldr	r3, [pc, #104]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	4a19      	ldr	r2, [pc, #100]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 8002022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002026:	6193      	str	r3, [r2, #24]
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002034:	4b14      	ldr	r3, [pc, #80]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	4a13      	ldr	r2, [pc, #76]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 800203a:	f043 0304 	orr.w	r3, r3, #4
 800203e:	6193      	str	r3, [r2, #24]
 8002040:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_SPI_MspInit+0x8c>)
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800204c:	23a0      	movs	r3, #160	; 0xa0
 800204e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002050:	2302      	movs	r3, #2
 8002052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	4619      	mov	r1, r3
 800205e:	480b      	ldr	r0, [pc, #44]	; (800208c <HAL_SPI_MspInit+0x90>)
 8002060:	f000 fab4 	bl	80025cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800206c:	2301      	movs	r3, #1
 800206e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	f107 0310 	add.w	r3, r7, #16
 8002074:	4619      	mov	r1, r3
 8002076:	4805      	ldr	r0, [pc, #20]	; (800208c <HAL_SPI_MspInit+0x90>)
 8002078:	f000 faa8 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800207c:	bf00      	nop
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40013000 	.word	0x40013000
 8002088:	40021000 	.word	0x40021000
 800208c:	40010800 	.word	0x40010800

08002090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_TIM_Base_MspInit+0x68>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <HAL_TIM_Base_MspInit+0x6c>)
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	4a15      	ldr	r2, [pc, #84]	; (80020fc <HAL_TIM_Base_MspInit+0x6c>)
 80020a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020ac:	6193      	str	r3, [r2, #24]
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <HAL_TIM_Base_MspInit+0x6c>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80020ba:	e018      	b.n	80020ee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d113      	bne.n	80020ee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <HAL_TIM_Base_MspInit+0x6c>)
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	; (80020fc <HAL_TIM_Base_MspInit+0x6c>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	61d3      	str	r3, [r2, #28]
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_TIM_Base_MspInit+0x6c>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
 80020dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020de:	2200      	movs	r2, #0
 80020e0:	2100      	movs	r1, #0
 80020e2:	201c      	movs	r0, #28
 80020e4:	f000 fa3b 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020e8:	201c      	movs	r0, #28
 80020ea:	f000 fa54 	bl	8002596 <HAL_NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	40012c00 	.word	0x40012c00
 80020fc:	40021000 	.word	0x40021000

08002100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0310 	add.w	r3, r7, #16
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a10      	ldr	r2, [pc, #64]	; (800215c <HAL_TIM_MspPostInit+0x5c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d118      	bne.n	8002152 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002120:	4b0f      	ldr	r3, [pc, #60]	; (8002160 <HAL_TIM_MspPostInit+0x60>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0x60>)
 8002126:	f043 0304 	orr.w	r3, r3, #4
 800212a:	6193      	str	r3, [r2, #24]
 800212c:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <HAL_TIM_MspPostInit+0x60>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002138:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800213c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0310 	add.w	r3, r7, #16
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_TIM_MspPostInit+0x64>)
 800214e:	f000 fa3d 	bl	80025cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40021000 	.word	0x40021000
 8002164:	40010800 	.word	0x40010800

08002168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800216c:	e7fe      	b.n	800216c <NMI_Handler+0x4>

0800216e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002172:	e7fe      	b.n	8002172 <HardFault_Handler+0x4>

08002174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <MemManage_Handler+0x4>

0800217a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800217a:	b480      	push	{r7}
 800217c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800217e:	e7fe      	b.n	800217e <BusFault_Handler+0x4>

08002180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002184:	e7fe      	b.n	8002184 <UsageFault_Handler+0x4>

08002186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr

0800219e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ae:	f000 f8bf 	bl	8002330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80021be:	f000 fceb 	bl	8002b98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	2000100c 	.word	0x2000100c

080021cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <TIM2_IRQHandler+0x10>)
 80021d2:	f003 fac3 	bl	800575c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200002b8 	.word	0x200002b8

080021e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e8:	4a14      	ldr	r2, [pc, #80]	; (800223c <_sbrk+0x5c>)
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <_sbrk+0x60>)
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f4:	4b13      	ldr	r3, [pc, #76]	; (8002244 <_sbrk+0x64>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <_sbrk+0x64>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <_sbrk+0x68>)
 8002200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	429a      	cmp	r2, r3
 800220e:	d207      	bcs.n	8002220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002210:	f00a f82c 	bl	800c26c <__errno>
 8002214:	4603      	mov	r3, r0
 8002216:	220c      	movs	r2, #12
 8002218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800221a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800221e:	e009      	b.n	8002234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <_sbrk+0x64>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <_sbrk+0x64>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <_sbrk+0x64>)
 8002230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002232:	68fb      	ldr	r3, [r7, #12]
}
 8002234:	4618      	mov	r0, r3
 8002236:	3718      	adds	r7, #24
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20005000 	.word	0x20005000
 8002240:	00000400 	.word	0x00000400
 8002244:	2000033c 	.word	0x2000033c
 8002248:	20001528 	.word	0x20001528

0800224c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002258:	480c      	ldr	r0, [pc, #48]	; (800228c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800225a:	490d      	ldr	r1, [pc, #52]	; (8002290 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800225c:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002260:	e002      	b.n	8002268 <LoopCopyDataInit>

08002262 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002262:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002264:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002266:	3304      	adds	r3, #4

08002268 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002268:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800226c:	d3f9      	bcc.n	8002262 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800226e:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002270:	4c0a      	ldr	r4, [pc, #40]	; (800229c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002274:	e001      	b.n	800227a <LoopFillZerobss>

08002276 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002276:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002278:	3204      	adds	r2, #4

0800227a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800227c:	d3fb      	bcc.n	8002276 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800227e:	f7ff ffe5 	bl	800224c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002282:	f009 fff9 	bl	800c278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002286:	f7fe ffdb 	bl	8001240 <main>
  bx lr
 800228a:	4770      	bx	lr
  ldr r0, =_sdata
 800228c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002290:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002294:	0800ce9c 	.word	0x0800ce9c
  ldr r2, =_sbss
 8002298:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800229c:	20001528 	.word	0x20001528

080022a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC1_2_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <HAL_Init+0x28>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a07      	ldr	r2, [pc, #28]	; (80022cc <HAL_Init+0x28>)
 80022ae:	f043 0310 	orr.w	r3, r3, #16
 80022b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b4:	2003      	movs	r0, #3
 80022b6:	f000 f947 	bl	8002548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ba:	200f      	movs	r0, #15
 80022bc:	f000 f808 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022c0:	f7ff fe7a 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40022000 	.word	0x40022000

080022d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x54>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <HAL_InitTick+0x58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	4619      	mov	r1, r3
 80022e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 f95f 	bl	80025b2 <HAL_SYSTICK_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e00e      	b.n	800231c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b0f      	cmp	r3, #15
 8002302:	d80a      	bhi.n	800231a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002304:	2200      	movs	r2, #0
 8002306:	6879      	ldr	r1, [r7, #4]
 8002308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800230c:	f000 f927 	bl	800255e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002310:	4a06      	ldr	r2, [pc, #24]	; (800232c <HAL_InitTick+0x5c>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	e000      	b.n	800231c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	2000001c 	.word	0x2000001c
 8002328:	20000024 	.word	0x20000024
 800232c:	20000020 	.word	0x20000020

08002330 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b05      	ldr	r3, [pc, #20]	; (800234c <HAL_IncTick+0x1c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b05      	ldr	r3, [pc, #20]	; (8002350 <HAL_IncTick+0x20>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a03      	ldr	r2, [pc, #12]	; (8002350 <HAL_IncTick+0x20>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr
 800234c:	20000024 	.word	0x20000024
 8002350:	20000340 	.word	0x20000340

08002354 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b02      	ldr	r3, [pc, #8]	; (8002364 <HAL_GetTick+0x10>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	20000340 	.word	0x20000340

08002368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7ff fff0 	bl	8002354 <HAL_GetTick>
 8002374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002380:	d005      	beq.n	800238e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_Delay+0x44>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	461a      	mov	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800238e:	bf00      	nop
 8002390:	f7ff ffe0 	bl	8002354 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d8f7      	bhi.n	8002390 <HAL_Delay+0x28>
  {
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000024 	.word	0x20000024

080023b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e2:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <__NVIC_SetPriorityGrouping+0x44>)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	60d3      	str	r3, [r2, #12]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023fc:	4b04      	ldr	r3, [pc, #16]	; (8002410 <__NVIC_GetPriorityGrouping+0x18>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	0a1b      	lsrs	r3, r3, #8
 8002402:	f003 0307 	and.w	r3, r3, #7
}
 8002406:	4618      	mov	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	4603      	mov	r3, r0
 800241c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	2b00      	cmp	r3, #0
 8002424:	db0b      	blt.n	800243e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	f003 021f 	and.w	r2, r3, #31
 800242c:	4906      	ldr	r1, [pc, #24]	; (8002448 <__NVIC_EnableIRQ+0x34>)
 800242e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	2001      	movs	r0, #1
 8002436:	fa00 f202 	lsl.w	r2, r0, r2
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	bc80      	pop	{r7}
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	bc80      	pop	{r7}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002514:	d301      	bcc.n	800251a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002516:	2301      	movs	r3, #1
 8002518:	e00f      	b.n	800253a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251a:	4a0a      	ldr	r2, [pc, #40]	; (8002544 <SysTick_Config+0x40>)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3b01      	subs	r3, #1
 8002520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002522:	210f      	movs	r1, #15
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002528:	f7ff ff90 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SysTick_Config+0x40>)
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <SysTick_Config+0x40>)
 8002534:	2207      	movs	r2, #7
 8002536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff2d 	bl	80023b0 <__NVIC_SetPriorityGrouping>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800255e:	b580      	push	{r7, lr}
 8002560:	b086      	sub	sp, #24
 8002562:	af00      	add	r7, sp, #0
 8002564:	4603      	mov	r3, r0
 8002566:	60b9      	str	r1, [r7, #8]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002570:	f7ff ff42 	bl	80023f8 <__NVIC_GetPriorityGrouping>
 8002574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	68b9      	ldr	r1, [r7, #8]
 800257a:	6978      	ldr	r0, [r7, #20]
 800257c:	f7ff ff90 	bl	80024a0 <NVIC_EncodePriority>
 8002580:	4602      	mov	r2, r0
 8002582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff5f 	bl	800244c <__NVIC_SetPriority>
}
 800258e:	bf00      	nop
 8002590:	3718      	adds	r7, #24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	4603      	mov	r3, r0
 800259e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff35 	bl	8002414 <__NVIC_EnableIRQ>
}
 80025aa:	bf00      	nop
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff ffa2 	bl	8002504 <SysTick_Config>
 80025c0:	4603      	mov	r3, r0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b08b      	sub	sp, #44	; 0x2c
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025de:	e169      	b.n	80028b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025e0:	2201      	movs	r2, #1
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	f040 8158 	bne.w	80028ae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	4a9a      	ldr	r2, [pc, #616]	; (800286c <HAL_GPIO_Init+0x2a0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d05e      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002608:	4a98      	ldr	r2, [pc, #608]	; (800286c <HAL_GPIO_Init+0x2a0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d875      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 800260e:	4a98      	ldr	r2, [pc, #608]	; (8002870 <HAL_GPIO_Init+0x2a4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d058      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002614:	4a96      	ldr	r2, [pc, #600]	; (8002870 <HAL_GPIO_Init+0x2a4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d86f      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 800261a:	4a96      	ldr	r2, [pc, #600]	; (8002874 <HAL_GPIO_Init+0x2a8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d052      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002620:	4a94      	ldr	r2, [pc, #592]	; (8002874 <HAL_GPIO_Init+0x2a8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d869      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 8002626:	4a94      	ldr	r2, [pc, #592]	; (8002878 <HAL_GPIO_Init+0x2ac>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04c      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 800262c:	4a92      	ldr	r2, [pc, #584]	; (8002878 <HAL_GPIO_Init+0x2ac>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d863      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 8002632:	4a92      	ldr	r2, [pc, #584]	; (800287c <HAL_GPIO_Init+0x2b0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d046      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
 8002638:	4a90      	ldr	r2, [pc, #576]	; (800287c <HAL_GPIO_Init+0x2b0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d85d      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 800263e:	2b12      	cmp	r3, #18
 8002640:	d82a      	bhi.n	8002698 <HAL_GPIO_Init+0xcc>
 8002642:	2b12      	cmp	r3, #18
 8002644:	d859      	bhi.n	80026fa <HAL_GPIO_Init+0x12e>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <HAL_GPIO_Init+0x80>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026a1 	.word	0x080026a1
 8002654:	080026b3 	.word	0x080026b3
 8002658:	080026f5 	.word	0x080026f5
 800265c:	080026fb 	.word	0x080026fb
 8002660:	080026fb 	.word	0x080026fb
 8002664:	080026fb 	.word	0x080026fb
 8002668:	080026fb 	.word	0x080026fb
 800266c:	080026fb 	.word	0x080026fb
 8002670:	080026fb 	.word	0x080026fb
 8002674:	080026fb 	.word	0x080026fb
 8002678:	080026fb 	.word	0x080026fb
 800267c:	080026fb 	.word	0x080026fb
 8002680:	080026fb 	.word	0x080026fb
 8002684:	080026fb 	.word	0x080026fb
 8002688:	080026fb 	.word	0x080026fb
 800268c:	080026fb 	.word	0x080026fb
 8002690:	080026a9 	.word	0x080026a9
 8002694:	080026bd 	.word	0x080026bd
 8002698:	4a79      	ldr	r2, [pc, #484]	; (8002880 <HAL_GPIO_Init+0x2b4>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800269e:	e02c      	b.n	80026fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e029      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	3304      	adds	r3, #4
 80026ae:	623b      	str	r3, [r7, #32]
          break;
 80026b0:	e024      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	3308      	adds	r3, #8
 80026b8:	623b      	str	r3, [r7, #32]
          break;
 80026ba:	e01f      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	330c      	adds	r3, #12
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e01a      	b.n	80026fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026ce:	2304      	movs	r3, #4
 80026d0:	623b      	str	r3, [r7, #32]
          break;
 80026d2:	e013      	b.n	80026fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026dc:	2308      	movs	r3, #8
 80026de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	611a      	str	r2, [r3, #16]
          break;
 80026e6:	e009      	b.n	80026fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026e8:	2308      	movs	r3, #8
 80026ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69fa      	ldr	r2, [r7, #28]
 80026f0:	615a      	str	r2, [r3, #20]
          break;
 80026f2:	e003      	b.n	80026fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026f4:	2300      	movs	r3, #0
 80026f6:	623b      	str	r3, [r7, #32]
          break;
 80026f8:	e000      	b.n	80026fc <HAL_GPIO_Init+0x130>
          break;
 80026fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2bff      	cmp	r3, #255	; 0xff
 8002700:	d801      	bhi.n	8002706 <HAL_GPIO_Init+0x13a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	e001      	b.n	800270a <HAL_GPIO_Init+0x13e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d802      	bhi.n	8002718 <HAL_GPIO_Init+0x14c>
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	e002      	b.n	800271e <HAL_GPIO_Init+0x152>
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3b08      	subs	r3, #8
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	210f      	movs	r1, #15
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	fa01 f303 	lsl.w	r3, r1, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	401a      	ands	r2, r3
 8002730:	6a39      	ldr	r1, [r7, #32]
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	431a      	orrs	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80b1 	beq.w	80028ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800274c:	4b4d      	ldr	r3, [pc, #308]	; (8002884 <HAL_GPIO_Init+0x2b8>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_GPIO_Init+0x2b8>)
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b4a      	ldr	r3, [pc, #296]	; (8002884 <HAL_GPIO_Init+0x2b8>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002764:	4a48      	ldr	r2, [pc, #288]	; (8002888 <HAL_GPIO_Init+0x2bc>)
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	089b      	lsrs	r3, r3, #2
 800276a:	3302      	adds	r3, #2
 800276c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002770:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	220f      	movs	r2, #15
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43db      	mvns	r3, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4013      	ands	r3, r2
 8002786:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a40      	ldr	r2, [pc, #256]	; (800288c <HAL_GPIO_Init+0x2c0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d013      	beq.n	80027b8 <HAL_GPIO_Init+0x1ec>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3f      	ldr	r2, [pc, #252]	; (8002890 <HAL_GPIO_Init+0x2c4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00d      	beq.n	80027b4 <HAL_GPIO_Init+0x1e8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a3e      	ldr	r2, [pc, #248]	; (8002894 <HAL_GPIO_Init+0x2c8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d007      	beq.n	80027b0 <HAL_GPIO_Init+0x1e4>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3d      	ldr	r2, [pc, #244]	; (8002898 <HAL_GPIO_Init+0x2cc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_GPIO_Init+0x1e0>
 80027a8:	2303      	movs	r3, #3
 80027aa:	e006      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027ac:	2304      	movs	r3, #4
 80027ae:	e004      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e002      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <HAL_GPIO_Init+0x1ee>
 80027b8:	2300      	movs	r3, #0
 80027ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027bc:	f002 0203 	and.w	r2, r2, #3
 80027c0:	0092      	lsls	r2, r2, #2
 80027c2:	4093      	lsls	r3, r2
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ca:	492f      	ldr	r1, [pc, #188]	; (8002888 <HAL_GPIO_Init+0x2bc>)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3302      	adds	r3, #2
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d006      	beq.n	80027f2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027e4:	4b2d      	ldr	r3, [pc, #180]	; (800289c <HAL_GPIO_Init+0x2d0>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	492c      	ldr	r1, [pc, #176]	; (800289c <HAL_GPIO_Init+0x2d0>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027f2:	4b2a      	ldr	r3, [pc, #168]	; (800289c <HAL_GPIO_Init+0x2d0>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	43db      	mvns	r3, r3
 80027fa:	4928      	ldr	r1, [pc, #160]	; (800289c <HAL_GPIO_Init+0x2d0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d006      	beq.n	800281a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	4922      	ldr	r1, [pc, #136]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	604b      	str	r3, [r1, #4]
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	43db      	mvns	r3, r3
 8002822:	491e      	ldr	r1, [pc, #120]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002824:	4013      	ands	r3, r2
 8002826:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	4918      	ldr	r1, [pc, #96]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4313      	orrs	r3, r2
 800283e:	608b      	str	r3, [r1, #8]
 8002840:	e006      	b.n	8002850 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	43db      	mvns	r3, r3
 800284a:	4914      	ldr	r1, [pc, #80]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800284c:	4013      	ands	r3, r2
 800284e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d021      	beq.n	80028a0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800285c:	4b0f      	ldr	r3, [pc, #60]	; (800289c <HAL_GPIO_Init+0x2d0>)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	490e      	ldr	r1, [pc, #56]	; (800289c <HAL_GPIO_Init+0x2d0>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	60cb      	str	r3, [r1, #12]
 8002868:	e021      	b.n	80028ae <HAL_GPIO_Init+0x2e2>
 800286a:	bf00      	nop
 800286c:	10320000 	.word	0x10320000
 8002870:	10310000 	.word	0x10310000
 8002874:	10220000 	.word	0x10220000
 8002878:	10210000 	.word	0x10210000
 800287c:	10120000 	.word	0x10120000
 8002880:	10110000 	.word	0x10110000
 8002884:	40021000 	.word	0x40021000
 8002888:	40010000 	.word	0x40010000
 800288c:	40010800 	.word	0x40010800
 8002890:	40010c00 	.word	0x40010c00
 8002894:	40011000 	.word	0x40011000
 8002898:	40011400 	.word	0x40011400
 800289c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_GPIO_Init+0x304>)
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	4909      	ldr	r1, [pc, #36]	; (80028d0 <HAL_GPIO_Init+0x304>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	3301      	adds	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f47f ae8e 	bne.w	80025e0 <HAL_GPIO_Init+0x14>
  }
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	372c      	adds	r7, #44	; 0x2c
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr
 80028d0:	40010400 	.word	0x40010400

080028d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	807b      	strh	r3, [r7, #2]
 80028e0:	4613      	mov	r3, r2
 80028e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028e4:	787b      	ldrb	r3, [r7, #1]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028ea:	887a      	ldrh	r2, [r7, #2]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028f0:	e003      	b.n	80028fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	611a      	str	r2, [r3, #16]
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002916:	887a      	ldrh	r2, [r7, #2]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4013      	ands	r3, r2
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	43d9      	mvns	r1, r3
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	400b      	ands	r3, r1
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	611a      	str	r2, [r3, #16]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002936:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002938:	b08b      	sub	sp, #44	; 0x2c
 800293a:	af06      	add	r7, sp, #24
 800293c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0fd      	b.n	8002b44 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f008 f83f 	bl	800a9e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2203      	movs	r2, #3
 8002966:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f003 fd2d 	bl	80063ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	603b      	str	r3, [r7, #0]
 800297a:	687e      	ldr	r6, [r7, #4]
 800297c:	466d      	mov	r5, sp
 800297e:	f106 0410 	add.w	r4, r6, #16
 8002982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002986:	6823      	ldr	r3, [r4, #0]
 8002988:	602b      	str	r3, [r5, #0]
 800298a:	1d33      	adds	r3, r6, #4
 800298c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800298e:	6838      	ldr	r0, [r7, #0]
 8002990:	f003 fcf7 	bl	8006382 <USB_CoreInit>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d005      	beq.n	80029a6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e0ce      	b.n	8002b44 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 fd28 	bl	8006402 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e04c      	b.n	8002a52 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3301      	adds	r3, #1
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	1c5a      	adds	r2, r3, #1
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029e2:	7bfa      	ldrb	r2, [r7, #15]
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
 80029e6:	b298      	uxth	r0, r3
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	440b      	add	r3, r1
 80029f4:	3336      	adds	r3, #54	; 0x36
 80029f6:	4602      	mov	r2, r0
 80029f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3303      	adds	r3, #3
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a10:	7bfa      	ldrb	r2, [r7, #15]
 8002a12:	6879      	ldr	r1, [r7, #4]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	3338      	adds	r3, #56	; 0x38
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a24:	7bfa      	ldrb	r2, [r7, #15]
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	333c      	adds	r3, #60	; 0x3c
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a38:	7bfa      	ldrb	r2, [r7, #15]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	440b      	add	r3, r1
 8002a46:	3340      	adds	r3, #64	; 0x40
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	7bfa      	ldrb	r2, [r7, #15]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d3ad      	bcc.n	80029b8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
 8002a60:	e044      	b.n	8002aec <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a62:	7bfa      	ldrb	r2, [r7, #15]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a8a:	7bfa      	ldrb	r2, [r7, #15]
 8002a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a8e:	7bfa      	ldrb	r2, [r7, #15]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aa4:	7bfa      	ldrb	r2, [r7, #15]
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aba:	7bfa      	ldrb	r2, [r7, #15]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad0:	7bfa      	ldrb	r2, [r7, #15]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	440b      	add	r3, r1
 8002ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3b5      	bcc.n	8002a62 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	603b      	str	r3, [r7, #0]
 8002afc:	687e      	ldr	r6, [r7, #4]
 8002afe:	466d      	mov	r5, sp
 8002b00:	f106 0410 	add.w	r4, r6, #16
 8002b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b08:	6823      	ldr	r3, [r4, #0]
 8002b0a:	602b      	str	r3, [r5, #0]
 8002b0c:	1d33      	adds	r3, r6, #4
 8002b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b10:	6838      	ldr	r0, [r7, #0]
 8002b12:	f003 fc82 	bl	800641a <USB_DevInit>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e00d      	b.n	8002b44 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f006 f935 	bl	8008dac <USB_DevDisconnect>

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_PCD_Start+0x16>
 8002b5e:	2302      	movs	r3, #2
 8002b60:	e016      	b.n	8002b90 <HAL_PCD_Start+0x44>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 fc17 	bl	80063a2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b74:	2101      	movs	r1, #1
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f008 f9a5 	bl	800aec6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f006 f909 	bl	8008d98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f006 f90b 	bl	8008dc0 <USB_ReadInterrupts>
 8002baa:	4603      	mov	r3, r0
 8002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb4:	d102      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 fb5f 	bl	800327a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f006 f8fd 	bl	8008dc0 <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd0:	d112      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	b292      	uxth	r2, r2
 8002be6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f007 ff73 	bl	800aad6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f923 	bl	8002e3e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f006 f8df 	bl	8008dc0 <USB_ReadInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c0c:	d10b      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f006 f8c8 	bl	8008dc0 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3a:	d10b      	bne.n	8002c54 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c4e:	b292      	uxth	r2, r2
 8002c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f006 f8b1 	bl	8008dc0 <USB_ReadInterrupts>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c68:	d126      	bne.n	8002cb8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0204 	bic.w	r2, r2, #4
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0208 	bic.w	r2, r2, #8
 8002c94:	b292      	uxth	r2, r2
 8002c96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f007 ff54 	bl	800ab48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cb2:	b292      	uxth	r2, r2
 8002cb4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f006 f87f 	bl	8008dc0 <USB_ReadInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ccc:	f040 8082 	bne.w	8002dd4 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77fb      	strb	r3, [r7, #31]
 8002cd4:	e010      	b.n	8002cf8 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	7ffb      	ldrb	r3, [r7, #31]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	441a      	add	r2, r3
 8002ce2:	7ffb      	ldrb	r3, [r7, #31]
 8002ce4:	8812      	ldrh	r2, [r2, #0]
 8002ce6:	b292      	uxth	r2, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	3320      	adds	r3, #32
 8002cec:	443b      	add	r3, r7
 8002cee:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002cf2:	7ffb      	ldrb	r3, [r7, #31]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	7ffb      	ldrb	r3, [r7, #31]
 8002cfa:	2b07      	cmp	r3, #7
 8002cfc:	d9eb      	bls.n	8002cd6 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0201 	orr.w	r2, r2, #1
 8002d10:	b292      	uxth	r2, r2
 8002d12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	b292      	uxth	r2, r2
 8002d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002d2e:	bf00      	nop
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f6      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d54:	b292      	uxth	r2, r2
 8002d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	77fb      	strb	r3, [r7, #31]
 8002d5e:	e00f      	b.n	8002d80 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d60:	7ffb      	ldrb	r3, [r7, #31]
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6812      	ldr	r2, [r2, #0]
 8002d66:	4611      	mov	r1, r2
 8002d68:	7ffa      	ldrb	r2, [r7, #31]
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	440a      	add	r2, r1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	3320      	adds	r3, #32
 8002d72:	443b      	add	r3, r7
 8002d74:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002d78:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d7a:	7ffb      	ldrb	r3, [r7, #31]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	7ffb      	ldrb	r3, [r7, #31]
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d9ec      	bls.n	8002d60 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 0208 	orr.w	r2, r2, #8
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db0:	b292      	uxth	r2, r2
 8002db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f042 0204 	orr.w	r2, r2, #4
 8002dc8:	b292      	uxth	r2, r2
 8002dca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f007 fea0 	bl	800ab14 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f005 fff1 	bl	8008dc0 <USB_ReadInterrupts>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de8:	d10e      	bne.n	8002e08 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dfc:	b292      	uxth	r2, r2
 8002dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f007 fe59 	bl	800aaba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f005 ffd7 	bl	8008dc0 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1c:	d10b      	bne.n	8002e36 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e30:	b292      	uxth	r2, r2
 8002e32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002e36:	bf00      	nop
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	460b      	mov	r3, r1
 8002e48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d101      	bne.n	8002e58 <HAL_PCD_SetAddress+0x1a>
 8002e54:	2302      	movs	r3, #2
 8002e56:	e013      	b.n	8002e80 <HAL_PCD_SetAddress+0x42>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	78fa      	ldrb	r2, [r7, #3]
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 ff7e 	bl	8008d72 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	4608      	mov	r0, r1
 8002e92:	4611      	mov	r1, r2
 8002e94:	461a      	mov	r2, r3
 8002e96:	4603      	mov	r3, r0
 8002e98:	70fb      	strb	r3, [r7, #3]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	803b      	strh	r3, [r7, #0]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da0e      	bge.n	8002ecc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eae:	78fb      	ldrb	r3, [r7, #3]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	1c5a      	adds	r2, r3, #1
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	705a      	strb	r2, [r3, #1]
 8002eca:	e00e      	b.n	8002eea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	f003 0207 	and.w	r2, r3, #7
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ef6:	883a      	ldrh	r2, [r7, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	78ba      	ldrb	r2, [r7, #2]
 8002f00:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	785b      	ldrb	r3, [r3, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d004      	beq.n	8002f14 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f14:	78bb      	ldrb	r3, [r7, #2]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d102      	bne.n	8002f20 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_PCD_EP_Open+0xa6>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e00e      	b.n	8002f4c <HAL_PCD_EP_Open+0xc4>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f003 fa8d 	bl	800645c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	da0e      	bge.n	8002f86 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	705a      	strb	r2, [r3, #1]
 8002f84:	e00e      	b.n	8002fa4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	f003 0207 	and.w	r2, r3, #7
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	f003 0307 	and.w	r3, r3, #7
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_PCD_EP_Close+0x6a>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e00e      	b.n	8002fdc <HAL_PCD_EP_Close+0x88>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fdaf 	bl	8006b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ff4:	7afb      	ldrb	r3, [r7, #11]
 8002ff6:	f003 0207 	and.w	r2, r3, #7
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	4413      	add	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2200      	movs	r2, #0
 8003022:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003024:	7afb      	ldrb	r3, [r7, #11]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	b2da      	uxtb	r2, r3
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003030:	7afb      	ldrb	r3, [r7, #11]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6979      	ldr	r1, [r7, #20]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 ff61 	bl	8006f08 <USB_EPStartXfer>
 8003046:	e005      	b.n	8003054 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6979      	ldr	r1, [r7, #20]
 800304e:	4618      	mov	r0, r3
 8003050:	f003 ff5a 	bl	8006f08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
 8003066:	460b      	mov	r3, r1
 8003068:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800306a:	78fb      	ldrb	r3, [r7, #3]
 800306c:	f003 0207 	and.w	r2, r3, #7
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003080:	681b      	ldr	r3, [r3, #0]
}
 8003082:	4618      	mov	r0, r3
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	460b      	mov	r3, r1
 800309a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2200      	movs	r2, #0
 80030d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2201      	movs	r2, #1
 80030d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030e4:	7afb      	ldrb	r3, [r7, #11]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6979      	ldr	r1, [r7, #20]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f003 ff07 	bl	8006f08 <USB_EPStartXfer>
 80030fa:	e005      	b.n	8003108 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6979      	ldr	r1, [r7, #20]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 ff00 	bl	8006f08 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3718      	adds	r7, #24
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	460b      	mov	r3, r1
 800311c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	f003 0207 	and.w	r2, r3, #7
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	429a      	cmp	r2, r3
 800312a:	d901      	bls.n	8003130 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e04c      	b.n	80031ca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	da0e      	bge.n	8003156 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003138:	78fb      	ldrb	r3, [r7, #3]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	1c5a      	adds	r2, r3, #1
 8003140:	4613      	mov	r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	4413      	add	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	705a      	strb	r2, [r3, #1]
 8003154:	e00c      	b.n	8003170 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003156:	78fa      	ldrb	r2, [r7, #3]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003188:	2b01      	cmp	r3, #1
 800318a:	d101      	bne.n	8003190 <HAL_PCD_EP_SetStall+0x7e>
 800318c:	2302      	movs	r3, #2
 800318e:	e01c      	b.n	80031ca <HAL_PCD_EP_SetStall+0xb8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68f9      	ldr	r1, [r7, #12]
 800319e:	4618      	mov	r0, r3
 80031a0:	f005 fcea 	bl	8008b78 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f005 fe0f 	bl	8008dde <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d901      	bls.n	80031f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e040      	b.n	8003272 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da0e      	bge.n	8003216 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	4413      	add	r3, r2
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	705a      	strb	r2, [r3, #1]
 8003214:	e00e      	b.n	8003234 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	f003 0207 	and.w	r2, r3, #7
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4413      	add	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b2da      	uxtb	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_PCD_EP_ClrStall+0x82>
 8003250:	2302      	movs	r3, #2
 8003252:	e00e      	b.n	8003272 <HAL_PCD_EP_ClrStall+0xa0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	4618      	mov	r0, r3
 8003264:	f005 fcd8 	bl	8008c18 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b08e      	sub	sp, #56	; 0x38
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003282:	e2ec      	b.n	800385e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800328c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800328e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800329a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 8161 	bne.w	8003566 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80032a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d152      	bne.n	8003354 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	81fb      	strh	r3, [r7, #14]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	89fb      	ldrh	r3, [r7, #14]
 80032c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3328      	adds	r3, #40	; 0x28
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	461a      	mov	r2, r3
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4413      	add	r3, r2
 80032ec:	3302      	adds	r3, #2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6812      	ldr	r2, [r2, #0]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032fa:	881b      	ldrh	r3, [r3, #0]
 80032fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	441a      	add	r2, r3
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003312:	2100      	movs	r1, #0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f007 fbb6 	bl	800aa86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 829b 	beq.w	800385e <PCD_EP_ISR_Handler+0x5e4>
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 8296 	bne.w	800385e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800333e:	b2da      	uxtb	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	b292      	uxth	r2, r2
 8003346:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003352:	e284      	b.n	800385e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003364:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	2b00      	cmp	r3, #0
 800336c:	d034      	beq.n	80033d8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003376:	b29b      	uxth	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	3306      	adds	r3, #6
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80033a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f005 fd66 	bl	8008e7e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033be:	4013      	ands	r3, r2
 80033c0:	823b      	strh	r3, [r7, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	8a3a      	ldrh	r2, [r7, #16]
 80033c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033cc:	b292      	uxth	r2, r2
 80033ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f007 fb2b 	bl	800aa2c <HAL_PCD_SetupStageCallback>
 80033d6:	e242      	b.n	800385e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033d8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f280 823e 	bge.w	800385e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033ee:	4013      	ands	r3, r2
 80033f0:	83bb      	strh	r3, [r7, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	8bba      	ldrh	r2, [r7, #28]
 80033f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033fc:	b292      	uxth	r2, r2
 80033fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003408:	b29b      	uxth	r3, r3
 800340a:	461a      	mov	r2, r3
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	4413      	add	r3, r2
 8003414:	3306      	adds	r3, #6
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d019      	beq.n	8003468 <PCD_EP_ISR_Handler+0x1ee>
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	6959      	ldr	r1, [r3, #20]
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800344c:	b29b      	uxth	r3, r3
 800344e:	f005 fd16 	bl	8008e7e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	695a      	ldr	r2, [r3, #20]
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	441a      	add	r2, r3
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003460:	2100      	movs	r1, #0
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f007 faf4 	bl	800aa50 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	b29b      	uxth	r3, r3
 8003470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003474:	2b00      	cmp	r3, #0
 8003476:	f040 81f2 	bne.w	800385e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003488:	b29b      	uxth	r3, r3
 800348a:	461a      	mov	r2, r3
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d112      	bne.n	80034c8 <PCD_EP_ISR_Handler+0x24e>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	881b      	ldrh	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	801a      	strh	r2, [r3, #0]
 80034c6:	e02f      	b.n	8003528 <PCD_EP_ISR_Handler+0x2ae>
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	691b      	ldr	r3, [r3, #16]
 80034cc:	2b3e      	cmp	r3, #62	; 0x3e
 80034ce:	d813      	bhi.n	80034f8 <PCD_EP_ISR_Handler+0x27e>
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
 80034d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f003 0301 	and.w	r3, r3, #1
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <PCD_EP_ISR_Handler+0x270>
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	3301      	adds	r3, #1
 80034e8:	633b      	str	r3, [r7, #48]	; 0x30
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	029b      	lsls	r3, r3, #10
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	801a      	strh	r2, [r3, #0]
 80034f6:	e017      	b.n	8003528 <PCD_EP_ISR_Handler+0x2ae>
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <PCD_EP_ISR_Handler+0x298>
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	3b01      	subs	r3, #1
 8003510:	633b      	str	r3, [r7, #48]	; 0x30
 8003512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003514:	b29b      	uxth	r3, r3
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	b29b      	uxth	r3, r3
 800351a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003522:	b29a      	uxth	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	881b      	ldrh	r3, [r3, #0]
 800352e:	b29b      	uxth	r3, r3
 8003530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003538:	827b      	strh	r3, [r7, #18]
 800353a:	8a7b      	ldrh	r3, [r7, #18]
 800353c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003540:	827b      	strh	r3, [r7, #18]
 8003542:	8a7b      	ldrh	r3, [r7, #18]
 8003544:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003548:	827b      	strh	r3, [r7, #18]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	8a7b      	ldrh	r3, [r7, #18]
 8003550:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003554:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	b29b      	uxth	r3, r3
 8003562:	8013      	strh	r3, [r2, #0]
 8003564:	e17b      	b.n	800385e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003578:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800357c:	2b00      	cmp	r3, #0
 800357e:	f280 80ea 	bge.w	8003756 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29a      	uxth	r2, r3
 8003594:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003598:	4013      	ands	r3, r2
 800359a:	853b      	strh	r3, [r7, #40]	; 0x28
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	461a      	mov	r2, r3
 80035a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035b0:	b292      	uxth	r2, r2
 80035b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80035b4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	4413      	add	r3, r2
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	7b1b      	ldrb	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d122      	bne.n	8003618 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035da:	b29b      	uxth	r3, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4413      	add	r3, r2
 80035e6:	3306      	adds	r3, #6
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035fa:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80035fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8087 	beq.w	8003712 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	6959      	ldr	r1, [r3, #20]
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	88da      	ldrh	r2, [r3, #6]
 8003610:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003612:	f005 fc34 	bl	8008e7e <USB_ReadPMA>
 8003616:	e07c      	b.n	8003712 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	78db      	ldrb	r3, [r3, #3]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d108      	bne.n	8003632 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003620:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003622:	461a      	mov	r2, r3
 8003624:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f927 	bl	800387a <HAL_PCD_EP_DB_Receive>
 800362c:	4603      	mov	r3, r0
 800362e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003630:	e06f      	b.n	8003712 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4413      	add	r3, r2
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003648:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364c:	847b      	strh	r3, [r7, #34]	; 0x22
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	441a      	add	r2, r3
 800365c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800365e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800366e:	b29b      	uxth	r3, r3
 8003670:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	461a      	mov	r2, r3
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4413      	add	r3, r2
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d021      	beq.n	80036d0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	3302      	adds	r3, #2
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d02a      	beq.n	8003712 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	6959      	ldr	r1, [r3, #20]
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	891a      	ldrh	r2, [r3, #8]
 80036c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ca:	f005 fbd8 	bl	8008e7e <USB_ReadPMA>
 80036ce:	e020      	b.n	8003712 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d8:	b29b      	uxth	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4413      	add	r3, r2
 80036e4:	3306      	adds	r3, #6
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036f8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003706:	6959      	ldr	r1, [r3, #20]
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	895a      	ldrh	r2, [r3, #10]
 800370c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800370e:	f005 fbb6 	bl	8008e7e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003718:	441a      	add	r2, r3
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	695a      	ldr	r2, [r3, #20]
 8003722:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003724:	441a      	add	r2, r3
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <PCD_EP_ISR_Handler+0x4c2>
 8003732:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8003734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	429a      	cmp	r2, r3
 800373a:	d206      	bcs.n	800374a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	4619      	mov	r1, r3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f007 f984 	bl	800aa50 <HAL_PCD_DataOutStageCallback>
 8003748:	e005      	b.n	8003756 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003750:	4618      	mov	r0, r3
 8003752:	f003 fbd9 	bl	8006f08 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003756:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d07e      	beq.n	800385e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003760:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003764:	1c5a      	adds	r2, r3, #1
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	461a      	mov	r2, r3
 800377a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	881b      	ldrh	r3, [r3, #0]
 8003784:	b29b      	uxth	r3, r3
 8003786:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800378a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378e:	843b      	strh	r3, [r7, #32]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	461a      	mov	r2, r3
 8003796:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	441a      	add	r2, r3
 800379e:	8c3b      	ldrh	r3, [r7, #32]
 80037a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	78db      	ldrb	r3, [r3, #3]
 80037b0:	2b03      	cmp	r3, #3
 80037b2:	d00c      	beq.n	80037ce <PCD_EP_ISR_Handler+0x554>
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	78db      	ldrb	r3, [r3, #3]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d146      	bne.n	8003852 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80037c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d141      	bne.n	8003852 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	3302      	adds	r3, #2
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037f6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	699a      	ldr	r2, [r3, #24]
 80037fc:	8bfb      	ldrh	r3, [r7, #30]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d906      	bls.n	8003810 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	8bfb      	ldrh	r3, [r7, #30]
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	619a      	str	r2, [r3, #24]
 800380e:	e002      	b.n	8003816 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	2200      	movs	r2, #0
 8003814:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f007 f92e 	bl	800aa86 <HAL_PCD_DataInStageCallback>
 800382a:	e018      	b.n	800385e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800382c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382e:	695a      	ldr	r2, [r3, #20]
 8003830:	8bfb      	ldrh	r3, [r7, #30]
 8003832:	441a      	add	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	69da      	ldr	r2, [r3, #28]
 800383c:	8bfb      	ldrh	r3, [r7, #30]
 800383e:	441a      	add	r2, r3
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800384a:	4618      	mov	r0, r3
 800384c:	f003 fb5c 	bl	8006f08 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003850:	e005      	b.n	800385e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003852:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003854:	461a      	mov	r2, r3
 8003856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f91b 	bl	8003a94 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003866:	b29b      	uxth	r3, r3
 8003868:	b21b      	sxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	f6ff ad0a 	blt.w	8003284 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3738      	adds	r7, #56	; 0x38
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b088      	sub	sp, #32
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	4613      	mov	r3, r2
 8003886:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d07e      	beq.n	8003990 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800389a:	b29b      	uxth	r3, r3
 800389c:	461a      	mov	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4413      	add	r3, r2
 80038a6:	3302      	adds	r3, #2
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	6812      	ldr	r2, [r2, #0]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038ba:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	8b7b      	ldrh	r3, [r7, #26]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d306      	bcc.n	80038d4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	699a      	ldr	r2, [r3, #24]
 80038ca:	8b7b      	ldrh	r3, [r7, #26]
 80038cc:	1ad2      	subs	r2, r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	619a      	str	r2, [r3, #24]
 80038d2:	e002      	b.n	80038da <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2200      	movs	r2, #0
 80038d8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d123      	bne.n	800392a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	461a      	mov	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4413      	add	r3, r2
 80038f0:	881b      	ldrh	r3, [r3, #0]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fc:	833b      	strh	r3, [r7, #24]
 80038fe:	8b3b      	ldrh	r3, [r7, #24]
 8003900:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003904:	833b      	strh	r3, [r7, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	441a      	add	r2, r3
 8003914:	8b3b      	ldrh	r3, [r7, #24]
 8003916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800392a:	88fb      	ldrh	r3, [r7, #6]
 800392c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01f      	beq.n	8003974 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800394a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800394e:	82fb      	strh	r3, [r7, #22]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	461a      	mov	r2, r3
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	441a      	add	r2, r3
 800395e:	8afb      	ldrh	r3, [r7, #22]
 8003960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800396c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003970:	b29b      	uxth	r3, r3
 8003972:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003974:	8b7b      	ldrh	r3, [r7, #26]
 8003976:	2b00      	cmp	r3, #0
 8003978:	f000 8087 	beq.w	8003a8a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	6959      	ldr	r1, [r3, #20]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	891a      	ldrh	r2, [r3, #8]
 8003988:	8b7b      	ldrh	r3, [r7, #26]
 800398a:	f005 fa78 	bl	8008e7e <USB_ReadPMA>
 800398e:	e07c      	b.n	8003a8a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003998:	b29b      	uxth	r3, r3
 800399a:	461a      	mov	r2, r3
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	3306      	adds	r3, #6
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	8b7b      	ldrh	r3, [r7, #26]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d306      	bcc.n	80039d2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	699a      	ldr	r2, [r3, #24]
 80039c8:	8b7b      	ldrh	r3, [r7, #26]
 80039ca:	1ad2      	subs	r2, r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	619a      	str	r2, [r3, #24]
 80039d0:	e002      	b.n	80039d8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2200      	movs	r2, #0
 80039d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d123      	bne.n	8003a28 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039fa:	83fb      	strh	r3, [r7, #30]
 80039fc:	8bfb      	ldrh	r3, [r7, #30]
 80039fe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003a02:	83fb      	strh	r3, [r7, #30]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	441a      	add	r2, r3
 8003a12:	8bfb      	ldrh	r3, [r7, #30]
 8003a14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11f      	bne.n	8003a72 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a4c:	83bb      	strh	r3, [r7, #28]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	8bbb      	ldrh	r3, [r7, #28]
 8003a5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a6a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a72:	8b7b      	ldrh	r3, [r7, #26]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	6959      	ldr	r1, [r3, #20]
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	895a      	ldrh	r2, [r3, #10]
 8003a84:	8b7b      	ldrh	r3, [r7, #26]
 8003a86:	f005 f9fa 	bl	8008e7e <USB_ReadPMA>
    }
  }

  return count;
 8003a8a:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3720      	adds	r7, #32
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b0a2      	sub	sp, #136	; 0x88
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003aa2:	88fb      	ldrh	r3, [r7, #6]
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f000 81c7 	beq.w	8003e3c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3302      	adds	r3, #2
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	6812      	ldr	r2, [r2, #0]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ad6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d907      	bls.n	8003af6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aee:	1ad2      	subs	r2, r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	619a      	str	r2, [r3, #24]
 8003af4:	e002      	b.n	8003afc <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f040 80b9 	bne.w	8003c78 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	785b      	ldrb	r3, [r3, #1]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d126      	bne.n	8003b5c <HAL_PCD_EP_DB_Transmit+0xc8>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b22:	4413      	add	r3, r2
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	011a      	lsls	r2, r3, #4
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	4413      	add	r3, r2
 8003b30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	b29b      	uxth	r3, r3
 8003b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e01a      	b.n	8003b92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	785b      	ldrb	r3, [r3, #1]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d116      	bne.n	8003b92 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	633b      	str	r3, [r7, #48]	; 0x30
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	461a      	mov	r2, r3
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	4413      	add	r3, r2
 8003b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	011a      	lsls	r2, r3, #4
 8003b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b84:	4413      	add	r3, r2
 8003b86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	2200      	movs	r2, #0
 8003b90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	623b      	str	r3, [r7, #32]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d126      	bne.n	8003bee <HAL_PCD_EP_DB_Transmit+0x15a>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	011a      	lsls	r2, r3, #4
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	881b      	ldrh	r3, [r3, #0]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	801a      	strh	r2, [r3, #0]
 8003bec:	e017      	b.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	785b      	ldrb	r3, [r3, #1]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d113      	bne.n	8003c1e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	4413      	add	r3, r2
 8003c06:	623b      	str	r3, [r7, #32]
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	011a      	lsls	r2, r3, #4
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	4413      	add	r3, r2
 8003c12:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	4619      	mov	r1, r3
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f006 ff2e 	bl	800aa86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 82d4 	beq.w	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c50:	827b      	strh	r3, [r7, #18]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	441a      	add	r2, r3
 8003c60:	8a7b      	ldrh	r3, [r7, #18]
 8003c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	8013      	strh	r3, [r2, #0]
 8003c76:	e2b2      	b.n	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d021      	beq.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	441a      	add	r2, r3
 8003cae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 8286 	bne.w	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cda:	441a      	add	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ce8:	441a      	add	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	691b      	ldr	r3, [r3, #16]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d309      	bcc.n	8003d0e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a1a      	ldr	r2, [r3, #32]
 8003d04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d06:	1ad2      	subs	r2, r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	621a      	str	r2, [r3, #32]
 8003d0c:	e015      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d107      	bne.n	8003d26 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003d16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003d1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003d24:	e009      	b.n	8003d3a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d155      	bne.n	8003dee <HAL_PCD_EP_DB_Transmit+0x35a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d56:	4413      	add	r3, r2
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	011a      	lsls	r2, r3, #4
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	4413      	add	r3, r2
 8003d64:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d68:	637b      	str	r3, [r7, #52]	; 0x34
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d112      	bne.n	8003d96 <HAL_PCD_EP_DB_Transmit+0x302>
 8003d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d72:	881b      	ldrh	r3, [r3, #0]
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d82:	881b      	ldrh	r3, [r3, #0]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d92:	801a      	strh	r2, [r3, #0]
 8003d94:	e047      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d98:	2b3e      	cmp	r3, #62	; 0x3e
 8003d9a:	d811      	bhi.n	8003dc0 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dae:	3301      	adds	r3, #1
 8003db0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	029b      	lsls	r3, r3, #10
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	801a      	strh	r2, [r3, #0]
 8003dbe:	e032      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x392>
 8003dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <HAL_PCD_EP_DB_Transmit+0x342>
 8003dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dea:	801a      	strh	r2, [r3, #0]
 8003dec:	e01b      	b.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x392>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	785b      	ldrb	r3, [r3, #1]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d117      	bne.n	8003e26 <HAL_PCD_EP_DB_Transmit+0x392>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e0a:	4413      	add	r3, r2
 8003e0c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	011a      	lsls	r2, r3, #4
 8003e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e16:	4413      	add	r3, r2
 8003e18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e24:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	6959      	ldr	r1, [r3, #20]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	891a      	ldrh	r2, [r3, #8]
 8003e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f004 ffdd 	bl	8008df4 <USB_WritePMA>
 8003e3a:	e1d0      	b.n	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3306      	adds	r3, #6
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d307      	bcc.n	8003e84 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e7c:	1ad2      	subs	r2, r2, r3
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	619a      	str	r2, [r3, #24]
 8003e82:	e002      	b.n	8003e8a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2200      	movs	r2, #0
 8003e88:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f040 80c4 	bne.w	800401c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d126      	bne.n	8003eea <HAL_PCD_EP_DB_Transmit+0x456>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb0:	4413      	add	r3, r2
 8003eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	011a      	lsls	r2, r3, #4
 8003eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed2:	801a      	strh	r2, [r3, #0]
 8003ed4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ee6:	801a      	strh	r2, [r3, #0]
 8003ee8:	e01a      	b.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d116      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	677b      	str	r3, [r7, #116]	; 0x74
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	461a      	mov	r2, r3
 8003f04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f06:	4413      	add	r3, r2
 8003f08:	677b      	str	r3, [r7, #116]	; 0x74
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	011a      	lsls	r2, r3, #4
 8003f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f12:	4413      	add	r3, r2
 8003f14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003f18:	673b      	str	r3, [r7, #112]	; 0x70
 8003f1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d12f      	bne.n	8003f8e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	461a      	mov	r2, r3
 8003f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f46:	4413      	add	r3, r2
 8003f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	011a      	lsls	r2, r3, #4
 8003f52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f56:	4413      	add	r3, r2
 8003f58:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f72:	801a      	strh	r2, [r3, #0]
 8003f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f8a:	801a      	strh	r2, [r3, #0]
 8003f8c:	e017      	b.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d113      	bne.n	8003fbe <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa4:	4413      	add	r3, r2
 8003fa6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	011a      	lsls	r2, r3, #4
 8003fae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fb8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fba:	2200      	movs	r2, #0
 8003fbc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f006 fd5e 	bl	800aa86 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fca:	88fb      	ldrh	r3, [r7, #6]
 8003fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	f040 8104 	bne.w	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ff0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	441a      	add	r2, r3
 8004002:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800400a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800400e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004016:	b29b      	uxth	r3, r3
 8004018:	8013      	strh	r3, [r2, #0]
 800401a:	e0e0      	b.n	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800401c:	88fb      	ldrh	r3, [r7, #6]
 800401e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d121      	bne.n	800406a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	b29b      	uxth	r3, r3
 8004038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800403c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004040:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	441a      	add	r2, r3
 8004052:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800405a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800405e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004066:	b29b      	uxth	r3, r3
 8004068:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004070:	2b01      	cmp	r3, #1
 8004072:	f040 80b4 	bne.w	80041de <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	695a      	ldr	r2, [r3, #20]
 800407a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800407e:	441a      	add	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	69da      	ldr	r2, [r3, #28]
 8004088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800408c:	441a      	add	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	429a      	cmp	r2, r3
 800409c:	d309      	bcc.n	80040b2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	6a1a      	ldr	r2, [r3, #32]
 80040a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040aa:	1ad2      	subs	r2, r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	621a      	str	r2, [r3, #32]
 80040b0:	e015      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80040ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80040be:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80040c8:	e009      	b.n	80040de <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2200      	movs	r2, #0
 80040d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	667b      	str	r3, [r7, #100]	; 0x64
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d155      	bne.n	8004198 <HAL_PCD_EP_DB_Transmit+0x704>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	461a      	mov	r2, r3
 80040fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004100:	4413      	add	r3, r2
 8004102:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	011a      	lsls	r2, r3, #4
 800410a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410c:	4413      	add	r3, r2
 800410e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004112:	65bb      	str	r3, [r7, #88]	; 0x58
 8004114:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004116:	2b00      	cmp	r3, #0
 8004118:	d112      	bne.n	8004140 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800411a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800411c:	881b      	ldrh	r3, [r3, #0]
 800411e:	b29b      	uxth	r3, r3
 8004120:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004124:	b29a      	uxth	r2, r3
 8004126:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004128:	801a      	strh	r2, [r3, #0]
 800412a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800412c:	881b      	ldrh	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004138:	b29a      	uxth	r2, r3
 800413a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800413c:	801a      	strh	r2, [r3, #0]
 800413e:	e044      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0x736>
 8004140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004142:	2b3e      	cmp	r3, #62	; 0x3e
 8004144:	d811      	bhi.n	800416a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	085b      	lsrs	r3, r3, #1
 800414a:	657b      	str	r3, [r7, #84]	; 0x54
 800414c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004158:	3301      	adds	r3, #1
 800415a:	657b      	str	r3, [r7, #84]	; 0x54
 800415c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800415e:	b29b      	uxth	r3, r3
 8004160:	029b      	lsls	r3, r3, #10
 8004162:	b29a      	uxth	r2, r3
 8004164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	e02f      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0x736>
 800416a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	657b      	str	r3, [r7, #84]	; 0x54
 8004170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004172:	f003 031f 	and.w	r3, r3, #31
 8004176:	2b00      	cmp	r3, #0
 8004178:	d102      	bne.n	8004180 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800417a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417c:	3b01      	subs	r3, #1
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
 8004180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004182:	b29b      	uxth	r3, r3
 8004184:	029b      	lsls	r3, r3, #10
 8004186:	b29b      	uxth	r3, r3
 8004188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800418c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004190:	b29a      	uxth	r2, r3
 8004192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004194:	801a      	strh	r2, [r3, #0]
 8004196:	e018      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0x736>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d114      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0x736>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ae:	4413      	add	r3, r2
 80041b0:	667b      	str	r3, [r7, #100]	; 0x64
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	011a      	lsls	r2, r3, #4
 80041b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ba:	4413      	add	r3, r2
 80041bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80041c0:	663b      	str	r3, [r7, #96]	; 0x60
 80041c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041c8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6818      	ldr	r0, [r3, #0]
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6959      	ldr	r1, [r3, #20]
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	895a      	ldrh	r2, [r3, #10]
 80041d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f004 fe0b 	bl	8008df4 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	881b      	ldrh	r3, [r3, #0]
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041f8:	823b      	strh	r3, [r7, #16]
 80041fa:	8a3b      	ldrh	r3, [r7, #16]
 80041fc:	f083 0310 	eor.w	r3, r3, #16
 8004200:	823b      	strh	r3, [r7, #16]
 8004202:	8a3b      	ldrh	r3, [r7, #16]
 8004204:	f083 0320 	eor.w	r3, r3, #32
 8004208:	823b      	strh	r3, [r7, #16]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	441a      	add	r2, r3
 8004218:	8a3b      	ldrh	r3, [r7, #16]
 800421a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800421e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800422a:	b29b      	uxth	r3, r3
 800422c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3788      	adds	r7, #136	; 0x88
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607b      	str	r3, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	817b      	strh	r3, [r7, #10]
 8004246:	4613      	mov	r3, r2
 8004248:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800424a:	897b      	ldrh	r3, [r7, #10]
 800424c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00b      	beq.n	800426e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	f003 0307 	and.w	r3, r3, #7
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	e009      	b.n	8004282 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800426e:	897a      	ldrh	r2, [r7, #10]
 8004270:	4613      	mov	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004282:	893b      	ldrh	r3, [r7, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	2200      	movs	r2, #0
 800428c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	b29a      	uxth	r2, r3
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	80da      	strh	r2, [r3, #6]
 8004296:	e00b      	b.n	80042b0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2201      	movs	r2, #1
 800429c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0c1b      	lsrs	r3, r3, #16
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bc80      	pop	{r7}
 80042ba:	4770      	bx	lr

080042bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e272      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8087 	beq.w	80043ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042dc:	4b92      	ldr	r3, [pc, #584]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f003 030c 	and.w	r3, r3, #12
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d00c      	beq.n	8004302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042e8:	4b8f      	ldr	r3, [pc, #572]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f003 030c 	and.w	r3, r3, #12
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d112      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
 80042f4:	4b8c      	ldr	r3, [pc, #560]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004300:	d10b      	bne.n	800431a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004302:	4b89      	ldr	r3, [pc, #548]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d06c      	beq.n	80043e8 <HAL_RCC_OscConfig+0x12c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d168      	bne.n	80043e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e24c      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004322:	d106      	bne.n	8004332 <HAL_RCC_OscConfig+0x76>
 8004324:	4b80      	ldr	r3, [pc, #512]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a7f      	ldr	r2, [pc, #508]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800432a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e02e      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10c      	bne.n	8004354 <HAL_RCC_OscConfig+0x98>
 800433a:	4b7b      	ldr	r3, [pc, #492]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a7a      	ldr	r2, [pc, #488]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b78      	ldr	r3, [pc, #480]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a77      	ldr	r2, [pc, #476]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800434c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0xbc>
 800435e:	4b72      	ldr	r3, [pc, #456]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a71      	ldr	r2, [pc, #452]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b6f      	ldr	r3, [pc, #444]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6e      	ldr	r2, [pc, #440]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0xd4>
 8004378:	4b6b      	ldr	r3, [pc, #428]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a6a      	ldr	r2, [pc, #424]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b68      	ldr	r3, [pc, #416]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a67      	ldr	r2, [pc, #412]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004398:	f7fd ffdc 	bl	8002354 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043a0:	f7fd ffd8 	bl	8002354 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b64      	cmp	r3, #100	; 0x64
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e200      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b5d      	ldr	r3, [pc, #372]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0xe4>
 80043be:	e014      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fd ffc8 	bl	8002354 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fd ffc4 	bl	8002354 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	; 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e1ec      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043da:	4b53      	ldr	r3, [pc, #332]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1f0      	bne.n	80043c8 <HAL_RCC_OscConfig+0x10c>
 80043e6:	e000      	b.n	80043ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0302 	and.w	r3, r3, #2
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d063      	beq.n	80044be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043f6:	4b4c      	ldr	r3, [pc, #304]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 030c 	and.w	r3, r3, #12
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00b      	beq.n	800441a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004402:	4b49      	ldr	r3, [pc, #292]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f003 030c 	and.w	r3, r3, #12
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11c      	bne.n	8004448 <HAL_RCC_OscConfig+0x18c>
 800440e:	4b46      	ldr	r3, [pc, #280]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d116      	bne.n	8004448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800441a:	4b43      	ldr	r3, [pc, #268]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e1c0      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004432:	4b3d      	ldr	r3, [pc, #244]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4939      	ldr	r1, [pc, #228]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004442:	4313      	orrs	r3, r2
 8004444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004446:	e03a      	b.n	80044be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004450:	4b36      	ldr	r3, [pc, #216]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004452:	2201      	movs	r2, #1
 8004454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004456:	f7fd ff7d 	bl	8002354 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fd ff79 	bl	8002354 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e1a1      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004470:	4b2d      	ldr	r3, [pc, #180]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b2a      	ldr	r3, [pc, #168]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4927      	ldr	r1, [pc, #156]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
 8004490:	e015      	b.n	80044be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b26      	ldr	r3, [pc, #152]	; (800452c <HAL_RCC_OscConfig+0x270>)
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fd ff5c 	bl	8002354 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fd ff58 	bl	8002354 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e180      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044b2:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03a      	beq.n	8004540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d019      	beq.n	8004506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d2:	4b17      	ldr	r3, [pc, #92]	; (8004530 <HAL_RCC_OscConfig+0x274>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d8:	f7fd ff3c 	bl	8002354 <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044e0:	f7fd ff38 	bl	8002354 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e160      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044f2:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0f0      	beq.n	80044e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044fe:	2001      	movs	r0, #1
 8004500:	f000 faa6 	bl	8004a50 <RCC_Delay>
 8004504:	e01c      	b.n	8004540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <HAL_RCC_OscConfig+0x274>)
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800450c:	f7fd ff22 	bl	8002354 <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004512:	e00f      	b.n	8004534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004514:	f7fd ff1e 	bl	8002354 <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b02      	cmp	r3, #2
 8004520:	d908      	bls.n	8004534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e146      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	42420000 	.word	0x42420000
 8004530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	4b92      	ldr	r3, [pc, #584]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1e9      	bne.n	8004514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0304 	and.w	r3, r3, #4
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 80a6 	beq.w	800469a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800454e:	2300      	movs	r3, #0
 8004550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004552:	4b8b      	ldr	r3, [pc, #556]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10d      	bne.n	800457a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800455e:	4b88      	ldr	r3, [pc, #544]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4a87      	ldr	r2, [pc, #540]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	61d3      	str	r3, [r2, #28]
 800456a:	4b85      	ldr	r3, [pc, #532]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	60bb      	str	r3, [r7, #8]
 8004574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457a:	4b82      	ldr	r3, [pc, #520]	; (8004784 <HAL_RCC_OscConfig+0x4c8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004582:	2b00      	cmp	r3, #0
 8004584:	d118      	bne.n	80045b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004586:	4b7f      	ldr	r3, [pc, #508]	; (8004784 <HAL_RCC_OscConfig+0x4c8>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a7e      	ldr	r2, [pc, #504]	; (8004784 <HAL_RCC_OscConfig+0x4c8>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004592:	f7fd fedf 	bl	8002354 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800459a:	f7fd fedb 	bl	8002354 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b64      	cmp	r3, #100	; 0x64
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e103      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ac:	4b75      	ldr	r3, [pc, #468]	; (8004784 <HAL_RCC_OscConfig+0x4c8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d106      	bne.n	80045ce <HAL_RCC_OscConfig+0x312>
 80045c0:	4b6f      	ldr	r3, [pc, #444]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a6e      	ldr	r2, [pc, #440]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	e02d      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10c      	bne.n	80045f0 <HAL_RCC_OscConfig+0x334>
 80045d6:	4b6a      	ldr	r3, [pc, #424]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	4a69      	ldr	r2, [pc, #420]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	f023 0301 	bic.w	r3, r3, #1
 80045e0:	6213      	str	r3, [r2, #32]
 80045e2:	4b67      	ldr	r3, [pc, #412]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	4a66      	ldr	r2, [pc, #408]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	f023 0304 	bic.w	r3, r3, #4
 80045ec:	6213      	str	r3, [r2, #32]
 80045ee:	e01c      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	2b05      	cmp	r3, #5
 80045f6:	d10c      	bne.n	8004612 <HAL_RCC_OscConfig+0x356>
 80045f8:	4b61      	ldr	r3, [pc, #388]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	4a60      	ldr	r2, [pc, #384]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	f043 0304 	orr.w	r3, r3, #4
 8004602:	6213      	str	r3, [r2, #32]
 8004604:	4b5e      	ldr	r3, [pc, #376]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4a5d      	ldr	r2, [pc, #372]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 800460a:	f043 0301 	orr.w	r3, r3, #1
 800460e:	6213      	str	r3, [r2, #32]
 8004610:	e00b      	b.n	800462a <HAL_RCC_OscConfig+0x36e>
 8004612:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4a5a      	ldr	r2, [pc, #360]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	6213      	str	r3, [r2, #32]
 800461e:	4b58      	ldr	r3, [pc, #352]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	4a57      	ldr	r2, [pc, #348]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	f023 0304 	bic.w	r3, r3, #4
 8004628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d015      	beq.n	800465e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004632:	f7fd fe8f 	bl	8002354 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004638:	e00a      	b.n	8004650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fd fe8b 	bl	8002354 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e0b1      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004650:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d0ee      	beq.n	800463a <HAL_RCC_OscConfig+0x37e>
 800465c:	e014      	b.n	8004688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800465e:	f7fd fe79 	bl	8002354 <HAL_GetTick>
 8004662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004664:	e00a      	b.n	800467c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004666:	f7fd fe75 	bl	8002354 <HAL_GetTick>
 800466a:	4602      	mov	r2, r0
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	1ad3      	subs	r3, r2, r3
 8004670:	f241 3288 	movw	r2, #5000	; 0x1388
 8004674:	4293      	cmp	r3, r2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e09b      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467c:	4b40      	ldr	r3, [pc, #256]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 800467e:	6a1b      	ldr	r3, [r3, #32]
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ee      	bne.n	8004666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004688:	7dfb      	ldrb	r3, [r7, #23]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800468e:	4b3c      	ldr	r3, [pc, #240]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4a3b      	ldr	r2, [pc, #236]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8087 	beq.w	80047b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046a4:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d061      	beq.n	8004774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d146      	bne.n	8004746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046be:	f7fd fe49 	bl	8002354 <HAL_GetTick>
 80046c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046c4:	e008      	b.n	80046d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c6:	f7fd fe45 	bl	8002354 <HAL_GetTick>
 80046ca:	4602      	mov	r2, r0
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d901      	bls.n	80046d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e06d      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046d8:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f0      	bne.n	80046c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6a1b      	ldr	r3, [r3, #32]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ec:	d108      	bne.n	8004700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	4921      	ldr	r1, [pc, #132]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004700:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a19      	ldr	r1, [r3, #32]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	430b      	orrs	r3, r1
 8004712:	491b      	ldr	r1, [pc, #108]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004718:	4b1b      	ldr	r3, [pc, #108]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fd fe19 	bl	8002354 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004726:	f7fd fe15 	bl	8002354 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e03d      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004738:	4b11      	ldr	r3, [pc, #68]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x46a>
 8004744:	e035      	b.n	80047b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_RCC_OscConfig+0x4cc>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fd fe02 	bl	8002354 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004754:	f7fd fdfe 	bl	8002354 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e026      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <HAL_RCC_OscConfig+0x4c4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x498>
 8004772:	e01e      	b.n	80047b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e019      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
 8004780:	40021000 	.word	0x40021000
 8004784:	40007000 	.word	0x40007000
 8004788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800478c:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_RCC_OscConfig+0x500>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	429a      	cmp	r2, r3
 800479e:	d106      	bne.n	80047ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d001      	beq.n	80047b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40021000 	.word	0x40021000

080047c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0d0      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d910      	bls.n	8004804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	4965      	ldr	r1, [pc, #404]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b63      	ldr	r3, [pc, #396]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800481c:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	4a58      	ldr	r2, [pc, #352]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004834:	4b53      	ldr	r3, [pc, #332]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	4a52      	ldr	r2, [pc, #328]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800483e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004840:	4b50      	ldr	r3, [pc, #320]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d040      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	4b47      	ldr	r3, [pc, #284]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d115      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d107      	bne.n	800488e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800487e:	4b41      	ldr	r3, [pc, #260]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d109      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e073      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800488e:	4b3d      	ldr	r3, [pc, #244]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e06b      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f023 0203 	bic.w	r2, r3, #3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4936      	ldr	r1, [pc, #216]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048b0:	f7fd fd50 	bl	8002354 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b6:	e00a      	b.n	80048ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b8:	f7fd fd4c 	bl	8002354 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e053      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ce:	4b2d      	ldr	r3, [pc, #180]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 020c 	and.w	r2, r3, #12
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	429a      	cmp	r2, r3
 80048de:	d1eb      	bne.n	80048b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048e0:	4b27      	ldr	r3, [pc, #156]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d210      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ee:	4b24      	ldr	r3, [pc, #144]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 0207 	bic.w	r2, r3, #7
 80048f6:	4922      	ldr	r1, [pc, #136]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048fe:	4b20      	ldr	r3, [pc, #128]	; (8004980 <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800491c:	4b19      	ldr	r3, [pc, #100]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 800494a:	4313      	orrs	r3, r2
 800494c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <HAL_RCC_ClockConfig+0x1c4>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	490a      	ldr	r1, [pc, #40]	; (8004988 <HAL_RCC_ClockConfig+0x1c8>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	; (800498c <HAL_RCC_ClockConfig+0x1cc>)
 8004968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800496a:	4b09      	ldr	r3, [pc, #36]	; (8004990 <HAL_RCC_ClockConfig+0x1d0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fd fcae 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40022000 	.word	0x40022000
 8004984:	40021000 	.word	0x40021000
 8004988:	0800cc64 	.word	0x0800cc64
 800498c:	2000001c 	.word	0x2000001c
 8004990:	20000020 	.word	0x20000020

08004994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b490      	push	{r4, r7}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xac>)
 800499c:	1d3c      	adds	r4, r7, #4
 800499e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049a4:	f240 2301 	movw	r3, #513	; 0x201
 80049a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x46>
 80049d2:	e02b      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049d4:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049d6:	623b      	str	r3, [r7, #32]
      break;
 80049d8:	e02b      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	0c9b      	lsrs	r3, r3, #18
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	3328      	adds	r3, #40	; 0x28
 80049e4:	443b      	add	r3, r7
 80049e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0c5b      	lsrs	r3, r3, #17
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	3328      	adds	r3, #40	; 0x28
 8004a02:	443b      	add	r3, r7
 8004a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a0e:	fb03 f202 	mul.w	r2, r3, r2
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e004      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a2e:	623b      	str	r3, [r7, #32]
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6a3b      	ldr	r3, [r7, #32]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc90      	pop	{r4, r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	0800cc10 	.word	0x0800cc10
 8004a44:	40021000 	.word	0x40021000
 8004a48:	007a1200 	.word	0x007a1200
 8004a4c:	003d0900 	.word	0x003d0900

08004a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a58:	4b0a      	ldr	r3, [pc, #40]	; (8004a84 <RCC_Delay+0x34>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0a      	ldr	r2, [pc, #40]	; (8004a88 <RCC_Delay+0x38>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	0a5b      	lsrs	r3, r3, #9
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	fb02 f303 	mul.w	r3, r2, r3
 8004a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a6c:	bf00      	nop
  }
  while (Delay --);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1e5a      	subs	r2, r3, #1
 8004a72:	60fa      	str	r2, [r7, #12]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1f9      	bne.n	8004a6c <RCC_Delay+0x1c>
}
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bc80      	pop	{r7}
 8004a82:	4770      	bx	lr
 8004a84:	2000001c 	.word	0x2000001c
 8004a88:	10624dd3 	.word	0x10624dd3

08004a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d07d      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aac:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10d      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab8:	4b4c      	ldr	r3, [pc, #304]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	4a4b      	ldr	r2, [pc, #300]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac2:	61d3      	str	r3, [r2, #28]
 8004ac4:	4b49      	ldr	r3, [pc, #292]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d118      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ae0:	4b43      	ldr	r3, [pc, #268]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a42      	ldr	r2, [pc, #264]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aec:	f7fd fc32 	bl	8002354 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af2:	e008      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af4:	f7fd fc2e 	bl	8002354 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b64      	cmp	r3, #100	; 0x64
 8004b00:	d901      	bls.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e06d      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b06:	4b3a      	ldr	r3, [pc, #232]	; (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0f0      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b12:	4b36      	ldr	r3, [pc, #216]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02e      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d027      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b30:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b38:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b3a:	4b2e      	ldr	r3, [pc, #184]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b40:	4b2c      	ldr	r3, [pc, #176]	; (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b46:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d014      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b56:	f7fd fbfd 	bl	8002354 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fd fbf9 	bl	8002354 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e036      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ee      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b80:	4b1a      	ldr	r3, [pc, #104]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4917      	ldr	r1, [pc, #92]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b92:	7dfb      	ldrb	r3, [r7, #23]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d105      	bne.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b98:	4b14      	ldr	r3, [pc, #80]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb0:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	490b      	ldr	r1, [pc, #44]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	4904      	ldr	r1, [pc, #16]	; (8004bec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	40007000 	.word	0x40007000
 8004bf4:	42420440 	.word	0x42420440

08004bf8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e076      	b.n	8004cf8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d108      	bne.n	8004c24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c1a:	d009      	beq.n	8004c30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	61da      	str	r2, [r3, #28]
 8004c22:	e005      	b.n	8004c30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fd f9d6 	bl	8001ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2202      	movs	r2, #2
 8004c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c66:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	699b      	ldr	r3, [r3, #24]
 8004c9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	ea42 0103 	orr.w	r1, r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	0c1a      	lsrs	r2, r3, #16
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f002 0204 	and.w	r2, r2, #4
 8004cd6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ce6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b088      	sub	sp, #32
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_SPI_Transmit+0x22>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e126      	b.n	8004f70 <HAL_SPI_Transmit+0x270>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d2a:	f7fd fb13 	bl	8002354 <HAL_GetTick>
 8004d2e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d30:	88fb      	ldrh	r3, [r7, #6]
 8004d32:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d002      	beq.n	8004d46 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d40:	2302      	movs	r3, #2
 8004d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d44:	e10b      	b.n	8004f5e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Transmit+0x52>
 8004d4c:	88fb      	ldrh	r3, [r7, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d56:	e102      	b.n	8004f5e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d9e:	d10f      	bne.n	8004dc0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dbe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d007      	beq.n	8004dde <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de6:	d14b      	bne.n	8004e80 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_Transmit+0xf6>
 8004df0:	8afb      	ldrh	r3, [r7, #22]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d13e      	bne.n	8004e74 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e1a:	e02b      	b.n	8004e74 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d112      	bne.n	8004e50 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	881a      	ldrh	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	1c9a      	adds	r2, r3, #2
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e4e:	e011      	b.n	8004e74 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e50:	f7fd fa80 	bl	8002354 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d803      	bhi.n	8004e68 <HAL_SPI_Transmit+0x168>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e66:	d102      	bne.n	8004e6e <HAL_SPI_Transmit+0x16e>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d102      	bne.n	8004e74 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e72:	e074      	b.n	8004f5e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1ce      	bne.n	8004e1c <HAL_SPI_Transmit+0x11c>
 8004e7e:	e04c      	b.n	8004f1a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_SPI_Transmit+0x18e>
 8004e88:	8afb      	ldrh	r3, [r7, #22]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d140      	bne.n	8004f10 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	330c      	adds	r3, #12
 8004e98:	7812      	ldrb	r2, [r2, #0]
 8004e9a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	3b01      	subs	r3, #1
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004eb4:	e02c      	b.n	8004f10 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 0302 	and.w	r3, r3, #2
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d113      	bne.n	8004eec <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004eea:	e011      	b.n	8004f10 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eec:	f7fd fa32 	bl	8002354 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d803      	bhi.n	8004f04 <HAL_SPI_Transmit+0x204>
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f02:	d102      	bne.n	8004f0a <HAL_SPI_Transmit+0x20a>
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d102      	bne.n	8004f10 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f0e:	e026      	b.n	8004f5e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1cd      	bne.n	8004eb6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa62 	bl	80053e8 <SPI_EndRxTxTransaction>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d002      	beq.n	8004f30 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	613b      	str	r3, [r7, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d002      	beq.n	8004f5c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	77fb      	strb	r3, [r7, #31]
 8004f5a:	e000      	b.n	8004f5e <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f5c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3720      	adds	r7, #32
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08c      	sub	sp, #48	; 0x30
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	60b9      	str	r1, [r7, #8]
 8004f82:	607a      	str	r2, [r7, #4]
 8004f84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f86:	2301      	movs	r3, #1
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d101      	bne.n	8004f9e <HAL_SPI_TransmitReceive+0x26>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e18a      	b.n	80052b4 <HAL_SPI_TransmitReceive+0x33c>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa6:	f7fd f9d5 	bl	8002354 <HAL_GetTick>
 8004faa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d00f      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x70>
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fce:	d107      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d103      	bne.n	8004fe0 <HAL_SPI_TransmitReceive+0x68>
 8004fd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d003      	beq.n	8004fe8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fe6:	e15b      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x82>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x82>
 8004ff4:	887b      	ldrh	r3, [r7, #2]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005000:	e14e      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b04      	cmp	r3, #4
 800500c:	d003      	beq.n	8005016 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2205      	movs	r2, #5
 8005012:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	887a      	ldrh	r2, [r7, #2]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	887a      	ldrh	r2, [r7, #2]
 8005038:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	887a      	ldrh	r2, [r7, #2]
 800503e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b40      	cmp	r3, #64	; 0x40
 8005058:	d007      	beq.n	800506a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005068:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005072:	d178      	bne.n	8005166 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <HAL_SPI_TransmitReceive+0x10a>
 800507c:	8b7b      	ldrh	r3, [r7, #26]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d166      	bne.n	8005150 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	881a      	ldrh	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a6:	e053      	b.n	8005150 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d11b      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x176>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d016      	beq.n	80050ee <HAL_SPI_TransmitReceive+0x176>
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d113      	bne.n	80050ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ca:	881a      	ldrh	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d6:	1c9a      	adds	r2, r3, #2
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	3b01      	subs	r3, #1
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d119      	bne.n	8005130 <HAL_SPI_TransmitReceive+0x1b8>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d014      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005110:	b292      	uxth	r2, r2
 8005112:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	1c9a      	adds	r2, r3, #2
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800512c:	2301      	movs	r3, #1
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005130:	f7fd f910 	bl	8002354 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800513c:	429a      	cmp	r2, r3
 800513e:	d807      	bhi.n	8005150 <HAL_SPI_TransmitReceive+0x1d8>
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005146:	d003      	beq.n	8005150 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800514e:	e0a7      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005154:	b29b      	uxth	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1a6      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x130>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1a1      	bne.n	80050a8 <HAL_SPI_TransmitReceive+0x130>
 8005164:	e07c      	b.n	8005260 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_TransmitReceive+0x1fc>
 800516e:	8b7b      	ldrh	r3, [r7, #26]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d16b      	bne.n	800524c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	330c      	adds	r3, #12
 800517e:	7812      	ldrb	r2, [r2, #0]
 8005180:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005186:	1c5a      	adds	r2, r3, #1
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800519a:	e057      	b.n	800524c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d11c      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x26c>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d017      	beq.n	80051e4 <HAL_SPI_TransmitReceive+0x26c>
 80051b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d114      	bne.n	80051e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	7812      	ldrb	r2, [r2, #0]
 80051c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	3b01      	subs	r3, #1
 80051da:	b29a      	uxth	r2, r3
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d119      	bne.n	8005226 <HAL_SPI_TransmitReceive+0x2ae>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d014      	beq.n	8005226 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005222:	2301      	movs	r3, #1
 8005224:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005226:	f7fd f895 	bl	8002354 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005232:	429a      	cmp	r2, r3
 8005234:	d803      	bhi.n	800523e <HAL_SPI_TransmitReceive+0x2c6>
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523c:	d102      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x2cc>
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800524a:	e029      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1a2      	bne.n	800519c <HAL_SPI_TransmitReceive+0x224>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800525a:	b29b      	uxth	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d19d      	bne.n	800519c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005262:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f8bf 	bl	80053e8 <SPI_EndRxTxTransaction>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800527c:	e010      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	617b      	str	r3, [r7, #20]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	e000      	b.n	80052a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800529e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3730      	adds	r7, #48	; 0x30
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052ca:	b2db      	uxtb	r3, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bc80      	pop	{r7}
 80052d4:	4770      	bx	lr
	...

080052d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b088      	sub	sp, #32
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052e8:	f7fd f834 	bl	8002354 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	4413      	add	r3, r2
 80052f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052f8:	f7fd f82c 	bl	8002354 <HAL_GetTick>
 80052fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052fe:	4b39      	ldr	r3, [pc, #228]	; (80053e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	015b      	lsls	r3, r3, #5
 8005304:	0d1b      	lsrs	r3, r3, #20
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	fb02 f303 	mul.w	r3, r2, r3
 800530c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800530e:	e054      	b.n	80053ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005316:	d050      	beq.n	80053ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005318:	f7fd f81c 	bl	8002354 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	429a      	cmp	r2, r3
 8005326:	d902      	bls.n	800532e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d13d      	bne.n	80053aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800533c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005346:	d111      	bne.n	800536c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005350:	d004      	beq.n	800535c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800535a:	d107      	bne.n	800536c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800536a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005374:	d10f      	bne.n	8005396 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005394:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e017      	b.n	80053da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4013      	ands	r3, r2
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	bf0c      	ite	eq
 80053ca:	2301      	moveq	r3, #1
 80053cc:	2300      	movne	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	461a      	mov	r2, r3
 80053d2:	79fb      	ldrb	r3, [r7, #7]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d19b      	bne.n	8005310 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3720      	adds	r7, #32
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	2000001c 	.word	0x2000001c

080053e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2180      	movs	r1, #128	; 0x80
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f7ff ff6a 	bl	80052d8 <SPI_WaitFlagStateUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800540e:	f043 0220 	orr.w	r2, r3, #32
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e000      	b.n	800541c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e041      	b.n	80054ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc fe20 	bl	8002090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f000 fc28 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d001      	beq.n	80054dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e03a      	b.n	8005552 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_TIM_Base_Start_IT+0x98>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00e      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x58>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005506:	d009      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a14      	ldr	r2, [pc, #80]	; (8005560 <HAL_TIM_Base_Start_IT+0x9c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d004      	beq.n	800551c <HAL_TIM_Base_Start_IT+0x58>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <HAL_TIM_Base_Start_IT+0xa0>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d111      	bne.n	8005540 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b06      	cmp	r3, #6
 800552c:	d010      	beq.n	8005550 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f042 0201 	orr.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	e007      	b.n	8005550 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0201 	orr.w	r2, r2, #1
 800554e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	bc80      	pop	{r7}
 800555a:	4770      	bx	lr
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800

08005568 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e041      	b.n	80055fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d106      	bne.n	8005594 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f839 	bl	8005606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3304      	adds	r3, #4
 80055a4:	4619      	mov	r1, r3
 80055a6:	4610      	mov	r0, r2
 80055a8:	f000 fb86 	bl	8005cb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d109      	bne.n	800563c <HAL_TIM_PWM_Start+0x24>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	e022      	b.n	8005682 <HAL_TIM_PWM_Start+0x6a>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d109      	bne.n	8005656 <HAL_TIM_PWM_Start+0x3e>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b01      	cmp	r3, #1
 800564c:	bf14      	ite	ne
 800564e:	2301      	movne	r3, #1
 8005650:	2300      	moveq	r3, #0
 8005652:	b2db      	uxtb	r3, r3
 8005654:	e015      	b.n	8005682 <HAL_TIM_PWM_Start+0x6a>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d109      	bne.n	8005670 <HAL_TIM_PWM_Start+0x58>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b01      	cmp	r3, #1
 8005666:	bf14      	ite	ne
 8005668:	2301      	movne	r3, #1
 800566a:	2300      	moveq	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	e008      	b.n	8005682 <HAL_TIM_PWM_Start+0x6a>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e05e      	b.n	8005748 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d104      	bne.n	800569a <HAL_TIM_PWM_Start+0x82>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005698:	e013      	b.n	80056c2 <HAL_TIM_PWM_Start+0xaa>
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b04      	cmp	r3, #4
 800569e:	d104      	bne.n	80056aa <HAL_TIM_PWM_Start+0x92>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2202      	movs	r2, #2
 80056a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056a8:	e00b      	b.n	80056c2 <HAL_TIM_PWM_Start+0xaa>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d104      	bne.n	80056ba <HAL_TIM_PWM_Start+0xa2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056b8:	e003      	b.n	80056c2 <HAL_TIM_PWM_Start+0xaa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fd74 	bl	80061b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1e      	ldr	r2, [pc, #120]	; (8005750 <HAL_TIM_PWM_Start+0x138>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d107      	bne.n	80056ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_TIM_PWM_Start+0x138>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d00e      	beq.n	8005712 <HAL_TIM_PWM_Start+0xfa>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d009      	beq.n	8005712 <HAL_TIM_PWM_Start+0xfa>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a14      	ldr	r2, [pc, #80]	; (8005754 <HAL_TIM_PWM_Start+0x13c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d004      	beq.n	8005712 <HAL_TIM_PWM_Start+0xfa>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a12      	ldr	r2, [pc, #72]	; (8005758 <HAL_TIM_PWM_Start+0x140>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d111      	bne.n	8005736 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b06      	cmp	r3, #6
 8005722:	d010      	beq.n	8005746 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005734:	e007      	b.n	8005746 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40012c00 	.word	0x40012c00
 8005754:	40000400 	.word	0x40000400
 8005758:	40000800 	.word	0x40000800

0800575c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b02      	cmp	r3, #2
 8005770:	d122      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f003 0302 	and.w	r3, r3, #2
 800577c:	2b02      	cmp	r3, #2
 800577e:	d11b      	bne.n	80057b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0202 	mvn.w	r2, #2
 8005788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fa6f 	bl	8005c82 <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa62 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fa71 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0304 	and.w	r3, r3, #4
 80057c2:	2b04      	cmp	r3, #4
 80057c4:	d122      	bne.n	800580c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	f003 0304 	and.w	r3, r3, #4
 80057d0:	2b04      	cmp	r3, #4
 80057d2:	d11b      	bne.n	800580c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0204 	mvn.w	r2, #4
 80057dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fa45 	bl	8005c82 <HAL_TIM_IC_CaptureCallback>
 80057f8:	e005      	b.n	8005806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa38 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa47 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b08      	cmp	r3, #8
 8005818:	d122      	bne.n	8005860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0308 	and.w	r3, r3, #8
 8005824:	2b08      	cmp	r3, #8
 8005826:	d11b      	bne.n	8005860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0208 	mvn.w	r2, #8
 8005830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2204      	movs	r2, #4
 8005836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 fa1b 	bl	8005c82 <HAL_TIM_IC_CaptureCallback>
 800584c:	e005      	b.n	800585a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa0e 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fa1d 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	691b      	ldr	r3, [r3, #16]
 8005866:	f003 0310 	and.w	r3, r3, #16
 800586a:	2b10      	cmp	r3, #16
 800586c:	d122      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f003 0310 	and.w	r3, r3, #16
 8005878:	2b10      	cmp	r3, #16
 800587a:	d11b      	bne.n	80058b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f06f 0210 	mvn.w	r2, #16
 8005884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2208      	movs	r2, #8
 800588a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	69db      	ldr	r3, [r3, #28]
 8005892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9f1 	bl	8005c82 <HAL_TIM_IC_CaptureCallback>
 80058a0:	e005      	b.n	80058ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9e4 	bl	8005c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f9f3 	bl	8005c94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0301 	and.w	r3, r3, #1
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d10e      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f003 0301 	and.w	r3, r3, #1
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d107      	bne.n	80058e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f06f 0201 	mvn.w	r2, #1
 80058d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f7fb ff88 	bl	80017f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d10e      	bne.n	800590c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f8:	2b80      	cmp	r3, #128	; 0x80
 80058fa:	d107      	bne.n	800590c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fd32 	bl	8006370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d10e      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005924:	2b40      	cmp	r3, #64	; 0x40
 8005926:	d107      	bne.n	8005938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f000 f9b7 	bl	8005ca6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0320 	and.w	r3, r3, #32
 8005942:	2b20      	cmp	r3, #32
 8005944:	d10e      	bne.n	8005964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b20      	cmp	r3, #32
 8005952:	d107      	bne.n	8005964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f06f 0220 	mvn.w	r2, #32
 800595c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 fcfd 	bl	800635e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597e:	2b01      	cmp	r3, #1
 8005980:	d101      	bne.n	8005986 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005982:	2302      	movs	r3, #2
 8005984:	e0ac      	b.n	8005ae0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b0c      	cmp	r3, #12
 8005992:	f200 809f 	bhi.w	8005ad4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005996:	a201      	add	r2, pc, #4	; (adr r2, 800599c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800599c:	080059d1 	.word	0x080059d1
 80059a0:	08005ad5 	.word	0x08005ad5
 80059a4:	08005ad5 	.word	0x08005ad5
 80059a8:	08005ad5 	.word	0x08005ad5
 80059ac:	08005a11 	.word	0x08005a11
 80059b0:	08005ad5 	.word	0x08005ad5
 80059b4:	08005ad5 	.word	0x08005ad5
 80059b8:	08005ad5 	.word	0x08005ad5
 80059bc:	08005a53 	.word	0x08005a53
 80059c0:	08005ad5 	.word	0x08005ad5
 80059c4:	08005ad5 	.word	0x08005ad5
 80059c8:	08005ad5 	.word	0x08005ad5
 80059cc:	08005a93 	.word	0x08005a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 f9d0 	bl	8005d7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0208 	orr.w	r2, r2, #8
 80059ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0204 	bic.w	r2, r2, #4
 80059fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6999      	ldr	r1, [r3, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	691a      	ldr	r2, [r3, #16]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	619a      	str	r2, [r3, #24]
      break;
 8005a0e:	e062      	b.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fa16 	bl	8005e48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6999      	ldr	r1, [r3, #24]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	021a      	lsls	r2, r3, #8
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	619a      	str	r2, [r3, #24]
      break;
 8005a50:	e041      	b.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68b9      	ldr	r1, [r7, #8]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fa5f 	bl	8005f1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69da      	ldr	r2, [r3, #28]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0208 	orr.w	r2, r2, #8
 8005a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0204 	bic.w	r2, r2, #4
 8005a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69d9      	ldr	r1, [r3, #28]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	61da      	str	r2, [r3, #28]
      break;
 8005a90:	e021      	b.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 faa9 	bl	8005ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005aac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005abc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69d9      	ldr	r1, [r3, #28]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	021a      	lsls	r2, r3, #8
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	61da      	str	r2, [r3, #28]
      break;
 8005ad2:	e000      	b.n	8005ad6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d101      	bne.n	8005b00 <HAL_TIM_ConfigClockSource+0x18>
 8005afc:	2302      	movs	r3, #2
 8005afe:	e0b3      	b.n	8005c68 <HAL_TIM_ConfigClockSource+0x180>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b38:	d03e      	beq.n	8005bb8 <HAL_TIM_ConfigClockSource+0xd0>
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b3e:	f200 8087 	bhi.w	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b46:	f000 8085 	beq.w	8005c54 <HAL_TIM_ConfigClockSource+0x16c>
 8005b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b4e:	d87f      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b50:	2b70      	cmp	r3, #112	; 0x70
 8005b52:	d01a      	beq.n	8005b8a <HAL_TIM_ConfigClockSource+0xa2>
 8005b54:	2b70      	cmp	r3, #112	; 0x70
 8005b56:	d87b      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b58:	2b60      	cmp	r3, #96	; 0x60
 8005b5a:	d050      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x116>
 8005b5c:	2b60      	cmp	r3, #96	; 0x60
 8005b5e:	d877      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b60:	2b50      	cmp	r3, #80	; 0x50
 8005b62:	d03c      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0xf6>
 8005b64:	2b50      	cmp	r3, #80	; 0x50
 8005b66:	d873      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b68:	2b40      	cmp	r3, #64	; 0x40
 8005b6a:	d058      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x136>
 8005b6c:	2b40      	cmp	r3, #64	; 0x40
 8005b6e:	d86f      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b70:	2b30      	cmp	r3, #48	; 0x30
 8005b72:	d064      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x156>
 8005b74:	2b30      	cmp	r3, #48	; 0x30
 8005b76:	d86b      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b78:	2b20      	cmp	r3, #32
 8005b7a:	d060      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x156>
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d867      	bhi.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d05c      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x156>
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d05a      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b88:	e062      	b.n	8005c50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	6899      	ldr	r1, [r3, #8]
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f000 faee 	bl	800617a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	609a      	str	r2, [r3, #8]
      break;
 8005bb6:	e04e      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	6899      	ldr	r1, [r3, #8]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f000 fad7 	bl	800617a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bda:	609a      	str	r2, [r3, #8]
      break;
 8005bdc:	e03b      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fa4e 	bl	800608c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2150      	movs	r1, #80	; 0x50
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 faa5 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e02b      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 fa6c 	bl	80060e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2160      	movs	r1, #96	; 0x60
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fa95 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e01b      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 fa2e 	bl	800608c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2140      	movs	r1, #64	; 0x40
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fa85 	bl	8006146 <TIM_ITRx_SetConfig>
      break;
 8005c3c:	e00b      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4619      	mov	r1, r3
 8005c48:	4610      	mov	r0, r2
 8005c4a:	f000 fa7c 	bl	8006146 <TIM_ITRx_SetConfig>
        break;
 8005c4e:	e002      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bc80      	pop	{r7}
 8005c92:	4770      	bx	lr

08005c94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c9c:	bf00      	nop
 8005c9e:	370c      	adds	r7, #12
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bc80      	pop	{r7}
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a29      	ldr	r2, [pc, #164]	; (8005d70 <TIM_Base_SetConfig+0xb8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x30>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x30>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a26      	ldr	r2, [pc, #152]	; (8005d74 <TIM_Base_SetConfig+0xbc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x30>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a25      	ldr	r2, [pc, #148]	; (8005d78 <TIM_Base_SetConfig+0xc0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a1c      	ldr	r2, [pc, #112]	; (8005d70 <TIM_Base_SetConfig+0xb8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d00b      	beq.n	8005d1a <TIM_Base_SetConfig+0x62>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d08:	d007      	beq.n	8005d1a <TIM_Base_SetConfig+0x62>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <TIM_Base_SetConfig+0xbc>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d003      	beq.n	8005d1a <TIM_Base_SetConfig+0x62>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a18      	ldr	r2, [pc, #96]	; (8005d78 <TIM_Base_SetConfig+0xc0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d108      	bne.n	8005d2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a07      	ldr	r2, [pc, #28]	; (8005d70 <TIM_Base_SetConfig+0xb8>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bc80      	pop	{r7}
 8005d6e:	4770      	bx	lr
 8005d70:	40012c00 	.word	0x40012c00
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800

08005d7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f023 0302 	bic.w	r3, r3, #2
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a1c      	ldr	r2, [pc, #112]	; (8005e44 <TIM_OC1_SetConfig+0xc8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d10c      	bne.n	8005df2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f023 0308 	bic.w	r3, r3, #8
 8005dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f023 0304 	bic.w	r3, r3, #4
 8005df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a13      	ldr	r2, [pc, #76]	; (8005e44 <TIM_OC1_SetConfig+0xc8>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d111      	bne.n	8005e1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685a      	ldr	r2, [r3, #4]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	621a      	str	r2, [r3, #32]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bc80      	pop	{r7}
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00

08005e48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b087      	sub	sp, #28
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	f023 0210 	bic.w	r2, r3, #16
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a1b      	ldr	r3, [r3, #32]
 8005e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	021b      	lsls	r3, r3, #8
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f023 0320 	bic.w	r3, r3, #32
 8005e92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	011b      	lsls	r3, r3, #4
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <TIM_OC2_SetConfig+0xd0>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10d      	bne.n	8005ec4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	011b      	lsls	r3, r3, #4
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a14      	ldr	r2, [pc, #80]	; (8005f18 <TIM_OC2_SetConfig+0xd0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d113      	bne.n	8005ef4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	693a      	ldr	r2, [r7, #16]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr
 8005f18:	40012c00 	.word	0x40012c00

08005f1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f023 0303 	bic.w	r3, r3, #3
 8005f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a1d      	ldr	r2, [pc, #116]	; (8005fec <TIM_OC3_SetConfig+0xd0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d10d      	bne.n	8005f96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a14      	ldr	r2, [pc, #80]	; (8005fec <TIM_OC3_SetConfig+0xd0>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d113      	bne.n	8005fc6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	621a      	str	r2, [r3, #32]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	40012c00 	.word	0x40012c00

08005ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	021b      	lsls	r3, r3, #8
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800603a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a0f      	ldr	r2, [pc, #60]	; (8006088 <TIM_OC4_SetConfig+0x98>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d109      	bne.n	8006064 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006056:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	695b      	ldr	r3, [r3, #20]
 800605c:	019b      	lsls	r3, r3, #6
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	4313      	orrs	r3, r2
 8006062:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	621a      	str	r2, [r3, #32]
}
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr
 8006088:	40012c00 	.word	0x40012c00

0800608c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f023 0201 	bic.w	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f023 030a 	bic.w	r3, r3, #10
 80060c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	621a      	str	r2, [r3, #32]
}
 80060de:	bf00      	nop
 80060e0:	371c      	adds	r7, #28
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bc80      	pop	{r7}
 80060e6:	4770      	bx	lr

080060e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b087      	sub	sp, #28
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6a1b      	ldr	r3, [r3, #32]
 80060f8:	f023 0210 	bic.w	r2, r3, #16
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006112:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	031b      	lsls	r3, r3, #12
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006124:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	bc80      	pop	{r7}
 8006144:	4770      	bx	lr

08006146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006146:	b480      	push	{r7}
 8006148:	b085      	sub	sp, #20
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4313      	orrs	r3, r2
 8006164:	f043 0307 	orr.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	609a      	str	r2, [r3, #8]
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800617a:	b480      	push	{r7}
 800617c:	b087      	sub	sp, #28
 800617e:	af00      	add	r7, sp, #0
 8006180:	60f8      	str	r0, [r7, #12]
 8006182:	60b9      	str	r1, [r7, #8]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006194:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	021a      	lsls	r2, r3, #8
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	431a      	orrs	r2, r3
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	697a      	ldr	r2, [r7, #20]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	609a      	str	r2, [r3, #8]
}
 80061ae:	bf00      	nop
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bc80      	pop	{r7}
 80061b6:	4770      	bx	lr

080061b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b087      	sub	sp, #28
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 031f 	and.w	r3, r3, #31
 80061ca:	2201      	movs	r2, #1
 80061cc:	fa02 f303 	lsl.w	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6a1a      	ldr	r2, [r3, #32]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	43db      	mvns	r3, r3
 80061da:	401a      	ands	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1a      	ldr	r2, [r3, #32]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	6879      	ldr	r1, [r7, #4]
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	431a      	orrs	r2, r3
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bc80      	pop	{r7}
 80061fe:	4770      	bx	lr

08006200 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006214:	2302      	movs	r3, #2
 8006216:	e046      	b.n	80062a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800623e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00e      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d009      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a12      	ldr	r2, [pc, #72]	; (80062b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d004      	beq.n	800627a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a10      	ldr	r2, [pc, #64]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d10c      	bne.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006280:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4313      	orrs	r3, r2
 800628a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062a4:	2300      	movs	r3, #0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bc80      	pop	{r7}
 80062ae:	4770      	bx	lr
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40000400 	.word	0x40000400
 80062b8:	40000800 	.word	0x40000800

080062bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062d4:	2302      	movs	r3, #2
 80062d6:	e03d      	b.n	8006354 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4313      	orrs	r3, r2
 8006308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	695b      	ldr	r3, [r3, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr

08006382 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006382:	b084      	sub	sp, #16
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	f107 0014 	add.w	r0, r7, #20
 8006390:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	b004      	add	sp, #16
 80063a0:	4770      	bx	lr

080063a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063b2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bc80      	pop	{r7}
 80063cc:	4770      	bx	lr

080063ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b085      	sub	sp, #20
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80063d6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80063da:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	4013      	ands	r3, r2
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	460b      	mov	r3, r1
 800640c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	4618      	mov	r0, r3
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	bc80      	pop	{r7}
 8006418:	4770      	bx	lr

0800641a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800641a:	b084      	sub	sp, #16
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	f107 0014 	add.w	r0, r7, #20
 8006428:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	b004      	add	sp, #16
 8006458:	4770      	bx	lr
	...

0800645c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800645c:	b480      	push	{r7}
 800645e:	b09b      	sub	sp, #108	; 0x6c
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	b29b      	uxth	r3, r3
 800647a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800647e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006482:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	78db      	ldrb	r3, [r3, #3]
 800648a:	2b03      	cmp	r3, #3
 800648c:	d81f      	bhi.n	80064ce <USB_ActivateEndpoint+0x72>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <USB_ActivateEndpoint+0x38>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	080064a5 	.word	0x080064a5
 8006498:	080064c1 	.word	0x080064c1
 800649c:	080064d7 	.word	0x080064d7
 80064a0:	080064b3 	.word	0x080064b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80064a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064b0:	e012      	b.n	80064d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80064b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80064ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064be:	e00b      	b.n	80064d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80064c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80064cc:	e004      	b.n	80064d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80064d4:	e000      	b.n	80064d8 <USB_ActivateEndpoint+0x7c>
      break;
 80064d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	441a      	add	r2, r3
 80064e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	b29a      	uxth	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b29b      	uxth	r3, r3
 8006518:	4313      	orrs	r3, r2
 800651a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	441a      	add	r2, r3
 8006528:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800652c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800653c:	b29b      	uxth	r3, r3
 800653e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	7b1b      	ldrb	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f040 8149 	bne.w	80067dc <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8084 	beq.w	800665c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	617b      	str	r3, [r7, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	011a      	lsls	r2, r3, #4
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006576:	613b      	str	r3, [r7, #16]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	88db      	ldrh	r3, [r3, #6]
 800657c:	085b      	lsrs	r3, r3, #1
 800657e:	b29b      	uxth	r3, r3
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	881b      	ldrh	r3, [r3, #0]
 8006594:	81fb      	strh	r3, [r7, #14]
 8006596:	89fb      	ldrh	r3, [r7, #14]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01b      	beq.n	80065d8 <USB_ActivateEndpoint+0x17c>
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b6:	81bb      	strh	r3, [r7, #12]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	89bb      	ldrh	r3, [r7, #12]
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	78db      	ldrb	r3, [r3, #3]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d020      	beq.n	8006622 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f6:	813b      	strh	r3, [r7, #8]
 80065f8:	893b      	ldrh	r3, [r7, #8]
 80065fa:	f083 0320 	eor.w	r3, r3, #32
 80065fe:	813b      	strh	r3, [r7, #8]
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	441a      	add	r2, r3
 800660a:	893b      	ldrh	r3, [r7, #8]
 800660c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006610:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006614:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661c:	b29b      	uxth	r3, r3
 800661e:	8013      	strh	r3, [r2, #0]
 8006620:	e27f      	b.n	8006b22 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	4413      	add	r3, r2
 800662c:	881b      	ldrh	r3, [r3, #0]
 800662e:	b29b      	uxth	r3, r3
 8006630:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006638:	817b      	strh	r3, [r7, #10]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	441a      	add	r2, r3
 8006644:	897b      	ldrh	r3, [r7, #10]
 8006646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800664e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006656:	b29b      	uxth	r3, r3
 8006658:	8013      	strh	r3, [r2, #0]
 800665a:	e262      	b.n	8006b22 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006666:	b29b      	uxth	r3, r3
 8006668:	461a      	mov	r2, r3
 800666a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666c:	4413      	add	r3, r2
 800666e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	011a      	lsls	r2, r3, #4
 8006676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006678:	4413      	add	r3, r2
 800667a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800667e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	88db      	ldrh	r3, [r3, #6]
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	b29b      	uxth	r3, r3
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	b29a      	uxth	r2, r3
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669a:	b29b      	uxth	r3, r3
 800669c:	461a      	mov	r2, r3
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	4413      	add	r3, r2
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	011a      	lsls	r2, r3, #4
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	4413      	add	r3, r2
 80066ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b2:	623b      	str	r3, [r7, #32]
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d112      	bne.n	80066e2 <USB_ActivateEndpoint+0x286>
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066da:	b29a      	uxth	r2, r3
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	801a      	strh	r2, [r3, #0]
 80066e0:	e02f      	b.n	8006742 <USB_ActivateEndpoint+0x2e6>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	2b3e      	cmp	r3, #62	; 0x3e
 80066e8:	d813      	bhi.n	8006712 <USB_ActivateEndpoint+0x2b6>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	085b      	lsrs	r3, r3, #1
 80066f0:	663b      	str	r3, [r7, #96]	; 0x60
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d002      	beq.n	8006704 <USB_ActivateEndpoint+0x2a8>
 80066fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006700:	3301      	adds	r3, #1
 8006702:	663b      	str	r3, [r7, #96]	; 0x60
 8006704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006706:	b29b      	uxth	r3, r3
 8006708:	029b      	lsls	r3, r3, #10
 800670a:	b29a      	uxth	r2, r3
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	801a      	strh	r2, [r3, #0]
 8006710:	e017      	b.n	8006742 <USB_ActivateEndpoint+0x2e6>
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	663b      	str	r3, [r7, #96]	; 0x60
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <USB_ActivateEndpoint+0x2d0>
 8006726:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006728:	3b01      	subs	r3, #1
 800672a:	663b      	str	r3, [r7, #96]	; 0x60
 800672c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800672e:	b29b      	uxth	r3, r3
 8006730:	029b      	lsls	r3, r3, #10
 8006732:	b29b      	uxth	r3, r3
 8006734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800673c:	b29a      	uxth	r2, r3
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	83fb      	strh	r3, [r7, #30]
 8006750:	8bfb      	ldrh	r3, [r7, #30]
 8006752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d01b      	beq.n	8006792 <USB_ActivateEndpoint+0x336>
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	4413      	add	r3, r2
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800676c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006770:	83bb      	strh	r3, [r7, #28]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	441a      	add	r2, r3
 800677c:	8bbb      	ldrh	r3, [r7, #28]
 800677e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800678a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800678e:	b29b      	uxth	r3, r3
 8006790:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4413      	add	r3, r2
 800679c:	881b      	ldrh	r3, [r3, #0]
 800679e:	b29b      	uxth	r3, r3
 80067a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	837b      	strh	r3, [r7, #26]
 80067aa:	8b7b      	ldrh	r3, [r7, #26]
 80067ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067b0:	837b      	strh	r3, [r7, #26]
 80067b2:	8b7b      	ldrh	r3, [r7, #26]
 80067b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067b8:	837b      	strh	r3, [r7, #26]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	441a      	add	r2, r3
 80067c4:	8b7b      	ldrh	r3, [r7, #26]
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]
 80067da:	e1a2      	b.n	8006b22 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	4413      	add	r3, r2
 80067e6:	881b      	ldrh	r3, [r3, #0]
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	009b      	lsls	r3, r3, #2
 80067fe:	441a      	add	r2, r3
 8006800:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8006804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800680c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006814:	b29b      	uxth	r3, r3
 8006816:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	65bb      	str	r3, [r7, #88]	; 0x58
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006828:	4413      	add	r3, r2
 800682a:	65bb      	str	r3, [r7, #88]	; 0x58
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	011a      	lsls	r2, r3, #4
 8006832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006834:	4413      	add	r3, r2
 8006836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800683a:	657b      	str	r3, [r7, #84]	; 0x54
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	891b      	ldrh	r3, [r3, #8]
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	b29b      	uxth	r3, r3
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684a:	801a      	strh	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	653b      	str	r3, [r7, #80]	; 0x50
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006856:	b29b      	uxth	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800685c:	4413      	add	r3, r2
 800685e:	653b      	str	r3, [r7, #80]	; 0x50
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006868:	4413      	add	r3, r2
 800686a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800686e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	895b      	ldrh	r3, [r3, #10]
 8006874:	085b      	lsrs	r3, r3, #1
 8006876:	b29b      	uxth	r3, r3
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	b29a      	uxth	r2, r3
 800687c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800687e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b00      	cmp	r3, #0
 8006886:	f040 8091 	bne.w	80069ac <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006898:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800689a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d01b      	beq.n	80068da <USB_ActivateEndpoint+0x47e>
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068b8:	877b      	strh	r3, [r7, #58]	; 0x3a
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	441a      	add	r2, r3
 80068c4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80068c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	4413      	add	r3, r2
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80068e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d01b      	beq.n	800692a <USB_ActivateEndpoint+0x4ce>
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006908:	86fb      	strh	r3, [r7, #54]	; 0x36
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	441a      	add	r2, r3
 8006914:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800691e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006922:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006926:	b29b      	uxth	r3, r3
 8006928:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	b29b      	uxth	r3, r3
 8006938:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006940:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006942:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006944:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006948:	86bb      	strh	r3, [r7, #52]	; 0x34
 800694a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800694c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006950:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	441a      	add	r2, r3
 800695c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800695e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006962:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696e:	b29b      	uxth	r3, r3
 8006970:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006988:	867b      	strh	r3, [r7, #50]	; 0x32
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	441a      	add	r2, r3
 8006994:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800699a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800699e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	8013      	strh	r3, [r2, #0]
 80069aa:	e0ba      	b.n	8006b22 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80069bc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80069c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d01d      	beq.n	8006a04 <USB_ActivateEndpoint+0x5a8>
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	881b      	ldrh	r3, [r3, #0]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4413      	add	r3, r2
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006a14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d01d      	beq.n	8006a5c <USB_ActivateEndpoint+0x600>
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a54:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	78db      	ldrb	r3, [r3, #3]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d024      	beq.n	8006aae <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	4413      	add	r3, r2
 8006a6e:	881b      	ldrh	r3, [r3, #0]
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a82:	f083 0320 	eor.w	r3, r3, #32
 8006a86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	8013      	strh	r3, [r2, #0]
 8006aac:	e01d      	b.n	8006aea <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	4413      	add	r3, r2
 8006ab8:	881b      	ldrh	r3, [r3, #0]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006ac8:	687a      	ldr	r2, [r7, #4]
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4413      	add	r3, r2
 8006af4:	881b      	ldrh	r3, [r3, #0]
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b00:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	441a      	add	r2, r3
 8006b0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006b22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	376c      	adds	r7, #108	; 0x6c
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b08d      	sub	sp, #52	; 0x34
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	7b1b      	ldrb	r3, [r3, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f040 808e 	bne.w	8006c60 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d044      	beq.n	8006bd6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	881b      	ldrh	r3, [r3, #0]
 8006b58:	81bb      	strh	r3, [r7, #12]
 8006b5a:	89bb      	ldrh	r3, [r7, #12]
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d01b      	beq.n	8006b9c <USB_DeactivateEndpoint+0x6c>
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7a:	817b      	strh	r3, [r7, #10]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	441a      	add	r2, r3
 8006b86:	897b      	ldrh	r3, [r7, #10]
 8006b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	009b      	lsls	r3, r3, #2
 8006ba4:	4413      	add	r3, r2
 8006ba6:	881b      	ldrh	r3, [r3, #0]
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb2:	813b      	strh	r3, [r7, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	441a      	add	r2, r3
 8006bbe:	893b      	ldrh	r3, [r7, #8]
 8006bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	8013      	strh	r3, [r2, #0]
 8006bd4:	e192      	b.n	8006efc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	4413      	add	r3, r2
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	827b      	strh	r3, [r7, #18]
 8006be4:	8a7b      	ldrh	r3, [r7, #18]
 8006be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01b      	beq.n	8006c26 <USB_DeactivateEndpoint+0xf6>
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c04:	823b      	strh	r3, [r7, #16]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	8a3b      	ldrh	r3, [r7, #16]
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3c:	81fb      	strh	r3, [r7, #14]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	441a      	add	r2, r3
 8006c48:	89fb      	ldrh	r3, [r7, #14]
 8006c4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	8013      	strh	r3, [r2, #0]
 8006c5e:	e14d      	b.n	8006efc <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	785b      	ldrb	r3, [r3, #1]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f040 80a5 	bne.w	8006db4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	781b      	ldrb	r3, [r3, #0]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	881b      	ldrh	r3, [r3, #0]
 8006c76:	843b      	strh	r3, [r7, #32]
 8006c78:	8c3b      	ldrh	r3, [r7, #32]
 8006c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d01b      	beq.n	8006cba <USB_DeactivateEndpoint+0x18a>
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	4413      	add	r3, r2
 8006c8c:	881b      	ldrh	r3, [r3, #0]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c98:	83fb      	strh	r3, [r7, #30]
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	441a      	add	r2, r3
 8006ca4:	8bfb      	ldrh	r3, [r7, #30]
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	83bb      	strh	r3, [r7, #28]
 8006cc8:	8bbb      	ldrh	r3, [r7, #28]
 8006cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d01b      	beq.n	8006d0a <USB_DeactivateEndpoint+0x1da>
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce8:	837b      	strh	r3, [r7, #26]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	441a      	add	r2, r3
 8006cf4:	8b7b      	ldrh	r3, [r7, #26]
 8006cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d02:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d20:	833b      	strh	r3, [r7, #24]
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	441a      	add	r2, r3
 8006d2c:	8b3b      	ldrh	r3, [r7, #24]
 8006d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4413      	add	r3, r2
 8006d4c:	881b      	ldrh	r3, [r3, #0]
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d58:	82fb      	strh	r3, [r7, #22]
 8006d5a:	687a      	ldr	r2, [r7, #4]
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	441a      	add	r2, r3
 8006d64:	8afb      	ldrh	r3, [r7, #22]
 8006d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d90:	82bb      	strh	r3, [r7, #20]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	441a      	add	r2, r3
 8006d9c:	8abb      	ldrh	r3, [r7, #20]
 8006d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	8013      	strh	r3, [r2, #0]
 8006db2:	e0a3      	b.n	8006efc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4413      	add	r3, r2
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006dc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d01b      	beq.n	8006e04 <USB_DeactivateEndpoint+0x2d4>
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	881b      	ldrh	r3, [r3, #0]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	441a      	add	r2, r3
 8006dee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <USB_DeactivateEndpoint+0x324>
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	4413      	add	r3, r2
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e32:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	441a      	add	r2, r3
 8006e3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	4413      	add	r3, r2
 8006e5e:	881b      	ldrh	r3, [r3, #0]
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	441a      	add	r2, r3
 8006e76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ea2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	441a      	add	r2, r3
 8006eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	4413      	add	r3, r2
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eda:	847b      	strh	r3, [r7, #34]	; 0x22
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	441a      	add	r2, r3
 8006ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ee8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006eec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3734      	adds	r7, #52	; 0x34
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b0cc      	sub	sp, #304	; 0x130
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f16:	6018      	str	r0, [r3, #0]
 8006f18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f20:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006f22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	785b      	ldrb	r3, [r3, #1]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	f041 817d 	bne.w	800822e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d908      	bls.n	8006f62 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f60:	e007      	b.n	8006f72 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	7b1b      	ldrb	r3, [r3, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d152      	bne.n	8007028 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	88da      	ldrh	r2, [r3, #6]
 8006f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006fa4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006fa8:	6800      	ldr	r0, [r0, #0]
 8006faa:	f001 ff23 	bl	8008df4 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006fb6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fba:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006fdc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006fe0:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	011a      	lsls	r2, r3, #4
 8006ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4413      	add	r3, r2
 8007004:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800700c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007016:	b29a      	uxth	r2, r3
 8007018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	f001 b8b5 	b.w	8008192 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800702c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	78db      	ldrb	r3, [r3, #3]
 8007034:	2b02      	cmp	r3, #2
 8007036:	f040 84c6 	bne.w	80079c6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a1a      	ldr	r2, [r3, #32]
 8007046:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	f240 8443 	bls.w	80078de <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b29b      	uxth	r3, r3
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	441a      	add	r2, r3
 800709c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80070a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070a8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80070ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80070b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a1a      	ldr	r2, [r3, #32]
 80070c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c4:	1ad2      	subs	r2, r2, r3
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80070d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 823e 	beq.w	8007576 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070fe:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007102:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007106:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800710a:	6812      	ldr	r2, [r2, #0]
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007112:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	785b      	ldrb	r3, [r3, #1]
 800711a:	2b00      	cmp	r3, #0
 800711c:	f040 809a 	bne.w	8007254 <USB_EPStartXfer+0x34c>
 8007120:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007128:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800712c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007130:	6812      	ldr	r2, [r2, #0]
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007138:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007142:	b29b      	uxth	r3, r3
 8007144:	4619      	mov	r1, r3
 8007146:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800714e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007152:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007156:	6812      	ldr	r2, [r2, #0]
 8007158:	440a      	add	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	011a      	lsls	r2, r3, #4
 800716a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4413      	add	r3, r2
 8007176:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800717a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800717e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d122      	bne.n	80071d2 <USB_EPStartXfer+0x2ca>
 800718c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007190:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800719e:	b29a      	uxth	r2, r3
 80071a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	801a      	strh	r2, [r3, #0]
 80071ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e079      	b.n	80072c6 <USB_EPStartXfer+0x3be>
 80071d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d6:	2b3e      	cmp	r3, #62	; 0x3e
 80071d8:	d81b      	bhi.n	8007212 <USB_EPStartXfer+0x30a>
 80071da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d004      	beq.n	80071fa <USB_EPStartXfer+0x2f2>
 80071f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071fe:	b29b      	uxth	r3, r3
 8007200:	029b      	lsls	r3, r3, #10
 8007202:	b29a      	uxth	r2, r3
 8007204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007208:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e059      	b.n	80072c6 <USB_EPStartXfer+0x3be>
 8007212:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007216:	095b      	lsrs	r3, r3, #5
 8007218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800721c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007220:	f003 031f 	and.w	r3, r3, #31
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <USB_EPStartXfer+0x32a>
 8007228:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800722c:	3b01      	subs	r3, #1
 800722e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8007232:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007236:	b29b      	uxth	r3, r3
 8007238:	029b      	lsls	r3, r3, #10
 800723a:	b29b      	uxth	r3, r3
 800723c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007244:	b29a      	uxth	r2, r3
 8007246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	e038      	b.n	80072c6 <USB_EPStartXfer+0x3be>
 8007254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d130      	bne.n	80072c6 <USB_EPStartXfer+0x3be>
 8007264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007272:	b29b      	uxth	r3, r3
 8007274:	4619      	mov	r1, r3
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800727e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007282:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	440a      	add	r2, r1
 800728a:	601a      	str	r2, [r3, #0]
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	011a      	lsls	r2, r3, #4
 800729a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800729e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4413      	add	r3, r2
 80072a6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80072aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80072c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	895b      	ldrh	r3, [r3, #10]
 80072d2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6959      	ldr	r1, [r3, #20]
 80072e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072ec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072f0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072f4:	6800      	ldr	r0, [r0, #0]
 80072f6:	f001 fd7d 	bl	8008df4 <USB_WritePMA>
            ep->xfer_buff += len;
 80072fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695a      	ldr	r2, [r3, #20]
 8007306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800730a:	441a      	add	r2, r3
 800730c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6a1a      	ldr	r2, [r3, #32]
 8007324:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007328:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	429a      	cmp	r2, r3
 8007332:	d90f      	bls.n	8007354 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8007334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6a1a      	ldr	r2, [r3, #32]
 8007340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007344:	1ad2      	subs	r2, r2, r3
 8007346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	621a      	str	r2, [r3, #32]
 8007352:	e00e      	b.n	8007372 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2200      	movs	r2, #0
 8007370:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007376:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	785b      	ldrb	r3, [r3, #1]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f040 809a 	bne.w	80074b8 <USB_EPStartXfer+0x5b0>
 8007384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007388:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800738c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007390:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	4619      	mov	r1, r3
 80073aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073ae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80073b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80073b6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	440a      	add	r2, r1
 80073be:	601a      	str	r2, [r3, #0]
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	011a      	lsls	r2, r3, #4
 80073ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4413      	add	r3, r2
 80073da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80073de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d122      	bne.n	8007436 <USB_EPStartXfer+0x52e>
 80073f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073f4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	881b      	ldrh	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007402:	b29a      	uxth	r2, r3
 8007404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007408:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	801a      	strh	r2, [r3, #0]
 8007410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007414:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007426:	b29a      	uxth	r2, r3
 8007428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800742c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	e083      	b.n	800753e <USB_EPStartXfer+0x636>
 8007436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800743a:	2b3e      	cmp	r3, #62	; 0x3e
 800743c:	d81b      	bhi.n	8007476 <USB_EPStartXfer+0x56e>
 800743e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007442:	085b      	lsrs	r3, r3, #1
 8007444:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007448:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <USB_EPStartXfer+0x556>
 8007454:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007458:	3301      	adds	r3, #1
 800745a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800745e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007462:	b29b      	uxth	r3, r3
 8007464:	029b      	lsls	r3, r3, #10
 8007466:	b29a      	uxth	r2, r3
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e063      	b.n	800753e <USB_EPStartXfer+0x636>
 8007476:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747a:	095b      	lsrs	r3, r3, #5
 800747c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <USB_EPStartXfer+0x58e>
 800748c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007490:	3b01      	subs	r3, #1
 8007492:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007496:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800749a:	b29b      	uxth	r3, r3
 800749c:	029b      	lsls	r3, r3, #10
 800749e:	b29b      	uxth	r3, r3
 80074a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	e042      	b.n	800753e <USB_EPStartXfer+0x636>
 80074b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	785b      	ldrb	r3, [r3, #1]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d13a      	bne.n	800753e <USB_EPStartXfer+0x636>
 80074c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074d0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074d4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	4619      	mov	r1, r3
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074fa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80074fe:	6812      	ldr	r2, [r2, #0]
 8007500:	440a      	add	r2, r1
 8007502:	601a      	str	r2, [r3, #0]
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	011a      	lsls	r2, r3, #4
 8007512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007516:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4413      	add	r3, r2
 800751e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8007522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007526:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800752a:	601a      	str	r2, [r3, #0]
 800752c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007530:	b29a      	uxth	r2, r3
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800753e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	891b      	ldrh	r3, [r3, #8]
 800754a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6959      	ldr	r1, [r3, #20]
 800755a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800755e:	b29b      	uxth	r3, r3
 8007560:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007564:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007568:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800756c:	6800      	ldr	r0, [r0, #0]
 800756e:	f001 fc41 	bl	8008df4 <USB_WritePMA>
 8007572:	f000 be0e 	b.w	8008192 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800757a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	785b      	ldrb	r3, [r3, #1]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d16d      	bne.n	8007662 <USB_EPStartXfer+0x75a>
 8007586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800758a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	64bb      	str	r3, [r7, #72]	; 0x48
 8007592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007596:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a6:	4413      	add	r3, r2
 80075a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80075aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	011a      	lsls	r2, r3, #4
 80075b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ba:	4413      	add	r3, r2
 80075bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075c0:	647b      	str	r3, [r7, #68]	; 0x44
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d112      	bne.n	80075f0 <USB_EPStartXfer+0x6e8>
 80075ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075ec:	801a      	strh	r2, [r3, #0]
 80075ee:	e063      	b.n	80076b8 <USB_EPStartXfer+0x7b0>
 80075f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f4:	2b3e      	cmp	r3, #62	; 0x3e
 80075f6:	d817      	bhi.n	8007628 <USB_EPStartXfer+0x720>
 80075f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	2b00      	cmp	r3, #0
 800760c:	d004      	beq.n	8007618 <USB_EPStartXfer+0x710>
 800760e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007612:	3301      	adds	r3, #1
 8007614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007618:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800761c:	b29b      	uxth	r3, r3
 800761e:	029b      	lsls	r3, r3, #10
 8007620:	b29a      	uxth	r2, r3
 8007622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	e047      	b.n	80076b8 <USB_EPStartXfer+0x7b0>
 8007628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800762c:	095b      	lsrs	r3, r3, #5
 800762e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007636:	f003 031f 	and.w	r3, r3, #31
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <USB_EPStartXfer+0x740>
 800763e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007642:	3b01      	subs	r3, #1
 8007644:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007648:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800764c:	b29b      	uxth	r3, r3
 800764e:	029b      	lsls	r3, r3, #10
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765e:	801a      	strh	r2, [r3, #0]
 8007660:	e02a      	b.n	80076b8 <USB_EPStartXfer+0x7b0>
 8007662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	785b      	ldrb	r3, [r3, #1]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d122      	bne.n	80076b8 <USB_EPStartXfer+0x7b0>
 8007672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007676:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	653b      	str	r3, [r7, #80]	; 0x50
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800768c:	b29b      	uxth	r3, r3
 800768e:	461a      	mov	r2, r3
 8007690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007692:	4413      	add	r3, r2
 8007694:	653b      	str	r3, [r7, #80]	; 0x50
 8007696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	011a      	lsls	r2, r3, #4
 80076a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076a6:	4413      	add	r3, r2
 80076a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80076ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80076b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	891b      	ldrh	r3, [r3, #8]
 80076c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80076c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6959      	ldr	r1, [r3, #20]
 80076d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80076de:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80076e2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076e6:	6800      	ldr	r0, [r0, #0]
 80076e8:	f001 fb84 	bl	8008df4 <USB_WritePMA>
            ep->xfer_buff += len;
 80076ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	695a      	ldr	r2, [r3, #20]
 80076f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076fc:	441a      	add	r2, r3
 80076fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800770a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800770e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800771a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	429a      	cmp	r2, r3
 8007724:	d90f      	bls.n	8007746 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8007726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800772a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007736:	1ad2      	subs	r2, r2, r3
 8007738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800773c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	621a      	str	r2, [r3, #32]
 8007744:	e00e      	b.n	8007764 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6a1b      	ldr	r3, [r3, #32]
 8007752:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800775a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	2200      	movs	r2, #0
 8007762:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	643b      	str	r3, [r7, #64]	; 0x40
 8007770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d16d      	bne.n	800785c <USB_EPStartXfer+0x954>
 8007780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007784:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	63bb      	str	r3, [r7, #56]	; 0x38
 800778c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007790:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800779a:	b29b      	uxth	r3, r3
 800779c:	461a      	mov	r2, r3
 800779e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a0:	4413      	add	r3, r2
 80077a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	011a      	lsls	r2, r3, #4
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	4413      	add	r3, r2
 80077b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
 80077bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d112      	bne.n	80077ea <USB_EPStartXfer+0x8e2>
 80077c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c6:	881b      	ldrh	r3, [r3, #0]
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	801a      	strh	r2, [r3, #0]
 80077d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	e05d      	b.n	80078a6 <USB_EPStartXfer+0x99e>
 80077ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ee:	2b3e      	cmp	r3, #62	; 0x3e
 80077f0:	d817      	bhi.n	8007822 <USB_EPStartXfer+0x91a>
 80077f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077f6:	085b      	lsrs	r3, r3, #1
 80077f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007800:	f003 0301 	and.w	r3, r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <USB_EPStartXfer+0x90a>
 8007808:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800780c:	3301      	adds	r3, #1
 800780e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007812:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007816:	b29b      	uxth	r3, r3
 8007818:	029b      	lsls	r3, r3, #10
 800781a:	b29a      	uxth	r2, r3
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	801a      	strh	r2, [r3, #0]
 8007820:	e041      	b.n	80078a6 <USB_EPStartXfer+0x99e>
 8007822:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007826:	095b      	lsrs	r3, r3, #5
 8007828:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800782c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007830:	f003 031f 	and.w	r3, r3, #31
 8007834:	2b00      	cmp	r3, #0
 8007836:	d104      	bne.n	8007842 <USB_EPStartXfer+0x93a>
 8007838:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800783c:	3b01      	subs	r3, #1
 800783e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007842:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007846:	b29b      	uxth	r3, r3
 8007848:	029b      	lsls	r3, r3, #10
 800784a:	b29b      	uxth	r3, r3
 800784c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007854:	b29a      	uxth	r2, r3
 8007856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007858:	801a      	strh	r2, [r3, #0]
 800785a:	e024      	b.n	80078a6 <USB_EPStartXfer+0x99e>
 800785c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007860:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d11c      	bne.n	80078a6 <USB_EPStartXfer+0x99e>
 800786c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007870:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800787a:	b29b      	uxth	r3, r3
 800787c:	461a      	mov	r2, r3
 800787e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007880:	4413      	add	r3, r2
 8007882:	643b      	str	r3, [r7, #64]	; 0x40
 8007884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	011a      	lsls	r2, r3, #4
 8007892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007894:	4413      	add	r3, r2
 8007896:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800789c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80078a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	895b      	ldrh	r3, [r3, #10]
 80078b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80078b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6959      	ldr	r1, [r3, #20]
 80078c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80078cc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80078d0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80078d4:	6800      	ldr	r0, [r0, #0]
 80078d6:	f001 fa8d 	bl	8008df4 <USB_WritePMA>
 80078da:	f000 bc5a 	b.w	8008192 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80078ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078f2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007914:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800791c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	441a      	add	r2, r3
 8007932:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007936:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800793a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800793e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007946:	b29b      	uxth	r3, r3
 8007948:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800794a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800794e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007956:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800795a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007964:	b29b      	uxth	r3, r3
 8007966:	461a      	mov	r2, r3
 8007968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800796a:	4413      	add	r3, r2
 800796c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800796e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	011a      	lsls	r2, r3, #4
 800797c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800797e:	4413      	add	r3, r2
 8007980:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007984:	65bb      	str	r3, [r7, #88]	; 0x58
 8007986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800798a:	b29a      	uxth	r2, r3
 800798c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800798e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007990:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007994:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	891b      	ldrh	r3, [r3, #8]
 800799c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6959      	ldr	r1, [r3, #20]
 80079ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80079b6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80079ba:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80079be:	6800      	ldr	r0, [r0, #0]
 80079c0:	f001 fa18 	bl	8008df4 <USB_WritePMA>
 80079c4:	e3e5      	b.n	8008192 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80079c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ec:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	441a      	add	r2, r3
 8007a0a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8007a0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a16:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6a1a      	ldr	r2, [r3, #32]
 8007a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a32:	1ad2      	subs	r2, r2, r3
 8007a34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	4413      	add	r3, r2
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 81bc 	beq.w	8007de0 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	785b      	ldrb	r3, [r3, #1]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d16d      	bne.n	8007b62 <USB_EPStartXfer+0xc5a>
 8007a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aa6:	4413      	add	r3, r2
 8007aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007aaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007aae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	011a      	lsls	r2, r3, #4
 8007ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ac0:	677b      	str	r3, [r7, #116]	; 0x74
 8007ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d112      	bne.n	8007af0 <USB_EPStartXfer+0xbe8>
 8007aca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ad8:	801a      	strh	r2, [r3, #0]
 8007ada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007adc:	881b      	ldrh	r3, [r3, #0]
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aec:	801a      	strh	r2, [r3, #0]
 8007aee:	e060      	b.n	8007bb2 <USB_EPStartXfer+0xcaa>
 8007af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af4:	2b3e      	cmp	r3, #62	; 0x3e
 8007af6:	d817      	bhi.n	8007b28 <USB_EPStartXfer+0xc20>
 8007af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007afc:	085b      	lsrs	r3, r3, #1
 8007afe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d004      	beq.n	8007b18 <USB_EPStartXfer+0xc10>
 8007b0e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b12:	3301      	adds	r3, #1
 8007b14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b18:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	029b      	lsls	r3, r3, #10
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	e044      	b.n	8007bb2 <USB_EPStartXfer+0xcaa>
 8007b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b36:	f003 031f 	and.w	r3, r3, #31
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d104      	bne.n	8007b48 <USB_EPStartXfer+0xc40>
 8007b3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b42:	3b01      	subs	r3, #1
 8007b44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	029b      	lsls	r3, r3, #10
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b5e:	801a      	strh	r2, [r3, #0]
 8007b60:	e027      	b.n	8007bb2 <USB_EPStartXfer+0xcaa>
 8007b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	785b      	ldrb	r3, [r3, #1]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d11f      	bne.n	8007bb2 <USB_EPStartXfer+0xcaa>
 8007b72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b88:	4413      	add	r3, r2
 8007b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	011a      	lsls	r2, r3, #4
 8007b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ba6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007bb0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	895b      	ldrh	r3, [r3, #10]
 8007bbe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6959      	ldr	r1, [r3, #20]
 8007bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007bd8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007bdc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007be0:	6800      	ldr	r0, [r0, #0]
 8007be2:	f001 f907 	bl	8008df4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007be6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695a      	ldr	r2, [r3, #20]
 8007bf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bf6:	441a      	add	r2, r3
 8007bf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d90f      	bls.n	8007c40 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007c20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c30:	1ad2      	subs	r2, r2, r3
 8007c32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	621a      	str	r2, [r3, #32]
 8007c3e:	e00e      	b.n	8007c5e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c54:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8295 	beq.w	8008192 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	785b      	ldrb	r3, [r3, #1]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d16d      	bne.n	8007d54 <USB_EPStartXfer+0xe4c>
 8007c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c98:	4413      	add	r3, r2
 8007c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	011a      	lsls	r2, r3, #4
 8007caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cac:	4413      	add	r3, r2
 8007cae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cb2:	667b      	str	r3, [r7, #100]	; 0x64
 8007cb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d112      	bne.n	8007ce2 <USB_EPStartXfer+0xdda>
 8007cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007cc6:	b29a      	uxth	r2, r3
 8007cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e063      	b.n	8007daa <USB_EPStartXfer+0xea2>
 8007ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce6:	2b3e      	cmp	r3, #62	; 0x3e
 8007ce8:	d817      	bhi.n	8007d1a <USB_EPStartXfer+0xe12>
 8007cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cee:	085b      	lsrs	r3, r3, #1
 8007cf0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d004      	beq.n	8007d0a <USB_EPStartXfer+0xe02>
 8007d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d04:	3301      	adds	r3, #1
 8007d06:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	029b      	lsls	r3, r3, #10
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d16:	801a      	strh	r2, [r3, #0]
 8007d18:	e047      	b.n	8007daa <USB_EPStartXfer+0xea2>
 8007d1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d1e:	095b      	lsrs	r3, r3, #5
 8007d20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <USB_EPStartXfer+0xe32>
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d34:	3b01      	subs	r3, #1
 8007d36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	029b      	lsls	r3, r3, #10
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d50:	801a      	strh	r2, [r3, #0]
 8007d52:	e02a      	b.n	8007daa <USB_EPStartXfer+0xea2>
 8007d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d122      	bne.n	8007daa <USB_EPStartXfer+0xea2>
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	673b      	str	r3, [r7, #112]	; 0x70
 8007d70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d84:	4413      	add	r3, r2
 8007d86:	673b      	str	r3, [r7, #112]	; 0x70
 8007d88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	011a      	lsls	r2, r3, #4
 8007d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d98:	4413      	add	r3, r2
 8007d9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	891b      	ldrh	r3, [r3, #8]
 8007db6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6959      	ldr	r1, [r3, #20]
 8007dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007dd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007dd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007dd8:	6800      	ldr	r0, [r0, #0]
 8007dda:	f001 f80b 	bl	8008df4 <USB_WritePMA>
 8007dde:	e1d8      	b.n	8008192 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d178      	bne.n	8007ee2 <USB_EPStartXfer+0xfda>
 8007df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	461a      	mov	r2, r3
 8007e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e14:	4413      	add	r3, r2
 8007e16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007e1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	011a      	lsls	r2, r3, #4
 8007e28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007e32:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d116      	bne.n	8007e6c <USB_EPStartXfer+0xf64>
 8007e3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e50:	801a      	strh	r2, [r3, #0]
 8007e52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e56:	881b      	ldrh	r3, [r3, #0]
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e68:	801a      	strh	r2, [r3, #0]
 8007e6a:	e06b      	b.n	8007f44 <USB_EPStartXfer+0x103c>
 8007e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e70:	2b3e      	cmp	r3, #62	; 0x3e
 8007e72:	d818      	bhi.n	8007ea6 <USB_EPStartXfer+0xf9e>
 8007e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e78:	085b      	lsrs	r3, r3, #1
 8007e7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d004      	beq.n	8007e94 <USB_EPStartXfer+0xf8c>
 8007e8a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e8e:	3301      	adds	r3, #1
 8007e90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	029b      	lsls	r3, r3, #10
 8007e9c:	b29a      	uxth	r2, r3
 8007e9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ea2:	801a      	strh	r2, [r3, #0]
 8007ea4:	e04e      	b.n	8007f44 <USB_EPStartXfer+0x103c>
 8007ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <USB_EPStartXfer+0xfbe>
 8007ebc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007ec6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	029b      	lsls	r3, r3, #10
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ede:	801a      	strh	r2, [r3, #0]
 8007ee0:	e030      	b.n	8007f44 <USB_EPStartXfer+0x103c>
 8007ee2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ee6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	785b      	ldrb	r3, [r3, #1]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d128      	bne.n	8007f44 <USB_EPStartXfer+0x103c>
 8007ef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ef6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	461a      	mov	r2, r3
 8007f12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f16:	4413      	add	r3, r2
 8007f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007f1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	011a      	lsls	r2, r3, #4
 8007f2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f2e:	4413      	add	r3, r2
 8007f30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007f34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	891b      	ldrh	r3, [r3, #8]
 8007f50:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	6959      	ldr	r1, [r3, #20]
 8007f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f6a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f6e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f72:	6800      	ldr	r0, [r0, #0]
 8007f74:	f000 ff3e 	bl	8008df4 <USB_WritePMA>
          ep->xfer_buff += len;
 8007f78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f88:	441a      	add	r2, r3
 8007f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6a1a      	ldr	r2, [r3, #32]
 8007fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d90f      	bls.n	8007fd2 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6a1a      	ldr	r2, [r3, #32]
 8007fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fc2:	1ad2      	subs	r2, r2, r3
 8007fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	621a      	str	r2, [r3, #32]
 8007fd0:	e00e      	b.n	8007ff0 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007fd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2200      	movs	r2, #0
 8007fee:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 80cc 	beq.w	8008192 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007ffa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ffe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800800c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d178      	bne.n	800810a <USB_EPStartXfer+0x1202>
 8008018:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800801c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008026:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800802a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008034:	b29b      	uxth	r3, r3
 8008036:	461a      	mov	r2, r3
 8008038:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800803c:	4413      	add	r3, r2
 800803e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008042:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008046:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	011a      	lsls	r2, r3, #4
 8008050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008054:	4413      	add	r3, r2
 8008056:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800805a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800805e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008062:	2b00      	cmp	r3, #0
 8008064:	d116      	bne.n	8008094 <USB_EPStartXfer+0x118c>
 8008066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008072:	b29a      	uxth	r2, r3
 8008074:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008078:	801a      	strh	r2, [r3, #0]
 800807a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800808a:	b29a      	uxth	r2, r3
 800808c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008090:	801a      	strh	r2, [r3, #0]
 8008092:	e064      	b.n	800815e <USB_EPStartXfer+0x1256>
 8008094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008098:	2b3e      	cmp	r3, #62	; 0x3e
 800809a:	d818      	bhi.n	80080ce <USB_EPStartXfer+0x11c6>
 800809c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a0:	085b      	lsrs	r3, r3, #1
 80080a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080aa:	f003 0301 	and.w	r3, r3, #1
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d004      	beq.n	80080bc <USB_EPStartXfer+0x11b4>
 80080b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080b6:	3301      	adds	r3, #1
 80080b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	029b      	lsls	r3, r3, #10
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080ca:	801a      	strh	r2, [r3, #0]
 80080cc:	e047      	b.n	800815e <USB_EPStartXfer+0x1256>
 80080ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080dc:	f003 031f 	and.w	r3, r3, #31
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d104      	bne.n	80080ee <USB_EPStartXfer+0x11e6>
 80080e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080e8:	3b01      	subs	r3, #1
 80080ea:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008100:	b29a      	uxth	r2, r3
 8008102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e029      	b.n	800815e <USB_EPStartXfer+0x1256>
 800810a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800810e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	785b      	ldrb	r3, [r3, #1]
 8008116:	2b01      	cmp	r3, #1
 8008118:	d121      	bne.n	800815e <USB_EPStartXfer+0x1256>
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008128:	b29b      	uxth	r3, r3
 800812a:	461a      	mov	r2, r3
 800812c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008130:	4413      	add	r3, r2
 8008132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800813a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	011a      	lsls	r2, r3, #4
 8008144:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008148:	4413      	add	r3, r2
 800814a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800814e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008156:	b29a      	uxth	r2, r3
 8008158:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800815c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800815e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008162:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	895b      	ldrh	r3, [r3, #10]
 800816a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800816e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008172:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6959      	ldr	r1, [r3, #20]
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	b29b      	uxth	r3, r3
 8008180:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008184:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008188:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800818c:	6800      	ldr	r0, [r0, #0]
 800818e:	f000 fe31 	bl	8008df4 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008196:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4413      	add	r3, r2
 80081ac:	881b      	ldrh	r3, [r3, #0]
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081b4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80081b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c0:	8013      	strh	r3, [r2, #0]
 80081c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081c6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081ce:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80081d2:	8812      	ldrh	r2, [r2, #0]
 80081d4:	f082 0210 	eor.w	r2, r2, #16
 80081d8:	801a      	strh	r2, [r3, #0]
 80081da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081de:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081e6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80081ea:	8812      	ldrh	r2, [r2, #0]
 80081ec:	f082 0220 	eor.w	r2, r2, #32
 80081f0:	801a      	strh	r2, [r3, #0]
 80081f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081fa:	681a      	ldr	r2, [r3, #0]
 80081fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	441a      	add	r2, r3
 800820c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008210:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800821a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008226:	b29b      	uxth	r3, r3
 8008228:	8013      	strh	r3, [r2, #0]
 800822a:	f000 bc9f 	b.w	8008b6c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800822e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008232:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	7b1b      	ldrb	r3, [r3, #12]
 800823a:	2b00      	cmp	r3, #0
 800823c:	f040 80ae 	bne.w	800839c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	699a      	ldr	r2, [r3, #24]
 800824c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008250:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	691b      	ldr	r3, [r3, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	d917      	bls.n	800828c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800825c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008260:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800826c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800827c:	1ad2      	subs	r2, r2, r3
 800827e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	619a      	str	r2, [r3, #24]
 800828a:	e00e      	b.n	80082aa <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800828c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800829c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2200      	movs	r2, #0
 80082a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80082aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	461a      	mov	r2, r3
 80082ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082ce:	4413      	add	r3, r2
 80082d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	011a      	lsls	r2, r3, #4
 80082e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082e6:	4413      	add	r3, r2
 80082e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d116      	bne.n	8008326 <USB_EPStartXfer+0x141e>
 80082f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	b29b      	uxth	r3, r3
 8008300:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008304:	b29a      	uxth	r2, r3
 8008306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800830a:	801a      	strh	r2, [r3, #0]
 800830c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008310:	881b      	ldrh	r3, [r3, #0]
 8008312:	b29b      	uxth	r3, r3
 8008314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800831c:	b29a      	uxth	r2, r3
 800831e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008322:	801a      	strh	r2, [r3, #0]
 8008324:	e3e8      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
 8008326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832a:	2b3e      	cmp	r3, #62	; 0x3e
 800832c:	d818      	bhi.n	8008360 <USB_EPStartXfer+0x1458>
 800832e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008338:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <USB_EPStartXfer+0x1446>
 8008344:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008348:	3301      	adds	r3, #1
 800834a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800834e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008352:	b29b      	uxth	r3, r3
 8008354:	029b      	lsls	r3, r3, #10
 8008356:	b29a      	uxth	r2, r3
 8008358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	e3cb      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
 8008360:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008364:	095b      	lsrs	r3, r3, #5
 8008366:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800836a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800836e:	f003 031f 	and.w	r3, r3, #31
 8008372:	2b00      	cmp	r3, #0
 8008374:	d104      	bne.n	8008380 <USB_EPStartXfer+0x1478>
 8008376:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800837a:	3b01      	subs	r3, #1
 800837c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008380:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008384:	b29b      	uxth	r3, r3
 8008386:	029b      	lsls	r3, r3, #10
 8008388:	b29b      	uxth	r3, r3
 800838a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800838e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008392:	b29a      	uxth	r2, r3
 8008394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008398:	801a      	strh	r2, [r3, #0]
 800839a:	e3ad      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800839c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	78db      	ldrb	r3, [r3, #3]
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	f040 8200 	bne.w	80087ae <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80083ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f040 8091 	bne.w	80084e2 <USB_EPStartXfer+0x15da>
 80083c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083d2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083dc:	b29b      	uxth	r3, r3
 80083de:	461a      	mov	r2, r3
 80083e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083e4:	4413      	add	r3, r2
 80083e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	781b      	ldrb	r3, [r3, #0]
 80083f6:	011a      	lsls	r2, r3, #4
 80083f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008402:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800840a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d116      	bne.n	8008444 <USB_EPStartXfer+0x153c>
 8008416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008422:	b29a      	uxth	r2, r3
 8008424:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008428:	801a      	strh	r2, [r3, #0]
 800842a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800843a:	b29a      	uxth	r2, r3
 800843c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008440:	801a      	strh	r2, [r3, #0]
 8008442:	e083      	b.n	800854c <USB_EPStartXfer+0x1644>
 8008444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	2b3e      	cmp	r3, #62	; 0x3e
 8008452:	d820      	bhi.n	8008496 <USB_EPStartXfer+0x158e>
 8008454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800846a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <USB_EPStartXfer+0x157c>
 800847a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847e:	3301      	adds	r3, #1
 8008480:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008488:	b29b      	uxth	r3, r3
 800848a:	029b      	lsls	r3, r3, #10
 800848c:	b29a      	uxth	r2, r3
 800848e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008492:	801a      	strh	r2, [r3, #0]
 8008494:	e05a      	b.n	800854c <USB_EPStartXfer+0x1644>
 8008496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800849a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	691b      	ldr	r3, [r3, #16]
 80084a2:	095b      	lsrs	r3, r3, #5
 80084a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	f003 031f 	and.w	r3, r3, #31
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d104      	bne.n	80084c6 <USB_EPStartXfer+0x15be>
 80084bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c0:	3b01      	subs	r3, #1
 80084c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80084c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	029b      	lsls	r3, r3, #10
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084d8:	b29a      	uxth	r2, r3
 80084da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80084de:	801a      	strh	r2, [r3, #0]
 80084e0:	e034      	b.n	800854c <USB_EPStartXfer+0x1644>
 80084e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	785b      	ldrb	r3, [r3, #1]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d12c      	bne.n	800854c <USB_EPStartXfer+0x1644>
 80084f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008504:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800850e:	b29b      	uxth	r3, r3
 8008510:	461a      	mov	r2, r3
 8008512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008516:	4413      	add	r3, r2
 8008518:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800851c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	011a      	lsls	r2, r3, #4
 800852a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800852e:	4413      	add	r3, r2
 8008530:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008534:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	b29a      	uxth	r2, r3
 8008546:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800854a:	801a      	strh	r2, [r3, #0]
 800854c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008550:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800855a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800855e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	785b      	ldrb	r3, [r3, #1]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f040 8091 	bne.w	800868e <USB_EPStartXfer+0x1786>
 800856c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008570:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800857a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800857e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008588:	b29b      	uxth	r3, r3
 800858a:	461a      	mov	r2, r3
 800858c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008590:	4413      	add	r3, r2
 8008592:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800859a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	011a      	lsls	r2, r3, #4
 80085a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80085a8:	4413      	add	r3, r2
 80085aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80085b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d116      	bne.n	80085f0 <USB_EPStartXfer+0x16e8>
 80085c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	b29b      	uxth	r3, r3
 80085de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085ec:	801a      	strh	r2, [r3, #0]
 80085ee:	e07c      	b.n	80086ea <USB_EPStartXfer+0x17e2>
 80085f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	2b3e      	cmp	r3, #62	; 0x3e
 80085fe:	d820      	bhi.n	8008642 <USB_EPStartXfer+0x173a>
 8008600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	085b      	lsrs	r3, r3, #1
 800860e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	f003 0301 	and.w	r3, r3, #1
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <USB_EPStartXfer+0x1728>
 8008626:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800862a:	3301      	adds	r3, #1
 800862c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008630:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008634:	b29b      	uxth	r3, r3
 8008636:	029b      	lsls	r3, r3, #10
 8008638:	b29a      	uxth	r2, r3
 800863a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800863e:	801a      	strh	r2, [r3, #0]
 8008640:	e053      	b.n	80086ea <USB_EPStartXfer+0x17e2>
 8008642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008658:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	f003 031f 	and.w	r3, r3, #31
 8008664:	2b00      	cmp	r3, #0
 8008666:	d104      	bne.n	8008672 <USB_EPStartXfer+0x176a>
 8008668:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800866c:	3b01      	subs	r3, #1
 800866e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008672:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008676:	b29b      	uxth	r3, r3
 8008678:	029b      	lsls	r3, r3, #10
 800867a:	b29b      	uxth	r3, r3
 800867c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008684:	b29a      	uxth	r2, r3
 8008686:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800868a:	801a      	strh	r2, [r3, #0]
 800868c:	e02d      	b.n	80086ea <USB_EPStartXfer+0x17e2>
 800868e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	785b      	ldrb	r3, [r3, #1]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d125      	bne.n	80086ea <USB_EPStartXfer+0x17e2>
 800869e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	461a      	mov	r2, r3
 80086b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086b4:	4413      	add	r3, r2
 80086b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	011a      	lsls	r2, r3, #4
 80086c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80086cc:	4413      	add	r3, r2
 80086ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80086ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69db      	ldr	r3, [r3, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 81fe 	beq.w	8008af8 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80086fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008700:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008704:	681a      	ldr	r2, [r3, #0]
 8008706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	4413      	add	r3, r2
 8008716:	881b      	ldrh	r3, [r3, #0]
 8008718:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800871c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d005      	beq.n	8008734 <USB_EPStartXfer+0x182c>
 8008728:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800872c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008730:	2b00      	cmp	r3, #0
 8008732:	d10d      	bne.n	8008750 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008734:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 81db 	bne.w	8008af8 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008742:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	f040 81d4 	bne.w	8008af8 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8008750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	009b      	lsls	r3, r3, #2
 8008768:	4413      	add	r3, r2
 800876a:	881b      	ldrh	r3, [r3, #0]
 800876c:	b29b      	uxth	r3, r3
 800876e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800877a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	441a      	add	r2, r3
 8008794:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800879c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	8013      	strh	r3, [r2, #0]
 80087ac:	e1a4      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80087ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	78db      	ldrb	r3, [r3, #3]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	f040 819a 	bne.w	8008af4 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80087c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	699a      	ldr	r2, [r3, #24]
 80087cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d917      	bls.n	800880c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80087dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	691b      	ldr	r3, [r3, #16]
 80087e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80087ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	699a      	ldr	r2, [r3, #24]
 80087f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fc:	1ad2      	subs	r2, r2, r3
 80087fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	619a      	str	r2, [r3, #24]
 800880a:	e00e      	b.n	800882a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800880c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008810:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800881c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2200      	movs	r2, #0
 8008828:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800882a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800882e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	785b      	ldrb	r3, [r3, #1]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d178      	bne.n	800892c <USB_EPStartXfer+0x1a24>
 800883a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800883e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800884c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008856:	b29b      	uxth	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800885e:	4413      	add	r3, r2
 8008860:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	011a      	lsls	r2, r3, #4
 8008872:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008876:	4413      	add	r3, r2
 8008878:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800887c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d116      	bne.n	80088b6 <USB_EPStartXfer+0x19ae>
 8008888:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29b      	uxth	r3, r3
 8008890:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008894:	b29a      	uxth	r2, r3
 8008896:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800889a:	801a      	strh	r2, [r3, #0]
 800889c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a0:	881b      	ldrh	r3, [r3, #0]
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088b2:	801a      	strh	r2, [r3, #0]
 80088b4:	e06b      	b.n	800898e <USB_EPStartXfer+0x1a86>
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	2b3e      	cmp	r3, #62	; 0x3e
 80088bc:	d818      	bhi.n	80088f0 <USB_EPStartXfer+0x19e8>
 80088be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088c2:	085b      	lsrs	r3, r3, #1
 80088c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d004      	beq.n	80088de <USB_EPStartXfer+0x19d6>
 80088d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d8:	3301      	adds	r3, #1
 80088da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	029b      	lsls	r3, r3, #10
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088ec:	801a      	strh	r2, [r3, #0]
 80088ee:	e04e      	b.n	800898e <USB_EPStartXfer+0x1a86>
 80088f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088f4:	095b      	lsrs	r3, r3, #5
 80088f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088fe:	f003 031f 	and.w	r3, r3, #31
 8008902:	2b00      	cmp	r3, #0
 8008904:	d104      	bne.n	8008910 <USB_EPStartXfer+0x1a08>
 8008906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800890a:	3b01      	subs	r3, #1
 800890c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008914:	b29b      	uxth	r3, r3
 8008916:	029b      	lsls	r3, r3, #10
 8008918:	b29b      	uxth	r3, r3
 800891a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008922:	b29a      	uxth	r2, r3
 8008924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008928:	801a      	strh	r2, [r3, #0]
 800892a:	e030      	b.n	800898e <USB_EPStartXfer+0x1a86>
 800892c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008930:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	785b      	ldrb	r3, [r3, #1]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d128      	bne.n	800898e <USB_EPStartXfer+0x1a86>
 800893c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008940:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008958:	b29b      	uxth	r3, r3
 800895a:	461a      	mov	r2, r3
 800895c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008960:	4413      	add	r3, r2
 8008962:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	011a      	lsls	r2, r3, #4
 8008974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008978:	4413      	add	r3, r2
 800897a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800897e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008982:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008986:	b29a      	uxth	r2, r3
 8008988:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800898c:	801a      	strh	r2, [r3, #0]
 800898e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008992:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800899c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	785b      	ldrb	r3, [r3, #1]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d178      	bne.n	8008a9e <USB_EPStartXfer+0x1b96>
 80089ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	461a      	mov	r2, r3
 80089cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d0:	4413      	add	r3, r2
 80089d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80089d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	011a      	lsls	r2, r3, #4
 80089e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089e8:	4413      	add	r3, r2
 80089ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d116      	bne.n	8008a28 <USB_EPStartXfer+0x1b20>
 80089fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a0c:	801a      	strh	r2, [r3, #0]
 8008a0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a24:	801a      	strh	r2, [r3, #0]
 8008a26:	e067      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
 8008a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8008a2e:	d818      	bhi.n	8008a62 <USB_EPStartXfer+0x1b5a>
 8008a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a34:	085b      	lsrs	r3, r3, #1
 8008a36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d004      	beq.n	8008a50 <USB_EPStartXfer+0x1b48>
 8008a46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	029b      	lsls	r3, r3, #10
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a5e:	801a      	strh	r2, [r3, #0]
 8008a60:	e04a      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
 8008a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a66:	095b      	lsrs	r3, r3, #5
 8008a68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a70:	f003 031f 	and.w	r3, r3, #31
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d104      	bne.n	8008a82 <USB_EPStartXfer+0x1b7a>
 8008a78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	029b      	lsls	r3, r3, #10
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a94:	b29a      	uxth	r2, r3
 8008a96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a9a:	801a      	strh	r2, [r3, #0]
 8008a9c:	e02c      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
 8008a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	785b      	ldrb	r3, [r3, #1]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d124      	bne.n	8008af8 <USB_EPStartXfer+0x1bf0>
 8008aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	461a      	mov	r2, r3
 8008ac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008aca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ace:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	011a      	lsls	r2, r3, #4
 8008ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008adc:	4413      	add	r3, r2
 8008ade:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008ae2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ae6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	e001      	b.n	8008af8 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	e03a      	b.n	8008b6e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	781b      	ldrb	r3, [r3, #0]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4413      	add	r3, r2
 8008b12:	881b      	ldrh	r3, [r3, #0]
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b22:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b26:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008b2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b2e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008b36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	441a      	add	r2, r3
 8008b54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d020      	beq.n	8008bcc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba0:	81bb      	strh	r3, [r7, #12]
 8008ba2:	89bb      	ldrh	r3, [r7, #12]
 8008ba4:	f083 0310 	eor.w	r3, r3, #16
 8008ba8:	81bb      	strh	r3, [r7, #12]
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	441a      	add	r2, r3
 8008bb4:	89bb      	ldrh	r3, [r7, #12]
 8008bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	8013      	strh	r3, [r2, #0]
 8008bca:	e01f      	b.n	8008c0c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008be2:	81fb      	strh	r3, [r7, #14]
 8008be4:	89fb      	ldrh	r3, [r7, #14]
 8008be6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bea:	81fb      	strh	r3, [r7, #14]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	009b      	lsls	r3, r3, #2
 8008bf4:	441a      	add	r2, r3
 8008bf6:	89fb      	ldrh	r3, [r7, #14]
 8008bf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3714      	adds	r7, #20
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	7b1b      	ldrb	r3, [r3, #12]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f040 809d 	bne.w	8008d66 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	785b      	ldrb	r3, [r3, #1]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d04c      	beq.n	8008cce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	4413      	add	r3, r2
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	823b      	strh	r3, [r7, #16]
 8008c42:	8a3b      	ldrh	r3, [r7, #16]
 8008c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d01b      	beq.n	8008c84 <USB_EPClearStall+0x6c>
 8008c4c:	687a      	ldr	r2, [r7, #4]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	4413      	add	r3, r2
 8008c56:	881b      	ldrh	r3, [r3, #0]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c62:	81fb      	strh	r3, [r7, #14]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	441a      	add	r2, r3
 8008c6e:	89fb      	ldrh	r3, [r7, #14]
 8008c70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c7c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	78db      	ldrb	r3, [r3, #3]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d06c      	beq.n	8008d66 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca2:	81bb      	strh	r3, [r7, #12]
 8008ca4:	89bb      	ldrh	r3, [r7, #12]
 8008ca6:	f083 0320 	eor.w	r3, r3, #32
 8008caa:	81bb      	strh	r3, [r7, #12]
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	441a      	add	r2, r3
 8008cb6:	89bb      	ldrh	r3, [r7, #12]
 8008cb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	8013      	strh	r3, [r2, #0]
 8008ccc:	e04b      	b.n	8008d66 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	82fb      	strh	r3, [r7, #22]
 8008cdc:	8afb      	ldrh	r3, [r7, #22]
 8008cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01b      	beq.n	8008d1e <USB_EPClearStall+0x106>
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cfc:	82bb      	strh	r3, [r7, #20]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	8abb      	ldrh	r3, [r7, #20]
 8008d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d34:	827b      	strh	r3, [r7, #18]
 8008d36:	8a7b      	ldrh	r3, [r7, #18]
 8008d38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d3c:	827b      	strh	r3, [r7, #18]
 8008d3e:	8a7b      	ldrh	r3, [r7, #18]
 8008d40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d44:	827b      	strh	r3, [r7, #18]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8a7b      	ldrh	r3, [r7, #18]
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	371c      	adds	r7, #28
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bc80      	pop	{r7}
 8008d70:	4770      	bx	lr

08008d72 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d72:	b480      	push	{r7}
 8008d74:	b083      	sub	sp, #12
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d103      	bne.n	8008d8c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2280      	movs	r2, #128	; 0x80
 8008d88:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bc80      	pop	{r7}
 8008d96:	4770      	bx	lr

08008d98 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b083      	sub	sp, #12
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	370c      	adds	r7, #12
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bc80      	pop	{r7}
 8008daa:	4770      	bx	lr

08008dac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bc80      	pop	{r7}
 8008dbe:	4770      	bx	lr

08008dc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3714      	adds	r7, #20
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bc80      	pop	{r7}
 8008ddc:	4770      	bx	lr

08008dde <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008dde:	b480      	push	{r7}
 8008de0:	b083      	sub	sp, #12
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008de8:	2300      	movs	r3, #0
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bc80      	pop	{r7}
 8008df2:	4770      	bx	lr

08008df4 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b08d      	sub	sp, #52	; 0x34
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4611      	mov	r1, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	460b      	mov	r3, r1
 8008e04:	80fb      	strh	r3, [r7, #6]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008e0a:	88bb      	ldrh	r3, [r7, #4]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	085b      	lsrs	r3, r3, #1
 8008e10:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	005a      	lsls	r2, r3, #1
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e26:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2c:	e01e      	b.n	8008e6c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e36:	3301      	adds	r3, #1
 8008e38:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	021b      	lsls	r3, r3, #8
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	461a      	mov	r2, r3
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e56:	3302      	adds	r3, #2
 8008e58:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e5c:	3302      	adds	r3, #2
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e62:	3301      	adds	r3, #1
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1dd      	bne.n	8008e2e <USB_WritePMA+0x3a>
  }
}
 8008e72:	bf00      	nop
 8008e74:	bf00      	nop
 8008e76:	3734      	adds	r7, #52	; 0x34
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bc80      	pop	{r7}
 8008e7c:	4770      	bx	lr

08008e7e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b08b      	sub	sp, #44	; 0x2c
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	60f8      	str	r0, [r7, #12]
 8008e86:	60b9      	str	r1, [r7, #8]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	80fb      	strh	r3, [r7, #6]
 8008e90:	4613      	mov	r3, r2
 8008e92:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e94:	88bb      	ldrh	r3, [r7, #4]
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ea4:	88fb      	ldrh	r3, [r7, #6]
 8008ea6:	005a      	lsls	r2, r3, #1
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	4413      	add	r3, r2
 8008eac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eb0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008eb2:	69bb      	ldr	r3, [r7, #24]
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb6:	e01b      	b.n	8008ef0 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	881b      	ldrh	r3, [r3, #0]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	3302      	adds	r3, #2
 8008ec4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ece:	69fb      	ldr	r3, [r7, #28]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	3302      	adds	r3, #2
 8008ee8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eec:	3b01      	subs	r3, #1
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e0      	bne.n	8008eb8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008ef6:	88bb      	ldrh	r3, [r7, #4]
 8008ef8:	f003 0301 	and.w	r3, r3, #1
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d007      	beq.n	8008f12 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008f02:	6a3b      	ldr	r3, [r7, #32]
 8008f04:	881b      	ldrh	r3, [r3, #0]
 8008f06:	b29b      	uxth	r3, r3
 8008f08:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	701a      	strb	r2, [r3, #0]
  }
}
 8008f12:	bf00      	nop
 8008f14:	372c      	adds	r7, #44	; 0x2c
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bc80      	pop	{r7}
 8008f1a:	4770      	bx	lr

08008f1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	460b      	mov	r3, r1
 8008f26:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	7c1b      	ldrb	r3, [r3, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d115      	bne.n	8008f60 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f38:	2202      	movs	r2, #2
 8008f3a:	2181      	movs	r1, #129	; 0x81
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fe86 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	2101      	movs	r1, #1
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 fe7c 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f5e:	e012      	b.n	8008f86 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f60:	2340      	movs	r3, #64	; 0x40
 8008f62:	2202      	movs	r2, #2
 8008f64:	2181      	movs	r1, #129	; 0x81
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f001 fe71 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f72:	2340      	movs	r3, #64	; 0x40
 8008f74:	2202      	movs	r2, #2
 8008f76:	2101      	movs	r1, #1
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f001 fe68 	bl	800ac4e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f86:	2308      	movs	r3, #8
 8008f88:	2203      	movs	r2, #3
 8008f8a:	2182      	movs	r1, #130	; 0x82
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f001 fe5e 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f9c:	f001 ff7e 	bl	800ae9c <USBD_static_malloc>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d102      	bne.n	8008fb8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	73fb      	strb	r3, [r7, #15]
 8008fb6:	e026      	b.n	8009006 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fbe:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7c1b      	ldrb	r3, [r3, #16]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fec:	2101      	movs	r1, #1
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f001 ff1e 	bl	800ae30 <USBD_LL_PrepareReceive>
 8008ff4:	e007      	b.n	8009006 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008ffc:	2340      	movs	r3, #64	; 0x40
 8008ffe:	2101      	movs	r1, #1
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 ff15 	bl	800ae30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009020:	2181      	movs	r1, #129	; 0x81
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fe39 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800902e:	2101      	movs	r1, #1
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f001 fe32 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800903e:	2182      	movs	r1, #130	; 0x82
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 fe2a 	bl	800ac9a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00e      	beq.n	8009074 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009066:	4618      	mov	r0, r3
 8009068:	f001 ff24 	bl	800aeb4 <USBD_static_free>
    pdev->pClassData = NULL;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009074:	7bfb      	ldrb	r3, [r7, #15]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b086      	sub	sp, #24
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800908e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009090:	2300      	movs	r3, #0
 8009092:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009094:	2300      	movs	r3, #0
 8009096:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d039      	beq.n	800911c <USBD_CDC_Setup+0x9e>
 80090a8:	2b20      	cmp	r3, #32
 80090aa:	d17f      	bne.n	80091ac <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	88db      	ldrh	r3, [r3, #6]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d029      	beq.n	8009108 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	b25b      	sxtb	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da11      	bge.n	80090e2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	683a      	ldr	r2, [r7, #0]
 80090c8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80090ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	88d2      	ldrh	r2, [r2, #6]
 80090d0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090d2:	6939      	ldr	r1, [r7, #16]
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	88db      	ldrh	r3, [r3, #6]
 80090d8:	461a      	mov	r2, r3
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f001 fa09 	bl	800a4f2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80090e0:	e06b      	b.n	80091ba <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	785a      	ldrb	r2, [r3, #1]
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	88db      	ldrh	r3, [r3, #6]
 80090f0:	b2da      	uxtb	r2, r3
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090f8:	6939      	ldr	r1, [r7, #16]
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	88db      	ldrh	r3, [r3, #6]
 80090fe:	461a      	mov	r2, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fa24 	bl	800a54e <USBD_CtlPrepareRx>
      break;
 8009106:	e058      	b.n	80091ba <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	683a      	ldr	r2, [r7, #0]
 8009112:	7850      	ldrb	r0, [r2, #1]
 8009114:	2200      	movs	r2, #0
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	4798      	blx	r3
      break;
 800911a:	e04e      	b.n	80091ba <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b0b      	cmp	r3, #11
 8009122:	d02e      	beq.n	8009182 <USBD_CDC_Setup+0x104>
 8009124:	2b0b      	cmp	r3, #11
 8009126:	dc38      	bgt.n	800919a <USBD_CDC_Setup+0x11c>
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <USBD_CDC_Setup+0xb4>
 800912c:	2b0a      	cmp	r3, #10
 800912e:	d014      	beq.n	800915a <USBD_CDC_Setup+0xdc>
 8009130:	e033      	b.n	800919a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009138:	2b03      	cmp	r3, #3
 800913a:	d107      	bne.n	800914c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800913c:	f107 030c 	add.w	r3, r7, #12
 8009140:	2202      	movs	r2, #2
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f001 f9d4 	bl	800a4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800914a:	e02e      	b.n	80091aa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f001 f965 	bl	800a41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009154:	2302      	movs	r3, #2
 8009156:	75fb      	strb	r3, [r7, #23]
          break;
 8009158:	e027      	b.n	80091aa <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009160:	2b03      	cmp	r3, #3
 8009162:	d107      	bne.n	8009174 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009164:	f107 030f 	add.w	r3, r7, #15
 8009168:	2201      	movs	r2, #1
 800916a:	4619      	mov	r1, r3
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f001 f9c0 	bl	800a4f2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009172:	e01a      	b.n	80091aa <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009174:	6839      	ldr	r1, [r7, #0]
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f001 f951 	bl	800a41e <USBD_CtlError>
            ret = USBD_FAIL;
 800917c:	2302      	movs	r3, #2
 800917e:	75fb      	strb	r3, [r7, #23]
          break;
 8009180:	e013      	b.n	80091aa <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	2b03      	cmp	r3, #3
 800918a:	d00d      	beq.n	80091a8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800918c:	6839      	ldr	r1, [r7, #0]
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f001 f945 	bl	800a41e <USBD_CtlError>
            ret = USBD_FAIL;
 8009194:	2302      	movs	r3, #2
 8009196:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009198:	e006      	b.n	80091a8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 f93e 	bl	800a41e <USBD_CtlError>
          ret = USBD_FAIL;
 80091a2:	2302      	movs	r3, #2
 80091a4:	75fb      	strb	r3, [r7, #23]
          break;
 80091a6:	e000      	b.n	80091aa <USBD_CDC_Setup+0x12c>
          break;
 80091a8:	bf00      	nop
      }
      break;
 80091aa:	e006      	b.n	80091ba <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80091ac:	6839      	ldr	r1, [r7, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f001 f935 	bl	800a41e <USBD_CtlError>
      ret = USBD_FAIL;
 80091b4:	2302      	movs	r3, #2
 80091b6:	75fb      	strb	r3, [r7, #23]
      break;
 80091b8:	bf00      	nop
  }

  return ret;
 80091ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3718      	adds	r7, #24
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}

080091c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	460b      	mov	r3, r1
 80091ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091de:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d03a      	beq.n	8009260 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091ea:	78fa      	ldrb	r2, [r7, #3]
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	4613      	mov	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4413      	add	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	440b      	add	r3, r1
 80091f8:	331c      	adds	r3, #28
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d029      	beq.n	8009254 <USBD_CDC_DataIn+0x90>
 8009200:	78fa      	ldrb	r2, [r7, #3]
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	440b      	add	r3, r1
 800920e:	331c      	adds	r3, #28
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	78f9      	ldrb	r1, [r7, #3]
 8009214:	68b8      	ldr	r0, [r7, #8]
 8009216:	460b      	mov	r3, r1
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	440b      	add	r3, r1
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4403      	add	r3, r0
 8009220:	3338      	adds	r3, #56	; 0x38
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	fbb2 f1f3 	udiv	r1, r2, r3
 8009228:	fb01 f303 	mul.w	r3, r1, r3
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	2b00      	cmp	r3, #0
 8009230:	d110      	bne.n	8009254 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	331c      	adds	r3, #28
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009246:	78f9      	ldrb	r1, [r7, #3]
 8009248:	2300      	movs	r3, #0
 800924a:	2200      	movs	r2, #0
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f001 fdcc 	bl	800adea <USBD_LL_Transmit>
 8009252:	e003      	b.n	800925c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800925c:	2300      	movs	r3, #0
 800925e:	e000      	b.n	8009262 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009260:	2302      	movs	r3, #2
  }
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b084      	sub	sp, #16
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800927c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800927e:	78fb      	ldrb	r3, [r7, #3]
 8009280:	4619      	mov	r1, r3
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 fdf7 	bl	800ae76 <USBD_LL_GetRxDataSize>
 8009288:	4602      	mov	r2, r0
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00d      	beq.n	80092b6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80092ae:	4611      	mov	r1, r2
 80092b0:	4798      	blx	r3

    return USBD_OK;
 80092b2:	2300      	movs	r3, #0
 80092b4:	e000      	b.n	80092b8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80092b6:	2302      	movs	r3, #2
  }
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d015      	beq.n	8009306 <USBD_CDC_EP0_RxReady+0x46>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80092e0:	2bff      	cmp	r3, #255	; 0xff
 80092e2:	d010      	beq.n	8009306 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092fa:	b292      	uxth	r2, r2
 80092fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	22ff      	movs	r2, #255	; 0xff
 8009302:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009310:	b480      	push	{r7}
 8009312:	b083      	sub	sp, #12
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2243      	movs	r2, #67	; 0x43
 800931c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800931e:	4b03      	ldr	r3, [pc, #12]	; (800932c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009320:	4618      	mov	r0, r3
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	bc80      	pop	{r7}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	200000b0 	.word	0x200000b0

08009330 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2243      	movs	r2, #67	; 0x43
 800933c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800933e:	4b03      	ldr	r3, [pc, #12]	; (800934c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009340:	4618      	mov	r0, r3
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	2000006c 	.word	0x2000006c

08009350 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2243      	movs	r2, #67	; 0x43
 800935c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800935e:	4b03      	ldr	r3, [pc, #12]	; (800936c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop
 800936c:	200000f4 	.word	0x200000f4

08009370 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	220a      	movs	r2, #10
 800937c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800937e:	4b03      	ldr	r3, [pc, #12]	; (800938c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009380:	4618      	mov	r0, r3
 8009382:	370c      	adds	r7, #12
 8009384:	46bd      	mov	sp, r7
 8009386:	bc80      	pop	{r7}
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000028 	.word	0x20000028

08009390 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800939a:	2302      	movs	r3, #2
 800939c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80093ac:	2300      	movs	r3, #0
 80093ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80093b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3714      	adds	r7, #20
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bc80      	pop	{r7}
 80093ba:	4770      	bx	lr

080093bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	4613      	mov	r3, r2
 80093c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80093da:	88fa      	ldrh	r2, [r7, #6]
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	371c      	adds	r7, #28
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr

080093ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b085      	sub	sp, #20
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
 80093f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	683a      	ldr	r2, [r7, #0]
 8009404:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3714      	adds	r7, #20
 800940e:	46bd      	mov	sp, r7
 8009410:	bc80      	pop	{r7}
 8009412:	4770      	bx	lr

08009414 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009422:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800942a:	2b00      	cmp	r3, #0
 800942c:	d01c      	beq.n	8009468 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009434:	2b00      	cmp	r3, #0
 8009436:	d115      	bne.n	8009464 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2201      	movs	r2, #1
 800943c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009456:	b29b      	uxth	r3, r3
 8009458:	2181      	movs	r1, #129	; 0x81
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f001 fcc5 	bl	800adea <USBD_LL_Transmit>

      return USBD_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e002      	b.n	800946a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009464:	2301      	movs	r3, #1
 8009466:	e000      	b.n	800946a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009468:	2302      	movs	r3, #2
  }
}
 800946a:	4618      	mov	r0, r3
 800946c:	3710      	adds	r7, #16
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b084      	sub	sp, #16
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009480:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009488:	2b00      	cmp	r3, #0
 800948a:	d017      	beq.n	80094bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7c1b      	ldrb	r3, [r3, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d109      	bne.n	80094a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800949a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800949e:	2101      	movs	r1, #1
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f001 fcc5 	bl	800ae30 <USBD_LL_PrepareReceive>
 80094a6:	e007      	b.n	80094b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094ae:	2340      	movs	r3, #64	; 0x40
 80094b0:	2101      	movs	r1, #1
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f001 fcbc 	bl	800ae30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	e000      	b.n	80094be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80094bc:	2302      	movs	r3, #2
  }
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	60f8      	str	r0, [r7, #12]
 80094ce:	60b9      	str	r1, [r7, #8]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80094da:	2302      	movs	r3, #2
 80094dc:	e01a      	b.n	8009514 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d003      	beq.n	80094f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	79fa      	ldrb	r2, [r7, #7]
 800950a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f001 fb29 	bl	800ab64 <USBD_LL_Init>

  return USBD_OK;
 8009512:	2300      	movs	r3, #0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d006      	beq.n	800953e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009538:	2300      	movs	r3, #0
 800953a:	73fb      	strb	r3, [r7, #15]
 800953c:	e001      	b.n	8009542 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800953e:	2302      	movs	r3, #2
 8009540:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009542:	7bfb      	ldrb	r3, [r7, #15]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr

0800954e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f001 fb5e 	bl	800ac18 <USBD_LL_Start>

  return USBD_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009566:	b480      	push	{r7}
 8009568:	b083      	sub	sp, #12
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	bc80      	pop	{r7}
 8009578:	4770      	bx	lr

0800957a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b084      	sub	sp, #16
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009586:	2302      	movs	r3, #2
 8009588:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00c      	beq.n	80095ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	78fa      	ldrb	r2, [r7, #3]
 800959e:	4611      	mov	r1, r2
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d101      	bne.n	80095ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80095ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	460b      	mov	r3, r1
 80095c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	4611      	mov	r1, r2
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	4798      	blx	r3

  return USBD_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f000 fed8 	bl	800a3a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009604:	461a      	mov	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009612:	f003 031f 	and.w	r3, r3, #31
 8009616:	2b02      	cmp	r3, #2
 8009618:	d016      	beq.n	8009648 <USBD_LL_SetupStage+0x6a>
 800961a:	2b02      	cmp	r3, #2
 800961c:	d81c      	bhi.n	8009658 <USBD_LL_SetupStage+0x7a>
 800961e:	2b00      	cmp	r3, #0
 8009620:	d002      	beq.n	8009628 <USBD_LL_SetupStage+0x4a>
 8009622:	2b01      	cmp	r3, #1
 8009624:	d008      	beq.n	8009638 <USBD_LL_SetupStage+0x5a>
 8009626:	e017      	b.n	8009658 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f9cb 	bl	80099cc <USBD_StdDevReq>
      break;
 8009636:	e01a      	b.n	800966e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800963e:	4619      	mov	r1, r3
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 fa2d 	bl	8009aa0 <USBD_StdItfReq>
      break;
 8009646:	e012      	b.n	800966e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fa6d 	bl	8009b30 <USBD_StdEPReq>
      break;
 8009656:	e00a      	b.n	800966e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800965e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009662:	b2db      	uxtb	r3, r3
 8009664:	4619      	mov	r1, r3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f001 fb36 	bl	800acd8 <USBD_LL_StallEP>
      break;
 800966c:	bf00      	nop
  }

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	460b      	mov	r3, r1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d14b      	bne.n	8009724 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009692:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800969a:	2b03      	cmp	r3, #3
 800969c:	d134      	bne.n	8009708 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	68da      	ldr	r2, [r3, #12]
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d919      	bls.n	80096de <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	68da      	ldr	r2, [r3, #12]
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	1ad2      	subs	r2, r2, r3
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d203      	bcs.n	80096cc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	e002      	b.n	80096d2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	6879      	ldr	r1, [r7, #4]
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 ff57 	bl	800a58a <USBD_CtlContinueRx>
 80096dc:	e038      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e4:	691b      	ldr	r3, [r3, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d00a      	beq.n	8009700 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d105      	bne.n	8009700 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 ff54 	bl	800a5ae <USBD_CtlSendStatus>
 8009706:	e023      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800970e:	2b05      	cmp	r3, #5
 8009710:	d11e      	bne.n	8009750 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800971a:	2100      	movs	r1, #0
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f001 fadb 	bl	800acd8 <USBD_LL_StallEP>
 8009722:	e015      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00d      	beq.n	800974c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009736:	2b03      	cmp	r3, #3
 8009738:	d108      	bne.n	800974c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	7afa      	ldrb	r2, [r7, #11]
 8009744:	4611      	mov	r1, r2
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	4798      	blx	r3
 800974a:	e001      	b.n	8009750 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800974c:	2302      	movs	r3, #2
 800974e:	e000      	b.n	8009752 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3718      	adds	r7, #24
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b086      	sub	sp, #24
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	460b      	mov	r3, r1
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009768:	7afb      	ldrb	r3, [r7, #11]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d17f      	bne.n	800986e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3314      	adds	r3, #20
 8009772:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800977a:	2b02      	cmp	r3, #2
 800977c:	d15c      	bne.n	8009838 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	429a      	cmp	r2, r3
 8009788:	d915      	bls.n	80097b6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	68da      	ldr	r2, [r3, #12]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	1ad2      	subs	r2, r2, r3
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	b29b      	uxth	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	6879      	ldr	r1, [r7, #4]
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 fec1 	bl	800a52a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097a8:	2300      	movs	r3, #0
 80097aa:	2200      	movs	r2, #0
 80097ac:	2100      	movs	r1, #0
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f001 fb3e 	bl	800ae30 <USBD_LL_PrepareReceive>
 80097b4:	e04e      	b.n	8009854 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	697a      	ldr	r2, [r7, #20]
 80097bc:	6912      	ldr	r2, [r2, #16]
 80097be:	fbb3 f1f2 	udiv	r1, r3, r2
 80097c2:	fb01 f202 	mul.w	r2, r1, r2
 80097c6:	1a9b      	subs	r3, r3, r2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d11c      	bne.n	8009806 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	689a      	ldr	r2, [r3, #8]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d316      	bcc.n	8009806 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	689a      	ldr	r2, [r3, #8]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d20f      	bcs.n	8009806 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097e6:	2200      	movs	r2, #0
 80097e8:	2100      	movs	r1, #0
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 fe9d 	bl	800a52a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097f8:	2300      	movs	r3, #0
 80097fa:	2200      	movs	r2, #0
 80097fc:	2100      	movs	r1, #0
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f001 fb16 	bl	800ae30 <USBD_LL_PrepareReceive>
 8009804:	e026      	b.n	8009854 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d00a      	beq.n	8009828 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009818:	2b03      	cmp	r3, #3
 800981a:	d105      	bne.n	8009828 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009822:	68db      	ldr	r3, [r3, #12]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009828:	2180      	movs	r1, #128	; 0x80
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f001 fa54 	bl	800acd8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fecf 	bl	800a5d4 <USBD_CtlReceiveStatus>
 8009836:	e00d      	b.n	8009854 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800983e:	2b04      	cmp	r3, #4
 8009840:	d004      	beq.n	800984c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800984c:	2180      	movs	r1, #128	; 0x80
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f001 fa42 	bl	800acd8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800985a:	2b01      	cmp	r3, #1
 800985c:	d11d      	bne.n	800989a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f7ff fe81 	bl	8009566 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800986c:	e015      	b.n	800989a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009880:	2b03      	cmp	r3, #3
 8009882:	d108      	bne.n	8009896 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	7afa      	ldrb	r2, [r7, #11]
 800988e:	4611      	mov	r1, r2
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	4798      	blx	r3
 8009894:	e001      	b.n	800989a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009896:	2302      	movs	r3, #2
 8009898:	e000      	b.n	800989c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098ac:	2340      	movs	r3, #64	; 0x40
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 f9cb 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2240      	movs	r2, #64	; 0x40
 80098c4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80098c8:	2340      	movs	r3, #64	; 0x40
 80098ca:	2200      	movs	r2, #0
 80098cc:	2180      	movs	r1, #128	; 0x80
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 f9bd 	bl	800ac4e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2240      	movs	r2, #64	; 0x40
 80098de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009904:	2b00      	cmp	r3, #0
 8009906:	d009      	beq.n	800991c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	6852      	ldr	r2, [r2, #4]
 8009914:	b2d2      	uxtb	r2, r2
 8009916:	4611      	mov	r1, r2
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	4798      	blx	r3
  }

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}

08009926 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009926:	b480      	push	{r7}
 8009928:	b083      	sub	sp, #12
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	370c      	adds	r7, #12
 800993e:	46bd      	mov	sp, r7
 8009940:	bc80      	pop	{r7}
 8009942:	4770      	bx	lr

08009944 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2204      	movs	r2, #4
 800995c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	bc80      	pop	{r7}
 800996a:	4770      	bx	lr

0800996c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800997a:	2b04      	cmp	r3, #4
 800997c:	d105      	bne.n	800998a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	bc80      	pop	{r7}
 8009994:	4770      	bx	lr

08009996 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d10b      	bne.n	80099c0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	69db      	ldr	r3, [r3, #28]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3708      	adds	r7, #8
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099d6:	2300      	movs	r3, #0
 80099d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e2:	2b40      	cmp	r3, #64	; 0x40
 80099e4:	d005      	beq.n	80099f2 <USBD_StdDevReq+0x26>
 80099e6:	2b40      	cmp	r3, #64	; 0x40
 80099e8:	d84f      	bhi.n	8009a8a <USBD_StdDevReq+0xbe>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d009      	beq.n	8009a02 <USBD_StdDevReq+0x36>
 80099ee:	2b20      	cmp	r3, #32
 80099f0:	d14b      	bne.n	8009a8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	6839      	ldr	r1, [r7, #0]
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	4798      	blx	r3
      break;
 8009a00:	e048      	b.n	8009a94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b09      	cmp	r3, #9
 8009a08:	d839      	bhi.n	8009a7e <USBD_StdDevReq+0xb2>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <USBD_StdDevReq+0x44>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a61 	.word	0x08009a61
 8009a14:	08009a75 	.word	0x08009a75
 8009a18:	08009a7f 	.word	0x08009a7f
 8009a1c:	08009a6b 	.word	0x08009a6b
 8009a20:	08009a7f 	.word	0x08009a7f
 8009a24:	08009a43 	.word	0x08009a43
 8009a28:	08009a39 	.word	0x08009a39
 8009a2c:	08009a7f 	.word	0x08009a7f
 8009a30:	08009a57 	.word	0x08009a57
 8009a34:	08009a4d 	.word	0x08009a4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9dc 	bl	8009df8 <USBD_GetDescriptor>
          break;
 8009a40:	e022      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fb3f 	bl	800a0c8 <USBD_SetAddress>
          break;
 8009a4a:	e01d      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb7e 	bl	800a150 <USBD_SetConfig>
          break;
 8009a54:	e018      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fc07 	bl	800a26c <USBD_GetConfig>
          break;
 8009a5e:	e013      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 fc37 	bl	800a2d6 <USBD_GetStatus>
          break;
 8009a68:	e00e      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 fc65 	bl	800a33c <USBD_SetFeature>
          break;
 8009a72:	e009      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fc74 	bl	800a364 <USBD_ClrFeature>
          break;
 8009a7c:	e004      	b.n	8009a88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fccc 	bl	800a41e <USBD_CtlError>
          break;
 8009a86:	bf00      	nop
      }
      break;
 8009a88:	e004      	b.n	8009a94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fcc6 	bl	800a41e <USBD_CtlError>
      break;
 8009a92:	bf00      	nop
  }

  return ret;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop

08009aa0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	781b      	ldrb	r3, [r3, #0]
 8009ab2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ab6:	2b40      	cmp	r3, #64	; 0x40
 8009ab8:	d005      	beq.n	8009ac6 <USBD_StdItfReq+0x26>
 8009aba:	2b40      	cmp	r3, #64	; 0x40
 8009abc:	d82e      	bhi.n	8009b1c <USBD_StdItfReq+0x7c>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <USBD_StdItfReq+0x26>
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d12a      	bne.n	8009b1c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009acc:	3b01      	subs	r3, #1
 8009ace:	2b02      	cmp	r3, #2
 8009ad0:	d81d      	bhi.n	8009b0e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	889b      	ldrh	r3, [r3, #4]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d813      	bhi.n	8009b04 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	88db      	ldrh	r3, [r3, #6]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d110      	bne.n	8009b18 <USBD_StdItfReq+0x78>
 8009af6:	7bfb      	ldrb	r3, [r7, #15]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10d      	bne.n	8009b18 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fd56 	bl	800a5ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009b02:	e009      	b.n	8009b18 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009b04:	6839      	ldr	r1, [r7, #0]
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fc89 	bl	800a41e <USBD_CtlError>
          break;
 8009b0c:	e004      	b.n	8009b18 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fc84 	bl	800a41e <USBD_CtlError>
          break;
 8009b16:	e000      	b.n	8009b1a <USBD_StdItfReq+0x7a>
          break;
 8009b18:	bf00      	nop
      }
      break;
 8009b1a:	e004      	b.n	8009b26 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc7d 	bl	800a41e <USBD_CtlError>
      break;
 8009b24:	bf00      	nop
  }

  return USBD_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	889b      	ldrh	r3, [r3, #4]
 8009b42:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b4c:	2b40      	cmp	r3, #64	; 0x40
 8009b4e:	d007      	beq.n	8009b60 <USBD_StdEPReq+0x30>
 8009b50:	2b40      	cmp	r3, #64	; 0x40
 8009b52:	f200 8146 	bhi.w	8009de2 <USBD_StdEPReq+0x2b2>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <USBD_StdEPReq+0x40>
 8009b5a:	2b20      	cmp	r3, #32
 8009b5c:	f040 8141 	bne.w	8009de2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	4798      	blx	r3
      break;
 8009b6e:	e13d      	b.n	8009dec <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b78:	2b20      	cmp	r3, #32
 8009b7a:	d10a      	bne.n	8009b92 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	6839      	ldr	r1, [r7, #0]
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	4798      	blx	r3
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b8e:	7bfb      	ldrb	r3, [r7, #15]
 8009b90:	e12d      	b.n	8009dee <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d007      	beq.n	8009baa <USBD_StdEPReq+0x7a>
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	f300 811b 	bgt.w	8009dd6 <USBD_StdEPReq+0x2a6>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d072      	beq.n	8009c8a <USBD_StdEPReq+0x15a>
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d03a      	beq.n	8009c1e <USBD_StdEPReq+0xee>
 8009ba8:	e115      	b.n	8009dd6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bb0:	2b02      	cmp	r3, #2
 8009bb2:	d002      	beq.n	8009bba <USBD_StdEPReq+0x8a>
 8009bb4:	2b03      	cmp	r3, #3
 8009bb6:	d015      	beq.n	8009be4 <USBD_StdEPReq+0xb4>
 8009bb8:	e02b      	b.n	8009c12 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bba:	7bbb      	ldrb	r3, [r7, #14]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00c      	beq.n	8009bda <USBD_StdEPReq+0xaa>
 8009bc0:	7bbb      	ldrb	r3, [r7, #14]
 8009bc2:	2b80      	cmp	r3, #128	; 0x80
 8009bc4:	d009      	beq.n	8009bda <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f001 f884 	bl	800acd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009bd0:	2180      	movs	r1, #128	; 0x80
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f001 f880 	bl	800acd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bd8:	e020      	b.n	8009c1c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 fc1e 	bl	800a41e <USBD_CtlError>
              break;
 8009be2:	e01b      	b.n	8009c1c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	885b      	ldrh	r3, [r3, #2]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10e      	bne.n	8009c0a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009bec:	7bbb      	ldrb	r3, [r7, #14]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <USBD_StdEPReq+0xda>
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
 8009bf4:	2b80      	cmp	r3, #128	; 0x80
 8009bf6:	d008      	beq.n	8009c0a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	88db      	ldrh	r3, [r3, #6]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d104      	bne.n	8009c0a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009c00:	7bbb      	ldrb	r3, [r7, #14]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f001 f867 	bl	800acd8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 fccf 	bl	800a5ae <USBD_CtlSendStatus>

              break;
 8009c10:	e004      	b.n	8009c1c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fc02 	bl	800a41e <USBD_CtlError>
              break;
 8009c1a:	bf00      	nop
          }
          break;
 8009c1c:	e0e0      	b.n	8009de0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d002      	beq.n	8009c2e <USBD_StdEPReq+0xfe>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d015      	beq.n	8009c58 <USBD_StdEPReq+0x128>
 8009c2c:	e026      	b.n	8009c7c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c2e:	7bbb      	ldrb	r3, [r7, #14]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00c      	beq.n	8009c4e <USBD_StdEPReq+0x11e>
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b80      	cmp	r3, #128	; 0x80
 8009c38:	d009      	beq.n	8009c4e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009c3a:	7bbb      	ldrb	r3, [r7, #14]
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f001 f84a 	bl	800acd8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c44:	2180      	movs	r1, #128	; 0x80
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f846 	bl	800acd8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c4c:	e01c      	b.n	8009c88 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 fbe4 	bl	800a41e <USBD_CtlError>
              break;
 8009c56:	e017      	b.n	8009c88 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	885b      	ldrh	r3, [r3, #2]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d112      	bne.n	8009c86 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c60:	7bbb      	ldrb	r3, [r7, #14]
 8009c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d004      	beq.n	8009c74 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c6a:	7bbb      	ldrb	r3, [r7, #14]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f001 f851 	bl	800ad16 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fc9a 	bl	800a5ae <USBD_CtlSendStatus>
              }
              break;
 8009c7a:	e004      	b.n	8009c86 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c7c:	6839      	ldr	r1, [r7, #0]
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fbcd 	bl	800a41e <USBD_CtlError>
              break;
 8009c84:	e000      	b.n	8009c88 <USBD_StdEPReq+0x158>
              break;
 8009c86:	bf00      	nop
          }
          break;
 8009c88:	e0aa      	b.n	8009de0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d002      	beq.n	8009c9a <USBD_StdEPReq+0x16a>
 8009c94:	2b03      	cmp	r3, #3
 8009c96:	d032      	beq.n	8009cfe <USBD_StdEPReq+0x1ce>
 8009c98:	e097      	b.n	8009dca <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d007      	beq.n	8009cb0 <USBD_StdEPReq+0x180>
 8009ca0:	7bbb      	ldrb	r3, [r7, #14]
 8009ca2:	2b80      	cmp	r3, #128	; 0x80
 8009ca4:	d004      	beq.n	8009cb0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009ca6:	6839      	ldr	r1, [r7, #0]
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fbb8 	bl	800a41e <USBD_CtlError>
                break;
 8009cae:	e091      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	da0b      	bge.n	8009cd0 <USBD_StdEPReq+0x1a0>
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
 8009cba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	3310      	adds	r3, #16
 8009cc8:	687a      	ldr	r2, [r7, #4]
 8009cca:	4413      	add	r3, r2
 8009ccc:	3304      	adds	r3, #4
 8009cce:	e00b      	b.n	8009ce8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009cd0:	7bbb      	ldrb	r3, [r7, #14]
 8009cd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	3304      	adds	r3, #4
 8009ce8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	2200      	movs	r2, #0
 8009cee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 fbfb 	bl	800a4f2 <USBD_CtlSendData>
              break;
 8009cfc:	e06a      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	da11      	bge.n	8009d2a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
 8009d08:	f003 020f 	and.w	r2, r3, #15
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	3318      	adds	r3, #24
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d117      	bne.n	8009d50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d20:	6839      	ldr	r1, [r7, #0]
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f000 fb7b 	bl	800a41e <USBD_CtlError>
                  break;
 8009d28:	e054      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	f003 020f 	and.w	r2, r3, #15
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d104      	bne.n	8009d50 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d46:	6839      	ldr	r1, [r7, #0]
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 fb68 	bl	800a41e <USBD_CtlError>
                  break;
 8009d4e:	e041      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	da0b      	bge.n	8009d70 <USBD_StdEPReq+0x240>
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	3310      	adds	r3, #16
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	3304      	adds	r3, #4
 8009d6e:	e00b      	b.n	8009d88 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d70:	7bbb      	ldrb	r3, [r7, #14]
 8009d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d76:	4613      	mov	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	4413      	add	r3, r2
 8009d86:	3304      	adds	r3, #4
 8009d88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d002      	beq.n	8009d96 <USBD_StdEPReq+0x266>
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d103      	bne.n	8009d9e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	601a      	str	r2, [r3, #0]
 8009d9c:	e00e      	b.n	8009dbc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d9e:	7bbb      	ldrb	r3, [r7, #14]
 8009da0:	4619      	mov	r1, r3
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 ffd6 	bl	800ad54 <USBD_LL_IsStallEP>
 8009da8:	4603      	mov	r3, r0
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d003      	beq.n	8009db6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	2201      	movs	r2, #1
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	e002      	b.n	8009dbc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	2200      	movs	r2, #0
 8009dba:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 fb95 	bl	800a4f2 <USBD_CtlSendData>
              break;
 8009dc8:	e004      	b.n	8009dd4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fb26 	bl	800a41e <USBD_CtlError>
              break;
 8009dd2:	bf00      	nop
          }
          break;
 8009dd4:	e004      	b.n	8009de0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009dd6:	6839      	ldr	r1, [r7, #0]
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 fb20 	bl	800a41e <USBD_CtlError>
          break;
 8009dde:	bf00      	nop
      }
      break;
 8009de0:	e004      	b.n	8009dec <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fb1a 	bl	800a41e <USBD_CtlError>
      break;
 8009dea:	bf00      	nop
  }

  return ret;
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
	...

08009df8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e06:	2300      	movs	r3, #0
 8009e08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	885b      	ldrh	r3, [r3, #2]
 8009e12:	0a1b      	lsrs	r3, r3, #8
 8009e14:	b29b      	uxth	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b06      	cmp	r3, #6
 8009e1a:	f200 8128 	bhi.w	800a06e <USBD_GetDescriptor+0x276>
 8009e1e:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <USBD_GetDescriptor+0x2c>)
 8009e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e24:	08009e41 	.word	0x08009e41
 8009e28:	08009e59 	.word	0x08009e59
 8009e2c:	08009e99 	.word	0x08009e99
 8009e30:	0800a06f 	.word	0x0800a06f
 8009e34:	0800a06f 	.word	0x0800a06f
 8009e38:	0800a00f 	.word	0x0800a00f
 8009e3c:	0800a03b 	.word	0x0800a03b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	7c12      	ldrb	r2, [r2, #16]
 8009e4c:	f107 0108 	add.w	r1, r7, #8
 8009e50:	4610      	mov	r0, r2
 8009e52:	4798      	blx	r3
 8009e54:	60f8      	str	r0, [r7, #12]
      break;
 8009e56:	e112      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	7c1b      	ldrb	r3, [r3, #16]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10d      	bne.n	8009e7c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e68:	f107 0208 	add.w	r2, r7, #8
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	4798      	blx	r3
 8009e70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	3301      	adds	r3, #1
 8009e76:	2202      	movs	r2, #2
 8009e78:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e7a:	e100      	b.n	800a07e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e84:	f107 0208 	add.w	r2, r7, #8
 8009e88:	4610      	mov	r0, r2
 8009e8a:	4798      	blx	r3
 8009e8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	2202      	movs	r2, #2
 8009e94:	701a      	strb	r2, [r3, #0]
      break;
 8009e96:	e0f2      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	885b      	ldrh	r3, [r3, #2]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b05      	cmp	r3, #5
 8009ea0:	f200 80ac 	bhi.w	8009ffc <USBD_GetDescriptor+0x204>
 8009ea4:	a201      	add	r2, pc, #4	; (adr r2, 8009eac <USBD_GetDescriptor+0xb4>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ec5 	.word	0x08009ec5
 8009eb0:	08009ef9 	.word	0x08009ef9
 8009eb4:	08009f2d 	.word	0x08009f2d
 8009eb8:	08009f61 	.word	0x08009f61
 8009ebc:	08009f95 	.word	0x08009f95
 8009ec0:	08009fc9 	.word	0x08009fc9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00b      	beq.n	8009ee8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	7c12      	ldrb	r2, [r2, #16]
 8009edc:	f107 0108 	add.w	r1, r7, #8
 8009ee0:	4610      	mov	r0, r2
 8009ee2:	4798      	blx	r3
 8009ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ee6:	e091      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ee8:	6839      	ldr	r1, [r7, #0]
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 fa97 	bl	800a41e <USBD_CtlError>
            err++;
 8009ef0:	7afb      	ldrb	r3, [r7, #11]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ef6:	e089      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	7c12      	ldrb	r2, [r2, #16]
 8009f10:	f107 0108 	add.w	r1, r7, #8
 8009f14:	4610      	mov	r0, r2
 8009f16:	4798      	blx	r3
 8009f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1a:	e077      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 fa7d 	bl	800a41e <USBD_CtlError>
            err++;
 8009f24:	7afb      	ldrb	r3, [r7, #11]
 8009f26:	3301      	adds	r3, #1
 8009f28:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2a:	e06f      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00b      	beq.n	8009f50 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	7c12      	ldrb	r2, [r2, #16]
 8009f44:	f107 0108 	add.w	r1, r7, #8
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4e:	e05d      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fa63 	bl	800a41e <USBD_CtlError>
            err++;
 8009f58:	7afb      	ldrb	r3, [r7, #11]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5e:	e055      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00b      	beq.n	8009f84 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	7c12      	ldrb	r2, [r2, #16]
 8009f78:	f107 0108 	add.w	r1, r7, #8
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
 8009f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f82:	e043      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fa49 	bl	800a41e <USBD_CtlError>
            err++;
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	72fb      	strb	r3, [r7, #11]
          break;
 8009f92:	e03b      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f9a:	695b      	ldr	r3, [r3, #20]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00b      	beq.n	8009fb8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fa6:	695b      	ldr	r3, [r3, #20]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7c12      	ldrb	r2, [r2, #16]
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fb6:	e029      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa2f 	bl	800a41e <USBD_CtlError>
            err++;
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fc6:	e021      	b.n	800a00c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	7c12      	ldrb	r2, [r2, #16]
 8009fe0:	f107 0108 	add.w	r1, r7, #8
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
 8009fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fea:	e00f      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa15 	bl	800a41e <USBD_CtlError>
            err++;
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ffa:	e007      	b.n	800a00c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa0d 	bl	800a41e <USBD_CtlError>
          err++;
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	3301      	adds	r3, #1
 800a008:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a00a:	e038      	b.n	800a07e <USBD_GetDescriptor+0x286>
 800a00c:	e037      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	7c1b      	ldrb	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d109      	bne.n	800a02a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	4610      	mov	r0, r2
 800a024:	4798      	blx	r3
 800a026:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a028:	e029      	b.n	800a07e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f9f6 	bl	800a41e <USBD_CtlError>
        err++;
 800a032:	7afb      	ldrb	r3, [r7, #11]
 800a034:	3301      	adds	r3, #1
 800a036:	72fb      	strb	r3, [r7, #11]
      break;
 800a038:	e021      	b.n	800a07e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	7c1b      	ldrb	r3, [r3, #16]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10d      	bne.n	800a05e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a04a:	f107 0208 	add.w	r2, r7, #8
 800a04e:	4610      	mov	r0, r2
 800a050:	4798      	blx	r3
 800a052:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3301      	adds	r3, #1
 800a058:	2207      	movs	r2, #7
 800a05a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a05c:	e00f      	b.n	800a07e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f9dc 	bl	800a41e <USBD_CtlError>
        err++;
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	3301      	adds	r3, #1
 800a06a:	72fb      	strb	r3, [r7, #11]
      break;
 800a06c:	e007      	b.n	800a07e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 f9d4 	bl	800a41e <USBD_CtlError>
      err++;
 800a076:	7afb      	ldrb	r3, [r7, #11]
 800a078:	3301      	adds	r3, #1
 800a07a:	72fb      	strb	r3, [r7, #11]
      break;
 800a07c:	bf00      	nop
  }

  if (err != 0U)
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d11c      	bne.n	800a0be <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a084:	893b      	ldrh	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d011      	beq.n	800a0ae <USBD_GetDescriptor+0x2b6>
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	88db      	ldrh	r3, [r3, #6]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00d      	beq.n	800a0ae <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	88da      	ldrh	r2, [r3, #6]
 800a096:	893b      	ldrh	r3, [r7, #8]
 800a098:	4293      	cmp	r3, r2
 800a09a:	bf28      	it	cs
 800a09c:	4613      	movcs	r3, r2
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0a2:	893b      	ldrh	r3, [r7, #8]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68f9      	ldr	r1, [r7, #12]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 fa22 	bl	800a4f2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	88db      	ldrh	r3, [r3, #6]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d104      	bne.n	800a0c0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa79 	bl	800a5ae <USBD_CtlSendStatus>
 800a0bc:	e000      	b.n	800a0c0 <USBD_GetDescriptor+0x2c8>
    return;
 800a0be:	bf00      	nop
    }
  }
}
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop

0800a0c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b084      	sub	sp, #16
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	889b      	ldrh	r3, [r3, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d130      	bne.n	800a13c <USBD_SetAddress+0x74>
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	88db      	ldrh	r3, [r3, #6]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d12c      	bne.n	800a13c <USBD_SetAddress+0x74>
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	885b      	ldrh	r3, [r3, #2]
 800a0e6:	2b7f      	cmp	r3, #127	; 0x7f
 800a0e8:	d828      	bhi.n	800a13c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	885b      	ldrh	r3, [r3, #2]
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d104      	bne.n	800a10a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a100:	6839      	ldr	r1, [r7, #0]
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f98b 	bl	800a41e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a108:	e01d      	b.n	800a146 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	7bfa      	ldrb	r2, [r7, #15]
 800a10e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a112:	7bfb      	ldrb	r3, [r7, #15]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fe48 	bl	800adac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fa46 	bl	800a5ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a122:	7bfb      	ldrb	r3, [r7, #15]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d004      	beq.n	800a132 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a130:	e009      	b.n	800a146 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a13a:	e004      	b.n	800a146 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a13c:	6839      	ldr	r1, [r7, #0]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f96d 	bl	800a41e <USBD_CtlError>
  }
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	885b      	ldrh	r3, [r3, #2]
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	4b41      	ldr	r3, [pc, #260]	; (800a268 <USBD_SetConfig+0x118>)
 800a162:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a164:	4b40      	ldr	r3, [pc, #256]	; (800a268 <USBD_SetConfig+0x118>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d904      	bls.n	800a176 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a16c:	6839      	ldr	r1, [r7, #0]
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f955 	bl	800a41e <USBD_CtlError>
 800a174:	e075      	b.n	800a262 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d002      	beq.n	800a186 <USBD_SetConfig+0x36>
 800a180:	2b03      	cmp	r3, #3
 800a182:	d023      	beq.n	800a1cc <USBD_SetConfig+0x7c>
 800a184:	e062      	b.n	800a24c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a186:	4b38      	ldr	r3, [pc, #224]	; (800a268 <USBD_SetConfig+0x118>)
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d01a      	beq.n	800a1c4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a18e:	4b36      	ldr	r3, [pc, #216]	; (800a268 <USBD_SetConfig+0x118>)
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2203      	movs	r2, #3
 800a19c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1a0:	4b31      	ldr	r3, [pc, #196]	; (800a268 <USBD_SetConfig+0x118>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff f9e7 	bl	800957a <USBD_SetClassConfig>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b02      	cmp	r3, #2
 800a1b0:	d104      	bne.n	800a1bc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a1b2:	6839      	ldr	r1, [r7, #0]
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f932 	bl	800a41e <USBD_CtlError>
            return;
 800a1ba:	e052      	b.n	800a262 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f000 f9f6 	bl	800a5ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1c2:	e04e      	b.n	800a262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f000 f9f2 	bl	800a5ae <USBD_CtlSendStatus>
        break;
 800a1ca:	e04a      	b.n	800a262 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a1cc:	4b26      	ldr	r3, [pc, #152]	; (800a268 <USBD_SetConfig+0x118>)
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d112      	bne.n	800a1fa <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a1dc:	4b22      	ldr	r3, [pc, #136]	; (800a268 <USBD_SetConfig+0x118>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1e6:	4b20      	ldr	r3, [pc, #128]	; (800a268 <USBD_SetConfig+0x118>)
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f7ff f9e3 	bl	80095b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f9db 	bl	800a5ae <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1f8:	e033      	b.n	800a262 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1fa:	4b1b      	ldr	r3, [pc, #108]	; (800a268 <USBD_SetConfig+0x118>)
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	429a      	cmp	r2, r3
 800a206:	d01d      	beq.n	800a244 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff f9d1 	bl	80095b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a216:	4b14      	ldr	r3, [pc, #80]	; (800a268 <USBD_SetConfig+0x118>)
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	461a      	mov	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a220:	4b11      	ldr	r3, [pc, #68]	; (800a268 <USBD_SetConfig+0x118>)
 800a222:	781b      	ldrb	r3, [r3, #0]
 800a224:	4619      	mov	r1, r3
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f7ff f9a7 	bl	800957a <USBD_SetClassConfig>
 800a22c:	4603      	mov	r3, r0
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d104      	bne.n	800a23c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a232:	6839      	ldr	r1, [r7, #0]
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 f8f2 	bl	800a41e <USBD_CtlError>
            return;
 800a23a:	e012      	b.n	800a262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f9b6 	bl	800a5ae <USBD_CtlSendStatus>
        break;
 800a242:	e00e      	b.n	800a262 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f9b2 	bl	800a5ae <USBD_CtlSendStatus>
        break;
 800a24a:	e00a      	b.n	800a262 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f8e5 	bl	800a41e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a254:	4b04      	ldr	r3, [pc, #16]	; (800a268 <USBD_SetConfig+0x118>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	4619      	mov	r1, r3
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff f9ac 	bl	80095b8 <USBD_ClrClassConfig>
        break;
 800a260:	bf00      	nop
    }
  }
}
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	20000344 	.word	0x20000344

0800a26c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	88db      	ldrh	r3, [r3, #6]
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d004      	beq.n	800a288 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a27e:	6839      	ldr	r1, [r7, #0]
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f000 f8cc 	bl	800a41e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a286:	e022      	b.n	800a2ce <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a28e:	2b02      	cmp	r3, #2
 800a290:	dc02      	bgt.n	800a298 <USBD_GetConfig+0x2c>
 800a292:	2b00      	cmp	r3, #0
 800a294:	dc03      	bgt.n	800a29e <USBD_GetConfig+0x32>
 800a296:	e015      	b.n	800a2c4 <USBD_GetConfig+0x58>
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d00b      	beq.n	800a2b4 <USBD_GetConfig+0x48>
 800a29c:	e012      	b.n	800a2c4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3308      	adds	r3, #8
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	4619      	mov	r1, r3
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f000 f920 	bl	800a4f2 <USBD_CtlSendData>
        break;
 800a2b2:	e00c      	b.n	800a2ce <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f918 	bl	800a4f2 <USBD_CtlSendData>
        break;
 800a2c2:	e004      	b.n	800a2ce <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a2c4:	6839      	ldr	r1, [r7, #0]
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 f8a9 	bl	800a41e <USBD_CtlError>
        break;
 800a2cc:	bf00      	nop
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b082      	sub	sp, #8
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	2b02      	cmp	r3, #2
 800a2ea:	d81e      	bhi.n	800a32a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	88db      	ldrh	r3, [r3, #6]
 800a2f0:	2b02      	cmp	r3, #2
 800a2f2:	d004      	beq.n	800a2fe <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2f4:	6839      	ldr	r1, [r7, #0]
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f891 	bl	800a41e <USBD_CtlError>
        break;
 800a2fc:	e01a      	b.n	800a334 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f043 0202 	orr.w	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	330c      	adds	r3, #12
 800a31e:	2202      	movs	r2, #2
 800a320:	4619      	mov	r1, r3
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f8e5 	bl	800a4f2 <USBD_CtlSendData>
      break;
 800a328:	e004      	b.n	800a334 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 f876 	bl	800a41e <USBD_CtlError>
      break;
 800a332:	bf00      	nop
  }
}
 800a334:	bf00      	nop
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	885b      	ldrh	r3, [r3, #2]
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d106      	bne.n	800a35c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f929 	bl	800a5ae <USBD_CtlSendStatus>
  }
}
 800a35c:	bf00      	nop
 800a35e:	3708      	adds	r7, #8
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b082      	sub	sp, #8
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
 800a36c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a374:	3b01      	subs	r3, #1
 800a376:	2b02      	cmp	r3, #2
 800a378:	d80b      	bhi.n	800a392 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	885b      	ldrh	r3, [r3, #2]
 800a37e:	2b01      	cmp	r3, #1
 800a380:	d10c      	bne.n	800a39c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 f90f 	bl	800a5ae <USBD_CtlSendStatus>
      }
      break;
 800a390:	e004      	b.n	800a39c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a392:	6839      	ldr	r1, [r7, #0]
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f842 	bl	800a41e <USBD_CtlError>
      break;
 800a39a:	e000      	b.n	800a39e <USBD_ClrFeature+0x3a>
      break;
 800a39c:	bf00      	nop
  }
}
 800a39e:	bf00      	nop
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781a      	ldrb	r2, [r3, #0]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	785a      	ldrb	r2, [r3, #1]
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	3303      	adds	r3, #3
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	021b      	lsls	r3, r3, #8
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	b29a      	uxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	b29a      	uxth	r2, r3
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	3305      	adds	r3, #5
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	4413      	add	r3, r2
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	3306      	adds	r3, #6
 800a3fc:	781b      	ldrb	r3, [r3, #0]
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	3307      	adds	r3, #7
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	b29b      	uxth	r3, r3
 800a408:	021b      	lsls	r3, r3, #8
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	4413      	add	r3, r2
 800a40e:	b29a      	uxth	r2, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	80da      	strh	r2, [r3, #6]

}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	bc80      	pop	{r7}
 800a41c:	4770      	bx	lr

0800a41e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b082      	sub	sp, #8
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
 800a426:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a428:	2180      	movs	r1, #128	; 0x80
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 fc54 	bl	800acd8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a430:	2100      	movs	r1, #0
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 fc50 	bl	800acd8 <USBD_LL_StallEP>
}
 800a438:	bf00      	nop
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b086      	sub	sp, #24
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a44c:	2300      	movs	r3, #0
 800a44e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d032      	beq.n	800a4bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 f834 	bl	800a4c4 <USBD_GetLen>
 800a45c:	4603      	mov	r3, r0
 800a45e:	3301      	adds	r3, #1
 800a460:	b29b      	uxth	r3, r3
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	b29a      	uxth	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	75fa      	strb	r2, [r7, #23]
 800a470:	461a      	mov	r2, r3
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	4413      	add	r3, r2
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	7812      	ldrb	r2, [r2, #0]
 800a47a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	75fa      	strb	r2, [r7, #23]
 800a482:	461a      	mov	r2, r3
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4413      	add	r3, r2
 800a488:	2203      	movs	r2, #3
 800a48a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a48c:	e012      	b.n	800a4b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1c5a      	adds	r2, r3, #1
 800a492:	60fa      	str	r2, [r7, #12]
 800a494:	7dfa      	ldrb	r2, [r7, #23]
 800a496:	1c51      	adds	r1, r2, #1
 800a498:	75f9      	strb	r1, [r7, #23]
 800a49a:	4611      	mov	r1, r2
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	440a      	add	r2, r1
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a4a4:	7dfb      	ldrb	r3, [r7, #23]
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	75fa      	strb	r2, [r7, #23]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d1e8      	bne.n	800a48e <USBD_GetString+0x4e>
    }
  }
}
 800a4bc:	bf00      	nop
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a4d0:	e005      	b.n	800a4de <USBD_GetLen+0x1a>
  {
    len++;
 800a4d2:	7bfb      	ldrb	r3, [r7, #15]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3301      	adds	r3, #1
 800a4dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1f5      	bne.n	800a4d2 <USBD_GetLen+0xe>
  }

  return len;
 800a4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	3714      	adds	r7, #20
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	bc80      	pop	{r7}
 800a4f0:	4770      	bx	lr

0800a4f2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2202      	movs	r2, #2
 800a504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a508:	88fa      	ldrh	r2, [r7, #6]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a50e:	88fa      	ldrh	r2, [r7, #6]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a514:	88fb      	ldrh	r3, [r7, #6]
 800a516:	68ba      	ldr	r2, [r7, #8]
 800a518:	2100      	movs	r1, #0
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fc65 	bl	800adea <USBD_LL_Transmit>

  return USBD_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	60f8      	str	r0, [r7, #12]
 800a532:	60b9      	str	r1, [r7, #8]
 800a534:	4613      	mov	r3, r2
 800a536:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a538:	88fb      	ldrh	r3, [r7, #6]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	2100      	movs	r1, #0
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 fc53 	bl	800adea <USBD_LL_Transmit>

  return USBD_OK;
 800a544:	2300      	movs	r3, #0
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b084      	sub	sp, #16
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	4613      	mov	r3, r2
 800a55a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2203      	movs	r2, #3
 800a560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a564:	88fa      	ldrh	r2, [r7, #6]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a56c:	88fa      	ldrh	r2, [r7, #6]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a574:	88fb      	ldrh	r3, [r7, #6]
 800a576:	68ba      	ldr	r2, [r7, #8]
 800a578:	2100      	movs	r1, #0
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	f000 fc58 	bl	800ae30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3710      	adds	r7, #16
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b084      	sub	sp, #16
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	4613      	mov	r3, r2
 800a596:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a598:	88fb      	ldrh	r3, [r7, #6]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f000 fc46 	bl	800ae30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2204      	movs	r2, #4
 800a5ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a5be:	2300      	movs	r3, #0
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fc10 	bl	800adea <USBD_LL_Transmit>

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2205      	movs	r2, #5
 800a5e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	2100      	movs	r1, #0
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fc20 	bl	800ae30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a600:	2200      	movs	r2, #0
 800a602:	4912      	ldr	r1, [pc, #72]	; (800a64c <MX_USB_DEVICE_Init+0x50>)
 800a604:	4812      	ldr	r0, [pc, #72]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a606:	f7fe ff5e 	bl	80094c6 <USBD_Init>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a610:	f7f7 fa62 	bl	8001ad8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a614:	490f      	ldr	r1, [pc, #60]	; (800a654 <MX_USB_DEVICE_Init+0x58>)
 800a616:	480e      	ldr	r0, [pc, #56]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a618:	f7fe ff80 	bl	800951c <USBD_RegisterClass>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a622:	f7f7 fa59 	bl	8001ad8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a626:	490c      	ldr	r1, [pc, #48]	; (800a658 <MX_USB_DEVICE_Init+0x5c>)
 800a628:	4809      	ldr	r0, [pc, #36]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a62a:	f7fe feb1 	bl	8009390 <USBD_CDC_RegisterInterface>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a634:	f7f7 fa50 	bl	8001ad8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a638:	4805      	ldr	r0, [pc, #20]	; (800a650 <MX_USB_DEVICE_Init+0x54>)
 800a63a:	f7fe ff88 	bl	800954e <USBD_Start>
 800a63e:	4603      	mov	r3, r0
 800a640:	2b00      	cmp	r3, #0
 800a642:	d001      	beq.n	800a648 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a644:	f7f7 fa48 	bl	8001ad8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a648:	bf00      	nop
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000148 	.word	0x20000148
 800a650:	20000348 	.word	0x20000348
 800a654:	20000034 	.word	0x20000034
 800a658:	20000138 	.word	0x20000138

0800a65c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a660:	2200      	movs	r2, #0
 800a662:	4905      	ldr	r1, [pc, #20]	; (800a678 <CDC_Init_FS+0x1c>)
 800a664:	4805      	ldr	r0, [pc, #20]	; (800a67c <CDC_Init_FS+0x20>)
 800a666:	f7fe fea9 	bl	80093bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a66a:	4905      	ldr	r1, [pc, #20]	; (800a680 <CDC_Init_FS+0x24>)
 800a66c:	4803      	ldr	r0, [pc, #12]	; (800a67c <CDC_Init_FS+0x20>)
 800a66e:	f7fe febe 	bl	80093ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a672:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a674:	4618      	mov	r0, r3
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20000a0c 	.word	0x20000a0c
 800a67c:	20000348 	.word	0x20000348
 800a680:	2000060c 	.word	0x2000060c

0800a684 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a684:	b480      	push	{r7}
 800a686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a688:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bc80      	pop	{r7}
 800a690:	4770      	bx	lr
	...

0800a694 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	4603      	mov	r3, r0
 800a69c:	6039      	str	r1, [r7, #0]
 800a69e:	71fb      	strb	r3, [r7, #7]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b23      	cmp	r3, #35	; 0x23
 800a6a8:	d84a      	bhi.n	800a740 <CDC_Control_FS+0xac>
 800a6aa:	a201      	add	r2, pc, #4	; (adr r2, 800a6b0 <CDC_Control_FS+0x1c>)
 800a6ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b0:	0800a741 	.word	0x0800a741
 800a6b4:	0800a741 	.word	0x0800a741
 800a6b8:	0800a741 	.word	0x0800a741
 800a6bc:	0800a741 	.word	0x0800a741
 800a6c0:	0800a741 	.word	0x0800a741
 800a6c4:	0800a741 	.word	0x0800a741
 800a6c8:	0800a741 	.word	0x0800a741
 800a6cc:	0800a741 	.word	0x0800a741
 800a6d0:	0800a741 	.word	0x0800a741
 800a6d4:	0800a741 	.word	0x0800a741
 800a6d8:	0800a741 	.word	0x0800a741
 800a6dc:	0800a741 	.word	0x0800a741
 800a6e0:	0800a741 	.word	0x0800a741
 800a6e4:	0800a741 	.word	0x0800a741
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a741 	.word	0x0800a741
 800a6f0:	0800a741 	.word	0x0800a741
 800a6f4:	0800a741 	.word	0x0800a741
 800a6f8:	0800a741 	.word	0x0800a741
 800a6fc:	0800a741 	.word	0x0800a741
 800a700:	0800a741 	.word	0x0800a741
 800a704:	0800a741 	.word	0x0800a741
 800a708:	0800a741 	.word	0x0800a741
 800a70c:	0800a741 	.word	0x0800a741
 800a710:	0800a741 	.word	0x0800a741
 800a714:	0800a741 	.word	0x0800a741
 800a718:	0800a741 	.word	0x0800a741
 800a71c:	0800a741 	.word	0x0800a741
 800a720:	0800a741 	.word	0x0800a741
 800a724:	0800a741 	.word	0x0800a741
 800a728:	0800a741 	.word	0x0800a741
 800a72c:	0800a741 	.word	0x0800a741
 800a730:	0800a741 	.word	0x0800a741
 800a734:	0800a741 	.word	0x0800a741
 800a738:	0800a741 	.word	0x0800a741
 800a73c:	0800a741 	.word	0x0800a741
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a740:	bf00      	nop
  }

  return (USBD_OK);
 800a742:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	bc80      	pop	{r7}
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop

0800a750 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a75a:	6879      	ldr	r1, [r7, #4]
 800a75c:	4805      	ldr	r0, [pc, #20]	; (800a774 <CDC_Receive_FS+0x24>)
 800a75e:	f7fe fe46 	bl	80093ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a762:	4804      	ldr	r0, [pc, #16]	; (800a774 <CDC_Receive_FS+0x24>)
 800a764:	f7fe fe85 	bl	8009472 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a768:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3708      	adds	r7, #8
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20000348 	.word	0x20000348

0800a778 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a788:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <CDC_Transmit_FS+0x48>)
 800a78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a78e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a796:	2b00      	cmp	r3, #0
 800a798:	d001      	beq.n	800a79e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a79a:	2301      	movs	r3, #1
 800a79c:	e00b      	b.n	800a7b6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a79e:	887b      	ldrh	r3, [r7, #2]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6879      	ldr	r1, [r7, #4]
 800a7a4:	4806      	ldr	r0, [pc, #24]	; (800a7c0 <CDC_Transmit_FS+0x48>)
 800a7a6:	f7fe fe09 	bl	80093bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a7aa:	4805      	ldr	r0, [pc, #20]	; (800a7c0 <CDC_Transmit_FS+0x48>)
 800a7ac:	f7fe fe32 	bl	8009414 <USBD_CDC_TransmitPacket>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3710      	adds	r7, #16
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	bd80      	pop	{r7, pc}
 800a7be:	bf00      	nop
 800a7c0:	20000348 	.word	0x20000348

0800a7c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	6039      	str	r1, [r7, #0]
 800a7ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2212      	movs	r2, #18
 800a7d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a7d6:	4b03      	ldr	r3, [pc, #12]	; (800a7e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bc80      	pop	{r7}
 800a7e0:	4770      	bx	lr
 800a7e2:	bf00      	nop
 800a7e4:	20000164 	.word	0x20000164

0800a7e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	2204      	movs	r2, #4
 800a7f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7fa:	4b03      	ldr	r3, [pc, #12]	; (800a808 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	bc80      	pop	{r7}
 800a804:	4770      	bx	lr
 800a806:	bf00      	nop
 800a808:	20000178 	.word	0x20000178

0800a80c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	4603      	mov	r3, r0
 800a814:	6039      	str	r1, [r7, #0]
 800a816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a818:	79fb      	ldrb	r3, [r7, #7]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d105      	bne.n	800a82a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a81e:	683a      	ldr	r2, [r7, #0]
 800a820:	4907      	ldr	r1, [pc, #28]	; (800a840 <USBD_FS_ProductStrDescriptor+0x34>)
 800a822:	4808      	ldr	r0, [pc, #32]	; (800a844 <USBD_FS_ProductStrDescriptor+0x38>)
 800a824:	f7ff fe0c 	bl	800a440 <USBD_GetString>
 800a828:	e004      	b.n	800a834 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	4904      	ldr	r1, [pc, #16]	; (800a840 <USBD_FS_ProductStrDescriptor+0x34>)
 800a82e:	4805      	ldr	r0, [pc, #20]	; (800a844 <USBD_FS_ProductStrDescriptor+0x38>)
 800a830:	f7ff fe06 	bl	800a440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a834:	4b02      	ldr	r3, [pc, #8]	; (800a840 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	20000e0c 	.word	0x20000e0c
 800a844:	0800cc20 	.word	0x0800cc20

0800a848 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b082      	sub	sp, #8
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	4603      	mov	r3, r0
 800a850:	6039      	str	r1, [r7, #0]
 800a852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a854:	683a      	ldr	r2, [r7, #0]
 800a856:	4904      	ldr	r1, [pc, #16]	; (800a868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a858:	4804      	ldr	r0, [pc, #16]	; (800a86c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a85a:	f7ff fdf1 	bl	800a440 <USBD_GetString>
  return USBD_StrDesc;
 800a85e:	4b02      	ldr	r3, [pc, #8]	; (800a868 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a860:	4618      	mov	r0, r3
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	20000e0c 	.word	0x20000e0c
 800a86c:	0800cc34 	.word	0x0800cc34

0800a870 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	6039      	str	r1, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	221a      	movs	r2, #26
 800a880:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a882:	f000 f843 	bl	800a90c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a886:	4b02      	ldr	r3, [pc, #8]	; (800a890 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	2000017c 	.word	0x2000017c

0800a894 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	6039      	str	r1, [r7, #0]
 800a89e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a8a0:	79fb      	ldrb	r3, [r7, #7]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d105      	bne.n	800a8b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	4907      	ldr	r1, [pc, #28]	; (800a8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8aa:	4808      	ldr	r0, [pc, #32]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8ac:	f7ff fdc8 	bl	800a440 <USBD_GetString>
 800a8b0:	e004      	b.n	800a8bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	4904      	ldr	r1, [pc, #16]	; (800a8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a8b6:	4805      	ldr	r0, [pc, #20]	; (800a8cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a8b8:	f7ff fdc2 	bl	800a440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8bc:	4b02      	ldr	r3, [pc, #8]	; (800a8c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3708      	adds	r7, #8
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000e0c 	.word	0x20000e0c
 800a8cc:	0800cc48 	.word	0x0800cc48

0800a8d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	6039      	str	r1, [r7, #0]
 800a8da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8dc:	79fb      	ldrb	r3, [r7, #7]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d105      	bne.n	800a8ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8e2:	683a      	ldr	r2, [r7, #0]
 800a8e4:	4907      	ldr	r1, [pc, #28]	; (800a904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8e6:	4808      	ldr	r0, [pc, #32]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8e8:	f7ff fdaa 	bl	800a440 <USBD_GetString>
 800a8ec:	e004      	b.n	800a8f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8ee:	683a      	ldr	r2, [r7, #0]
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8f2:	4805      	ldr	r0, [pc, #20]	; (800a908 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8f4:	f7ff fda4 	bl	800a440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8f8:	4b02      	ldr	r3, [pc, #8]	; (800a904 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3708      	adds	r7, #8
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20000e0c 	.word	0x20000e0c
 800a908:	0800cc54 	.word	0x0800cc54

0800a90c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a912:	4b0f      	ldr	r3, [pc, #60]	; (800a950 <Get_SerialNum+0x44>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a918:	4b0e      	ldr	r3, [pc, #56]	; (800a954 <Get_SerialNum+0x48>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a91e:	4b0e      	ldr	r3, [pc, #56]	; (800a958 <Get_SerialNum+0x4c>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4413      	add	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d009      	beq.n	800a946 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a932:	2208      	movs	r2, #8
 800a934:	4909      	ldr	r1, [pc, #36]	; (800a95c <Get_SerialNum+0x50>)
 800a936:	68f8      	ldr	r0, [r7, #12]
 800a938:	f000 f814 	bl	800a964 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a93c:	2204      	movs	r2, #4
 800a93e:	4908      	ldr	r1, [pc, #32]	; (800a960 <Get_SerialNum+0x54>)
 800a940:	68b8      	ldr	r0, [r7, #8]
 800a942:	f000 f80f 	bl	800a964 <IntToUnicode>
  }
}
 800a946:	bf00      	nop
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	1ffff7e8 	.word	0x1ffff7e8
 800a954:	1ffff7ec 	.word	0x1ffff7ec
 800a958:	1ffff7f0 	.word	0x1ffff7f0
 800a95c:	2000017e 	.word	0x2000017e
 800a960:	2000018e 	.word	0x2000018e

0800a964 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a964:	b480      	push	{r7}
 800a966:	b087      	sub	sp, #28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	60f8      	str	r0, [r7, #12]
 800a96c:	60b9      	str	r1, [r7, #8]
 800a96e:	4613      	mov	r3, r2
 800a970:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a976:	2300      	movs	r3, #0
 800a978:	75fb      	strb	r3, [r7, #23]
 800a97a:	e027      	b.n	800a9cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	0f1b      	lsrs	r3, r3, #28
 800a980:	2b09      	cmp	r3, #9
 800a982:	d80b      	bhi.n	800a99c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	0f1b      	lsrs	r3, r3, #28
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	7dfb      	ldrb	r3, [r7, #23]
 800a98c:	005b      	lsls	r3, r3, #1
 800a98e:	4619      	mov	r1, r3
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	440b      	add	r3, r1
 800a994:	3230      	adds	r2, #48	; 0x30
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
 800a99a:	e00a      	b.n	800a9b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	0f1b      	lsrs	r3, r3, #28
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3237      	adds	r2, #55	; 0x37
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	011b      	lsls	r3, r3, #4
 800a9b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
 800a9ba:	005b      	lsls	r3, r3, #1
 800a9bc:	3301      	adds	r3, #1
 800a9be:	68ba      	ldr	r2, [r7, #8]
 800a9c0:	4413      	add	r3, r2
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	75fb      	strb	r3, [r7, #23]
 800a9cc:	7dfa      	ldrb	r2, [r7, #23]
 800a9ce:	79fb      	ldrb	r3, [r7, #7]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d3d3      	bcc.n	800a97c <IntToUnicode+0x18>
  }
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bc80      	pop	{r7}
 800a9de:	4770      	bx	lr

0800a9e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a0d      	ldr	r2, [pc, #52]	; (800aa24 <HAL_PCD_MspInit+0x44>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d113      	bne.n	800aa1a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9f2:	4b0d      	ldr	r3, [pc, #52]	; (800aa28 <HAL_PCD_MspInit+0x48>)
 800a9f4:	69db      	ldr	r3, [r3, #28]
 800a9f6:	4a0c      	ldr	r2, [pc, #48]	; (800aa28 <HAL_PCD_MspInit+0x48>)
 800a9f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9fc:	61d3      	str	r3, [r2, #28]
 800a9fe:	4b0a      	ldr	r3, [pc, #40]	; (800aa28 <HAL_PCD_MspInit+0x48>)
 800aa00:	69db      	ldr	r3, [r3, #28]
 800aa02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa06:	60fb      	str	r3, [r7, #12]
 800aa08:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	2014      	movs	r0, #20
 800aa10:	f7f7 fda5 	bl	800255e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800aa14:	2014      	movs	r0, #20
 800aa16:	f7f7 fdbe 	bl	8002596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800aa1a:	bf00      	nop
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	40005c00 	.word	0x40005c00
 800aa28:	40021000 	.word	0x40021000

0800aa2c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800aa40:	4619      	mov	r1, r3
 800aa42:	4610      	mov	r0, r2
 800aa44:	f7fe fdcb 	bl	80095de <USBD_LL_SetupStage>
}
 800aa48:	bf00      	nop
 800aa4a:	3708      	adds	r7, #8
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	460b      	mov	r3, r1
 800aa5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa62:	78fa      	ldrb	r2, [r7, #3]
 800aa64:	6879      	ldr	r1, [r7, #4]
 800aa66:	4613      	mov	r3, r2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	440b      	add	r3, r1
 800aa70:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	78fb      	ldrb	r3, [r7, #3]
 800aa78:	4619      	mov	r1, r3
 800aa7a:	f7fe fdfd 	bl	8009678 <USBD_LL_DataOutStage>
}
 800aa7e:	bf00      	nop
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa98:	78fa      	ldrb	r2, [r7, #3]
 800aa9a:	6879      	ldr	r1, [r7, #4]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	4413      	add	r3, r2
 800aaa2:	00db      	lsls	r3, r3, #3
 800aaa4:	440b      	add	r3, r1
 800aaa6:	333c      	adds	r3, #60	; 0x3c
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	78fb      	ldrb	r3, [r7, #3]
 800aaac:	4619      	mov	r1, r3
 800aaae:	f7fe fe54 	bl	800975a <USBD_LL_DataInStage>
}
 800aab2:	bf00      	nop
 800aab4:	3708      	adds	r7, #8
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}

0800aaba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aaba:	b580      	push	{r7, lr}
 800aabc:	b082      	sub	sp, #8
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7fe ff64 	bl	8009996 <USBD_LL_SOF>
}
 800aace:	bf00      	nop
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aade:	2301      	movs	r3, #1
 800aae0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d001      	beq.n	800aaee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aaea:	f7f6 fff5 	bl	8001ad8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aaf4:	7bfa      	ldrb	r2, [r7, #15]
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f7fe ff14 	bl	8009926 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7fe fecd 	bl	80098a4 <USBD_LL_Reset>
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7fe ff0e 	bl	8009944 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ab30:	4b04      	ldr	r3, [pc, #16]	; (800ab44 <HAL_PCD_SuspendCallback+0x30>)
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	4a03      	ldr	r2, [pc, #12]	; (800ab44 <HAL_PCD_SuspendCallback+0x30>)
 800ab36:	f043 0306 	orr.w	r3, r3, #6
 800ab3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ab3c:	bf00      	nop
 800ab3e:	3708      	adds	r7, #8
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	e000ed00 	.word	0xe000ed00

0800ab48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b082      	sub	sp, #8
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7fe ff08 	bl	800996c <USBD_LL_Resume>
}
 800ab5c:	bf00      	nop
 800ab5e:	3708      	adds	r7, #8
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}

0800ab64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b082      	sub	sp, #8
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab6c:	4a28      	ldr	r2, [pc, #160]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a26      	ldr	r2, [pc, #152]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab78:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab7c:	4b24      	ldr	r3, [pc, #144]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab7e:	4a25      	ldr	r2, [pc, #148]	; (800ac14 <USBD_LL_Init+0xb0>)
 800ab80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab82:	4b23      	ldr	r3, [pc, #140]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab84:	2208      	movs	r2, #8
 800ab86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab88:	4b21      	ldr	r3, [pc, #132]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab8e:	4b20      	ldr	r3, [pc, #128]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab90:	2200      	movs	r2, #0
 800ab92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab94:	4b1e      	ldr	r3, [pc, #120]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab9a:	4b1d      	ldr	r3, [pc, #116]	; (800ac10 <USBD_LL_Init+0xac>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800aba0:	481b      	ldr	r0, [pc, #108]	; (800ac10 <USBD_LL_Init+0xac>)
 800aba2:	f7f7 fec8 	bl	8002936 <HAL_PCD_Init>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d001      	beq.n	800abb0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800abac:	f7f6 ff94 	bl	8001ad8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abb6:	2318      	movs	r3, #24
 800abb8:	2200      	movs	r2, #0
 800abba:	2100      	movs	r1, #0
 800abbc:	f7f9 fb3c 	bl	8004238 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abc6:	2358      	movs	r3, #88	; 0x58
 800abc8:	2200      	movs	r2, #0
 800abca:	2180      	movs	r1, #128	; 0x80
 800abcc:	f7f9 fb34 	bl	8004238 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abd6:	23c0      	movs	r3, #192	; 0xc0
 800abd8:	2200      	movs	r2, #0
 800abda:	2181      	movs	r1, #129	; 0x81
 800abdc:	f7f9 fb2c 	bl	8004238 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abe6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800abea:	2200      	movs	r2, #0
 800abec:	2101      	movs	r1, #1
 800abee:	f7f9 fb23 	bl	8004238 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abfc:	2200      	movs	r2, #0
 800abfe:	2182      	movs	r1, #130	; 0x82
 800ac00:	f7f9 fb1a 	bl	8004238 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3708      	adds	r7, #8
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	2000100c 	.word	0x2000100c
 800ac14:	40005c00 	.word	0x40005c00

0800ac18 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac20:	2300      	movs	r3, #0
 800ac22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7f7 ff8c 	bl	8002b4c <HAL_PCD_Start>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 f94e 	bl	800aedc <USBD_Get_USB_Status>
 800ac40:	4603      	mov	r3, r0
 800ac42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac44:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}

0800ac4e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac4e:	b580      	push	{r7, lr}
 800ac50:	b084      	sub	sp, #16
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
 800ac56:	4608      	mov	r0, r1
 800ac58:	4611      	mov	r1, r2
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	70fb      	strb	r3, [r7, #3]
 800ac60:	460b      	mov	r3, r1
 800ac62:	70bb      	strb	r3, [r7, #2]
 800ac64:	4613      	mov	r3, r2
 800ac66:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac76:	78bb      	ldrb	r3, [r7, #2]
 800ac78:	883a      	ldrh	r2, [r7, #0]
 800ac7a:	78f9      	ldrb	r1, [r7, #3]
 800ac7c:	f7f8 f904 	bl	8002e88 <HAL_PCD_EP_Open>
 800ac80:	4603      	mov	r3, r0
 800ac82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 f928 	bl	800aedc <USBD_Get_USB_Status>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	460b      	mov	r3, r1
 800aca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acb4:	78fa      	ldrb	r2, [r7, #3]
 800acb6:	4611      	mov	r1, r2
 800acb8:	4618      	mov	r0, r3
 800acba:	f7f8 f94b 	bl	8002f54 <HAL_PCD_EP_Close>
 800acbe:	4603      	mov	r3, r0
 800acc0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f909 	bl	800aedc <USBD_Get_USB_Status>
 800acca:	4603      	mov	r3, r0
 800accc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acce:	7bbb      	ldrb	r3, [r7, #14]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	460b      	mov	r3, r1
 800ace2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acf2:	78fa      	ldrb	r2, [r7, #3]
 800acf4:	4611      	mov	r1, r2
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7f8 fa0b 	bl	8003112 <HAL_PCD_EP_SetStall>
 800acfc:	4603      	mov	r3, r0
 800acfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 f8ea 	bl	800aedc <USBD_Get_USB_Status>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad0c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3710      	adds	r7, #16
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b084      	sub	sp, #16
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad22:	2300      	movs	r3, #0
 800ad24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	4611      	mov	r1, r2
 800ad34:	4618      	mov	r0, r3
 800ad36:	f7f8 fa4c 	bl	80031d2 <HAL_PCD_EP_ClrStall>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f000 f8cb 	bl	800aedc <USBD_Get_USB_Status>
 800ad46:	4603      	mov	r3, r0
 800ad48:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3710      	adds	r7, #16
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	460b      	mov	r3, r1
 800ad5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da0c      	bge.n	800ad8a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad76:	68f9      	ldr	r1, [r7, #12]
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	440b      	add	r3, r1
 800ad84:	3302      	adds	r3, #2
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	e00b      	b.n	800ada2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad8a:	78fb      	ldrb	r3, [r7, #3]
 800ad8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad90:	68f9      	ldr	r1, [r7, #12]
 800ad92:	4613      	mov	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	4413      	add	r3, r2
 800ad98:	00db      	lsls	r3, r3, #3
 800ad9a:	440b      	add	r3, r1
 800ad9c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ada0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bc80      	pop	{r7}
 800adaa:	4770      	bx	lr

0800adac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f8 f837 	bl	8002e3e <HAL_PCD_SetAddress>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f880 	bl	800aedc <USBD_Get_USB_Status>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b086      	sub	sp, #24
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	607a      	str	r2, [r7, #4]
 800adf4:	461a      	mov	r2, r3
 800adf6:	460b      	mov	r3, r1
 800adf8:	72fb      	strb	r3, [r7, #11]
 800adfa:	4613      	mov	r3, r2
 800adfc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adfe:	2300      	movs	r3, #0
 800ae00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae0c:	893b      	ldrh	r3, [r7, #8]
 800ae0e:	7af9      	ldrb	r1, [r7, #11]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	f7f8 f93b 	bl	800308c <HAL_PCD_EP_Transmit>
 800ae16:	4603      	mov	r3, r0
 800ae18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1a:	7dfb      	ldrb	r3, [r7, #23]
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f000 f85d 	bl	800aedc <USBD_Get_USB_Status>
 800ae22:	4603      	mov	r3, r0
 800ae24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae26:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3718      	adds	r7, #24
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b086      	sub	sp, #24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	607a      	str	r2, [r7, #4]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	460b      	mov	r3, r1
 800ae3e:	72fb      	strb	r3, [r7, #11]
 800ae40:	4613      	mov	r3, r2
 800ae42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae52:	893b      	ldrh	r3, [r7, #8]
 800ae54:	7af9      	ldrb	r1, [r7, #11]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	f7f8 f8c4 	bl	8002fe4 <HAL_PCD_EP_Receive>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	4618      	mov	r0, r3
 800ae64:	f000 f83a 	bl	800aedc <USBD_Get_USB_Status>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae6c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3718      	adds	r7, #24
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae76:	b580      	push	{r7, lr}
 800ae78:	b082      	sub	sp, #8
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	6078      	str	r0, [r7, #4]
 800ae7e:	460b      	mov	r3, r1
 800ae80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	4611      	mov	r1, r2
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7f8 f8e6 	bl	800305e <HAL_PCD_EP_GetRxCount>
 800ae92:	4603      	mov	r3, r0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3708      	adds	r7, #8
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800aea4:	4b02      	ldr	r3, [pc, #8]	; (800aeb0 <USBD_static_malloc+0x14>)
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bc80      	pop	{r7}
 800aeae:	4770      	bx	lr
 800aeb0:	200012f8 	.word	0x200012f8

0800aeb4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]

}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bc80      	pop	{r7}
 800aec4:	4770      	bx	lr

0800aec6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aec6:	b480      	push	{r7}
 800aec8:	b083      	sub	sp, #12
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
 800aece:	460b      	mov	r3, r1
 800aed0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800aed2:	bf00      	nop
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bc80      	pop	{r7}
 800aeda:	4770      	bx	lr

0800aedc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aedc:	b480      	push	{r7}
 800aede:	b085      	sub	sp, #20
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aee6:	2300      	movs	r3, #0
 800aee8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aeea:	79fb      	ldrb	r3, [r7, #7]
 800aeec:	2b03      	cmp	r3, #3
 800aeee:	d817      	bhi.n	800af20 <USBD_Get_USB_Status+0x44>
 800aef0:	a201      	add	r2, pc, #4	; (adr r2, 800aef8 <USBD_Get_USB_Status+0x1c>)
 800aef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef6:	bf00      	nop
 800aef8:	0800af09 	.word	0x0800af09
 800aefc:	0800af0f 	.word	0x0800af0f
 800af00:	0800af15 	.word	0x0800af15
 800af04:	0800af1b 	.word	0x0800af1b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800af08:	2300      	movs	r3, #0
 800af0a:	73fb      	strb	r3, [r7, #15]
    break;
 800af0c:	e00b      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800af0e:	2302      	movs	r3, #2
 800af10:	73fb      	strb	r3, [r7, #15]
    break;
 800af12:	e008      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800af14:	2301      	movs	r3, #1
 800af16:	73fb      	strb	r3, [r7, #15]
    break;
 800af18:	e005      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800af1a:	2302      	movs	r3, #2
 800af1c:	73fb      	strb	r3, [r7, #15]
    break;
 800af1e:	e002      	b.n	800af26 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800af20:	2302      	movs	r3, #2
 800af22:	73fb      	strb	r3, [r7, #15]
    break;
 800af24:	bf00      	nop
  }
  return usb_status;
 800af26:	7bfb      	ldrb	r3, [r7, #15]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3714      	adds	r7, #20
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bc80      	pop	{r7}
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop

0800af34 <cos>:
 800af34:	b530      	push	{r4, r5, lr}
 800af36:	4a20      	ldr	r2, [pc, #128]	; (800afb8 <cos+0x84>)
 800af38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af3c:	4293      	cmp	r3, r2
 800af3e:	b087      	sub	sp, #28
 800af40:	dc06      	bgt.n	800af50 <cos+0x1c>
 800af42:	2200      	movs	r2, #0
 800af44:	2300      	movs	r3, #0
 800af46:	b007      	add	sp, #28
 800af48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af4c:	f000 bc54 	b.w	800b7f8 <__kernel_cos>
 800af50:	4a1a      	ldr	r2, [pc, #104]	; (800afbc <cos+0x88>)
 800af52:	4293      	cmp	r3, r2
 800af54:	dd05      	ble.n	800af62 <cos+0x2e>
 800af56:	4602      	mov	r2, r0
 800af58:	460b      	mov	r3, r1
 800af5a:	f7f5 f905 	bl	8000168 <__aeabi_dsub>
 800af5e:	b007      	add	sp, #28
 800af60:	bd30      	pop	{r4, r5, pc}
 800af62:	aa02      	add	r2, sp, #8
 800af64:	f000 fa50 	bl	800b408 <__ieee754_rem_pio2>
 800af68:	f000 0003 	and.w	r0, r0, #3
 800af6c:	2801      	cmp	r0, #1
 800af6e:	d009      	beq.n	800af84 <cos+0x50>
 800af70:	2802      	cmp	r0, #2
 800af72:	d011      	beq.n	800af98 <cos+0x64>
 800af74:	b9b8      	cbnz	r0, 800afa6 <cos+0x72>
 800af76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af7e:	f000 fc3b 	bl	800b7f8 <__kernel_cos>
 800af82:	e7ec      	b.n	800af5e <cos+0x2a>
 800af84:	9000      	str	r0, [sp, #0]
 800af86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af8e:	f001 f833 	bl	800bff8 <__kernel_sin>
 800af92:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800af96:	e7e2      	b.n	800af5e <cos+0x2a>
 800af98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afa0:	f000 fc2a 	bl	800b7f8 <__kernel_cos>
 800afa4:	e7f5      	b.n	800af92 <cos+0x5e>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afb2:	f001 f821 	bl	800bff8 <__kernel_sin>
 800afb6:	e7d2      	b.n	800af5e <cos+0x2a>
 800afb8:	3fe921fb 	.word	0x3fe921fb
 800afbc:	7fefffff 	.word	0x7fefffff

0800afc0 <floor>:
 800afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800afc8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800afcc:	2e13      	cmp	r6, #19
 800afce:	4602      	mov	r2, r0
 800afd0:	460b      	mov	r3, r1
 800afd2:	4607      	mov	r7, r0
 800afd4:	460c      	mov	r4, r1
 800afd6:	4605      	mov	r5, r0
 800afd8:	dc33      	bgt.n	800b042 <floor+0x82>
 800afda:	2e00      	cmp	r6, #0
 800afdc:	da14      	bge.n	800b008 <floor+0x48>
 800afde:	a334      	add	r3, pc, #208	; (adr r3, 800b0b0 <floor+0xf0>)
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	f7f5 f8c2 	bl	800016c <__adddf3>
 800afe8:	2200      	movs	r2, #0
 800afea:	2300      	movs	r3, #0
 800afec:	f7f5 fd04 	bl	80009f8 <__aeabi_dcmpgt>
 800aff0:	b138      	cbz	r0, 800b002 <floor+0x42>
 800aff2:	2c00      	cmp	r4, #0
 800aff4:	da58      	bge.n	800b0a8 <floor+0xe8>
 800aff6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800affa:	431d      	orrs	r5, r3
 800affc:	d001      	beq.n	800b002 <floor+0x42>
 800affe:	2500      	movs	r5, #0
 800b000:	4c2d      	ldr	r4, [pc, #180]	; (800b0b8 <floor+0xf8>)
 800b002:	4623      	mov	r3, r4
 800b004:	462f      	mov	r7, r5
 800b006:	e025      	b.n	800b054 <floor+0x94>
 800b008:	4a2c      	ldr	r2, [pc, #176]	; (800b0bc <floor+0xfc>)
 800b00a:	fa42 f806 	asr.w	r8, r2, r6
 800b00e:	ea01 0208 	and.w	r2, r1, r8
 800b012:	4302      	orrs	r2, r0
 800b014:	d01e      	beq.n	800b054 <floor+0x94>
 800b016:	a326      	add	r3, pc, #152	; (adr r3, 800b0b0 <floor+0xf0>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 f8a6 	bl	800016c <__adddf3>
 800b020:	2200      	movs	r2, #0
 800b022:	2300      	movs	r3, #0
 800b024:	f7f5 fce8 	bl	80009f8 <__aeabi_dcmpgt>
 800b028:	2800      	cmp	r0, #0
 800b02a:	d0ea      	beq.n	800b002 <floor+0x42>
 800b02c:	2c00      	cmp	r4, #0
 800b02e:	bfbe      	ittt	lt
 800b030:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b034:	fa43 f606 	asrlt.w	r6, r3, r6
 800b038:	19a4      	addlt	r4, r4, r6
 800b03a:	2500      	movs	r5, #0
 800b03c:	ea24 0408 	bic.w	r4, r4, r8
 800b040:	e7df      	b.n	800b002 <floor+0x42>
 800b042:	2e33      	cmp	r6, #51	; 0x33
 800b044:	dd0a      	ble.n	800b05c <floor+0x9c>
 800b046:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b04a:	d103      	bne.n	800b054 <floor+0x94>
 800b04c:	f7f5 f88e 	bl	800016c <__adddf3>
 800b050:	4607      	mov	r7, r0
 800b052:	460b      	mov	r3, r1
 800b054:	4638      	mov	r0, r7
 800b056:	4619      	mov	r1, r3
 800b058:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b05c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b060:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b064:	fa22 f808 	lsr.w	r8, r2, r8
 800b068:	ea18 0f00 	tst.w	r8, r0
 800b06c:	d0f2      	beq.n	800b054 <floor+0x94>
 800b06e:	a310      	add	r3, pc, #64	; (adr r3, 800b0b0 <floor+0xf0>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 f87a 	bl	800016c <__adddf3>
 800b078:	2200      	movs	r2, #0
 800b07a:	2300      	movs	r3, #0
 800b07c:	f7f5 fcbc 	bl	80009f8 <__aeabi_dcmpgt>
 800b080:	2800      	cmp	r0, #0
 800b082:	d0be      	beq.n	800b002 <floor+0x42>
 800b084:	2c00      	cmp	r4, #0
 800b086:	da02      	bge.n	800b08e <floor+0xce>
 800b088:	2e14      	cmp	r6, #20
 800b08a:	d103      	bne.n	800b094 <floor+0xd4>
 800b08c:	3401      	adds	r4, #1
 800b08e:	ea25 0508 	bic.w	r5, r5, r8
 800b092:	e7b6      	b.n	800b002 <floor+0x42>
 800b094:	2301      	movs	r3, #1
 800b096:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b09a:	fa03 f606 	lsl.w	r6, r3, r6
 800b09e:	4435      	add	r5, r6
 800b0a0:	42bd      	cmp	r5, r7
 800b0a2:	bf38      	it	cc
 800b0a4:	18e4      	addcc	r4, r4, r3
 800b0a6:	e7f2      	b.n	800b08e <floor+0xce>
 800b0a8:	2500      	movs	r5, #0
 800b0aa:	462c      	mov	r4, r5
 800b0ac:	e7a9      	b.n	800b002 <floor+0x42>
 800b0ae:	bf00      	nop
 800b0b0:	8800759c 	.word	0x8800759c
 800b0b4:	7e37e43c 	.word	0x7e37e43c
 800b0b8:	bff00000 	.word	0xbff00000
 800b0bc:	000fffff 	.word	0x000fffff

0800b0c0 <sin>:
 800b0c0:	b530      	push	{r4, r5, lr}
 800b0c2:	4a20      	ldr	r2, [pc, #128]	; (800b144 <sin+0x84>)
 800b0c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	dc06      	bgt.n	800b0dc <sin+0x1c>
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	9300      	str	r3, [sp, #0]
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f000 ff8f 	bl	800bff8 <__kernel_sin>
 800b0da:	e006      	b.n	800b0ea <sin+0x2a>
 800b0dc:	4a1a      	ldr	r2, [pc, #104]	; (800b148 <sin+0x88>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	dd05      	ble.n	800b0ee <sin+0x2e>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	f7f5 f83f 	bl	8000168 <__aeabi_dsub>
 800b0ea:	b007      	add	sp, #28
 800b0ec:	bd30      	pop	{r4, r5, pc}
 800b0ee:	aa02      	add	r2, sp, #8
 800b0f0:	f000 f98a 	bl	800b408 <__ieee754_rem_pio2>
 800b0f4:	f000 0003 	and.w	r0, r0, #3
 800b0f8:	2801      	cmp	r0, #1
 800b0fa:	d009      	beq.n	800b110 <sin+0x50>
 800b0fc:	2802      	cmp	r0, #2
 800b0fe:	d00e      	beq.n	800b11e <sin+0x5e>
 800b100:	b9c0      	cbnz	r0, 800b134 <sin+0x74>
 800b102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b106:	2301      	movs	r3, #1
 800b108:	9300      	str	r3, [sp, #0]
 800b10a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b10e:	e7e2      	b.n	800b0d6 <sin+0x16>
 800b110:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b118:	f000 fb6e 	bl	800b7f8 <__kernel_cos>
 800b11c:	e7e5      	b.n	800b0ea <sin+0x2a>
 800b11e:	2301      	movs	r3, #1
 800b120:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b12a:	f000 ff65 	bl	800bff8 <__kernel_sin>
 800b12e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b132:	e7da      	b.n	800b0ea <sin+0x2a>
 800b134:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b13c:	f000 fb5c 	bl	800b7f8 <__kernel_cos>
 800b140:	e7f5      	b.n	800b12e <sin+0x6e>
 800b142:	bf00      	nop
 800b144:	3fe921fb 	.word	0x3fe921fb
 800b148:	7fefffff 	.word	0x7fefffff

0800b14c <roundf>:
 800b14c:	b508      	push	{r3, lr}
 800b14e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b152:	3b7f      	subs	r3, #127	; 0x7f
 800b154:	2b16      	cmp	r3, #22
 800b156:	4601      	mov	r1, r0
 800b158:	4602      	mov	r2, r0
 800b15a:	dc14      	bgt.n	800b186 <roundf+0x3a>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	da07      	bge.n	800b170 <roundf+0x24>
 800b160:	3301      	adds	r3, #1
 800b162:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b166:	d101      	bne.n	800b16c <roundf+0x20>
 800b168:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b16c:	4608      	mov	r0, r1
 800b16e:	bd08      	pop	{r3, pc}
 800b170:	4808      	ldr	r0, [pc, #32]	; (800b194 <roundf+0x48>)
 800b172:	4118      	asrs	r0, r3
 800b174:	4201      	tst	r1, r0
 800b176:	d0f9      	beq.n	800b16c <roundf+0x20>
 800b178:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b17c:	4119      	asrs	r1, r3
 800b17e:	4411      	add	r1, r2
 800b180:	ea21 0100 	bic.w	r1, r1, r0
 800b184:	e7f2      	b.n	800b16c <roundf+0x20>
 800b186:	2b80      	cmp	r3, #128	; 0x80
 800b188:	d1f0      	bne.n	800b16c <roundf+0x20>
 800b18a:	f7f5 fcd3 	bl	8000b34 <__addsf3>
 800b18e:	4601      	mov	r1, r0
 800b190:	e7ec      	b.n	800b16c <roundf+0x20>
 800b192:	bf00      	nop
 800b194:	007fffff 	.word	0x007fffff

0800b198 <fmod>:
 800b198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b19c:	4680      	mov	r8, r0
 800b19e:	4689      	mov	r9, r1
 800b1a0:	4616      	mov	r6, r2
 800b1a2:	461f      	mov	r7, r3
 800b1a4:	f000 f820 	bl	800b1e8 <__ieee754_fmod>
 800b1a8:	4632      	mov	r2, r6
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	463b      	mov	r3, r7
 800b1b0:	4640      	mov	r0, r8
 800b1b2:	4649      	mov	r1, r9
 800b1b4:	f7f5 fc2a 	bl	8000a0c <__aeabi_dcmpun>
 800b1b8:	b990      	cbnz	r0, 800b1e0 <fmod+0x48>
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	2300      	movs	r3, #0
 800b1be:	4630      	mov	r0, r6
 800b1c0:	4639      	mov	r1, r7
 800b1c2:	f7f5 fbf1 	bl	80009a8 <__aeabi_dcmpeq>
 800b1c6:	b158      	cbz	r0, 800b1e0 <fmod+0x48>
 800b1c8:	f001 f850 	bl	800c26c <__errno>
 800b1cc:	2321      	movs	r3, #33	; 0x21
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	6003      	str	r3, [r0, #0]
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	4610      	mov	r0, r2
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	f7f5 faa8 	bl	800072c <__aeabi_ddiv>
 800b1dc:	4604      	mov	r4, r0
 800b1de:	460d      	mov	r5, r1
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b1e8 <__ieee754_fmod>:
 800b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ec:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800b1f0:	460e      	mov	r6, r1
 800b1f2:	461d      	mov	r5, r3
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	ea58 0302 	orrs.w	r3, r8, r2
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	4614      	mov	r4, r2
 800b1fe:	4694      	mov	ip, r2
 800b200:	4696      	mov	lr, r2
 800b202:	d00c      	beq.n	800b21e <__ieee754_fmod+0x36>
 800b204:	4a7a      	ldr	r2, [pc, #488]	; (800b3f0 <__ieee754_fmod+0x208>)
 800b206:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b20a:	4293      	cmp	r3, r2
 800b20c:	46b2      	mov	sl, r6
 800b20e:	dc06      	bgt.n	800b21e <__ieee754_fmod+0x36>
 800b210:	4262      	negs	r2, r4
 800b212:	4878      	ldr	r0, [pc, #480]	; (800b3f4 <__ieee754_fmod+0x20c>)
 800b214:	4322      	orrs	r2, r4
 800b216:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800b21a:	4282      	cmp	r2, r0
 800b21c:	d90c      	bls.n	800b238 <__ieee754_fmod+0x50>
 800b21e:	460b      	mov	r3, r1
 800b220:	4622      	mov	r2, r4
 800b222:	4638      	mov	r0, r7
 800b224:	4631      	mov	r1, r6
 800b226:	f7f5 f957 	bl	80004d8 <__aeabi_dmul>
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	f7f5 fa7d 	bl	800072c <__aeabi_ddiv>
 800b232:	4607      	mov	r7, r0
 800b234:	460e      	mov	r6, r1
 800b236:	e00e      	b.n	800b256 <__ieee754_fmod+0x6e>
 800b238:	4543      	cmp	r3, r8
 800b23a:	46b9      	mov	r9, r7
 800b23c:	4639      	mov	r1, r7
 800b23e:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800b242:	dc0c      	bgt.n	800b25e <__ieee754_fmod+0x76>
 800b244:	db07      	blt.n	800b256 <__ieee754_fmod+0x6e>
 800b246:	4567      	cmp	r7, ip
 800b248:	d305      	bcc.n	800b256 <__ieee754_fmod+0x6e>
 800b24a:	d108      	bne.n	800b25e <__ieee754_fmod+0x76>
 800b24c:	4b6a      	ldr	r3, [pc, #424]	; (800b3f8 <__ieee754_fmod+0x210>)
 800b24e:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800b252:	e9d4 7600 	ldrd	r7, r6, [r4]
 800b256:	4638      	mov	r0, r7
 800b258:	4631      	mov	r1, r6
 800b25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b25e:	ea1a 0f00 	tst.w	sl, r0
 800b262:	d14a      	bne.n	800b2fa <__ieee754_fmod+0x112>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d141      	bne.n	800b2ec <__ieee754_fmod+0x104>
 800b268:	464a      	mov	r2, r9
 800b26a:	4864      	ldr	r0, [pc, #400]	; (800b3fc <__ieee754_fmod+0x214>)
 800b26c:	2a00      	cmp	r2, #0
 800b26e:	dc3a      	bgt.n	800b2e6 <__ieee754_fmod+0xfe>
 800b270:	4a60      	ldr	r2, [pc, #384]	; (800b3f4 <__ieee754_fmod+0x20c>)
 800b272:	402a      	ands	r2, r5
 800b274:	2a00      	cmp	r2, #0
 800b276:	d14f      	bne.n	800b318 <__ieee754_fmod+0x130>
 800b278:	f1b8 0f00 	cmp.w	r8, #0
 800b27c:	d144      	bne.n	800b308 <__ieee754_fmod+0x120>
 800b27e:	4666      	mov	r6, ip
 800b280:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b284:	2e00      	cmp	r6, #0
 800b286:	dc3c      	bgt.n	800b302 <__ieee754_fmod+0x11a>
 800b288:	4e5d      	ldr	r6, [pc, #372]	; (800b400 <__ieee754_fmod+0x218>)
 800b28a:	42b0      	cmp	r0, r6
 800b28c:	db49      	blt.n	800b322 <__ieee754_fmod+0x13a>
 800b28e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b296:	4e5a      	ldr	r6, [pc, #360]	; (800b400 <__ieee754_fmod+0x218>)
 800b298:	42b2      	cmp	r2, r6
 800b29a:	db54      	blt.n	800b346 <__ieee754_fmod+0x15e>
 800b29c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b2a0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800b2a4:	1a80      	subs	r0, r0, r2
 800b2a6:	1b5e      	subs	r6, r3, r5
 800b2a8:	eba1 070e 	sub.w	r7, r1, lr
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	d161      	bne.n	800b374 <__ieee754_fmod+0x18c>
 800b2b0:	4571      	cmp	r1, lr
 800b2b2:	bf38      	it	cc
 800b2b4:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b2b8:	2e00      	cmp	r6, #0
 800b2ba:	bfa4      	itt	ge
 800b2bc:	4639      	movge	r1, r7
 800b2be:	4633      	movge	r3, r6
 800b2c0:	ea53 0001 	orrs.w	r0, r3, r1
 800b2c4:	d0c2      	beq.n	800b24c <__ieee754_fmod+0x64>
 800b2c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2ca:	db68      	blt.n	800b39e <__ieee754_fmod+0x1b6>
 800b2cc:	484c      	ldr	r0, [pc, #304]	; (800b400 <__ieee754_fmod+0x218>)
 800b2ce:	4282      	cmp	r2, r0
 800b2d0:	db6b      	blt.n	800b3aa <__ieee754_fmod+0x1c2>
 800b2d2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b2d6:	431c      	orrs	r4, r3
 800b2d8:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b2dc:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800b2e0:	460f      	mov	r7, r1
 800b2e2:	464e      	mov	r6, r9
 800b2e4:	e7b7      	b.n	800b256 <__ieee754_fmod+0x6e>
 800b2e6:	3801      	subs	r0, #1
 800b2e8:	0052      	lsls	r2, r2, #1
 800b2ea:	e7bf      	b.n	800b26c <__ieee754_fmod+0x84>
 800b2ec:	4844      	ldr	r0, [pc, #272]	; (800b400 <__ieee754_fmod+0x218>)
 800b2ee:	02da      	lsls	r2, r3, #11
 800b2f0:	2a00      	cmp	r2, #0
 800b2f2:	ddbd      	ble.n	800b270 <__ieee754_fmod+0x88>
 800b2f4:	3801      	subs	r0, #1
 800b2f6:	0052      	lsls	r2, r2, #1
 800b2f8:	e7fa      	b.n	800b2f0 <__ieee754_fmod+0x108>
 800b2fa:	1518      	asrs	r0, r3, #20
 800b2fc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800b300:	e7b6      	b.n	800b270 <__ieee754_fmod+0x88>
 800b302:	3a01      	subs	r2, #1
 800b304:	0076      	lsls	r6, r6, #1
 800b306:	e7bd      	b.n	800b284 <__ieee754_fmod+0x9c>
 800b308:	4a3d      	ldr	r2, [pc, #244]	; (800b400 <__ieee754_fmod+0x218>)
 800b30a:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800b30e:	2e00      	cmp	r6, #0
 800b310:	ddba      	ble.n	800b288 <__ieee754_fmod+0xa0>
 800b312:	3a01      	subs	r2, #1
 800b314:	0076      	lsls	r6, r6, #1
 800b316:	e7fa      	b.n	800b30e <__ieee754_fmod+0x126>
 800b318:	ea4f 5228 	mov.w	r2, r8, asr #20
 800b31c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b320:	e7b2      	b.n	800b288 <__ieee754_fmod+0xa0>
 800b322:	1a31      	subs	r1, r6, r0
 800b324:	291f      	cmp	r1, #31
 800b326:	dc08      	bgt.n	800b33a <__ieee754_fmod+0x152>
 800b328:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800b32c:	408b      	lsls	r3, r1
 800b32e:	fa29 f606 	lsr.w	r6, r9, r6
 800b332:	4333      	orrs	r3, r6
 800b334:	fa09 f101 	lsl.w	r1, r9, r1
 800b338:	e7ad      	b.n	800b296 <__ieee754_fmod+0xae>
 800b33a:	4b32      	ldr	r3, [pc, #200]	; (800b404 <__ieee754_fmod+0x21c>)
 800b33c:	2100      	movs	r1, #0
 800b33e:	1a1b      	subs	r3, r3, r0
 800b340:	fa09 f303 	lsl.w	r3, r9, r3
 800b344:	e7a7      	b.n	800b296 <__ieee754_fmod+0xae>
 800b346:	eba6 0e02 	sub.w	lr, r6, r2
 800b34a:	f1be 0f1f 	cmp.w	lr, #31
 800b34e:	dc0a      	bgt.n	800b366 <__ieee754_fmod+0x17e>
 800b350:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800b354:	fa08 f80e 	lsl.w	r8, r8, lr
 800b358:	fa2c f505 	lsr.w	r5, ip, r5
 800b35c:	ea45 0508 	orr.w	r5, r5, r8
 800b360:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b364:	e79e      	b.n	800b2a4 <__ieee754_fmod+0xbc>
 800b366:	4d27      	ldr	r5, [pc, #156]	; (800b404 <__ieee754_fmod+0x21c>)
 800b368:	f04f 0e00 	mov.w	lr, #0
 800b36c:	1aad      	subs	r5, r5, r2
 800b36e:	fa0c f505 	lsl.w	r5, ip, r5
 800b372:	e797      	b.n	800b2a4 <__ieee754_fmod+0xbc>
 800b374:	4571      	cmp	r1, lr
 800b376:	bf38      	it	cc
 800b378:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b37c:	2e00      	cmp	r6, #0
 800b37e:	da05      	bge.n	800b38c <__ieee754_fmod+0x1a4>
 800b380:	0fce      	lsrs	r6, r1, #31
 800b382:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800b386:	0049      	lsls	r1, r1, #1
 800b388:	3801      	subs	r0, #1
 800b38a:	e78c      	b.n	800b2a6 <__ieee754_fmod+0xbe>
 800b38c:	ea56 0307 	orrs.w	r3, r6, r7
 800b390:	f43f af5c 	beq.w	800b24c <__ieee754_fmod+0x64>
 800b394:	0ffb      	lsrs	r3, r7, #31
 800b396:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800b39a:	0079      	lsls	r1, r7, #1
 800b39c:	e7f4      	b.n	800b388 <__ieee754_fmod+0x1a0>
 800b39e:	0fc8      	lsrs	r0, r1, #31
 800b3a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b3a4:	0049      	lsls	r1, r1, #1
 800b3a6:	3a01      	subs	r2, #1
 800b3a8:	e78d      	b.n	800b2c6 <__ieee754_fmod+0xde>
 800b3aa:	1a80      	subs	r0, r0, r2
 800b3ac:	2814      	cmp	r0, #20
 800b3ae:	dc0a      	bgt.n	800b3c6 <__ieee754_fmod+0x1de>
 800b3b0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b3b4:	fa03 f202 	lsl.w	r2, r3, r2
 800b3b8:	40c1      	lsrs	r1, r0
 800b3ba:	430a      	orrs	r2, r1
 800b3bc:	4103      	asrs	r3, r0
 800b3be:	4610      	mov	r0, r2
 800b3c0:	ea43 0104 	orr.w	r1, r3, r4
 800b3c4:	e735      	b.n	800b232 <__ieee754_fmod+0x4a>
 800b3c6:	281f      	cmp	r0, #31
 800b3c8:	dc07      	bgt.n	800b3da <__ieee754_fmod+0x1f2>
 800b3ca:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b3ce:	40c1      	lsrs	r1, r0
 800b3d0:	fa03 f202 	lsl.w	r2, r3, r2
 800b3d4:	430a      	orrs	r2, r1
 800b3d6:	4623      	mov	r3, r4
 800b3d8:	e7f1      	b.n	800b3be <__ieee754_fmod+0x1d6>
 800b3da:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b3de:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3e2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b3e6:	32e2      	adds	r2, #226	; 0xe2
 800b3e8:	fa43 f202 	asr.w	r2, r3, r2
 800b3ec:	e7f3      	b.n	800b3d6 <__ieee754_fmod+0x1ee>
 800b3ee:	bf00      	nop
 800b3f0:	7fefffff 	.word	0x7fefffff
 800b3f4:	7ff00000 	.word	0x7ff00000
 800b3f8:	0800cc78 	.word	0x0800cc78
 800b3fc:	fffffbed 	.word	0xfffffbed
 800b400:	fffffc02 	.word	0xfffffc02
 800b404:	fffffbe2 	.word	0xfffffbe2

0800b408 <__ieee754_rem_pio2>:
 800b408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b40c:	4614      	mov	r4, r2
 800b40e:	4ac4      	ldr	r2, [pc, #784]	; (800b720 <__ieee754_rem_pio2+0x318>)
 800b410:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b414:	b08d      	sub	sp, #52	; 0x34
 800b416:	4592      	cmp	sl, r2
 800b418:	9104      	str	r1, [sp, #16]
 800b41a:	dc07      	bgt.n	800b42c <__ieee754_rem_pio2+0x24>
 800b41c:	2200      	movs	r2, #0
 800b41e:	2300      	movs	r3, #0
 800b420:	e9c4 0100 	strd	r0, r1, [r4]
 800b424:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b428:	2500      	movs	r5, #0
 800b42a:	e024      	b.n	800b476 <__ieee754_rem_pio2+0x6e>
 800b42c:	4abd      	ldr	r2, [pc, #756]	; (800b724 <__ieee754_rem_pio2+0x31c>)
 800b42e:	4592      	cmp	sl, r2
 800b430:	dc72      	bgt.n	800b518 <__ieee754_rem_pio2+0x110>
 800b432:	9b04      	ldr	r3, [sp, #16]
 800b434:	4dbc      	ldr	r5, [pc, #752]	; (800b728 <__ieee754_rem_pio2+0x320>)
 800b436:	2b00      	cmp	r3, #0
 800b438:	a3ab      	add	r3, pc, #684	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x2e0>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	dd36      	ble.n	800b4ae <__ieee754_rem_pio2+0xa6>
 800b440:	f7f4 fe92 	bl	8000168 <__aeabi_dsub>
 800b444:	45aa      	cmp	sl, r5
 800b446:	4606      	mov	r6, r0
 800b448:	460f      	mov	r7, r1
 800b44a:	d018      	beq.n	800b47e <__ieee754_rem_pio2+0x76>
 800b44c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x2e8>)
 800b44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b452:	f7f4 fe89 	bl	8000168 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4630      	mov	r0, r6
 800b45c:	e9c4 2300 	strd	r2, r3, [r4]
 800b460:	4639      	mov	r1, r7
 800b462:	f7f4 fe81 	bl	8000168 <__aeabi_dsub>
 800b466:	a3a2      	add	r3, pc, #648	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x2e8>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	f7f4 fe7c 	bl	8000168 <__aeabi_dsub>
 800b470:	2501      	movs	r5, #1
 800b472:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b476:	4628      	mov	r0, r5
 800b478:	b00d      	add	sp, #52	; 0x34
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	a39e      	add	r3, pc, #632	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x2f0>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	f7f4 fe70 	bl	8000168 <__aeabi_dsub>
 800b488:	a39d      	add	r3, pc, #628	; (adr r3, 800b700 <__ieee754_rem_pio2+0x2f8>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	4606      	mov	r6, r0
 800b490:	460f      	mov	r7, r1
 800b492:	f7f4 fe69 	bl	8000168 <__aeabi_dsub>
 800b496:	4602      	mov	r2, r0
 800b498:	460b      	mov	r3, r1
 800b49a:	4630      	mov	r0, r6
 800b49c:	e9c4 2300 	strd	r2, r3, [r4]
 800b4a0:	4639      	mov	r1, r7
 800b4a2:	f7f4 fe61 	bl	8000168 <__aeabi_dsub>
 800b4a6:	a396      	add	r3, pc, #600	; (adr r3, 800b700 <__ieee754_rem_pio2+0x2f8>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	e7de      	b.n	800b46c <__ieee754_rem_pio2+0x64>
 800b4ae:	f7f4 fe5d 	bl	800016c <__adddf3>
 800b4b2:	45aa      	cmp	sl, r5
 800b4b4:	4606      	mov	r6, r0
 800b4b6:	460f      	mov	r7, r1
 800b4b8:	d016      	beq.n	800b4e8 <__ieee754_rem_pio2+0xe0>
 800b4ba:	a38d      	add	r3, pc, #564	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x2e8>)
 800b4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c0:	f7f4 fe54 	bl	800016c <__adddf3>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	460b      	mov	r3, r1
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	e9c4 2300 	strd	r2, r3, [r4]
 800b4ce:	4639      	mov	r1, r7
 800b4d0:	f7f4 fe4a 	bl	8000168 <__aeabi_dsub>
 800b4d4:	a386      	add	r3, pc, #536	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x2e8>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f4 fe47 	bl	800016c <__adddf3>
 800b4de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b4e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4e6:	e7c6      	b.n	800b476 <__ieee754_rem_pio2+0x6e>
 800b4e8:	a383      	add	r3, pc, #524	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x2f0>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f4 fe3d 	bl	800016c <__adddf3>
 800b4f2:	a383      	add	r3, pc, #524	; (adr r3, 800b700 <__ieee754_rem_pio2+0x2f8>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	460f      	mov	r7, r1
 800b4fc:	f7f4 fe36 	bl	800016c <__adddf3>
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4630      	mov	r0, r6
 800b506:	e9c4 2300 	strd	r2, r3, [r4]
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f4 fe2c 	bl	8000168 <__aeabi_dsub>
 800b510:	a37b      	add	r3, pc, #492	; (adr r3, 800b700 <__ieee754_rem_pio2+0x2f8>)
 800b512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b516:	e7e0      	b.n	800b4da <__ieee754_rem_pio2+0xd2>
 800b518:	4a84      	ldr	r2, [pc, #528]	; (800b72c <__ieee754_rem_pio2+0x324>)
 800b51a:	4592      	cmp	sl, r2
 800b51c:	f300 80d5 	bgt.w	800b6ca <__ieee754_rem_pio2+0x2c2>
 800b520:	f000 fe20 	bl	800c164 <fabs>
 800b524:	a378      	add	r3, pc, #480	; (adr r3, 800b708 <__ieee754_rem_pio2+0x300>)
 800b526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52a:	4606      	mov	r6, r0
 800b52c:	460f      	mov	r7, r1
 800b52e:	f7f4 ffd3 	bl	80004d8 <__aeabi_dmul>
 800b532:	2200      	movs	r2, #0
 800b534:	4b7e      	ldr	r3, [pc, #504]	; (800b730 <__ieee754_rem_pio2+0x328>)
 800b536:	f7f4 fe19 	bl	800016c <__adddf3>
 800b53a:	f7f5 fa7d 	bl	8000a38 <__aeabi_d2iz>
 800b53e:	4605      	mov	r5, r0
 800b540:	f7f4 ff60 	bl	8000404 <__aeabi_i2d>
 800b544:	4602      	mov	r2, r0
 800b546:	460b      	mov	r3, r1
 800b548:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b54c:	a366      	add	r3, pc, #408	; (adr r3, 800b6e8 <__ieee754_rem_pio2+0x2e0>)
 800b54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b552:	f7f4 ffc1 	bl	80004d8 <__aeabi_dmul>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	4630      	mov	r0, r6
 800b55c:	4639      	mov	r1, r7
 800b55e:	f7f4 fe03 	bl	8000168 <__aeabi_dsub>
 800b562:	a363      	add	r3, pc, #396	; (adr r3, 800b6f0 <__ieee754_rem_pio2+0x2e8>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	4680      	mov	r8, r0
 800b56a:	4689      	mov	r9, r1
 800b56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b570:	f7f4 ffb2 	bl	80004d8 <__aeabi_dmul>
 800b574:	2d1f      	cmp	r5, #31
 800b576:	4606      	mov	r6, r0
 800b578:	460f      	mov	r7, r1
 800b57a:	dc0e      	bgt.n	800b59a <__ieee754_rem_pio2+0x192>
 800b57c:	4b6d      	ldr	r3, [pc, #436]	; (800b734 <__ieee754_rem_pio2+0x32c>)
 800b57e:	1e6a      	subs	r2, r5, #1
 800b580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b584:	4553      	cmp	r3, sl
 800b586:	d008      	beq.n	800b59a <__ieee754_rem_pio2+0x192>
 800b588:	4632      	mov	r2, r6
 800b58a:	463b      	mov	r3, r7
 800b58c:	4640      	mov	r0, r8
 800b58e:	4649      	mov	r1, r9
 800b590:	f7f4 fdea 	bl	8000168 <__aeabi_dsub>
 800b594:	e9c4 0100 	strd	r0, r1, [r4]
 800b598:	e013      	b.n	800b5c2 <__ieee754_rem_pio2+0x1ba>
 800b59a:	463b      	mov	r3, r7
 800b59c:	4632      	mov	r2, r6
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f4 fde1 	bl	8000168 <__aeabi_dsub>
 800b5a6:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b5aa:	9305      	str	r3, [sp, #20]
 800b5ac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b5b0:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b5b4:	f1ba 0f10 	cmp.w	sl, #16
 800b5b8:	dc1f      	bgt.n	800b5fa <__ieee754_rem_pio2+0x1f2>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	e9c4 2300 	strd	r2, r3, [r4]
 800b5c2:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b5c6:	4640      	mov	r0, r8
 800b5c8:	4653      	mov	r3, sl
 800b5ca:	4649      	mov	r1, r9
 800b5cc:	f7f4 fdcc 	bl	8000168 <__aeabi_dsub>
 800b5d0:	4632      	mov	r2, r6
 800b5d2:	463b      	mov	r3, r7
 800b5d4:	f7f4 fdc8 	bl	8000168 <__aeabi_dsub>
 800b5d8:	460b      	mov	r3, r1
 800b5da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5de:	9904      	ldr	r1, [sp, #16]
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	2900      	cmp	r1, #0
 800b5e4:	f6bf af47 	bge.w	800b476 <__ieee754_rem_pio2+0x6e>
 800b5e8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b5ec:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b5f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5f4:	60e3      	str	r3, [r4, #12]
 800b5f6:	426d      	negs	r5, r5
 800b5f8:	e73d      	b.n	800b476 <__ieee754_rem_pio2+0x6e>
 800b5fa:	a33f      	add	r3, pc, #252	; (adr r3, 800b6f8 <__ieee754_rem_pio2+0x2f0>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b604:	f7f4 ff68 	bl	80004d8 <__aeabi_dmul>
 800b608:	4606      	mov	r6, r0
 800b60a:	460f      	mov	r7, r1
 800b60c:	4602      	mov	r2, r0
 800b60e:	460b      	mov	r3, r1
 800b610:	4640      	mov	r0, r8
 800b612:	4649      	mov	r1, r9
 800b614:	f7f4 fda8 	bl	8000168 <__aeabi_dsub>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4682      	mov	sl, r0
 800b61e:	468b      	mov	fp, r1
 800b620:	4640      	mov	r0, r8
 800b622:	4649      	mov	r1, r9
 800b624:	f7f4 fda0 	bl	8000168 <__aeabi_dsub>
 800b628:	4632      	mov	r2, r6
 800b62a:	463b      	mov	r3, r7
 800b62c:	f7f4 fd9c 	bl	8000168 <__aeabi_dsub>
 800b630:	a333      	add	r3, pc, #204	; (adr r3, 800b700 <__ieee754_rem_pio2+0x2f8>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	4606      	mov	r6, r0
 800b638:	460f      	mov	r7, r1
 800b63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63e:	f7f4 ff4b 	bl	80004d8 <__aeabi_dmul>
 800b642:	4632      	mov	r2, r6
 800b644:	463b      	mov	r3, r7
 800b646:	f7f4 fd8f 	bl	8000168 <__aeabi_dsub>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4606      	mov	r6, r0
 800b650:	460f      	mov	r7, r1
 800b652:	4650      	mov	r0, sl
 800b654:	4659      	mov	r1, fp
 800b656:	f7f4 fd87 	bl	8000168 <__aeabi_dsub>
 800b65a:	9a05      	ldr	r2, [sp, #20]
 800b65c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b660:	1ad3      	subs	r3, r2, r3
 800b662:	2b31      	cmp	r3, #49	; 0x31
 800b664:	dc06      	bgt.n	800b674 <__ieee754_rem_pio2+0x26c>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	46d0      	mov	r8, sl
 800b66c:	46d9      	mov	r9, fp
 800b66e:	e9c4 2300 	strd	r2, r3, [r4]
 800b672:	e7a6      	b.n	800b5c2 <__ieee754_rem_pio2+0x1ba>
 800b674:	a326      	add	r3, pc, #152	; (adr r3, 800b710 <__ieee754_rem_pio2+0x308>)
 800b676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b67e:	f7f4 ff2b 	bl	80004d8 <__aeabi_dmul>
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	4650      	mov	r0, sl
 800b68c:	4659      	mov	r1, fp
 800b68e:	f7f4 fd6b 	bl	8000168 <__aeabi_dsub>
 800b692:	4602      	mov	r2, r0
 800b694:	460b      	mov	r3, r1
 800b696:	4680      	mov	r8, r0
 800b698:	4689      	mov	r9, r1
 800b69a:	4650      	mov	r0, sl
 800b69c:	4659      	mov	r1, fp
 800b69e:	f7f4 fd63 	bl	8000168 <__aeabi_dsub>
 800b6a2:	4632      	mov	r2, r6
 800b6a4:	463b      	mov	r3, r7
 800b6a6:	f7f4 fd5f 	bl	8000168 <__aeabi_dsub>
 800b6aa:	a31b      	add	r3, pc, #108	; (adr r3, 800b718 <__ieee754_rem_pio2+0x310>)
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	460f      	mov	r7, r1
 800b6b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b8:	f7f4 ff0e 	bl	80004d8 <__aeabi_dmul>
 800b6bc:	4632      	mov	r2, r6
 800b6be:	463b      	mov	r3, r7
 800b6c0:	f7f4 fd52 	bl	8000168 <__aeabi_dsub>
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460f      	mov	r7, r1
 800b6c8:	e75e      	b.n	800b588 <__ieee754_rem_pio2+0x180>
 800b6ca:	4a1b      	ldr	r2, [pc, #108]	; (800b738 <__ieee754_rem_pio2+0x330>)
 800b6cc:	4592      	cmp	sl, r2
 800b6ce:	dd35      	ble.n	800b73c <__ieee754_rem_pio2+0x334>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	f7f4 fd48 	bl	8000168 <__aeabi_dsub>
 800b6d8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b6dc:	e9c4 0100 	strd	r0, r1, [r4]
 800b6e0:	e6a2      	b.n	800b428 <__ieee754_rem_pio2+0x20>
 800b6e2:	bf00      	nop
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	54400000 	.word	0x54400000
 800b6ec:	3ff921fb 	.word	0x3ff921fb
 800b6f0:	1a626331 	.word	0x1a626331
 800b6f4:	3dd0b461 	.word	0x3dd0b461
 800b6f8:	1a600000 	.word	0x1a600000
 800b6fc:	3dd0b461 	.word	0x3dd0b461
 800b700:	2e037073 	.word	0x2e037073
 800b704:	3ba3198a 	.word	0x3ba3198a
 800b708:	6dc9c883 	.word	0x6dc9c883
 800b70c:	3fe45f30 	.word	0x3fe45f30
 800b710:	2e000000 	.word	0x2e000000
 800b714:	3ba3198a 	.word	0x3ba3198a
 800b718:	252049c1 	.word	0x252049c1
 800b71c:	397b839a 	.word	0x397b839a
 800b720:	3fe921fb 	.word	0x3fe921fb
 800b724:	4002d97b 	.word	0x4002d97b
 800b728:	3ff921fb 	.word	0x3ff921fb
 800b72c:	413921fb 	.word	0x413921fb
 800b730:	3fe00000 	.word	0x3fe00000
 800b734:	0800cc88 	.word	0x0800cc88
 800b738:	7fefffff 	.word	0x7fefffff
 800b73c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b740:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b744:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b748:	460f      	mov	r7, r1
 800b74a:	4606      	mov	r6, r0
 800b74c:	f7f5 f974 	bl	8000a38 <__aeabi_d2iz>
 800b750:	f7f4 fe58 	bl	8000404 <__aeabi_i2d>
 800b754:	4602      	mov	r2, r0
 800b756:	460b      	mov	r3, r1
 800b758:	4630      	mov	r0, r6
 800b75a:	4639      	mov	r1, r7
 800b75c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b760:	f7f4 fd02 	bl	8000168 <__aeabi_dsub>
 800b764:	2200      	movs	r2, #0
 800b766:	4b22      	ldr	r3, [pc, #136]	; (800b7f0 <__ieee754_rem_pio2+0x3e8>)
 800b768:	f7f4 feb6 	bl	80004d8 <__aeabi_dmul>
 800b76c:	460f      	mov	r7, r1
 800b76e:	4606      	mov	r6, r0
 800b770:	f7f5 f962 	bl	8000a38 <__aeabi_d2iz>
 800b774:	f7f4 fe46 	bl	8000404 <__aeabi_i2d>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4630      	mov	r0, r6
 800b77e:	4639      	mov	r1, r7
 800b780:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b784:	f7f4 fcf0 	bl	8000168 <__aeabi_dsub>
 800b788:	2200      	movs	r2, #0
 800b78a:	4b19      	ldr	r3, [pc, #100]	; (800b7f0 <__ieee754_rem_pio2+0x3e8>)
 800b78c:	f7f4 fea4 	bl	80004d8 <__aeabi_dmul>
 800b790:	f04f 0803 	mov.w	r8, #3
 800b794:	2600      	movs	r6, #0
 800b796:	2700      	movs	r7, #0
 800b798:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b79c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b7a6:	463b      	mov	r3, r7
 800b7a8:	46c2      	mov	sl, r8
 800b7aa:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b7ae:	f7f5 f8fb 	bl	80009a8 <__aeabi_dcmpeq>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d1f4      	bne.n	800b7a0 <__ieee754_rem_pio2+0x398>
 800b7b6:	4b0f      	ldr	r3, [pc, #60]	; (800b7f4 <__ieee754_rem_pio2+0x3ec>)
 800b7b8:	462a      	mov	r2, r5
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	2302      	movs	r3, #2
 800b7be:	4621      	mov	r1, r4
 800b7c0:	9300      	str	r3, [sp, #0]
 800b7c2:	a806      	add	r0, sp, #24
 800b7c4:	4653      	mov	r3, sl
 800b7c6:	f000 f8d5 	bl	800b974 <__kernel_rem_pio2>
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	4605      	mov	r5, r0
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f6bf ae51 	bge.w	800b476 <__ieee754_rem_pio2+0x6e>
 800b7d4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b7d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7dc:	e9c4 2300 	strd	r2, r3, [r4]
 800b7e0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b7e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7e8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b7ec:	e703      	b.n	800b5f6 <__ieee754_rem_pio2+0x1ee>
 800b7ee:	bf00      	nop
 800b7f0:	41700000 	.word	0x41700000
 800b7f4:	0800cd08 	.word	0x0800cd08

0800b7f8 <__kernel_cos>:
 800b7f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b800:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b804:	4680      	mov	r8, r0
 800b806:	460f      	mov	r7, r1
 800b808:	e9cd 2300 	strd	r2, r3, [sp]
 800b80c:	da04      	bge.n	800b818 <__kernel_cos+0x20>
 800b80e:	f7f5 f913 	bl	8000a38 <__aeabi_d2iz>
 800b812:	2800      	cmp	r0, #0
 800b814:	f000 8086 	beq.w	800b924 <__kernel_cos+0x12c>
 800b818:	4642      	mov	r2, r8
 800b81a:	463b      	mov	r3, r7
 800b81c:	4640      	mov	r0, r8
 800b81e:	4639      	mov	r1, r7
 800b820:	f7f4 fe5a 	bl	80004d8 <__aeabi_dmul>
 800b824:	2200      	movs	r2, #0
 800b826:	4b4e      	ldr	r3, [pc, #312]	; (800b960 <__kernel_cos+0x168>)
 800b828:	4604      	mov	r4, r0
 800b82a:	460d      	mov	r5, r1
 800b82c:	f7f4 fe54 	bl	80004d8 <__aeabi_dmul>
 800b830:	a33f      	add	r3, pc, #252	; (adr r3, 800b930 <__kernel_cos+0x138>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	4682      	mov	sl, r0
 800b838:	468b      	mov	fp, r1
 800b83a:	4620      	mov	r0, r4
 800b83c:	4629      	mov	r1, r5
 800b83e:	f7f4 fe4b 	bl	80004d8 <__aeabi_dmul>
 800b842:	a33d      	add	r3, pc, #244	; (adr r3, 800b938 <__kernel_cos+0x140>)
 800b844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b848:	f7f4 fc90 	bl	800016c <__adddf3>
 800b84c:	4622      	mov	r2, r4
 800b84e:	462b      	mov	r3, r5
 800b850:	f7f4 fe42 	bl	80004d8 <__aeabi_dmul>
 800b854:	a33a      	add	r3, pc, #232	; (adr r3, 800b940 <__kernel_cos+0x148>)
 800b856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b85a:	f7f4 fc85 	bl	8000168 <__aeabi_dsub>
 800b85e:	4622      	mov	r2, r4
 800b860:	462b      	mov	r3, r5
 800b862:	f7f4 fe39 	bl	80004d8 <__aeabi_dmul>
 800b866:	a338      	add	r3, pc, #224	; (adr r3, 800b948 <__kernel_cos+0x150>)
 800b868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86c:	f7f4 fc7e 	bl	800016c <__adddf3>
 800b870:	4622      	mov	r2, r4
 800b872:	462b      	mov	r3, r5
 800b874:	f7f4 fe30 	bl	80004d8 <__aeabi_dmul>
 800b878:	a335      	add	r3, pc, #212	; (adr r3, 800b950 <__kernel_cos+0x158>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	f7f4 fc73 	bl	8000168 <__aeabi_dsub>
 800b882:	4622      	mov	r2, r4
 800b884:	462b      	mov	r3, r5
 800b886:	f7f4 fe27 	bl	80004d8 <__aeabi_dmul>
 800b88a:	a333      	add	r3, pc, #204	; (adr r3, 800b958 <__kernel_cos+0x160>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fc6c 	bl	800016c <__adddf3>
 800b894:	4622      	mov	r2, r4
 800b896:	462b      	mov	r3, r5
 800b898:	f7f4 fe1e 	bl	80004d8 <__aeabi_dmul>
 800b89c:	4622      	mov	r2, r4
 800b89e:	462b      	mov	r3, r5
 800b8a0:	f7f4 fe1a 	bl	80004d8 <__aeabi_dmul>
 800b8a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	460d      	mov	r5, r1
 800b8ac:	4640      	mov	r0, r8
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f4 fe12 	bl	80004d8 <__aeabi_dmul>
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f7f4 fc54 	bl	8000168 <__aeabi_dsub>
 800b8c0:	4b28      	ldr	r3, [pc, #160]	; (800b964 <__kernel_cos+0x16c>)
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	429e      	cmp	r6, r3
 800b8c6:	4689      	mov	r9, r1
 800b8c8:	dc0e      	bgt.n	800b8e8 <__kernel_cos+0xf0>
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4650      	mov	r0, sl
 800b8d0:	4659      	mov	r1, fp
 800b8d2:	f7f4 fc49 	bl	8000168 <__aeabi_dsub>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	2000      	movs	r0, #0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4922      	ldr	r1, [pc, #136]	; (800b968 <__kernel_cos+0x170>)
 800b8de:	f7f4 fc43 	bl	8000168 <__aeabi_dsub>
 800b8e2:	b003      	add	sp, #12
 800b8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e8:	2400      	movs	r4, #0
 800b8ea:	4b20      	ldr	r3, [pc, #128]	; (800b96c <__kernel_cos+0x174>)
 800b8ec:	4622      	mov	r2, r4
 800b8ee:	429e      	cmp	r6, r3
 800b8f0:	bfcc      	ite	gt
 800b8f2:	4d1f      	ldrgt	r5, [pc, #124]	; (800b970 <__kernel_cos+0x178>)
 800b8f4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	491a      	ldr	r1, [pc, #104]	; (800b968 <__kernel_cos+0x170>)
 800b8fe:	f7f4 fc33 	bl	8000168 <__aeabi_dsub>
 800b902:	4622      	mov	r2, r4
 800b904:	4606      	mov	r6, r0
 800b906:	460f      	mov	r7, r1
 800b908:	462b      	mov	r3, r5
 800b90a:	4650      	mov	r0, sl
 800b90c:	4659      	mov	r1, fp
 800b90e:	f7f4 fc2b 	bl	8000168 <__aeabi_dsub>
 800b912:	4642      	mov	r2, r8
 800b914:	464b      	mov	r3, r9
 800b916:	f7f4 fc27 	bl	8000168 <__aeabi_dsub>
 800b91a:	4602      	mov	r2, r0
 800b91c:	460b      	mov	r3, r1
 800b91e:	4630      	mov	r0, r6
 800b920:	4639      	mov	r1, r7
 800b922:	e7dc      	b.n	800b8de <__kernel_cos+0xe6>
 800b924:	2000      	movs	r0, #0
 800b926:	4910      	ldr	r1, [pc, #64]	; (800b968 <__kernel_cos+0x170>)
 800b928:	e7db      	b.n	800b8e2 <__kernel_cos+0xea>
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w
 800b930:	be8838d4 	.word	0xbe8838d4
 800b934:	bda8fae9 	.word	0xbda8fae9
 800b938:	bdb4b1c4 	.word	0xbdb4b1c4
 800b93c:	3e21ee9e 	.word	0x3e21ee9e
 800b940:	809c52ad 	.word	0x809c52ad
 800b944:	3e927e4f 	.word	0x3e927e4f
 800b948:	19cb1590 	.word	0x19cb1590
 800b94c:	3efa01a0 	.word	0x3efa01a0
 800b950:	16c15177 	.word	0x16c15177
 800b954:	3f56c16c 	.word	0x3f56c16c
 800b958:	5555554c 	.word	0x5555554c
 800b95c:	3fa55555 	.word	0x3fa55555
 800b960:	3fe00000 	.word	0x3fe00000
 800b964:	3fd33332 	.word	0x3fd33332
 800b968:	3ff00000 	.word	0x3ff00000
 800b96c:	3fe90000 	.word	0x3fe90000
 800b970:	3fd20000 	.word	0x3fd20000

0800b974 <__kernel_rem_pio2>:
 800b974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b978:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b97c:	9308      	str	r3, [sp, #32]
 800b97e:	9106      	str	r1, [sp, #24]
 800b980:	4bb6      	ldr	r3, [pc, #728]	; (800bc5c <__kernel_rem_pio2+0x2e8>)
 800b982:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b984:	f112 0f14 	cmn.w	r2, #20
 800b988:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b98c:	bfa8      	it	ge
 800b98e:	1ed4      	subge	r4, r2, #3
 800b990:	9302      	str	r3, [sp, #8]
 800b992:	9b08      	ldr	r3, [sp, #32]
 800b994:	bfb8      	it	lt
 800b996:	2400      	movlt	r4, #0
 800b998:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b99c:	9307      	str	r3, [sp, #28]
 800b99e:	bfa4      	itt	ge
 800b9a0:	2318      	movge	r3, #24
 800b9a2:	fb94 f4f3 	sdivge	r4, r4, r3
 800b9a6:	f06f 0317 	mvn.w	r3, #23
 800b9aa:	fb04 3303 	mla	r3, r4, r3, r3
 800b9ae:	eb03 0b02 	add.w	fp, r3, r2
 800b9b2:	9a07      	ldr	r2, [sp, #28]
 800b9b4:	9b02      	ldr	r3, [sp, #8]
 800b9b6:	1aa7      	subs	r7, r4, r2
 800b9b8:	eb03 0802 	add.w	r8, r3, r2
 800b9bc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b9be:	2500      	movs	r5, #0
 800b9c0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9009      	str	r0, [sp, #36]	; 0x24
 800b9ca:	ae20      	add	r6, sp, #128	; 0x80
 800b9cc:	4545      	cmp	r5, r8
 800b9ce:	dd14      	ble.n	800b9fa <__kernel_rem_pio2+0x86>
 800b9d0:	f04f 0800 	mov.w	r8, #0
 800b9d4:	9a08      	ldr	r2, [sp, #32]
 800b9d6:	ab20      	add	r3, sp, #128	; 0x80
 800b9d8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b9dc:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	4598      	cmp	r8, r3
 800b9e4:	dc35      	bgt.n	800ba52 <__kernel_rem_pio2+0xde>
 800b9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f1a3 0908 	sub.w	r9, r3, #8
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	462f      	mov	r7, r5
 800b9f2:	2600      	movs	r6, #0
 800b9f4:	e9cd 2300 	strd	r2, r3, [sp]
 800b9f8:	e01f      	b.n	800ba3a <__kernel_rem_pio2+0xc6>
 800b9fa:	42ef      	cmn	r7, r5
 800b9fc:	d40b      	bmi.n	800ba16 <__kernel_rem_pio2+0xa2>
 800b9fe:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba02:	e9cd 2300 	strd	r2, r3, [sp]
 800ba06:	f7f4 fcfd 	bl	8000404 <__aeabi_i2d>
 800ba0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0e:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba12:	3501      	adds	r5, #1
 800ba14:	e7da      	b.n	800b9cc <__kernel_rem_pio2+0x58>
 800ba16:	4610      	mov	r0, r2
 800ba18:	4619      	mov	r1, r3
 800ba1a:	e7f8      	b.n	800ba0e <__kernel_rem_pio2+0x9a>
 800ba1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba20:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ba24:	f7f4 fd58 	bl	80004d8 <__aeabi_dmul>
 800ba28:	4602      	mov	r2, r0
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba30:	f7f4 fb9c 	bl	800016c <__adddf3>
 800ba34:	e9cd 0100 	strd	r0, r1, [sp]
 800ba38:	3601      	adds	r6, #1
 800ba3a:	9b07      	ldr	r3, [sp, #28]
 800ba3c:	3f08      	subs	r7, #8
 800ba3e:	429e      	cmp	r6, r3
 800ba40:	ddec      	ble.n	800ba1c <__kernel_rem_pio2+0xa8>
 800ba42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba46:	f108 0801 	add.w	r8, r8, #1
 800ba4a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800ba4e:	3508      	adds	r5, #8
 800ba50:	e7c6      	b.n	800b9e0 <__kernel_rem_pio2+0x6c>
 800ba52:	9b02      	ldr	r3, [sp, #8]
 800ba54:	aa0c      	add	r2, sp, #48	; 0x30
 800ba56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba5c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ba5e:	9e02      	ldr	r6, [sp, #8]
 800ba60:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba64:	930a      	str	r3, [sp, #40]	; 0x28
 800ba66:	ab98      	add	r3, sp, #608	; 0x260
 800ba68:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba6c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800ba70:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba72:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800ba76:	46d0      	mov	r8, sl
 800ba78:	46b1      	mov	r9, r6
 800ba7a:	af0c      	add	r7, sp, #48	; 0x30
 800ba7c:	9700      	str	r7, [sp, #0]
 800ba7e:	f1b9 0f00 	cmp.w	r9, #0
 800ba82:	f1a8 0808 	sub.w	r8, r8, #8
 800ba86:	dc71      	bgt.n	800bb6c <__kernel_rem_pio2+0x1f8>
 800ba88:	465a      	mov	r2, fp
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	f000 fb6f 	bl	800c170 <scalbn>
 800ba92:	2200      	movs	r2, #0
 800ba94:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba98:	4604      	mov	r4, r0
 800ba9a:	460d      	mov	r5, r1
 800ba9c:	f7f4 fd1c 	bl	80004d8 <__aeabi_dmul>
 800baa0:	f7ff fa8e 	bl	800afc0 <floor>
 800baa4:	2200      	movs	r2, #0
 800baa6:	4b6e      	ldr	r3, [pc, #440]	; (800bc60 <__kernel_rem_pio2+0x2ec>)
 800baa8:	f7f4 fd16 	bl	80004d8 <__aeabi_dmul>
 800baac:	4602      	mov	r2, r0
 800baae:	460b      	mov	r3, r1
 800bab0:	4620      	mov	r0, r4
 800bab2:	4629      	mov	r1, r5
 800bab4:	f7f4 fb58 	bl	8000168 <__aeabi_dsub>
 800bab8:	460d      	mov	r5, r1
 800baba:	4604      	mov	r4, r0
 800babc:	f7f4 ffbc 	bl	8000a38 <__aeabi_d2iz>
 800bac0:	9004      	str	r0, [sp, #16]
 800bac2:	f7f4 fc9f 	bl	8000404 <__aeabi_i2d>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4620      	mov	r0, r4
 800bacc:	4629      	mov	r1, r5
 800bace:	f7f4 fb4b 	bl	8000168 <__aeabi_dsub>
 800bad2:	f1bb 0f00 	cmp.w	fp, #0
 800bad6:	4680      	mov	r8, r0
 800bad8:	4689      	mov	r9, r1
 800bada:	dd70      	ble.n	800bbbe <__kernel_rem_pio2+0x24a>
 800badc:	1e72      	subs	r2, r6, #1
 800bade:	ab0c      	add	r3, sp, #48	; 0x30
 800bae0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bae4:	9c04      	ldr	r4, [sp, #16]
 800bae6:	f1cb 0118 	rsb	r1, fp, #24
 800baea:	fa40 f301 	asr.w	r3, r0, r1
 800baee:	441c      	add	r4, r3
 800baf0:	408b      	lsls	r3, r1
 800baf2:	1ac0      	subs	r0, r0, r3
 800baf4:	ab0c      	add	r3, sp, #48	; 0x30
 800baf6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bafa:	f1cb 0317 	rsb	r3, fp, #23
 800bafe:	9404      	str	r4, [sp, #16]
 800bb00:	fa40 f303 	asr.w	r3, r0, r3
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	dd66      	ble.n	800bbda <__kernel_rem_pio2+0x266>
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb12:	4614      	mov	r4, r2
 800bb14:	9b04      	ldr	r3, [sp, #16]
 800bb16:	3301      	adds	r3, #1
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	4296      	cmp	r6, r2
 800bb1c:	f300 80ac 	bgt.w	800bc78 <__kernel_rem_pio2+0x304>
 800bb20:	f1bb 0f00 	cmp.w	fp, #0
 800bb24:	dd07      	ble.n	800bb36 <__kernel_rem_pio2+0x1c2>
 800bb26:	f1bb 0f01 	cmp.w	fp, #1
 800bb2a:	f000 80b4 	beq.w	800bc96 <__kernel_rem_pio2+0x322>
 800bb2e:	f1bb 0f02 	cmp.w	fp, #2
 800bb32:	f000 80ba 	beq.w	800bcaa <__kernel_rem_pio2+0x336>
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	2b02      	cmp	r3, #2
 800bb3a:	d14e      	bne.n	800bbda <__kernel_rem_pio2+0x266>
 800bb3c:	4642      	mov	r2, r8
 800bb3e:	464b      	mov	r3, r9
 800bb40:	2000      	movs	r0, #0
 800bb42:	4948      	ldr	r1, [pc, #288]	; (800bc64 <__kernel_rem_pio2+0x2f0>)
 800bb44:	f7f4 fb10 	bl	8000168 <__aeabi_dsub>
 800bb48:	4680      	mov	r8, r0
 800bb4a:	4689      	mov	r9, r1
 800bb4c:	2c00      	cmp	r4, #0
 800bb4e:	d044      	beq.n	800bbda <__kernel_rem_pio2+0x266>
 800bb50:	465a      	mov	r2, fp
 800bb52:	2000      	movs	r0, #0
 800bb54:	4943      	ldr	r1, [pc, #268]	; (800bc64 <__kernel_rem_pio2+0x2f0>)
 800bb56:	f000 fb0b 	bl	800c170 <scalbn>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4640      	mov	r0, r8
 800bb60:	4649      	mov	r1, r9
 800bb62:	f7f4 fb01 	bl	8000168 <__aeabi_dsub>
 800bb66:	4680      	mov	r8, r0
 800bb68:	4689      	mov	r9, r1
 800bb6a:	e036      	b.n	800bbda <__kernel_rem_pio2+0x266>
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	4b3e      	ldr	r3, [pc, #248]	; (800bc68 <__kernel_rem_pio2+0x2f4>)
 800bb70:	4620      	mov	r0, r4
 800bb72:	4629      	mov	r1, r5
 800bb74:	f7f4 fcb0 	bl	80004d8 <__aeabi_dmul>
 800bb78:	f7f4 ff5e 	bl	8000a38 <__aeabi_d2iz>
 800bb7c:	f7f4 fc42 	bl	8000404 <__aeabi_i2d>
 800bb80:	4602      	mov	r2, r0
 800bb82:	460b      	mov	r3, r1
 800bb84:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	4b38      	ldr	r3, [pc, #224]	; (800bc6c <__kernel_rem_pio2+0x2f8>)
 800bb8c:	f7f4 fca4 	bl	80004d8 <__aeabi_dmul>
 800bb90:	4602      	mov	r2, r0
 800bb92:	460b      	mov	r3, r1
 800bb94:	4620      	mov	r0, r4
 800bb96:	4629      	mov	r1, r5
 800bb98:	f7f4 fae6 	bl	8000168 <__aeabi_dsub>
 800bb9c:	f7f4 ff4c 	bl	8000a38 <__aeabi_d2iz>
 800bba0:	9b00      	ldr	r3, [sp, #0]
 800bba2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bba6:	f843 0b04 	str.w	r0, [r3], #4
 800bbaa:	9300      	str	r3, [sp, #0]
 800bbac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bbb0:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bbb4:	f7f4 fada 	bl	800016c <__adddf3>
 800bbb8:	4604      	mov	r4, r0
 800bbba:	460d      	mov	r5, r1
 800bbbc:	e75f      	b.n	800ba7e <__kernel_rem_pio2+0x10a>
 800bbbe:	d105      	bne.n	800bbcc <__kernel_rem_pio2+0x258>
 800bbc0:	1e73      	subs	r3, r6, #1
 800bbc2:	aa0c      	add	r2, sp, #48	; 0x30
 800bbc4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bbc8:	15c3      	asrs	r3, r0, #23
 800bbca:	e79b      	b.n	800bb04 <__kernel_rem_pio2+0x190>
 800bbcc:	2200      	movs	r2, #0
 800bbce:	4b28      	ldr	r3, [pc, #160]	; (800bc70 <__kernel_rem_pio2+0x2fc>)
 800bbd0:	f7f4 ff08 	bl	80009e4 <__aeabi_dcmpge>
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d13e      	bne.n	800bc56 <__kernel_rem_pio2+0x2e2>
 800bbd8:	9000      	str	r0, [sp, #0]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	2300      	movs	r3, #0
 800bbde:	4640      	mov	r0, r8
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	f7f4 fee1 	bl	80009a8 <__aeabi_dcmpeq>
 800bbe6:	2800      	cmp	r0, #0
 800bbe8:	f000 80b1 	beq.w	800bd4e <__kernel_rem_pio2+0x3da>
 800bbec:	1e74      	subs	r4, r6, #1
 800bbee:	4623      	mov	r3, r4
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	9902      	ldr	r1, [sp, #8]
 800bbf4:	428b      	cmp	r3, r1
 800bbf6:	da5f      	bge.n	800bcb8 <__kernel_rem_pio2+0x344>
 800bbf8:	2a00      	cmp	r2, #0
 800bbfa:	d074      	beq.n	800bce6 <__kernel_rem_pio2+0x372>
 800bbfc:	ab0c      	add	r3, sp, #48	; 0x30
 800bbfe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bc02:	f1ab 0b18 	sub.w	fp, fp, #24
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	f000 809f 	beq.w	800bd4a <__kernel_rem_pio2+0x3d6>
 800bc0c:	465a      	mov	r2, fp
 800bc0e:	2000      	movs	r0, #0
 800bc10:	4914      	ldr	r1, [pc, #80]	; (800bc64 <__kernel_rem_pio2+0x2f0>)
 800bc12:	f000 faad 	bl	800c170 <scalbn>
 800bc16:	46a2      	mov	sl, r4
 800bc18:	4606      	mov	r6, r0
 800bc1a:	460f      	mov	r7, r1
 800bc1c:	f04f 0800 	mov.w	r8, #0
 800bc20:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc22:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800bc68 <__kernel_rem_pio2+0x2f4>
 800bc26:	00e5      	lsls	r5, r4, #3
 800bc28:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800bc2c:	f1ba 0f00 	cmp.w	sl, #0
 800bc30:	f280 80c3 	bge.w	800bdba <__kernel_rem_pio2+0x446>
 800bc34:	4626      	mov	r6, r4
 800bc36:	2e00      	cmp	r6, #0
 800bc38:	f2c0 80f5 	blt.w	800be26 <__kernel_rem_pio2+0x4b2>
 800bc3c:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <__kernel_rem_pio2+0x300>)
 800bc3e:	f04f 0a00 	mov.w	sl, #0
 800bc42:	9307      	str	r3, [sp, #28]
 800bc44:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc46:	f04f 0b00 	mov.w	fp, #0
 800bc4a:	f04f 0800 	mov.w	r8, #0
 800bc4e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bc52:	1ba7      	subs	r7, r4, r6
 800bc54:	e0db      	b.n	800be0e <__kernel_rem_pio2+0x49a>
 800bc56:	2302      	movs	r3, #2
 800bc58:	9300      	str	r3, [sp, #0]
 800bc5a:	e757      	b.n	800bb0c <__kernel_rem_pio2+0x198>
 800bc5c:	0800ce50 	.word	0x0800ce50
 800bc60:	40200000 	.word	0x40200000
 800bc64:	3ff00000 	.word	0x3ff00000
 800bc68:	3e700000 	.word	0x3e700000
 800bc6c:	41700000 	.word	0x41700000
 800bc70:	3fe00000 	.word	0x3fe00000
 800bc74:	0800ce10 	.word	0x0800ce10
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	b944      	cbnz	r4, 800bc8e <__kernel_rem_pio2+0x31a>
 800bc7c:	b11b      	cbz	r3, 800bc86 <__kernel_rem_pio2+0x312>
 800bc7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bc82:	603b      	str	r3, [r7, #0]
 800bc84:	2301      	movs	r3, #1
 800bc86:	461c      	mov	r4, r3
 800bc88:	3201      	adds	r2, #1
 800bc8a:	3704      	adds	r7, #4
 800bc8c:	e745      	b.n	800bb1a <__kernel_rem_pio2+0x1a6>
 800bc8e:	1acb      	subs	r3, r1, r3
 800bc90:	603b      	str	r3, [r7, #0]
 800bc92:	4623      	mov	r3, r4
 800bc94:	e7f7      	b.n	800bc86 <__kernel_rem_pio2+0x312>
 800bc96:	1e72      	subs	r2, r6, #1
 800bc98:	ab0c      	add	r3, sp, #48	; 0x30
 800bc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc9e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bca2:	a90c      	add	r1, sp, #48	; 0x30
 800bca4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bca8:	e745      	b.n	800bb36 <__kernel_rem_pio2+0x1c2>
 800bcaa:	1e72      	subs	r2, r6, #1
 800bcac:	ab0c      	add	r3, sp, #48	; 0x30
 800bcae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcb2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bcb6:	e7f4      	b.n	800bca2 <__kernel_rem_pio2+0x32e>
 800bcb8:	a90c      	add	r1, sp, #48	; 0x30
 800bcba:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	430a      	orrs	r2, r1
 800bcc2:	e796      	b.n	800bbf2 <__kernel_rem_pio2+0x27e>
 800bcc4:	3401      	adds	r4, #1
 800bcc6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcca:	2a00      	cmp	r2, #0
 800bccc:	d0fa      	beq.n	800bcc4 <__kernel_rem_pio2+0x350>
 800bcce:	9b08      	ldr	r3, [sp, #32]
 800bcd0:	f106 0801 	add.w	r8, r6, #1
 800bcd4:	18f5      	adds	r5, r6, r3
 800bcd6:	ab20      	add	r3, sp, #128	; 0x80
 800bcd8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bcdc:	4434      	add	r4, r6
 800bcde:	4544      	cmp	r4, r8
 800bce0:	da04      	bge.n	800bcec <__kernel_rem_pio2+0x378>
 800bce2:	4626      	mov	r6, r4
 800bce4:	e6bf      	b.n	800ba66 <__kernel_rem_pio2+0xf2>
 800bce6:	2401      	movs	r4, #1
 800bce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcea:	e7ec      	b.n	800bcc6 <__kernel_rem_pio2+0x352>
 800bcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcee:	f04f 0900 	mov.w	r9, #0
 800bcf2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bcf6:	f7f4 fb85 	bl	8000404 <__aeabi_i2d>
 800bcfa:	2600      	movs	r6, #0
 800bcfc:	2700      	movs	r7, #0
 800bcfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd00:	e9c5 0100 	strd	r0, r1, [r5]
 800bd04:	3b08      	subs	r3, #8
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	9504      	str	r5, [sp, #16]
 800bd0a:	9b07      	ldr	r3, [sp, #28]
 800bd0c:	4599      	cmp	r9, r3
 800bd0e:	dd05      	ble.n	800bd1c <__kernel_rem_pio2+0x3a8>
 800bd10:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800bd14:	f108 0801 	add.w	r8, r8, #1
 800bd18:	3508      	adds	r5, #8
 800bd1a:	e7e0      	b.n	800bcde <__kernel_rem_pio2+0x36a>
 800bd1c:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bd20:	9900      	ldr	r1, [sp, #0]
 800bd22:	f109 0901 	add.w	r9, r9, #1
 800bd26:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bd2a:	9100      	str	r1, [sp, #0]
 800bd2c:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800bd30:	f8cd c010 	str.w	ip, [sp, #16]
 800bd34:	f7f4 fbd0 	bl	80004d8 <__aeabi_dmul>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	4630      	mov	r0, r6
 800bd3e:	4639      	mov	r1, r7
 800bd40:	f7f4 fa14 	bl	800016c <__adddf3>
 800bd44:	4606      	mov	r6, r0
 800bd46:	460f      	mov	r7, r1
 800bd48:	e7df      	b.n	800bd0a <__kernel_rem_pio2+0x396>
 800bd4a:	3c01      	subs	r4, #1
 800bd4c:	e756      	b.n	800bbfc <__kernel_rem_pio2+0x288>
 800bd4e:	f1cb 0200 	rsb	r2, fp, #0
 800bd52:	4640      	mov	r0, r8
 800bd54:	4649      	mov	r1, r9
 800bd56:	f000 fa0b 	bl	800c170 <scalbn>
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	4ba4      	ldr	r3, [pc, #656]	; (800bff0 <__kernel_rem_pio2+0x67c>)
 800bd5e:	4604      	mov	r4, r0
 800bd60:	460d      	mov	r5, r1
 800bd62:	f7f4 fe3f 	bl	80009e4 <__aeabi_dcmpge>
 800bd66:	b1f8      	cbz	r0, 800bda8 <__kernel_rem_pio2+0x434>
 800bd68:	2200      	movs	r2, #0
 800bd6a:	4ba2      	ldr	r3, [pc, #648]	; (800bff4 <__kernel_rem_pio2+0x680>)
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f7f4 fbb2 	bl	80004d8 <__aeabi_dmul>
 800bd74:	f7f4 fe60 	bl	8000a38 <__aeabi_d2iz>
 800bd78:	4607      	mov	r7, r0
 800bd7a:	f7f4 fb43 	bl	8000404 <__aeabi_i2d>
 800bd7e:	2200      	movs	r2, #0
 800bd80:	4b9b      	ldr	r3, [pc, #620]	; (800bff0 <__kernel_rem_pio2+0x67c>)
 800bd82:	f7f4 fba9 	bl	80004d8 <__aeabi_dmul>
 800bd86:	460b      	mov	r3, r1
 800bd88:	4602      	mov	r2, r0
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f7f4 f9eb 	bl	8000168 <__aeabi_dsub>
 800bd92:	f7f4 fe51 	bl	8000a38 <__aeabi_d2iz>
 800bd96:	1c74      	adds	r4, r6, #1
 800bd98:	ab0c      	add	r3, sp, #48	; 0x30
 800bd9a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bd9e:	f10b 0b18 	add.w	fp, fp, #24
 800bda2:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800bda6:	e731      	b.n	800bc0c <__kernel_rem_pio2+0x298>
 800bda8:	4620      	mov	r0, r4
 800bdaa:	4629      	mov	r1, r5
 800bdac:	f7f4 fe44 	bl	8000a38 <__aeabi_d2iz>
 800bdb0:	ab0c      	add	r3, sp, #48	; 0x30
 800bdb2:	4634      	mov	r4, r6
 800bdb4:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bdb8:	e728      	b.n	800bc0c <__kernel_rem_pio2+0x298>
 800bdba:	ab0c      	add	r3, sp, #48	; 0x30
 800bdbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bdc0:	f7f4 fb20 	bl	8000404 <__aeabi_i2d>
 800bdc4:	4632      	mov	r2, r6
 800bdc6:	463b      	mov	r3, r7
 800bdc8:	f7f4 fb86 	bl	80004d8 <__aeabi_dmul>
 800bdcc:	4642      	mov	r2, r8
 800bdce:	e86b 0102 	strd	r0, r1, [fp], #-8
 800bdd2:	464b      	mov	r3, r9
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	f7f4 fb7e 	bl	80004d8 <__aeabi_dmul>
 800bddc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bde0:	4606      	mov	r6, r0
 800bde2:	460f      	mov	r7, r1
 800bde4:	e722      	b.n	800bc2c <__kernel_rem_pio2+0x2b8>
 800bde6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800bdea:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bdee:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800bdf2:	f8cd c01c 	str.w	ip, [sp, #28]
 800bdf6:	f7f4 fb6f 	bl	80004d8 <__aeabi_dmul>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4650      	mov	r0, sl
 800be00:	4659      	mov	r1, fp
 800be02:	f7f4 f9b3 	bl	800016c <__adddf3>
 800be06:	4682      	mov	sl, r0
 800be08:	468b      	mov	fp, r1
 800be0a:	f108 0801 	add.w	r8, r8, #1
 800be0e:	9b02      	ldr	r3, [sp, #8]
 800be10:	4598      	cmp	r8, r3
 800be12:	dc01      	bgt.n	800be18 <__kernel_rem_pio2+0x4a4>
 800be14:	45b8      	cmp	r8, r7
 800be16:	dde6      	ble.n	800bde6 <__kernel_rem_pio2+0x472>
 800be18:	ab48      	add	r3, sp, #288	; 0x120
 800be1a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800be1e:	e9c7 ab00 	strd	sl, fp, [r7]
 800be22:	3e01      	subs	r6, #1
 800be24:	e707      	b.n	800bc36 <__kernel_rem_pio2+0x2c2>
 800be26:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800be28:	2b02      	cmp	r3, #2
 800be2a:	dc09      	bgt.n	800be40 <__kernel_rem_pio2+0x4cc>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dc32      	bgt.n	800be96 <__kernel_rem_pio2+0x522>
 800be30:	d05a      	beq.n	800bee8 <__kernel_rem_pio2+0x574>
 800be32:	9b04      	ldr	r3, [sp, #16]
 800be34:	f003 0007 	and.w	r0, r3, #7
 800be38:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be40:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800be42:	2b03      	cmp	r3, #3
 800be44:	d1f5      	bne.n	800be32 <__kernel_rem_pio2+0x4be>
 800be46:	ab48      	add	r3, sp, #288	; 0x120
 800be48:	441d      	add	r5, r3
 800be4a:	46aa      	mov	sl, r5
 800be4c:	46a3      	mov	fp, r4
 800be4e:	f1bb 0f00 	cmp.w	fp, #0
 800be52:	dc76      	bgt.n	800bf42 <__kernel_rem_pio2+0x5ce>
 800be54:	46aa      	mov	sl, r5
 800be56:	46a3      	mov	fp, r4
 800be58:	f1bb 0f01 	cmp.w	fp, #1
 800be5c:	f300 8090 	bgt.w	800bf80 <__kernel_rem_pio2+0x60c>
 800be60:	2700      	movs	r7, #0
 800be62:	463e      	mov	r6, r7
 800be64:	2c01      	cmp	r4, #1
 800be66:	f300 80aa 	bgt.w	800bfbe <__kernel_rem_pio2+0x64a>
 800be6a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800be6e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800be72:	9b00      	ldr	r3, [sp, #0]
 800be74:	2b00      	cmp	r3, #0
 800be76:	f040 80ac 	bne.w	800bfd2 <__kernel_rem_pio2+0x65e>
 800be7a:	4603      	mov	r3, r0
 800be7c:	462a      	mov	r2, r5
 800be7e:	9806      	ldr	r0, [sp, #24]
 800be80:	e9c0 2300 	strd	r2, r3, [r0]
 800be84:	4622      	mov	r2, r4
 800be86:	460b      	mov	r3, r1
 800be88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be8c:	463a      	mov	r2, r7
 800be8e:	4633      	mov	r3, r6
 800be90:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800be94:	e7cd      	b.n	800be32 <__kernel_rem_pio2+0x4be>
 800be96:	2000      	movs	r0, #0
 800be98:	46a0      	mov	r8, r4
 800be9a:	4601      	mov	r1, r0
 800be9c:	ab48      	add	r3, sp, #288	; 0x120
 800be9e:	441d      	add	r5, r3
 800bea0:	f1b8 0f00 	cmp.w	r8, #0
 800bea4:	da3a      	bge.n	800bf1c <__kernel_rem_pio2+0x5a8>
 800bea6:	9b00      	ldr	r3, [sp, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d03e      	beq.n	800bf2a <__kernel_rem_pio2+0x5b6>
 800beac:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800beb0:	4602      	mov	r2, r0
 800beb2:	462b      	mov	r3, r5
 800beb4:	9d06      	ldr	r5, [sp, #24]
 800beb6:	2601      	movs	r6, #1
 800beb8:	e9c5 2300 	strd	r2, r3, [r5]
 800bebc:	460b      	mov	r3, r1
 800bebe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bec2:	f7f4 f951 	bl	8000168 <__aeabi_dsub>
 800bec6:	4684      	mov	ip, r0
 800bec8:	460f      	mov	r7, r1
 800beca:	ad48      	add	r5, sp, #288	; 0x120
 800becc:	42b4      	cmp	r4, r6
 800bece:	f105 0508 	add.w	r5, r5, #8
 800bed2:	da2c      	bge.n	800bf2e <__kernel_rem_pio2+0x5ba>
 800bed4:	9b00      	ldr	r3, [sp, #0]
 800bed6:	b10b      	cbz	r3, 800bedc <__kernel_rem_pio2+0x568>
 800bed8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bedc:	4662      	mov	r2, ip
 800bede:	463b      	mov	r3, r7
 800bee0:	9906      	ldr	r1, [sp, #24]
 800bee2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bee6:	e7a4      	b.n	800be32 <__kernel_rem_pio2+0x4be>
 800bee8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800beea:	ab48      	add	r3, sp, #288	; 0x120
 800beec:	4637      	mov	r7, r6
 800beee:	441d      	add	r5, r3
 800bef0:	2c00      	cmp	r4, #0
 800bef2:	da09      	bge.n	800bf08 <__kernel_rem_pio2+0x594>
 800bef4:	9b00      	ldr	r3, [sp, #0]
 800bef6:	b10b      	cbz	r3, 800befc <__kernel_rem_pio2+0x588>
 800bef8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800befc:	4632      	mov	r2, r6
 800befe:	463b      	mov	r3, r7
 800bf00:	9906      	ldr	r1, [sp, #24]
 800bf02:	e9c1 2300 	strd	r2, r3, [r1]
 800bf06:	e794      	b.n	800be32 <__kernel_rem_pio2+0x4be>
 800bf08:	4630      	mov	r0, r6
 800bf0a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf0e:	4639      	mov	r1, r7
 800bf10:	f7f4 f92c 	bl	800016c <__adddf3>
 800bf14:	3c01      	subs	r4, #1
 800bf16:	4606      	mov	r6, r0
 800bf18:	460f      	mov	r7, r1
 800bf1a:	e7e9      	b.n	800bef0 <__kernel_rem_pio2+0x57c>
 800bf1c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf20:	f7f4 f924 	bl	800016c <__adddf3>
 800bf24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bf28:	e7ba      	b.n	800bea0 <__kernel_rem_pio2+0x52c>
 800bf2a:	460d      	mov	r5, r1
 800bf2c:	e7c0      	b.n	800beb0 <__kernel_rem_pio2+0x53c>
 800bf2e:	4660      	mov	r0, ip
 800bf30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf34:	4639      	mov	r1, r7
 800bf36:	f7f4 f919 	bl	800016c <__adddf3>
 800bf3a:	3601      	adds	r6, #1
 800bf3c:	4684      	mov	ip, r0
 800bf3e:	460f      	mov	r7, r1
 800bf40:	e7c4      	b.n	800becc <__kernel_rem_pio2+0x558>
 800bf42:	e9da 6700 	ldrd	r6, r7, [sl]
 800bf46:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	463b      	mov	r3, r7
 800bf4e:	4640      	mov	r0, r8
 800bf50:	4649      	mov	r1, r9
 800bf52:	f7f4 f90b 	bl	800016c <__adddf3>
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf5e:	4640      	mov	r0, r8
 800bf60:	4649      	mov	r1, r9
 800bf62:	f7f4 f901 	bl	8000168 <__aeabi_dsub>
 800bf66:	4632      	mov	r2, r6
 800bf68:	463b      	mov	r3, r7
 800bf6a:	f7f4 f8ff 	bl	800016c <__adddf3>
 800bf6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf72:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bf76:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bf7a:	e9ca 2300 	strd	r2, r3, [sl]
 800bf7e:	e766      	b.n	800be4e <__kernel_rem_pio2+0x4da>
 800bf80:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf84:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bf88:	4642      	mov	r2, r8
 800bf8a:	464b      	mov	r3, r9
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 f8ec 	bl	800016c <__adddf3>
 800bf94:	4602      	mov	r2, r0
 800bf96:	460b      	mov	r3, r1
 800bf98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	4639      	mov	r1, r7
 800bfa0:	f7f4 f8e2 	bl	8000168 <__aeabi_dsub>
 800bfa4:	4642      	mov	r2, r8
 800bfa6:	464b      	mov	r3, r9
 800bfa8:	f7f4 f8e0 	bl	800016c <__adddf3>
 800bfac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfb0:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bfb4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bfb8:	e9ca 2300 	strd	r2, r3, [sl]
 800bfbc:	e74c      	b.n	800be58 <__kernel_rem_pio2+0x4e4>
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	f7f4 f8d1 	bl	800016c <__adddf3>
 800bfca:	3c01      	subs	r4, #1
 800bfcc:	4607      	mov	r7, r0
 800bfce:	460e      	mov	r6, r1
 800bfd0:	e748      	b.n	800be64 <__kernel_rem_pio2+0x4f0>
 800bfd2:	9b06      	ldr	r3, [sp, #24]
 800bfd4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bfd8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bfdc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bfe0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800bfe4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800bfe8:	601d      	str	r5, [r3, #0]
 800bfea:	615e      	str	r6, [r3, #20]
 800bfec:	e721      	b.n	800be32 <__kernel_rem_pio2+0x4be>
 800bfee:	bf00      	nop
 800bff0:	41700000 	.word	0x41700000
 800bff4:	3e700000 	.word	0x3e700000

0800bff8 <__kernel_sin>:
 800bff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bffc:	b086      	sub	sp, #24
 800bffe:	e9cd 2300 	strd	r2, r3, [sp]
 800c002:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c006:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c00a:	4682      	mov	sl, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c010:	da03      	bge.n	800c01a <__kernel_sin+0x22>
 800c012:	f7f4 fd11 	bl	8000a38 <__aeabi_d2iz>
 800c016:	2800      	cmp	r0, #0
 800c018:	d050      	beq.n	800c0bc <__kernel_sin+0xc4>
 800c01a:	4652      	mov	r2, sl
 800c01c:	4623      	mov	r3, r4
 800c01e:	4650      	mov	r0, sl
 800c020:	4621      	mov	r1, r4
 800c022:	f7f4 fa59 	bl	80004d8 <__aeabi_dmul>
 800c026:	4606      	mov	r6, r0
 800c028:	460f      	mov	r7, r1
 800c02a:	4602      	mov	r2, r0
 800c02c:	460b      	mov	r3, r1
 800c02e:	4650      	mov	r0, sl
 800c030:	4621      	mov	r1, r4
 800c032:	f7f4 fa51 	bl	80004d8 <__aeabi_dmul>
 800c036:	a33e      	add	r3, pc, #248	; (adr r3, 800c130 <__kernel_sin+0x138>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	4680      	mov	r8, r0
 800c03e:	4689      	mov	r9, r1
 800c040:	4630      	mov	r0, r6
 800c042:	4639      	mov	r1, r7
 800c044:	f7f4 fa48 	bl	80004d8 <__aeabi_dmul>
 800c048:	a33b      	add	r3, pc, #236	; (adr r3, 800c138 <__kernel_sin+0x140>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 f88b 	bl	8000168 <__aeabi_dsub>
 800c052:	4632      	mov	r2, r6
 800c054:	463b      	mov	r3, r7
 800c056:	f7f4 fa3f 	bl	80004d8 <__aeabi_dmul>
 800c05a:	a339      	add	r3, pc, #228	; (adr r3, 800c140 <__kernel_sin+0x148>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f7f4 f884 	bl	800016c <__adddf3>
 800c064:	4632      	mov	r2, r6
 800c066:	463b      	mov	r3, r7
 800c068:	f7f4 fa36 	bl	80004d8 <__aeabi_dmul>
 800c06c:	a336      	add	r3, pc, #216	; (adr r3, 800c148 <__kernel_sin+0x150>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 f879 	bl	8000168 <__aeabi_dsub>
 800c076:	4632      	mov	r2, r6
 800c078:	463b      	mov	r3, r7
 800c07a:	f7f4 fa2d 	bl	80004d8 <__aeabi_dmul>
 800c07e:	a334      	add	r3, pc, #208	; (adr r3, 800c150 <__kernel_sin+0x158>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 f872 	bl	800016c <__adddf3>
 800c088:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c08c:	b9dd      	cbnz	r5, 800c0c6 <__kernel_sin+0xce>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 fa1f 	bl	80004d8 <__aeabi_dmul>
 800c09a:	a32f      	add	r3, pc, #188	; (adr r3, 800c158 <__kernel_sin+0x160>)
 800c09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a0:	f7f4 f862 	bl	8000168 <__aeabi_dsub>
 800c0a4:	4642      	mov	r2, r8
 800c0a6:	464b      	mov	r3, r9
 800c0a8:	f7f4 fa16 	bl	80004d8 <__aeabi_dmul>
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	460b      	mov	r3, r1
 800c0b0:	4650      	mov	r0, sl
 800c0b2:	4621      	mov	r1, r4
 800c0b4:	f7f4 f85a 	bl	800016c <__adddf3>
 800c0b8:	4682      	mov	sl, r0
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	4650      	mov	r0, sl
 800c0be:	4621      	mov	r1, r4
 800c0c0:	b006      	add	sp, #24
 800c0c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0cc:	4b24      	ldr	r3, [pc, #144]	; (800c160 <__kernel_sin+0x168>)
 800c0ce:	f7f4 fa03 	bl	80004d8 <__aeabi_dmul>
 800c0d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c0d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0da:	4640      	mov	r0, r8
 800c0dc:	4649      	mov	r1, r9
 800c0de:	f7f4 f9fb 	bl	80004d8 <__aeabi_dmul>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0ea:	f7f4 f83d 	bl	8000168 <__aeabi_dsub>
 800c0ee:	4632      	mov	r2, r6
 800c0f0:	463b      	mov	r3, r7
 800c0f2:	f7f4 f9f1 	bl	80004d8 <__aeabi_dmul>
 800c0f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0fa:	f7f4 f835 	bl	8000168 <__aeabi_dsub>
 800c0fe:	a316      	add	r3, pc, #88	; (adr r3, 800c158 <__kernel_sin+0x160>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	4606      	mov	r6, r0
 800c106:	460f      	mov	r7, r1
 800c108:	4640      	mov	r0, r8
 800c10a:	4649      	mov	r1, r9
 800c10c:	f7f4 f9e4 	bl	80004d8 <__aeabi_dmul>
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	4630      	mov	r0, r6
 800c116:	4639      	mov	r1, r7
 800c118:	f7f4 f828 	bl	800016c <__adddf3>
 800c11c:	4602      	mov	r2, r0
 800c11e:	460b      	mov	r3, r1
 800c120:	4650      	mov	r0, sl
 800c122:	4621      	mov	r1, r4
 800c124:	f7f4 f820 	bl	8000168 <__aeabi_dsub>
 800c128:	e7c6      	b.n	800c0b8 <__kernel_sin+0xc0>
 800c12a:	bf00      	nop
 800c12c:	f3af 8000 	nop.w
 800c130:	5acfd57c 	.word	0x5acfd57c
 800c134:	3de5d93a 	.word	0x3de5d93a
 800c138:	8a2b9ceb 	.word	0x8a2b9ceb
 800c13c:	3e5ae5e6 	.word	0x3e5ae5e6
 800c140:	57b1fe7d 	.word	0x57b1fe7d
 800c144:	3ec71de3 	.word	0x3ec71de3
 800c148:	19c161d5 	.word	0x19c161d5
 800c14c:	3f2a01a0 	.word	0x3f2a01a0
 800c150:	1110f8a6 	.word	0x1110f8a6
 800c154:	3f811111 	.word	0x3f811111
 800c158:	55555549 	.word	0x55555549
 800c15c:	3fc55555 	.word	0x3fc55555
 800c160:	3fe00000 	.word	0x3fe00000

0800c164 <fabs>:
 800c164:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c168:	4770      	bx	lr
 800c16a:	0000      	movs	r0, r0
 800c16c:	0000      	movs	r0, r0
	...

0800c170 <scalbn>:
 800c170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c172:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c176:	4604      	mov	r4, r0
 800c178:	460d      	mov	r5, r1
 800c17a:	4617      	mov	r7, r2
 800c17c:	460b      	mov	r3, r1
 800c17e:	b996      	cbnz	r6, 800c1a6 <scalbn+0x36>
 800c180:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c184:	4303      	orrs	r3, r0
 800c186:	d039      	beq.n	800c1fc <scalbn+0x8c>
 800c188:	4b33      	ldr	r3, [pc, #204]	; (800c258 <scalbn+0xe8>)
 800c18a:	2200      	movs	r2, #0
 800c18c:	f7f4 f9a4 	bl	80004d8 <__aeabi_dmul>
 800c190:	4b32      	ldr	r3, [pc, #200]	; (800c25c <scalbn+0xec>)
 800c192:	4604      	mov	r4, r0
 800c194:	429f      	cmp	r7, r3
 800c196:	460d      	mov	r5, r1
 800c198:	da0f      	bge.n	800c1ba <scalbn+0x4a>
 800c19a:	a32b      	add	r3, pc, #172	; (adr r3, 800c248 <scalbn+0xd8>)
 800c19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a0:	f7f4 f99a 	bl	80004d8 <__aeabi_dmul>
 800c1a4:	e006      	b.n	800c1b4 <scalbn+0x44>
 800c1a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c1aa:	4296      	cmp	r6, r2
 800c1ac:	d10a      	bne.n	800c1c4 <scalbn+0x54>
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	f7f3 ffdc 	bl	800016c <__adddf3>
 800c1b4:	4604      	mov	r4, r0
 800c1b6:	460d      	mov	r5, r1
 800c1b8:	e020      	b.n	800c1fc <scalbn+0x8c>
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c1c0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c1c4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c1c8:	19b9      	adds	r1, r7, r6
 800c1ca:	4291      	cmp	r1, r2
 800c1cc:	dd0e      	ble.n	800c1ec <scalbn+0x7c>
 800c1ce:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c1d2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c1d6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c1da:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c1de:	4820      	ldr	r0, [pc, #128]	; (800c260 <scalbn+0xf0>)
 800c1e0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c1e4:	a31a      	add	r3, pc, #104	; (adr r3, 800c250 <scalbn+0xe0>)
 800c1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ea:	e7d9      	b.n	800c1a0 <scalbn+0x30>
 800c1ec:	2900      	cmp	r1, #0
 800c1ee:	dd08      	ble.n	800c202 <scalbn+0x92>
 800c1f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c202:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c206:	da12      	bge.n	800c22e <scalbn+0xbe>
 800c208:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c20c:	429f      	cmp	r7, r3
 800c20e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c212:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c216:	dcdc      	bgt.n	800c1d2 <scalbn+0x62>
 800c218:	a30b      	add	r3, pc, #44	; (adr r3, 800c248 <scalbn+0xd8>)
 800c21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c21e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c222:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c226:	480f      	ldr	r0, [pc, #60]	; (800c264 <scalbn+0xf4>)
 800c228:	f041 011f 	orr.w	r1, r1, #31
 800c22c:	e7b8      	b.n	800c1a0 <scalbn+0x30>
 800c22e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c232:	3136      	adds	r1, #54	; 0x36
 800c234:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c238:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c23c:	4620      	mov	r0, r4
 800c23e:	4629      	mov	r1, r5
 800c240:	2200      	movs	r2, #0
 800c242:	4b09      	ldr	r3, [pc, #36]	; (800c268 <scalbn+0xf8>)
 800c244:	e7ac      	b.n	800c1a0 <scalbn+0x30>
 800c246:	bf00      	nop
 800c248:	c2f8f359 	.word	0xc2f8f359
 800c24c:	01a56e1f 	.word	0x01a56e1f
 800c250:	8800759c 	.word	0x8800759c
 800c254:	7e37e43c 	.word	0x7e37e43c
 800c258:	43500000 	.word	0x43500000
 800c25c:	ffff3cb0 	.word	0xffff3cb0
 800c260:	8800759c 	.word	0x8800759c
 800c264:	c2f8f359 	.word	0xc2f8f359
 800c268:	3c900000 	.word	0x3c900000

0800c26c <__errno>:
 800c26c:	4b01      	ldr	r3, [pc, #4]	; (800c274 <__errno+0x8>)
 800c26e:	6818      	ldr	r0, [r3, #0]
 800c270:	4770      	bx	lr
 800c272:	bf00      	nop
 800c274:	20000198 	.word	0x20000198

0800c278 <__libc_init_array>:
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	2600      	movs	r6, #0
 800c27c:	4d0c      	ldr	r5, [pc, #48]	; (800c2b0 <__libc_init_array+0x38>)
 800c27e:	4c0d      	ldr	r4, [pc, #52]	; (800c2b4 <__libc_init_array+0x3c>)
 800c280:	1b64      	subs	r4, r4, r5
 800c282:	10a4      	asrs	r4, r4, #2
 800c284:	42a6      	cmp	r6, r4
 800c286:	d109      	bne.n	800c29c <__libc_init_array+0x24>
 800c288:	f000 fc9c 	bl	800cbc4 <_init>
 800c28c:	2600      	movs	r6, #0
 800c28e:	4d0a      	ldr	r5, [pc, #40]	; (800c2b8 <__libc_init_array+0x40>)
 800c290:	4c0a      	ldr	r4, [pc, #40]	; (800c2bc <__libc_init_array+0x44>)
 800c292:	1b64      	subs	r4, r4, r5
 800c294:	10a4      	asrs	r4, r4, #2
 800c296:	42a6      	cmp	r6, r4
 800c298:	d105      	bne.n	800c2a6 <__libc_init_array+0x2e>
 800c29a:	bd70      	pop	{r4, r5, r6, pc}
 800c29c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a0:	4798      	blx	r3
 800c2a2:	3601      	adds	r6, #1
 800c2a4:	e7ee      	b.n	800c284 <__libc_init_array+0xc>
 800c2a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2aa:	4798      	blx	r3
 800c2ac:	3601      	adds	r6, #1
 800c2ae:	e7f2      	b.n	800c296 <__libc_init_array+0x1e>
 800c2b0:	0800ce94 	.word	0x0800ce94
 800c2b4:	0800ce94 	.word	0x0800ce94
 800c2b8:	0800ce94 	.word	0x0800ce94
 800c2bc:	0800ce98 	.word	0x0800ce98

0800c2c0 <memset>:
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	4402      	add	r2, r0
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d100      	bne.n	800c2ca <memset+0xa>
 800c2c8:	4770      	bx	lr
 800c2ca:	f803 1b01 	strb.w	r1, [r3], #1
 800c2ce:	e7f9      	b.n	800c2c4 <memset+0x4>

0800c2d0 <siprintf>:
 800c2d0:	b40e      	push	{r1, r2, r3}
 800c2d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c2d6:	b500      	push	{lr}
 800c2d8:	b09c      	sub	sp, #112	; 0x70
 800c2da:	ab1d      	add	r3, sp, #116	; 0x74
 800c2dc:	9002      	str	r0, [sp, #8]
 800c2de:	9006      	str	r0, [sp, #24]
 800c2e0:	9107      	str	r1, [sp, #28]
 800c2e2:	9104      	str	r1, [sp, #16]
 800c2e4:	4808      	ldr	r0, [pc, #32]	; (800c308 <siprintf+0x38>)
 800c2e6:	4909      	ldr	r1, [pc, #36]	; (800c30c <siprintf+0x3c>)
 800c2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ec:	9105      	str	r1, [sp, #20]
 800c2ee:	6800      	ldr	r0, [r0, #0]
 800c2f0:	a902      	add	r1, sp, #8
 800c2f2:	9301      	str	r3, [sp, #4]
 800c2f4:	f000 f868 	bl	800c3c8 <_svfiprintf_r>
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	9b02      	ldr	r3, [sp, #8]
 800c2fc:	701a      	strb	r2, [r3, #0]
 800c2fe:	b01c      	add	sp, #112	; 0x70
 800c300:	f85d eb04 	ldr.w	lr, [sp], #4
 800c304:	b003      	add	sp, #12
 800c306:	4770      	bx	lr
 800c308:	20000198 	.word	0x20000198
 800c30c:	ffff0208 	.word	0xffff0208

0800c310 <__ssputs_r>:
 800c310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c314:	688e      	ldr	r6, [r1, #8]
 800c316:	4682      	mov	sl, r0
 800c318:	429e      	cmp	r6, r3
 800c31a:	460c      	mov	r4, r1
 800c31c:	4690      	mov	r8, r2
 800c31e:	461f      	mov	r7, r3
 800c320:	d838      	bhi.n	800c394 <__ssputs_r+0x84>
 800c322:	898a      	ldrh	r2, [r1, #12]
 800c324:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c328:	d032      	beq.n	800c390 <__ssputs_r+0x80>
 800c32a:	6825      	ldr	r5, [r4, #0]
 800c32c:	6909      	ldr	r1, [r1, #16]
 800c32e:	3301      	adds	r3, #1
 800c330:	eba5 0901 	sub.w	r9, r5, r1
 800c334:	6965      	ldr	r5, [r4, #20]
 800c336:	444b      	add	r3, r9
 800c338:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c33c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c340:	106d      	asrs	r5, r5, #1
 800c342:	429d      	cmp	r5, r3
 800c344:	bf38      	it	cc
 800c346:	461d      	movcc	r5, r3
 800c348:	0553      	lsls	r3, r2, #21
 800c34a:	d531      	bpl.n	800c3b0 <__ssputs_r+0xa0>
 800c34c:	4629      	mov	r1, r5
 800c34e:	f000 fb6f 	bl	800ca30 <_malloc_r>
 800c352:	4606      	mov	r6, r0
 800c354:	b950      	cbnz	r0, 800c36c <__ssputs_r+0x5c>
 800c356:	230c      	movs	r3, #12
 800c358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c35c:	f8ca 3000 	str.w	r3, [sl]
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36c:	464a      	mov	r2, r9
 800c36e:	6921      	ldr	r1, [r4, #16]
 800c370:	f000 face 	bl	800c910 <memcpy>
 800c374:	89a3      	ldrh	r3, [r4, #12]
 800c376:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c37a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c37e:	81a3      	strh	r3, [r4, #12]
 800c380:	6126      	str	r6, [r4, #16]
 800c382:	444e      	add	r6, r9
 800c384:	6026      	str	r6, [r4, #0]
 800c386:	463e      	mov	r6, r7
 800c388:	6165      	str	r5, [r4, #20]
 800c38a:	eba5 0509 	sub.w	r5, r5, r9
 800c38e:	60a5      	str	r5, [r4, #8]
 800c390:	42be      	cmp	r6, r7
 800c392:	d900      	bls.n	800c396 <__ssputs_r+0x86>
 800c394:	463e      	mov	r6, r7
 800c396:	4632      	mov	r2, r6
 800c398:	4641      	mov	r1, r8
 800c39a:	6820      	ldr	r0, [r4, #0]
 800c39c:	f000 fac6 	bl	800c92c <memmove>
 800c3a0:	68a3      	ldr	r3, [r4, #8]
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	1b9b      	subs	r3, r3, r6
 800c3a6:	60a3      	str	r3, [r4, #8]
 800c3a8:	6823      	ldr	r3, [r4, #0]
 800c3aa:	4433      	add	r3, r6
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	e7db      	b.n	800c368 <__ssputs_r+0x58>
 800c3b0:	462a      	mov	r2, r5
 800c3b2:	f000 fbb1 	bl	800cb18 <_realloc_r>
 800c3b6:	4606      	mov	r6, r0
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d1e1      	bne.n	800c380 <__ssputs_r+0x70>
 800c3bc:	4650      	mov	r0, sl
 800c3be:	6921      	ldr	r1, [r4, #16]
 800c3c0:	f000 face 	bl	800c960 <_free_r>
 800c3c4:	e7c7      	b.n	800c356 <__ssputs_r+0x46>
	...

0800c3c8 <_svfiprintf_r>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	4698      	mov	r8, r3
 800c3ce:	898b      	ldrh	r3, [r1, #12]
 800c3d0:	4607      	mov	r7, r0
 800c3d2:	061b      	lsls	r3, r3, #24
 800c3d4:	460d      	mov	r5, r1
 800c3d6:	4614      	mov	r4, r2
 800c3d8:	b09d      	sub	sp, #116	; 0x74
 800c3da:	d50e      	bpl.n	800c3fa <_svfiprintf_r+0x32>
 800c3dc:	690b      	ldr	r3, [r1, #16]
 800c3de:	b963      	cbnz	r3, 800c3fa <_svfiprintf_r+0x32>
 800c3e0:	2140      	movs	r1, #64	; 0x40
 800c3e2:	f000 fb25 	bl	800ca30 <_malloc_r>
 800c3e6:	6028      	str	r0, [r5, #0]
 800c3e8:	6128      	str	r0, [r5, #16]
 800c3ea:	b920      	cbnz	r0, 800c3f6 <_svfiprintf_r+0x2e>
 800c3ec:	230c      	movs	r3, #12
 800c3ee:	603b      	str	r3, [r7, #0]
 800c3f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3f4:	e0d1      	b.n	800c59a <_svfiprintf_r+0x1d2>
 800c3f6:	2340      	movs	r3, #64	; 0x40
 800c3f8:	616b      	str	r3, [r5, #20]
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c3fe:	2320      	movs	r3, #32
 800c400:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c404:	2330      	movs	r3, #48	; 0x30
 800c406:	f04f 0901 	mov.w	r9, #1
 800c40a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c40e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c5b4 <_svfiprintf_r+0x1ec>
 800c412:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c416:	4623      	mov	r3, r4
 800c418:	469a      	mov	sl, r3
 800c41a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c41e:	b10a      	cbz	r2, 800c424 <_svfiprintf_r+0x5c>
 800c420:	2a25      	cmp	r2, #37	; 0x25
 800c422:	d1f9      	bne.n	800c418 <_svfiprintf_r+0x50>
 800c424:	ebba 0b04 	subs.w	fp, sl, r4
 800c428:	d00b      	beq.n	800c442 <_svfiprintf_r+0x7a>
 800c42a:	465b      	mov	r3, fp
 800c42c:	4622      	mov	r2, r4
 800c42e:	4629      	mov	r1, r5
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ff6d 	bl	800c310 <__ssputs_r>
 800c436:	3001      	adds	r0, #1
 800c438:	f000 80aa 	beq.w	800c590 <_svfiprintf_r+0x1c8>
 800c43c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c43e:	445a      	add	r2, fp
 800c440:	9209      	str	r2, [sp, #36]	; 0x24
 800c442:	f89a 3000 	ldrb.w	r3, [sl]
 800c446:	2b00      	cmp	r3, #0
 800c448:	f000 80a2 	beq.w	800c590 <_svfiprintf_r+0x1c8>
 800c44c:	2300      	movs	r3, #0
 800c44e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c456:	f10a 0a01 	add.w	sl, sl, #1
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	9307      	str	r3, [sp, #28]
 800c45e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c462:	931a      	str	r3, [sp, #104]	; 0x68
 800c464:	4654      	mov	r4, sl
 800c466:	2205      	movs	r2, #5
 800c468:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c46c:	4851      	ldr	r0, [pc, #324]	; (800c5b4 <_svfiprintf_r+0x1ec>)
 800c46e:	f000 fa41 	bl	800c8f4 <memchr>
 800c472:	9a04      	ldr	r2, [sp, #16]
 800c474:	b9d8      	cbnz	r0, 800c4ae <_svfiprintf_r+0xe6>
 800c476:	06d0      	lsls	r0, r2, #27
 800c478:	bf44      	itt	mi
 800c47a:	2320      	movmi	r3, #32
 800c47c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c480:	0711      	lsls	r1, r2, #28
 800c482:	bf44      	itt	mi
 800c484:	232b      	movmi	r3, #43	; 0x2b
 800c486:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c48a:	f89a 3000 	ldrb.w	r3, [sl]
 800c48e:	2b2a      	cmp	r3, #42	; 0x2a
 800c490:	d015      	beq.n	800c4be <_svfiprintf_r+0xf6>
 800c492:	4654      	mov	r4, sl
 800c494:	2000      	movs	r0, #0
 800c496:	f04f 0c0a 	mov.w	ip, #10
 800c49a:	9a07      	ldr	r2, [sp, #28]
 800c49c:	4621      	mov	r1, r4
 800c49e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4a2:	3b30      	subs	r3, #48	; 0x30
 800c4a4:	2b09      	cmp	r3, #9
 800c4a6:	d94e      	bls.n	800c546 <_svfiprintf_r+0x17e>
 800c4a8:	b1b0      	cbz	r0, 800c4d8 <_svfiprintf_r+0x110>
 800c4aa:	9207      	str	r2, [sp, #28]
 800c4ac:	e014      	b.n	800c4d8 <_svfiprintf_r+0x110>
 800c4ae:	eba0 0308 	sub.w	r3, r0, r8
 800c4b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	46a2      	mov	sl, r4
 800c4ba:	9304      	str	r3, [sp, #16]
 800c4bc:	e7d2      	b.n	800c464 <_svfiprintf_r+0x9c>
 800c4be:	9b03      	ldr	r3, [sp, #12]
 800c4c0:	1d19      	adds	r1, r3, #4
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	9103      	str	r1, [sp, #12]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	bfbb      	ittet	lt
 800c4ca:	425b      	neglt	r3, r3
 800c4cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c4d0:	9307      	strge	r3, [sp, #28]
 800c4d2:	9307      	strlt	r3, [sp, #28]
 800c4d4:	bfb8      	it	lt
 800c4d6:	9204      	strlt	r2, [sp, #16]
 800c4d8:	7823      	ldrb	r3, [r4, #0]
 800c4da:	2b2e      	cmp	r3, #46	; 0x2e
 800c4dc:	d10c      	bne.n	800c4f8 <_svfiprintf_r+0x130>
 800c4de:	7863      	ldrb	r3, [r4, #1]
 800c4e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4e2:	d135      	bne.n	800c550 <_svfiprintf_r+0x188>
 800c4e4:	9b03      	ldr	r3, [sp, #12]
 800c4e6:	3402      	adds	r4, #2
 800c4e8:	1d1a      	adds	r2, r3, #4
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	9203      	str	r2, [sp, #12]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	bfb8      	it	lt
 800c4f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c4f6:	9305      	str	r3, [sp, #20]
 800c4f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c5b8 <_svfiprintf_r+0x1f0>
 800c4fc:	2203      	movs	r2, #3
 800c4fe:	4650      	mov	r0, sl
 800c500:	7821      	ldrb	r1, [r4, #0]
 800c502:	f000 f9f7 	bl	800c8f4 <memchr>
 800c506:	b140      	cbz	r0, 800c51a <_svfiprintf_r+0x152>
 800c508:	2340      	movs	r3, #64	; 0x40
 800c50a:	eba0 000a 	sub.w	r0, r0, sl
 800c50e:	fa03 f000 	lsl.w	r0, r3, r0
 800c512:	9b04      	ldr	r3, [sp, #16]
 800c514:	3401      	adds	r4, #1
 800c516:	4303      	orrs	r3, r0
 800c518:	9304      	str	r3, [sp, #16]
 800c51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c51e:	2206      	movs	r2, #6
 800c520:	4826      	ldr	r0, [pc, #152]	; (800c5bc <_svfiprintf_r+0x1f4>)
 800c522:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c526:	f000 f9e5 	bl	800c8f4 <memchr>
 800c52a:	2800      	cmp	r0, #0
 800c52c:	d038      	beq.n	800c5a0 <_svfiprintf_r+0x1d8>
 800c52e:	4b24      	ldr	r3, [pc, #144]	; (800c5c0 <_svfiprintf_r+0x1f8>)
 800c530:	bb1b      	cbnz	r3, 800c57a <_svfiprintf_r+0x1b2>
 800c532:	9b03      	ldr	r3, [sp, #12]
 800c534:	3307      	adds	r3, #7
 800c536:	f023 0307 	bic.w	r3, r3, #7
 800c53a:	3308      	adds	r3, #8
 800c53c:	9303      	str	r3, [sp, #12]
 800c53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c540:	4433      	add	r3, r6
 800c542:	9309      	str	r3, [sp, #36]	; 0x24
 800c544:	e767      	b.n	800c416 <_svfiprintf_r+0x4e>
 800c546:	460c      	mov	r4, r1
 800c548:	2001      	movs	r0, #1
 800c54a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c54e:	e7a5      	b.n	800c49c <_svfiprintf_r+0xd4>
 800c550:	2300      	movs	r3, #0
 800c552:	f04f 0c0a 	mov.w	ip, #10
 800c556:	4619      	mov	r1, r3
 800c558:	3401      	adds	r4, #1
 800c55a:	9305      	str	r3, [sp, #20]
 800c55c:	4620      	mov	r0, r4
 800c55e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c562:	3a30      	subs	r2, #48	; 0x30
 800c564:	2a09      	cmp	r2, #9
 800c566:	d903      	bls.n	800c570 <_svfiprintf_r+0x1a8>
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d0c5      	beq.n	800c4f8 <_svfiprintf_r+0x130>
 800c56c:	9105      	str	r1, [sp, #20]
 800c56e:	e7c3      	b.n	800c4f8 <_svfiprintf_r+0x130>
 800c570:	4604      	mov	r4, r0
 800c572:	2301      	movs	r3, #1
 800c574:	fb0c 2101 	mla	r1, ip, r1, r2
 800c578:	e7f0      	b.n	800c55c <_svfiprintf_r+0x194>
 800c57a:	ab03      	add	r3, sp, #12
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	462a      	mov	r2, r5
 800c580:	4638      	mov	r0, r7
 800c582:	4b10      	ldr	r3, [pc, #64]	; (800c5c4 <_svfiprintf_r+0x1fc>)
 800c584:	a904      	add	r1, sp, #16
 800c586:	f3af 8000 	nop.w
 800c58a:	1c42      	adds	r2, r0, #1
 800c58c:	4606      	mov	r6, r0
 800c58e:	d1d6      	bne.n	800c53e <_svfiprintf_r+0x176>
 800c590:	89ab      	ldrh	r3, [r5, #12]
 800c592:	065b      	lsls	r3, r3, #25
 800c594:	f53f af2c 	bmi.w	800c3f0 <_svfiprintf_r+0x28>
 800c598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c59a:	b01d      	add	sp, #116	; 0x74
 800c59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5a0:	ab03      	add	r3, sp, #12
 800c5a2:	9300      	str	r3, [sp, #0]
 800c5a4:	462a      	mov	r2, r5
 800c5a6:	4638      	mov	r0, r7
 800c5a8:	4b06      	ldr	r3, [pc, #24]	; (800c5c4 <_svfiprintf_r+0x1fc>)
 800c5aa:	a904      	add	r1, sp, #16
 800c5ac:	f000 f87c 	bl	800c6a8 <_printf_i>
 800c5b0:	e7eb      	b.n	800c58a <_svfiprintf_r+0x1c2>
 800c5b2:	bf00      	nop
 800c5b4:	0800ce60 	.word	0x0800ce60
 800c5b8:	0800ce66 	.word	0x0800ce66
 800c5bc:	0800ce6a 	.word	0x0800ce6a
 800c5c0:	00000000 	.word	0x00000000
 800c5c4:	0800c311 	.word	0x0800c311

0800c5c8 <_printf_common>:
 800c5c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	4699      	mov	r9, r3
 800c5d0:	688a      	ldr	r2, [r1, #8]
 800c5d2:	690b      	ldr	r3, [r1, #16]
 800c5d4:	4607      	mov	r7, r0
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	bfb8      	it	lt
 800c5da:	4613      	movlt	r3, r2
 800c5dc:	6033      	str	r3, [r6, #0]
 800c5de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5e2:	460c      	mov	r4, r1
 800c5e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5e8:	b10a      	cbz	r2, 800c5ee <_printf_common+0x26>
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	6033      	str	r3, [r6, #0]
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	0699      	lsls	r1, r3, #26
 800c5f2:	bf42      	ittt	mi
 800c5f4:	6833      	ldrmi	r3, [r6, #0]
 800c5f6:	3302      	addmi	r3, #2
 800c5f8:	6033      	strmi	r3, [r6, #0]
 800c5fa:	6825      	ldr	r5, [r4, #0]
 800c5fc:	f015 0506 	ands.w	r5, r5, #6
 800c600:	d106      	bne.n	800c610 <_printf_common+0x48>
 800c602:	f104 0a19 	add.w	sl, r4, #25
 800c606:	68e3      	ldr	r3, [r4, #12]
 800c608:	6832      	ldr	r2, [r6, #0]
 800c60a:	1a9b      	subs	r3, r3, r2
 800c60c:	42ab      	cmp	r3, r5
 800c60e:	dc28      	bgt.n	800c662 <_printf_common+0x9a>
 800c610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c614:	1e13      	subs	r3, r2, #0
 800c616:	6822      	ldr	r2, [r4, #0]
 800c618:	bf18      	it	ne
 800c61a:	2301      	movne	r3, #1
 800c61c:	0692      	lsls	r2, r2, #26
 800c61e:	d42d      	bmi.n	800c67c <_printf_common+0xb4>
 800c620:	4649      	mov	r1, r9
 800c622:	4638      	mov	r0, r7
 800c624:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c628:	47c0      	blx	r8
 800c62a:	3001      	adds	r0, #1
 800c62c:	d020      	beq.n	800c670 <_printf_common+0xa8>
 800c62e:	6823      	ldr	r3, [r4, #0]
 800c630:	68e5      	ldr	r5, [r4, #12]
 800c632:	f003 0306 	and.w	r3, r3, #6
 800c636:	2b04      	cmp	r3, #4
 800c638:	bf18      	it	ne
 800c63a:	2500      	movne	r5, #0
 800c63c:	6832      	ldr	r2, [r6, #0]
 800c63e:	f04f 0600 	mov.w	r6, #0
 800c642:	68a3      	ldr	r3, [r4, #8]
 800c644:	bf08      	it	eq
 800c646:	1aad      	subeq	r5, r5, r2
 800c648:	6922      	ldr	r2, [r4, #16]
 800c64a:	bf08      	it	eq
 800c64c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c650:	4293      	cmp	r3, r2
 800c652:	bfc4      	itt	gt
 800c654:	1a9b      	subgt	r3, r3, r2
 800c656:	18ed      	addgt	r5, r5, r3
 800c658:	341a      	adds	r4, #26
 800c65a:	42b5      	cmp	r5, r6
 800c65c:	d11a      	bne.n	800c694 <_printf_common+0xcc>
 800c65e:	2000      	movs	r0, #0
 800c660:	e008      	b.n	800c674 <_printf_common+0xac>
 800c662:	2301      	movs	r3, #1
 800c664:	4652      	mov	r2, sl
 800c666:	4649      	mov	r1, r9
 800c668:	4638      	mov	r0, r7
 800c66a:	47c0      	blx	r8
 800c66c:	3001      	adds	r0, #1
 800c66e:	d103      	bne.n	800c678 <_printf_common+0xb0>
 800c670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c678:	3501      	adds	r5, #1
 800c67a:	e7c4      	b.n	800c606 <_printf_common+0x3e>
 800c67c:	2030      	movs	r0, #48	; 0x30
 800c67e:	18e1      	adds	r1, r4, r3
 800c680:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c68a:	4422      	add	r2, r4
 800c68c:	3302      	adds	r3, #2
 800c68e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c692:	e7c5      	b.n	800c620 <_printf_common+0x58>
 800c694:	2301      	movs	r3, #1
 800c696:	4622      	mov	r2, r4
 800c698:	4649      	mov	r1, r9
 800c69a:	4638      	mov	r0, r7
 800c69c:	47c0      	blx	r8
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d0e6      	beq.n	800c670 <_printf_common+0xa8>
 800c6a2:	3601      	adds	r6, #1
 800c6a4:	e7d9      	b.n	800c65a <_printf_common+0x92>
	...

0800c6a8 <_printf_i>:
 800c6a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ac:	7e0f      	ldrb	r7, [r1, #24]
 800c6ae:	4691      	mov	r9, r2
 800c6b0:	2f78      	cmp	r7, #120	; 0x78
 800c6b2:	4680      	mov	r8, r0
 800c6b4:	460c      	mov	r4, r1
 800c6b6:	469a      	mov	sl, r3
 800c6b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c6ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c6be:	d807      	bhi.n	800c6d0 <_printf_i+0x28>
 800c6c0:	2f62      	cmp	r7, #98	; 0x62
 800c6c2:	d80a      	bhi.n	800c6da <_printf_i+0x32>
 800c6c4:	2f00      	cmp	r7, #0
 800c6c6:	f000 80d9 	beq.w	800c87c <_printf_i+0x1d4>
 800c6ca:	2f58      	cmp	r7, #88	; 0x58
 800c6cc:	f000 80a4 	beq.w	800c818 <_printf_i+0x170>
 800c6d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c6d8:	e03a      	b.n	800c750 <_printf_i+0xa8>
 800c6da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c6de:	2b15      	cmp	r3, #21
 800c6e0:	d8f6      	bhi.n	800c6d0 <_printf_i+0x28>
 800c6e2:	a101      	add	r1, pc, #4	; (adr r1, 800c6e8 <_printf_i+0x40>)
 800c6e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6e8:	0800c741 	.word	0x0800c741
 800c6ec:	0800c755 	.word	0x0800c755
 800c6f0:	0800c6d1 	.word	0x0800c6d1
 800c6f4:	0800c6d1 	.word	0x0800c6d1
 800c6f8:	0800c6d1 	.word	0x0800c6d1
 800c6fc:	0800c6d1 	.word	0x0800c6d1
 800c700:	0800c755 	.word	0x0800c755
 800c704:	0800c6d1 	.word	0x0800c6d1
 800c708:	0800c6d1 	.word	0x0800c6d1
 800c70c:	0800c6d1 	.word	0x0800c6d1
 800c710:	0800c6d1 	.word	0x0800c6d1
 800c714:	0800c863 	.word	0x0800c863
 800c718:	0800c785 	.word	0x0800c785
 800c71c:	0800c845 	.word	0x0800c845
 800c720:	0800c6d1 	.word	0x0800c6d1
 800c724:	0800c6d1 	.word	0x0800c6d1
 800c728:	0800c885 	.word	0x0800c885
 800c72c:	0800c6d1 	.word	0x0800c6d1
 800c730:	0800c785 	.word	0x0800c785
 800c734:	0800c6d1 	.word	0x0800c6d1
 800c738:	0800c6d1 	.word	0x0800c6d1
 800c73c:	0800c84d 	.word	0x0800c84d
 800c740:	682b      	ldr	r3, [r5, #0]
 800c742:	1d1a      	adds	r2, r3, #4
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	602a      	str	r2, [r5, #0]
 800c748:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c74c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c750:	2301      	movs	r3, #1
 800c752:	e0a4      	b.n	800c89e <_printf_i+0x1f6>
 800c754:	6820      	ldr	r0, [r4, #0]
 800c756:	6829      	ldr	r1, [r5, #0]
 800c758:	0606      	lsls	r6, r0, #24
 800c75a:	f101 0304 	add.w	r3, r1, #4
 800c75e:	d50a      	bpl.n	800c776 <_printf_i+0xce>
 800c760:	680e      	ldr	r6, [r1, #0]
 800c762:	602b      	str	r3, [r5, #0]
 800c764:	2e00      	cmp	r6, #0
 800c766:	da03      	bge.n	800c770 <_printf_i+0xc8>
 800c768:	232d      	movs	r3, #45	; 0x2d
 800c76a:	4276      	negs	r6, r6
 800c76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c770:	230a      	movs	r3, #10
 800c772:	485e      	ldr	r0, [pc, #376]	; (800c8ec <_printf_i+0x244>)
 800c774:	e019      	b.n	800c7aa <_printf_i+0x102>
 800c776:	680e      	ldr	r6, [r1, #0]
 800c778:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	bf18      	it	ne
 800c780:	b236      	sxthne	r6, r6
 800c782:	e7ef      	b.n	800c764 <_printf_i+0xbc>
 800c784:	682b      	ldr	r3, [r5, #0]
 800c786:	6820      	ldr	r0, [r4, #0]
 800c788:	1d19      	adds	r1, r3, #4
 800c78a:	6029      	str	r1, [r5, #0]
 800c78c:	0601      	lsls	r1, r0, #24
 800c78e:	d501      	bpl.n	800c794 <_printf_i+0xec>
 800c790:	681e      	ldr	r6, [r3, #0]
 800c792:	e002      	b.n	800c79a <_printf_i+0xf2>
 800c794:	0646      	lsls	r6, r0, #25
 800c796:	d5fb      	bpl.n	800c790 <_printf_i+0xe8>
 800c798:	881e      	ldrh	r6, [r3, #0]
 800c79a:	2f6f      	cmp	r7, #111	; 0x6f
 800c79c:	bf0c      	ite	eq
 800c79e:	2308      	moveq	r3, #8
 800c7a0:	230a      	movne	r3, #10
 800c7a2:	4852      	ldr	r0, [pc, #328]	; (800c8ec <_printf_i+0x244>)
 800c7a4:	2100      	movs	r1, #0
 800c7a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7aa:	6865      	ldr	r5, [r4, #4]
 800c7ac:	2d00      	cmp	r5, #0
 800c7ae:	bfa8      	it	ge
 800c7b0:	6821      	ldrge	r1, [r4, #0]
 800c7b2:	60a5      	str	r5, [r4, #8]
 800c7b4:	bfa4      	itt	ge
 800c7b6:	f021 0104 	bicge.w	r1, r1, #4
 800c7ba:	6021      	strge	r1, [r4, #0]
 800c7bc:	b90e      	cbnz	r6, 800c7c2 <_printf_i+0x11a>
 800c7be:	2d00      	cmp	r5, #0
 800c7c0:	d04d      	beq.n	800c85e <_printf_i+0x1b6>
 800c7c2:	4615      	mov	r5, r2
 800c7c4:	fbb6 f1f3 	udiv	r1, r6, r3
 800c7c8:	fb03 6711 	mls	r7, r3, r1, r6
 800c7cc:	5dc7      	ldrb	r7, [r0, r7]
 800c7ce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c7d2:	4637      	mov	r7, r6
 800c7d4:	42bb      	cmp	r3, r7
 800c7d6:	460e      	mov	r6, r1
 800c7d8:	d9f4      	bls.n	800c7c4 <_printf_i+0x11c>
 800c7da:	2b08      	cmp	r3, #8
 800c7dc:	d10b      	bne.n	800c7f6 <_printf_i+0x14e>
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	07de      	lsls	r6, r3, #31
 800c7e2:	d508      	bpl.n	800c7f6 <_printf_i+0x14e>
 800c7e4:	6923      	ldr	r3, [r4, #16]
 800c7e6:	6861      	ldr	r1, [r4, #4]
 800c7e8:	4299      	cmp	r1, r3
 800c7ea:	bfde      	ittt	le
 800c7ec:	2330      	movle	r3, #48	; 0x30
 800c7ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7f2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c7f6:	1b52      	subs	r2, r2, r5
 800c7f8:	6122      	str	r2, [r4, #16]
 800c7fa:	464b      	mov	r3, r9
 800c7fc:	4621      	mov	r1, r4
 800c7fe:	4640      	mov	r0, r8
 800c800:	f8cd a000 	str.w	sl, [sp]
 800c804:	aa03      	add	r2, sp, #12
 800c806:	f7ff fedf 	bl	800c5c8 <_printf_common>
 800c80a:	3001      	adds	r0, #1
 800c80c:	d14c      	bne.n	800c8a8 <_printf_i+0x200>
 800c80e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c812:	b004      	add	sp, #16
 800c814:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c818:	4834      	ldr	r0, [pc, #208]	; (800c8ec <_printf_i+0x244>)
 800c81a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c81e:	6829      	ldr	r1, [r5, #0]
 800c820:	6823      	ldr	r3, [r4, #0]
 800c822:	f851 6b04 	ldr.w	r6, [r1], #4
 800c826:	6029      	str	r1, [r5, #0]
 800c828:	061d      	lsls	r5, r3, #24
 800c82a:	d514      	bpl.n	800c856 <_printf_i+0x1ae>
 800c82c:	07df      	lsls	r7, r3, #31
 800c82e:	bf44      	itt	mi
 800c830:	f043 0320 	orrmi.w	r3, r3, #32
 800c834:	6023      	strmi	r3, [r4, #0]
 800c836:	b91e      	cbnz	r6, 800c840 <_printf_i+0x198>
 800c838:	6823      	ldr	r3, [r4, #0]
 800c83a:	f023 0320 	bic.w	r3, r3, #32
 800c83e:	6023      	str	r3, [r4, #0]
 800c840:	2310      	movs	r3, #16
 800c842:	e7af      	b.n	800c7a4 <_printf_i+0xfc>
 800c844:	6823      	ldr	r3, [r4, #0]
 800c846:	f043 0320 	orr.w	r3, r3, #32
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	2378      	movs	r3, #120	; 0x78
 800c84e:	4828      	ldr	r0, [pc, #160]	; (800c8f0 <_printf_i+0x248>)
 800c850:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c854:	e7e3      	b.n	800c81e <_printf_i+0x176>
 800c856:	0659      	lsls	r1, r3, #25
 800c858:	bf48      	it	mi
 800c85a:	b2b6      	uxthmi	r6, r6
 800c85c:	e7e6      	b.n	800c82c <_printf_i+0x184>
 800c85e:	4615      	mov	r5, r2
 800c860:	e7bb      	b.n	800c7da <_printf_i+0x132>
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	6826      	ldr	r6, [r4, #0]
 800c866:	1d18      	adds	r0, r3, #4
 800c868:	6961      	ldr	r1, [r4, #20]
 800c86a:	6028      	str	r0, [r5, #0]
 800c86c:	0635      	lsls	r5, r6, #24
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	d501      	bpl.n	800c876 <_printf_i+0x1ce>
 800c872:	6019      	str	r1, [r3, #0]
 800c874:	e002      	b.n	800c87c <_printf_i+0x1d4>
 800c876:	0670      	lsls	r0, r6, #25
 800c878:	d5fb      	bpl.n	800c872 <_printf_i+0x1ca>
 800c87a:	8019      	strh	r1, [r3, #0]
 800c87c:	2300      	movs	r3, #0
 800c87e:	4615      	mov	r5, r2
 800c880:	6123      	str	r3, [r4, #16]
 800c882:	e7ba      	b.n	800c7fa <_printf_i+0x152>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	2100      	movs	r1, #0
 800c888:	1d1a      	adds	r2, r3, #4
 800c88a:	602a      	str	r2, [r5, #0]
 800c88c:	681d      	ldr	r5, [r3, #0]
 800c88e:	6862      	ldr	r2, [r4, #4]
 800c890:	4628      	mov	r0, r5
 800c892:	f000 f82f 	bl	800c8f4 <memchr>
 800c896:	b108      	cbz	r0, 800c89c <_printf_i+0x1f4>
 800c898:	1b40      	subs	r0, r0, r5
 800c89a:	6060      	str	r0, [r4, #4]
 800c89c:	6863      	ldr	r3, [r4, #4]
 800c89e:	6123      	str	r3, [r4, #16]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8a6:	e7a8      	b.n	800c7fa <_printf_i+0x152>
 800c8a8:	462a      	mov	r2, r5
 800c8aa:	4649      	mov	r1, r9
 800c8ac:	4640      	mov	r0, r8
 800c8ae:	6923      	ldr	r3, [r4, #16]
 800c8b0:	47d0      	blx	sl
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d0ab      	beq.n	800c80e <_printf_i+0x166>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	079b      	lsls	r3, r3, #30
 800c8ba:	d413      	bmi.n	800c8e4 <_printf_i+0x23c>
 800c8bc:	68e0      	ldr	r0, [r4, #12]
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	4298      	cmp	r0, r3
 800c8c2:	bfb8      	it	lt
 800c8c4:	4618      	movlt	r0, r3
 800c8c6:	e7a4      	b.n	800c812 <_printf_i+0x16a>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	4632      	mov	r2, r6
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	4640      	mov	r0, r8
 800c8d0:	47d0      	blx	sl
 800c8d2:	3001      	adds	r0, #1
 800c8d4:	d09b      	beq.n	800c80e <_printf_i+0x166>
 800c8d6:	3501      	adds	r5, #1
 800c8d8:	68e3      	ldr	r3, [r4, #12]
 800c8da:	9903      	ldr	r1, [sp, #12]
 800c8dc:	1a5b      	subs	r3, r3, r1
 800c8de:	42ab      	cmp	r3, r5
 800c8e0:	dcf2      	bgt.n	800c8c8 <_printf_i+0x220>
 800c8e2:	e7eb      	b.n	800c8bc <_printf_i+0x214>
 800c8e4:	2500      	movs	r5, #0
 800c8e6:	f104 0619 	add.w	r6, r4, #25
 800c8ea:	e7f5      	b.n	800c8d8 <_printf_i+0x230>
 800c8ec:	0800ce71 	.word	0x0800ce71
 800c8f0:	0800ce82 	.word	0x0800ce82

0800c8f4 <memchr>:
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	b510      	push	{r4, lr}
 800c8f8:	b2c9      	uxtb	r1, r1
 800c8fa:	4402      	add	r2, r0
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	4618      	mov	r0, r3
 800c900:	d101      	bne.n	800c906 <memchr+0x12>
 800c902:	2000      	movs	r0, #0
 800c904:	e003      	b.n	800c90e <memchr+0x1a>
 800c906:	7804      	ldrb	r4, [r0, #0]
 800c908:	3301      	adds	r3, #1
 800c90a:	428c      	cmp	r4, r1
 800c90c:	d1f6      	bne.n	800c8fc <memchr+0x8>
 800c90e:	bd10      	pop	{r4, pc}

0800c910 <memcpy>:
 800c910:	440a      	add	r2, r1
 800c912:	4291      	cmp	r1, r2
 800c914:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c918:	d100      	bne.n	800c91c <memcpy+0xc>
 800c91a:	4770      	bx	lr
 800c91c:	b510      	push	{r4, lr}
 800c91e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c922:	4291      	cmp	r1, r2
 800c924:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c928:	d1f9      	bne.n	800c91e <memcpy+0xe>
 800c92a:	bd10      	pop	{r4, pc}

0800c92c <memmove>:
 800c92c:	4288      	cmp	r0, r1
 800c92e:	b510      	push	{r4, lr}
 800c930:	eb01 0402 	add.w	r4, r1, r2
 800c934:	d902      	bls.n	800c93c <memmove+0x10>
 800c936:	4284      	cmp	r4, r0
 800c938:	4623      	mov	r3, r4
 800c93a:	d807      	bhi.n	800c94c <memmove+0x20>
 800c93c:	1e43      	subs	r3, r0, #1
 800c93e:	42a1      	cmp	r1, r4
 800c940:	d008      	beq.n	800c954 <memmove+0x28>
 800c942:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c946:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c94a:	e7f8      	b.n	800c93e <memmove+0x12>
 800c94c:	4601      	mov	r1, r0
 800c94e:	4402      	add	r2, r0
 800c950:	428a      	cmp	r2, r1
 800c952:	d100      	bne.n	800c956 <memmove+0x2a>
 800c954:	bd10      	pop	{r4, pc}
 800c956:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c95a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c95e:	e7f7      	b.n	800c950 <memmove+0x24>

0800c960 <_free_r>:
 800c960:	b538      	push	{r3, r4, r5, lr}
 800c962:	4605      	mov	r5, r0
 800c964:	2900      	cmp	r1, #0
 800c966:	d040      	beq.n	800c9ea <_free_r+0x8a>
 800c968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c96c:	1f0c      	subs	r4, r1, #4
 800c96e:	2b00      	cmp	r3, #0
 800c970:	bfb8      	it	lt
 800c972:	18e4      	addlt	r4, r4, r3
 800c974:	f000 f910 	bl	800cb98 <__malloc_lock>
 800c978:	4a1c      	ldr	r2, [pc, #112]	; (800c9ec <_free_r+0x8c>)
 800c97a:	6813      	ldr	r3, [r2, #0]
 800c97c:	b933      	cbnz	r3, 800c98c <_free_r+0x2c>
 800c97e:	6063      	str	r3, [r4, #4]
 800c980:	6014      	str	r4, [r2, #0]
 800c982:	4628      	mov	r0, r5
 800c984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c988:	f000 b90c 	b.w	800cba4 <__malloc_unlock>
 800c98c:	42a3      	cmp	r3, r4
 800c98e:	d908      	bls.n	800c9a2 <_free_r+0x42>
 800c990:	6820      	ldr	r0, [r4, #0]
 800c992:	1821      	adds	r1, r4, r0
 800c994:	428b      	cmp	r3, r1
 800c996:	bf01      	itttt	eq
 800c998:	6819      	ldreq	r1, [r3, #0]
 800c99a:	685b      	ldreq	r3, [r3, #4]
 800c99c:	1809      	addeq	r1, r1, r0
 800c99e:	6021      	streq	r1, [r4, #0]
 800c9a0:	e7ed      	b.n	800c97e <_free_r+0x1e>
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	b10b      	cbz	r3, 800c9ac <_free_r+0x4c>
 800c9a8:	42a3      	cmp	r3, r4
 800c9aa:	d9fa      	bls.n	800c9a2 <_free_r+0x42>
 800c9ac:	6811      	ldr	r1, [r2, #0]
 800c9ae:	1850      	adds	r0, r2, r1
 800c9b0:	42a0      	cmp	r0, r4
 800c9b2:	d10b      	bne.n	800c9cc <_free_r+0x6c>
 800c9b4:	6820      	ldr	r0, [r4, #0]
 800c9b6:	4401      	add	r1, r0
 800c9b8:	1850      	adds	r0, r2, r1
 800c9ba:	4283      	cmp	r3, r0
 800c9bc:	6011      	str	r1, [r2, #0]
 800c9be:	d1e0      	bne.n	800c982 <_free_r+0x22>
 800c9c0:	6818      	ldr	r0, [r3, #0]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	4401      	add	r1, r0
 800c9c6:	6011      	str	r1, [r2, #0]
 800c9c8:	6053      	str	r3, [r2, #4]
 800c9ca:	e7da      	b.n	800c982 <_free_r+0x22>
 800c9cc:	d902      	bls.n	800c9d4 <_free_r+0x74>
 800c9ce:	230c      	movs	r3, #12
 800c9d0:	602b      	str	r3, [r5, #0]
 800c9d2:	e7d6      	b.n	800c982 <_free_r+0x22>
 800c9d4:	6820      	ldr	r0, [r4, #0]
 800c9d6:	1821      	adds	r1, r4, r0
 800c9d8:	428b      	cmp	r3, r1
 800c9da:	bf01      	itttt	eq
 800c9dc:	6819      	ldreq	r1, [r3, #0]
 800c9de:	685b      	ldreq	r3, [r3, #4]
 800c9e0:	1809      	addeq	r1, r1, r0
 800c9e2:	6021      	streq	r1, [r4, #0]
 800c9e4:	6063      	str	r3, [r4, #4]
 800c9e6:	6054      	str	r4, [r2, #4]
 800c9e8:	e7cb      	b.n	800c982 <_free_r+0x22>
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	20001518 	.word	0x20001518

0800c9f0 <sbrk_aligned>:
 800c9f0:	b570      	push	{r4, r5, r6, lr}
 800c9f2:	4e0e      	ldr	r6, [pc, #56]	; (800ca2c <sbrk_aligned+0x3c>)
 800c9f4:	460c      	mov	r4, r1
 800c9f6:	6831      	ldr	r1, [r6, #0]
 800c9f8:	4605      	mov	r5, r0
 800c9fa:	b911      	cbnz	r1, 800ca02 <sbrk_aligned+0x12>
 800c9fc:	f000 f8bc 	bl	800cb78 <_sbrk_r>
 800ca00:	6030      	str	r0, [r6, #0]
 800ca02:	4621      	mov	r1, r4
 800ca04:	4628      	mov	r0, r5
 800ca06:	f000 f8b7 	bl	800cb78 <_sbrk_r>
 800ca0a:	1c43      	adds	r3, r0, #1
 800ca0c:	d00a      	beq.n	800ca24 <sbrk_aligned+0x34>
 800ca0e:	1cc4      	adds	r4, r0, #3
 800ca10:	f024 0403 	bic.w	r4, r4, #3
 800ca14:	42a0      	cmp	r0, r4
 800ca16:	d007      	beq.n	800ca28 <sbrk_aligned+0x38>
 800ca18:	1a21      	subs	r1, r4, r0
 800ca1a:	4628      	mov	r0, r5
 800ca1c:	f000 f8ac 	bl	800cb78 <_sbrk_r>
 800ca20:	3001      	adds	r0, #1
 800ca22:	d101      	bne.n	800ca28 <sbrk_aligned+0x38>
 800ca24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca28:	4620      	mov	r0, r4
 800ca2a:	bd70      	pop	{r4, r5, r6, pc}
 800ca2c:	2000151c 	.word	0x2000151c

0800ca30 <_malloc_r>:
 800ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca34:	1ccd      	adds	r5, r1, #3
 800ca36:	f025 0503 	bic.w	r5, r5, #3
 800ca3a:	3508      	adds	r5, #8
 800ca3c:	2d0c      	cmp	r5, #12
 800ca3e:	bf38      	it	cc
 800ca40:	250c      	movcc	r5, #12
 800ca42:	2d00      	cmp	r5, #0
 800ca44:	4607      	mov	r7, r0
 800ca46:	db01      	blt.n	800ca4c <_malloc_r+0x1c>
 800ca48:	42a9      	cmp	r1, r5
 800ca4a:	d905      	bls.n	800ca58 <_malloc_r+0x28>
 800ca4c:	230c      	movs	r3, #12
 800ca4e:	2600      	movs	r6, #0
 800ca50:	603b      	str	r3, [r7, #0]
 800ca52:	4630      	mov	r0, r6
 800ca54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca58:	4e2e      	ldr	r6, [pc, #184]	; (800cb14 <_malloc_r+0xe4>)
 800ca5a:	f000 f89d 	bl	800cb98 <__malloc_lock>
 800ca5e:	6833      	ldr	r3, [r6, #0]
 800ca60:	461c      	mov	r4, r3
 800ca62:	bb34      	cbnz	r4, 800cab2 <_malloc_r+0x82>
 800ca64:	4629      	mov	r1, r5
 800ca66:	4638      	mov	r0, r7
 800ca68:	f7ff ffc2 	bl	800c9f0 <sbrk_aligned>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	4604      	mov	r4, r0
 800ca70:	d14d      	bne.n	800cb0e <_malloc_r+0xde>
 800ca72:	6834      	ldr	r4, [r6, #0]
 800ca74:	4626      	mov	r6, r4
 800ca76:	2e00      	cmp	r6, #0
 800ca78:	d140      	bne.n	800cafc <_malloc_r+0xcc>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	4631      	mov	r1, r6
 800ca7e:	4638      	mov	r0, r7
 800ca80:	eb04 0803 	add.w	r8, r4, r3
 800ca84:	f000 f878 	bl	800cb78 <_sbrk_r>
 800ca88:	4580      	cmp	r8, r0
 800ca8a:	d13a      	bne.n	800cb02 <_malloc_r+0xd2>
 800ca8c:	6821      	ldr	r1, [r4, #0]
 800ca8e:	3503      	adds	r5, #3
 800ca90:	1a6d      	subs	r5, r5, r1
 800ca92:	f025 0503 	bic.w	r5, r5, #3
 800ca96:	3508      	adds	r5, #8
 800ca98:	2d0c      	cmp	r5, #12
 800ca9a:	bf38      	it	cc
 800ca9c:	250c      	movcc	r5, #12
 800ca9e:	4638      	mov	r0, r7
 800caa0:	4629      	mov	r1, r5
 800caa2:	f7ff ffa5 	bl	800c9f0 <sbrk_aligned>
 800caa6:	3001      	adds	r0, #1
 800caa8:	d02b      	beq.n	800cb02 <_malloc_r+0xd2>
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	442b      	add	r3, r5
 800caae:	6023      	str	r3, [r4, #0]
 800cab0:	e00e      	b.n	800cad0 <_malloc_r+0xa0>
 800cab2:	6822      	ldr	r2, [r4, #0]
 800cab4:	1b52      	subs	r2, r2, r5
 800cab6:	d41e      	bmi.n	800caf6 <_malloc_r+0xc6>
 800cab8:	2a0b      	cmp	r2, #11
 800caba:	d916      	bls.n	800caea <_malloc_r+0xba>
 800cabc:	1961      	adds	r1, r4, r5
 800cabe:	42a3      	cmp	r3, r4
 800cac0:	6025      	str	r5, [r4, #0]
 800cac2:	bf18      	it	ne
 800cac4:	6059      	strne	r1, [r3, #4]
 800cac6:	6863      	ldr	r3, [r4, #4]
 800cac8:	bf08      	it	eq
 800caca:	6031      	streq	r1, [r6, #0]
 800cacc:	5162      	str	r2, [r4, r5]
 800cace:	604b      	str	r3, [r1, #4]
 800cad0:	4638      	mov	r0, r7
 800cad2:	f104 060b 	add.w	r6, r4, #11
 800cad6:	f000 f865 	bl	800cba4 <__malloc_unlock>
 800cada:	f026 0607 	bic.w	r6, r6, #7
 800cade:	1d23      	adds	r3, r4, #4
 800cae0:	1af2      	subs	r2, r6, r3
 800cae2:	d0b6      	beq.n	800ca52 <_malloc_r+0x22>
 800cae4:	1b9b      	subs	r3, r3, r6
 800cae6:	50a3      	str	r3, [r4, r2]
 800cae8:	e7b3      	b.n	800ca52 <_malloc_r+0x22>
 800caea:	6862      	ldr	r2, [r4, #4]
 800caec:	42a3      	cmp	r3, r4
 800caee:	bf0c      	ite	eq
 800caf0:	6032      	streq	r2, [r6, #0]
 800caf2:	605a      	strne	r2, [r3, #4]
 800caf4:	e7ec      	b.n	800cad0 <_malloc_r+0xa0>
 800caf6:	4623      	mov	r3, r4
 800caf8:	6864      	ldr	r4, [r4, #4]
 800cafa:	e7b2      	b.n	800ca62 <_malloc_r+0x32>
 800cafc:	4634      	mov	r4, r6
 800cafe:	6876      	ldr	r6, [r6, #4]
 800cb00:	e7b9      	b.n	800ca76 <_malloc_r+0x46>
 800cb02:	230c      	movs	r3, #12
 800cb04:	4638      	mov	r0, r7
 800cb06:	603b      	str	r3, [r7, #0]
 800cb08:	f000 f84c 	bl	800cba4 <__malloc_unlock>
 800cb0c:	e7a1      	b.n	800ca52 <_malloc_r+0x22>
 800cb0e:	6025      	str	r5, [r4, #0]
 800cb10:	e7de      	b.n	800cad0 <_malloc_r+0xa0>
 800cb12:	bf00      	nop
 800cb14:	20001518 	.word	0x20001518

0800cb18 <_realloc_r>:
 800cb18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb1c:	4680      	mov	r8, r0
 800cb1e:	4614      	mov	r4, r2
 800cb20:	460e      	mov	r6, r1
 800cb22:	b921      	cbnz	r1, 800cb2e <_realloc_r+0x16>
 800cb24:	4611      	mov	r1, r2
 800cb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2a:	f7ff bf81 	b.w	800ca30 <_malloc_r>
 800cb2e:	b92a      	cbnz	r2, 800cb3c <_realloc_r+0x24>
 800cb30:	f7ff ff16 	bl	800c960 <_free_r>
 800cb34:	4625      	mov	r5, r4
 800cb36:	4628      	mov	r0, r5
 800cb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb3c:	f000 f838 	bl	800cbb0 <_malloc_usable_size_r>
 800cb40:	4284      	cmp	r4, r0
 800cb42:	4607      	mov	r7, r0
 800cb44:	d802      	bhi.n	800cb4c <_realloc_r+0x34>
 800cb46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb4a:	d812      	bhi.n	800cb72 <_realloc_r+0x5a>
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	4640      	mov	r0, r8
 800cb50:	f7ff ff6e 	bl	800ca30 <_malloc_r>
 800cb54:	4605      	mov	r5, r0
 800cb56:	2800      	cmp	r0, #0
 800cb58:	d0ed      	beq.n	800cb36 <_realloc_r+0x1e>
 800cb5a:	42bc      	cmp	r4, r7
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	4631      	mov	r1, r6
 800cb60:	bf28      	it	cs
 800cb62:	463a      	movcs	r2, r7
 800cb64:	f7ff fed4 	bl	800c910 <memcpy>
 800cb68:	4631      	mov	r1, r6
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f7ff fef8 	bl	800c960 <_free_r>
 800cb70:	e7e1      	b.n	800cb36 <_realloc_r+0x1e>
 800cb72:	4635      	mov	r5, r6
 800cb74:	e7df      	b.n	800cb36 <_realloc_r+0x1e>
	...

0800cb78 <_sbrk_r>:
 800cb78:	b538      	push	{r3, r4, r5, lr}
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	4d05      	ldr	r5, [pc, #20]	; (800cb94 <_sbrk_r+0x1c>)
 800cb7e:	4604      	mov	r4, r0
 800cb80:	4608      	mov	r0, r1
 800cb82:	602b      	str	r3, [r5, #0]
 800cb84:	f7f5 fb2c 	bl	80021e0 <_sbrk>
 800cb88:	1c43      	adds	r3, r0, #1
 800cb8a:	d102      	bne.n	800cb92 <_sbrk_r+0x1a>
 800cb8c:	682b      	ldr	r3, [r5, #0]
 800cb8e:	b103      	cbz	r3, 800cb92 <_sbrk_r+0x1a>
 800cb90:	6023      	str	r3, [r4, #0]
 800cb92:	bd38      	pop	{r3, r4, r5, pc}
 800cb94:	20001520 	.word	0x20001520

0800cb98 <__malloc_lock>:
 800cb98:	4801      	ldr	r0, [pc, #4]	; (800cba0 <__malloc_lock+0x8>)
 800cb9a:	f000 b811 	b.w	800cbc0 <__retarget_lock_acquire_recursive>
 800cb9e:	bf00      	nop
 800cba0:	20001524 	.word	0x20001524

0800cba4 <__malloc_unlock>:
 800cba4:	4801      	ldr	r0, [pc, #4]	; (800cbac <__malloc_unlock+0x8>)
 800cba6:	f000 b80c 	b.w	800cbc2 <__retarget_lock_release_recursive>
 800cbaa:	bf00      	nop
 800cbac:	20001524 	.word	0x20001524

0800cbb0 <_malloc_usable_size_r>:
 800cbb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbb4:	1f18      	subs	r0, r3, #4
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	bfbc      	itt	lt
 800cbba:	580b      	ldrlt	r3, [r1, r0]
 800cbbc:	18c0      	addlt	r0, r0, r3
 800cbbe:	4770      	bx	lr

0800cbc0 <__retarget_lock_acquire_recursive>:
 800cbc0:	4770      	bx	lr

0800cbc2 <__retarget_lock_release_recursive>:
 800cbc2:	4770      	bx	lr

0800cbc4 <_init>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	bf00      	nop
 800cbc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbca:	bc08      	pop	{r3}
 800cbcc:	469e      	mov	lr, r3
 800cbce:	4770      	bx	lr

0800cbd0 <_fini>:
 800cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbd2:	bf00      	nop
 800cbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd6:	bc08      	pop	{r3}
 800cbd8:	469e      	mov	lr, r3
 800cbda:	4770      	bx	lr
