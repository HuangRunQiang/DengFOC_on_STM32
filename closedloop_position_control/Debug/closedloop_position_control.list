
closedloop_position_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800cba0  0800cba0  0001cba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce34  0800ce34  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  0800ce34  0800ce34  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ce34  0800ce34  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce34  0800ce34  0001ce34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ce38  0800ce38  0001ce38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800ce3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000134c  200001fc  0800d038  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  0800d038  00021548  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144c7  00000000  00000000  00020225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003421  00000000  00000000  000346ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00037b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  00038d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b05d  00000000  00000000  00039dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161d1  00000000  00000000  00054e25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8be  00000000  00000000  0006aff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa8b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  000fa904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cb84 	.word	0x0800cb84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800cb84 	.word	0x0800cb84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f001 fb70 	bl	8002890 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 fd7e 	bl	8004cbc <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f004 f858 	bl	8005278 <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f001 fb5b 	bl	8002890 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f001 fb51 	bl	8002890 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f003 fe98 	bl	8004f34 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f004 f836 	bl	8005278 <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f001 fb39 	bl	8002890 <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	0000      	movs	r0, r0
	...

08001240 <_normalizeAngle>:
//    u = tms - SysTick->VAL;
//  }
//  return (m * 1000 + (u * 1000) / tms);
//}

float _normalizeAngle(float angle){
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f7ff f8ed 	bl	8000428 <__aeabi_f2d>
 800124e:	a316      	add	r3, pc, #88	; (adr r3, 80012a8 <_normalizeAngle+0x68>)
 8001250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001254:	f009 ff80 	bl	800b158 <fmod>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc12 	bl	8000a88 <__aeabi_d2f>
 8001264:	4603      	mov	r3, r0
 8001266:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8001268:	f04f 0100 	mov.w	r1, #0
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff ff1b 	bl	80010a8 <__aeabi_fcmpge>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <_normalizeAngle+0x3c>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	e00e      	b.n	800129a <_normalizeAngle+0x5a>
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff f8d3 	bl	8000428 <__aeabi_f2d>
 8001282:	a309      	add	r3, pc, #36	; (adr r3, 80012a8 <_normalizeAngle+0x68>)
 8001284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001288:	f7fe ff70 	bl	800016c <__adddf3>
 800128c:	4602      	mov	r2, r0
 800128e:	460b      	mov	r3, r1
 8001290:	4610      	mov	r0, r2
 8001292:	4619      	mov	r1, r3
 8001294:	f7ff fbf8 	bl	8000a88 <__aeabi_d2f>
 8001298:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	f3af 8000 	nop.w
 80012a8:	54442d18 	.word	0x54442d18
 80012ac:	401921fb 	.word	0x401921fb

080012b0 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  return _normalizeAngle(((float)(dir * pole_pairs)*shaft_angle)-zero_electric_angle);
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <_electricalAngle+0x48>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fce9 	bl	8000c9c <__aeabi_i2f>
 80012ca:	4603      	mov	r3, r0
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd38 	bl	8000d44 <__aeabi_fmul>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <_electricalAngle+0x4c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff fc26 	bl	8000b30 <__aeabi_fsub>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ffaa 	bl	8001240 <_normalizeAngle>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000018 	.word	0x20000018
 80012fc:	20000334 	.word	0x20000334

08001300 <setPwm>:

void setPwm(float Ua, float Ub, float Uc) {
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 800130c:	f04f 0100 	mov.w	r1, #0
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff feb5 	bl	8001080 <__aeabi_fcmplt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <setPwm+0x22>
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e00c      	b.n	800133c <setPwm+0x3c>
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <setPwm+0x244>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff fec7 	bl	80010bc <__aeabi_fcmpgt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <setPwm+0x3a>
 8001334:	4b83      	ldr	r3, [pc, #524]	; (8001544 <setPwm+0x244>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	e000      	b.n	800133c <setPwm+0x3c>
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	68b8      	ldr	r0, [r7, #8]
 8001344:	f7ff fe9c 	bl	8001080 <__aeabi_fcmplt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <setPwm+0x54>
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	e00c      	b.n	800136e <setPwm+0x6e>
 8001354:	4b7b      	ldr	r3, [pc, #492]	; (8001544 <setPwm+0x244>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f7ff feae 	bl	80010bc <__aeabi_fcmpgt>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <setPwm+0x6c>
 8001366:	4b77      	ldr	r3, [pc, #476]	; (8001544 <setPwm+0x244>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	e000      	b.n	800136e <setPwm+0x6e>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fe83 	bl	8001080 <__aeabi_fcmplt>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <setPwm+0x86>
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	e00c      	b.n	80013a0 <setPwm+0xa0>
 8001386:	4b6f      	ldr	r3, [pc, #444]	; (8001544 <setPwm+0x244>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fe95 	bl	80010bc <__aeabi_fcmpgt>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d002      	beq.n	800139e <setPwm+0x9e>
 8001398:	4b6a      	ldr	r3, [pc, #424]	; (8001544 <setPwm+0x244>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	e000      	b.n	80013a0 <setPwm+0xa0>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 80013a2:	4b69      	ldr	r3, [pc, #420]	; (8001548 <setPwm+0x248>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff fd7f 	bl	8000eac <__aeabi_fdiv>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f04f 0100 	mov.w	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe63 	bl	8001080 <__aeabi_fcmplt>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <setPwm+0xc6>
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e018      	b.n	80013f8 <setPwm+0xf8>
 80013c6:	4b60      	ldr	r3, [pc, #384]	; (8001548 <setPwm+0x248>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff fd6d 	bl	8000eac <__aeabi_fdiv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe6f 	bl	80010bc <__aeabi_fcmpgt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <setPwm+0xea>
 80013e4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013e8:	e006      	b.n	80013f8 <setPwm+0xf8>
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <setPwm+0x248>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff fd5b 	bl	8000eac <__aeabi_fdiv>
 80013f6:	4603      	mov	r3, r0
 80013f8:	4a54      	ldr	r2, [pc, #336]	; (800154c <setPwm+0x24c>)
 80013fa:	6013      	str	r3, [r2, #0]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 80013fc:	4b52      	ldr	r3, [pc, #328]	; (8001548 <setPwm+0x248>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	68b8      	ldr	r0, [r7, #8]
 8001404:	f7ff fd52 	bl	8000eac <__aeabi_fdiv>
 8001408:	4603      	mov	r3, r0
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fe36 	bl	8001080 <__aeabi_fcmplt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <setPwm+0x120>
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	e018      	b.n	8001452 <setPwm+0x152>
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <setPwm+0x248>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	68b8      	ldr	r0, [r7, #8]
 8001428:	f7ff fd40 	bl	8000eac <__aeabi_fdiv>
 800142c:	4603      	mov	r3, r0
 800142e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fe42 	bl	80010bc <__aeabi_fcmpgt>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d002      	beq.n	8001444 <setPwm+0x144>
 800143e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001442:	e006      	b.n	8001452 <setPwm+0x152>
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <setPwm+0x248>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f7ff fd2e 	bl	8000eac <__aeabi_fdiv>
 8001450:	4603      	mov	r3, r0
 8001452:	4a3f      	ldr	r2, [pc, #252]	; (8001550 <setPwm+0x250>)
 8001454:	6013      	str	r3, [r2, #0]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001456:	4b3c      	ldr	r3, [pc, #240]	; (8001548 <setPwm+0x248>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fd25 	bl	8000eac <__aeabi_fdiv>
 8001462:	4603      	mov	r3, r0
 8001464:	f04f 0100 	mov.w	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fe09 	bl	8001080 <__aeabi_fcmplt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <setPwm+0x17a>
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e018      	b.n	80014ac <setPwm+0x1ac>
 800147a:	4b33      	ldr	r3, [pc, #204]	; (8001548 <setPwm+0x248>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4619      	mov	r1, r3
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fd13 	bl	8000eac <__aeabi_fdiv>
 8001486:	4603      	mov	r3, r0
 8001488:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe15 	bl	80010bc <__aeabi_fcmpgt>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <setPwm+0x19e>
 8001498:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800149c:	e006      	b.n	80014ac <setPwm+0x1ac>
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <setPwm+0x248>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fd01 	bl	8000eac <__aeabi_fdiv>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a29      	ldr	r2, [pc, #164]	; (8001554 <setPwm+0x254>)
 80014ae:	6013      	str	r3, [r2, #0]

	//写入PWM到PWM 0 1 2 通道
	TIM1->CCR1 = (uint32_t) roundf(dc_a*period);
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <setPwm+0x258>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fbf1 	bl	8000c9c <__aeabi_i2f>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b23      	ldr	r3, [pc, #140]	; (800154c <setPwm+0x24c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4610      	mov	r0, r2
 80014c4:	f7ff fc3e 	bl	8000d44 <__aeabi_fmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	4618      	mov	r0, r3
 80014cc:	f009 fe1e 	bl	800b10c <roundf>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4c22      	ldr	r4, [pc, #136]	; (800155c <setPwm+0x25c>)
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fdfb 	bl	80010d0 <__aeabi_f2uiz>
 80014da:	4603      	mov	r3, r0
 80014dc:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) roundf(dc_b*period);
 80014de:	4b1e      	ldr	r3, [pc, #120]	; (8001558 <setPwm+0x258>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff fbda 	bl	8000c9c <__aeabi_i2f>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4b19      	ldr	r3, [pc, #100]	; (8001550 <setPwm+0x250>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f7ff fc27 	bl	8000d44 <__aeabi_fmul>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f009 fe07 	bl	800b10c <roundf>
 80014fe:	4603      	mov	r3, r0
 8001500:	4c16      	ldr	r4, [pc, #88]	; (800155c <setPwm+0x25c>)
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fde4 	bl	80010d0 <__aeabi_f2uiz>
 8001508:	4603      	mov	r3, r0
 800150a:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) roundf(dc_c*period);
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <setPwm+0x258>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fbc3 	bl	8000c9c <__aeabi_i2f>
 8001516:	4602      	mov	r2, r0
 8001518:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <setPwm+0x254>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f7ff fc10 	bl	8000d44 <__aeabi_fmul>
 8001524:	4603      	mov	r3, r0
 8001526:	4618      	mov	r0, r3
 8001528:	f009 fdf0 	bl	800b10c <roundf>
 800152c:	4603      	mov	r3, r0
 800152e:	4c0b      	ldr	r4, [pc, #44]	; (800155c <setPwm+0x25c>)
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fdcd 	bl	80010d0 <__aeabi_f2uiz>
 8001536:	4603      	mov	r3, r0
 8001538:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 800153a:	bf00      	nop
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000
 8001548:	20000004 	.word	0x20000004
 800154c:	2000034c 	.word	0x2000034c
 8001550:	20000350 	.word	0x20000350
 8001554:	20000354 	.word	0x20000354
 8001558:	20000008 	.word	0x20000008
 800155c:	40012c00 	.word	0x40012c00

08001560 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el) {
 8001560:	b5b0      	push	{r4, r5, r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 800156c:	4b76      	ldr	r3, [pc, #472]	; (8001748 <setPhaseVoltage+0x1e8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fade 	bl	8000b34 <__addsf3>
 8001578:	4603      	mov	r3, r0
 800157a:	4618      	mov	r0, r3
 800157c:	f7ff fe60 	bl	8001240 <_normalizeAngle>
 8001580:	6078      	str	r0, [r7, #4]
  // 帕克逆变换
  Ualpha =  -Uq*sin(angle_el);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001588:	4618      	mov	r0, r3
 800158a:	f7fe ff4d 	bl	8000428 <__aeabi_f2d>
 800158e:	4604      	mov	r4, r0
 8001590:	460d      	mov	r5, r1
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7fe ff48 	bl	8000428 <__aeabi_f2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4610      	mov	r0, r2
 800159e:	4619      	mov	r1, r3
 80015a0:	f009 fd6e 	bl	800b080 <sin>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4620      	mov	r0, r4
 80015aa:	4629      	mov	r1, r5
 80015ac:	f7fe ff94 	bl	80004d8 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fa66 	bl	8000a88 <__aeabi_d2f>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a63      	ldr	r2, [pc, #396]	; (800174c <setPhaseVoltage+0x1ec>)
 80015c0:	6013      	str	r3, [r2, #0]
  Ubeta =   Uq*cos(angle_el);
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f7fe ff30 	bl	8000428 <__aeabi_f2d>
 80015c8:	4604      	mov	r4, r0
 80015ca:	460d      	mov	r5, r1
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7fe ff2b 	bl	8000428 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f009 fc89 	bl	800aef0 <cos>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7fe ff77 	bl	80004d8 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fa49 	bl	8000a88 <__aeabi_d2f>
 80015f6:	4603      	mov	r3, r0
 80015f8:	4a55      	ldr	r2, [pc, #340]	; (8001750 <setPhaseVoltage+0x1f0>)
 80015fa:	6013      	str	r3, [r2, #0]

  // 克拉克逆变换
  Ua = Ualpha + voltage_power_supply/2;
 80015fc:	4b55      	ldr	r3, [pc, #340]	; (8001754 <setPhaseVoltage+0x1f4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fc51 	bl	8000eac <__aeabi_fdiv>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b4f      	ldr	r3, [pc, #316]	; (800174c <setPhaseVoltage+0x1ec>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4610      	mov	r0, r2
 8001616:	f7ff fa8d 	bl	8000b34 <__addsf3>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <setPhaseVoltage+0x1f8>)
 8001620:	601a      	str	r2, [r3, #0]
  Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 8001622:	4b4b      	ldr	r3, [pc, #300]	; (8001750 <setPhaseVoltage+0x1f0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fefe 	bl	8000428 <__aeabi_f2d>
 800162c:	a344      	add	r3, pc, #272	; (adr r3, 8001740 <setPhaseVoltage+0x1e0>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7fe ff51 	bl	80004d8 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4614      	mov	r4, r2
 800163c:	461d      	mov	r5, r3
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <setPhaseVoltage+0x1ec>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe fef0 	bl	8000428 <__aeabi_f2d>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4620      	mov	r0, r4
 800164e:	4629      	mov	r1, r5
 8001650:	f7fe fd8a 	bl	8000168 <__aeabi_dsub>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001664:	f7ff f862 	bl	800072c <__aeabi_ddiv>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4614      	mov	r4, r2
 800166e:	461d      	mov	r5, r3
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <setPhaseVoltage+0x1f4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fc17 	bl	8000eac <__aeabi_fdiv>
 800167e:	4603      	mov	r3, r0
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fed1 	bl	8000428 <__aeabi_f2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7fe fd6d 	bl	800016c <__adddf3>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9f5 	bl	8000a88 <__aeabi_d2f>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a2e      	ldr	r2, [pc, #184]	; (800175c <setPhaseVoltage+0x1fc>)
 80016a2:	6013      	str	r3, [r2, #0]
  Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 80016a4:	4b29      	ldr	r3, [pc, #164]	; (800174c <setPhaseVoltage+0x1ec>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe febb 	bl	8000428 <__aeabi_f2d>
 80016b2:	4604      	mov	r4, r0
 80016b4:	460d      	mov	r5, r1
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <setPhaseVoltage+0x1f0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe feb4 	bl	8000428 <__aeabi_f2d>
 80016c0:	a31f      	add	r3, pc, #124	; (adr r3, 8001740 <setPhaseVoltage+0x1e0>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7fe ff07 	bl	80004d8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fd49 	bl	8000168 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e6:	f7ff f821 	bl	800072c <__aeabi_ddiv>
 80016ea:	4602      	mov	r2, r0
 80016ec:	460b      	mov	r3, r1
 80016ee:	4614      	mov	r4, r2
 80016f0:	461d      	mov	r5, r3
 80016f2:	4b18      	ldr	r3, [pc, #96]	; (8001754 <setPhaseVoltage+0x1f4>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff fbd6 	bl	8000eac <__aeabi_fdiv>
 8001700:	4603      	mov	r3, r0
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fe90 	bl	8000428 <__aeabi_f2d>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fd2c 	bl	800016c <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f9b4 	bl	8000a88 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a0f      	ldr	r2, [pc, #60]	; (8001760 <setPhaseVoltage+0x200>)
 8001724:	6013      	str	r3, [r2, #0]
  setPwm(Ua,Ub,Uc);
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <setPhaseVoltage+0x1f8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a0c      	ldr	r2, [pc, #48]	; (800175c <setPhaseVoltage+0x1fc>)
 800172c:	6811      	ldr	r1, [r2, #0]
 800172e:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <setPhaseVoltage+0x200>)
 8001730:	6812      	ldr	r2, [r2, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fde4 	bl	8001300 <setPwm>
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	e8584caa 	.word	0xe8584caa
 8001744:	3ffbb67a 	.word	0x3ffbb67a
 8001748:	20000334 	.word	0x20000334
 800174c:	20000338 	.word	0x20000338
 8001750:	2000033c 	.word	0x2000033c
 8001754:	20000004 	.word	0x20000004
 8001758:	20000340 	.word	0x20000340
 800175c:	20000344 	.word	0x20000344
 8001760:	20000348 	.word	0x20000348
 8001764:	00000000 	.word	0x00000000

08001768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176e:	f000 fd77 	bl	8002260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001772:	f000 f883 	bl	800187c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001776:	f000 fa17 	bl	8001ba8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800177a:	f000 f8d9 	bl	8001930 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800177e:	f008 ff1b 	bl	800a5b8 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001782:	f000 f90d 	bl	80019a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001786:	f000 f9c3 	bl	8001b10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 800178a:	2201      	movs	r2, #1
 800178c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001790:	4831      	ldr	r0, [pc, #196]	; (8001858 <main+0xf0>)
 8001792:	f001 f87d 	bl	8002890 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001796:	2100      	movs	r1, #0
 8001798:	4830      	ldr	r0, [pc, #192]	; (800185c <main+0xf4>)
 800179a:	f003 ff1b 	bl	80055d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800179e:	2104      	movs	r1, #4
 80017a0:	482e      	ldr	r0, [pc, #184]	; (800185c <main+0xf4>)
 80017a2:	f003 ff17 	bl	80055d4 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80017a6:	2108      	movs	r1, #8
 80017a8:	482c      	ldr	r0, [pc, #176]	; (800185c <main+0xf4>)
 80017aa:	f003 ff13 	bl	80055d4 <HAL_TIM_PWM_Start>

   setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs));
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <main+0xf8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4619      	mov	r1, r3
 80017b4:	482b      	ldr	r0, [pc, #172]	; (8001864 <main+0xfc>)
 80017b6:	f7ff fd7b 	bl	80012b0 <_electricalAngle>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	4829      	ldr	r0, [pc, #164]	; (8001868 <main+0x100>)
 80017c4:	f7ff fecc 	bl	8001560 <setPhaseVoltage>
   HAL_Delay(3000);
 80017c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017cc:	f000 fdaa 	bl	8002324 <HAL_Delay>
   uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 80017d0:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80017d4:	2201      	movs	r2, #1
 80017d6:	4920      	ldr	r1, [pc, #128]	; (8001858 <main+0xf0>)
 80017d8:	4824      	ldr	r0, [pc, #144]	; (800186c <main+0x104>)
 80017da:	f7ff fcbd 	bl	8001158 <read>
 80017de:	4603      	mov	r3, r0
 80017e0:	80fb      	strh	r3, [r7, #6]
   zero_electric_angle=_electricalAngle(M_PI*read_raw/MAX_ANGLE_VALUE,pole_pairs);
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe fe0d 	bl	8000404 <__aeabi_i2d>
 80017ea:	a319      	add	r3, pc, #100	; (adr r3, 8001850 <main+0xe8>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe fe72 	bl	80004d8 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4610      	mov	r0, r2
 80017fa:	4619      	mov	r1, r3
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <main+0x108>)
 8001802:	f7fe ff93 	bl	800072c <__aeabi_ddiv>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f93b 	bl	8000a88 <__aeabi_d2f>
 8001812:	4602      	mov	r2, r0
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <main+0xf8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f7ff fd48 	bl	80012b0 <_electricalAngle>
 8001820:	4603      	mov	r3, r0
 8001822:	4a14      	ldr	r2, [pc, #80]	; (8001874 <main+0x10c>)
 8001824:	6013      	str	r3, [r2, #0]
   setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs));
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <main+0xf8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4619      	mov	r1, r3
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <main+0xfc>)
 800182e:	f7ff fd3f 	bl	80012b0 <_electricalAngle>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f7ff fe8f 	bl	8001560 <setPhaseVoltage>

   HAL_TIM_Base_Start_IT(&htim2);
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <main+0x110>)
 8001844:	f003 fe1c 	bl	8005480 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001848:	e7fe      	b.n	8001848 <main+0xe0>
 800184a:	bf00      	nop
 800184c:	f3af 8000 	nop.w
 8001850:	54442d18 	.word	0x54442d18
 8001854:	400921fb 	.word	0x400921fb
 8001858:	40010c00 	.word	0x40010c00
 800185c:	20000270 	.word	0x20000270
 8001860:	2000000c 	.word	0x2000000c
 8001864:	4096cbe4 	.word	0x4096cbe4
 8001868:	40400000 	.word	0x40400000
 800186c:	20000218 	.word	0x20000218
 8001870:	40c00000 	.word	0x40c00000
 8001874:	20000334 	.word	0x20000334
 8001878:	200002b8 	.word	0x200002b8

0800187c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b094      	sub	sp, #80	; 0x50
 8001880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001886:	2228      	movs	r2, #40	; 0x28
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f00a fcf8 	bl	800c280 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ba:	2301      	movs	r3, #1
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018be:	2302      	movs	r3, #2
 80018c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fcd0 	bl	8004278 <HAL_RCC_OscConfig>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80018de:	f000 fb43 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e2:	230f      	movs	r3, #15
 80018e4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2102      	movs	r1, #2
 80018fe:	4618      	mov	r0, r3
 8001900:	f002 ff3c 	bl	800477c <HAL_RCC_ClockConfig>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800190a:	f000 fb2d 	bl	8001f68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800190e:	2310      	movs	r3, #16
 8001910:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	4618      	mov	r0, r3
 800191a:	f003 f895 	bl	8004a48 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001924:	f000 fb20 	bl	8001f68 <Error_Handler>
  }
}
 8001928:	bf00      	nop
 800192a:	3750      	adds	r7, #80	; 0x50
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <MX_SPI1_Init+0x68>)
 8001936:	4a19      	ldr	r2, [pc, #100]	; (800199c <MX_SPI1_Init+0x6c>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_SPI1_Init+0x68>)
 800193c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_SPI1_Init+0x68>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <MX_SPI1_Init+0x68>)
 800194a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800194e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_SPI1_Init+0x68>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_SPI1_Init+0x68>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195c:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_SPI1_Init+0x68>)
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_SPI1_Init+0x68>)
 8001966:	2220      	movs	r2, #32
 8001968:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_SPI1_Init+0x68>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_SPI1_Init+0x68>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_SPI1_Init+0x68>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_SPI1_Init+0x68>)
 800197e:	220a      	movs	r2, #10
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_SPI1_Init+0x68>)
 8001984:	f003 f916 	bl	8004bb4 <HAL_SPI_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800198e:	f000 faeb 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000218 	.word	0x20000218
 800199c:	40013000 	.word	0x40013000

080019a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b096      	sub	sp, #88	; 0x58
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
 80019ca:	60da      	str	r2, [r3, #12]
 80019cc:	611a      	str	r2, [r3, #16]
 80019ce:	615a      	str	r2, [r3, #20]
 80019d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2220      	movs	r2, #32
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f00a fc51 	bl	800c280 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019de:	4b4a      	ldr	r3, [pc, #296]	; (8001b08 <MX_TIM1_Init+0x168>)
 80019e0:	4a4a      	ldr	r2, [pc, #296]	; (8001b0c <MX_TIM1_Init+0x16c>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e4:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <MX_TIM1_Init+0x168>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <MX_TIM1_Init+0x168>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <MX_TIM1_Init+0x168>)
 80019f2:	f640 125f 	movw	r2, #2399	; 0x95f
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <MX_TIM1_Init+0x168>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b40      	ldr	r3, [pc, #256]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	483f      	ldr	r0, [pc, #252]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a0c:	f003 fce8 	bl	80053e0 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a16:	f000 faa7 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a24:	4619      	mov	r1, r3
 8001a26:	4838      	ldr	r0, [pc, #224]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a28:	f004 f83c 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a32:	f000 fa99 	bl	8001f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a36:	4834      	ldr	r0, [pc, #208]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a38:	f003 fd74 	bl	8005524 <HAL_TIM_PWM_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001a42:	f000 fa91 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a4e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a52:	4619      	mov	r1, r3
 8001a54:	482c      	ldr	r0, [pc, #176]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a56:	f004 fbb1 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a60:	f000 fa82 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	2360      	movs	r3, #96	; 0x60
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	2200      	movs	r2, #0
 8001a86:	4619      	mov	r1, r3
 8001a88:	481f      	ldr	r0, [pc, #124]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001a8a:	f003 ff4d 	bl	8005928 <HAL_TIM_PWM_ConfigChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001a94:	f000 fa68 	bl	8001f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4819      	ldr	r0, [pc, #100]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001aa2:	f003 ff41 	bl	8005928 <HAL_TIM_PWM_ConfigChannel>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001aac:	f000 fa5c 	bl	8001f68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab4:	2208      	movs	r2, #8
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4813      	ldr	r0, [pc, #76]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001aba:	f003 ff35 	bl	8005928 <HAL_TIM_PWM_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001ac4:	f000 fa50 	bl	8001f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ae0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4807      	ldr	r0, [pc, #28]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001aec:	f004 fbc4 	bl	8006278 <HAL_TIMEx_ConfigBreakDeadTime>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001af6:	f000 fa37 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001afa:	4803      	ldr	r0, [pc, #12]	; (8001b08 <MX_TIM1_Init+0x168>)
 8001afc:	f000 fade 	bl	80020bc <HAL_TIM_MspPostInit>

}
 8001b00:	bf00      	nop
 8001b02:	3758      	adds	r7, #88	; 0x58
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000270 	.word	0x20000270
 8001b0c:	40012c00 	.word	0x40012c00

08001b10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b16:	f107 0308 	add.w	r3, r7, #8
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	609a      	str	r2, [r3, #8]
 8001b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b24:	463b      	mov	r3, r7
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001b34:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b36:	2259      	movs	r2, #89	; 0x59
 8001b38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3a:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b42:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001b46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b54:	4813      	ldr	r0, [pc, #76]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b56:	f003 fc43 	bl	80053e0 <HAL_TIM_Base_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b60:	f000 fa02 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b72:	f003 ff97 	bl	8005aa4 <HAL_TIM_ConfigClockSource>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b7c:	f000 f9f4 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b80:	2300      	movs	r3, #0
 8001b82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b88:	463b      	mov	r3, r7
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_TIM2_Init+0x94>)
 8001b8e:	f004 fb15 	bl	80061bc <HAL_TIMEx_MasterConfigSynchronization>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b98:	f000 f9e6 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b9c:	bf00      	nop
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200002b8 	.word	0x200002b8

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bbc:	4b38      	ldr	r3, [pc, #224]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	4a37      	ldr	r2, [pc, #220]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bc2:	f043 0310 	orr.w	r3, r3, #16
 8001bc6:	6193      	str	r3, [r2, #24]
 8001bc8:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	f003 0310 	and.w	r3, r3, #16
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bd4:	4b32      	ldr	r3, [pc, #200]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	4a31      	ldr	r2, [pc, #196]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bda:	f043 0320 	orr.w	r3, r3, #32
 8001bde:	6193      	str	r3, [r2, #24]
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bec:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bf2:	f043 0304 	orr.w	r3, r3, #4
 8001bf6:	6193      	str	r3, [r2, #24]
 8001bf8:	4b29      	ldr	r3, [pc, #164]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <MX_GPIO_Init+0xf8>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c22:	4820      	ldr	r0, [pc, #128]	; (8001ca4 <MX_GPIO_Init+0xfc>)
 8001c24:	f000 fe34 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 8001c28:	2201      	movs	r2, #1
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	481e      	ldr	r0, [pc, #120]	; (8001ca8 <MX_GPIO_Init+0x100>)
 8001c2e:	f000 fe2f 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c38:	481b      	ldr	r0, [pc, #108]	; (8001ca8 <MX_GPIO_Init+0x100>)
 8001c3a:	f000 fe29 	bl	8002890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001c3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c44:	2301      	movs	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <MX_GPIO_Init+0xfc>)
 8001c58:	f000 fc96 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	4619      	mov	r1, r3
 8001c72:	480d      	ldr	r0, [pc, #52]	; (8001ca8 <MX_GPIO_Init+0x100>)
 8001c74:	f000 fc88 	bl	8002588 <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2302      	movs	r3, #2
 8001c88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 8001c8a:	f107 0310 	add.w	r3, r7, #16
 8001c8e:	4619      	mov	r1, r3
 8001c90:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_GPIO_Init+0x100>)
 8001c92:	f000 fc79 	bl	8002588 <HAL_GPIO_Init>

}
 8001c96:	bf00      	nop
 8001c98:	3720      	adds	r7, #32
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40011000 	.word	0x40011000
 8001ca8:	40010c00 	.word	0x40010c00
 8001cac:	00000000 	.word	0x00000000

08001cb0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a9f      	ldr	r2, [pc, #636]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	f040 812c 	bne.w	8001f1a <HAL_TIM_PeriodElapsedCallback+0x26a>
  {



    index1+=1;
 8001cc2:	4b9e      	ldr	r3, [pc, #632]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	4a9c      	ldr	r2, [pc, #624]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cca:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 8001ccc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	499b      	ldr	r1, [pc, #620]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001cd4:	489b      	ldr	r0, [pc, #620]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001cd6:	f7ff fa3f 	bl	8001158 <read>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	827b      	strh	r3, [r7, #18]
    float angle_now=(float)read_raw /(float)MAX_ANGLE_VALUE *M_PI;
 8001cde:	8a7b      	ldrh	r3, [r7, #18]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe ffd7 	bl	8000c94 <__aeabi_ui2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff f8dd 	bl	8000eac <__aeabi_fdiv>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe fb97 	bl	8000428 <__aeabi_f2d>
 8001cfa:	a38b      	add	r3, pc, #556	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d00:	f7fe fbea 	bl	80004d8 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f7fe febc 	bl	8000a88 <__aeabi_d2f>
 8001d10:	4603      	mov	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
    float angle_error=motor_target-angle_now;
 8001d14:	4b8c      	ldr	r3, [pc, #560]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68f9      	ldr	r1, [r7, #12]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff08 	bl	8000b30 <__aeabi_fsub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	617b      	str	r3, [r7, #20]

    angle_error=_normalizeAngle(angle_error);
 8001d24:	6978      	ldr	r0, [r7, #20]
 8001d26:	f7ff fa8b 	bl	8001240 <_normalizeAngle>
 8001d2a:	6178      	str	r0, [r7, #20]
    if (angle_error > M_PI){
 8001d2c:	6978      	ldr	r0, [r7, #20]
 8001d2e:	f7fe fb7b 	bl	8000428 <__aeabi_f2d>
 8001d32:	a37d      	add	r3, pc, #500	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f7fe fe5e 	bl	80009f8 <__aeabi_dcmpgt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00f      	beq.n	8001d62 <HAL_TIM_PeriodElapsedCallback+0xb2>
    	angle_error-=2*M_PI;
 8001d42:	6978      	ldr	r0, [r7, #20]
 8001d44:	f7fe fb70 	bl	8000428 <__aeabi_f2d>
 8001d48:	a379      	add	r3, pc, #484	; (adr r3, 8001f30 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4e:	f7fe fa0b 	bl	8000168 <__aeabi_dsub>
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	4610      	mov	r0, r2
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f7fe fe95 	bl	8000a88 <__aeabi_d2f>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	617b      	str	r3, [r7, #20]
    }
    setPhaseVoltage(_constrain(Kp*(angle_error)/M_PI*180,-voltage_power_supply/2,voltage_power_supply/2),0,_electricalAngle(angle_now,pole_pairs));
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6979      	ldr	r1, [r7, #20]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe ffeb 	bl	8000d44 <__aeabi_fmul>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fb59 	bl	8000428 <__aeabi_f2d>
 8001d76:	a36c      	add	r3, pc, #432	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fcd6 	bl	800072c <__aeabi_ddiv>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4610      	mov	r0, r2
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001d8e:	f7fe fba3 	bl	80004d8 <__aeabi_dmul>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4614      	mov	r4, r2
 8001d98:	461d      	mov	r5, r3
 8001d9a:	4b6e      	ldr	r3, [pc, #440]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001da2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f880 	bl	8000eac <__aeabi_fdiv>
 8001dac:	4603      	mov	r3, r0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fb3a 	bl	8000428 <__aeabi_f2d>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4620      	mov	r0, r4
 8001dba:	4629      	mov	r1, r5
 8001dbc:	f7fe fdfe 	bl	80009bc <__aeabi_dcmplt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_TIM_PeriodElapsedCallback+0x12e>
 8001dc6:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001dce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f86a 	bl	8000eac <__aeabi_fdiv>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461c      	mov	r4, r3
 8001ddc:	e058      	b.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001dde:	4b5b      	ldr	r3, [pc, #364]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6979      	ldr	r1, [r7, #20]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe ffad 	bl	8000d44 <__aeabi_fmul>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fb1b 	bl	8000428 <__aeabi_f2d>
 8001df2:	a34d      	add	r3, pc, #308	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f7fe fc98 	bl	800072c <__aeabi_ddiv>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e0a:	f7fe fb65 	bl	80004d8 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4614      	mov	r4, r2
 8001e14:	461d      	mov	r5, r3
 8001e16:	4b4f      	ldr	r3, [pc, #316]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f844 	bl	8000eac <__aeabi_fdiv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fafe 	bl	8000428 <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fde0 	bl	80009f8 <__aeabi_dcmpgt>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d009      	beq.n	8001e52 <HAL_TIM_PeriodElapsedCallback+0x1a2>
 8001e3e:	4b45      	ldr	r3, [pc, #276]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff f830 	bl	8000eac <__aeabi_fdiv>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	461c      	mov	r4, r3
 8001e50:	e01e      	b.n	8001e90 <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8001e52:	4b3e      	ldr	r3, [pc, #248]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6979      	ldr	r1, [r7, #20]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe ff73 	bl	8000d44 <__aeabi_fmul>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fae1 	bl	8000428 <__aeabi_f2d>
 8001e66:	a330      	add	r3, pc, #192	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fc5e 	bl	800072c <__aeabi_ddiv>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	4b34      	ldr	r3, [pc, #208]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001e7e:	f7fe fb2b 	bl	80004d8 <__aeabi_dmul>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4610      	mov	r0, r2
 8001e88:	4619      	mov	r1, r3
 8001e8a:	f7fe fdfd 	bl	8000a88 <__aeabi_d2f>
 8001e8e:	4604      	mov	r4, r0
 8001e90:	4b31      	ldr	r3, [pc, #196]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f7ff fa0a 	bl	80012b0 <_electricalAngle>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f04f 0100 	mov.w	r1, #0
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f7ff fb5b 	bl	8001560 <setPhaseVoltage>
//    sprintf(data, "open loop control \n");
//    sprintf(data, "angle: %u \n", read_raw);
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
//    sprintf(data, "angle_now : %i \n", (int) floor(angle_now*180/M_PI));
//        CDC_Transmit_FS((uint8_t*) data, strlen(data));
    sprintf(data, "angle_error : %i \n", (int) floor(angle_error/M_PI*180));
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7fe fabc 	bl	8000428 <__aeabi_f2d>
 8001eb0:	a31d      	add	r3, pc, #116	; (adr r3, 8001f28 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fc39 	bl	800072c <__aeabi_ddiv>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001ec8:	f7fe fb06 	bl	80004d8 <__aeabi_dmul>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f009 f854 	bl	800af80 <floor>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	460b      	mov	r3, r1
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	f7fe fdaa 	bl	8000a38 <__aeabi_d2iz>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	491c      	ldr	r1, [pc, #112]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001eea:	481d      	ldr	r0, [pc, #116]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001eec:	f00a f9d0 	bl	800c290 <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001ef0:	481b      	ldr	r0, [pc, #108]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001ef2:	f7fe f92d 	bl	8000150 <strlen>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4619      	mov	r1, r3
 8001efc:	4818      	ldr	r0, [pc, #96]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001efe:	f008 fc19 	bl	800a734 <CDC_Transmit_FS>
    if (index1 == 200){
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2bc8      	cmp	r3, #200	; 0xc8
 8001f08:	d107      	bne.n	8001f1a <HAL_TIM_PeriodElapsedCallback+0x26a>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f0e:	4815      	ldr	r0, [pc, #84]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001f10:	f000 fcd6 	bl	80028c0 <HAL_GPIO_TogglePin>

    	index1=0;
 8001f14:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bdb0      	pop	{r4, r5, r7, pc}
 8001f22:	bf00      	nop
 8001f24:	f3af 8000 	nop.w
 8001f28:	54442d18 	.word	0x54442d18
 8001f2c:	400921fb 	.word	0x400921fb
 8001f30:	54442d18 	.word	0x54442d18
 8001f34:	401921fb 	.word	0x401921fb
 8001f38:	200002b8 	.word	0x200002b8
 8001f3c:	20000358 	.word	0x20000358
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	20000218 	.word	0x20000218
 8001f48:	20000010 	.word	0x20000010
 8001f4c:	20000014 	.word	0x20000014
 8001f50:	40668000 	.word	0x40668000
 8001f54:	20000004 	.word	0x20000004
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	0800cba0 	.word	0x0800cba0
 8001f60:	20000300 	.word	0x20000300
 8001f64:	40011000 	.word	0x40011000

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <Error_Handler+0x8>
	...

08001f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_MspInit+0x40>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_MspInit+0x40>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6193      	str	r3, [r2, #24]
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_MspInit+0x40>)
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_MspInit+0x40>)
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_MspInit+0x40>)
 8001f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	61d3      	str	r3, [r2, #28]
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_MspInit+0x40>)
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 0310 	add.w	r3, r7, #16
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <HAL_SPI_MspInit+0x88>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d12f      	bne.n	8002038 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_SPI_MspInit+0x8c>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_SPI_MspInit+0x8c>)
 8001fde:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fe2:	6193      	str	r3, [r2, #24]
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_SPI_MspInit+0x8c>)
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	4b14      	ldr	r3, [pc, #80]	; (8002044 <HAL_SPI_MspInit+0x8c>)
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	4a13      	ldr	r2, [pc, #76]	; (8002044 <HAL_SPI_MspInit+0x8c>)
 8001ff6:	f043 0304 	orr.w	r3, r3, #4
 8001ffa:	6193      	str	r3, [r2, #24]
 8001ffc:	4b11      	ldr	r3, [pc, #68]	; (8002044 <HAL_SPI_MspInit+0x8c>)
 8001ffe:	699b      	ldr	r3, [r3, #24]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002008:	23a0      	movs	r3, #160	; 0xa0
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200c:	2302      	movs	r3, #2
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002010:	2303      	movs	r3, #3
 8002012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	480b      	ldr	r0, [pc, #44]	; (8002048 <HAL_SPI_MspInit+0x90>)
 800201c:	f000 fab4 	bl	8002588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002020:	2340      	movs	r3, #64	; 0x40
 8002022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002028:	2301      	movs	r3, #1
 800202a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202c:	f107 0310 	add.w	r3, r7, #16
 8002030:	4619      	mov	r1, r3
 8002032:	4805      	ldr	r0, [pc, #20]	; (8002048 <HAL_SPI_MspInit+0x90>)
 8002034:	f000 faa8 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002038:	bf00      	nop
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40013000 	.word	0x40013000
 8002044:	40021000 	.word	0x40021000
 8002048:	40010800 	.word	0x40010800

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a16      	ldr	r2, [pc, #88]	; (80020b4 <HAL_TIM_Base_MspInit+0x68>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d10c      	bne.n	8002078 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	4a15      	ldr	r2, [pc, #84]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002064:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002068:	6193      	str	r3, [r2, #24]
 800206a:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002076:	e018      	b.n	80020aa <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002080:	d113      	bne.n	80020aa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a0c      	ldr	r2, [pc, #48]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_TIM_Base_MspInit+0x6c>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60bb      	str	r3, [r7, #8]
 8002098:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	201c      	movs	r0, #28
 80020a0:	f000 fa3b 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a4:	201c      	movs	r0, #28
 80020a6:	f000 fa54 	bl	8002552 <HAL_NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40012c00 	.word	0x40012c00
 80020b8:	40021000 	.word	0x40021000

080020bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b088      	sub	sp, #32
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a10      	ldr	r2, [pc, #64]	; (8002118 <HAL_TIM_MspPostInit+0x5c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d118      	bne.n	800210e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_TIM_MspPostInit+0x60>)
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_TIM_MspPostInit+0x60>)
 80020e2:	f043 0304 	orr.w	r3, r3, #4
 80020e6:	6193      	str	r3, [r2, #24]
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_TIM_MspPostInit+0x60>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80020f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fe:	2302      	movs	r3, #2
 8002100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <HAL_TIM_MspPostInit+0x64>)
 800210a:	f000 fa3d 	bl	8002588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40012c00 	.word	0x40012c00
 800211c:	40021000 	.word	0x40021000
 8002120:	40010800 	.word	0x40010800

08002124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler+0x4>

0800212a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <HardFault_Handler+0x4>

08002130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002134:	e7fe      	b.n	8002134 <MemManage_Handler+0x4>

08002136 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002136:	b480      	push	{r7}
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800213a:	e7fe      	b.n	800213a <BusFault_Handler+0x4>

0800213c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002140:	e7fe      	b.n	8002140 <UsageFault_Handler+0x4>

08002142 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr

0800215a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800216a:	f000 f8bf 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
	...

08002174 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002178:	4802      	ldr	r0, [pc, #8]	; (8002184 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800217a:	f000 fceb 	bl	8002b54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000102c 	.word	0x2000102c

08002188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TIM2_IRQHandler+0x10>)
 800218e:	f003 fac3 	bl	8005718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200002b8 	.word	0x200002b8

0800219c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a4:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <_sbrk+0x5c>)
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <_sbrk+0x60>)
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <_sbrk+0x64>)
 80021ba:	4a12      	ldr	r2, [pc, #72]	; (8002204 <_sbrk+0x68>)
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d207      	bcs.n	80021dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021cc:	f00a f82e 	bl	800c22c <__errno>
 80021d0:	4603      	mov	r3, r0
 80021d2:	220c      	movs	r2, #12
 80021d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021da:	e009      	b.n	80021f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <_sbrk+0x64>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <_sbrk+0x64>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_sbrk+0x64>)
 80021ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20005000 	.word	0x20005000
 80021fc:	00000400 	.word	0x00000400
 8002200:	2000035c 	.word	0x2000035c
 8002204:	20001548 	.word	0x20001548

08002208 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002216:	490d      	ldr	r1, [pc, #52]	; (800224c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002218:	4a0d      	ldr	r2, [pc, #52]	; (8002250 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800221c:	e002      	b.n	8002224 <LoopCopyDataInit>

0800221e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002222:	3304      	adds	r3, #4

08002224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002228:	d3f9      	bcc.n	800221e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222a:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800222c:	4c0a      	ldr	r4, [pc, #40]	; (8002258 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002230:	e001      	b.n	8002236 <LoopFillZerobss>

08002232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002234:	3204      	adds	r2, #4

08002236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002238:	d3fb      	bcc.n	8002232 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800223a:	f7ff ffe5 	bl	8002208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800223e:	f009 fffb 	bl	800c238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002242:	f7ff fa91 	bl	8001768 <main>
  bx lr
 8002246:	4770      	bx	lr
  ldr r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800224c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8002250:	0800ce3c 	.word	0x0800ce3c
  ldr r2, =_sbss
 8002254:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8002258:	20001548 	.word	0x20001548

0800225c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800225c:	e7fe      	b.n	800225c <ADC1_2_IRQHandler>
	...

08002260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_Init+0x28>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	; (8002288 <HAL_Init+0x28>)
 800226a:	f043 0310 	orr.w	r3, r3, #16
 800226e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 f947 	bl	8002504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fe7a 	bl	8001f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40022000 	.word	0x40022000

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f95f 	bl	800256e <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f000 f927 	bl	800251a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000001c 	.word	0x2000001c
 80022e4:	20000024 	.word	0x20000024
 80022e8:	20000020 	.word	0x20000020

080022ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b05      	ldr	r3, [pc, #20]	; (8002308 <HAL_IncTick+0x1c>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b05      	ldr	r3, [pc, #20]	; (800230c <HAL_IncTick+0x20>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a03      	ldr	r2, [pc, #12]	; (800230c <HAL_IncTick+0x20>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr
 8002308:	20000024 	.word	0x20000024
 800230c:	20000360 	.word	0x20000360

08002310 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return uwTick;
 8002314:	4b02      	ldr	r3, [pc, #8]	; (8002320 <HAL_GetTick+0x10>)
 8002316:	681b      	ldr	r3, [r3, #0]
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	20000360 	.word	0x20000360

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fff0 	bl	8002310 <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffe0 	bl	8002310 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000024 	.word	0x20000024

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bc80      	pop	{r7}
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4906      	ldr	r1, [pc, #24]	; (8002404 <__NVIC_EnableIRQ+0x34>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr
 8002404:	e000e100 	.word	0xe000e100

08002408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	4603      	mov	r3, r0
 8002410:	6039      	str	r1, [r7, #0]
 8002412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0a      	blt.n	8002432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	b2da      	uxtb	r2, r3
 8002420:	490c      	ldr	r1, [pc, #48]	; (8002454 <__NVIC_SetPriority+0x4c>)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	0112      	lsls	r2, r2, #4
 8002428:	b2d2      	uxtb	r2, r2
 800242a:	440b      	add	r3, r1
 800242c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002430:	e00a      	b.n	8002448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4908      	ldr	r1, [pc, #32]	; (8002458 <__NVIC_SetPriority+0x50>)
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	3b04      	subs	r3, #4
 8002440:	0112      	lsls	r2, r2, #4
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	440b      	add	r3, r1
 8002446:	761a      	strb	r2, [r3, #24]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	bc80      	pop	{r7}
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245c:	b480      	push	{r7}
 800245e:	b089      	sub	sp, #36	; 0x24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	f1c3 0307 	rsb	r3, r3, #7
 8002476:	2b04      	cmp	r3, #4
 8002478:	bf28      	it	cs
 800247a:	2304      	movcs	r3, #4
 800247c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	2b06      	cmp	r3, #6
 8002484:	d902      	bls.n	800248c <NVIC_EncodePriority+0x30>
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	3b03      	subs	r3, #3
 800248a:	e000      	b.n	800248e <NVIC_EncodePriority+0x32>
 800248c:	2300      	movs	r3, #0
 800248e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43da      	mvns	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	401a      	ands	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	fa01 f303 	lsl.w	r3, r1, r3
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	4313      	orrs	r3, r2
         );
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d0:	d301      	bcc.n	80024d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024d2:	2301      	movs	r3, #1
 80024d4:	e00f      	b.n	80024f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d6:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <SysTick_Config+0x40>)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024de:	210f      	movs	r1, #15
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024e4:	f7ff ff90 	bl	8002408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SysTick_Config+0x40>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ee:	4b04      	ldr	r3, [pc, #16]	; (8002500 <SysTick_Config+0x40>)
 80024f0:	2207      	movs	r2, #7
 80024f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	e000e010 	.word	0xe000e010

08002504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff ff2d 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251a:	b580      	push	{r7, lr}
 800251c:	b086      	sub	sp, #24
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252c:	f7ff ff42 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002530:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68b9      	ldr	r1, [r7, #8]
 8002536:	6978      	ldr	r0, [r7, #20]
 8002538:	f7ff ff90 	bl	800245c <NVIC_EncodePriority>
 800253c:	4602      	mov	r2, r0
 800253e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff ff5f 	bl	8002408 <__NVIC_SetPriority>
}
 800254a:	bf00      	nop
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff35 	bl	80023d0 <__NVIC_EnableIRQ>
}
 8002566:	bf00      	nop
 8002568:	3708      	adds	r7, #8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}

0800256e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ffa2 	bl	80024c0 <SysTick_Config>
 800257c:	4603      	mov	r3, r0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002588:	b480      	push	{r7}
 800258a:	b08b      	sub	sp, #44	; 0x2c
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259a:	e169      	b.n	8002870 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800259c:	2201      	movs	r2, #1
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	f040 8158 	bne.w	800286a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a9a      	ldr	r2, [pc, #616]	; (8002828 <HAL_GPIO_Init+0x2a0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d05e      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025c4:	4a98      	ldr	r2, [pc, #608]	; (8002828 <HAL_GPIO_Init+0x2a0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d875      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025ca:	4a98      	ldr	r2, [pc, #608]	; (800282c <HAL_GPIO_Init+0x2a4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d058      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025d0:	4a96      	ldr	r2, [pc, #600]	; (800282c <HAL_GPIO_Init+0x2a4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d86f      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025d6:	4a96      	ldr	r2, [pc, #600]	; (8002830 <HAL_GPIO_Init+0x2a8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d052      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025dc:	4a94      	ldr	r2, [pc, #592]	; (8002830 <HAL_GPIO_Init+0x2a8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d869      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025e2:	4a94      	ldr	r2, [pc, #592]	; (8002834 <HAL_GPIO_Init+0x2ac>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d04c      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025e8:	4a92      	ldr	r2, [pc, #584]	; (8002834 <HAL_GPIO_Init+0x2ac>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d863      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025ee:	4a92      	ldr	r2, [pc, #584]	; (8002838 <HAL_GPIO_Init+0x2b0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d046      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
 80025f4:	4a90      	ldr	r2, [pc, #576]	; (8002838 <HAL_GPIO_Init+0x2b0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d85d      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 80025fa:	2b12      	cmp	r3, #18
 80025fc:	d82a      	bhi.n	8002654 <HAL_GPIO_Init+0xcc>
 80025fe:	2b12      	cmp	r3, #18
 8002600:	d859      	bhi.n	80026b6 <HAL_GPIO_Init+0x12e>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_GPIO_Init+0x80>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	08002683 	.word	0x08002683
 800260c:	0800265d 	.word	0x0800265d
 8002610:	0800266f 	.word	0x0800266f
 8002614:	080026b1 	.word	0x080026b1
 8002618:	080026b7 	.word	0x080026b7
 800261c:	080026b7 	.word	0x080026b7
 8002620:	080026b7 	.word	0x080026b7
 8002624:	080026b7 	.word	0x080026b7
 8002628:	080026b7 	.word	0x080026b7
 800262c:	080026b7 	.word	0x080026b7
 8002630:	080026b7 	.word	0x080026b7
 8002634:	080026b7 	.word	0x080026b7
 8002638:	080026b7 	.word	0x080026b7
 800263c:	080026b7 	.word	0x080026b7
 8002640:	080026b7 	.word	0x080026b7
 8002644:	080026b7 	.word	0x080026b7
 8002648:	080026b7 	.word	0x080026b7
 800264c:	08002665 	.word	0x08002665
 8002650:	08002679 	.word	0x08002679
 8002654:	4a79      	ldr	r2, [pc, #484]	; (800283c <HAL_GPIO_Init+0x2b4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d013      	beq.n	8002682 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800265a:	e02c      	b.n	80026b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e029      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	3304      	adds	r3, #4
 800266a:	623b      	str	r3, [r7, #32]
          break;
 800266c:	e024      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	3308      	adds	r3, #8
 8002674:	623b      	str	r3, [r7, #32]
          break;
 8002676:	e01f      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	330c      	adds	r3, #12
 800267e:	623b      	str	r3, [r7, #32]
          break;
 8002680:	e01a      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d102      	bne.n	8002690 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800268a:	2304      	movs	r3, #4
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e013      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d105      	bne.n	80026a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002698:	2308      	movs	r3, #8
 800269a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	611a      	str	r2, [r3, #16]
          break;
 80026a2:	e009      	b.n	80026b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a4:	2308      	movs	r3, #8
 80026a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69fa      	ldr	r2, [r7, #28]
 80026ac:	615a      	str	r2, [r3, #20]
          break;
 80026ae:	e003      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026b0:	2300      	movs	r3, #0
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x130>
          break;
 80026b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	2bff      	cmp	r3, #255	; 0xff
 80026bc:	d801      	bhi.n	80026c2 <HAL_GPIO_Init+0x13a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e001      	b.n	80026c6 <HAL_GPIO_Init+0x13e>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	3304      	adds	r3, #4
 80026c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	; 0xff
 80026cc:	d802      	bhi.n	80026d4 <HAL_GPIO_Init+0x14c>
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	e002      	b.n	80026da <HAL_GPIO_Init+0x152>
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	3b08      	subs	r3, #8
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	210f      	movs	r1, #15
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	401a      	ands	r2, r3
 80026ec:	6a39      	ldr	r1, [r7, #32]
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 80b1 	beq.w	800286a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002708:	4b4d      	ldr	r3, [pc, #308]	; (8002840 <HAL_GPIO_Init+0x2b8>)
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_GPIO_Init+0x2b8>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6193      	str	r3, [r2, #24]
 8002714:	4b4a      	ldr	r3, [pc, #296]	; (8002840 <HAL_GPIO_Init+0x2b8>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002720:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_GPIO_Init+0x2bc>)
 8002722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	220f      	movs	r2, #15
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4013      	ands	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a40      	ldr	r2, [pc, #256]	; (8002848 <HAL_GPIO_Init+0x2c0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_GPIO_Init+0x1ec>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3f      	ldr	r2, [pc, #252]	; (800284c <HAL_GPIO_Init+0x2c4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00d      	beq.n	8002770 <HAL_GPIO_Init+0x1e8>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3e      	ldr	r2, [pc, #248]	; (8002850 <HAL_GPIO_Init+0x2c8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <HAL_GPIO_Init+0x1e4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3d      	ldr	r2, [pc, #244]	; (8002854 <HAL_GPIO_Init+0x2cc>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_GPIO_Init+0x1e0>
 8002764:	2303      	movs	r3, #3
 8002766:	e006      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 8002768:	2304      	movs	r3, #4
 800276a:	e004      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 800276c:	2302      	movs	r3, #2
 800276e:	e002      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 8002770:	2301      	movs	r3, #1
 8002772:	e000      	b.n	8002776 <HAL_GPIO_Init+0x1ee>
 8002774:	2300      	movs	r3, #0
 8002776:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002778:	f002 0203 	and.w	r2, r2, #3
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	4093      	lsls	r3, r2
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002786:	492f      	ldr	r1, [pc, #188]	; (8002844 <HAL_GPIO_Init+0x2bc>)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	089b      	lsrs	r3, r3, #2
 800278c:	3302      	adds	r3, #2
 800278e:	68fa      	ldr	r2, [r7, #12]
 8002790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d006      	beq.n	80027ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027a0:	4b2d      	ldr	r3, [pc, #180]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	492c      	ldr	r1, [pc, #176]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
 80027ac:	e006      	b.n	80027bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ae:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4928      	ldr	r1, [pc, #160]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027b8:	4013      	ands	r3, r2
 80027ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027c8:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	4922      	ldr	r1, [pc, #136]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
 80027d4:	e006      	b.n	80027e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027d8:	685a      	ldr	r2, [r3, #4]
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	43db      	mvns	r3, r3
 80027de:	491e      	ldr	r1, [pc, #120]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4918      	ldr	r1, [pc, #96]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	608b      	str	r3, [r1, #8]
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	43db      	mvns	r3, r3
 8002806:	4914      	ldr	r1, [pc, #80]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 8002808:	4013      	ands	r3, r2
 800280a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d021      	beq.n	800285c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002818:	4b0f      	ldr	r3, [pc, #60]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	490e      	ldr	r1, [pc, #56]	; (8002858 <HAL_GPIO_Init+0x2d0>)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	4313      	orrs	r3, r2
 8002822:	60cb      	str	r3, [r1, #12]
 8002824:	e021      	b.n	800286a <HAL_GPIO_Init+0x2e2>
 8002826:	bf00      	nop
 8002828:	10320000 	.word	0x10320000
 800282c:	10310000 	.word	0x10310000
 8002830:	10220000 	.word	0x10220000
 8002834:	10210000 	.word	0x10210000
 8002838:	10120000 	.word	0x10120000
 800283c:	10110000 	.word	0x10110000
 8002840:	40021000 	.word	0x40021000
 8002844:	40010000 	.word	0x40010000
 8002848:	40010800 	.word	0x40010800
 800284c:	40010c00 	.word	0x40010c00
 8002850:	40011000 	.word	0x40011000
 8002854:	40011400 	.word	0x40011400
 8002858:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_GPIO_Init+0x304>)
 800285e:	68da      	ldr	r2, [r3, #12]
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	43db      	mvns	r3, r3
 8002864:	4909      	ldr	r1, [pc, #36]	; (800288c <HAL_GPIO_Init+0x304>)
 8002866:	4013      	ands	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	3301      	adds	r3, #1
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	fa22 f303 	lsr.w	r3, r2, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	f47f ae8e 	bne.w	800259c <HAL_GPIO_Init+0x14>
  }
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	372c      	adds	r7, #44	; 0x2c
 8002886:	46bd      	mov	sp, r7
 8002888:	bc80      	pop	{r7}
 800288a:	4770      	bx	lr
 800288c:	40010400 	.word	0x40010400

08002890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	807b      	strh	r3, [r7, #2]
 800289c:	4613      	mov	r3, r2
 800289e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028a0:	787b      	ldrb	r3, [r7, #1]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ac:	e003      	b.n	80028b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	041a      	lsls	r2, r3, #16
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr

080028c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4013      	ands	r3, r2
 80028d8:	041a      	lsls	r2, r3, #16
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43d9      	mvns	r1, r3
 80028de:	887b      	ldrh	r3, [r7, #2]
 80028e0:	400b      	ands	r3, r1
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	611a      	str	r2, [r3, #16]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f4:	b08b      	sub	sp, #44	; 0x2c
 80028f6:	af06      	add	r7, sp, #24
 80028f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0fd      	b.n	8002b00 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d106      	bne.n	800291e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f008 f83f 	bl	800a99c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f003 fd2d 	bl	800638a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	603b      	str	r3, [r7, #0]
 8002936:	687e      	ldr	r6, [r7, #4]
 8002938:	466d      	mov	r5, sp
 800293a:	f106 0410 	add.w	r4, r6, #16
 800293e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002940:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002942:	6823      	ldr	r3, [r4, #0]
 8002944:	602b      	str	r3, [r5, #0]
 8002946:	1d33      	adds	r3, r6, #4
 8002948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294a:	6838      	ldr	r0, [r7, #0]
 800294c:	f003 fcf7 	bl	800633e <USB_CoreInit>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e0ce      	b.n	8002b00 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f003 fd28 	bl	80063be <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296e:	2300      	movs	r3, #0
 8002970:	73fb      	strb	r3, [r7, #15]
 8002972:	e04c      	b.n	8002a0e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	440b      	add	r3, r1
 8002984:	3301      	adds	r3, #1
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	1c5a      	adds	r2, r3, #1
 8002990:	4613      	mov	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	7bfa      	ldrb	r2, [r7, #15]
 800299c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800299e:	7bfa      	ldrb	r2, [r7, #15]
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	b298      	uxth	r0, r3
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3336      	adds	r3, #54	; 0x36
 80029b2:	4602      	mov	r2, r0
 80029b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3303      	adds	r3, #3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	3338      	adds	r3, #56	; 0x38
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	333c      	adds	r3, #60	; 0x3c
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3340      	adds	r3, #64	; 0x40
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	7bfa      	ldrb	r2, [r7, #15]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3ad      	bcc.n	8002974 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e044      	b.n	8002aa8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3b5      	bcc.n	8002a1e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	603b      	str	r3, [r7, #0]
 8002ab8:	687e      	ldr	r6, [r7, #4]
 8002aba:	466d      	mov	r5, sp
 8002abc:	f106 0410 	add.w	r4, r6, #16
 8002ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	602b      	str	r3, [r5, #0]
 8002ac8:	1d33      	adds	r3, r6, #4
 8002aca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002acc:	6838      	ldr	r0, [r7, #0]
 8002ace:	f003 fc82 	bl	80063d6 <USB_DevInit>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e00d      	b.n	8002b00 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f006 f935 	bl	8008d68 <USB_DevDisconnect>

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Start+0x16>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e016      	b.n	8002b4c <HAL_PCD_Start+0x44>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f003 fc17 	bl	800635e <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b30:	2101      	movs	r1, #1
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f008 f9a5 	bl	800ae82 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f006 f909 	bl	8008d54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f006 f90b 	bl	8008d7c <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b70:	d102      	bne.n	8002b78 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 fb5f 	bl	8003236 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f006 f8fd 	bl	8008d7c <USB_ReadInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8c:	d112      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f007 ff73 	bl	800aa92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bac:	2100      	movs	r1, #0
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f923 	bl	8002dfa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f006 f8df 	bl	8008d7c <USB_ReadInterrupts>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bc8:	d10b      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002bdc:	b292      	uxth	r2, r2
 8002bde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f006 f8c8 	bl	8008d7c <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf6:	d10b      	bne.n	8002c10 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f006 f8b1 	bl	8008d7c <USB_ReadInterrupts>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c24:	d126      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0204 	bic.w	r2, r2, #4
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0208 	bic.w	r2, r2, #8
 8002c50:	b292      	uxth	r2, r2
 8002c52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f007 ff54 	bl	800ab04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c6e:	b292      	uxth	r2, r2
 8002c70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f006 f87f 	bl	8008d7c <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c88:	f040 8082 	bne.w	8002d90 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]
 8002c90:	e010      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	7ffb      	ldrb	r3, [r7, #31]
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	441a      	add	r2, r3
 8002c9e:	7ffb      	ldrb	r3, [r7, #31]
 8002ca0:	8812      	ldrh	r2, [r2, #0]
 8002ca2:	b292      	uxth	r2, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	3320      	adds	r3, #32
 8002ca8:	443b      	add	r3, r7
 8002caa:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002cae:	7ffb      	ldrb	r3, [r7, #31]
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	77fb      	strb	r3, [r7, #31]
 8002cb4:	7ffb      	ldrb	r3, [r7, #31]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d9eb      	bls.n	8002c92 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0201 	orr.w	r2, r2, #1
 8002ccc:	b292      	uxth	r2, r2
 8002cce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	b292      	uxth	r2, r2
 8002ce6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002cea:	bf00      	nop
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f6      	beq.n	8002cec <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d10:	b292      	uxth	r2, r2
 8002d12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e00f      	b.n	8002d3c <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002d1c:	7ffb      	ldrb	r3, [r7, #31]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	4611      	mov	r1, r2
 8002d24:	7ffa      	ldrb	r2, [r7, #31]
 8002d26:	0092      	lsls	r2, r2, #2
 8002d28:	440a      	add	r2, r1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	3320      	adds	r3, #32
 8002d2e:	443b      	add	r3, r7
 8002d30:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002d34:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002d36:	7ffb      	ldrb	r3, [r7, #31]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	7ffb      	ldrb	r3, [r7, #31]
 8002d3e:	2b07      	cmp	r3, #7
 8002d40:	d9ec      	bls.n	8002d1c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0208 	orr.w	r2, r2, #8
 8002d54:	b292      	uxth	r2, r2
 8002d56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d6c:	b292      	uxth	r2, r2
 8002d6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002d7a:	b29a      	uxth	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0204 	orr.w	r2, r2, #4
 8002d84:	b292      	uxth	r2, r2
 8002d86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f007 fea0 	bl	800aad0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 fff1 	bl	8008d7c <USB_ReadInterrupts>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da4:	d10e      	bne.n	8002dc4 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002db8:	b292      	uxth	r2, r2
 8002dba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f007 fe59 	bl	800aa76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 ffd7 	bl	8008d7c <USB_ReadInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd8:	d10b      	bne.n	8002df2 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dec:	b292      	uxth	r2, r2
 8002dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002df2:	bf00      	nop
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
 8002e02:	460b      	mov	r3, r1
 8002e04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d101      	bne.n	8002e14 <HAL_PCD_SetAddress+0x1a>
 8002e10:	2302      	movs	r3, #2
 8002e12:	e013      	b.n	8002e3c <HAL_PCD_SetAddress+0x42>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f005 ff7e 	bl	8008d2e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	4611      	mov	r1, r2
 8002e50:	461a      	mov	r2, r3
 8002e52:	4603      	mov	r3, r0
 8002e54:	70fb      	strb	r3, [r7, #3]
 8002e56:	460b      	mov	r3, r1
 8002e58:	803b      	strh	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	da0e      	bge.n	8002e88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	4613      	mov	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	705a      	strb	r2, [r3, #1]
 8002e86:	e00e      	b.n	8002ea6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	f003 0207 	and.w	r2, r3, #7
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea6:	78fb      	ldrb	r3, [r7, #3]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002eb2:	883a      	ldrh	r2, [r7, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	78ba      	ldrb	r2, [r7, #2]
 8002ebc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d004      	beq.n	8002ed0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ed0:	78bb      	ldrb	r3, [r7, #2]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d102      	bne.n	8002edc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_PCD_EP_Open+0xa6>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e00e      	b.n	8002f08 <HAL_PCD_EP_Open+0xc4>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68f9      	ldr	r1, [r7, #12]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f003 fa8d 	bl	8006418 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002f06:	7afb      	ldrb	r3, [r7, #11]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	da0e      	bge.n	8002f42 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f24:	78fb      	ldrb	r3, [r7, #3]
 8002f26:	f003 0307 	and.w	r3, r3, #7
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	705a      	strb	r2, [r3, #1]
 8002f40:	e00e      	b.n	8002f60 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 0207 	and.w	r2, r3, #7
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_PCD_EP_Close+0x6a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e00e      	b.n	8002f98 <HAL_PCD_EP_Close+0x88>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fdaf 	bl	8006aec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
 8002fac:	460b      	mov	r3, r1
 8002fae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb0:	7afb      	ldrb	r3, [r7, #11]
 8002fb2:	f003 0207 	and.w	r2, r3, #7
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fec:	7afb      	ldrb	r3, [r7, #11]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6979      	ldr	r1, [r7, #20]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 ff61 	bl	8006ec4 <USB_EPStartXfer>
 8003002:	e005      	b.n	8003010 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6979      	ldr	r1, [r7, #20]
 800300a:	4618      	mov	r0, r3
 800300c:	f003 ff5a 	bl	8006ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 0207 	and.w	r2, r3, #7
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800303c:	681b      	ldr	r3, [r3, #0]
}
 800303e:	4618      	mov	r0, r3
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bc80      	pop	{r7}
 8003046:	4770      	bx	lr

08003048 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	607a      	str	r2, [r7, #4]
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	460b      	mov	r3, r1
 8003056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	4413      	add	r3, r2
 800306c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	2200      	movs	r2, #0
 800308c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2201      	movs	r2, #1
 8003092:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003094:	7afb      	ldrb	r3, [r7, #11]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	b2da      	uxtb	r2, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030a0:	7afb      	ldrb	r3, [r7, #11]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d106      	bne.n	80030b8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6979      	ldr	r1, [r7, #20]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 ff07 	bl	8006ec4 <USB_EPStartXfer>
 80030b6:	e005      	b.n	80030c4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6979      	ldr	r1, [r7, #20]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 ff00 	bl	8006ec4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	460b      	mov	r3, r1
 80030d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	f003 0207 	and.w	r2, r3, #7
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d901      	bls.n	80030ec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04c      	b.n	8003186 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	da0e      	bge.n	8003112 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	705a      	strb	r2, [r3, #1]
 8003110:	e00c      	b.n	800312c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003132:	78fb      	ldrb	r3, [r7, #3]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_PCD_EP_SetStall+0x7e>
 8003148:	2302      	movs	r3, #2
 800314a:	e01c      	b.n	8003186 <HAL_PCD_EP_SetStall+0xb8>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68f9      	ldr	r1, [r7, #12]
 800315a:	4618      	mov	r0, r3
 800315c:	f005 fcea 	bl	8008b34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f005 fe0f 	bl	8008d9a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
 8003196:	460b      	mov	r3, r1
 8003198:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800319a:	78fb      	ldrb	r3, [r7, #3]
 800319c:	f003 020f 	and.w	r2, r3, #15
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d901      	bls.n	80031ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e040      	b.n	800322e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da0e      	bge.n	80031d2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	705a      	strb	r2, [r3, #1]
 80031d0:	e00e      	b.n	80031f0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	f003 0207 	and.w	r2, r3, #7
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003208:	2b01      	cmp	r3, #1
 800320a:	d101      	bne.n	8003210 <HAL_PCD_EP_ClrStall+0x82>
 800320c:	2302      	movs	r3, #2
 800320e:	e00e      	b.n	800322e <HAL_PCD_EP_ClrStall+0xa0>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68f9      	ldr	r1, [r7, #12]
 800321e:	4618      	mov	r0, r3
 8003220:	f005 fcd8 	bl	8008bd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b08e      	sub	sp, #56	; 0x38
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800323e:	e2ec      	b.n	800381a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003248:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800324a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8003256:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800325a:	2b00      	cmp	r3, #0
 800325c:	f040 8161 	bne.w	8003522 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003260:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	2b00      	cmp	r3, #0
 8003268:	d152      	bne.n	8003310 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327a:	81fb      	strh	r3, [r7, #14]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3328      	adds	r3, #40	; 0x28
 8003292:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800329c:	b29b      	uxth	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	3302      	adds	r3, #2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	695a      	ldr	r2, [r3, #20]
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	441a      	add	r2, r3
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80032ce:	2100      	movs	r1, #0
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f007 fbb6 	bl	800aa42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 829b 	beq.w	800381a <PCD_EP_ISR_Handler+0x5e4>
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f040 8296 	bne.w	800381a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	b292      	uxth	r2, r2
 8003302:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800330e:	e284      	b.n	800381a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	881b      	ldrh	r3, [r3, #0]
 800331e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003320:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003326:	2b00      	cmp	r3, #0
 8003328:	d034      	beq.n	8003394 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003332:	b29b      	uxth	r3, r3
 8003334:	461a      	mov	r2, r3
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4413      	add	r3, r2
 800333e:	3306      	adds	r3, #6
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800334c:	881b      	ldrh	r3, [r3, #0]
 800334e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6818      	ldr	r0, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003368:	b29b      	uxth	r3, r3
 800336a:	f005 fd66 	bl	8008e3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	f640 738f 	movw	r3, #3983	; 0xf8f
 800337a:	4013      	ands	r3, r2
 800337c:	823b      	strh	r3, [r7, #16]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	8a3a      	ldrh	r2, [r7, #16]
 8003384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003388:	b292      	uxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f007 fb2b 	bl	800a9e8 <HAL_PCD_SetupStageCallback>
 8003392:	e242      	b.n	800381a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003394:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003398:	2b00      	cmp	r3, #0
 800339a:	f280 823e 	bge.w	800381a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80033aa:	4013      	ands	r3, r2
 80033ac:	83bb      	strh	r3, [r7, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	8bba      	ldrh	r2, [r7, #28]
 80033b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033b8:	b292      	uxth	r2, r2
 80033ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4413      	add	r3, r2
 80033d0:	3306      	adds	r3, #6
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6812      	ldr	r2, [r2, #0]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80033e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d019      	beq.n	8003424 <PCD_EP_ISR_Handler+0x1ee>
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	6959      	ldr	r1, [r3, #20]
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003408:	b29b      	uxth	r3, r3
 800340a:	f005 fd16 	bl	8008e3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	695a      	ldr	r2, [r3, #20]
 8003412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	441a      	add	r2, r3
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800341c:	2100      	movs	r1, #0
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f007 faf4 	bl	800aa0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	b29b      	uxth	r3, r3
 800342c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003430:	2b00      	cmp	r3, #0
 8003432:	f040 81f2 	bne.w	800381a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003444:	b29b      	uxth	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	4413      	add	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d112      	bne.n	8003484 <PCD_EP_ISR_Handler+0x24e>
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003468:	b29a      	uxth	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347c:	b29a      	uxth	r2, r3
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	801a      	strh	r2, [r3, #0]
 8003482:	e02f      	b.n	80034e4 <PCD_EP_ISR_Handler+0x2ae>
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b3e      	cmp	r3, #62	; 0x3e
 800348a:	d813      	bhi.n	80034b4 <PCD_EP_ISR_Handler+0x27e>
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	085b      	lsrs	r3, r3, #1
 8003492:	633b      	str	r3, [r7, #48]	; 0x30
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <PCD_EP_ISR_Handler+0x270>
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	3301      	adds	r3, #1
 80034a4:	633b      	str	r3, [r7, #48]	; 0x30
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	029b      	lsls	r3, r3, #10
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	e017      	b.n	80034e4 <PCD_EP_ISR_Handler+0x2ae>
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d102      	bne.n	80034ce <PCD_EP_ISR_Handler+0x298>
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	3b01      	subs	r3, #1
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
 80034ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	029b      	lsls	r3, r3, #10
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034de:	b29a      	uxth	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	881b      	ldrh	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034f4:	827b      	strh	r3, [r7, #18]
 80034f6:	8a7b      	ldrh	r3, [r7, #18]
 80034f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80034fc:	827b      	strh	r3, [r7, #18]
 80034fe:	8a7b      	ldrh	r3, [r7, #18]
 8003500:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003504:	827b      	strh	r3, [r7, #18]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	8a7b      	ldrh	r3, [r7, #18]
 800350c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351c:	b29b      	uxth	r3, r3
 800351e:	8013      	strh	r3, [r2, #0]
 8003520:	e17b      	b.n	800381a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4413      	add	r3, r2
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003534:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003538:	2b00      	cmp	r3, #0
 800353a:	f280 80ea 	bge.w	8003712 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29a      	uxth	r2, r3
 8003550:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003554:	4013      	ands	r3, r2
 8003556:	853b      	strh	r3, [r7, #40]	; 0x28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800356c:	b292      	uxth	r2, r2
 800356e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003570:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	4413      	add	r3, r2
 8003584:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	7b1b      	ldrb	r3, [r3, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d122      	bne.n	80035d4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003596:	b29b      	uxth	r3, r3
 8003598:	461a      	mov	r2, r3
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	3306      	adds	r3, #6
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80035b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f000 8087 	beq.w	80036ce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6818      	ldr	r0, [r3, #0]
 80035c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c6:	6959      	ldr	r1, [r3, #20]
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	88da      	ldrh	r2, [r3, #6]
 80035cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80035ce:	f005 fc34 	bl	8008e3a <USB_ReadPMA>
 80035d2:	e07c      	b.n	80036ce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	78db      	ldrb	r3, [r3, #3]
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d108      	bne.n	80035ee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80035dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035de:	461a      	mov	r2, r3
 80035e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f927 	bl	8003836 <HAL_PCD_EP_DB_Receive>
 80035e8:	4603      	mov	r3, r0
 80035ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80035ec:	e06f      	b.n	80036ce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	4413      	add	r3, r2
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003608:	847b      	strh	r3, [r7, #34]	; 0x22
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	461a      	mov	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	441a      	add	r2, r3
 8003618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800361a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800361e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800362a:	b29b      	uxth	r3, r3
 800362c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d021      	beq.n	800368c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003650:	b29b      	uxth	r3, r3
 8003652:	461a      	mov	r2, r3
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	4413      	add	r3, r2
 800365c:	3302      	adds	r3, #2
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003670:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003674:	2b00      	cmp	r3, #0
 8003676:	d02a      	beq.n	80036ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	6959      	ldr	r1, [r3, #20]
 8003680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003682:	891a      	ldrh	r2, [r3, #8]
 8003684:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003686:	f005 fbd8 	bl	8008e3a <USB_ReadPMA>
 800368a:	e020      	b.n	80036ce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4413      	add	r3, r2
 80036a0:	3306      	adds	r3, #6
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80036b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d008      	beq.n	80036ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c2:	6959      	ldr	r1, [r3, #20]
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	895a      	ldrh	r2, [r3, #10]
 80036c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036ca:	f005 fbb6 	bl	8008e3a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80036ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036d4:	441a      	add	r2, r3
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80036e0:	441a      	add	r2, r3
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <PCD_EP_ISR_Handler+0x4c2>
 80036ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d206      	bcs.n	8003706 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	4619      	mov	r1, r3
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f007 f984 	bl	800aa0c <HAL_PCD_DataOutStageCallback>
 8003704:	e005      	b.n	8003712 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370c:	4618      	mov	r0, r3
 800370e:	f003 fbd9 	bl	8006ec4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d07e      	beq.n	800381a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800371c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	843b      	strh	r3, [r7, #32]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	441a      	add	r2, r3
 800375a:	8c3b      	ldrh	r3, [r7, #32]
 800375c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003760:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003764:	b29b      	uxth	r3, r3
 8003766:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	78db      	ldrb	r3, [r3, #3]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d00c      	beq.n	800378a <PCD_EP_ISR_Handler+0x554>
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	78db      	ldrb	r3, [r3, #3]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800377c:	2b02      	cmp	r3, #2
 800377e:	d146      	bne.n	800380e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003780:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d141      	bne.n	800380e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003792:	b29b      	uxth	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	3302      	adds	r3, #2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	699a      	ldr	r2, [r3, #24]
 80037b8:	8bfb      	ldrh	r3, [r7, #30]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d906      	bls.n	80037cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80037be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c0:	699a      	ldr	r2, [r3, #24]
 80037c2:	8bfb      	ldrh	r3, [r7, #30]
 80037c4:	1ad2      	subs	r2, r2, r3
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	619a      	str	r2, [r3, #24]
 80037ca:	e002      	b.n	80037d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	699b      	ldr	r3, [r3, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	4619      	mov	r1, r3
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f007 f92e 	bl	800aa42 <HAL_PCD_DataInStageCallback>
 80037e6:	e018      	b.n	800381a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	695a      	ldr	r2, [r3, #20]
 80037ec:	8bfb      	ldrh	r3, [r7, #30]
 80037ee:	441a      	add	r2, r3
 80037f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	69da      	ldr	r2, [r3, #28]
 80037f8:	8bfb      	ldrh	r3, [r7, #30]
 80037fa:	441a      	add	r2, r3
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003806:	4618      	mov	r0, r3
 8003808:	f003 fb5c 	bl	8006ec4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800380c:	e005      	b.n	800381a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800380e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003810:	461a      	mov	r2, r3
 8003812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 f91b 	bl	8003a50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003822:	b29b      	uxth	r3, r3
 8003824:	b21b      	sxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	f6ff ad0a 	blt.w	8003240 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800382c:	2300      	movs	r3, #0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3738      	adds	r7, #56	; 0x38
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b088      	sub	sp, #32
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003844:	88fb      	ldrh	r3, [r7, #6]
 8003846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d07e      	beq.n	800394c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	3302      	adds	r3, #2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003876:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	699a      	ldr	r2, [r3, #24]
 800387c:	8b7b      	ldrh	r3, [r7, #26]
 800387e:	429a      	cmp	r2, r3
 8003880:	d306      	bcc.n	8003890 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	8b7b      	ldrh	r3, [r7, #26]
 8003888:	1ad2      	subs	r2, r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	e002      	b.n	8003896 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2200      	movs	r2, #0
 8003894:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d123      	bne.n	80038e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	461a      	mov	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	881b      	ldrh	r3, [r3, #0]
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b8:	833b      	strh	r3, [r7, #24]
 80038ba:	8b3b      	ldrh	r3, [r7, #24]
 80038bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80038c0:	833b      	strh	r3, [r7, #24]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	461a      	mov	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	441a      	add	r2, r3
 80038d0:	8b3b      	ldrh	r3, [r7, #24]
 80038d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d01f      	beq.n	8003930 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	461a      	mov	r2, r3
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	b29b      	uxth	r3, r3
 8003902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800390a:	82fb      	strh	r3, [r7, #22]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	441a      	add	r2, r3
 800391a:	8afb      	ldrh	r3, [r7, #22]
 800391c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800392c:	b29b      	uxth	r3, r3
 800392e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003930:	8b7b      	ldrh	r3, [r7, #26]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 8087 	beq.w	8003a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6818      	ldr	r0, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	6959      	ldr	r1, [r3, #20]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	891a      	ldrh	r2, [r3, #8]
 8003944:	8b7b      	ldrh	r3, [r7, #26]
 8003946:	f005 fa78 	bl	8008e3a <USB_ReadPMA>
 800394a:	e07c      	b.n	8003a46 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003954:	b29b      	uxth	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	3306      	adds	r3, #6
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003974:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	8b7b      	ldrh	r3, [r7, #26]
 800397c:	429a      	cmp	r2, r3
 800397e:	d306      	bcc.n	800398e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	699a      	ldr	r2, [r3, #24]
 8003984:	8b7b      	ldrh	r3, [r7, #26]
 8003986:	1ad2      	subs	r2, r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	619a      	str	r2, [r3, #24]
 800398c:	e002      	b.n	8003994 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2200      	movs	r2, #0
 8003992:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d123      	bne.n	80039e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	881b      	ldrh	r3, [r3, #0]
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b6:	83fb      	strh	r3, [r7, #30]
 80039b8:	8bfb      	ldrh	r3, [r7, #30]
 80039ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039be:	83fb      	strh	r3, [r7, #30]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	441a      	add	r2, r3
 80039ce:	8bfb      	ldrh	r3, [r7, #30]
 80039d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d11f      	bne.n	8003a2e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	461a      	mov	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a08:	83bb      	strh	r3, [r7, #28]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	441a      	add	r2, r3
 8003a18:	8bbb      	ldrh	r3, [r7, #28]
 8003a1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a2e:	8b7b      	ldrh	r3, [r7, #26]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	6959      	ldr	r1, [r3, #20]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	895a      	ldrh	r2, [r3, #10]
 8003a40:	8b7b      	ldrh	r3, [r7, #26]
 8003a42:	f005 f9fa 	bl	8008e3a <USB_ReadPMA>
    }
  }

  return count;
 8003a46:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0a2      	sub	sp, #136	; 0x88
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 81c7 	beq.w	8003df8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3302      	adds	r3, #2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	6812      	ldr	r2, [r2, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d907      	bls.n	8003ab2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aaa:	1ad2      	subs	r2, r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	619a      	str	r2, [r3, #24]
 8003ab0:	e002      	b.n	8003ab8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f040 80b9 	bne.w	8003c34 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	785b      	ldrb	r3, [r3, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d126      	bne.n	8003b18 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	461a      	mov	r2, r3
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	4413      	add	r3, r2
 8003ae0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	011a      	lsls	r2, r3, #4
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	4413      	add	r3, r2
 8003aec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003af0:	627b      	str	r3, [r7, #36]	; 0x24
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	801a      	strh	r2, [r3, #0]
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	881b      	ldrh	r3, [r3, #0]
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	e01a      	b.n	8003b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	785b      	ldrb	r3, [r3, #1]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d116      	bne.n	8003b4e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	633b      	str	r3, [r7, #48]	; 0x30
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	4413      	add	r3, r2
 8003b36:	633b      	str	r3, [r7, #48]	; 0x30
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	011a      	lsls	r2, r3, #4
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	4413      	add	r3, r2
 8003b42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	785b      	ldrb	r3, [r3, #1]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d126      	bne.n	8003baa <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	4413      	add	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	011a      	lsls	r2, r3, #4
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	801a      	strh	r2, [r3, #0]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	881b      	ldrh	r3, [r3, #0]
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	801a      	strh	r2, [r3, #0]
 8003ba8:	e017      	b.n	8003bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d113      	bne.n	8003bda <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	623b      	str	r3, [r7, #32]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	011a      	lsls	r2, r3, #4
 8003bca:	6a3b      	ldr	r3, [r7, #32]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	4619      	mov	r1, r3
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f006 ff2e 	bl	800aa42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003be6:	88fb      	ldrh	r3, [r7, #6]
 8003be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f000 82d4 	beq.w	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0c:	827b      	strh	r3, [r7, #18]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	441a      	add	r2, r3
 8003c1c:	8a7b      	ldrh	r3, [r7, #18]
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
 8003c32:	e2b2      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c34:	88fb      	ldrh	r3, [r7, #6]
 8003c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d021      	beq.n	8003c82 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	461a      	mov	r2, r3
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	441a      	add	r2, r3
 8003c6a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	f040 8286 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	695a      	ldr	r2, [r3, #20]
 8003c92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c96:	441a      	add	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	69da      	ldr	r2, [r3, #28]
 8003ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ca4:	441a      	add	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d309      	bcc.n	8003cca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	6a1a      	ldr	r2, [r3, #32]
 8003cc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	621a      	str	r2, [r3, #32]
 8003cc8:	e015      	b.n	8003cf6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d107      	bne.n	8003ce2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003cd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003cd6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ce0:	e009      	b.n	8003cf6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	785b      	ldrb	r3, [r3, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d155      	bne.n	8003daa <HAL_PCD_EP_DB_Transmit+0x35a>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	4413      	add	r3, r2
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	011a      	lsls	r2, r3, #4
 8003d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1e:	4413      	add	r3, r2
 8003d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d112      	bne.n	8003d52 <HAL_PCD_EP_DB_Transmit+0x302>
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	881b      	ldrh	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	801a      	strh	r2, [r3, #0]
 8003d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	801a      	strh	r2, [r3, #0]
 8003d50:	e047      	b.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d54:	2b3e      	cmp	r3, #62	; 0x3e
 8003d56:	d811      	bhi.n	8003d7c <HAL_PCD_EP_DB_Transmit+0x32c>
 8003d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_PCD_EP_DB_Transmit+0x31e>
 8003d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	029b      	lsls	r3, r3, #10
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	e032      	b.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d84:	f003 031f 	and.w	r3, r3, #31
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <HAL_PCD_EP_DB_Transmit+0x342>
 8003d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	e01b      	b.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d117      	bne.n	8003de2 <HAL_PCD_EP_DB_Transmit+0x392>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	4413      	add	r3, r2
 8003dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	011a      	lsls	r2, r3, #4
 8003dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6959      	ldr	r1, [r3, #20]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	891a      	ldrh	r2, [r3, #8]
 8003dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f004 ffdd 	bl	8008db0 <USB_WritePMA>
 8003df6:	e1d0      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3306      	adds	r3, #6
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e1a:	881b      	ldrh	r3, [r3, #0]
 8003e1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d307      	bcc.n	8003e40 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	699a      	ldr	r2, [r3, #24]
 8003e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e38:	1ad2      	subs	r2, r2, r3
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	619a      	str	r2, [r3, #24]
 8003e3e:	e002      	b.n	8003e46 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2200      	movs	r2, #0
 8003e44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 80c4 	bne.w	8003fd8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	785b      	ldrb	r3, [r3, #1]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d126      	bne.n	8003ea6 <HAL_PCD_EP_DB_Transmit+0x456>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6c:	4413      	add	r3, r2
 8003e6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	011a      	lsls	r2, r3, #4
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	4413      	add	r3, r2
 8003e7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e8e:	801a      	strh	r2, [r3, #0]
 8003e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e92:	881b      	ldrh	r3, [r3, #0]
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003ea2:	801a      	strh	r2, [r3, #0]
 8003ea4:	e01a      	b.n	8003edc <HAL_PCD_EP_DB_Transmit+0x48c>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d116      	bne.n	8003edc <HAL_PCD_EP_DB_Transmit+0x48c>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	677b      	str	r3, [r7, #116]	; 0x74
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec2:	4413      	add	r3, r2
 8003ec4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	011a      	lsls	r2, r3, #4
 8003ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ece:	4413      	add	r3, r2
 8003ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ed4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed8:	2200      	movs	r2, #0
 8003eda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d12f      	bne.n	8003f4a <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	461a      	mov	r2, r3
 8003efe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f02:	4413      	add	r3, r2
 8003f04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	011a      	lsls	r2, r3, #4
 8003f0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f12:	4413      	add	r3, r2
 8003f14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f20:	881b      	ldrh	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f2e:	801a      	strh	r2, [r3, #0]
 8003f30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f46:	801a      	strh	r2, [r3, #0]
 8003f48:	e017      	b.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	785b      	ldrb	r3, [r3, #1]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d113      	bne.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f60:	4413      	add	r3, r2
 8003f62:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	011a      	lsls	r2, r3, #4
 8003f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f76:	2200      	movs	r2, #0
 8003f78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f006 fd5e 	bl	800aa42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f86:	88fb      	ldrh	r3, [r7, #6]
 8003f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f040 8104 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	881b      	ldrh	r3, [r3, #0]
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	8013      	strh	r3, [r2, #0]
 8003fd6:	e0e0      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fd8:	88fb      	ldrh	r3, [r7, #6]
 8003fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d121      	bne.n	8004026 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	881b      	ldrh	r3, [r3, #0]
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	441a      	add	r2, r3
 800400e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800401a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800401e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004022:	b29b      	uxth	r3, r3
 8004024:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800402c:	2b01      	cmp	r3, #1
 800402e:	f040 80b4 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800403a:	441a      	add	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	69da      	ldr	r2, [r3, #28]
 8004044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004048:	441a      	add	r2, r3
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d309      	bcc.n	800406e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	621a      	str	r2, [r3, #32]
 800406c:	e015      	b.n	800409a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d107      	bne.n	8004086 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8004076:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800407a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004084:	e009      	b.n	800409a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	2200      	movs	r2, #0
 8004090:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	667b      	str	r3, [r7, #100]	; 0x64
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d155      	bne.n	8004154 <HAL_PCD_EP_DB_Transmit+0x704>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040bc:	4413      	add	r3, r2
 80040be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	011a      	lsls	r2, r3, #4
 80040c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c8:	4413      	add	r3, r2
 80040ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80040ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80040d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d112      	bne.n	80040fc <HAL_PCD_EP_DB_Transmit+0x6ac>
 80040d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040d8:	881b      	ldrh	r3, [r3, #0]
 80040da:	b29b      	uxth	r3, r3
 80040dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e4:	801a      	strh	r2, [r3, #0]
 80040e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040e8:	881b      	ldrh	r3, [r3, #0]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e044      	b.n	8004186 <HAL_PCD_EP_DB_Transmit+0x736>
 80040fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040fe:	2b3e      	cmp	r3, #62	; 0x3e
 8004100:	d811      	bhi.n	8004126 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	657b      	str	r3, [r7, #84]	; 0x54
 8004108:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8004112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004114:	3301      	adds	r3, #1
 8004116:	657b      	str	r3, [r7, #84]	; 0x54
 8004118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411a:	b29b      	uxth	r3, r3
 800411c:	029b      	lsls	r3, r3, #10
 800411e:	b29a      	uxth	r2, r3
 8004120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004122:	801a      	strh	r2, [r3, #0]
 8004124:	e02f      	b.n	8004186 <HAL_PCD_EP_DB_Transmit+0x736>
 8004126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	657b      	str	r3, [r7, #84]	; 0x54
 800412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	2b00      	cmp	r3, #0
 8004134:	d102      	bne.n	800413c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8004136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004138:	3b01      	subs	r3, #1
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
 800413c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800413e:	b29b      	uxth	r3, r3
 8004140:	029b      	lsls	r3, r3, #10
 8004142:	b29b      	uxth	r3, r3
 8004144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800414c:	b29a      	uxth	r2, r3
 800414e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004150:	801a      	strh	r2, [r3, #0]
 8004152:	e018      	b.n	8004186 <HAL_PCD_EP_DB_Transmit+0x736>
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d114      	bne.n	8004186 <HAL_PCD_EP_DB_Transmit+0x736>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004164:	b29b      	uxth	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416a:	4413      	add	r3, r2
 800416c:	667b      	str	r3, [r7, #100]	; 0x64
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	011a      	lsls	r2, r3, #4
 8004174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004176:	4413      	add	r3, r2
 8004178:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800417c:	663b      	str	r3, [r7, #96]	; 0x60
 800417e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004180:	b29a      	uxth	r2, r3
 8004182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004184:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6959      	ldr	r1, [r3, #20]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	895a      	ldrh	r2, [r3, #10]
 8004192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	f004 fe0b 	bl	8008db0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041b4:	823b      	strh	r3, [r7, #16]
 80041b6:	8a3b      	ldrh	r3, [r7, #16]
 80041b8:	f083 0310 	eor.w	r3, r3, #16
 80041bc:	823b      	strh	r3, [r7, #16]
 80041be:	8a3b      	ldrh	r3, [r7, #16]
 80041c0:	f083 0320 	eor.w	r3, r3, #32
 80041c4:	823b      	strh	r3, [r7, #16]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	8a3b      	ldrh	r3, [r7, #16]
 80041d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3788      	adds	r7, #136	; 0x88
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	817b      	strh	r3, [r7, #10]
 8004202:	4613      	mov	r3, r2
 8004204:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e009      	b.n	800423e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800422a:	897a      	ldrh	r2, [r7, #10]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	b29a      	uxth	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	80da      	strh	r2, [r3, #6]
 8004252:	e00b      	b.n	800426c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2201      	movs	r2, #1
 8004258:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	b29a      	uxth	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b29a      	uxth	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	bc80      	pop	{r7}
 8004276:	4770      	bx	lr

08004278 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e272      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8087 	beq.w	80043a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004298:	4b92      	ldr	r3, [pc, #584]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f003 030c 	and.w	r3, r3, #12
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d00c      	beq.n	80042be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042a4:	4b8f      	ldr	r3, [pc, #572]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d112      	bne.n	80042d6 <HAL_RCC_OscConfig+0x5e>
 80042b0:	4b8c      	ldr	r3, [pc, #560]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042be:	4b89      	ldr	r3, [pc, #548]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d06c      	beq.n	80043a4 <HAL_RCC_OscConfig+0x12c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d168      	bne.n	80043a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e24c      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x76>
 80042e0:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a7f      	ldr	r2, [pc, #508]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e02e      	b.n	800434c <HAL_RCC_OscConfig+0xd4>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x98>
 80042f6:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7a      	ldr	r2, [pc, #488]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b78      	ldr	r3, [pc, #480]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a77      	ldr	r2, [pc, #476]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xd4>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0xbc>
 800431a:	4b72      	ldr	r3, [pc, #456]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a71      	ldr	r2, [pc, #452]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6e      	ldr	r2, [pc, #440]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xd4>
 8004334:	4b6b      	ldr	r3, [pc, #428]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a6a      	ldr	r2, [pc, #424]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b68      	ldr	r3, [pc, #416]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a67      	ldr	r2, [pc, #412]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fd ffdc 	bl	8002310 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fd ffd8 	bl	8002310 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	; 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e200      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800436e:	4b5d      	ldr	r3, [pc, #372]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xe4>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7fd ffc8 	bl	8002310 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fd ffc4 	bl	8002310 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1ec      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004396:	4b53      	ldr	r3, [pc, #332]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x10c>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d063      	beq.n	800447a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043b2:	4b4c      	ldr	r3, [pc, #304]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00b      	beq.n	80043d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043be:	4b49      	ldr	r3, [pc, #292]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d11c      	bne.n	8004404 <HAL_RCC_OscConfig+0x18c>
 80043ca:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d116      	bne.n	8004404 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d005      	beq.n	80043ee <HAL_RCC_OscConfig+0x176>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d001      	beq.n	80043ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e1c0      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ee:	4b3d      	ldr	r3, [pc, #244]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4939      	ldr	r1, [pc, #228]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004402:	e03a      	b.n	800447a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d020      	beq.n	800444e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800440c:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <HAL_RCC_OscConfig+0x270>)
 800440e:	2201      	movs	r2, #1
 8004410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004412:	f7fd ff7d 	bl	8002310 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800441a:	f7fd ff79 	bl	8002310 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e1a1      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800442c:	4b2d      	ldr	r3, [pc, #180]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004438:	4b2a      	ldr	r3, [pc, #168]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4927      	ldr	r1, [pc, #156]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]
 800444c:	e015      	b.n	800447a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800444e:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_RCC_OscConfig+0x270>)
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004454:	f7fd ff5c 	bl	8002310 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445c:	f7fd ff58 	bl	8002310 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e180      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f0      	bne.n	800445c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d03a      	beq.n	80044fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d019      	beq.n	80044c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_RCC_OscConfig+0x274>)
 8004490:	2201      	movs	r2, #1
 8004492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004494:	f7fd ff3c 	bl	8002310 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449c:	f7fd ff38 	bl	8002310 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e160      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ae:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <HAL_RCC_OscConfig+0x26c>)
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f000 faa6 	bl	8004a0c <RCC_Delay>
 80044c0:	e01c      	b.n	80044fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c2:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_OscConfig+0x274>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044c8:	f7fd ff22 	bl	8002310 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044ce:	e00f      	b.n	80044f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d0:	f7fd ff1e 	bl	8002310 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d908      	bls.n	80044f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e146      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	42420000 	.word	0x42420000
 80044ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f0:	4b92      	ldr	r3, [pc, #584]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	f003 0302 	and.w	r3, r3, #2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1e9      	bne.n	80044d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 80a6 	beq.w	8004656 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800450a:	2300      	movs	r3, #0
 800450c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800450e:	4b8b      	ldr	r3, [pc, #556]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10d      	bne.n	8004536 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800451a:	4b88      	ldr	r3, [pc, #544]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4a87      	ldr	r2, [pc, #540]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004524:	61d3      	str	r3, [r2, #28]
 8004526:	4b85      	ldr	r3, [pc, #532]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452e:	60bb      	str	r3, [r7, #8]
 8004530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004532:	2301      	movs	r3, #1
 8004534:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004536:	4b82      	ldr	r3, [pc, #520]	; (8004740 <HAL_RCC_OscConfig+0x4c8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453e:	2b00      	cmp	r3, #0
 8004540:	d118      	bne.n	8004574 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004542:	4b7f      	ldr	r3, [pc, #508]	; (8004740 <HAL_RCC_OscConfig+0x4c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7e      	ldr	r2, [pc, #504]	; (8004740 <HAL_RCC_OscConfig+0x4c8>)
 8004548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800454e:	f7fd fedf 	bl	8002310 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004554:	e008      	b.n	8004568 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004556:	f7fd fedb 	bl	8002310 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b64      	cmp	r3, #100	; 0x64
 8004562:	d901      	bls.n	8004568 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e103      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004568:	4b75      	ldr	r3, [pc, #468]	; (8004740 <HAL_RCC_OscConfig+0x4c8>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0f0      	beq.n	8004556 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d106      	bne.n	800458a <HAL_RCC_OscConfig+0x312>
 800457c:	4b6f      	ldr	r3, [pc, #444]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4a6e      	ldr	r2, [pc, #440]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004582:	f043 0301 	orr.w	r3, r3, #1
 8004586:	6213      	str	r3, [r2, #32]
 8004588:	e02d      	b.n	80045e6 <HAL_RCC_OscConfig+0x36e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10c      	bne.n	80045ac <HAL_RCC_OscConfig+0x334>
 8004592:	4b6a      	ldr	r3, [pc, #424]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4a69      	ldr	r2, [pc, #420]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6213      	str	r3, [r2, #32]
 800459e:	4b67      	ldr	r3, [pc, #412]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a66      	ldr	r2, [pc, #408]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f023 0304 	bic.w	r3, r3, #4
 80045a8:	6213      	str	r3, [r2, #32]
 80045aa:	e01c      	b.n	80045e6 <HAL_RCC_OscConfig+0x36e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2b05      	cmp	r3, #5
 80045b2:	d10c      	bne.n	80045ce <HAL_RCC_OscConfig+0x356>
 80045b4:	4b61      	ldr	r3, [pc, #388]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4a60      	ldr	r2, [pc, #384]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	f043 0304 	orr.w	r3, r3, #4
 80045be:	6213      	str	r3, [r2, #32]
 80045c0:	4b5e      	ldr	r3, [pc, #376]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a5d      	ldr	r2, [pc, #372]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	f043 0301 	orr.w	r3, r3, #1
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	e00b      	b.n	80045e6 <HAL_RCC_OscConfig+0x36e>
 80045ce:	4b5b      	ldr	r3, [pc, #364]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4a5a      	ldr	r2, [pc, #360]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045d4:	f023 0301 	bic.w	r3, r3, #1
 80045d8:	6213      	str	r3, [r2, #32]
 80045da:	4b58      	ldr	r3, [pc, #352]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a57      	ldr	r2, [pc, #348]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	f023 0304 	bic.w	r3, r3, #4
 80045e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d015      	beq.n	800461a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ee:	f7fd fe8f 	bl	8002310 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045f4:	e00a      	b.n	800460c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fd fe8b 	bl	8002310 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e0b1      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0ee      	beq.n	80045f6 <HAL_RCC_OscConfig+0x37e>
 8004618:	e014      	b.n	8004644 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800461a:	f7fd fe79 	bl	8002310 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004620:	e00a      	b.n	8004638 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004622:	f7fd fe75 	bl	8002310 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004630:	4293      	cmp	r3, r2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e09b      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004638:	4b40      	ldr	r3, [pc, #256]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 800463a:	6a1b      	ldr	r3, [r3, #32]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ee      	bne.n	8004622 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004644:	7dfb      	ldrb	r3, [r7, #23]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d105      	bne.n	8004656 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800464a:	4b3c      	ldr	r3, [pc, #240]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	4a3b      	ldr	r2, [pc, #236]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004654:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 8087 	beq.w	800476e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004660:	4b36      	ldr	r3, [pc, #216]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f003 030c 	and.w	r3, r3, #12
 8004668:	2b08      	cmp	r3, #8
 800466a:	d061      	beq.n	8004730 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d146      	bne.n	8004702 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004674:	4b33      	ldr	r3, [pc, #204]	; (8004744 <HAL_RCC_OscConfig+0x4cc>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fd fe49 	bl	8002310 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004682:	f7fd fe45 	bl	8002310 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e06d      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004694:	4b29      	ldr	r3, [pc, #164]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a1b      	ldr	r3, [r3, #32]
 80046a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046a8:	d108      	bne.n	80046bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	4921      	ldr	r1, [pc, #132]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046bc:	4b1f      	ldr	r3, [pc, #124]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a19      	ldr	r1, [r3, #32]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046cc:	430b      	orrs	r3, r1
 80046ce:	491b      	ldr	r1, [pc, #108]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x4cc>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fd fe19 	bl	8002310 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fd fe15 	bl	8002310 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e03d      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x46a>
 8004700:	e035      	b.n	800476e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004702:	4b10      	ldr	r3, [pc, #64]	; (8004744 <HAL_RCC_OscConfig+0x4cc>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004708:	f7fd fe02 	bl	8002310 <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004710:	f7fd fdfe 	bl	8002310 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e026      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004722:	4b06      	ldr	r3, [pc, #24]	; (800473c <HAL_RCC_OscConfig+0x4c4>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x498>
 800472e:	e01e      	b.n	800476e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	69db      	ldr	r3, [r3, #28]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d107      	bne.n	8004748 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e019      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
 800473c:	40021000 	.word	0x40021000
 8004740:	40007000 	.word	0x40007000
 8004744:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004748:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RCC_OscConfig+0x500>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	429a      	cmp	r2, r3
 800475a:	d106      	bne.n	800476a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004766:	429a      	cmp	r2, r3
 8004768:	d001      	beq.n	800476e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40021000 	.word	0x40021000

0800477c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d101      	bne.n	8004790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0d0      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004790:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	683a      	ldr	r2, [r7, #0]
 800479a:	429a      	cmp	r2, r3
 800479c:	d910      	bls.n	80047c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800479e:	4b67      	ldr	r3, [pc, #412]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 0207 	bic.w	r2, r3, #7
 80047a6:	4965      	ldr	r1, [pc, #404]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ae:	4b63      	ldr	r3, [pc, #396]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d001      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e0b8      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d020      	beq.n	800480e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d005      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047d8:	4b59      	ldr	r3, [pc, #356]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4a58      	ldr	r2, [pc, #352]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0308 	and.w	r3, r3, #8
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047f0:	4b53      	ldr	r3, [pc, #332]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a52      	ldr	r2, [pc, #328]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047fc:	4b50      	ldr	r3, [pc, #320]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	494d      	ldr	r1, [pc, #308]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0301 	and.w	r3, r3, #1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d040      	beq.n	800489c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b47      	ldr	r3, [pc, #284]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d115      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e07f      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d107      	bne.n	800484a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	4b41      	ldr	r3, [pc, #260]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d109      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e073      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800484a:	4b3d      	ldr	r3, [pc, #244]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e06b      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800485a:	4b39      	ldr	r3, [pc, #228]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f023 0203 	bic.w	r2, r3, #3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4936      	ldr	r1, [pc, #216]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800486c:	f7fd fd50 	bl	8002310 <HAL_GetTick>
 8004870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	e00a      	b.n	800488a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004874:	f7fd fd4c 	bl	8002310 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e053      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 020c 	and.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	429a      	cmp	r2, r3
 800489a:	d1eb      	bne.n	8004874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800489c:	4b27      	ldr	r3, [pc, #156]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0307 	and.w	r3, r3, #7
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d210      	bcs.n	80048cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b24      	ldr	r3, [pc, #144]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f023 0207 	bic.w	r2, r3, #7
 80048b2:	4922      	ldr	r1, [pc, #136]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ba:	4b20      	ldr	r3, [pc, #128]	; (800493c <HAL_RCC_ClockConfig+0x1c0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d001      	beq.n	80048cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e032      	b.n	8004932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d008      	beq.n	80048ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048d8:	4b19      	ldr	r3, [pc, #100]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4916      	ldr	r1, [pc, #88]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d009      	beq.n	800490a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048f6:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	00db      	lsls	r3, r3, #3
 8004904:	490e      	ldr	r1, [pc, #56]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 8004906:	4313      	orrs	r3, r2
 8004908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800490a:	f000 f821 	bl	8004950 <HAL_RCC_GetSysClockFreq>
 800490e:	4602      	mov	r2, r0
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f003 030f 	and.w	r3, r3, #15
 800491a:	490a      	ldr	r1, [pc, #40]	; (8004944 <HAL_RCC_ClockConfig+0x1c8>)
 800491c:	5ccb      	ldrb	r3, [r1, r3]
 800491e:	fa22 f303 	lsr.w	r3, r2, r3
 8004922:	4a09      	ldr	r2, [pc, #36]	; (8004948 <HAL_RCC_ClockConfig+0x1cc>)
 8004924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004926:	4b09      	ldr	r3, [pc, #36]	; (800494c <HAL_RCC_ClockConfig+0x1d0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f7fd fcae 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40022000 	.word	0x40022000
 8004940:	40021000 	.word	0x40021000
 8004944:	0800cc08 	.word	0x0800cc08
 8004948:	2000001c 	.word	0x2000001c
 800494c:	20000020 	.word	0x20000020

08004950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004950:	b490      	push	{r4, r7}
 8004952:	b08a      	sub	sp, #40	; 0x28
 8004954:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004956:	4b29      	ldr	r3, [pc, #164]	; (80049fc <HAL_RCC_GetSysClockFreq+0xac>)
 8004958:	1d3c      	adds	r4, r7, #4
 800495a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800495c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004960:	f240 2301 	movw	r3, #513	; 0x201
 8004964:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	2300      	movs	r3, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	2300      	movs	r3, #0
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800497a:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 030c 	and.w	r3, r3, #12
 8004986:	2b04      	cmp	r3, #4
 8004988:	d002      	beq.n	8004990 <HAL_RCC_GetSysClockFreq+0x40>
 800498a:	2b08      	cmp	r3, #8
 800498c:	d003      	beq.n	8004996 <HAL_RCC_GetSysClockFreq+0x46>
 800498e:	e02b      	b.n	80049e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004990:	4b1c      	ldr	r3, [pc, #112]	; (8004a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004992:	623b      	str	r3, [r7, #32]
      break;
 8004994:	e02b      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	0c9b      	lsrs	r3, r3, #18
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	3328      	adds	r3, #40	; 0x28
 80049a0:	443b      	add	r3, r7
 80049a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049b2:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0c5b      	lsrs	r3, r3, #17
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	3328      	adds	r3, #40	; 0x28
 80049be:	443b      	add	r3, r7
 80049c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	4a0e      	ldr	r2, [pc, #56]	; (8004a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ca:	fb03 f202 	mul.w	r2, r3, r2
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d4:	627b      	str	r3, [r7, #36]	; 0x24
 80049d6:	e004      	b.n	80049e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	4a0b      	ldr	r2, [pc, #44]	; (8004a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049dc:	fb02 f303 	mul.w	r3, r2, r3
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	623b      	str	r3, [r7, #32]
      break;
 80049e6:	e002      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049e8:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049ea:	623b      	str	r3, [r7, #32]
      break;
 80049ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049ee:	6a3b      	ldr	r3, [r7, #32]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3728      	adds	r7, #40	; 0x28
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bc90      	pop	{r4, r7}
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	0800cbb4 	.word	0x0800cbb4
 8004a00:	40021000 	.word	0x40021000
 8004a04:	007a1200 	.word	0x007a1200
 8004a08:	003d0900 	.word	0x003d0900

08004a0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a14:	4b0a      	ldr	r3, [pc, #40]	; (8004a40 <RCC_Delay+0x34>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <RCC_Delay+0x38>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	0a5b      	lsrs	r3, r3, #9
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	fb02 f303 	mul.w	r3, r2, r3
 8004a26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a28:	bf00      	nop
  }
  while (Delay --);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	60fa      	str	r2, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f9      	bne.n	8004a28 <RCC_Delay+0x1c>
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	2000001c 	.word	0x2000001c
 8004a44:	10624dd3 	.word	0x10624dd3

08004a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b086      	sub	sp, #24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004a50:	2300      	movs	r3, #0
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d07d      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a68:	4b4f      	ldr	r3, [pc, #316]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10d      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a74:	4b4c      	ldr	r3, [pc, #304]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	4a4b      	ldr	r2, [pc, #300]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	61d3      	str	r3, [r2, #28]
 8004a80:	4b49      	ldr	r3, [pc, #292]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a88:	60bb      	str	r3, [r7, #8]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a90:	4b46      	ldr	r3, [pc, #280]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d118      	bne.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9c:	4b43      	ldr	r3, [pc, #268]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a42      	ldr	r2, [pc, #264]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fc32 	bl	8002310 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aae:	e008      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fd fc2e 	bl	8002310 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e06d      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b3a      	ldr	r3, [pc, #232]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02e      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d027      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aec:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af6:	4b2e      	ldr	r3, [pc, #184]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004afc:	4b2c      	ldr	r3, [pc, #176]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004b02:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d014      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd fbfd 	bl	8002310 <HAL_GetTick>
 8004b16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b18:	e00a      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b1a:	f7fd fbf9 	bl	8002310 <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e036      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0ee      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	4917      	ldr	r1, [pc, #92]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b4e:	7dfb      	ldrb	r3, [r7, #23]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d105      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b54:	4b14      	ldr	r3, [pc, #80]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b56:	69db      	ldr	r3, [r3, #28]
 8004b58:	4a13      	ldr	r2, [pc, #76]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	490b      	ldr	r1, [pc, #44]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0310 	and.w	r3, r3, #16
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d008      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b8a:	4b07      	ldr	r3, [pc, #28]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4904      	ldr	r1, [pc, #16]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3718      	adds	r7, #24
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	40007000 	.word	0x40007000
 8004bb0:	42420440 	.word	0x42420440

08004bb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d101      	bne.n	8004bc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e076      	b.n	8004cb4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d108      	bne.n	8004be0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bd6:	d009      	beq.n	8004bec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61da      	str	r2, [r3, #28]
 8004bde:	e005      	b.n	8004bec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d106      	bne.n	8004c0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7fd f9d6 	bl	8001fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c34:	431a      	orrs	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f003 0302 	and.w	r3, r3, #2
 8004c48:	431a      	orrs	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	431a      	orrs	r2, r3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c66:	431a      	orrs	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	ea42 0103 	orr.w	r1, r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	0c1a      	lsrs	r2, r3, #16
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f002 0204 	and.w	r2, r2, #4
 8004c92:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ca2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_SPI_Transmit+0x22>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e126      	b.n	8004f2c <HAL_SPI_Transmit+0x270>
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce6:	f7fd fb13 	bl	8002310 <HAL_GetTick>
 8004cea:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004cec:	88fb      	ldrh	r3, [r7, #6]
 8004cee:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d002      	beq.n	8004d02 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d00:	e10b      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_Transmit+0x52>
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d12:	e102      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2203      	movs	r2, #3
 8004d18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	88fa      	ldrh	r2, [r7, #6]
 8004d32:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d5a:	d10f      	bne.n	8004d7c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d6a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d86:	2b40      	cmp	r3, #64	; 0x40
 8004d88:	d007      	beq.n	8004d9a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da2:	d14b      	bne.n	8004e3c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d002      	beq.n	8004db2 <HAL_SPI_Transmit+0xf6>
 8004dac:	8afb      	ldrh	r3, [r7, #22]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d13e      	bne.n	8004e30 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	881a      	ldrh	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc2:	1c9a      	adds	r2, r3, #2
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dd6:	e02b      	b.n	8004e30 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d112      	bne.n	8004e0c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	881a      	ldrh	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	1c9a      	adds	r2, r3, #2
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	86da      	strh	r2, [r3, #54]	; 0x36
 8004e0a:	e011      	b.n	8004e30 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e0c:	f7fd fa80 	bl	8002310 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d803      	bhi.n	8004e24 <HAL_SPI_Transmit+0x168>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e22:	d102      	bne.n	8004e2a <HAL_SPI_Transmit+0x16e>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e2e:	e074      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1ce      	bne.n	8004dd8 <HAL_SPI_Transmit+0x11c>
 8004e3a:	e04c      	b.n	8004ed6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <HAL_SPI_Transmit+0x18e>
 8004e44:	8afb      	ldrh	r3, [r7, #22]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d140      	bne.n	8004ecc <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	330c      	adds	r3, #12
 8004e54:	7812      	ldrb	r2, [r2, #0]
 8004e56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004e70:	e02c      	b.n	8004ecc <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d113      	bne.n	8004ea8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	7812      	ldrb	r2, [r2, #0]
 8004e8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ea6:	e011      	b.n	8004ecc <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ea8:	f7fd fa32 	bl	8002310 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d803      	bhi.n	8004ec0 <HAL_SPI_Transmit+0x204>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ebe:	d102      	bne.n	8004ec6 <HAL_SPI_Transmit+0x20a>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d102      	bne.n	8004ecc <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004eca:	e026      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1cd      	bne.n	8004e72 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	6839      	ldr	r1, [r7, #0]
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fa62 	bl	80053a4 <SPI_EndRxTxTransaction>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d002      	beq.n	8004eec <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10a      	bne.n	8004f0a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	613b      	str	r3, [r7, #16]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	613b      	str	r3, [r7, #16]
 8004f08:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e000      	b.n	8004f1a <HAL_SPI_Transmit+0x25e>
  }

error:
 8004f18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3720      	adds	r7, #32
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08c      	sub	sp, #48	; 0x30
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f42:	2301      	movs	r3, #1
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x26>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e18a      	b.n	8005270 <HAL_SPI_TransmitReceive+0x33c>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f62:	f7fd f9d5 	bl	8002310 <HAL_GetTick>
 8004f66:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004f78:	887b      	ldrh	r3, [r7, #2]
 8004f7a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d00f      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x70>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f8a:	d107      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x68>
 8004f94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d003      	beq.n	8004fa4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fa2:	e15b      	b.n	800525c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x82>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x82>
 8004fb0:	887b      	ldrh	r3, [r7, #2]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d103      	bne.n	8004fbe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fbc:	e14e      	b.n	800525c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d003      	beq.n	8004fd2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2205      	movs	r2, #5
 8004fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	887a      	ldrh	r2, [r7, #2]
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	887a      	ldrh	r2, [r7, #2]
 8004fe8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	68ba      	ldr	r2, [r7, #8]
 8004fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	887a      	ldrh	r2, [r7, #2]
 8004ff4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	887a      	ldrh	r2, [r7, #2]
 8004ffa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005012:	2b40      	cmp	r3, #64	; 0x40
 8005014:	d007      	beq.n	8005026 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005024:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502e:	d178      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d002      	beq.n	800503e <HAL_SPI_TransmitReceive+0x10a>
 8005038:	8b7b      	ldrh	r3, [r7, #26]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d166      	bne.n	800510c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005042:	881a      	ldrh	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800504e:	1c9a      	adds	r2, r3, #2
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29a      	uxth	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005062:	e053      	b.n	800510c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b02      	cmp	r3, #2
 8005070:	d11b      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x176>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005076:	b29b      	uxth	r3, r3
 8005078:	2b00      	cmp	r3, #0
 800507a:	d016      	beq.n	80050aa <HAL_SPI_TransmitReceive+0x176>
 800507c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507e:	2b01      	cmp	r3, #1
 8005080:	d113      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	881a      	ldrh	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d119      	bne.n	80050ec <HAL_SPI_TransmitReceive+0x1b8>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d014      	beq.n	80050ec <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	b292      	uxth	r2, r2
 80050ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	1c9a      	adds	r2, r3, #2
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050de:	b29b      	uxth	r3, r3
 80050e0:	3b01      	subs	r3, #1
 80050e2:	b29a      	uxth	r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050e8:	2301      	movs	r3, #1
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050ec:	f7fd f910 	bl	8002310 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d807      	bhi.n	800510c <HAL_SPI_TransmitReceive+0x1d8>
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005102:	d003      	beq.n	800510c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800510a:	e0a7      	b.n	800525c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005110:	b29b      	uxth	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1a6      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x130>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1a1      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x130>
 8005120:	e07c      	b.n	800521c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <HAL_SPI_TransmitReceive+0x1fc>
 800512a:	8b7b      	ldrh	r3, [r7, #26]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d16b      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	330c      	adds	r3, #12
 800513a:	7812      	ldrb	r2, [r2, #0]
 800513c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005156:	e057      	b.n	8005208 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d11c      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x26c>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d017      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x26c>
 8005170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d114      	bne.n	80051a0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	330c      	adds	r3, #12
 8005180:	7812      	ldrb	r2, [r2, #0]
 8005182:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d119      	bne.n	80051e2 <HAL_SPI_TransmitReceive+0x2ae>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d014      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051de:	2301      	movs	r3, #1
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051e2:	f7fd f895 	bl	8002310 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d803      	bhi.n	80051fa <HAL_SPI_TransmitReceive+0x2c6>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051f8:	d102      	bne.n	8005200 <HAL_SPI_TransmitReceive+0x2cc>
 80051fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005206:	e029      	b.n	800525c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1a2      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x224>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005216:	b29b      	uxth	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d19d      	bne.n	8005158 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800521c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f8bf 	bl	80053a4 <SPI_EndRxTxTransaction>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d006      	beq.n	800523a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2220      	movs	r2, #32
 8005236:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005238:	e010      	b.n	800525c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10b      	bne.n	800525a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	617b      	str	r3, [r7, #20]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	617b      	str	r3, [r7, #20]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	e000      	b.n	800525c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800525a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800526c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005270:	4618      	mov	r0, r3
 8005272:	3730      	adds	r7, #48	; 0x30
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005286:	b2db      	uxtb	r3, r3
}
 8005288:	4618      	mov	r0, r3
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	bc80      	pop	{r7}
 8005290:	4770      	bx	lr
	...

08005294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80052a4:	f7fd f834 	bl	8002310 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	1a9b      	subs	r3, r3, r2
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	4413      	add	r3, r2
 80052b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80052b4:	f7fd f82c 	bl	8002310 <HAL_GetTick>
 80052b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80052ba:	4b39      	ldr	r3, [pc, #228]	; (80053a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	015b      	lsls	r3, r3, #5
 80052c0:	0d1b      	lsrs	r3, r3, #20
 80052c2:	69fa      	ldr	r2, [r7, #28]
 80052c4:	fb02 f303 	mul.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80052ca:	e054      	b.n	8005376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d2:	d050      	beq.n	8005376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052d4:	f7fd f81c 	bl	8002310 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d902      	bls.n	80052ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d13d      	bne.n	8005366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005302:	d111      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800530c:	d004      	beq.n	8005318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d107      	bne.n	8005328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005330:	d10f      	bne.n	8005352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005340:	601a      	str	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e017      	b.n	8005396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	3b01      	subs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	461a      	mov	r2, r3
 800538e:	79fb      	ldrb	r3, [r7, #7]
 8005390:	429a      	cmp	r2, r3
 8005392:	d19b      	bne.n	80052cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	2000001c 	.word	0x2000001c

080053a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff ff6a 	bl	8005294 <SPI_WaitFlagStateUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e000      	b.n	80053d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e041      	b.n	8005476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d106      	bne.n	800540c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fc fe20 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3304      	adds	r3, #4
 800541c:	4619      	mov	r1, r3
 800541e:	4610      	mov	r0, r2
 8005420:	f000 fc28 	bl	8005c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e03a      	b.n	800550e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	; (8005518 <HAL_TIM_Base_Start_IT+0x98>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00e      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x58>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d009      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x58>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a14      	ldr	r2, [pc, #80]	; (800551c <HAL_TIM_Base_Start_IT+0x9c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <HAL_TIM_Base_Start_IT+0x58>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a13      	ldr	r2, [pc, #76]	; (8005520 <HAL_TIM_Base_Start_IT+0xa0>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d111      	bne.n	80054fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2b06      	cmp	r3, #6
 80054e8:	d010      	beq.n	800550c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0201 	orr.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	e007      	b.n	800550c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0201 	orr.w	r2, r2, #1
 800550a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800

08005524 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e041      	b.n	80055ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f839 	bl	80055c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3304      	adds	r3, #4
 8005560:	4619      	mov	r1, r3
 8005562:	4610      	mov	r0, r2
 8005564:	f000 fb86 	bl	8005c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bc80      	pop	{r7}
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d109      	bne.n	80055f8 <HAL_TIM_PWM_Start+0x24>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	bf14      	ite	ne
 80055f0:	2301      	movne	r3, #1
 80055f2:	2300      	moveq	r3, #0
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	e022      	b.n	800563e <HAL_TIM_PWM_Start+0x6a>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d109      	bne.n	8005612 <HAL_TIM_PWM_Start+0x3e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b01      	cmp	r3, #1
 8005608:	bf14      	ite	ne
 800560a:	2301      	movne	r3, #1
 800560c:	2300      	moveq	r3, #0
 800560e:	b2db      	uxtb	r3, r3
 8005610:	e015      	b.n	800563e <HAL_TIM_PWM_Start+0x6a>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	2b08      	cmp	r3, #8
 8005616:	d109      	bne.n	800562c <HAL_TIM_PWM_Start+0x58>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800561e:	b2db      	uxtb	r3, r3
 8005620:	2b01      	cmp	r3, #1
 8005622:	bf14      	ite	ne
 8005624:	2301      	movne	r3, #1
 8005626:	2300      	moveq	r3, #0
 8005628:	b2db      	uxtb	r3, r3
 800562a:	e008      	b.n	800563e <HAL_TIM_PWM_Start+0x6a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	bf14      	ite	ne
 8005638:	2301      	movne	r3, #1
 800563a:	2300      	moveq	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e05e      	b.n	8005704 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d104      	bne.n	8005656 <HAL_TIM_PWM_Start+0x82>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005654:	e013      	b.n	800567e <HAL_TIM_PWM_Start+0xaa>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d104      	bne.n	8005666 <HAL_TIM_PWM_Start+0x92>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005664:	e00b      	b.n	800567e <HAL_TIM_PWM_Start+0xaa>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b08      	cmp	r3, #8
 800566a:	d104      	bne.n	8005676 <HAL_TIM_PWM_Start+0xa2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005674:	e003      	b.n	800567e <HAL_TIM_PWM_Start+0xaa>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2202      	movs	r2, #2
 800567a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2201      	movs	r2, #1
 8005684:	6839      	ldr	r1, [r7, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fd74 	bl	8006174 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a1e      	ldr	r2, [pc, #120]	; (800570c <HAL_TIM_PWM_Start+0x138>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d107      	bne.n	80056a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a18      	ldr	r2, [pc, #96]	; (800570c <HAL_TIM_PWM_Start+0x138>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_TIM_PWM_Start+0xfa>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b8:	d009      	beq.n	80056ce <HAL_TIM_PWM_Start+0xfa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a14      	ldr	r2, [pc, #80]	; (8005710 <HAL_TIM_PWM_Start+0x13c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_TIM_PWM_Start+0xfa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a12      	ldr	r2, [pc, #72]	; (8005714 <HAL_TIM_PWM_Start+0x140>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d111      	bne.n	80056f2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b06      	cmp	r3, #6
 80056de:	d010      	beq.n	8005702 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	e007      	b.n	8005702 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f042 0201 	orr.w	r2, r2, #1
 8005700:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3710      	adds	r7, #16
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40000400 	.word	0x40000400
 8005714:	40000800 	.word	0x40000800

08005718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0302 	and.w	r3, r3, #2
 800572a:	2b02      	cmp	r3, #2
 800572c:	d122      	bne.n	8005774 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b02      	cmp	r3, #2
 800573a:	d11b      	bne.n	8005774 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f06f 0202 	mvn.w	r2, #2
 8005744:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	f003 0303 	and.w	r3, r3, #3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa6f 	bl	8005c3e <HAL_TIM_IC_CaptureCallback>
 8005760:	e005      	b.n	800576e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fa62 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fa71 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b04      	cmp	r3, #4
 8005780:	d122      	bne.n	80057c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b04      	cmp	r3, #4
 800578e:	d11b      	bne.n	80057c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f06f 0204 	mvn.w	r2, #4
 8005798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d003      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa45 	bl	8005c3e <HAL_TIM_IC_CaptureCallback>
 80057b4:	e005      	b.n	80057c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fa38 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa47 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691b      	ldr	r3, [r3, #16]
 80057ce:	f003 0308 	and.w	r3, r3, #8
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d122      	bne.n	800581c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b08      	cmp	r3, #8
 80057e2:	d11b      	bne.n	800581c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0208 	mvn.w	r2, #8
 80057ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0303 	and.w	r3, r3, #3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa1b 	bl	8005c3e <HAL_TIM_IC_CaptureCallback>
 8005808:	e005      	b.n	8005816 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa0e 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fa1d 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b10      	cmp	r3, #16
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b10      	cmp	r3, #16
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0210 	mvn.w	r2, #16
 8005840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2208      	movs	r2, #8
 8005846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f9f1 	bl	8005c3e <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f9e4 	bl	8005c2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f9f3 	bl	8005c50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	d10e      	bne.n	800589c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0301 	and.w	r3, r3, #1
 8005888:	2b01      	cmp	r3, #1
 800588a:	d107      	bne.n	800589c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0201 	mvn.w	r2, #1
 8005894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc fa0a 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a6:	2b80      	cmp	r3, #128	; 0x80
 80058a8:	d10e      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058b4:	2b80      	cmp	r3, #128	; 0x80
 80058b6:	d107      	bne.n	80058c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80058c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fd32 	bl	800632c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d2:	2b40      	cmp	r3, #64	; 0x40
 80058d4:	d10e      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e0:	2b40      	cmp	r3, #64	; 0x40
 80058e2:	d107      	bne.n	80058f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 f9b7 	bl	8005c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b20      	cmp	r3, #32
 8005900:	d10e      	bne.n	8005920 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b20      	cmp	r3, #32
 800590e:	d107      	bne.n	8005920 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0220 	mvn.w	r2, #32
 8005918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fcfd 	bl	800631a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005920:	bf00      	nop
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800593e:	2302      	movs	r3, #2
 8005940:	e0ac      	b.n	8005a9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b0c      	cmp	r3, #12
 800594e:	f200 809f 	bhi.w	8005a90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005952:	a201      	add	r2, pc, #4	; (adr r2, 8005958 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005958:	0800598d 	.word	0x0800598d
 800595c:	08005a91 	.word	0x08005a91
 8005960:	08005a91 	.word	0x08005a91
 8005964:	08005a91 	.word	0x08005a91
 8005968:	080059cd 	.word	0x080059cd
 800596c:	08005a91 	.word	0x08005a91
 8005970:	08005a91 	.word	0x08005a91
 8005974:	08005a91 	.word	0x08005a91
 8005978:	08005a0f 	.word	0x08005a0f
 800597c:	08005a91 	.word	0x08005a91
 8005980:	08005a91 	.word	0x08005a91
 8005984:	08005a91 	.word	0x08005a91
 8005988:	08005a4f 	.word	0x08005a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f9d0 	bl	8005d38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	699a      	ldr	r2, [r3, #24]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0208 	orr.w	r2, r2, #8
 80059a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0204 	bic.w	r2, r2, #4
 80059b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6999      	ldr	r1, [r3, #24]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	619a      	str	r2, [r3, #24]
      break;
 80059ca:	e062      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f000 fa16 	bl	8005e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699a      	ldr	r2, [r3, #24]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699a      	ldr	r2, [r3, #24]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6999      	ldr	r1, [r3, #24]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	021a      	lsls	r2, r3, #8
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	619a      	str	r2, [r3, #24]
      break;
 8005a0c:	e041      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fa5f 	bl	8005ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f042 0208 	orr.w	r2, r2, #8
 8005a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69da      	ldr	r2, [r3, #28]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0204 	bic.w	r2, r2, #4
 8005a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	69d9      	ldr	r1, [r3, #28]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	61da      	str	r2, [r3, #28]
      break;
 8005a4c:	e021      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68b9      	ldr	r1, [r7, #8]
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 faa9 	bl	8005fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	69da      	ldr	r2, [r3, #28]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69d9      	ldr	r1, [r3, #28]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	021a      	lsls	r2, r3, #8
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	61da      	str	r2, [r3, #28]
      break;
 8005a8e:	e000      	b.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_TIM_ConfigClockSource+0x18>
 8005ab8:	2302      	movs	r3, #2
 8005aba:	e0b3      	b.n	8005c24 <HAL_TIM_ConfigClockSource+0x180>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af4:	d03e      	beq.n	8005b74 <HAL_TIM_ConfigClockSource+0xd0>
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	f200 8087 	bhi.w	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b02:	f000 8085 	beq.w	8005c10 <HAL_TIM_ConfigClockSource+0x16c>
 8005b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0a:	d87f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b0c:	2b70      	cmp	r3, #112	; 0x70
 8005b0e:	d01a      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0xa2>
 8005b10:	2b70      	cmp	r3, #112	; 0x70
 8005b12:	d87b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b14:	2b60      	cmp	r3, #96	; 0x60
 8005b16:	d050      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0x116>
 8005b18:	2b60      	cmp	r3, #96	; 0x60
 8005b1a:	d877      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b1c:	2b50      	cmp	r3, #80	; 0x50
 8005b1e:	d03c      	beq.n	8005b9a <HAL_TIM_ConfigClockSource+0xf6>
 8005b20:	2b50      	cmp	r3, #80	; 0x50
 8005b22:	d873      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d058      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x136>
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d86f      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b2c:	2b30      	cmp	r3, #48	; 0x30
 8005b2e:	d064      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x156>
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d86b      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d060      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x156>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d867      	bhi.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d05c      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x156>
 8005b40:	2b10      	cmp	r3, #16
 8005b42:	d05a      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b44:	e062      	b.n	8005c0c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	6899      	ldr	r1, [r3, #8]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f000 faee 	bl	8006136 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b68:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	609a      	str	r2, [r3, #8]
      break;
 8005b72:	e04e      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	6899      	ldr	r1, [r3, #8]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f000 fad7 	bl	8006136 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689a      	ldr	r2, [r3, #8]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b96:	609a      	str	r2, [r3, #8]
      break;
 8005b98:	e03b      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6859      	ldr	r1, [r3, #4]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f000 fa4e 	bl	8006048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2150      	movs	r1, #80	; 0x50
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 faa5 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005bb8:	e02b      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 fa6c 	bl	80060a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2160      	movs	r1, #96	; 0x60
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fa95 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e01b      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 fa2e 	bl	8006048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2140      	movs	r1, #64	; 0x40
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 fa85 	bl	8006102 <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e00b      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f000 fa7c 	bl	8006102 <TIM_ITRx_SetConfig>
        break;
 8005c0a:	e002      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c0c:	bf00      	nop
 8005c0e:	e000      	b.n	8005c12 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bc80      	pop	{r7}
 8005c3c:	4770      	bx	lr

08005c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bc80      	pop	{r7}
 8005c60:	4770      	bx	lr

08005c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <TIM_Base_SetConfig+0xb8>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00b      	beq.n	8005ca4 <TIM_Base_SetConfig+0x30>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d007      	beq.n	8005ca4 <TIM_Base_SetConfig+0x30>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a26      	ldr	r2, [pc, #152]	; (8005d30 <TIM_Base_SetConfig+0xbc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_Base_SetConfig+0x30>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <TIM_Base_SetConfig+0xc0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d108      	bne.n	8005cb6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a1c      	ldr	r2, [pc, #112]	; (8005d2c <TIM_Base_SetConfig+0xb8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d00b      	beq.n	8005cd6 <TIM_Base_SetConfig+0x62>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc4:	d007      	beq.n	8005cd6 <TIM_Base_SetConfig+0x62>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a19      	ldr	r2, [pc, #100]	; (8005d30 <TIM_Base_SetConfig+0xbc>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d003      	beq.n	8005cd6 <TIM_Base_SetConfig+0x62>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a18      	ldr	r2, [pc, #96]	; (8005d34 <TIM_Base_SetConfig+0xc0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d108      	bne.n	8005ce8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a07      	ldr	r2, [pc, #28]	; (8005d2c <TIM_Base_SetConfig+0xb8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d103      	bne.n	8005d1c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	615a      	str	r2, [r3, #20]
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40000400 	.word	0x40000400
 8005d34:	40000800 	.word	0x40000800

08005d38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f023 0302 	bic.w	r3, r3, #2
 8005d80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <TIM_OC1_SetConfig+0xc8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d10c      	bne.n	8005dae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f023 0308 	bic.w	r3, r3, #8
 8005d9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a13      	ldr	r2, [pc, #76]	; (8005e00 <TIM_OC1_SetConfig+0xc8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	621a      	str	r2, [r3, #32]
}
 8005df4:	bf00      	nop
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40012c00 	.word	0x40012c00

08005e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	f023 0210 	bic.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	021b      	lsls	r3, r3, #8
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0320 	bic.w	r3, r3, #32
 8005e4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a1d      	ldr	r2, [pc, #116]	; (8005ed4 <TIM_OC2_SetConfig+0xd0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d10d      	bne.n	8005e80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a14      	ldr	r2, [pc, #80]	; (8005ed4 <TIM_OC2_SetConfig+0xd0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d113      	bne.n	8005eb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	621a      	str	r2, [r3, #32]
}
 8005eca:	bf00      	nop
 8005ecc:	371c      	adds	r7, #28
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bc80      	pop	{r7}
 8005ed2:	4770      	bx	lr
 8005ed4:	40012c00 	.word	0x40012c00

08005ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b087      	sub	sp, #28
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6a1b      	ldr	r3, [r3, #32]
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0303 	bic.w	r3, r3, #3
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	021b      	lsls	r3, r3, #8
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1d      	ldr	r2, [pc, #116]	; (8005fa8 <TIM_OC3_SetConfig+0xd0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10d      	bne.n	8005f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a14      	ldr	r2, [pc, #80]	; (8005fa8 <TIM_OC3_SetConfig+0xd0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d113      	bne.n	8005f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bc80      	pop	{r7}
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	40012c00 	.word	0x40012c00

08005fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	031b      	lsls	r3, r3, #12
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a0f      	ldr	r2, [pc, #60]	; (8006044 <TIM_OC4_SetConfig+0x98>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d109      	bne.n	8006020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr
 8006044:	40012c00 	.word	0x40012c00

08006048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f023 0201 	bic.w	r2, r3, #1
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	4313      	orrs	r3, r2
 800607c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f023 030a 	bic.w	r3, r3, #10
 8006084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	4313      	orrs	r3, r2
 800608c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	bc80      	pop	{r7}
 80060a2:	4770      	bx	lr

080060a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b087      	sub	sp, #28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f023 0210 	bic.w	r2, r3, #16
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	031b      	lsls	r3, r3, #12
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	621a      	str	r2, [r3, #32]
}
 80060f8:	bf00      	nop
 80060fa:	371c      	adds	r7, #28
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bc80      	pop	{r7}
 8006100:	4770      	bx	lr

08006102 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006118:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	f043 0307 	orr.w	r3, r3, #7
 8006124:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr

08006136 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006136:	b480      	push	{r7}
 8006138:	b087      	sub	sp, #28
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006150:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	021a      	lsls	r2, r3, #8
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	431a      	orrs	r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	4313      	orrs	r3, r2
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	609a      	str	r2, [r3, #8]
}
 800616a:	bf00      	nop
 800616c:	371c      	adds	r7, #28
 800616e:	46bd      	mov	sp, r7
 8006170:	bc80      	pop	{r7}
 8006172:	4770      	bx	lr

08006174 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2201      	movs	r2, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	43db      	mvns	r3, r3
 8006196:	401a      	ands	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1a      	ldr	r2, [r3, #32]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f003 031f 	and.w	r3, r3, #31
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ac:	431a      	orrs	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr

080061bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e046      	b.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a16      	ldr	r2, [pc, #88]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d00e      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006220:	d009      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a12      	ldr	r2, [pc, #72]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d004      	beq.n	8006236 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a10      	ldr	r2, [pc, #64]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10c      	bne.n	8006250 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800623c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	4313      	orrs	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3714      	adds	r7, #20
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr
 800626c:	40012c00 	.word	0x40012c00
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800

08006278 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006290:	2302      	movs	r3, #2
 8006292:	e03d      	b.n	8006310 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr

0800633e <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800633e:	b084      	sub	sp, #16
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	f107 0014 	add.w	r0, r7, #20
 800634c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	b004      	add	sp, #16
 800635c:	4770      	bx	lr

0800635e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800636e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006372:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	bc80      	pop	{r7}
 8006388:	4770      	bx	lr

0800638a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006392:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006396:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800639e:	b29a      	uxth	r2, r3
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	43db      	mvns	r3, r3
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	4013      	ands	r3, r2
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bc80      	pop	{r7}
 80063bc:	4770      	bx	lr

080063be <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	460b      	mov	r3, r1
 80063c8:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr

080063d6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063d6:	b084      	sub	sp, #16
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	f107 0014 	add.w	r0, r7, #20
 80063e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	bc80      	pop	{r7}
 8006412:	b004      	add	sp, #16
 8006414:	4770      	bx	lr
	...

08006418 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006418:	b480      	push	{r7}
 800641a:	b09b      	sub	sp, #108	; 0x6c
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800643a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	78db      	ldrb	r3, [r3, #3]
 8006446:	2b03      	cmp	r3, #3
 8006448:	d81f      	bhi.n	800648a <USB_ActivateEndpoint+0x72>
 800644a:	a201      	add	r2, pc, #4	; (adr r2, 8006450 <USB_ActivateEndpoint+0x38>)
 800644c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006450:	08006461 	.word	0x08006461
 8006454:	0800647d 	.word	0x0800647d
 8006458:	08006493 	.word	0x08006493
 800645c:	0800646f 	.word	0x0800646f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006460:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006468:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800646c:	e012      	b.n	8006494 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800646e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006472:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8006476:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800647a:	e00b      	b.n	8006494 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800647c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006484:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006488:	e004      	b.n	8006494 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006490:	e000      	b.n	8006494 <USB_ActivateEndpoint+0x7c>
      break;
 8006492:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	441a      	add	r2, r3
 800649e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80064a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	441a      	add	r2, r3
 80064e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80064e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	7b1b      	ldrb	r3, [r3, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 8149 	bne.w	8006798 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 8084 	beq.w	8006618 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800651a:	b29b      	uxth	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	4413      	add	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	011a      	lsls	r2, r3, #4
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	085b      	lsrs	r3, r3, #1
 800653a:	b29b      	uxth	r3, r3
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	b29a      	uxth	r2, r3
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	81fb      	strh	r3, [r7, #14]
 8006552:	89fb      	ldrh	r3, [r7, #14]
 8006554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01b      	beq.n	8006594 <USB_ActivateEndpoint+0x17c>
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	b29b      	uxth	r3, r3
 800656a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800656e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006572:	81bb      	strh	r3, [r7, #12]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	441a      	add	r2, r3
 800657e:	89bb      	ldrh	r3, [r7, #12]
 8006580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800658c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006590:	b29b      	uxth	r3, r3
 8006592:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	78db      	ldrb	r3, [r3, #3]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d020      	beq.n	80065de <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065b2:	813b      	strh	r3, [r7, #8]
 80065b4:	893b      	ldrh	r3, [r7, #8]
 80065b6:	f083 0320 	eor.w	r3, r3, #32
 80065ba:	813b      	strh	r3, [r7, #8]
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	441a      	add	r2, r3
 80065c6:	893b      	ldrh	r3, [r7, #8]
 80065c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065d8:	b29b      	uxth	r3, r3
 80065da:	8013      	strh	r3, [r2, #0]
 80065dc:	e27f      	b.n	8006ade <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f4:	817b      	strh	r3, [r7, #10]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	897b      	ldrh	r3, [r7, #10]
 8006602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800660e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006612:	b29b      	uxth	r3, r3
 8006614:	8013      	strh	r3, [r2, #0]
 8006616:	e262      	b.n	8006ade <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	4413      	add	r3, r2
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	011a      	lsls	r2, r3, #4
 8006632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006634:	4413      	add	r3, r2
 8006636:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800663a:	62bb      	str	r3, [r7, #40]	; 0x28
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	88db      	ldrh	r3, [r3, #6]
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	b29b      	uxth	r3, r3
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	b29a      	uxth	r2, r3
 8006648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006656:	b29b      	uxth	r3, r3
 8006658:	461a      	mov	r2, r3
 800665a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665c:	4413      	add	r3, r2
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	011a      	lsls	r2, r3, #4
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	4413      	add	r3, r2
 800666a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800666e:	623b      	str	r3, [r7, #32]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d112      	bne.n	800669e <USB_ActivateEndpoint+0x286>
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	b29b      	uxth	r3, r3
 800667e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006682:	b29a      	uxth	r2, r3
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	881b      	ldrh	r3, [r3, #0]
 800668c:	b29b      	uxth	r3, r3
 800668e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006692:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006696:	b29a      	uxth	r2, r3
 8006698:	6a3b      	ldr	r3, [r7, #32]
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e02f      	b.n	80066fe <USB_ActivateEndpoint+0x2e6>
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	2b3e      	cmp	r3, #62	; 0x3e
 80066a4:	d813      	bhi.n	80066ce <USB_ActivateEndpoint+0x2b6>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	663b      	str	r3, [r7, #96]	; 0x60
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d002      	beq.n	80066c0 <USB_ActivateEndpoint+0x2a8>
 80066ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066bc:	3301      	adds	r3, #1
 80066be:	663b      	str	r3, [r7, #96]	; 0x60
 80066c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066c2:	b29b      	uxth	r3, r3
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e017      	b.n	80066fe <USB_ActivateEndpoint+0x2e6>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	095b      	lsrs	r3, r3, #5
 80066d4:	663b      	str	r3, [r7, #96]	; 0x60
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	f003 031f 	and.w	r3, r3, #31
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <USB_ActivateEndpoint+0x2d0>
 80066e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e4:	3b01      	subs	r3, #1
 80066e6:	663b      	str	r3, [r7, #96]	; 0x60
 80066e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4413      	add	r3, r2
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	83fb      	strh	r3, [r7, #30]
 800670c:	8bfb      	ldrh	r3, [r7, #30]
 800670e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006712:	2b00      	cmp	r3, #0
 8006714:	d01b      	beq.n	800674e <USB_ActivateEndpoint+0x336>
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	881b      	ldrh	r3, [r3, #0]
 8006722:	b29b      	uxth	r3, r3
 8006724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672c:	83bb      	strh	r3, [r7, #28]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	441a      	add	r2, r3
 8006738:	8bbb      	ldrh	r3, [r7, #28]
 800673a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006742:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800674a:	b29b      	uxth	r3, r3
 800674c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4413      	add	r3, r2
 8006758:	881b      	ldrh	r3, [r3, #0]
 800675a:	b29b      	uxth	r3, r3
 800675c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006764:	837b      	strh	r3, [r7, #26]
 8006766:	8b7b      	ldrh	r3, [r7, #26]
 8006768:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800676c:	837b      	strh	r3, [r7, #26]
 800676e:	8b7b      	ldrh	r3, [r7, #26]
 8006770:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006774:	837b      	strh	r3, [r7, #26]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	8b7b      	ldrh	r3, [r7, #26]
 8006782:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006786:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800678a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800678e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006792:	b29b      	uxth	r3, r3
 8006794:	8013      	strh	r3, [r2, #0]
 8006796:	e1a2      	b.n	8006ade <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	881b      	ldrh	r3, [r3, #0]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ae:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	441a      	add	r2, r3
 80067bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80067c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067c8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067de:	b29b      	uxth	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e4:	4413      	add	r3, r2
 80067e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	011a      	lsls	r2, r3, #4
 80067ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f6:	657b      	str	r3, [r7, #84]	; 0x54
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	891b      	ldrh	r3, [r3, #8]
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006806:	801a      	strh	r2, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	653b      	str	r3, [r7, #80]	; 0x50
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006812:	b29b      	uxth	r3, r3
 8006814:	461a      	mov	r2, r3
 8006816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006818:	4413      	add	r3, r2
 800681a:	653b      	str	r3, [r7, #80]	; 0x50
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	011a      	lsls	r2, r3, #4
 8006822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006824:	4413      	add	r3, r2
 8006826:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800682a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	895b      	ldrh	r3, [r3, #10]
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	b29b      	uxth	r3, r3
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	b29a      	uxth	r2, r3
 8006838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f040 8091 	bne.w	8006968 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	881b      	ldrh	r3, [r3, #0]
 8006852:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006854:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d01b      	beq.n	8006896 <USB_ActivateEndpoint+0x47e>
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	009b      	lsls	r3, r3, #2
 8006866:	4413      	add	r3, r2
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006874:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	441a      	add	r2, r3
 8006880:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800688a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800688e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006892:	b29b      	uxth	r3, r3
 8006894:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	4413      	add	r3, r2
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	873b      	strh	r3, [r7, #56]	; 0x38
 80068a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80068a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01b      	beq.n	80068e6 <USB_ActivateEndpoint+0x4ce>
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	4413      	add	r3, r2
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068c4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	441a      	add	r2, r3
 80068d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	881b      	ldrh	r3, [r3, #0]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80068fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006900:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006904:	86bb      	strh	r3, [r7, #52]	; 0x34
 8006906:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8006908:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800690c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006944:	867b      	strh	r3, [r7, #50]	; 0x32
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	441a      	add	r2, r3
 8006950:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800695a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800695e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006962:	b29b      	uxth	r3, r3
 8006964:	8013      	strh	r3, [r2, #0]
 8006966:	e0ba      	b.n	8006ade <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	881b      	ldrh	r3, [r3, #0]
 8006974:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800697c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01d      	beq.n	80069c0 <USB_ActivateEndpoint+0x5a8>
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	881b      	ldrh	r3, [r3, #0]
 8006990:	b29b      	uxth	r3, r3
 8006992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	441a      	add	r2, r3
 80069a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80069ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069bc:	b29b      	uxth	r3, r3
 80069be:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80069d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01d      	beq.n	8006a18 <USB_ActivateEndpoint+0x600>
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	881b      	ldrh	r3, [r3, #0]
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	441a      	add	r2, r3
 8006a00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	78db      	ldrb	r3, [r3, #3]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d024      	beq.n	8006a6a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a3e:	f083 0320 	eor.w	r3, r3, #32
 8006a42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	441a      	add	r2, r3
 8006a50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8013      	strh	r3, [r2, #0]
 8006a68:	e01d      	b.n	8006aa6 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	4413      	add	r3, r2
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	881b      	ldrh	r3, [r3, #0]
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006ade:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	376c      	adds	r7, #108	; 0x6c
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bc80      	pop	{r7}
 8006aea:	4770      	bx	lr

08006aec <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b08d      	sub	sp, #52	; 0x34
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	7b1b      	ldrb	r3, [r3, #12]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 808e 	bne.w	8006c1c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d044      	beq.n	8006b92 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	81bb      	strh	r3, [r7, #12]
 8006b16:	89bb      	ldrh	r3, [r7, #12]
 8006b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01b      	beq.n	8006b58 <USB_DeactivateEndpoint+0x6c>
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	817b      	strh	r3, [r7, #10]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	441a      	add	r2, r3
 8006b42:	897b      	ldrh	r3, [r7, #10]
 8006b44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b50:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6e:	813b      	strh	r3, [r7, #8]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	441a      	add	r2, r3
 8006b7a:	893b      	ldrh	r3, [r7, #8]
 8006b7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	8013      	strh	r3, [r2, #0]
 8006b90:	e192      	b.n	8006eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	827b      	strh	r3, [r7, #18]
 8006ba0:	8a7b      	ldrh	r3, [r7, #18]
 8006ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01b      	beq.n	8006be2 <USB_DeactivateEndpoint+0xf6>
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	881b      	ldrh	r3, [r3, #0]
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc0:	823b      	strh	r3, [r7, #16]
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	441a      	add	r2, r3
 8006bcc:	8a3b      	ldrh	r3, [r7, #16]
 8006bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	881b      	ldrh	r3, [r3, #0]
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006bf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bf8:	81fb      	strh	r3, [r7, #14]
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	441a      	add	r2, r3
 8006c04:	89fb      	ldrh	r3, [r7, #14]
 8006c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	8013      	strh	r3, [r2, #0]
 8006c1a:	e14d      	b.n	8006eb8 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 80a5 	bne.w	8006d70 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c26:	687a      	ldr	r2, [r7, #4]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4413      	add	r3, r2
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	843b      	strh	r3, [r7, #32]
 8006c34:	8c3b      	ldrh	r3, [r7, #32]
 8006c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d01b      	beq.n	8006c76 <USB_DeactivateEndpoint+0x18a>
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	83fb      	strh	r3, [r7, #30]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	441a      	add	r2, r3
 8006c60:	8bfb      	ldrh	r3, [r7, #30]
 8006c62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	83bb      	strh	r3, [r7, #28]
 8006c84:	8bbb      	ldrh	r3, [r7, #28]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01b      	beq.n	8006cc6 <USB_DeactivateEndpoint+0x1da>
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ca4:	837b      	strh	r3, [r7, #26]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	441a      	add	r2, r3
 8006cb0:	8b7b      	ldrh	r3, [r7, #26]
 8006cb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cbe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4413      	add	r3, r2
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cdc:	833b      	strh	r3, [r7, #24]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	441a      	add	r2, r3
 8006ce8:	8b3b      	ldrh	r3, [r7, #24]
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cf6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006cfe:	687a      	ldr	r2, [r7, #4]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d14:	82fb      	strh	r3, [r7, #22]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	441a      	add	r2, r3
 8006d20:	8afb      	ldrh	r3, [r7, #22]
 8006d22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d32:	b29b      	uxth	r3, r3
 8006d34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	881b      	ldrh	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d4c:	82bb      	strh	r3, [r7, #20]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	8abb      	ldrh	r3, [r7, #20]
 8006d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	8013      	strh	r3, [r2, #0]
 8006d6e:	e0a3      	b.n	8006eb8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006d7e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d01b      	beq.n	8006dc0 <USB_DeactivateEndpoint+0x2d4>
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	4413      	add	r3, r2
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d9e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	441a      	add	r2, r3
 8006daa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006db0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006dce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d01b      	beq.n	8006e10 <USB_DeactivateEndpoint+0x324>
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	881b      	ldrh	r3, [r3, #0]
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dee:	853b      	strh	r3, [r7, #40]	; 0x28
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e26:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	441a      	add	r2, r3
 8006e32:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	441a      	add	r2, r3
 8006e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	4413      	add	r3, r2
 8006e8a:	881b      	ldrh	r3, [r3, #0]
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e96:	847b      	strh	r3, [r7, #34]	; 0x22
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	441a      	add	r2, r3
 8006ea2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ea4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ea8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006eac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3734      	adds	r7, #52	; 0x34
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bc80      	pop	{r7}
 8006ec2:	4770      	bx	lr

08006ec4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b0cc      	sub	sp, #304	; 0x130
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ece:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ed2:	6018      	str	r0, [r3, #0]
 8006ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006edc:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ee2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	f041 817d 	bne.w	80081ea <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d908      	bls.n	8006f1e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006f1c:	e007      	b.n	8006f2e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006f1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	7b1b      	ldrb	r3, [r3, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d152      	bne.n	8006fe4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6959      	ldr	r1, [r3, #20]
 8006f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	88da      	ldrh	r2, [r3, #6]
 8006f56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006f60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006f64:	6800      	ldr	r0, [r0, #0]
 8006f66:	f001 ff23 	bl	8008db0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f6e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f76:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	601a      	str	r2, [r3, #0]
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	4619      	mov	r1, r3
 8006f90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f94:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006f98:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006f9c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006fa0:	6812      	ldr	r2, [r2, #0]
 8006fa2:	440a      	add	r2, r1
 8006fa4:	601a      	str	r2, [r3, #0]
 8006fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	011a      	lsls	r2, r3, #4
 8006fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fb8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fc8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fd2:	b29a      	uxth	r2, r3
 8006fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fd8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	801a      	strh	r2, [r3, #0]
 8006fe0:	f001 b8b5 	b.w	800814e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	78db      	ldrb	r3, [r3, #3]
 8006ff0:	2b02      	cmp	r3, #2
 8006ff2:	f040 84c6 	bne.w	8007982 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	f240 8443 	bls.w	800789a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8007014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	881b      	ldrh	r3, [r3, #0]
 8007030:	b29b      	uxth	r3, r3
 8007032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007036:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800703a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800703e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007042:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	441a      	add	r2, r3
 8007058:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800705c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007064:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800706c:	b29b      	uxth	r3, r3
 800706e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6a1a      	ldr	r2, [r3, #32]
 800707c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007080:	1ad2      	subs	r2, r2, r3
 8007082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007086:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	009b      	lsls	r3, r3, #2
 80070a6:	4413      	add	r3, r2
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 823e 	beq.w	8007532 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80070be:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070c2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070c6:	6812      	ldr	r2, [r2, #0]
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	785b      	ldrb	r3, [r3, #1]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f040 809a 	bne.w	8007210 <USB_EPStartXfer+0x34c>
 80070dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80070e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80070e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80070ec:	6812      	ldr	r2, [r2, #0]
 80070ee:	601a      	str	r2, [r3, #0]
 80070f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070fe:	b29b      	uxth	r3, r3
 8007100:	4619      	mov	r1, r3
 8007102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007106:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800710a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800710e:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	440a      	add	r2, r1
 8007116:	601a      	str	r2, [r3, #0]
 8007118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800711c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	011a      	lsls	r2, r3, #4
 8007126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800712a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4413      	add	r3, r2
 8007132:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007144:	2b00      	cmp	r3, #0
 8007146:	d122      	bne.n	800718e <USB_EPStartXfer+0x2ca>
 8007148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	b29b      	uxth	r3, r3
 8007156:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800715a:	b29a      	uxth	r2, r3
 800715c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007160:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800716c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800717a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800717e:	b29a      	uxth	r2, r3
 8007180:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007184:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e079      	b.n	8007282 <USB_EPStartXfer+0x3be>
 800718e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007192:	2b3e      	cmp	r3, #62	; 0x3e
 8007194:	d81b      	bhi.n	80071ce <USB_EPStartXfer+0x30a>
 8007196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800719a:	085b      	lsrs	r3, r3, #1
 800719c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d004      	beq.n	80071b6 <USB_EPStartXfer+0x2f2>
 80071ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071b0:	3301      	adds	r3, #1
 80071b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	029b      	lsls	r3, r3, #10
 80071be:	b29a      	uxth	r2, r3
 80071c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	801a      	strh	r2, [r3, #0]
 80071cc:	e059      	b.n	8007282 <USB_EPStartXfer+0x3be>
 80071ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d104      	bne.n	80071ee <USB_EPStartXfer+0x32a>
 80071e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071e8:	3b01      	subs	r3, #1
 80071ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80071ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	029b      	lsls	r3, r3, #10
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007200:	b29a      	uxth	r2, r3
 8007202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007206:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	801a      	strh	r2, [r3, #0]
 800720e:	e038      	b.n	8007282 <USB_EPStartXfer+0x3be>
 8007210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	785b      	ldrb	r3, [r3, #1]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d130      	bne.n	8007282 <USB_EPStartXfer+0x3be>
 8007220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800722e:	b29b      	uxth	r3, r3
 8007230:	4619      	mov	r1, r3
 8007232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007236:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800723a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800723e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	440a      	add	r2, r1
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	011a      	lsls	r2, r3, #4
 8007256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4413      	add	r3, r2
 8007262:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8007266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800726e:	601a      	str	r2, [r3, #0]
 8007270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007274:	b29a      	uxth	r2, r3
 8007276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800727a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	895b      	ldrh	r3, [r3, #10]
 800728e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007296:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	6959      	ldr	r1, [r3, #20]
 800729e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80072a8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80072ac:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80072b0:	6800      	ldr	r0, [r0, #0]
 80072b2:	f001 fd7d 	bl	8008db0 <USB_WritePMA>
            ep->xfer_buff += len;
 80072b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	695a      	ldr	r2, [r3, #20]
 80072c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072c6:	441a      	add	r2, r3
 80072c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80072d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d90f      	bls.n	8007310 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80072f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007300:	1ad2      	subs	r2, r2, r3
 8007302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	621a      	str	r2, [r3, #32]
 800730e:	e00e      	b.n	800732e <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8007310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007324:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800732e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	f040 809a 	bne.w	8007474 <USB_EPStartXfer+0x5b0>
 8007340:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007344:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007348:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800734c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007350:	6812      	ldr	r2, [r2, #0]
 8007352:	601a      	str	r2, [r3, #0]
 8007354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007358:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007362:	b29b      	uxth	r3, r3
 8007364:	4619      	mov	r1, r3
 8007366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800736a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800736e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007372:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8007376:	6812      	ldr	r2, [r2, #0]
 8007378:	440a      	add	r2, r1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007380:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	011a      	lsls	r2, r3, #4
 800738a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800738e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4413      	add	r3, r2
 8007396:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800739a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800739e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d122      	bne.n	80073f2 <USB_EPStartXfer+0x52e>
 80073ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073b0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	881b      	ldrh	r3, [r3, #0]
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80073be:	b29a      	uxth	r2, r3
 80073c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	801a      	strh	r2, [r3, #0]
 80073cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80073e8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	e083      	b.n	80074fa <USB_EPStartXfer+0x636>
 80073f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073f6:	2b3e      	cmp	r3, #62	; 0x3e
 80073f8:	d81b      	bhi.n	8007432 <USB_EPStartXfer+0x56e>
 80073fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <USB_EPStartXfer+0x556>
 8007410:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007414:	3301      	adds	r3, #1
 8007416:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800741a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800741e:	b29b      	uxth	r3, r3
 8007420:	029b      	lsls	r3, r3, #10
 8007422:	b29a      	uxth	r2, r3
 8007424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007428:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e063      	b.n	80074fa <USB_EPStartXfer+0x636>
 8007432:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007436:	095b      	lsrs	r3, r3, #5
 8007438:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800743c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007440:	f003 031f 	and.w	r3, r3, #31
 8007444:	2b00      	cmp	r3, #0
 8007446:	d104      	bne.n	8007452 <USB_EPStartXfer+0x58e>
 8007448:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800744c:	3b01      	subs	r3, #1
 800744e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007452:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007456:	b29b      	uxth	r3, r3
 8007458:	029b      	lsls	r3, r3, #10
 800745a:	b29b      	uxth	r3, r3
 800745c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007460:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007464:	b29a      	uxth	r2, r3
 8007466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	e042      	b.n	80074fa <USB_EPStartXfer+0x636>
 8007474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	785b      	ldrb	r3, [r3, #1]
 8007480:	2b01      	cmp	r3, #1
 8007482:	d13a      	bne.n	80074fa <USB_EPStartXfer+0x636>
 8007484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007488:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800748c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007490:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007494:	6812      	ldr	r2, [r2, #0]
 8007496:	601a      	str	r2, [r3, #0]
 8007498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800749c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	4619      	mov	r1, r3
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80074b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80074ba:	6812      	ldr	r2, [r2, #0]
 80074bc:	440a      	add	r2, r1
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	011a      	lsls	r2, r3, #4
 80074ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074d2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4413      	add	r3, r2
 80074da:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80074de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074e2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ec:	b29a      	uxth	r2, r3
 80074ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80074fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	891b      	ldrh	r3, [r3, #8]
 8007506:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800750a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800750e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6959      	ldr	r1, [r3, #20]
 8007516:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800751a:	b29b      	uxth	r3, r3
 800751c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007520:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007524:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007528:	6800      	ldr	r0, [r0, #0]
 800752a:	f001 fc41 	bl	8008db0 <USB_WritePMA>
 800752e:	f000 be0e 	b.w	800814e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007536:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	785b      	ldrb	r3, [r3, #1]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d16d      	bne.n	800761e <USB_EPStartXfer+0x75a>
 8007542:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007546:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	64bb      	str	r3, [r7, #72]	; 0x48
 800754e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755c:	b29b      	uxth	r3, r3
 800755e:	461a      	mov	r2, r3
 8007560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007562:	4413      	add	r3, r2
 8007564:	64bb      	str	r3, [r7, #72]	; 0x48
 8007566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800756a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	011a      	lsls	r2, r3, #4
 8007574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007576:	4413      	add	r3, r2
 8007578:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800757c:	647b      	str	r3, [r7, #68]	; 0x44
 800757e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d112      	bne.n	80075ac <USB_EPStartXfer+0x6e8>
 8007586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007588:	881b      	ldrh	r3, [r3, #0]
 800758a:	b29b      	uxth	r3, r3
 800758c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007590:	b29a      	uxth	r2, r3
 8007592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007594:	801a      	strh	r2, [r3, #0]
 8007596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	e063      	b.n	8007674 <USB_EPStartXfer+0x7b0>
 80075ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b0:	2b3e      	cmp	r3, #62	; 0x3e
 80075b2:	d817      	bhi.n	80075e4 <USB_EPStartXfer+0x720>
 80075b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075b8:	085b      	lsrs	r3, r3, #1
 80075ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d004      	beq.n	80075d4 <USB_EPStartXfer+0x710>
 80075ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075ce:	3301      	adds	r3, #1
 80075d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075d8:	b29b      	uxth	r3, r3
 80075da:	029b      	lsls	r3, r3, #10
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075e0:	801a      	strh	r2, [r3, #0]
 80075e2:	e047      	b.n	8007674 <USB_EPStartXfer+0x7b0>
 80075e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e8:	095b      	lsrs	r3, r3, #5
 80075ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80075ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075f2:	f003 031f 	and.w	r3, r3, #31
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d104      	bne.n	8007604 <USB_EPStartXfer+0x740>
 80075fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80075fe:	3b01      	subs	r3, #1
 8007600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007604:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007608:	b29b      	uxth	r3, r3
 800760a:	029b      	lsls	r3, r3, #10
 800760c:	b29b      	uxth	r3, r3
 800760e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007612:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007616:	b29a      	uxth	r2, r3
 8007618:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	e02a      	b.n	8007674 <USB_EPStartXfer+0x7b0>
 800761e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	785b      	ldrb	r3, [r3, #1]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d122      	bne.n	8007674 <USB_EPStartXfer+0x7b0>
 800762e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	653b      	str	r3, [r7, #80]	; 0x50
 800763a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800763e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007648:	b29b      	uxth	r3, r3
 800764a:	461a      	mov	r2, r3
 800764c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764e:	4413      	add	r3, r2
 8007650:	653b      	str	r3, [r7, #80]	; 0x50
 8007652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	011a      	lsls	r2, r3, #4
 8007660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007662:	4413      	add	r3, r2
 8007664:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007668:	64fb      	str	r3, [r7, #76]	; 0x4c
 800766a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800766e:	b29a      	uxth	r2, r3
 8007670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007672:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007678:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	891b      	ldrh	r3, [r3, #8]
 8007680:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6959      	ldr	r1, [r3, #20]
 8007690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007694:	b29b      	uxth	r3, r3
 8007696:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800769a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800769e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80076a2:	6800      	ldr	r0, [r0, #0]
 80076a4:	f001 fb84 	bl	8008db0 <USB_WritePMA>
            ep->xfer_buff += len;
 80076a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076b8:	441a      	add	r2, r3
 80076ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80076c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	6a1a      	ldr	r2, [r3, #32]
 80076d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d90f      	bls.n	8007702 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80076e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	6a1a      	ldr	r2, [r3, #32]
 80076ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	621a      	str	r2, [r3, #32]
 8007700:	e00e      	b.n	8007720 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8007702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007706:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007724:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	643b      	str	r3, [r7, #64]	; 0x40
 800772c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007730:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d16d      	bne.n	8007818 <USB_EPStartXfer+0x954>
 800773c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007740:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	63bb      	str	r3, [r7, #56]	; 0x38
 8007748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800774c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007756:	b29b      	uxth	r3, r3
 8007758:	461a      	mov	r2, r3
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	4413      	add	r3, r2
 800775e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	011a      	lsls	r2, r3, #4
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	4413      	add	r3, r2
 8007772:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007776:	637b      	str	r3, [r7, #52]	; 0x34
 8007778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800777c:	2b00      	cmp	r3, #0
 800777e:	d112      	bne.n	80077a6 <USB_EPStartXfer+0x8e2>
 8007780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007782:	881b      	ldrh	r3, [r3, #0]
 8007784:	b29b      	uxth	r3, r3
 8007786:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800778a:	b29a      	uxth	r2, r3
 800778c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800778e:	801a      	strh	r2, [r3, #0]
 8007790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007792:	881b      	ldrh	r3, [r3, #0]
 8007794:	b29b      	uxth	r3, r3
 8007796:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800779a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800779e:	b29a      	uxth	r2, r3
 80077a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a2:	801a      	strh	r2, [r3, #0]
 80077a4:	e05d      	b.n	8007862 <USB_EPStartXfer+0x99e>
 80077a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077aa:	2b3e      	cmp	r3, #62	; 0x3e
 80077ac:	d817      	bhi.n	80077de <USB_EPStartXfer+0x91a>
 80077ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077b2:	085b      	lsrs	r3, r3, #1
 80077b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USB_EPStartXfer+0x90a>
 80077c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077c8:	3301      	adds	r3, #1
 80077ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077da:	801a      	strh	r2, [r3, #0]
 80077dc:	e041      	b.n	8007862 <USB_EPStartXfer+0x99e>
 80077de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077e2:	095b      	lsrs	r3, r3, #5
 80077e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d104      	bne.n	80077fe <USB_EPStartXfer+0x93a>
 80077f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80077f8:	3b01      	subs	r3, #1
 80077fa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80077fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007802:	b29b      	uxth	r3, r3
 8007804:	029b      	lsls	r3, r3, #10
 8007806:	b29b      	uxth	r3, r3
 8007808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800780c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007810:	b29a      	uxth	r2, r3
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e024      	b.n	8007862 <USB_EPStartXfer+0x99e>
 8007818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d11c      	bne.n	8007862 <USB_EPStartXfer+0x99e>
 8007828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007836:	b29b      	uxth	r3, r3
 8007838:	461a      	mov	r2, r3
 800783a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800783c:	4413      	add	r3, r2
 800783e:	643b      	str	r3, [r7, #64]	; 0x40
 8007840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	011a      	lsls	r2, r3, #4
 800784e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007850:	4413      	add	r3, r2
 8007852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007856:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785c:	b29a      	uxth	r2, r3
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007862:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007866:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	895b      	ldrh	r3, [r3, #10]
 800786e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007876:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	6959      	ldr	r1, [r3, #20]
 800787e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007882:	b29b      	uxth	r3, r3
 8007884:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007888:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800788c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007890:	6800      	ldr	r0, [r0, #0]
 8007892:	f001 fa8d 	bl	8008db0 <USB_WritePMA>
 8007896:	f000 bc5a 	b.w	800814e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800789a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800789e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6a1b      	ldr	r3, [r3, #32]
 80078a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80078aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	881b      	ldrh	r3, [r3, #0]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80078cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80078d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80078e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	441a      	add	r2, r3
 80078ee:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80078f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007902:	b29b      	uxth	r3, r3
 8007904:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800790a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007926:	4413      	add	r3, r2
 8007928:	65fb      	str	r3, [r7, #92]	; 0x5c
 800792a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800792e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	011a      	lsls	r2, r3, #4
 8007938:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800793a:	4413      	add	r3, r2
 800793c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007940:	65bb      	str	r3, [r7, #88]	; 0x58
 8007942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007946:	b29a      	uxth	r2, r3
 8007948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800794a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800794c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	891b      	ldrh	r3, [r3, #8]
 8007958:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800795c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	6959      	ldr	r1, [r3, #20]
 8007968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800796c:	b29b      	uxth	r3, r3
 800796e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007972:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007976:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800797a:	6800      	ldr	r0, [r0, #0]
 800797c:	f001 fa18 	bl	8008db0 <USB_WritePMA>
 8007980:	e3e5      	b.n	800814e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007982:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007986:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007990:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80079ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80079ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079d2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80079d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079da:	b29b      	uxth	r3, r3
 80079dc:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80079de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6a1a      	ldr	r2, [r3, #32]
 80079ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ee:	1ad2      	subs	r2, r2, r3
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80079fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	4413      	add	r3, r2
 8007a16:	881b      	ldrh	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 81bc 	beq.w	8007d9c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	785b      	ldrb	r3, [r3, #1]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d16d      	bne.n	8007b1e <USB_EPStartXfer+0xc5a>
 8007a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a62:	4413      	add	r3, r2
 8007a64:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	011a      	lsls	r2, r3, #4
 8007a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a76:	4413      	add	r3, r2
 8007a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007a7c:	677b      	str	r3, [r7, #116]	; 0x74
 8007a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d112      	bne.n	8007aac <USB_EPStartXfer+0xbe8>
 8007a86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a88:	881b      	ldrh	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa8:	801a      	strh	r2, [r3, #0]
 8007aaa:	e060      	b.n	8007b6e <USB_EPStartXfer+0xcaa>
 8007aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8007ab2:	d817      	bhi.n	8007ae4 <USB_EPStartXfer+0xc20>
 8007ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab8:	085b      	lsrs	r3, r3, #1
 8007aba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d004      	beq.n	8007ad4 <USB_EPStartXfer+0xc10>
 8007aca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ace:	3301      	adds	r3, #1
 8007ad0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007ad4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	029b      	lsls	r3, r3, #10
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ae0:	801a      	strh	r2, [r3, #0]
 8007ae2:	e044      	b.n	8007b6e <USB_EPStartXfer+0xcaa>
 8007ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ae8:	095b      	lsrs	r3, r3, #5
 8007aea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007af2:	f003 031f 	and.w	r3, r3, #31
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d104      	bne.n	8007b04 <USB_EPStartXfer+0xc40>
 8007afa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007afe:	3b01      	subs	r3, #1
 8007b00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8007b04:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	029b      	lsls	r3, r3, #10
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b1a:	801a      	strh	r2, [r3, #0]
 8007b1c:	e027      	b.n	8007b6e <USB_EPStartXfer+0xcaa>
 8007b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	785b      	ldrb	r3, [r3, #1]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d11f      	bne.n	8007b6e <USB_EPStartXfer+0xcaa>
 8007b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b44:	4413      	add	r3, r2
 8007b46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	011a      	lsls	r2, r3, #4
 8007b58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007b62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007b64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007b6c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	895b      	ldrh	r3, [r3, #10]
 8007b7a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	6959      	ldr	r1, [r3, #20]
 8007b8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b8e:	b29b      	uxth	r3, r3
 8007b90:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b94:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b98:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b9c:	6800      	ldr	r0, [r0, #0]
 8007b9e:	f001 f907 	bl	8008db0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695a      	ldr	r2, [r3, #20]
 8007bae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bb2:	441a      	add	r2, r3
 8007bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007bc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a1a      	ldr	r2, [r3, #32]
 8007bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d90f      	bls.n	8007bfc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8007bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6a1a      	ldr	r2, [r3, #32]
 8007be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bec:	1ad2      	subs	r2, r2, r3
 8007bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	621a      	str	r2, [r3, #32]
 8007bfa:	e00e      	b.n	8007c1a <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8007bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2200      	movs	r2, #0
 8007c18:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8295 	beq.w	800814e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	785b      	ldrb	r3, [r3, #1]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d16d      	bne.n	8007d10 <USB_EPStartXfer+0xe4c>
 8007c34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	461a      	mov	r2, r3
 8007c52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c54:	4413      	add	r3, r2
 8007c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	011a      	lsls	r2, r3, #4
 8007c66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007c68:	4413      	add	r3, r2
 8007c6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007c6e:	667b      	str	r3, [r7, #100]	; 0x64
 8007c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d112      	bne.n	8007c9e <USB_EPStartXfer+0xdda>
 8007c78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c9a:	801a      	strh	r2, [r3, #0]
 8007c9c:	e063      	b.n	8007d66 <USB_EPStartXfer+0xea2>
 8007c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8007ca4:	d817      	bhi.n	8007cd6 <USB_EPStartXfer+0xe12>
 8007ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cb4:	f003 0301 	and.w	r3, r3, #1
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <USB_EPStartXfer+0xe02>
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	029b      	lsls	r3, r3, #10
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cd2:	801a      	strh	r2, [r3, #0]
 8007cd4:	e047      	b.n	8007d66 <USB_EPStartXfer+0xea2>
 8007cd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cda:	095b      	lsrs	r3, r3, #5
 8007cdc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ce4:	f003 031f 	and.w	r3, r3, #31
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d104      	bne.n	8007cf6 <USB_EPStartXfer+0xe32>
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	029b      	lsls	r3, r3, #10
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d0c:	801a      	strh	r2, [r3, #0]
 8007d0e:	e02a      	b.n	8007d66 <USB_EPStartXfer+0xea2>
 8007d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	785b      	ldrb	r3, [r3, #1]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d122      	bne.n	8007d66 <USB_EPStartXfer+0xea2>
 8007d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8007d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d40:	4413      	add	r3, r2
 8007d42:	673b      	str	r3, [r7, #112]	; 0x70
 8007d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	011a      	lsls	r2, r3, #4
 8007d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d54:	4413      	add	r3, r2
 8007d56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d64:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007d66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	891b      	ldrh	r3, [r3, #8]
 8007d72:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	6959      	ldr	r1, [r3, #20]
 8007d82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d8c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d90:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d94:	6800      	ldr	r0, [r0, #0]
 8007d96:	f001 f80b 	bl	8008db0 <USB_WritePMA>
 8007d9a:	e1d8      	b.n	800814e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	785b      	ldrb	r3, [r3, #1]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d178      	bne.n	8007e9e <USB_EPStartXfer+0xfda>
 8007dac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007db0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	011a      	lsls	r2, r3, #4
 8007de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007de8:	4413      	add	r3, r2
 8007dea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007dee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d116      	bne.n	8007e28 <USB_EPStartXfer+0xf64>
 8007dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e0c:	801a      	strh	r2, [r3, #0]
 8007e0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e1e:	b29a      	uxth	r2, r3
 8007e20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e24:	801a      	strh	r2, [r3, #0]
 8007e26:	e06b      	b.n	8007f00 <USB_EPStartXfer+0x103c>
 8007e28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e2c:	2b3e      	cmp	r3, #62	; 0x3e
 8007e2e:	d818      	bhi.n	8007e62 <USB_EPStartXfer+0xf9e>
 8007e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e34:	085b      	lsrs	r3, r3, #1
 8007e36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d004      	beq.n	8007e50 <USB_EPStartXfer+0xf8c>
 8007e46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	029b      	lsls	r3, r3, #10
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e5e:	801a      	strh	r2, [r3, #0]
 8007e60:	e04e      	b.n	8007f00 <USB_EPStartXfer+0x103c>
 8007e62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e66:	095b      	lsrs	r3, r3, #5
 8007e68:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e70:	f003 031f 	and.w	r3, r3, #31
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <USB_EPStartXfer+0xfbe>
 8007e78:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007e82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	029b      	lsls	r3, r3, #10
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007e9a:	801a      	strh	r2, [r3, #0]
 8007e9c:	e030      	b.n	8007f00 <USB_EPStartXfer+0x103c>
 8007e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	785b      	ldrb	r3, [r3, #1]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d128      	bne.n	8007f00 <USB_EPStartXfer+0x103c>
 8007eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ec0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	011a      	lsls	r2, r3, #4
 8007ee6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007eea:	4413      	add	r3, r2
 8007eec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007efe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	891b      	ldrh	r3, [r3, #8]
 8007f0c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	6959      	ldr	r1, [r3, #20]
 8007f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f26:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f2a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f2e:	6800      	ldr	r0, [r0, #0]
 8007f30:	f000 ff3e 	bl	8008db0 <USB_WritePMA>
          ep->xfer_buff += len;
 8007f34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	695a      	ldr	r2, [r3, #20]
 8007f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f44:	441a      	add	r2, r3
 8007f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6a1a      	ldr	r2, [r3, #32]
 8007f5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d90f      	bls.n	8007f8e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6a1a      	ldr	r2, [r3, #32]
 8007f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f7e:	1ad2      	subs	r2, r2, r3
 8007f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	621a      	str	r2, [r3, #32]
 8007f8c:	e00e      	b.n	8007fac <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80cc 	beq.w	800814e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007fb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007fc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	785b      	ldrb	r3, [r3, #1]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d178      	bne.n	80080c6 <USB_EPStartXfer+0x1202>
 8007fd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	011a      	lsls	r2, r3, #4
 800800c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008010:	4413      	add	r3, r2
 8008012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800801a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d116      	bne.n	8008050 <USB_EPStartXfer+0x118c>
 8008022:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b29b      	uxth	r3, r3
 800802a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800802e:	b29a      	uxth	r2, r3
 8008030:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008034:	801a      	strh	r2, [r3, #0]
 8008036:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800804c:	801a      	strh	r2, [r3, #0]
 800804e:	e064      	b.n	800811a <USB_EPStartXfer+0x1256>
 8008050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008054:	2b3e      	cmp	r3, #62	; 0x3e
 8008056:	d818      	bhi.n	800808a <USB_EPStartXfer+0x11c6>
 8008058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800805c:	085b      	lsrs	r3, r3, #1
 800805e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008066:	f003 0301 	and.w	r3, r3, #1
 800806a:	2b00      	cmp	r3, #0
 800806c:	d004      	beq.n	8008078 <USB_EPStartXfer+0x11b4>
 800806e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008072:	3301      	adds	r3, #1
 8008074:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008078:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800807c:	b29b      	uxth	r3, r3
 800807e:	029b      	lsls	r3, r3, #10
 8008080:	b29a      	uxth	r2, r3
 8008082:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008086:	801a      	strh	r2, [r3, #0]
 8008088:	e047      	b.n	800811a <USB_EPStartXfer+0x1256>
 800808a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008098:	f003 031f 	and.w	r3, r3, #31
 800809c:	2b00      	cmp	r3, #0
 800809e:	d104      	bne.n	80080aa <USB_EPStartXfer+0x11e6>
 80080a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080a4:	3b01      	subs	r3, #1
 80080a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80080aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	029b      	lsls	r3, r3, #10
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e029      	b.n	800811a <USB_EPStartXfer+0x1256>
 80080c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	785b      	ldrb	r3, [r3, #1]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d121      	bne.n	800811a <USB_EPStartXfer+0x1256>
 80080d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	461a      	mov	r2, r3
 80080e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080ec:	4413      	add	r3, r2
 80080ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80080f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80080f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	011a      	lsls	r2, r3, #4
 8008100:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008104:	4413      	add	r3, r2
 8008106:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800810a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800810e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008112:	b29a      	uxth	r2, r3
 8008114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008118:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800811a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800811e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	895b      	ldrh	r3, [r3, #10]
 8008126:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800812a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800812e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	6959      	ldr	r1, [r3, #20]
 8008136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800813a:	b29b      	uxth	r3, r3
 800813c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8008140:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8008144:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8008148:	6800      	ldr	r0, [r0, #0]
 800814a:	f000 fe31 	bl	8008db0 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800815c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	4413      	add	r3, r2
 8008168:	881b      	ldrh	r3, [r3, #0]
 800816a:	b29b      	uxth	r3, r3
 800816c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008170:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8008174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800817c:	8013      	strh	r3, [r2, #0]
 800817e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008182:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8008186:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800818a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800818e:	8812      	ldrh	r2, [r2, #0]
 8008190:	f082 0210 	eor.w	r2, r2, #16
 8008194:	801a      	strh	r2, [r3, #0]
 8008196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800819a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800819e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80081a2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80081a6:	8812      	ldrh	r2, [r2, #0]
 80081a8:	f082 0220 	eor.w	r2, r2, #32
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	441a      	add	r2, r3
 80081c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081cc:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80081d0:	881b      	ldrh	r3, [r3, #0]
 80081d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	8013      	strh	r3, [r2, #0]
 80081e6:	f000 bc9f 	b.w	8008b28 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80081ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	7b1b      	ldrb	r3, [r3, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	f040 80ae 	bne.w	8008358 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80081fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008200:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	699a      	ldr	r2, [r3, #24]
 8008208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	429a      	cmp	r2, r3
 8008216:	d917      	bls.n	8008248 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8008218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800821c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8008228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800822c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	699a      	ldr	r2, [r3, #24]
 8008234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008238:	1ad2      	subs	r2, r2, r3
 800823a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	619a      	str	r2, [r3, #24]
 8008246:	e00e      	b.n	8008266 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8008258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800825c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800826a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008274:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008278:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008282:	b29b      	uxth	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800828a:	4413      	add	r3, r2
 800828c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008294:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	011a      	lsls	r2, r3, #4
 800829e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80082a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d116      	bne.n	80082e2 <USB_EPStartXfer+0x141e>
 80082b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	b29b      	uxth	r3, r3
 80082bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082c6:	801a      	strh	r2, [r3, #0]
 80082c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082de:	801a      	strh	r2, [r3, #0]
 80082e0:	e3e8      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
 80082e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082e6:	2b3e      	cmp	r3, #62	; 0x3e
 80082e8:	d818      	bhi.n	800831c <USB_EPStartXfer+0x1458>
 80082ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082ee:	085b      	lsrs	r3, r3, #1
 80082f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80082f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <USB_EPStartXfer+0x1446>
 8008300:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008304:	3301      	adds	r3, #1
 8008306:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800830a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800830e:	b29b      	uxth	r3, r3
 8008310:	029b      	lsls	r3, r3, #10
 8008312:	b29a      	uxth	r2, r3
 8008314:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008318:	801a      	strh	r2, [r3, #0]
 800831a:	e3cb      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
 800831c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008320:	095b      	lsrs	r3, r3, #5
 8008322:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800832a:	f003 031f 	and.w	r3, r3, #31
 800832e:	2b00      	cmp	r3, #0
 8008330:	d104      	bne.n	800833c <USB_EPStartXfer+0x1478>
 8008332:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008336:	3b01      	subs	r3, #1
 8008338:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800833c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008340:	b29b      	uxth	r3, r3
 8008342:	029b      	lsls	r3, r3, #10
 8008344:	b29b      	uxth	r3, r3
 8008346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800834a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800834e:	b29a      	uxth	r2, r3
 8008350:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008354:	801a      	strh	r2, [r3, #0]
 8008356:	e3ad      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008358:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800835c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	78db      	ldrb	r3, [r3, #3]
 8008364:	2b02      	cmp	r3, #2
 8008366:	f040 8200 	bne.w	800876a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800836a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800836e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	785b      	ldrb	r3, [r3, #1]
 8008376:	2b00      	cmp	r3, #0
 8008378:	f040 8091 	bne.w	800849e <USB_EPStartXfer+0x15da>
 800837c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800838a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800838e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008398:	b29b      	uxth	r3, r3
 800839a:	461a      	mov	r2, r3
 800839c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083a0:	4413      	add	r3, r2
 80083a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80083a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	011a      	lsls	r2, r3, #4
 80083b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80083b8:	4413      	add	r3, r2
 80083ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80083be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d116      	bne.n	8008400 <USB_EPStartXfer+0x153c>
 80083d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083d6:	881b      	ldrh	r3, [r3, #0]
 80083d8:	b29b      	uxth	r3, r3
 80083da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80083de:	b29a      	uxth	r2, r3
 80083e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083e4:	801a      	strh	r2, [r3, #0]
 80083e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083ea:	881b      	ldrh	r3, [r3, #0]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083fc:	801a      	strh	r2, [r3, #0]
 80083fe:	e083      	b.n	8008508 <USB_EPStartXfer+0x1644>
 8008400:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008404:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	2b3e      	cmp	r3, #62	; 0x3e
 800840e:	d820      	bhi.n	8008452 <USB_EPStartXfer+0x158e>
 8008410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008414:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	085b      	lsrs	r3, r3, #1
 800841e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008422:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008426:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	691b      	ldr	r3, [r3, #16]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	2b00      	cmp	r3, #0
 8008434:	d004      	beq.n	8008440 <USB_EPStartXfer+0x157c>
 8008436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800843a:	3301      	adds	r3, #1
 800843c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008440:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008444:	b29b      	uxth	r3, r3
 8008446:	029b      	lsls	r3, r3, #10
 8008448:	b29a      	uxth	r2, r3
 800844a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800844e:	801a      	strh	r2, [r3, #0]
 8008450:	e05a      	b.n	8008508 <USB_EPStartXfer+0x1644>
 8008452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008456:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	095b      	lsrs	r3, r3, #5
 8008460:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	691b      	ldr	r3, [r3, #16]
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <USB_EPStartXfer+0x15be>
 8008478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800847c:	3b01      	subs	r3, #1
 800847e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008486:	b29b      	uxth	r3, r3
 8008488:	029b      	lsls	r3, r3, #10
 800848a:	b29b      	uxth	r3, r3
 800848c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008494:	b29a      	uxth	r2, r3
 8008496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	e034      	b.n	8008508 <USB_EPStartXfer+0x1644>
 800849e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	785b      	ldrb	r3, [r3, #1]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d12c      	bne.n	8008508 <USB_EPStartXfer+0x1644>
 80084ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	461a      	mov	r2, r3
 80084ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084d2:	4413      	add	r3, r2
 80084d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80084d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	011a      	lsls	r2, r3, #4
 80084e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084ea:	4413      	add	r3, r2
 80084ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	b29a      	uxth	r2, r3
 8008502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008506:	801a      	strh	r2, [r3, #0]
 8008508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800850c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008516:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	2b00      	cmp	r3, #0
 8008524:	f040 8091 	bne.w	800864a <USB_EPStartXfer+0x1786>
 8008528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800852c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800853a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008544:	b29b      	uxth	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800854c:	4413      	add	r3, r2
 800854e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	011a      	lsls	r2, r3, #4
 8008560:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008564:	4413      	add	r3, r2
 8008566:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800856a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800856e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d116      	bne.n	80085ac <USB_EPStartXfer+0x16e8>
 800857e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	b29b      	uxth	r3, r3
 8008586:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800858a:	b29a      	uxth	r2, r3
 800858c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008590:	801a      	strh	r2, [r3, #0]
 8008592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	b29b      	uxth	r3, r3
 800859a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800859e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085a2:	b29a      	uxth	r2, r3
 80085a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085a8:	801a      	strh	r2, [r3, #0]
 80085aa:	e07c      	b.n	80086a6 <USB_EPStartXfer+0x17e2>
 80085ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	691b      	ldr	r3, [r3, #16]
 80085b8:	2b3e      	cmp	r3, #62	; 0x3e
 80085ba:	d820      	bhi.n	80085fe <USB_EPStartXfer+0x173a>
 80085bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	691b      	ldr	r3, [r3, #16]
 80085da:	f003 0301 	and.w	r3, r3, #1
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d004      	beq.n	80085ec <USB_EPStartXfer+0x1728>
 80085e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085e6:	3301      	adds	r3, #1
 80085e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	029b      	lsls	r3, r3, #10
 80085f4:	b29a      	uxth	r2, r3
 80085f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80085fa:	801a      	strh	r2, [r3, #0]
 80085fc:	e053      	b.n	80086a6 <USB_EPStartXfer+0x17e2>
 80085fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f003 031f 	and.w	r3, r3, #31
 8008620:	2b00      	cmp	r3, #0
 8008622:	d104      	bne.n	800862e <USB_EPStartXfer+0x176a>
 8008624:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008628:	3b01      	subs	r3, #1
 800862a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800862e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008632:	b29b      	uxth	r3, r3
 8008634:	029b      	lsls	r3, r3, #10
 8008636:	b29b      	uxth	r3, r3
 8008638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008640:	b29a      	uxth	r2, r3
 8008642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e02d      	b.n	80086a6 <USB_EPStartXfer+0x17e2>
 800864a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800864e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	785b      	ldrb	r3, [r3, #1]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d125      	bne.n	80086a6 <USB_EPStartXfer+0x17e2>
 800865a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800865e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008668:	b29b      	uxth	r3, r3
 800866a:	461a      	mov	r2, r3
 800866c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008670:	4413      	add	r3, r2
 8008672:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800867a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	011a      	lsls	r2, r3, #4
 8008684:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008688:	4413      	add	r3, r2
 800868a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800868e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008692:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008696:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	b29a      	uxth	r2, r3
 80086a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80086a4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80086a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f000 81fe 	beq.w	8008ab4 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80086b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4413      	add	r3, r2
 80086d2:	881b      	ldrh	r3, [r3, #0]
 80086d4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086d8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d005      	beq.n	80086f0 <USB_EPStartXfer+0x182c>
 80086e4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10d      	bne.n	800870c <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086f0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80086f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f040 81db 	bne.w	8008ab4 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80086fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 81d4 	bne.w	8008ab4 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800870c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008710:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800871a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	881b      	ldrh	r3, [r3, #0]
 8008728:	b29b      	uxth	r3, r3
 800872a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800872e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008732:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8008736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800873a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	441a      	add	r2, r3
 8008750:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800875c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008764:	b29b      	uxth	r3, r3
 8008766:	8013      	strh	r3, [r2, #0]
 8008768:	e1a4      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800876a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800876e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	78db      	ldrb	r3, [r3, #3]
 8008776:	2b01      	cmp	r3, #1
 8008778:	f040 819a 	bne.w	8008ab0 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800877c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008780:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	699a      	ldr	r2, [r3, #24]
 8008788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800878c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	429a      	cmp	r2, r3
 8008796:	d917      	bls.n	80087c8 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8008798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800879c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80087a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	699a      	ldr	r2, [r3, #24]
 80087b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087b8:	1ad2      	subs	r2, r2, r3
 80087ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	619a      	str	r2, [r3, #24]
 80087c6:	e00e      	b.n	80087e6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80087c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80087d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	2200      	movs	r2, #0
 80087e4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80087e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	785b      	ldrb	r3, [r3, #1]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d178      	bne.n	80088e8 <USB_EPStartXfer+0x1a24>
 80087f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008808:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008812:	b29b      	uxth	r3, r3
 8008814:	461a      	mov	r2, r3
 8008816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800881a:	4413      	add	r3, r2
 800881c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	011a      	lsls	r2, r3, #4
 800882e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008832:	4413      	add	r3, r2
 8008834:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008838:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800883c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008840:	2b00      	cmp	r3, #0
 8008842:	d116      	bne.n	8008872 <USB_EPStartXfer+0x19ae>
 8008844:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008850:	b29a      	uxth	r2, r3
 8008852:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008856:	801a      	strh	r2, [r3, #0]
 8008858:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008868:	b29a      	uxth	r2, r3
 800886a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800886e:	801a      	strh	r2, [r3, #0]
 8008870:	e06b      	b.n	800894a <USB_EPStartXfer+0x1a86>
 8008872:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008876:	2b3e      	cmp	r3, #62	; 0x3e
 8008878:	d818      	bhi.n	80088ac <USB_EPStartXfer+0x19e8>
 800887a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800887e:	085b      	lsrs	r3, r3, #1
 8008880:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <USB_EPStartXfer+0x19d6>
 8008890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008894:	3301      	adds	r3, #1
 8008896:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800889a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889e:	b29b      	uxth	r3, r3
 80088a0:	029b      	lsls	r3, r3, #10
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088a8:	801a      	strh	r2, [r3, #0]
 80088aa:	e04e      	b.n	800894a <USB_EPStartXfer+0x1a86>
 80088ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088b0:	095b      	lsrs	r3, r3, #5
 80088b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d104      	bne.n	80088cc <USB_EPStartXfer+0x1a08>
 80088c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c6:	3b01      	subs	r3, #1
 80088c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80088cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d0:	b29b      	uxth	r3, r3
 80088d2:	029b      	lsls	r3, r3, #10
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80088e4:	801a      	strh	r2, [r3, #0]
 80088e6:	e030      	b.n	800894a <USB_EPStartXfer+0x1a86>
 80088e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d128      	bne.n	800894a <USB_EPStartXfer+0x1a86>
 80088f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008906:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800890a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008914:	b29b      	uxth	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800891c:	4413      	add	r3, r2
 800891e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	011a      	lsls	r2, r3, #4
 8008930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008934:	4413      	add	r3, r2
 8008936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800893a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800893e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008942:	b29a      	uxth	r2, r3
 8008944:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008948:	801a      	strh	r2, [r3, #0]
 800894a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800894e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800895c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d178      	bne.n	8008a5a <USB_EPStartXfer+0x1b96>
 8008968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800896c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008976:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800897a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008984:	b29b      	uxth	r3, r3
 8008986:	461a      	mov	r2, r3
 8008988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800898c:	4413      	add	r3, r2
 800898e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008996:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	011a      	lsls	r2, r3, #4
 80089a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089a4:	4413      	add	r3, r2
 80089a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80089aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80089ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d116      	bne.n	80089e4 <USB_EPStartXfer+0x1b20>
 80089b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	b29b      	uxth	r3, r3
 80089be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089c8:	801a      	strh	r2, [r3, #0]
 80089ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ce:	881b      	ldrh	r3, [r3, #0]
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089da:	b29a      	uxth	r2, r3
 80089dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089e0:	801a      	strh	r2, [r3, #0]
 80089e2:	e067      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
 80089e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089e8:	2b3e      	cmp	r3, #62	; 0x3e
 80089ea:	d818      	bhi.n	8008a1e <USB_EPStartXfer+0x1b5a>
 80089ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089f0:	085b      	lsrs	r3, r3, #1
 80089f2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d004      	beq.n	8008a0c <USB_EPStartXfer+0x1b48>
 8008a02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a06:	3301      	adds	r3, #1
 8008a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	029b      	lsls	r3, r3, #10
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a1a:	801a      	strh	r2, [r3, #0]
 8008a1c:	e04a      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
 8008a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a22:	095b      	lsrs	r3, r3, #5
 8008a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d104      	bne.n	8008a3e <USB_EPStartXfer+0x1b7a>
 8008a34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	029b      	lsls	r3, r3, #10
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a56:	801a      	strh	r2, [r3, #0]
 8008a58:	e02c      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
 8008a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	785b      	ldrb	r3, [r3, #1]
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d124      	bne.n	8008ab4 <USB_EPStartXfer+0x1bf0>
 8008a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a80:	4413      	add	r3, r2
 8008a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	011a      	lsls	r2, r3, #4
 8008a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a98:	4413      	add	r3, r2
 8008a9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008a9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aac:	801a      	strh	r2, [r3, #0]
 8008aae:	e001      	b.n	8008ab4 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e03a      	b.n	8008b2a <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ab8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	881b      	ldrh	r3, [r3, #0]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008ade:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008ae2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ae6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008aea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008af2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8008af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008afa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	441a      	add	r2, r3
 8008b10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b24:	b29b      	uxth	r3, r3
 8008b26:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	785b      	ldrb	r3, [r3, #1]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d020      	beq.n	8008b88 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4413      	add	r3, r2
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5c:	81bb      	strh	r3, [r7, #12]
 8008b5e:	89bb      	ldrh	r3, [r7, #12]
 8008b60:	f083 0310 	eor.w	r3, r3, #16
 8008b64:	81bb      	strh	r3, [r7, #12]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	441a      	add	r2, r3
 8008b70:	89bb      	ldrh	r3, [r7, #12]
 8008b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	8013      	strh	r3, [r2, #0]
 8008b86:	e01f      	b.n	8008bc8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	009b      	lsls	r3, r3, #2
 8008b90:	4413      	add	r3, r2
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b9e:	81fb      	strh	r3, [r7, #14]
 8008ba0:	89fb      	ldrh	r3, [r7, #14]
 8008ba2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008ba6:	81fb      	strh	r3, [r7, #14]
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	89fb      	ldrh	r3, [r7, #14]
 8008bb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bc80      	pop	{r7}
 8008bd2:	4770      	bx	lr

08008bd4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	7b1b      	ldrb	r3, [r3, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 809d 	bne.w	8008d22 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	785b      	ldrb	r3, [r3, #1]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d04c      	beq.n	8008c8a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	823b      	strh	r3, [r7, #16]
 8008bfe:	8a3b      	ldrh	r3, [r7, #16]
 8008c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d01b      	beq.n	8008c40 <USB_EPClearStall+0x6c>
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4413      	add	r3, r2
 8008c12:	881b      	ldrh	r3, [r3, #0]
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c1e:	81fb      	strh	r3, [r7, #14]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	441a      	add	r2, r3
 8008c2a:	89fb      	ldrh	r3, [r7, #14]
 8008c2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	78db      	ldrb	r3, [r3, #3]
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d06c      	beq.n	8008d22 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	4413      	add	r3, r2
 8008c52:	881b      	ldrh	r3, [r3, #0]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c5e:	81bb      	strh	r3, [r7, #12]
 8008c60:	89bb      	ldrh	r3, [r7, #12]
 8008c62:	f083 0320 	eor.w	r3, r3, #32
 8008c66:	81bb      	strh	r3, [r7, #12]
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	009b      	lsls	r3, r3, #2
 8008c70:	441a      	add	r2, r3
 8008c72:	89bb      	ldrh	r3, [r7, #12]
 8008c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	8013      	strh	r3, [r2, #0]
 8008c88:	e04b      	b.n	8008d22 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	82fb      	strh	r3, [r7, #22]
 8008c98:	8afb      	ldrh	r3, [r7, #22]
 8008c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d01b      	beq.n	8008cda <USB_EPClearStall+0x106>
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	881b      	ldrh	r3, [r3, #0]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb8:	82bb      	strh	r3, [r7, #20]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	441a      	add	r2, r3
 8008cc4:	8abb      	ldrh	r3, [r7, #20]
 8008cc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf0:	827b      	strh	r3, [r7, #18]
 8008cf2:	8a7b      	ldrh	r3, [r7, #18]
 8008cf4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008cf8:	827b      	strh	r3, [r7, #18]
 8008cfa:	8a7b      	ldrh	r3, [r7, #18]
 8008cfc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008d00:	827b      	strh	r3, [r7, #18]
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	781b      	ldrb	r3, [r3, #0]
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	441a      	add	r2, r3
 8008d0c:	8a7b      	ldrh	r3, [r7, #18]
 8008d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	371c      	adds	r7, #28
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bc80      	pop	{r7}
 8008d2c:	4770      	bx	lr

08008d2e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	460b      	mov	r3, r1
 8008d38:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008d3a:	78fb      	ldrb	r3, [r7, #3]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d103      	bne.n	8008d48 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2280      	movs	r2, #128	; 0x80
 8008d44:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	370c      	adds	r7, #12
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bc80      	pop	{r7}
 8008d52:	4770      	bx	lr

08008d54 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bc80      	pop	{r7}
 8008d66:	4770      	bx	lr

08008d68 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bc80      	pop	{r7}
 8008d7a:	4770      	bx	lr

08008d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bc80      	pop	{r7}
 8008dae:	4770      	bx	lr

08008db0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b08d      	sub	sp, #52	; 0x34
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	80fb      	strh	r3, [r7, #6]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008dc6:	88bb      	ldrh	r3, [r7, #4]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	085b      	lsrs	r3, r3, #1
 8008dcc:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008dd6:	88fb      	ldrh	r3, [r7, #6]
 8008dd8:	005a      	lsls	r2, r3, #1
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008de2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de8:	e01e      	b.n	8008e28 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df2:	3301      	adds	r3, #1
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	461a      	mov	r2, r3
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e12:	3302      	adds	r3, #2
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e18:	3302      	adds	r3, #2
 8008e1a:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	3301      	adds	r3, #1
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e24:	3b01      	subs	r3, #1
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1dd      	bne.n	8008dea <USB_WritePMA+0x3a>
  }
}
 8008e2e:	bf00      	nop
 8008e30:	bf00      	nop
 8008e32:	3734      	adds	r7, #52	; 0x34
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bc80      	pop	{r7}
 8008e38:	4770      	bx	lr

08008e3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b08b      	sub	sp, #44	; 0x2c
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	60f8      	str	r0, [r7, #12]
 8008e42:	60b9      	str	r1, [r7, #8]
 8008e44:	4611      	mov	r1, r2
 8008e46:	461a      	mov	r2, r3
 8008e48:	460b      	mov	r3, r1
 8008e4a:	80fb      	strh	r3, [r7, #6]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008e50:	88bb      	ldrh	r3, [r7, #4]
 8008e52:	085b      	lsrs	r3, r3, #1
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008e60:	88fb      	ldrh	r3, [r7, #6]
 8008e62:	005a      	lsls	r2, r3, #1
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e6c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	627b      	str	r3, [r7, #36]	; 0x24
 8008e72:	e01b      	b.n	8008eac <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	3302      	adds	r3, #2
 8008e80:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	b2da      	uxtb	r2, r3
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	3301      	adds	r3, #1
 8008e8e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	0a1b      	lsrs	r3, r3, #8
 8008e94:	b2da      	uxtb	r2, r3
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008e9a:	69fb      	ldr	r3, [r7, #28]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	3302      	adds	r3, #2
 8008ea4:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e0      	bne.n	8008e74 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008eb2:	88bb      	ldrh	r3, [r7, #4]
 8008eb4:	f003 0301 	and.w	r3, r3, #1
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d007      	beq.n	8008ece <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	701a      	strb	r2, [r3, #0]
  }
}
 8008ece:	bf00      	nop
 8008ed0:	372c      	adds	r7, #44	; 0x2c
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7c1b      	ldrb	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d115      	bne.n	8008f1c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	2181      	movs	r1, #129	; 0x81
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 fe86 	bl	800ac0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008f08:	2202      	movs	r2, #2
 8008f0a:	2101      	movs	r1, #1
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fe7c 	bl	800ac0a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008f1a:	e012      	b.n	8008f42 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008f1c:	2340      	movs	r3, #64	; 0x40
 8008f1e:	2202      	movs	r2, #2
 8008f20:	2181      	movs	r1, #129	; 0x81
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f001 fe71 	bl	800ac0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008f2e:	2340      	movs	r3, #64	; 0x40
 8008f30:	2202      	movs	r2, #2
 8008f32:	2101      	movs	r1, #1
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fe68 	bl	800ac0a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008f42:	2308      	movs	r3, #8
 8008f44:	2203      	movs	r2, #3
 8008f46:	2182      	movs	r1, #130	; 0x82
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f001 fe5e 	bl	800ac0a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2201      	movs	r2, #1
 8008f52:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008f54:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008f58:	f001 ff7e 	bl	800ae58 <USBD_static_malloc>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d102      	bne.n	8008f74 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	73fb      	strb	r3, [r7, #15]
 8008f72:	e026      	b.n	8008fc2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f7a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	7c1b      	ldrb	r3, [r3, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d109      	bne.n	8008fb2 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fa8:	2101      	movs	r1, #1
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f001 ff1e 	bl	800adec <USBD_LL_PrepareReceive>
 8008fb0:	e007      	b.n	8008fc2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008fb8:	2340      	movs	r3, #64	; 0x40
 8008fba:	2101      	movs	r1, #1
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f001 ff15 	bl	800adec <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008fdc:	2181      	movs	r1, #129	; 0x81
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fe39 	bl	800ac56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008fea:	2101      	movs	r1, #1
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 fe32 	bl	800ac56 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008ffa:	2182      	movs	r1, #130	; 0x82
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fe2a 	bl	800ac56 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00e      	beq.n	8009030 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009022:	4618      	mov	r0, r3
 8009024:	f001 ff24 	bl	800ae70 <USBD_static_free>
    pdev->pClassData = NULL;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8009030:	7bfb      	ldrb	r3, [r7, #15]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b086      	sub	sp, #24
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
 8009042:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009054:	2300      	movs	r3, #0
 8009056:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009060:	2b00      	cmp	r3, #0
 8009062:	d039      	beq.n	80090d8 <USBD_CDC_Setup+0x9e>
 8009064:	2b20      	cmp	r3, #32
 8009066:	d17f      	bne.n	8009168 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d029      	beq.n	80090c4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	b25b      	sxtb	r3, r3
 8009076:	2b00      	cmp	r3, #0
 8009078:	da11      	bge.n	800909e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009086:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	88d2      	ldrh	r2, [r2, #6]
 800908c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800908e:	6939      	ldr	r1, [r7, #16]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	88db      	ldrh	r3, [r3, #6]
 8009094:	461a      	mov	r2, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f001 fa09 	bl	800a4ae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800909c:	e06b      	b.n	8009176 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	785a      	ldrb	r2, [r3, #1]
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	88db      	ldrh	r3, [r3, #6]
 80090ac:	b2da      	uxtb	r2, r3
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80090b4:	6939      	ldr	r1, [r7, #16]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	88db      	ldrh	r3, [r3, #6]
 80090ba:	461a      	mov	r2, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 fa24 	bl	800a50a <USBD_CtlPrepareRx>
      break;
 80090c2:	e058      	b.n	8009176 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	7850      	ldrb	r0, [r2, #1]
 80090d0:	2200      	movs	r2, #0
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	4798      	blx	r3
      break;
 80090d6:	e04e      	b.n	8009176 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	785b      	ldrb	r3, [r3, #1]
 80090dc:	2b0b      	cmp	r3, #11
 80090de:	d02e      	beq.n	800913e <USBD_CDC_Setup+0x104>
 80090e0:	2b0b      	cmp	r3, #11
 80090e2:	dc38      	bgt.n	8009156 <USBD_CDC_Setup+0x11c>
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d002      	beq.n	80090ee <USBD_CDC_Setup+0xb4>
 80090e8:	2b0a      	cmp	r3, #10
 80090ea:	d014      	beq.n	8009116 <USBD_CDC_Setup+0xdc>
 80090ec:	e033      	b.n	8009156 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	2b03      	cmp	r3, #3
 80090f6:	d107      	bne.n	8009108 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80090f8:	f107 030c 	add.w	r3, r7, #12
 80090fc:	2202      	movs	r2, #2
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f9d4 	bl	800a4ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009106:	e02e      	b.n	8009166 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f001 f965 	bl	800a3da <USBD_CtlError>
            ret = USBD_FAIL;
 8009110:	2302      	movs	r3, #2
 8009112:	75fb      	strb	r3, [r7, #23]
          break;
 8009114:	e027      	b.n	8009166 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	2b03      	cmp	r3, #3
 800911e:	d107      	bne.n	8009130 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009120:	f107 030f 	add.w	r3, r7, #15
 8009124:	2201      	movs	r2, #1
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f001 f9c0 	bl	800a4ae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800912e:	e01a      	b.n	8009166 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8009130:	6839      	ldr	r1, [r7, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 f951 	bl	800a3da <USBD_CtlError>
            ret = USBD_FAIL;
 8009138:	2302      	movs	r3, #2
 800913a:	75fb      	strb	r3, [r7, #23]
          break;
 800913c:	e013      	b.n	8009166 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009144:	2b03      	cmp	r3, #3
 8009146:	d00d      	beq.n	8009164 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8009148:	6839      	ldr	r1, [r7, #0]
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f945 	bl	800a3da <USBD_CtlError>
            ret = USBD_FAIL;
 8009150:	2302      	movs	r3, #2
 8009152:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009154:	e006      	b.n	8009164 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 f93e 	bl	800a3da <USBD_CtlError>
          ret = USBD_FAIL;
 800915e:	2302      	movs	r3, #2
 8009160:	75fb      	strb	r3, [r7, #23]
          break;
 8009162:	e000      	b.n	8009166 <USBD_CDC_Setup+0x12c>
          break;
 8009164:	bf00      	nop
      }
      break;
 8009166:	e006      	b.n	8009176 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f001 f935 	bl	800a3da <USBD_CtlError>
      ret = USBD_FAIL;
 8009170:	2302      	movs	r3, #2
 8009172:	75fb      	strb	r3, [r7, #23]
      break;
 8009174:	bf00      	nop
  }

  return ret;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3718      	adds	r7, #24
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009192:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800919a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d03a      	beq.n	800921c <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80091a6:	78fa      	ldrb	r2, [r7, #3]
 80091a8:	6879      	ldr	r1, [r7, #4]
 80091aa:	4613      	mov	r3, r2
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4413      	add	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	440b      	add	r3, r1
 80091b4:	331c      	adds	r3, #28
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d029      	beq.n	8009210 <USBD_CDC_DataIn+0x90>
 80091bc:	78fa      	ldrb	r2, [r7, #3]
 80091be:	6879      	ldr	r1, [r7, #4]
 80091c0:	4613      	mov	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	4413      	add	r3, r2
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	440b      	add	r3, r1
 80091ca:	331c      	adds	r3, #28
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	78f9      	ldrb	r1, [r7, #3]
 80091d0:	68b8      	ldr	r0, [r7, #8]
 80091d2:	460b      	mov	r3, r1
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	440b      	add	r3, r1
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	4403      	add	r3, r0
 80091dc:	3338      	adds	r3, #56	; 0x38
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80091e4:	fb01 f303 	mul.w	r3, r1, r3
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d110      	bne.n	8009210 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80091ee:	78fa      	ldrb	r2, [r7, #3]
 80091f0:	6879      	ldr	r1, [r7, #4]
 80091f2:	4613      	mov	r3, r2
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	440b      	add	r3, r1
 80091fc:	331c      	adds	r3, #28
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009202:	78f9      	ldrb	r1, [r7, #3]
 8009204:	2300      	movs	r3, #0
 8009206:	2200      	movs	r2, #0
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fdcc 	bl	800ada6 <USBD_LL_Transmit>
 800920e:	e003      	b.n	8009218 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	2200      	movs	r2, #0
 8009214:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009218:	2300      	movs	r3, #0
 800921a:	e000      	b.n	800921e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800921c:	2302      	movs	r3, #2
  }
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b084      	sub	sp, #16
 800922a:	af00      	add	r7, sp, #0
 800922c:	6078      	str	r0, [r7, #4]
 800922e:	460b      	mov	r3, r1
 8009230:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009238:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fdf7 	bl	800ae32 <USBD_LL_GetRxDataSize>
 8009244:	4602      	mov	r2, r0
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00d      	beq.n	8009272 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800926a:	4611      	mov	r1, r2
 800926c:	4798      	blx	r3

    return USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e000      	b.n	8009274 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009272:	2302      	movs	r3, #2
  }
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b084      	sub	sp, #16
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800928a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009292:	2b00      	cmp	r3, #0
 8009294:	d015      	beq.n	80092c2 <USBD_CDC_EP0_RxReady+0x46>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800929c:	2bff      	cmp	r3, #255	; 0xff
 800929e:	d010      	beq.n	80092c2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80092a6:	689b      	ldr	r3, [r3, #8]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80092ae:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80092b0:	68fa      	ldr	r2, [r7, #12]
 80092b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80092b6:	b292      	uxth	r2, r2
 80092b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	22ff      	movs	r2, #255	; 0xff
 80092be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80092cc:	b480      	push	{r7}
 80092ce:	b083      	sub	sp, #12
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2243      	movs	r2, #67	; 0x43
 80092d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bc80      	pop	{r7}
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	200000b0 	.word	0x200000b0

080092ec <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b083      	sub	sp, #12
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2243      	movs	r2, #67	; 0x43
 80092f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80092fa:	4b03      	ldr	r3, [pc, #12]	; (8009308 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	bc80      	pop	{r7}
 8009304:	4770      	bx	lr
 8009306:	bf00      	nop
 8009308:	2000006c 	.word	0x2000006c

0800930c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2243      	movs	r2, #67	; 0x43
 8009318:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800931a:	4b03      	ldr	r3, [pc, #12]	; (8009328 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800931c:	4618      	mov	r0, r3
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	bc80      	pop	{r7}
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	200000f4 	.word	0x200000f4

0800932c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800932c:	b480      	push	{r7}
 800932e:	b083      	sub	sp, #12
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	220a      	movs	r2, #10
 8009338:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800933a:	4b03      	ldr	r3, [pc, #12]	; (8009348 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800933c:	4618      	mov	r0, r3
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	bc80      	pop	{r7}
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	20000028 	.word	0x20000028

0800934c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009356:	2302      	movs	r3, #2
 8009358:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009368:	2300      	movs	r3, #0
 800936a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800936c:	7bfb      	ldrb	r3, [r7, #15]
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	bc80      	pop	{r7}
 8009376:	4770      	bx	lr

08009378 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009378:	b480      	push	{r7}
 800937a:	b087      	sub	sp, #28
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800938c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	68ba      	ldr	r2, [r7, #8]
 8009392:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009396:	88fa      	ldrh	r2, [r7, #6]
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bc80      	pop	{r7}
 80093a8:	4770      	bx	lr

080093aa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093ba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	683a      	ldr	r2, [r7, #0]
 80093c0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bc80      	pop	{r7}
 80093ce:	4770      	bx	lr

080093d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b084      	sub	sp, #16
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d01c      	beq.n	8009424 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d115      	bne.n	8009420 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009412:	b29b      	uxth	r3, r3
 8009414:	2181      	movs	r1, #129	; 0x81
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f001 fcc5 	bl	800ada6 <USBD_LL_Transmit>

      return USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	e002      	b.n	8009426 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009420:	2301      	movs	r3, #1
 8009422:	e000      	b.n	8009426 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009424:	2302      	movs	r3, #2
  }
}
 8009426:	4618      	mov	r0, r3
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800942e:	b580      	push	{r7, lr}
 8009430:	b084      	sub	sp, #16
 8009432:	af00      	add	r7, sp, #0
 8009434:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009444:	2b00      	cmp	r3, #0
 8009446:	d017      	beq.n	8009478 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	7c1b      	ldrb	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800945a:	2101      	movs	r1, #1
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f001 fcc5 	bl	800adec <USBD_LL_PrepareReceive>
 8009462:	e007      	b.n	8009474 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800946a:	2340      	movs	r3, #64	; 0x40
 800946c:	2101      	movs	r1, #1
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f001 fcbc 	bl	800adec <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009474:	2300      	movs	r3, #0
 8009476:	e000      	b.n	800947a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009478:	2302      	movs	r3, #2
  }
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b084      	sub	sp, #16
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	4613      	mov	r3, r2
 800948e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009496:	2302      	movs	r3, #2
 8009498:	e01a      	b.n	80094d0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d003      	beq.n	80094ac <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2200      	movs	r2, #0
 80094a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	68ba      	ldr	r2, [r7, #8]
 80094b6:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	79fa      	ldrb	r2, [r7, #7]
 80094c6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f001 fb29 	bl	800ab20 <USBD_LL_Init>

  return USBD_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094d8:	b480      	push	{r7}
 80094da:	b085      	sub	sp, #20
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d006      	beq.n	80094fa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	683a      	ldr	r2, [r7, #0]
 80094f0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80094f4:	2300      	movs	r3, #0
 80094f6:	73fb      	strb	r3, [r7, #15]
 80094f8:	e001      	b.n	80094fe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80094fa:	2302      	movs	r3, #2
 80094fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	bc80      	pop	{r7}
 8009508:	4770      	bx	lr

0800950a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 fb5e 	bl	800abd4 <USBD_LL_Start>

  return USBD_OK;
 8009518:	2300      	movs	r3, #0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009522:	b480      	push	{r7}
 8009524:	b083      	sub	sp, #12
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr

08009536 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b084      	sub	sp, #16
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	460b      	mov	r3, r1
 8009540:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009542:	2302      	movs	r3, #2
 8009544:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00c      	beq.n	800956a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	78fa      	ldrb	r2, [r7, #3]
 800955a:	4611      	mov	r1, r2
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	4798      	blx	r3
 8009560:	4603      	mov	r3, r0
 8009562:	2b00      	cmp	r3, #0
 8009564:	d101      	bne.n	800956a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	78fa      	ldrb	r2, [r7, #3]
 800958a:	4611      	mov	r1, r2
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3

  return USBD_OK;
 8009590:	2300      	movs	r3, #0
}
 8009592:	4618      	mov	r0, r3
 8009594:	3708      	adds	r7, #8
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	4618      	mov	r0, r3
 80095ae:	f000 fed8 	bl	800a362 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80095c0:	461a      	mov	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80095ce:	f003 031f 	and.w	r3, r3, #31
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d016      	beq.n	8009604 <USBD_LL_SetupStage+0x6a>
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d81c      	bhi.n	8009614 <USBD_LL_SetupStage+0x7a>
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d002      	beq.n	80095e4 <USBD_LL_SetupStage+0x4a>
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d008      	beq.n	80095f4 <USBD_LL_SetupStage+0x5a>
 80095e2:	e017      	b.n	8009614 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 f9cb 	bl	8009988 <USBD_StdDevReq>
      break;
 80095f2:	e01a      	b.n	800962a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f000 fa2d 	bl	8009a5c <USBD_StdItfReq>
      break;
 8009602:	e012      	b.n	800962a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 fa6d 	bl	8009aec <USBD_StdEPReq>
      break;
 8009612:	e00a      	b.n	800962a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800961a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800961e:	b2db      	uxtb	r3, r3
 8009620:	4619      	mov	r1, r3
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fb36 	bl	800ac94 <USBD_LL_StallEP>
      break;
 8009628:	bf00      	nop
  }

  return USBD_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	460b      	mov	r3, r1
 800963e:	607a      	str	r2, [r7, #4]
 8009640:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009642:	7afb      	ldrb	r3, [r7, #11]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d14b      	bne.n	80096e0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800964e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009656:	2b03      	cmp	r3, #3
 8009658:	d134      	bne.n	80096c4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	429a      	cmp	r2, r3
 8009664:	d919      	bls.n	800969a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	68da      	ldr	r2, [r3, #12]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800967c:	429a      	cmp	r2, r3
 800967e:	d203      	bcs.n	8009688 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009684:	b29b      	uxth	r3, r3
 8009686:	e002      	b.n	800968e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800968c:	b29b      	uxth	r3, r3
 800968e:	461a      	mov	r2, r3
 8009690:	6879      	ldr	r1, [r7, #4]
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 ff57 	bl	800a546 <USBD_CtlContinueRx>
 8009698:	e038      	b.n	800970c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00a      	beq.n	80096bc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d105      	bne.n	80096bc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 ff54 	bl	800a56a <USBD_CtlSendStatus>
 80096c2:	e023      	b.n	800970c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80096ca:	2b05      	cmp	r3, #5
 80096cc:	d11e      	bne.n	800970c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80096d6:	2100      	movs	r1, #0
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f001 fadb 	bl	800ac94 <USBD_LL_StallEP>
 80096de:	e015      	b.n	800970c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00d      	beq.n	8009708 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d108      	bne.n	8009708 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	7afa      	ldrb	r2, [r7, #11]
 8009700:	4611      	mov	r1, r2
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	4798      	blx	r3
 8009706:	e001      	b.n	800970c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009708:	2302      	movs	r3, #2
 800970a:	e000      	b.n	800970e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b086      	sub	sp, #24
 800971a:	af00      	add	r7, sp, #0
 800971c:	60f8      	str	r0, [r7, #12]
 800971e:	460b      	mov	r3, r1
 8009720:	607a      	str	r2, [r7, #4]
 8009722:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d17f      	bne.n	800982a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3314      	adds	r3, #20
 800972e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009736:	2b02      	cmp	r3, #2
 8009738:	d15c      	bne.n	80097f4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	429a      	cmp	r2, r3
 8009744:	d915      	bls.n	8009772 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	68da      	ldr	r2, [r3, #12]
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	1ad2      	subs	r2, r2, r3
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	b29b      	uxth	r3, r3
 800975a:	461a      	mov	r2, r3
 800975c:	6879      	ldr	r1, [r7, #4]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fec1 	bl	800a4e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009764:	2300      	movs	r3, #0
 8009766:	2200      	movs	r2, #0
 8009768:	2100      	movs	r1, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f001 fb3e 	bl	800adec <USBD_LL_PrepareReceive>
 8009770:	e04e      	b.n	8009810 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	697a      	ldr	r2, [r7, #20]
 8009778:	6912      	ldr	r2, [r2, #16]
 800977a:	fbb3 f1f2 	udiv	r1, r3, r2
 800977e:	fb01 f202 	mul.w	r2, r1, r2
 8009782:	1a9b      	subs	r3, r3, r2
 8009784:	2b00      	cmp	r3, #0
 8009786:	d11c      	bne.n	80097c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	689a      	ldr	r2, [r3, #8]
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009790:	429a      	cmp	r2, r3
 8009792:	d316      	bcc.n	80097c2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800979e:	429a      	cmp	r2, r3
 80097a0:	d20f      	bcs.n	80097c2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097a2:	2200      	movs	r2, #0
 80097a4:	2100      	movs	r1, #0
 80097a6:	68f8      	ldr	r0, [r7, #12]
 80097a8:	f000 fe9d 	bl	800a4e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097b4:	2300      	movs	r3, #0
 80097b6:	2200      	movs	r2, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	68f8      	ldr	r0, [r7, #12]
 80097bc:	f001 fb16 	bl	800adec <USBD_LL_PrepareReceive>
 80097c0:	e026      	b.n	8009810 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80097d4:	2b03      	cmp	r3, #3
 80097d6:	d105      	bne.n	80097e4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80097e4:	2180      	movs	r1, #128	; 0x80
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f001 fa54 	bl	800ac94 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 fecf 	bl	800a590 <USBD_CtlReceiveStatus>
 80097f2:	e00d      	b.n	8009810 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d004      	beq.n	8009808 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009808:	2180      	movs	r1, #128	; 0x80
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f001 fa42 	bl	800ac94 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009816:	2b01      	cmp	r3, #1
 8009818:	d11d      	bne.n	8009856 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f7ff fe81 	bl	8009522 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2200      	movs	r2, #0
 8009824:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009828:	e015      	b.n	8009856 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00d      	beq.n	8009852 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800983c:	2b03      	cmp	r3, #3
 800983e:	d108      	bne.n	8009852 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	7afa      	ldrb	r2, [r7, #11]
 800984a:	4611      	mov	r1, r2
 800984c:	68f8      	ldr	r0, [r7, #12]
 800984e:	4798      	blx	r3
 8009850:	e001      	b.n	8009856 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009852:	2302      	movs	r3, #2
 8009854:	e000      	b.n	8009858 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	2200      	movs	r2, #0
 800986c:	2100      	movs	r1, #0
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f001 f9cb 	bl	800ac0a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2240      	movs	r2, #64	; 0x40
 8009880:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009884:	2340      	movs	r3, #64	; 0x40
 8009886:	2200      	movs	r2, #0
 8009888:	2180      	movs	r1, #128	; 0x80
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f001 f9bd 	bl	800ac0a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2240      	movs	r2, #64	; 0x40
 800989a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d009      	beq.n	80098d8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	6852      	ldr	r2, [r2, #4]
 80098d0:	b2d2      	uxtb	r2, r2
 80098d2:	4611      	mov	r1, r2
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	4798      	blx	r3
  }

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80098e2:	b480      	push	{r7}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	460b      	mov	r3, r1
 80098ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	78fa      	ldrb	r2, [r7, #3]
 80098f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	370c      	adds	r7, #12
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bc80      	pop	{r7}
 80098fe:	4770      	bx	lr

08009900 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2204      	movs	r2, #4
 8009918:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	bc80      	pop	{r7}
 8009926:	4770      	bx	lr

08009928 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009936:	2b04      	cmp	r3, #4
 8009938:	d105      	bne.n	8009946 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009946:	2300      	movs	r3, #0
}
 8009948:	4618      	mov	r0, r3
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	bc80      	pop	{r7}
 8009950:	4770      	bx	lr

08009952 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009952:	b580      	push	{r7, lr}
 8009954:	b082      	sub	sp, #8
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009960:	2b03      	cmp	r3, #3
 8009962:	d10b      	bne.n	800997c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800996a:	69db      	ldr	r3, [r3, #28]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009976:	69db      	ldr	r3, [r3, #28]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	4618      	mov	r0, r3
 8009980:	3708      	adds	r7, #8
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800999e:	2b40      	cmp	r3, #64	; 0x40
 80099a0:	d005      	beq.n	80099ae <USBD_StdDevReq+0x26>
 80099a2:	2b40      	cmp	r3, #64	; 0x40
 80099a4:	d84f      	bhi.n	8009a46 <USBD_StdDevReq+0xbe>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d009      	beq.n	80099be <USBD_StdDevReq+0x36>
 80099aa:	2b20      	cmp	r3, #32
 80099ac:	d14b      	bne.n	8009a46 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
      break;
 80099bc:	e048      	b.n	8009a50 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	785b      	ldrb	r3, [r3, #1]
 80099c2:	2b09      	cmp	r3, #9
 80099c4:	d839      	bhi.n	8009a3a <USBD_StdDevReq+0xb2>
 80099c6:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <USBD_StdDevReq+0x44>)
 80099c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099cc:	08009a1d 	.word	0x08009a1d
 80099d0:	08009a31 	.word	0x08009a31
 80099d4:	08009a3b 	.word	0x08009a3b
 80099d8:	08009a27 	.word	0x08009a27
 80099dc:	08009a3b 	.word	0x08009a3b
 80099e0:	080099ff 	.word	0x080099ff
 80099e4:	080099f5 	.word	0x080099f5
 80099e8:	08009a3b 	.word	0x08009a3b
 80099ec:	08009a13 	.word	0x08009a13
 80099f0:	08009a09 	.word	0x08009a09
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 f9dc 	bl	8009db4 <USBD_GetDescriptor>
          break;
 80099fc:	e022      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099fe:	6839      	ldr	r1, [r7, #0]
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb3f 	bl	800a084 <USBD_SetAddress>
          break;
 8009a06:	e01d      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fb7e 	bl	800a10c <USBD_SetConfig>
          break;
 8009a10:	e018      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fc07 	bl	800a228 <USBD_GetConfig>
          break;
 8009a1a:	e013      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fc37 	bl	800a292 <USBD_GetStatus>
          break;
 8009a24:	e00e      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009a26:	6839      	ldr	r1, [r7, #0]
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f000 fc65 	bl	800a2f8 <USBD_SetFeature>
          break;
 8009a2e:	e009      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009a30:	6839      	ldr	r1, [r7, #0]
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f000 fc74 	bl	800a320 <USBD_ClrFeature>
          break;
 8009a38:	e004      	b.n	8009a44 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fccc 	bl	800a3da <USBD_CtlError>
          break;
 8009a42:	bf00      	nop
      }
      break;
 8009a44:	e004      	b.n	8009a50 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fcc6 	bl	800a3da <USBD_CtlError>
      break;
 8009a4e:	bf00      	nop
  }

  return ret;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop

08009a5c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b084      	sub	sp, #16
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a72:	2b40      	cmp	r3, #64	; 0x40
 8009a74:	d005      	beq.n	8009a82 <USBD_StdItfReq+0x26>
 8009a76:	2b40      	cmp	r3, #64	; 0x40
 8009a78:	d82e      	bhi.n	8009ad8 <USBD_StdItfReq+0x7c>
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <USBD_StdItfReq+0x26>
 8009a7e:	2b20      	cmp	r3, #32
 8009a80:	d12a      	bne.n	8009ad8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a88:	3b01      	subs	r3, #1
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d81d      	bhi.n	8009aca <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	889b      	ldrh	r3, [r3, #4]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d813      	bhi.n	8009ac0 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	6839      	ldr	r1, [r7, #0]
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	4798      	blx	r3
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	88db      	ldrh	r3, [r3, #6]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d110      	bne.n	8009ad4 <USBD_StdItfReq+0x78>
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10d      	bne.n	8009ad4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f000 fd56 	bl	800a56a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009abe:	e009      	b.n	8009ad4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fc89 	bl	800a3da <USBD_CtlError>
          break;
 8009ac8:	e004      	b.n	8009ad4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 fc84 	bl	800a3da <USBD_CtlError>
          break;
 8009ad2:	e000      	b.n	8009ad6 <USBD_StdItfReq+0x7a>
          break;
 8009ad4:	bf00      	nop
      }
      break;
 8009ad6:	e004      	b.n	8009ae2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fc7d 	bl	800a3da <USBD_CtlError>
      break;
 8009ae0:	bf00      	nop
  }

  return USBD_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3710      	adds	r7, #16
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	889b      	ldrh	r3, [r3, #4]
 8009afe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b08:	2b40      	cmp	r3, #64	; 0x40
 8009b0a:	d007      	beq.n	8009b1c <USBD_StdEPReq+0x30>
 8009b0c:	2b40      	cmp	r3, #64	; 0x40
 8009b0e:	f200 8146 	bhi.w	8009d9e <USBD_StdEPReq+0x2b2>
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <USBD_StdEPReq+0x40>
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	f040 8141 	bne.w	8009d9e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	6839      	ldr	r1, [r7, #0]
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
      break;
 8009b2a:	e13d      	b.n	8009da8 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009b34:	2b20      	cmp	r3, #32
 8009b36:	d10a      	bne.n	8009b4e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	6839      	ldr	r1, [r7, #0]
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
 8009b46:	4603      	mov	r3, r0
 8009b48:	73fb      	strb	r3, [r7, #15]

        return ret;
 8009b4a:	7bfb      	ldrb	r3, [r7, #15]
 8009b4c:	e12d      	b.n	8009daa <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	785b      	ldrb	r3, [r3, #1]
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	d007      	beq.n	8009b66 <USBD_StdEPReq+0x7a>
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	f300 811b 	bgt.w	8009d92 <USBD_StdEPReq+0x2a6>
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d072      	beq.n	8009c46 <USBD_StdEPReq+0x15a>
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d03a      	beq.n	8009bda <USBD_StdEPReq+0xee>
 8009b64:	e115      	b.n	8009d92 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	d002      	beq.n	8009b76 <USBD_StdEPReq+0x8a>
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d015      	beq.n	8009ba0 <USBD_StdEPReq+0xb4>
 8009b74:	e02b      	b.n	8009bce <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b76:	7bbb      	ldrb	r3, [r7, #14]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00c      	beq.n	8009b96 <USBD_StdEPReq+0xaa>
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b80      	cmp	r3, #128	; 0x80
 8009b80:	d009      	beq.n	8009b96 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f001 f884 	bl	800ac94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009b8c:	2180      	movs	r1, #128	; 0x80
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f001 f880 	bl	800ac94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b94:	e020      	b.n	8009bd8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 fc1e 	bl	800a3da <USBD_CtlError>
              break;
 8009b9e:	e01b      	b.n	8009bd8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	885b      	ldrh	r3, [r3, #2]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d10e      	bne.n	8009bc6 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <USBD_StdEPReq+0xda>
 8009bae:	7bbb      	ldrb	r3, [r7, #14]
 8009bb0:	2b80      	cmp	r3, #128	; 0x80
 8009bb2:	d008      	beq.n	8009bc6 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	88db      	ldrh	r3, [r3, #6]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d104      	bne.n	8009bc6 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f001 f867 	bl	800ac94 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 fccf 	bl	800a56a <USBD_CtlSendStatus>

              break;
 8009bcc:	e004      	b.n	8009bd8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 fc02 	bl	800a3da <USBD_CtlError>
              break;
 8009bd6:	bf00      	nop
          }
          break;
 8009bd8:	e0e0      	b.n	8009d9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d002      	beq.n	8009bea <USBD_StdEPReq+0xfe>
 8009be4:	2b03      	cmp	r3, #3
 8009be6:	d015      	beq.n	8009c14 <USBD_StdEPReq+0x128>
 8009be8:	e026      	b.n	8009c38 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00c      	beq.n	8009c0a <USBD_StdEPReq+0x11e>
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b80      	cmp	r3, #128	; 0x80
 8009bf4:	d009      	beq.n	8009c0a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009bf6:	7bbb      	ldrb	r3, [r7, #14]
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 f84a 	bl	800ac94 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009c00:	2180      	movs	r1, #128	; 0x80
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 f846 	bl	800ac94 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c08:	e01c      	b.n	8009c44 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fbe4 	bl	800a3da <USBD_CtlError>
              break;
 8009c12:	e017      	b.n	8009c44 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	885b      	ldrh	r3, [r3, #2]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d112      	bne.n	8009c42 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c1c:	7bbb      	ldrb	r3, [r7, #14]
 8009c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d004      	beq.n	8009c30 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c26:	7bbb      	ldrb	r3, [r7, #14]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f001 f851 	bl	800acd2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f000 fc9a 	bl	800a56a <USBD_CtlSendStatus>
              }
              break;
 8009c36:	e004      	b.n	8009c42 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fbcd 	bl	800a3da <USBD_CtlError>
              break;
 8009c40:	e000      	b.n	8009c44 <USBD_StdEPReq+0x158>
              break;
 8009c42:	bf00      	nop
          }
          break;
 8009c44:	e0aa      	b.n	8009d9c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d002      	beq.n	8009c56 <USBD_StdEPReq+0x16a>
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d032      	beq.n	8009cba <USBD_StdEPReq+0x1ce>
 8009c54:	e097      	b.n	8009d86 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c56:	7bbb      	ldrb	r3, [r7, #14]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d007      	beq.n	8009c6c <USBD_StdEPReq+0x180>
 8009c5c:	7bbb      	ldrb	r3, [r7, #14]
 8009c5e:	2b80      	cmp	r3, #128	; 0x80
 8009c60:	d004      	beq.n	8009c6c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 fbb8 	bl	800a3da <USBD_CtlError>
                break;
 8009c6a:	e091      	b.n	8009d90 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	da0b      	bge.n	8009c8c <USBD_StdEPReq+0x1a0>
 8009c74:	7bbb      	ldrb	r3, [r7, #14]
 8009c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	3310      	adds	r3, #16
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4413      	add	r3, r2
 8009c88:	3304      	adds	r3, #4
 8009c8a:	e00b      	b.n	8009ca4 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c8c:	7bbb      	ldrb	r3, [r7, #14]
 8009c8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	3304      	adds	r3, #4
 8009ca4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	2202      	movs	r2, #2
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 fbfb 	bl	800a4ae <USBD_CtlSendData>
              break;
 8009cb8:	e06a      	b.n	8009d90 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da11      	bge.n	8009ce6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cc2:	7bbb      	ldrb	r3, [r7, #14]
 8009cc4:	f003 020f 	and.w	r2, r3, #15
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	440b      	add	r3, r1
 8009cd4:	3318      	adds	r3, #24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d117      	bne.n	8009d0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009cdc:	6839      	ldr	r1, [r7, #0]
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb7b 	bl	800a3da <USBD_CtlError>
                  break;
 8009ce4:	e054      	b.n	8009d90 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ce6:	7bbb      	ldrb	r3, [r7, #14]
 8009ce8:	f003 020f 	and.w	r2, r3, #15
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	4613      	mov	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	440b      	add	r3, r1
 8009cf8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d104      	bne.n	8009d0c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009d02:	6839      	ldr	r1, [r7, #0]
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 fb68 	bl	800a3da <USBD_CtlError>
                  break;
 8009d0a:	e041      	b.n	8009d90 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	da0b      	bge.n	8009d2c <USBD_StdEPReq+0x240>
 8009d14:	7bbb      	ldrb	r3, [r7, #14]
 8009d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d1a:	4613      	mov	r3, r2
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	3310      	adds	r3, #16
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	4413      	add	r3, r2
 8009d28:	3304      	adds	r3, #4
 8009d2a:	e00b      	b.n	8009d44 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
 8009d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d32:	4613      	mov	r3, r2
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	4413      	add	r3, r2
 8009d42:	3304      	adds	r3, #4
 8009d44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d46:	7bbb      	ldrb	r3, [r7, #14]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d002      	beq.n	8009d52 <USBD_StdEPReq+0x266>
 8009d4c:	7bbb      	ldrb	r3, [r7, #14]
 8009d4e:	2b80      	cmp	r3, #128	; 0x80
 8009d50:	d103      	bne.n	8009d5a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	e00e      	b.n	8009d78 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009d5a:	7bbb      	ldrb	r3, [r7, #14]
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 ffd6 	bl	800ad10 <USBD_LL_IsStallEP>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	601a      	str	r2, [r3, #0]
 8009d70:	e002      	b.n	8009d78 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fb95 	bl	800a4ae <USBD_CtlSendData>
              break;
 8009d84:	e004      	b.n	8009d90 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009d86:	6839      	ldr	r1, [r7, #0]
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 fb26 	bl	800a3da <USBD_CtlError>
              break;
 8009d8e:	bf00      	nop
          }
          break;
 8009d90:	e004      	b.n	8009d9c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fb20 	bl	800a3da <USBD_CtlError>
          break;
 8009d9a:	bf00      	nop
      }
      break;
 8009d9c:	e004      	b.n	8009da8 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009d9e:	6839      	ldr	r1, [r7, #0]
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fb1a 	bl	800a3da <USBD_CtlError>
      break;
 8009da6:	bf00      	nop
  }

  return ret;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	885b      	ldrh	r3, [r3, #2]
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	2b06      	cmp	r3, #6
 8009dd6:	f200 8128 	bhi.w	800a02a <USBD_GetDescriptor+0x276>
 8009dda:	a201      	add	r2, pc, #4	; (adr r2, 8009de0 <USBD_GetDescriptor+0x2c>)
 8009ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de0:	08009dfd 	.word	0x08009dfd
 8009de4:	08009e15 	.word	0x08009e15
 8009de8:	08009e55 	.word	0x08009e55
 8009dec:	0800a02b 	.word	0x0800a02b
 8009df0:	0800a02b 	.word	0x0800a02b
 8009df4:	08009fcb 	.word	0x08009fcb
 8009df8:	08009ff7 	.word	0x08009ff7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	7c12      	ldrb	r2, [r2, #16]
 8009e08:	f107 0108 	add.w	r1, r7, #8
 8009e0c:	4610      	mov	r0, r2
 8009e0e:	4798      	blx	r3
 8009e10:	60f8      	str	r0, [r7, #12]
      break;
 8009e12:	e112      	b.n	800a03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	7c1b      	ldrb	r3, [r3, #16]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d10d      	bne.n	8009e38 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f107 0208 	add.w	r2, r7, #8
 8009e28:	4610      	mov	r0, r2
 8009e2a:	4798      	blx	r3
 8009e2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	3301      	adds	r3, #1
 8009e32:	2202      	movs	r2, #2
 8009e34:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e36:	e100      	b.n	800a03a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e40:	f107 0208 	add.w	r2, r7, #8
 8009e44:	4610      	mov	r0, r2
 8009e46:	4798      	blx	r3
 8009e48:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	2202      	movs	r2, #2
 8009e50:	701a      	strb	r2, [r3, #0]
      break;
 8009e52:	e0f2      	b.n	800a03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	885b      	ldrh	r3, [r3, #2]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b05      	cmp	r3, #5
 8009e5c:	f200 80ac 	bhi.w	8009fb8 <USBD_GetDescriptor+0x204>
 8009e60:	a201      	add	r2, pc, #4	; (adr r2, 8009e68 <USBD_GetDescriptor+0xb4>)
 8009e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e66:	bf00      	nop
 8009e68:	08009e81 	.word	0x08009e81
 8009e6c:	08009eb5 	.word	0x08009eb5
 8009e70:	08009ee9 	.word	0x08009ee9
 8009e74:	08009f1d 	.word	0x08009f1d
 8009e78:	08009f51 	.word	0x08009f51
 8009e7c:	08009f85 	.word	0x08009f85
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	7c12      	ldrb	r2, [r2, #16]
 8009e98:	f107 0108 	add.w	r1, r7, #8
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	4798      	blx	r3
 8009ea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ea2:	e091      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ea4:	6839      	ldr	r1, [r7, #0]
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa97 	bl	800a3da <USBD_CtlError>
            err++;
 8009eac:	7afb      	ldrb	r3, [r7, #11]
 8009eae:	3301      	adds	r3, #1
 8009eb0:	72fb      	strb	r3, [r7, #11]
          break;
 8009eb2:	e089      	b.n	8009fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00b      	beq.n	8009ed8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	7c12      	ldrb	r2, [r2, #16]
 8009ecc:	f107 0108 	add.w	r1, r7, #8
 8009ed0:	4610      	mov	r0, r2
 8009ed2:	4798      	blx	r3
 8009ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ed6:	e077      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa7d 	bl	800a3da <USBD_CtlError>
            err++;
 8009ee0:	7afb      	ldrb	r3, [r7, #11]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ee6:	e06f      	b.n	8009fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d00b      	beq.n	8009f0c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	7c12      	ldrb	r2, [r2, #16]
 8009f00:	f107 0108 	add.w	r1, r7, #8
 8009f04:	4610      	mov	r0, r2
 8009f06:	4798      	blx	r3
 8009f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f0a:	e05d      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 fa63 	bl	800a3da <USBD_CtlError>
            err++;
 8009f14:	7afb      	ldrb	r3, [r7, #11]
 8009f16:	3301      	adds	r3, #1
 8009f18:	72fb      	strb	r3, [r7, #11]
          break;
 8009f1a:	e055      	b.n	8009fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	7c12      	ldrb	r2, [r2, #16]
 8009f34:	f107 0108 	add.w	r1, r7, #8
 8009f38:	4610      	mov	r0, r2
 8009f3a:	4798      	blx	r3
 8009f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f3e:	e043      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f40:	6839      	ldr	r1, [r7, #0]
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f000 fa49 	bl	800a3da <USBD_CtlError>
            err++;
 8009f48:	7afb      	ldrb	r3, [r7, #11]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f4e:	e03b      	b.n	8009fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	7c12      	ldrb	r2, [r2, #16]
 8009f68:	f107 0108 	add.w	r1, r7, #8
 8009f6c:	4610      	mov	r0, r2
 8009f6e:	4798      	blx	r3
 8009f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f72:	e029      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f000 fa2f 	bl	800a3da <USBD_CtlError>
            err++;
 8009f7c:	7afb      	ldrb	r3, [r7, #11]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	72fb      	strb	r3, [r7, #11]
          break;
 8009f82:	e021      	b.n	8009fc8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f8a:	699b      	ldr	r3, [r3, #24]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d00b      	beq.n	8009fa8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	7c12      	ldrb	r2, [r2, #16]
 8009f9c:	f107 0108 	add.w	r1, r7, #8
 8009fa0:	4610      	mov	r0, r2
 8009fa2:	4798      	blx	r3
 8009fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fa6:	e00f      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fa8:	6839      	ldr	r1, [r7, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa15 	bl	800a3da <USBD_CtlError>
            err++;
 8009fb0:	7afb      	ldrb	r3, [r7, #11]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fb6:	e007      	b.n	8009fc8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa0d 	bl	800a3da <USBD_CtlError>
          err++;
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009fc6:	e038      	b.n	800a03a <USBD_GetDescriptor+0x286>
 8009fc8:	e037      	b.n	800a03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	7c1b      	ldrb	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d109      	bne.n	8009fe6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fda:	f107 0208 	add.w	r2, r7, #8
 8009fde:	4610      	mov	r0, r2
 8009fe0:	4798      	blx	r3
 8009fe2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009fe4:	e029      	b.n	800a03a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f9f6 	bl	800a3da <USBD_CtlError>
        err++;
 8009fee:	7afb      	ldrb	r3, [r7, #11]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	72fb      	strb	r3, [r7, #11]
      break;
 8009ff4:	e021      	b.n	800a03a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	7c1b      	ldrb	r3, [r3, #16]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10d      	bne.n	800a01a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a006:	f107 0208 	add.w	r2, r7, #8
 800a00a:	4610      	mov	r0, r2
 800a00c:	4798      	blx	r3
 800a00e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	3301      	adds	r3, #1
 800a014:	2207      	movs	r2, #7
 800a016:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a018:	e00f      	b.n	800a03a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a01a:	6839      	ldr	r1, [r7, #0]
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 f9dc 	bl	800a3da <USBD_CtlError>
        err++;
 800a022:	7afb      	ldrb	r3, [r7, #11]
 800a024:	3301      	adds	r3, #1
 800a026:	72fb      	strb	r3, [r7, #11]
      break;
 800a028:	e007      	b.n	800a03a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a02a:	6839      	ldr	r1, [r7, #0]
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f000 f9d4 	bl	800a3da <USBD_CtlError>
      err++;
 800a032:	7afb      	ldrb	r3, [r7, #11]
 800a034:	3301      	adds	r3, #1
 800a036:	72fb      	strb	r3, [r7, #11]
      break;
 800a038:	bf00      	nop
  }

  if (err != 0U)
 800a03a:	7afb      	ldrb	r3, [r7, #11]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d11c      	bne.n	800a07a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a040:	893b      	ldrh	r3, [r7, #8]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d011      	beq.n	800a06a <USBD_GetDescriptor+0x2b6>
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	88db      	ldrh	r3, [r3, #6]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00d      	beq.n	800a06a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	88da      	ldrh	r2, [r3, #6]
 800a052:	893b      	ldrh	r3, [r7, #8]
 800a054:	4293      	cmp	r3, r2
 800a056:	bf28      	it	cs
 800a058:	4613      	movcs	r3, r2
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a05e:	893b      	ldrh	r3, [r7, #8]
 800a060:	461a      	mov	r2, r3
 800a062:	68f9      	ldr	r1, [r7, #12]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fa22 	bl	800a4ae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88db      	ldrh	r3, [r3, #6]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d104      	bne.n	800a07c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fa79 	bl	800a56a <USBD_CtlSendStatus>
 800a078:	e000      	b.n	800a07c <USBD_GetDescriptor+0x2c8>
    return;
 800a07a:	bf00      	nop
    }
  }
}
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop

0800a084 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	889b      	ldrh	r3, [r3, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d130      	bne.n	800a0f8 <USBD_SetAddress+0x74>
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	88db      	ldrh	r3, [r3, #6]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d12c      	bne.n	800a0f8 <USBD_SetAddress+0x74>
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	885b      	ldrh	r3, [r3, #2]
 800a0a2:	2b7f      	cmp	r3, #127	; 0x7f
 800a0a4:	d828      	bhi.n	800a0f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	885b      	ldrh	r3, [r3, #2]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d104      	bne.n	800a0c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a0bc:	6839      	ldr	r1, [r7, #0]
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f98b 	bl	800a3da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c4:	e01d      	b.n	800a102 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	7bfa      	ldrb	r2, [r7, #15]
 800a0ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a0ce:	7bfb      	ldrb	r3, [r7, #15]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 fe48 	bl	800ad68 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fa46 	bl	800a56a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d004      	beq.n	800a0ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2202      	movs	r2, #2
 800a0e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ec:	e009      	b.n	800a102 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f6:	e004      	b.n	800a102 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a0f8:	6839      	ldr	r1, [r7, #0]
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f96d 	bl	800a3da <USBD_CtlError>
  }
}
 800a100:	bf00      	nop
 800a102:	bf00      	nop
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
	...

0800a10c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	885b      	ldrh	r3, [r3, #2]
 800a11a:	b2da      	uxtb	r2, r3
 800a11c:	4b41      	ldr	r3, [pc, #260]	; (800a224 <USBD_SetConfig+0x118>)
 800a11e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a120:	4b40      	ldr	r3, [pc, #256]	; (800a224 <USBD_SetConfig+0x118>)
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d904      	bls.n	800a132 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f955 	bl	800a3da <USBD_CtlError>
 800a130:	e075      	b.n	800a21e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d002      	beq.n	800a142 <USBD_SetConfig+0x36>
 800a13c:	2b03      	cmp	r3, #3
 800a13e:	d023      	beq.n	800a188 <USBD_SetConfig+0x7c>
 800a140:	e062      	b.n	800a208 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a142:	4b38      	ldr	r3, [pc, #224]	; (800a224 <USBD_SetConfig+0x118>)
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d01a      	beq.n	800a180 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a14a:	4b36      	ldr	r3, [pc, #216]	; (800a224 <USBD_SetConfig+0x118>)
 800a14c:	781b      	ldrb	r3, [r3, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2203      	movs	r2, #3
 800a158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a15c:	4b31      	ldr	r3, [pc, #196]	; (800a224 <USBD_SetConfig+0x118>)
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	4619      	mov	r1, r3
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7ff f9e7 	bl	8009536 <USBD_SetClassConfig>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d104      	bne.n	800a178 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a16e:	6839      	ldr	r1, [r7, #0]
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f932 	bl	800a3da <USBD_CtlError>
            return;
 800a176:	e052      	b.n	800a21e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f9f6 	bl	800a56a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a17e:	e04e      	b.n	800a21e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f000 f9f2 	bl	800a56a <USBD_CtlSendStatus>
        break;
 800a186:	e04a      	b.n	800a21e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a188:	4b26      	ldr	r3, [pc, #152]	; (800a224 <USBD_SetConfig+0x118>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d112      	bne.n	800a1b6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2202      	movs	r2, #2
 800a194:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800a198:	4b22      	ldr	r3, [pc, #136]	; (800a224 <USBD_SetConfig+0x118>)
 800a19a:	781b      	ldrb	r3, [r3, #0]
 800a19c:	461a      	mov	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a1a2:	4b20      	ldr	r3, [pc, #128]	; (800a224 <USBD_SetConfig+0x118>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff f9e3 	bl	8009574 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f9db 	bl	800a56a <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a1b4:	e033      	b.n	800a21e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a1b6:	4b1b      	ldr	r3, [pc, #108]	; (800a224 <USBD_SetConfig+0x118>)
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d01d      	beq.n	800a200 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f7ff f9d1 	bl	8009574 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a1d2:	4b14      	ldr	r3, [pc, #80]	; (800a224 <USBD_SetConfig+0x118>)
 800a1d4:	781b      	ldrb	r3, [r3, #0]
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a1dc:	4b11      	ldr	r3, [pc, #68]	; (800a224 <USBD_SetConfig+0x118>)
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f7ff f9a7 	bl	8009536 <USBD_SetClassConfig>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d104      	bne.n	800a1f8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f8f2 	bl	800a3da <USBD_CtlError>
            return;
 800a1f6:	e012      	b.n	800a21e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 f9b6 	bl	800a56a <USBD_CtlSendStatus>
        break;
 800a1fe:	e00e      	b.n	800a21e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9b2 	bl	800a56a <USBD_CtlSendStatus>
        break;
 800a206:	e00a      	b.n	800a21e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a208:	6839      	ldr	r1, [r7, #0]
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f8e5 	bl	800a3da <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a210:	4b04      	ldr	r3, [pc, #16]	; (800a224 <USBD_SetConfig+0x118>)
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	4619      	mov	r1, r3
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f7ff f9ac 	bl	8009574 <USBD_ClrClassConfig>
        break;
 800a21c:	bf00      	nop
    }
  }
}
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000364 	.word	0x20000364

0800a228 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	88db      	ldrh	r3, [r3, #6]
 800a236:	2b01      	cmp	r3, #1
 800a238:	d004      	beq.n	800a244 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a23a:	6839      	ldr	r1, [r7, #0]
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f8cc 	bl	800a3da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a242:	e022      	b.n	800a28a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	dc02      	bgt.n	800a254 <USBD_GetConfig+0x2c>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	dc03      	bgt.n	800a25a <USBD_GetConfig+0x32>
 800a252:	e015      	b.n	800a280 <USBD_GetConfig+0x58>
 800a254:	2b03      	cmp	r3, #3
 800a256:	d00b      	beq.n	800a270 <USBD_GetConfig+0x48>
 800a258:	e012      	b.n	800a280 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3308      	adds	r3, #8
 800a264:	2201      	movs	r2, #1
 800a266:	4619      	mov	r1, r3
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f920 	bl	800a4ae <USBD_CtlSendData>
        break;
 800a26e:	e00c      	b.n	800a28a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	3304      	adds	r3, #4
 800a274:	2201      	movs	r2, #1
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f918 	bl	800a4ae <USBD_CtlSendData>
        break;
 800a27e:	e004      	b.n	800a28a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 f8a9 	bl	800a3da <USBD_CtlError>
        break;
 800a288:	bf00      	nop
}
 800a28a:	bf00      	nop
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b082      	sub	sp, #8
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	2b02      	cmp	r3, #2
 800a2a6:	d81e      	bhi.n	800a2e6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	88db      	ldrh	r3, [r3, #6]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d004      	beq.n	800a2ba <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a2b0:	6839      	ldr	r1, [r7, #0]
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f891 	bl	800a3da <USBD_CtlError>
        break;
 800a2b8:	e01a      	b.n	800a2f0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d005      	beq.n	800a2d6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	f043 0202 	orr.w	r2, r3, #2
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	330c      	adds	r3, #12
 800a2da:	2202      	movs	r2, #2
 800a2dc:	4619      	mov	r1, r3
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 f8e5 	bl	800a4ae <USBD_CtlSendData>
      break;
 800a2e4:	e004      	b.n	800a2f0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a2e6:	6839      	ldr	r1, [r7, #0]
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 f876 	bl	800a3da <USBD_CtlError>
      break;
 800a2ee:	bf00      	nop
  }
}
 800a2f0:	bf00      	nop
 800a2f2:	3708      	adds	r7, #8
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	885b      	ldrh	r3, [r3, #2]
 800a306:	2b01      	cmp	r3, #1
 800a308:	d106      	bne.n	800a318 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f929 	bl	800a56a <USBD_CtlSendStatus>
  }
}
 800a318:	bf00      	nop
 800a31a:	3708      	adds	r7, #8
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b082      	sub	sp, #8
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a330:	3b01      	subs	r3, #1
 800a332:	2b02      	cmp	r3, #2
 800a334:	d80b      	bhi.n	800a34e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	885b      	ldrh	r3, [r3, #2]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d10c      	bne.n	800a358 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f90f 	bl	800a56a <USBD_CtlSendStatus>
      }
      break;
 800a34c:	e004      	b.n	800a358 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a34e:	6839      	ldr	r1, [r7, #0]
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	f000 f842 	bl	800a3da <USBD_CtlError>
      break;
 800a356:	e000      	b.n	800a35a <USBD_ClrFeature+0x3a>
      break;
 800a358:	bf00      	nop
  }
}
 800a35a:	bf00      	nop
 800a35c:	3708      	adds	r7, #8
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}

0800a362 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a362:	b480      	push	{r7}
 800a364:	b083      	sub	sp, #12
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	781a      	ldrb	r2, [r3, #0]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	785a      	ldrb	r2, [r3, #1]
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	3302      	adds	r3, #2
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	b29a      	uxth	r2, r3
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	3303      	adds	r3, #3
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	021b      	lsls	r3, r3, #8
 800a38e:	b29b      	uxth	r3, r3
 800a390:	4413      	add	r3, r2
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	3304      	adds	r3, #4
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	3305      	adds	r3, #5
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	021b      	lsls	r3, r3, #8
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	3306      	adds	r3, #6
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	3307      	adds	r3, #7
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	021b      	lsls	r3, r3, #8
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	4413      	add	r3, r2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	80da      	strh	r2, [r3, #6]

}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bc80      	pop	{r7}
 800a3d8:	4770      	bx	lr

0800a3da <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a3e4:	2180      	movs	r1, #128	; 0x80
 800a3e6:	6878      	ldr	r0, [r7, #4]
 800a3e8:	f000 fc54 	bl	800ac94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 fc50 	bl	800ac94 <USBD_LL_StallEP>
}
 800a3f4:	bf00      	nop
 800a3f6:	3708      	adds	r7, #8
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b086      	sub	sp, #24
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d032      	beq.n	800a478 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 f834 	bl	800a480 <USBD_GetLen>
 800a418:	4603      	mov	r3, r0
 800a41a:	3301      	adds	r3, #1
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	005b      	lsls	r3, r3, #1
 800a420:	b29a      	uxth	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a426:	7dfb      	ldrb	r3, [r7, #23]
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	75fa      	strb	r2, [r7, #23]
 800a42c:	461a      	mov	r2, r3
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4413      	add	r3, r2
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	7812      	ldrb	r2, [r2, #0]
 800a436:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a438:	7dfb      	ldrb	r3, [r7, #23]
 800a43a:	1c5a      	adds	r2, r3, #1
 800a43c:	75fa      	strb	r2, [r7, #23]
 800a43e:	461a      	mov	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4413      	add	r3, r2
 800a444:	2203      	movs	r2, #3
 800a446:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a448:	e012      	b.n	800a470 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	60fa      	str	r2, [r7, #12]
 800a450:	7dfa      	ldrb	r2, [r7, #23]
 800a452:	1c51      	adds	r1, r2, #1
 800a454:	75f9      	strb	r1, [r7, #23]
 800a456:	4611      	mov	r1, r2
 800a458:	68ba      	ldr	r2, [r7, #8]
 800a45a:	440a      	add	r2, r1
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	75fa      	strb	r2, [r7, #23]
 800a466:	461a      	mov	r2, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	4413      	add	r3, r2
 800a46c:	2200      	movs	r2, #0
 800a46e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e8      	bne.n	800a44a <USBD_GetString+0x4e>
    }
  }
}
 800a478:	bf00      	nop
 800a47a:	3718      	adds	r7, #24
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a480:	b480      	push	{r7}
 800a482:	b085      	sub	sp, #20
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a48c:	e005      	b.n	800a49a <USBD_GetLen+0x1a>
  {
    len++;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	3301      	adds	r3, #1
 800a492:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	3301      	adds	r3, #1
 800a498:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1f5      	bne.n	800a48e <USBD_GetLen+0xe>
  }

  return len;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr

0800a4ae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a4ae:	b580      	push	{r7, lr}
 800a4b0:	b084      	sub	sp, #16
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	60f8      	str	r0, [r7, #12]
 800a4b6:	60b9      	str	r1, [r7, #8]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2202      	movs	r2, #2
 800a4c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a4c4:	88fa      	ldrh	r2, [r7, #6]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a4ca:	88fa      	ldrh	r2, [r7, #6]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4d0:	88fb      	ldrh	r3, [r7, #6]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f000 fc65 	bl	800ada6 <USBD_LL_Transmit>

  return USBD_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	4613      	mov	r3, r2
 800a4f2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a4f4:	88fb      	ldrh	r3, [r7, #6]
 800a4f6:	68ba      	ldr	r2, [r7, #8]
 800a4f8:	2100      	movs	r1, #0
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 fc53 	bl	800ada6 <USBD_LL_Transmit>

  return USBD_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60f8      	str	r0, [r7, #12]
 800a512:	60b9      	str	r1, [r7, #8]
 800a514:	4613      	mov	r3, r2
 800a516:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2203      	movs	r2, #3
 800a51c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a520:	88fa      	ldrh	r2, [r7, #6]
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a528:	88fa      	ldrh	r2, [r7, #6]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	68ba      	ldr	r2, [r7, #8]
 800a534:	2100      	movs	r1, #0
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fc58 	bl	800adec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3710      	adds	r7, #16
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b084      	sub	sp, #16
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	4613      	mov	r3, r2
 800a552:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a554:	88fb      	ldrh	r3, [r7, #6]
 800a556:	68ba      	ldr	r2, [r7, #8]
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 fc46 	bl	800adec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a560:	2300      	movs	r3, #0
}
 800a562:	4618      	mov	r0, r3
 800a564:	3710      	adds	r7, #16
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}

0800a56a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a56a:	b580      	push	{r7, lr}
 800a56c:	b082      	sub	sp, #8
 800a56e:	af00      	add	r7, sp, #0
 800a570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2204      	movs	r2, #4
 800a576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a57a:	2300      	movs	r3, #0
 800a57c:	2200      	movs	r2, #0
 800a57e:	2100      	movs	r1, #0
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f000 fc10 	bl	800ada6 <USBD_LL_Transmit>

  return USBD_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}

0800a590 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2205      	movs	r2, #5
 800a59c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	2100      	movs	r1, #0
 800a5a6:	6878      	ldr	r0, [r7, #4]
 800a5a8:	f000 fc20 	bl	800adec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
	...

0800a5b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4912      	ldr	r1, [pc, #72]	; (800a608 <MX_USB_DEVICE_Init+0x50>)
 800a5c0:	4812      	ldr	r0, [pc, #72]	; (800a60c <MX_USB_DEVICE_Init+0x54>)
 800a5c2:	f7fe ff5e 	bl	8009482 <USBD_Init>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d001      	beq.n	800a5d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a5cc:	f7f7 fccc 	bl	8001f68 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a5d0:	490f      	ldr	r1, [pc, #60]	; (800a610 <MX_USB_DEVICE_Init+0x58>)
 800a5d2:	480e      	ldr	r0, [pc, #56]	; (800a60c <MX_USB_DEVICE_Init+0x54>)
 800a5d4:	f7fe ff80 	bl	80094d8 <USBD_RegisterClass>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a5de:	f7f7 fcc3 	bl	8001f68 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a5e2:	490c      	ldr	r1, [pc, #48]	; (800a614 <MX_USB_DEVICE_Init+0x5c>)
 800a5e4:	4809      	ldr	r0, [pc, #36]	; (800a60c <MX_USB_DEVICE_Init+0x54>)
 800a5e6:	f7fe feb1 	bl	800934c <USBD_CDC_RegisterInterface>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a5f0:	f7f7 fcba 	bl	8001f68 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a5f4:	4805      	ldr	r0, [pc, #20]	; (800a60c <MX_USB_DEVICE_Init+0x54>)
 800a5f6:	f7fe ff88 	bl	800950a <USBD_Start>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a600:	f7f7 fcb2 	bl	8001f68 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a604:	bf00      	nop
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000148 	.word	0x20000148
 800a60c:	20000368 	.word	0x20000368
 800a610:	20000034 	.word	0x20000034
 800a614:	20000138 	.word	0x20000138

0800a618 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a61c:	2200      	movs	r2, #0
 800a61e:	4905      	ldr	r1, [pc, #20]	; (800a634 <CDC_Init_FS+0x1c>)
 800a620:	4805      	ldr	r0, [pc, #20]	; (800a638 <CDC_Init_FS+0x20>)
 800a622:	f7fe fea9 	bl	8009378 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a626:	4905      	ldr	r1, [pc, #20]	; (800a63c <CDC_Init_FS+0x24>)
 800a628:	4803      	ldr	r0, [pc, #12]	; (800a638 <CDC_Init_FS+0x20>)
 800a62a:	f7fe febe 	bl	80093aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a62e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a630:	4618      	mov	r0, r3
 800a632:	bd80      	pop	{r7, pc}
 800a634:	20000a2c 	.word	0x20000a2c
 800a638:	20000368 	.word	0x20000368
 800a63c:	2000062c 	.word	0x2000062c

0800a640 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a640:	b480      	push	{r7}
 800a642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a644:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a646:	4618      	mov	r0, r3
 800a648:	46bd      	mov	sp, r7
 800a64a:	bc80      	pop	{r7}
 800a64c:	4770      	bx	lr
	...

0800a650 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
 800a65c:	4613      	mov	r3, r2
 800a65e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a660:	79fb      	ldrb	r3, [r7, #7]
 800a662:	2b23      	cmp	r3, #35	; 0x23
 800a664:	d84a      	bhi.n	800a6fc <CDC_Control_FS+0xac>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <CDC_Control_FS+0x1c>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a6fd 	.word	0x0800a6fd
 800a670:	0800a6fd 	.word	0x0800a6fd
 800a674:	0800a6fd 	.word	0x0800a6fd
 800a678:	0800a6fd 	.word	0x0800a6fd
 800a67c:	0800a6fd 	.word	0x0800a6fd
 800a680:	0800a6fd 	.word	0x0800a6fd
 800a684:	0800a6fd 	.word	0x0800a6fd
 800a688:	0800a6fd 	.word	0x0800a6fd
 800a68c:	0800a6fd 	.word	0x0800a6fd
 800a690:	0800a6fd 	.word	0x0800a6fd
 800a694:	0800a6fd 	.word	0x0800a6fd
 800a698:	0800a6fd 	.word	0x0800a6fd
 800a69c:	0800a6fd 	.word	0x0800a6fd
 800a6a0:	0800a6fd 	.word	0x0800a6fd
 800a6a4:	0800a6fd 	.word	0x0800a6fd
 800a6a8:	0800a6fd 	.word	0x0800a6fd
 800a6ac:	0800a6fd 	.word	0x0800a6fd
 800a6b0:	0800a6fd 	.word	0x0800a6fd
 800a6b4:	0800a6fd 	.word	0x0800a6fd
 800a6b8:	0800a6fd 	.word	0x0800a6fd
 800a6bc:	0800a6fd 	.word	0x0800a6fd
 800a6c0:	0800a6fd 	.word	0x0800a6fd
 800a6c4:	0800a6fd 	.word	0x0800a6fd
 800a6c8:	0800a6fd 	.word	0x0800a6fd
 800a6cc:	0800a6fd 	.word	0x0800a6fd
 800a6d0:	0800a6fd 	.word	0x0800a6fd
 800a6d4:	0800a6fd 	.word	0x0800a6fd
 800a6d8:	0800a6fd 	.word	0x0800a6fd
 800a6dc:	0800a6fd 	.word	0x0800a6fd
 800a6e0:	0800a6fd 	.word	0x0800a6fd
 800a6e4:	0800a6fd 	.word	0x0800a6fd
 800a6e8:	0800a6fd 	.word	0x0800a6fd
 800a6ec:	0800a6fd 	.word	0x0800a6fd
 800a6f0:	0800a6fd 	.word	0x0800a6fd
 800a6f4:	0800a6fd 	.word	0x0800a6fd
 800a6f8:	0800a6fd 	.word	0x0800a6fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a6fc:	bf00      	nop
  }

  return (USBD_OK);
 800a6fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a700:	4618      	mov	r0, r3
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	bc80      	pop	{r7}
 800a708:	4770      	bx	lr
 800a70a:	bf00      	nop

0800a70c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a716:	6879      	ldr	r1, [r7, #4]
 800a718:	4805      	ldr	r0, [pc, #20]	; (800a730 <CDC_Receive_FS+0x24>)
 800a71a:	f7fe fe46 	bl	80093aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a71e:	4804      	ldr	r0, [pc, #16]	; (800a730 <CDC_Receive_FS+0x24>)
 800a720:	f7fe fe85 	bl	800942e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	20000368 	.word	0x20000368

0800a734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <CDC_Transmit_FS+0x48>)
 800a746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a74a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a756:	2301      	movs	r3, #1
 800a758:	e00b      	b.n	800a772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a75a:	887b      	ldrh	r3, [r7, #2]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6879      	ldr	r1, [r7, #4]
 800a760:	4806      	ldr	r0, [pc, #24]	; (800a77c <CDC_Transmit_FS+0x48>)
 800a762:	f7fe fe09 	bl	8009378 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a766:	4805      	ldr	r0, [pc, #20]	; (800a77c <CDC_Transmit_FS+0x48>)
 800a768:	f7fe fe32 	bl	80093d0 <USBD_CDC_TransmitPacket>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a770:	7bfb      	ldrb	r3, [r7, #15]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
 800a77a:	bf00      	nop
 800a77c:	20000368 	.word	0x20000368

0800a780 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a780:	b480      	push	{r7}
 800a782:	b083      	sub	sp, #12
 800a784:	af00      	add	r7, sp, #0
 800a786:	4603      	mov	r3, r0
 800a788:	6039      	str	r1, [r7, #0]
 800a78a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2212      	movs	r2, #18
 800a790:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a792:	4b03      	ldr	r3, [pc, #12]	; (800a7a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a794:	4618      	mov	r0, r3
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	bc80      	pop	{r7}
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	20000164 	.word	0x20000164

0800a7a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	6039      	str	r1, [r7, #0]
 800a7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a7b6:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	370c      	adds	r7, #12
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc80      	pop	{r7}
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000178 	.word	0x20000178

0800a7c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	6039      	str	r1, [r7, #0]
 800a7d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a7d4:	79fb      	ldrb	r3, [r7, #7]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7da:	683a      	ldr	r2, [r7, #0]
 800a7dc:	4907      	ldr	r1, [pc, #28]	; (800a7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a7de:	4808      	ldr	r0, [pc, #32]	; (800a800 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7e0:	f7ff fe0c 	bl	800a3fc <USBD_GetString>
 800a7e4:	e004      	b.n	800a7f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	4904      	ldr	r1, [pc, #16]	; (800a7fc <USBD_FS_ProductStrDescriptor+0x34>)
 800a7ea:	4805      	ldr	r0, [pc, #20]	; (800a800 <USBD_FS_ProductStrDescriptor+0x38>)
 800a7ec:	f7ff fe06 	bl	800a3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a7f0:	4b02      	ldr	r3, [pc, #8]	; (800a7fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20000e2c 	.word	0x20000e2c
 800a800:	0800cbc4 	.word	0x0800cbc4

0800a804 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a810:	683a      	ldr	r2, [r7, #0]
 800a812:	4904      	ldr	r1, [pc, #16]	; (800a824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a814:	4804      	ldr	r0, [pc, #16]	; (800a828 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a816:	f7ff fdf1 	bl	800a3fc <USBD_GetString>
  return USBD_StrDesc;
 800a81a:	4b02      	ldr	r3, [pc, #8]	; (800a824 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20000e2c 	.word	0x20000e2c
 800a828:	0800cbd8 	.word	0x0800cbd8

0800a82c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	4603      	mov	r3, r0
 800a834:	6039      	str	r1, [r7, #0]
 800a836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	221a      	movs	r2, #26
 800a83c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a83e:	f000 f843 	bl	800a8c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a842:	4b02      	ldr	r3, [pc, #8]	; (800a84c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a844:	4618      	mov	r0, r3
 800a846:	3708      	adds	r7, #8
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	2000017c 	.word	0x2000017c

0800a850 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b082      	sub	sp, #8
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	6039      	str	r1, [r7, #0]
 800a85a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a85c:	79fb      	ldrb	r3, [r7, #7]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d105      	bne.n	800a86e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	4907      	ldr	r1, [pc, #28]	; (800a884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a866:	4808      	ldr	r0, [pc, #32]	; (800a888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a868:	f7ff fdc8 	bl	800a3fc <USBD_GetString>
 800a86c:	e004      	b.n	800a878 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	4904      	ldr	r1, [pc, #16]	; (800a884 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a872:	4805      	ldr	r0, [pc, #20]	; (800a888 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a874:	f7ff fdc2 	bl	800a3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a878:	4b02      	ldr	r3, [pc, #8]	; (800a884 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3708      	adds	r7, #8
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop
 800a884:	20000e2c 	.word	0x20000e2c
 800a888:	0800cbec 	.word	0x0800cbec

0800a88c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	4603      	mov	r3, r0
 800a894:	6039      	str	r1, [r7, #0]
 800a896:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a898:	79fb      	ldrb	r3, [r7, #7]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d105      	bne.n	800a8aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a89e:	683a      	ldr	r2, [r7, #0]
 800a8a0:	4907      	ldr	r1, [pc, #28]	; (800a8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8a2:	4808      	ldr	r0, [pc, #32]	; (800a8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8a4:	f7ff fdaa 	bl	800a3fc <USBD_GetString>
 800a8a8:	e004      	b.n	800a8b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	4904      	ldr	r1, [pc, #16]	; (800a8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a8ae:	4805      	ldr	r0, [pc, #20]	; (800a8c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a8b0:	f7ff fda4 	bl	800a3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8b4:	4b02      	ldr	r3, [pc, #8]	; (800a8c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000e2c 	.word	0x20000e2c
 800a8c4:	0800cbf8 	.word	0x0800cbf8

0800a8c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a8ce:	4b0f      	ldr	r3, [pc, #60]	; (800a90c <Get_SerialNum+0x44>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a8d4:	4b0e      	ldr	r3, [pc, #56]	; (800a910 <Get_SerialNum+0x48>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a8da:	4b0e      	ldr	r3, [pc, #56]	; (800a914 <Get_SerialNum+0x4c>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4413      	add	r3, r2
 800a8e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d009      	beq.n	800a902 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a8ee:	2208      	movs	r2, #8
 800a8f0:	4909      	ldr	r1, [pc, #36]	; (800a918 <Get_SerialNum+0x50>)
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 f814 	bl	800a920 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a8f8:	2204      	movs	r2, #4
 800a8fa:	4908      	ldr	r1, [pc, #32]	; (800a91c <Get_SerialNum+0x54>)
 800a8fc:	68b8      	ldr	r0, [r7, #8]
 800a8fe:	f000 f80f 	bl	800a920 <IntToUnicode>
  }
}
 800a902:	bf00      	nop
 800a904:	3710      	adds	r7, #16
 800a906:	46bd      	mov	sp, r7
 800a908:	bd80      	pop	{r7, pc}
 800a90a:	bf00      	nop
 800a90c:	1ffff7e8 	.word	0x1ffff7e8
 800a910:	1ffff7ec 	.word	0x1ffff7ec
 800a914:	1ffff7f0 	.word	0x1ffff7f0
 800a918:	2000017e 	.word	0x2000017e
 800a91c:	2000018e 	.word	0x2000018e

0800a920 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a920:	b480      	push	{r7}
 800a922:	b087      	sub	sp, #28
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	4613      	mov	r3, r2
 800a92c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a932:	2300      	movs	r3, #0
 800a934:	75fb      	strb	r3, [r7, #23]
 800a936:	e027      	b.n	800a988 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	0f1b      	lsrs	r3, r3, #28
 800a93c:	2b09      	cmp	r3, #9
 800a93e:	d80b      	bhi.n	800a958 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	0f1b      	lsrs	r3, r3, #28
 800a944:	b2da      	uxtb	r2, r3
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	005b      	lsls	r3, r3, #1
 800a94a:	4619      	mov	r1, r3
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	440b      	add	r3, r1
 800a950:	3230      	adds	r2, #48	; 0x30
 800a952:	b2d2      	uxtb	r2, r2
 800a954:	701a      	strb	r2, [r3, #0]
 800a956:	e00a      	b.n	800a96e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	0f1b      	lsrs	r3, r3, #28
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	005b      	lsls	r3, r3, #1
 800a962:	4619      	mov	r1, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	440b      	add	r3, r1
 800a968:	3237      	adds	r2, #55	; 0x37
 800a96a:	b2d2      	uxtb	r2, r2
 800a96c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	011b      	lsls	r3, r3, #4
 800a972:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a974:	7dfb      	ldrb	r3, [r7, #23]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	3301      	adds	r3, #1
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	4413      	add	r3, r2
 800a97e:	2200      	movs	r2, #0
 800a980:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a982:	7dfb      	ldrb	r3, [r7, #23]
 800a984:	3301      	adds	r3, #1
 800a986:	75fb      	strb	r3, [r7, #23]
 800a988:	7dfa      	ldrb	r2, [r7, #23]
 800a98a:	79fb      	ldrb	r3, [r7, #7]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d3d3      	bcc.n	800a938 <IntToUnicode+0x18>
  }
}
 800a990:	bf00      	nop
 800a992:	bf00      	nop
 800a994:	371c      	adds	r7, #28
 800a996:	46bd      	mov	sp, r7
 800a998:	bc80      	pop	{r7}
 800a99a:	4770      	bx	lr

0800a99c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a0d      	ldr	r2, [pc, #52]	; (800a9e0 <HAL_PCD_MspInit+0x44>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d113      	bne.n	800a9d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	; (800a9e4 <HAL_PCD_MspInit+0x48>)
 800a9b0:	69db      	ldr	r3, [r3, #28]
 800a9b2:	4a0c      	ldr	r2, [pc, #48]	; (800a9e4 <HAL_PCD_MspInit+0x48>)
 800a9b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a9b8:	61d3      	str	r3, [r2, #28]
 800a9ba:	4b0a      	ldr	r3, [pc, #40]	; (800a9e4 <HAL_PCD_MspInit+0x48>)
 800a9bc:	69db      	ldr	r3, [r3, #28]
 800a9be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9c2:	60fb      	str	r3, [r7, #12]
 800a9c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	2014      	movs	r0, #20
 800a9cc:	f7f7 fda5 	bl	800251a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a9d0:	2014      	movs	r0, #20
 800a9d2:	f7f7 fdbe 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	40005c00 	.word	0x40005c00
 800a9e4:	40021000 	.word	0x40021000

0800a9e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b082      	sub	sp, #8
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	4610      	mov	r0, r2
 800aa00:	f7fe fdcb 	bl	800959a <USBD_LL_SetupStage>
}
 800aa04:	bf00      	nop
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
 800aa14:	460b      	mov	r3, r1
 800aa16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	6879      	ldr	r1, [r7, #4]
 800aa22:	4613      	mov	r3, r2
 800aa24:	009b      	lsls	r3, r3, #2
 800aa26:	4413      	add	r3, r2
 800aa28:	00db      	lsls	r3, r3, #3
 800aa2a:	440b      	add	r3, r1
 800aa2c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	78fb      	ldrb	r3, [r7, #3]
 800aa34:	4619      	mov	r1, r3
 800aa36:	f7fe fdfd 	bl	8009634 <USBD_LL_DataOutStage>
}
 800aa3a:	bf00      	nop
 800aa3c:	3708      	adds	r7, #8
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800aa54:	78fa      	ldrb	r2, [r7, #3]
 800aa56:	6879      	ldr	r1, [r7, #4]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	440b      	add	r3, r1
 800aa62:	333c      	adds	r3, #60	; 0x3c
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	78fb      	ldrb	r3, [r7, #3]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f7fe fe54 	bl	8009716 <USBD_LL_DataInStage>
}
 800aa6e:	bf00      	nop
 800aa70:	3708      	adds	r7, #8
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}

0800aa76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa76:	b580      	push	{r7, lr}
 800aa78:	b082      	sub	sp, #8
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe ff64 	bl	8009952 <USBD_LL_SOF>
}
 800aa8a:	bf00      	nop
 800aa8c:	3708      	adds	r7, #8
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d001      	beq.n	800aaaa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800aaa6:	f7f7 fa5f 	bl	8001f68 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aab0:	7bfa      	ldrb	r2, [r7, #15]
 800aab2:	4611      	mov	r1, r2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f7fe ff14 	bl	80098e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7fe fecd 	bl	8009860 <USBD_LL_Reset>
}
 800aac6:	bf00      	nop
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b082      	sub	sp, #8
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800aade:	4618      	mov	r0, r3
 800aae0:	f7fe ff0e 	bl	8009900 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d005      	beq.n	800aaf8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aaec:	4b04      	ldr	r3, [pc, #16]	; (800ab00 <HAL_PCD_SuspendCallback+0x30>)
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	4a03      	ldr	r2, [pc, #12]	; (800ab00 <HAL_PCD_SuspendCallback+0x30>)
 800aaf2:	f043 0306 	orr.w	r3, r3, #6
 800aaf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aaf8:	bf00      	nop
 800aafa:	3708      	adds	r7, #8
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	e000ed00 	.word	0xe000ed00

0800ab04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b082      	sub	sp, #8
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800ab12:	4618      	mov	r0, r3
 800ab14:	f7fe ff08 	bl	8009928 <USBD_LL_Resume>
}
 800ab18:	bf00      	nop
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ab28:	4a28      	ldr	r2, [pc, #160]	; (800abcc <USBD_LL_Init+0xac>)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	4a26      	ldr	r2, [pc, #152]	; (800abcc <USBD_LL_Init+0xac>)
 800ab34:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ab38:	4b24      	ldr	r3, [pc, #144]	; (800abcc <USBD_LL_Init+0xac>)
 800ab3a:	4a25      	ldr	r2, [pc, #148]	; (800abd0 <USBD_LL_Init+0xb0>)
 800ab3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ab3e:	4b23      	ldr	r3, [pc, #140]	; (800abcc <USBD_LL_Init+0xac>)
 800ab40:	2208      	movs	r2, #8
 800ab42:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ab44:	4b21      	ldr	r3, [pc, #132]	; (800abcc <USBD_LL_Init+0xac>)
 800ab46:	2202      	movs	r2, #2
 800ab48:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800ab4a:	4b20      	ldr	r3, [pc, #128]	; (800abcc <USBD_LL_Init+0xac>)
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800ab50:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <USBD_LL_Init+0xac>)
 800ab52:	2200      	movs	r2, #0
 800ab54:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ab56:	4b1d      	ldr	r3, [pc, #116]	; (800abcc <USBD_LL_Init+0xac>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ab5c:	481b      	ldr	r0, [pc, #108]	; (800abcc <USBD_LL_Init+0xac>)
 800ab5e:	f7f7 fec8 	bl	80028f2 <HAL_PCD_Init>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800ab68:	f7f7 f9fe 	bl	8001f68 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab72:	2318      	movs	r3, #24
 800ab74:	2200      	movs	r2, #0
 800ab76:	2100      	movs	r1, #0
 800ab78:	f7f9 fb3c 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab82:	2358      	movs	r3, #88	; 0x58
 800ab84:	2200      	movs	r2, #0
 800ab86:	2180      	movs	r1, #128	; 0x80
 800ab88:	f7f9 fb34 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ab92:	23c0      	movs	r3, #192	; 0xc0
 800ab94:	2200      	movs	r2, #0
 800ab96:	2181      	movs	r1, #129	; 0x81
 800ab98:	f7f9 fb2c 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aba2:	f44f 7388 	mov.w	r3, #272	; 0x110
 800aba6:	2200      	movs	r2, #0
 800aba8:	2101      	movs	r1, #1
 800abaa:	f7f9 fb23 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abb8:	2200      	movs	r2, #0
 800abba:	2182      	movs	r1, #130	; 0x82
 800abbc:	f7f9 fb1a 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	2000102c 	.word	0x2000102c
 800abd0:	40005c00 	.word	0x40005c00

0800abd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abdc:	2300      	movs	r3, #0
 800abde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800abea:	4618      	mov	r0, r3
 800abec:	f7f7 ff8c 	bl	8002b08 <HAL_PCD_Start>
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	4618      	mov	r0, r3
 800abf8:	f000 f94e 	bl	800ae98 <USBD_Get_USB_Status>
 800abfc:	4603      	mov	r3, r0
 800abfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}

0800ac0a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b084      	sub	sp, #16
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
 800ac12:	4608      	mov	r0, r1
 800ac14:	4611      	mov	r1, r2
 800ac16:	461a      	mov	r2, r3
 800ac18:	4603      	mov	r3, r0
 800ac1a:	70fb      	strb	r3, [r7, #3]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70bb      	strb	r3, [r7, #2]
 800ac20:	4613      	mov	r3, r2
 800ac22:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ac32:	78bb      	ldrb	r3, [r7, #2]
 800ac34:	883a      	ldrh	r2, [r7, #0]
 800ac36:	78f9      	ldrb	r1, [r7, #3]
 800ac38:	f7f8 f904 	bl	8002e44 <HAL_PCD_EP_Open>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac40:	7bfb      	ldrb	r3, [r7, #15]
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 f928 	bl	800ae98 <USBD_Get_USB_Status>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3710      	adds	r7, #16
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}

0800ac56 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac56:	b580      	push	{r7, lr}
 800ac58:	b084      	sub	sp, #16
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
 800ac5e:	460b      	mov	r3, r1
 800ac60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac62:	2300      	movs	r3, #0
 800ac64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac66:	2300      	movs	r3, #0
 800ac68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac70:	78fa      	ldrb	r2, [r7, #3]
 800ac72:	4611      	mov	r1, r2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7f8 f94b 	bl	8002f10 <HAL_PCD_EP_Close>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac7e:	7bfb      	ldrb	r3, [r7, #15]
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 f909 	bl	800ae98 <USBD_Get_USB_Status>
 800ac86:	4603      	mov	r3, r0
 800ac88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac94:	b580      	push	{r7, lr}
 800ac96:	b084      	sub	sp, #16
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aca0:	2300      	movs	r3, #0
 800aca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acae:	78fa      	ldrb	r2, [r7, #3]
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7f8 fa0b 	bl	80030ce <HAL_PCD_EP_SetStall>
 800acb8:	4603      	mov	r3, r0
 800acba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 f8ea 	bl	800ae98 <USBD_Get_USB_Status>
 800acc4:	4603      	mov	r3, r0
 800acc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}

0800acd2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800acd2:	b580      	push	{r7, lr}
 800acd4:	b084      	sub	sp, #16
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
 800acda:	460b      	mov	r3, r1
 800acdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800acec:	78fa      	ldrb	r2, [r7, #3]
 800acee:	4611      	mov	r1, r2
 800acf0:	4618      	mov	r0, r3
 800acf2:	f7f8 fa4c 	bl	800318e <HAL_PCD_EP_ClrStall>
 800acf6:	4603      	mov	r3, r0
 800acf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800acfa:	7bfb      	ldrb	r3, [r7, #15]
 800acfc:	4618      	mov	r0, r3
 800acfe:	f000 f8cb 	bl	800ae98 <USBD_Get_USB_Status>
 800ad02:	4603      	mov	r3, r0
 800ad04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad06:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3710      	adds	r7, #16
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ad10:	b480      	push	{r7}
 800ad12:	b085      	sub	sp, #20
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	460b      	mov	r3, r1
 800ad1a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad22:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ad24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	da0c      	bge.n	800ad46 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	1c5a      	adds	r2, r3, #1
 800ad36:	4613      	mov	r3, r2
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	00db      	lsls	r3, r3, #3
 800ad3e:	440b      	add	r3, r1
 800ad40:	3302      	adds	r3, #2
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	e00b      	b.n	800ad5e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ad46:	78fb      	ldrb	r3, [r7, #3]
 800ad48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad4c:	68f9      	ldr	r1, [r7, #12]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	00db      	lsls	r3, r3, #3
 800ad56:	440b      	add	r3, r1
 800ad58:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ad5c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bc80      	pop	{r7}
 800ad66:	4770      	bx	lr

0800ad68 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad82:	78fa      	ldrb	r2, [r7, #3]
 800ad84:	4611      	mov	r1, r2
 800ad86:	4618      	mov	r0, r3
 800ad88:	f7f8 f837 	bl	8002dfa <HAL_PCD_SetAddress>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad90:	7bfb      	ldrb	r3, [r7, #15]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 f880 	bl	800ae98 <USBD_Get_USB_Status>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3710      	adds	r7, #16
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}

0800ada6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ada6:	b580      	push	{r7, lr}
 800ada8:	b086      	sub	sp, #24
 800adaa:	af00      	add	r7, sp, #0
 800adac:	60f8      	str	r0, [r7, #12]
 800adae:	607a      	str	r2, [r7, #4]
 800adb0:	461a      	mov	r2, r3
 800adb2:	460b      	mov	r3, r1
 800adb4:	72fb      	strb	r3, [r7, #11]
 800adb6:	4613      	mov	r3, r2
 800adb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adba:	2300      	movs	r3, #0
 800adbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800adc8:	893b      	ldrh	r3, [r7, #8]
 800adca:	7af9      	ldrb	r1, [r7, #11]
 800adcc:	687a      	ldr	r2, [r7, #4]
 800adce:	f7f8 f93b 	bl	8003048 <HAL_PCD_EP_Transmit>
 800add2:	4603      	mov	r3, r0
 800add4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800add6:	7dfb      	ldrb	r3, [r7, #23]
 800add8:	4618      	mov	r0, r3
 800adda:	f000 f85d 	bl	800ae98 <USBD_Get_USB_Status>
 800adde:	4603      	mov	r3, r0
 800ade0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ade2:	7dbb      	ldrb	r3, [r7, #22]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3718      	adds	r7, #24
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b086      	sub	sp, #24
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	60f8      	str	r0, [r7, #12]
 800adf4:	607a      	str	r2, [r7, #4]
 800adf6:	461a      	mov	r2, r3
 800adf8:	460b      	mov	r3, r1
 800adfa:	72fb      	strb	r3, [r7, #11]
 800adfc:	4613      	mov	r3, r2
 800adfe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ae0e:	893b      	ldrh	r3, [r7, #8]
 800ae10:	7af9      	ldrb	r1, [r7, #11]
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	f7f8 f8c4 	bl	8002fa0 <HAL_PCD_EP_Receive>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae1c:	7dfb      	ldrb	r3, [r7, #23]
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f000 f83a 	bl	800ae98 <USBD_Get_USB_Status>
 800ae24:	4603      	mov	r3, r0
 800ae26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ae28:	7dbb      	ldrb	r3, [r7, #22]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae44:	78fa      	ldrb	r2, [r7, #3]
 800ae46:	4611      	mov	r1, r2
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7f8 f8e6 	bl	800301a <HAL_PCD_EP_GetRxCount>
 800ae4e:	4603      	mov	r3, r0
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ae60:	4b02      	ldr	r3, [pc, #8]	; (800ae6c <USBD_static_malloc+0x14>)
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	370c      	adds	r7, #12
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bc80      	pop	{r7}
 800ae6a:	4770      	bx	lr
 800ae6c:	20001318 	.word	0x20001318

0800ae70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]

}
 800ae78:	bf00      	nop
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bc80      	pop	{r7}
 800ae80:	4770      	bx	lr

0800ae82 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae82:	b480      	push	{r7}
 800ae84:	b083      	sub	sp, #12
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ae8e:	bf00      	nop
 800ae90:	370c      	adds	r7, #12
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bc80      	pop	{r7}
 800ae96:	4770      	bx	lr

0800ae98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	2b03      	cmp	r3, #3
 800aeaa:	d817      	bhi.n	800aedc <USBD_Get_USB_Status+0x44>
 800aeac:	a201      	add	r2, pc, #4	; (adr r2, 800aeb4 <USBD_Get_USB_Status+0x1c>)
 800aeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb2:	bf00      	nop
 800aeb4:	0800aec5 	.word	0x0800aec5
 800aeb8:	0800aecb 	.word	0x0800aecb
 800aebc:	0800aed1 	.word	0x0800aed1
 800aec0:	0800aed7 	.word	0x0800aed7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
    break;
 800aec8:	e00b      	b.n	800aee2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aeca:	2302      	movs	r3, #2
 800aecc:	73fb      	strb	r3, [r7, #15]
    break;
 800aece:	e008      	b.n	800aee2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aed0:	2301      	movs	r3, #1
 800aed2:	73fb      	strb	r3, [r7, #15]
    break;
 800aed4:	e005      	b.n	800aee2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aed6:	2302      	movs	r3, #2
 800aed8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeda:	e002      	b.n	800aee2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800aedc:	2302      	movs	r3, #2
 800aede:	73fb      	strb	r3, [r7, #15]
    break;
 800aee0:	bf00      	nop
  }
  return usb_status;
 800aee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3714      	adds	r7, #20
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr
 800aeee:	bf00      	nop

0800aef0 <cos>:
 800aef0:	b530      	push	{r4, r5, lr}
 800aef2:	4a20      	ldr	r2, [pc, #128]	; (800af74 <cos+0x84>)
 800aef4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aef8:	4293      	cmp	r3, r2
 800aefa:	b087      	sub	sp, #28
 800aefc:	dc06      	bgt.n	800af0c <cos+0x1c>
 800aefe:	2200      	movs	r2, #0
 800af00:	2300      	movs	r3, #0
 800af02:	b007      	add	sp, #28
 800af04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af08:	f000 bc56 	b.w	800b7b8 <__kernel_cos>
 800af0c:	4a1a      	ldr	r2, [pc, #104]	; (800af78 <cos+0x88>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	dd05      	ble.n	800af1e <cos+0x2e>
 800af12:	4602      	mov	r2, r0
 800af14:	460b      	mov	r3, r1
 800af16:	f7f5 f927 	bl	8000168 <__aeabi_dsub>
 800af1a:	b007      	add	sp, #28
 800af1c:	bd30      	pop	{r4, r5, pc}
 800af1e:	aa02      	add	r2, sp, #8
 800af20:	f000 fa52 	bl	800b3c8 <__ieee754_rem_pio2>
 800af24:	f000 0003 	and.w	r0, r0, #3
 800af28:	2801      	cmp	r0, #1
 800af2a:	d009      	beq.n	800af40 <cos+0x50>
 800af2c:	2802      	cmp	r0, #2
 800af2e:	d011      	beq.n	800af54 <cos+0x64>
 800af30:	b9b8      	cbnz	r0, 800af62 <cos+0x72>
 800af32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af3a:	f000 fc3d 	bl	800b7b8 <__kernel_cos>
 800af3e:	e7ec      	b.n	800af1a <cos+0x2a>
 800af40:	9000      	str	r0, [sp, #0]
 800af42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af4a:	f001 f835 	bl	800bfb8 <__kernel_sin>
 800af4e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800af52:	e7e2      	b.n	800af1a <cos+0x2a>
 800af54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af5c:	f000 fc2c 	bl	800b7b8 <__kernel_cos>
 800af60:	e7f5      	b.n	800af4e <cos+0x5e>
 800af62:	2301      	movs	r3, #1
 800af64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af68:	9300      	str	r3, [sp, #0]
 800af6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af6e:	f001 f823 	bl	800bfb8 <__kernel_sin>
 800af72:	e7d2      	b.n	800af1a <cos+0x2a>
 800af74:	3fe921fb 	.word	0x3fe921fb
 800af78:	7fefffff 	.word	0x7fefffff
 800af7c:	00000000 	.word	0x00000000

0800af80 <floor>:
 800af80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af84:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800af88:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800af8c:	2e13      	cmp	r6, #19
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	4607      	mov	r7, r0
 800af94:	460c      	mov	r4, r1
 800af96:	4605      	mov	r5, r0
 800af98:	dc33      	bgt.n	800b002 <floor+0x82>
 800af9a:	2e00      	cmp	r6, #0
 800af9c:	da14      	bge.n	800afc8 <floor+0x48>
 800af9e:	a334      	add	r3, pc, #208	; (adr r3, 800b070 <floor+0xf0>)
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	f7f5 f8e2 	bl	800016c <__adddf3>
 800afa8:	2200      	movs	r2, #0
 800afaa:	2300      	movs	r3, #0
 800afac:	f7f5 fd24 	bl	80009f8 <__aeabi_dcmpgt>
 800afb0:	b138      	cbz	r0, 800afc2 <floor+0x42>
 800afb2:	2c00      	cmp	r4, #0
 800afb4:	da58      	bge.n	800b068 <floor+0xe8>
 800afb6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800afba:	431d      	orrs	r5, r3
 800afbc:	d001      	beq.n	800afc2 <floor+0x42>
 800afbe:	2500      	movs	r5, #0
 800afc0:	4c2d      	ldr	r4, [pc, #180]	; (800b078 <floor+0xf8>)
 800afc2:	4623      	mov	r3, r4
 800afc4:	462f      	mov	r7, r5
 800afc6:	e025      	b.n	800b014 <floor+0x94>
 800afc8:	4a2c      	ldr	r2, [pc, #176]	; (800b07c <floor+0xfc>)
 800afca:	fa42 f806 	asr.w	r8, r2, r6
 800afce:	ea01 0208 	and.w	r2, r1, r8
 800afd2:	4302      	orrs	r2, r0
 800afd4:	d01e      	beq.n	800b014 <floor+0x94>
 800afd6:	a326      	add	r3, pc, #152	; (adr r3, 800b070 <floor+0xf0>)
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 f8c6 	bl	800016c <__adddf3>
 800afe0:	2200      	movs	r2, #0
 800afe2:	2300      	movs	r3, #0
 800afe4:	f7f5 fd08 	bl	80009f8 <__aeabi_dcmpgt>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d0ea      	beq.n	800afc2 <floor+0x42>
 800afec:	2c00      	cmp	r4, #0
 800afee:	bfbe      	ittt	lt
 800aff0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800aff4:	fa43 f606 	asrlt.w	r6, r3, r6
 800aff8:	19a4      	addlt	r4, r4, r6
 800affa:	2500      	movs	r5, #0
 800affc:	ea24 0408 	bic.w	r4, r4, r8
 800b000:	e7df      	b.n	800afc2 <floor+0x42>
 800b002:	2e33      	cmp	r6, #51	; 0x33
 800b004:	dd0a      	ble.n	800b01c <floor+0x9c>
 800b006:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b00a:	d103      	bne.n	800b014 <floor+0x94>
 800b00c:	f7f5 f8ae 	bl	800016c <__adddf3>
 800b010:	4607      	mov	r7, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4638      	mov	r0, r7
 800b016:	4619      	mov	r1, r3
 800b018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b020:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800b024:	fa22 f808 	lsr.w	r8, r2, r8
 800b028:	ea18 0f00 	tst.w	r8, r0
 800b02c:	d0f2      	beq.n	800b014 <floor+0x94>
 800b02e:	a310      	add	r3, pc, #64	; (adr r3, 800b070 <floor+0xf0>)
 800b030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b034:	f7f5 f89a 	bl	800016c <__adddf3>
 800b038:	2200      	movs	r2, #0
 800b03a:	2300      	movs	r3, #0
 800b03c:	f7f5 fcdc 	bl	80009f8 <__aeabi_dcmpgt>
 800b040:	2800      	cmp	r0, #0
 800b042:	d0be      	beq.n	800afc2 <floor+0x42>
 800b044:	2c00      	cmp	r4, #0
 800b046:	da02      	bge.n	800b04e <floor+0xce>
 800b048:	2e14      	cmp	r6, #20
 800b04a:	d103      	bne.n	800b054 <floor+0xd4>
 800b04c:	3401      	adds	r4, #1
 800b04e:	ea25 0508 	bic.w	r5, r5, r8
 800b052:	e7b6      	b.n	800afc2 <floor+0x42>
 800b054:	2301      	movs	r3, #1
 800b056:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b05a:	fa03 f606 	lsl.w	r6, r3, r6
 800b05e:	4435      	add	r5, r6
 800b060:	42bd      	cmp	r5, r7
 800b062:	bf38      	it	cc
 800b064:	18e4      	addcc	r4, r4, r3
 800b066:	e7f2      	b.n	800b04e <floor+0xce>
 800b068:	2500      	movs	r5, #0
 800b06a:	462c      	mov	r4, r5
 800b06c:	e7a9      	b.n	800afc2 <floor+0x42>
 800b06e:	bf00      	nop
 800b070:	8800759c 	.word	0x8800759c
 800b074:	7e37e43c 	.word	0x7e37e43c
 800b078:	bff00000 	.word	0xbff00000
 800b07c:	000fffff 	.word	0x000fffff

0800b080 <sin>:
 800b080:	b530      	push	{r4, r5, lr}
 800b082:	4a20      	ldr	r2, [pc, #128]	; (800b104 <sin+0x84>)
 800b084:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b088:	4293      	cmp	r3, r2
 800b08a:	b087      	sub	sp, #28
 800b08c:	dc06      	bgt.n	800b09c <sin+0x1c>
 800b08e:	2300      	movs	r3, #0
 800b090:	2200      	movs	r2, #0
 800b092:	9300      	str	r3, [sp, #0]
 800b094:	2300      	movs	r3, #0
 800b096:	f000 ff8f 	bl	800bfb8 <__kernel_sin>
 800b09a:	e006      	b.n	800b0aa <sin+0x2a>
 800b09c:	4a1a      	ldr	r2, [pc, #104]	; (800b108 <sin+0x88>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	dd05      	ble.n	800b0ae <sin+0x2e>
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	f7f5 f85f 	bl	8000168 <__aeabi_dsub>
 800b0aa:	b007      	add	sp, #28
 800b0ac:	bd30      	pop	{r4, r5, pc}
 800b0ae:	aa02      	add	r2, sp, #8
 800b0b0:	f000 f98a 	bl	800b3c8 <__ieee754_rem_pio2>
 800b0b4:	f000 0003 	and.w	r0, r0, #3
 800b0b8:	2801      	cmp	r0, #1
 800b0ba:	d009      	beq.n	800b0d0 <sin+0x50>
 800b0bc:	2802      	cmp	r0, #2
 800b0be:	d00e      	beq.n	800b0de <sin+0x5e>
 800b0c0:	b9c0      	cbnz	r0, 800b0f4 <sin+0x74>
 800b0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	9300      	str	r3, [sp, #0]
 800b0ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ce:	e7e2      	b.n	800b096 <sin+0x16>
 800b0d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0d8:	f000 fb6e 	bl	800b7b8 <__kernel_cos>
 800b0dc:	e7e5      	b.n	800b0aa <sin+0x2a>
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0e4:	9300      	str	r3, [sp, #0]
 800b0e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0ea:	f000 ff65 	bl	800bfb8 <__kernel_sin>
 800b0ee:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b0f2:	e7da      	b.n	800b0aa <sin+0x2a>
 800b0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0fc:	f000 fb5c 	bl	800b7b8 <__kernel_cos>
 800b100:	e7f5      	b.n	800b0ee <sin+0x6e>
 800b102:	bf00      	nop
 800b104:	3fe921fb 	.word	0x3fe921fb
 800b108:	7fefffff 	.word	0x7fefffff

0800b10c <roundf>:
 800b10c:	b508      	push	{r3, lr}
 800b10e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b112:	3b7f      	subs	r3, #127	; 0x7f
 800b114:	2b16      	cmp	r3, #22
 800b116:	4601      	mov	r1, r0
 800b118:	4602      	mov	r2, r0
 800b11a:	dc14      	bgt.n	800b146 <roundf+0x3a>
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	da07      	bge.n	800b130 <roundf+0x24>
 800b120:	3301      	adds	r3, #1
 800b122:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b126:	d101      	bne.n	800b12c <roundf+0x20>
 800b128:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b12c:	4608      	mov	r0, r1
 800b12e:	bd08      	pop	{r3, pc}
 800b130:	4808      	ldr	r0, [pc, #32]	; (800b154 <roundf+0x48>)
 800b132:	4118      	asrs	r0, r3
 800b134:	4201      	tst	r1, r0
 800b136:	d0f9      	beq.n	800b12c <roundf+0x20>
 800b138:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b13c:	4119      	asrs	r1, r3
 800b13e:	4411      	add	r1, r2
 800b140:	ea21 0100 	bic.w	r1, r1, r0
 800b144:	e7f2      	b.n	800b12c <roundf+0x20>
 800b146:	2b80      	cmp	r3, #128	; 0x80
 800b148:	d1f0      	bne.n	800b12c <roundf+0x20>
 800b14a:	f7f5 fcf3 	bl	8000b34 <__addsf3>
 800b14e:	4601      	mov	r1, r0
 800b150:	e7ec      	b.n	800b12c <roundf+0x20>
 800b152:	bf00      	nop
 800b154:	007fffff 	.word	0x007fffff

0800b158 <fmod>:
 800b158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b15c:	4680      	mov	r8, r0
 800b15e:	4689      	mov	r9, r1
 800b160:	4616      	mov	r6, r2
 800b162:	461f      	mov	r7, r3
 800b164:	f000 f820 	bl	800b1a8 <__ieee754_fmod>
 800b168:	4632      	mov	r2, r6
 800b16a:	4604      	mov	r4, r0
 800b16c:	460d      	mov	r5, r1
 800b16e:	463b      	mov	r3, r7
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 fc4a 	bl	8000a0c <__aeabi_dcmpun>
 800b178:	b990      	cbnz	r0, 800b1a0 <fmod+0x48>
 800b17a:	2200      	movs	r2, #0
 800b17c:	2300      	movs	r3, #0
 800b17e:	4630      	mov	r0, r6
 800b180:	4639      	mov	r1, r7
 800b182:	f7f5 fc11 	bl	80009a8 <__aeabi_dcmpeq>
 800b186:	b158      	cbz	r0, 800b1a0 <fmod+0x48>
 800b188:	f001 f850 	bl	800c22c <__errno>
 800b18c:	2321      	movs	r3, #33	; 0x21
 800b18e:	2200      	movs	r2, #0
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	2300      	movs	r3, #0
 800b194:	4610      	mov	r0, r2
 800b196:	4619      	mov	r1, r3
 800b198:	f7f5 fac8 	bl	800072c <__aeabi_ddiv>
 800b19c:	4604      	mov	r4, r0
 800b19e:	460d      	mov	r5, r1
 800b1a0:	4620      	mov	r0, r4
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800b1a8 <__ieee754_fmod>:
 800b1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ac:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800b1b0:	460e      	mov	r6, r1
 800b1b2:	461d      	mov	r5, r3
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	ea58 0302 	orrs.w	r3, r8, r2
 800b1ba:	4607      	mov	r7, r0
 800b1bc:	4614      	mov	r4, r2
 800b1be:	4694      	mov	ip, r2
 800b1c0:	4696      	mov	lr, r2
 800b1c2:	d00c      	beq.n	800b1de <__ieee754_fmod+0x36>
 800b1c4:	4a7a      	ldr	r2, [pc, #488]	; (800b3b0 <__ieee754_fmod+0x208>)
 800b1c6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	46b2      	mov	sl, r6
 800b1ce:	dc06      	bgt.n	800b1de <__ieee754_fmod+0x36>
 800b1d0:	4262      	negs	r2, r4
 800b1d2:	4878      	ldr	r0, [pc, #480]	; (800b3b4 <__ieee754_fmod+0x20c>)
 800b1d4:	4322      	orrs	r2, r4
 800b1d6:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800b1da:	4282      	cmp	r2, r0
 800b1dc:	d90c      	bls.n	800b1f8 <__ieee754_fmod+0x50>
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	4638      	mov	r0, r7
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	f7f5 f977 	bl	80004d8 <__aeabi_dmul>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	f7f5 fa9d 	bl	800072c <__aeabi_ddiv>
 800b1f2:	4607      	mov	r7, r0
 800b1f4:	460e      	mov	r6, r1
 800b1f6:	e00e      	b.n	800b216 <__ieee754_fmod+0x6e>
 800b1f8:	4543      	cmp	r3, r8
 800b1fa:	46b9      	mov	r9, r7
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800b202:	dc0c      	bgt.n	800b21e <__ieee754_fmod+0x76>
 800b204:	db07      	blt.n	800b216 <__ieee754_fmod+0x6e>
 800b206:	4567      	cmp	r7, ip
 800b208:	d305      	bcc.n	800b216 <__ieee754_fmod+0x6e>
 800b20a:	d108      	bne.n	800b21e <__ieee754_fmod+0x76>
 800b20c:	4b6a      	ldr	r3, [pc, #424]	; (800b3b8 <__ieee754_fmod+0x210>)
 800b20e:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800b212:	e9d4 7600 	ldrd	r7, r6, [r4]
 800b216:	4638      	mov	r0, r7
 800b218:	4631      	mov	r1, r6
 800b21a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21e:	ea1a 0f00 	tst.w	sl, r0
 800b222:	d14a      	bne.n	800b2ba <__ieee754_fmod+0x112>
 800b224:	2b00      	cmp	r3, #0
 800b226:	d141      	bne.n	800b2ac <__ieee754_fmod+0x104>
 800b228:	464a      	mov	r2, r9
 800b22a:	4864      	ldr	r0, [pc, #400]	; (800b3bc <__ieee754_fmod+0x214>)
 800b22c:	2a00      	cmp	r2, #0
 800b22e:	dc3a      	bgt.n	800b2a6 <__ieee754_fmod+0xfe>
 800b230:	4a60      	ldr	r2, [pc, #384]	; (800b3b4 <__ieee754_fmod+0x20c>)
 800b232:	402a      	ands	r2, r5
 800b234:	2a00      	cmp	r2, #0
 800b236:	d14f      	bne.n	800b2d8 <__ieee754_fmod+0x130>
 800b238:	f1b8 0f00 	cmp.w	r8, #0
 800b23c:	d144      	bne.n	800b2c8 <__ieee754_fmod+0x120>
 800b23e:	4666      	mov	r6, ip
 800b240:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800b244:	2e00      	cmp	r6, #0
 800b246:	dc3c      	bgt.n	800b2c2 <__ieee754_fmod+0x11a>
 800b248:	4e5d      	ldr	r6, [pc, #372]	; (800b3c0 <__ieee754_fmod+0x218>)
 800b24a:	42b0      	cmp	r0, r6
 800b24c:	db49      	blt.n	800b2e2 <__ieee754_fmod+0x13a>
 800b24e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800b252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b256:	4e5a      	ldr	r6, [pc, #360]	; (800b3c0 <__ieee754_fmod+0x218>)
 800b258:	42b2      	cmp	r2, r6
 800b25a:	db54      	blt.n	800b306 <__ieee754_fmod+0x15e>
 800b25c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b260:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800b264:	1a80      	subs	r0, r0, r2
 800b266:	1b5e      	subs	r6, r3, r5
 800b268:	eba1 070e 	sub.w	r7, r1, lr
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d161      	bne.n	800b334 <__ieee754_fmod+0x18c>
 800b270:	4571      	cmp	r1, lr
 800b272:	bf38      	it	cc
 800b274:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b278:	2e00      	cmp	r6, #0
 800b27a:	bfa4      	itt	ge
 800b27c:	4639      	movge	r1, r7
 800b27e:	4633      	movge	r3, r6
 800b280:	ea53 0001 	orrs.w	r0, r3, r1
 800b284:	d0c2      	beq.n	800b20c <__ieee754_fmod+0x64>
 800b286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b28a:	db68      	blt.n	800b35e <__ieee754_fmod+0x1b6>
 800b28c:	484c      	ldr	r0, [pc, #304]	; (800b3c0 <__ieee754_fmod+0x218>)
 800b28e:	4282      	cmp	r2, r0
 800b290:	db6b      	blt.n	800b36a <__ieee754_fmod+0x1c2>
 800b292:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b296:	431c      	orrs	r4, r3
 800b298:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800b29c:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800b2a0:	460f      	mov	r7, r1
 800b2a2:	464e      	mov	r6, r9
 800b2a4:	e7b7      	b.n	800b216 <__ieee754_fmod+0x6e>
 800b2a6:	3801      	subs	r0, #1
 800b2a8:	0052      	lsls	r2, r2, #1
 800b2aa:	e7bf      	b.n	800b22c <__ieee754_fmod+0x84>
 800b2ac:	4844      	ldr	r0, [pc, #272]	; (800b3c0 <__ieee754_fmod+0x218>)
 800b2ae:	02da      	lsls	r2, r3, #11
 800b2b0:	2a00      	cmp	r2, #0
 800b2b2:	ddbd      	ble.n	800b230 <__ieee754_fmod+0x88>
 800b2b4:	3801      	subs	r0, #1
 800b2b6:	0052      	lsls	r2, r2, #1
 800b2b8:	e7fa      	b.n	800b2b0 <__ieee754_fmod+0x108>
 800b2ba:	1518      	asrs	r0, r3, #20
 800b2bc:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800b2c0:	e7b6      	b.n	800b230 <__ieee754_fmod+0x88>
 800b2c2:	3a01      	subs	r2, #1
 800b2c4:	0076      	lsls	r6, r6, #1
 800b2c6:	e7bd      	b.n	800b244 <__ieee754_fmod+0x9c>
 800b2c8:	4a3d      	ldr	r2, [pc, #244]	; (800b3c0 <__ieee754_fmod+0x218>)
 800b2ca:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800b2ce:	2e00      	cmp	r6, #0
 800b2d0:	ddba      	ble.n	800b248 <__ieee754_fmod+0xa0>
 800b2d2:	3a01      	subs	r2, #1
 800b2d4:	0076      	lsls	r6, r6, #1
 800b2d6:	e7fa      	b.n	800b2ce <__ieee754_fmod+0x126>
 800b2d8:	ea4f 5228 	mov.w	r2, r8, asr #20
 800b2dc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b2e0:	e7b2      	b.n	800b248 <__ieee754_fmod+0xa0>
 800b2e2:	1a31      	subs	r1, r6, r0
 800b2e4:	291f      	cmp	r1, #31
 800b2e6:	dc08      	bgt.n	800b2fa <__ieee754_fmod+0x152>
 800b2e8:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800b2ec:	408b      	lsls	r3, r1
 800b2ee:	fa29 f606 	lsr.w	r6, r9, r6
 800b2f2:	4333      	orrs	r3, r6
 800b2f4:	fa09 f101 	lsl.w	r1, r9, r1
 800b2f8:	e7ad      	b.n	800b256 <__ieee754_fmod+0xae>
 800b2fa:	4b32      	ldr	r3, [pc, #200]	; (800b3c4 <__ieee754_fmod+0x21c>)
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	1a1b      	subs	r3, r3, r0
 800b300:	fa09 f303 	lsl.w	r3, r9, r3
 800b304:	e7a7      	b.n	800b256 <__ieee754_fmod+0xae>
 800b306:	eba6 0e02 	sub.w	lr, r6, r2
 800b30a:	f1be 0f1f 	cmp.w	lr, #31
 800b30e:	dc0a      	bgt.n	800b326 <__ieee754_fmod+0x17e>
 800b310:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800b314:	fa08 f80e 	lsl.w	r8, r8, lr
 800b318:	fa2c f505 	lsr.w	r5, ip, r5
 800b31c:	ea45 0508 	orr.w	r5, r5, r8
 800b320:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b324:	e79e      	b.n	800b264 <__ieee754_fmod+0xbc>
 800b326:	4d27      	ldr	r5, [pc, #156]	; (800b3c4 <__ieee754_fmod+0x21c>)
 800b328:	f04f 0e00 	mov.w	lr, #0
 800b32c:	1aad      	subs	r5, r5, r2
 800b32e:	fa0c f505 	lsl.w	r5, ip, r5
 800b332:	e797      	b.n	800b264 <__ieee754_fmod+0xbc>
 800b334:	4571      	cmp	r1, lr
 800b336:	bf38      	it	cc
 800b338:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b33c:	2e00      	cmp	r6, #0
 800b33e:	da05      	bge.n	800b34c <__ieee754_fmod+0x1a4>
 800b340:	0fce      	lsrs	r6, r1, #31
 800b342:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800b346:	0049      	lsls	r1, r1, #1
 800b348:	3801      	subs	r0, #1
 800b34a:	e78c      	b.n	800b266 <__ieee754_fmod+0xbe>
 800b34c:	ea56 0307 	orrs.w	r3, r6, r7
 800b350:	f43f af5c 	beq.w	800b20c <__ieee754_fmod+0x64>
 800b354:	0ffb      	lsrs	r3, r7, #31
 800b356:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800b35a:	0079      	lsls	r1, r7, #1
 800b35c:	e7f4      	b.n	800b348 <__ieee754_fmod+0x1a0>
 800b35e:	0fc8      	lsrs	r0, r1, #31
 800b360:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b364:	0049      	lsls	r1, r1, #1
 800b366:	3a01      	subs	r2, #1
 800b368:	e78d      	b.n	800b286 <__ieee754_fmod+0xde>
 800b36a:	1a80      	subs	r0, r0, r2
 800b36c:	2814      	cmp	r0, #20
 800b36e:	dc0a      	bgt.n	800b386 <__ieee754_fmod+0x1de>
 800b370:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b374:	fa03 f202 	lsl.w	r2, r3, r2
 800b378:	40c1      	lsrs	r1, r0
 800b37a:	430a      	orrs	r2, r1
 800b37c:	4103      	asrs	r3, r0
 800b37e:	4610      	mov	r0, r2
 800b380:	ea43 0104 	orr.w	r1, r3, r4
 800b384:	e735      	b.n	800b1f2 <__ieee754_fmod+0x4a>
 800b386:	281f      	cmp	r0, #31
 800b388:	dc07      	bgt.n	800b39a <__ieee754_fmod+0x1f2>
 800b38a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b38e:	40c1      	lsrs	r1, r0
 800b390:	fa03 f202 	lsl.w	r2, r3, r2
 800b394:	430a      	orrs	r2, r1
 800b396:	4623      	mov	r3, r4
 800b398:	e7f1      	b.n	800b37e <__ieee754_fmod+0x1d6>
 800b39a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b39e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3a2:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b3a6:	32e2      	adds	r2, #226	; 0xe2
 800b3a8:	fa43 f202 	asr.w	r2, r3, r2
 800b3ac:	e7f3      	b.n	800b396 <__ieee754_fmod+0x1ee>
 800b3ae:	bf00      	nop
 800b3b0:	7fefffff 	.word	0x7fefffff
 800b3b4:	7ff00000 	.word	0x7ff00000
 800b3b8:	0800cc18 	.word	0x0800cc18
 800b3bc:	fffffbed 	.word	0xfffffbed
 800b3c0:	fffffc02 	.word	0xfffffc02
 800b3c4:	fffffbe2 	.word	0xfffffbe2

0800b3c8 <__ieee754_rem_pio2>:
 800b3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3cc:	4614      	mov	r4, r2
 800b3ce:	4ac4      	ldr	r2, [pc, #784]	; (800b6e0 <__ieee754_rem_pio2+0x318>)
 800b3d0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b3d4:	b08d      	sub	sp, #52	; 0x34
 800b3d6:	4592      	cmp	sl, r2
 800b3d8:	9104      	str	r1, [sp, #16]
 800b3da:	dc07      	bgt.n	800b3ec <__ieee754_rem_pio2+0x24>
 800b3dc:	2200      	movs	r2, #0
 800b3de:	2300      	movs	r3, #0
 800b3e0:	e9c4 0100 	strd	r0, r1, [r4]
 800b3e4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b3e8:	2500      	movs	r5, #0
 800b3ea:	e024      	b.n	800b436 <__ieee754_rem_pio2+0x6e>
 800b3ec:	4abd      	ldr	r2, [pc, #756]	; (800b6e4 <__ieee754_rem_pio2+0x31c>)
 800b3ee:	4592      	cmp	sl, r2
 800b3f0:	dc72      	bgt.n	800b4d8 <__ieee754_rem_pio2+0x110>
 800b3f2:	9b04      	ldr	r3, [sp, #16]
 800b3f4:	4dbc      	ldr	r5, [pc, #752]	; (800b6e8 <__ieee754_rem_pio2+0x320>)
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	a3ab      	add	r3, pc, #684	; (adr r3, 800b6a8 <__ieee754_rem_pio2+0x2e0>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	dd36      	ble.n	800b46e <__ieee754_rem_pio2+0xa6>
 800b400:	f7f4 feb2 	bl	8000168 <__aeabi_dsub>
 800b404:	45aa      	cmp	sl, r5
 800b406:	4606      	mov	r6, r0
 800b408:	460f      	mov	r7, r1
 800b40a:	d018      	beq.n	800b43e <__ieee754_rem_pio2+0x76>
 800b40c:	a3a8      	add	r3, pc, #672	; (adr r3, 800b6b0 <__ieee754_rem_pio2+0x2e8>)
 800b40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b412:	f7f4 fea9 	bl	8000168 <__aeabi_dsub>
 800b416:	4602      	mov	r2, r0
 800b418:	460b      	mov	r3, r1
 800b41a:	4630      	mov	r0, r6
 800b41c:	e9c4 2300 	strd	r2, r3, [r4]
 800b420:	4639      	mov	r1, r7
 800b422:	f7f4 fea1 	bl	8000168 <__aeabi_dsub>
 800b426:	a3a2      	add	r3, pc, #648	; (adr r3, 800b6b0 <__ieee754_rem_pio2+0x2e8>)
 800b428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42c:	f7f4 fe9c 	bl	8000168 <__aeabi_dsub>
 800b430:	2501      	movs	r5, #1
 800b432:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b436:	4628      	mov	r0, r5
 800b438:	b00d      	add	sp, #52	; 0x34
 800b43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b43e:	a39e      	add	r3, pc, #632	; (adr r3, 800b6b8 <__ieee754_rem_pio2+0x2f0>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	f7f4 fe90 	bl	8000168 <__aeabi_dsub>
 800b448:	a39d      	add	r3, pc, #628	; (adr r3, 800b6c0 <__ieee754_rem_pio2+0x2f8>)
 800b44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44e:	4606      	mov	r6, r0
 800b450:	460f      	mov	r7, r1
 800b452:	f7f4 fe89 	bl	8000168 <__aeabi_dsub>
 800b456:	4602      	mov	r2, r0
 800b458:	460b      	mov	r3, r1
 800b45a:	4630      	mov	r0, r6
 800b45c:	e9c4 2300 	strd	r2, r3, [r4]
 800b460:	4639      	mov	r1, r7
 800b462:	f7f4 fe81 	bl	8000168 <__aeabi_dsub>
 800b466:	a396      	add	r3, pc, #600	; (adr r3, 800b6c0 <__ieee754_rem_pio2+0x2f8>)
 800b468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b46c:	e7de      	b.n	800b42c <__ieee754_rem_pio2+0x64>
 800b46e:	f7f4 fe7d 	bl	800016c <__adddf3>
 800b472:	45aa      	cmp	sl, r5
 800b474:	4606      	mov	r6, r0
 800b476:	460f      	mov	r7, r1
 800b478:	d016      	beq.n	800b4a8 <__ieee754_rem_pio2+0xe0>
 800b47a:	a38d      	add	r3, pc, #564	; (adr r3, 800b6b0 <__ieee754_rem_pio2+0x2e8>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	f7f4 fe74 	bl	800016c <__adddf3>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	e9c4 2300 	strd	r2, r3, [r4]
 800b48e:	4639      	mov	r1, r7
 800b490:	f7f4 fe6a 	bl	8000168 <__aeabi_dsub>
 800b494:	a386      	add	r3, pc, #536	; (adr r3, 800b6b0 <__ieee754_rem_pio2+0x2e8>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	f7f4 fe67 	bl	800016c <__adddf3>
 800b49e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b4a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4a6:	e7c6      	b.n	800b436 <__ieee754_rem_pio2+0x6e>
 800b4a8:	a383      	add	r3, pc, #524	; (adr r3, 800b6b8 <__ieee754_rem_pio2+0x2f0>)
 800b4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ae:	f7f4 fe5d 	bl	800016c <__adddf3>
 800b4b2:	a383      	add	r3, pc, #524	; (adr r3, 800b6c0 <__ieee754_rem_pio2+0x2f8>)
 800b4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b8:	4606      	mov	r6, r0
 800b4ba:	460f      	mov	r7, r1
 800b4bc:	f7f4 fe56 	bl	800016c <__adddf3>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	e9c4 2300 	strd	r2, r3, [r4]
 800b4ca:	4639      	mov	r1, r7
 800b4cc:	f7f4 fe4c 	bl	8000168 <__aeabi_dsub>
 800b4d0:	a37b      	add	r3, pc, #492	; (adr r3, 800b6c0 <__ieee754_rem_pio2+0x2f8>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	e7e0      	b.n	800b49a <__ieee754_rem_pio2+0xd2>
 800b4d8:	4a84      	ldr	r2, [pc, #528]	; (800b6ec <__ieee754_rem_pio2+0x324>)
 800b4da:	4592      	cmp	sl, r2
 800b4dc:	f300 80d5 	bgt.w	800b68a <__ieee754_rem_pio2+0x2c2>
 800b4e0:	f000 fe20 	bl	800c124 <fabs>
 800b4e4:	a378      	add	r3, pc, #480	; (adr r3, 800b6c8 <__ieee754_rem_pio2+0x300>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	4606      	mov	r6, r0
 800b4ec:	460f      	mov	r7, r1
 800b4ee:	f7f4 fff3 	bl	80004d8 <__aeabi_dmul>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4b7e      	ldr	r3, [pc, #504]	; (800b6f0 <__ieee754_rem_pio2+0x328>)
 800b4f6:	f7f4 fe39 	bl	800016c <__adddf3>
 800b4fa:	f7f5 fa9d 	bl	8000a38 <__aeabi_d2iz>
 800b4fe:	4605      	mov	r5, r0
 800b500:	f7f4 ff80 	bl	8000404 <__aeabi_i2d>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b50c:	a366      	add	r3, pc, #408	; (adr r3, 800b6a8 <__ieee754_rem_pio2+0x2e0>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	f7f4 ffe1 	bl	80004d8 <__aeabi_dmul>
 800b516:	4602      	mov	r2, r0
 800b518:	460b      	mov	r3, r1
 800b51a:	4630      	mov	r0, r6
 800b51c:	4639      	mov	r1, r7
 800b51e:	f7f4 fe23 	bl	8000168 <__aeabi_dsub>
 800b522:	a363      	add	r3, pc, #396	; (adr r3, 800b6b0 <__ieee754_rem_pio2+0x2e8>)
 800b524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b528:	4680      	mov	r8, r0
 800b52a:	4689      	mov	r9, r1
 800b52c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b530:	f7f4 ffd2 	bl	80004d8 <__aeabi_dmul>
 800b534:	2d1f      	cmp	r5, #31
 800b536:	4606      	mov	r6, r0
 800b538:	460f      	mov	r7, r1
 800b53a:	dc0e      	bgt.n	800b55a <__ieee754_rem_pio2+0x192>
 800b53c:	4b6d      	ldr	r3, [pc, #436]	; (800b6f4 <__ieee754_rem_pio2+0x32c>)
 800b53e:	1e6a      	subs	r2, r5, #1
 800b540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b544:	4553      	cmp	r3, sl
 800b546:	d008      	beq.n	800b55a <__ieee754_rem_pio2+0x192>
 800b548:	4632      	mov	r2, r6
 800b54a:	463b      	mov	r3, r7
 800b54c:	4640      	mov	r0, r8
 800b54e:	4649      	mov	r1, r9
 800b550:	f7f4 fe0a 	bl	8000168 <__aeabi_dsub>
 800b554:	e9c4 0100 	strd	r0, r1, [r4]
 800b558:	e013      	b.n	800b582 <__ieee754_rem_pio2+0x1ba>
 800b55a:	463b      	mov	r3, r7
 800b55c:	4632      	mov	r2, r6
 800b55e:	4640      	mov	r0, r8
 800b560:	4649      	mov	r1, r9
 800b562:	f7f4 fe01 	bl	8000168 <__aeabi_dsub>
 800b566:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b56a:	9305      	str	r3, [sp, #20]
 800b56c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b570:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b574:	f1ba 0f10 	cmp.w	sl, #16
 800b578:	dc1f      	bgt.n	800b5ba <__ieee754_rem_pio2+0x1f2>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	e9c4 2300 	strd	r2, r3, [r4]
 800b582:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b586:	4640      	mov	r0, r8
 800b588:	4653      	mov	r3, sl
 800b58a:	4649      	mov	r1, r9
 800b58c:	f7f4 fdec 	bl	8000168 <__aeabi_dsub>
 800b590:	4632      	mov	r2, r6
 800b592:	463b      	mov	r3, r7
 800b594:	f7f4 fde8 	bl	8000168 <__aeabi_dsub>
 800b598:	460b      	mov	r3, r1
 800b59a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b59e:	9904      	ldr	r1, [sp, #16]
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	2900      	cmp	r1, #0
 800b5a4:	f6bf af47 	bge.w	800b436 <__ieee754_rem_pio2+0x6e>
 800b5a8:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b5ac:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b5b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b5b4:	60e3      	str	r3, [r4, #12]
 800b5b6:	426d      	negs	r5, r5
 800b5b8:	e73d      	b.n	800b436 <__ieee754_rem_pio2+0x6e>
 800b5ba:	a33f      	add	r3, pc, #252	; (adr r3, 800b6b8 <__ieee754_rem_pio2+0x2f0>)
 800b5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5c4:	f7f4 ff88 	bl	80004d8 <__aeabi_dmul>
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	460f      	mov	r7, r1
 800b5cc:	4602      	mov	r2, r0
 800b5ce:	460b      	mov	r3, r1
 800b5d0:	4640      	mov	r0, r8
 800b5d2:	4649      	mov	r1, r9
 800b5d4:	f7f4 fdc8 	bl	8000168 <__aeabi_dsub>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	460b      	mov	r3, r1
 800b5dc:	4682      	mov	sl, r0
 800b5de:	468b      	mov	fp, r1
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	4649      	mov	r1, r9
 800b5e4:	f7f4 fdc0 	bl	8000168 <__aeabi_dsub>
 800b5e8:	4632      	mov	r2, r6
 800b5ea:	463b      	mov	r3, r7
 800b5ec:	f7f4 fdbc 	bl	8000168 <__aeabi_dsub>
 800b5f0:	a333      	add	r3, pc, #204	; (adr r3, 800b6c0 <__ieee754_rem_pio2+0x2f8>)
 800b5f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f6:	4606      	mov	r6, r0
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5fe:	f7f4 ff6b 	bl	80004d8 <__aeabi_dmul>
 800b602:	4632      	mov	r2, r6
 800b604:	463b      	mov	r3, r7
 800b606:	f7f4 fdaf 	bl	8000168 <__aeabi_dsub>
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4606      	mov	r6, r0
 800b610:	460f      	mov	r7, r1
 800b612:	4650      	mov	r0, sl
 800b614:	4659      	mov	r1, fp
 800b616:	f7f4 fda7 	bl	8000168 <__aeabi_dsub>
 800b61a:	9a05      	ldr	r2, [sp, #20]
 800b61c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	2b31      	cmp	r3, #49	; 0x31
 800b624:	dc06      	bgt.n	800b634 <__ieee754_rem_pio2+0x26c>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	46d0      	mov	r8, sl
 800b62c:	46d9      	mov	r9, fp
 800b62e:	e9c4 2300 	strd	r2, r3, [r4]
 800b632:	e7a6      	b.n	800b582 <__ieee754_rem_pio2+0x1ba>
 800b634:	a326      	add	r3, pc, #152	; (adr r3, 800b6d0 <__ieee754_rem_pio2+0x308>)
 800b636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63e:	f7f4 ff4b 	bl	80004d8 <__aeabi_dmul>
 800b642:	4606      	mov	r6, r0
 800b644:	460f      	mov	r7, r1
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4650      	mov	r0, sl
 800b64c:	4659      	mov	r1, fp
 800b64e:	f7f4 fd8b 	bl	8000168 <__aeabi_dsub>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4680      	mov	r8, r0
 800b658:	4689      	mov	r9, r1
 800b65a:	4650      	mov	r0, sl
 800b65c:	4659      	mov	r1, fp
 800b65e:	f7f4 fd83 	bl	8000168 <__aeabi_dsub>
 800b662:	4632      	mov	r2, r6
 800b664:	463b      	mov	r3, r7
 800b666:	f7f4 fd7f 	bl	8000168 <__aeabi_dsub>
 800b66a:	a31b      	add	r3, pc, #108	; (adr r3, 800b6d8 <__ieee754_rem_pio2+0x310>)
 800b66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b670:	4606      	mov	r6, r0
 800b672:	460f      	mov	r7, r1
 800b674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b678:	f7f4 ff2e 	bl	80004d8 <__aeabi_dmul>
 800b67c:	4632      	mov	r2, r6
 800b67e:	463b      	mov	r3, r7
 800b680:	f7f4 fd72 	bl	8000168 <__aeabi_dsub>
 800b684:	4606      	mov	r6, r0
 800b686:	460f      	mov	r7, r1
 800b688:	e75e      	b.n	800b548 <__ieee754_rem_pio2+0x180>
 800b68a:	4a1b      	ldr	r2, [pc, #108]	; (800b6f8 <__ieee754_rem_pio2+0x330>)
 800b68c:	4592      	cmp	sl, r2
 800b68e:	dd35      	ble.n	800b6fc <__ieee754_rem_pio2+0x334>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	f7f4 fd68 	bl	8000168 <__aeabi_dsub>
 800b698:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b69c:	e9c4 0100 	strd	r0, r1, [r4]
 800b6a0:	e6a2      	b.n	800b3e8 <__ieee754_rem_pio2+0x20>
 800b6a2:	bf00      	nop
 800b6a4:	f3af 8000 	nop.w
 800b6a8:	54400000 	.word	0x54400000
 800b6ac:	3ff921fb 	.word	0x3ff921fb
 800b6b0:	1a626331 	.word	0x1a626331
 800b6b4:	3dd0b461 	.word	0x3dd0b461
 800b6b8:	1a600000 	.word	0x1a600000
 800b6bc:	3dd0b461 	.word	0x3dd0b461
 800b6c0:	2e037073 	.word	0x2e037073
 800b6c4:	3ba3198a 	.word	0x3ba3198a
 800b6c8:	6dc9c883 	.word	0x6dc9c883
 800b6cc:	3fe45f30 	.word	0x3fe45f30
 800b6d0:	2e000000 	.word	0x2e000000
 800b6d4:	3ba3198a 	.word	0x3ba3198a
 800b6d8:	252049c1 	.word	0x252049c1
 800b6dc:	397b839a 	.word	0x397b839a
 800b6e0:	3fe921fb 	.word	0x3fe921fb
 800b6e4:	4002d97b 	.word	0x4002d97b
 800b6e8:	3ff921fb 	.word	0x3ff921fb
 800b6ec:	413921fb 	.word	0x413921fb
 800b6f0:	3fe00000 	.word	0x3fe00000
 800b6f4:	0800cc28 	.word	0x0800cc28
 800b6f8:	7fefffff 	.word	0x7fefffff
 800b6fc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b700:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b704:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b708:	460f      	mov	r7, r1
 800b70a:	4606      	mov	r6, r0
 800b70c:	f7f5 f994 	bl	8000a38 <__aeabi_d2iz>
 800b710:	f7f4 fe78 	bl	8000404 <__aeabi_i2d>
 800b714:	4602      	mov	r2, r0
 800b716:	460b      	mov	r3, r1
 800b718:	4630      	mov	r0, r6
 800b71a:	4639      	mov	r1, r7
 800b71c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b720:	f7f4 fd22 	bl	8000168 <__aeabi_dsub>
 800b724:	2200      	movs	r2, #0
 800b726:	4b22      	ldr	r3, [pc, #136]	; (800b7b0 <__ieee754_rem_pio2+0x3e8>)
 800b728:	f7f4 fed6 	bl	80004d8 <__aeabi_dmul>
 800b72c:	460f      	mov	r7, r1
 800b72e:	4606      	mov	r6, r0
 800b730:	f7f5 f982 	bl	8000a38 <__aeabi_d2iz>
 800b734:	f7f4 fe66 	bl	8000404 <__aeabi_i2d>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	4630      	mov	r0, r6
 800b73e:	4639      	mov	r1, r7
 800b740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b744:	f7f4 fd10 	bl	8000168 <__aeabi_dsub>
 800b748:	2200      	movs	r2, #0
 800b74a:	4b19      	ldr	r3, [pc, #100]	; (800b7b0 <__ieee754_rem_pio2+0x3e8>)
 800b74c:	f7f4 fec4 	bl	80004d8 <__aeabi_dmul>
 800b750:	f04f 0803 	mov.w	r8, #3
 800b754:	2600      	movs	r6, #0
 800b756:	2700      	movs	r7, #0
 800b758:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b75c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b760:	4632      	mov	r2, r6
 800b762:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b766:	463b      	mov	r3, r7
 800b768:	46c2      	mov	sl, r8
 800b76a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b76e:	f7f5 f91b 	bl	80009a8 <__aeabi_dcmpeq>
 800b772:	2800      	cmp	r0, #0
 800b774:	d1f4      	bne.n	800b760 <__ieee754_rem_pio2+0x398>
 800b776:	4b0f      	ldr	r3, [pc, #60]	; (800b7b4 <__ieee754_rem_pio2+0x3ec>)
 800b778:	462a      	mov	r2, r5
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	2302      	movs	r3, #2
 800b77e:	4621      	mov	r1, r4
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	a806      	add	r0, sp, #24
 800b784:	4653      	mov	r3, sl
 800b786:	f000 f8d5 	bl	800b934 <__kernel_rem_pio2>
 800b78a:	9b04      	ldr	r3, [sp, #16]
 800b78c:	4605      	mov	r5, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	f6bf ae51 	bge.w	800b436 <__ieee754_rem_pio2+0x6e>
 800b794:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b798:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b79c:	e9c4 2300 	strd	r2, r3, [r4]
 800b7a0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b7a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b7ac:	e703      	b.n	800b5b6 <__ieee754_rem_pio2+0x1ee>
 800b7ae:	bf00      	nop
 800b7b0:	41700000 	.word	0x41700000
 800b7b4:	0800cca8 	.word	0x0800cca8

0800b7b8 <__kernel_cos>:
 800b7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b7c0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b7c4:	4680      	mov	r8, r0
 800b7c6:	460f      	mov	r7, r1
 800b7c8:	e9cd 2300 	strd	r2, r3, [sp]
 800b7cc:	da04      	bge.n	800b7d8 <__kernel_cos+0x20>
 800b7ce:	f7f5 f933 	bl	8000a38 <__aeabi_d2iz>
 800b7d2:	2800      	cmp	r0, #0
 800b7d4:	f000 8086 	beq.w	800b8e4 <__kernel_cos+0x12c>
 800b7d8:	4642      	mov	r2, r8
 800b7da:	463b      	mov	r3, r7
 800b7dc:	4640      	mov	r0, r8
 800b7de:	4639      	mov	r1, r7
 800b7e0:	f7f4 fe7a 	bl	80004d8 <__aeabi_dmul>
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	4b4e      	ldr	r3, [pc, #312]	; (800b920 <__kernel_cos+0x168>)
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	460d      	mov	r5, r1
 800b7ec:	f7f4 fe74 	bl	80004d8 <__aeabi_dmul>
 800b7f0:	a33f      	add	r3, pc, #252	; (adr r3, 800b8f0 <__kernel_cos+0x138>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	4682      	mov	sl, r0
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	4620      	mov	r0, r4
 800b7fc:	4629      	mov	r1, r5
 800b7fe:	f7f4 fe6b 	bl	80004d8 <__aeabi_dmul>
 800b802:	a33d      	add	r3, pc, #244	; (adr r3, 800b8f8 <__kernel_cos+0x140>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fcb0 	bl	800016c <__adddf3>
 800b80c:	4622      	mov	r2, r4
 800b80e:	462b      	mov	r3, r5
 800b810:	f7f4 fe62 	bl	80004d8 <__aeabi_dmul>
 800b814:	a33a      	add	r3, pc, #232	; (adr r3, 800b900 <__kernel_cos+0x148>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 fca5 	bl	8000168 <__aeabi_dsub>
 800b81e:	4622      	mov	r2, r4
 800b820:	462b      	mov	r3, r5
 800b822:	f7f4 fe59 	bl	80004d8 <__aeabi_dmul>
 800b826:	a338      	add	r3, pc, #224	; (adr r3, 800b908 <__kernel_cos+0x150>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fc9e 	bl	800016c <__adddf3>
 800b830:	4622      	mov	r2, r4
 800b832:	462b      	mov	r3, r5
 800b834:	f7f4 fe50 	bl	80004d8 <__aeabi_dmul>
 800b838:	a335      	add	r3, pc, #212	; (adr r3, 800b910 <__kernel_cos+0x158>)
 800b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b83e:	f7f4 fc93 	bl	8000168 <__aeabi_dsub>
 800b842:	4622      	mov	r2, r4
 800b844:	462b      	mov	r3, r5
 800b846:	f7f4 fe47 	bl	80004d8 <__aeabi_dmul>
 800b84a:	a333      	add	r3, pc, #204	; (adr r3, 800b918 <__kernel_cos+0x160>)
 800b84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b850:	f7f4 fc8c 	bl	800016c <__adddf3>
 800b854:	4622      	mov	r2, r4
 800b856:	462b      	mov	r3, r5
 800b858:	f7f4 fe3e 	bl	80004d8 <__aeabi_dmul>
 800b85c:	4622      	mov	r2, r4
 800b85e:	462b      	mov	r3, r5
 800b860:	f7f4 fe3a 	bl	80004d8 <__aeabi_dmul>
 800b864:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b868:	4604      	mov	r4, r0
 800b86a:	460d      	mov	r5, r1
 800b86c:	4640      	mov	r0, r8
 800b86e:	4639      	mov	r1, r7
 800b870:	f7f4 fe32 	bl	80004d8 <__aeabi_dmul>
 800b874:	460b      	mov	r3, r1
 800b876:	4602      	mov	r2, r0
 800b878:	4629      	mov	r1, r5
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7f4 fc74 	bl	8000168 <__aeabi_dsub>
 800b880:	4b28      	ldr	r3, [pc, #160]	; (800b924 <__kernel_cos+0x16c>)
 800b882:	4680      	mov	r8, r0
 800b884:	429e      	cmp	r6, r3
 800b886:	4689      	mov	r9, r1
 800b888:	dc0e      	bgt.n	800b8a8 <__kernel_cos+0xf0>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4650      	mov	r0, sl
 800b890:	4659      	mov	r1, fp
 800b892:	f7f4 fc69 	bl	8000168 <__aeabi_dsub>
 800b896:	4602      	mov	r2, r0
 800b898:	2000      	movs	r0, #0
 800b89a:	460b      	mov	r3, r1
 800b89c:	4922      	ldr	r1, [pc, #136]	; (800b928 <__kernel_cos+0x170>)
 800b89e:	f7f4 fc63 	bl	8000168 <__aeabi_dsub>
 800b8a2:	b003      	add	sp, #12
 800b8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a8:	2400      	movs	r4, #0
 800b8aa:	4b20      	ldr	r3, [pc, #128]	; (800b92c <__kernel_cos+0x174>)
 800b8ac:	4622      	mov	r2, r4
 800b8ae:	429e      	cmp	r6, r3
 800b8b0:	bfcc      	ite	gt
 800b8b2:	4d1f      	ldrgt	r5, [pc, #124]	; (800b930 <__kernel_cos+0x178>)
 800b8b4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b8b8:	462b      	mov	r3, r5
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	491a      	ldr	r1, [pc, #104]	; (800b928 <__kernel_cos+0x170>)
 800b8be:	f7f4 fc53 	bl	8000168 <__aeabi_dsub>
 800b8c2:	4622      	mov	r2, r4
 800b8c4:	4606      	mov	r6, r0
 800b8c6:	460f      	mov	r7, r1
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	4650      	mov	r0, sl
 800b8cc:	4659      	mov	r1, fp
 800b8ce:	f7f4 fc4b 	bl	8000168 <__aeabi_dsub>
 800b8d2:	4642      	mov	r2, r8
 800b8d4:	464b      	mov	r3, r9
 800b8d6:	f7f4 fc47 	bl	8000168 <__aeabi_dsub>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4630      	mov	r0, r6
 800b8e0:	4639      	mov	r1, r7
 800b8e2:	e7dc      	b.n	800b89e <__kernel_cos+0xe6>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	4910      	ldr	r1, [pc, #64]	; (800b928 <__kernel_cos+0x170>)
 800b8e8:	e7db      	b.n	800b8a2 <__kernel_cos+0xea>
 800b8ea:	bf00      	nop
 800b8ec:	f3af 8000 	nop.w
 800b8f0:	be8838d4 	.word	0xbe8838d4
 800b8f4:	bda8fae9 	.word	0xbda8fae9
 800b8f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b8fc:	3e21ee9e 	.word	0x3e21ee9e
 800b900:	809c52ad 	.word	0x809c52ad
 800b904:	3e927e4f 	.word	0x3e927e4f
 800b908:	19cb1590 	.word	0x19cb1590
 800b90c:	3efa01a0 	.word	0x3efa01a0
 800b910:	16c15177 	.word	0x16c15177
 800b914:	3f56c16c 	.word	0x3f56c16c
 800b918:	5555554c 	.word	0x5555554c
 800b91c:	3fa55555 	.word	0x3fa55555
 800b920:	3fe00000 	.word	0x3fe00000
 800b924:	3fd33332 	.word	0x3fd33332
 800b928:	3ff00000 	.word	0x3ff00000
 800b92c:	3fe90000 	.word	0x3fe90000
 800b930:	3fd20000 	.word	0x3fd20000

0800b934 <__kernel_rem_pio2>:
 800b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b938:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b93c:	9308      	str	r3, [sp, #32]
 800b93e:	9106      	str	r1, [sp, #24]
 800b940:	4bb6      	ldr	r3, [pc, #728]	; (800bc1c <__kernel_rem_pio2+0x2e8>)
 800b942:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b944:	f112 0f14 	cmn.w	r2, #20
 800b948:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b94c:	bfa8      	it	ge
 800b94e:	1ed4      	subge	r4, r2, #3
 800b950:	9302      	str	r3, [sp, #8]
 800b952:	9b08      	ldr	r3, [sp, #32]
 800b954:	bfb8      	it	lt
 800b956:	2400      	movlt	r4, #0
 800b958:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b95c:	9307      	str	r3, [sp, #28]
 800b95e:	bfa4      	itt	ge
 800b960:	2318      	movge	r3, #24
 800b962:	fb94 f4f3 	sdivge	r4, r4, r3
 800b966:	f06f 0317 	mvn.w	r3, #23
 800b96a:	fb04 3303 	mla	r3, r4, r3, r3
 800b96e:	eb03 0b02 	add.w	fp, r3, r2
 800b972:	9a07      	ldr	r2, [sp, #28]
 800b974:	9b02      	ldr	r3, [sp, #8]
 800b976:	1aa7      	subs	r7, r4, r2
 800b978:	eb03 0802 	add.w	r8, r3, r2
 800b97c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b97e:	2500      	movs	r5, #0
 800b980:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	9009      	str	r0, [sp, #36]	; 0x24
 800b98a:	ae20      	add	r6, sp, #128	; 0x80
 800b98c:	4545      	cmp	r5, r8
 800b98e:	dd14      	ble.n	800b9ba <__kernel_rem_pio2+0x86>
 800b990:	f04f 0800 	mov.w	r8, #0
 800b994:	9a08      	ldr	r2, [sp, #32]
 800b996:	ab20      	add	r3, sp, #128	; 0x80
 800b998:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b99c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b9a0:	9b02      	ldr	r3, [sp, #8]
 800b9a2:	4598      	cmp	r8, r3
 800b9a4:	dc35      	bgt.n	800ba12 <__kernel_rem_pio2+0xde>
 800b9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	f1a3 0908 	sub.w	r9, r3, #8
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	462f      	mov	r7, r5
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	e9cd 2300 	strd	r2, r3, [sp]
 800b9b8:	e01f      	b.n	800b9fa <__kernel_rem_pio2+0xc6>
 800b9ba:	42ef      	cmn	r7, r5
 800b9bc:	d40b      	bmi.n	800b9d6 <__kernel_rem_pio2+0xa2>
 800b9be:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9c2:	e9cd 2300 	strd	r2, r3, [sp]
 800b9c6:	f7f4 fd1d 	bl	8000404 <__aeabi_i2d>
 800b9ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9ce:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9d2:	3501      	adds	r5, #1
 800b9d4:	e7da      	b.n	800b98c <__kernel_rem_pio2+0x58>
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	4619      	mov	r1, r3
 800b9da:	e7f8      	b.n	800b9ce <__kernel_rem_pio2+0x9a>
 800b9dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9e0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b9e4:	f7f4 fd78 	bl	80004d8 <__aeabi_dmul>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	460b      	mov	r3, r1
 800b9ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9f0:	f7f4 fbbc 	bl	800016c <__adddf3>
 800b9f4:	e9cd 0100 	strd	r0, r1, [sp]
 800b9f8:	3601      	adds	r6, #1
 800b9fa:	9b07      	ldr	r3, [sp, #28]
 800b9fc:	3f08      	subs	r7, #8
 800b9fe:	429e      	cmp	r6, r3
 800ba00:	ddec      	ble.n	800b9dc <__kernel_rem_pio2+0xa8>
 800ba02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba06:	f108 0801 	add.w	r8, r8, #1
 800ba0a:	e8ea 2302 	strd	r2, r3, [sl], #8
 800ba0e:	3508      	adds	r5, #8
 800ba10:	e7c6      	b.n	800b9a0 <__kernel_rem_pio2+0x6c>
 800ba12:	9b02      	ldr	r3, [sp, #8]
 800ba14:	aa0c      	add	r2, sp, #48	; 0x30
 800ba16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba1c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800ba1e:	9e02      	ldr	r6, [sp, #8]
 800ba20:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba24:	930a      	str	r3, [sp, #40]	; 0x28
 800ba26:	ab98      	add	r3, sp, #608	; 0x260
 800ba28:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ba2c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800ba30:	ab70      	add	r3, sp, #448	; 0x1c0
 800ba32:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800ba36:	46d0      	mov	r8, sl
 800ba38:	46b1      	mov	r9, r6
 800ba3a:	af0c      	add	r7, sp, #48	; 0x30
 800ba3c:	9700      	str	r7, [sp, #0]
 800ba3e:	f1b9 0f00 	cmp.w	r9, #0
 800ba42:	f1a8 0808 	sub.w	r8, r8, #8
 800ba46:	dc71      	bgt.n	800bb2c <__kernel_rem_pio2+0x1f8>
 800ba48:	465a      	mov	r2, fp
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f000 fb6f 	bl	800c130 <scalbn>
 800ba52:	2200      	movs	r2, #0
 800ba54:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba58:	4604      	mov	r4, r0
 800ba5a:	460d      	mov	r5, r1
 800ba5c:	f7f4 fd3c 	bl	80004d8 <__aeabi_dmul>
 800ba60:	f7ff fa8e 	bl	800af80 <floor>
 800ba64:	2200      	movs	r2, #0
 800ba66:	4b6e      	ldr	r3, [pc, #440]	; (800bc20 <__kernel_rem_pio2+0x2ec>)
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4620      	mov	r0, r4
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7f4 fb78 	bl	8000168 <__aeabi_dsub>
 800ba78:	460d      	mov	r5, r1
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	f7f4 ffdc 	bl	8000a38 <__aeabi_d2iz>
 800ba80:	9004      	str	r0, [sp, #16]
 800ba82:	f7f4 fcbf 	bl	8000404 <__aeabi_i2d>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	f7f4 fb6b 	bl	8000168 <__aeabi_dsub>
 800ba92:	f1bb 0f00 	cmp.w	fp, #0
 800ba96:	4680      	mov	r8, r0
 800ba98:	4689      	mov	r9, r1
 800ba9a:	dd70      	ble.n	800bb7e <__kernel_rem_pio2+0x24a>
 800ba9c:	1e72      	subs	r2, r6, #1
 800ba9e:	ab0c      	add	r3, sp, #48	; 0x30
 800baa0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800baa4:	9c04      	ldr	r4, [sp, #16]
 800baa6:	f1cb 0118 	rsb	r1, fp, #24
 800baaa:	fa40 f301 	asr.w	r3, r0, r1
 800baae:	441c      	add	r4, r3
 800bab0:	408b      	lsls	r3, r1
 800bab2:	1ac0      	subs	r0, r0, r3
 800bab4:	ab0c      	add	r3, sp, #48	; 0x30
 800bab6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800baba:	f1cb 0317 	rsb	r3, fp, #23
 800babe:	9404      	str	r4, [sp, #16]
 800bac0:	fa40 f303 	asr.w	r3, r0, r3
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	dd66      	ble.n	800bb9a <__kernel_rem_pio2+0x266>
 800bacc:	2200      	movs	r2, #0
 800bace:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bad2:	4614      	mov	r4, r2
 800bad4:	9b04      	ldr	r3, [sp, #16]
 800bad6:	3301      	adds	r3, #1
 800bad8:	9304      	str	r3, [sp, #16]
 800bada:	4296      	cmp	r6, r2
 800badc:	f300 80ac 	bgt.w	800bc38 <__kernel_rem_pio2+0x304>
 800bae0:	f1bb 0f00 	cmp.w	fp, #0
 800bae4:	dd07      	ble.n	800baf6 <__kernel_rem_pio2+0x1c2>
 800bae6:	f1bb 0f01 	cmp.w	fp, #1
 800baea:	f000 80b4 	beq.w	800bc56 <__kernel_rem_pio2+0x322>
 800baee:	f1bb 0f02 	cmp.w	fp, #2
 800baf2:	f000 80ba 	beq.w	800bc6a <__kernel_rem_pio2+0x336>
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d14e      	bne.n	800bb9a <__kernel_rem_pio2+0x266>
 800bafc:	4642      	mov	r2, r8
 800bafe:	464b      	mov	r3, r9
 800bb00:	2000      	movs	r0, #0
 800bb02:	4948      	ldr	r1, [pc, #288]	; (800bc24 <__kernel_rem_pio2+0x2f0>)
 800bb04:	f7f4 fb30 	bl	8000168 <__aeabi_dsub>
 800bb08:	4680      	mov	r8, r0
 800bb0a:	4689      	mov	r9, r1
 800bb0c:	2c00      	cmp	r4, #0
 800bb0e:	d044      	beq.n	800bb9a <__kernel_rem_pio2+0x266>
 800bb10:	465a      	mov	r2, fp
 800bb12:	2000      	movs	r0, #0
 800bb14:	4943      	ldr	r1, [pc, #268]	; (800bc24 <__kernel_rem_pio2+0x2f0>)
 800bb16:	f000 fb0b 	bl	800c130 <scalbn>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4649      	mov	r1, r9
 800bb22:	f7f4 fb21 	bl	8000168 <__aeabi_dsub>
 800bb26:	4680      	mov	r8, r0
 800bb28:	4689      	mov	r9, r1
 800bb2a:	e036      	b.n	800bb9a <__kernel_rem_pio2+0x266>
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	4b3e      	ldr	r3, [pc, #248]	; (800bc28 <__kernel_rem_pio2+0x2f4>)
 800bb30:	4620      	mov	r0, r4
 800bb32:	4629      	mov	r1, r5
 800bb34:	f7f4 fcd0 	bl	80004d8 <__aeabi_dmul>
 800bb38:	f7f4 ff7e 	bl	8000a38 <__aeabi_d2iz>
 800bb3c:	f7f4 fc62 	bl	8000404 <__aeabi_i2d>
 800bb40:	4602      	mov	r2, r0
 800bb42:	460b      	mov	r3, r1
 800bb44:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	4b38      	ldr	r3, [pc, #224]	; (800bc2c <__kernel_rem_pio2+0x2f8>)
 800bb4c:	f7f4 fcc4 	bl	80004d8 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4620      	mov	r0, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	f7f4 fb06 	bl	8000168 <__aeabi_dsub>
 800bb5c:	f7f4 ff6c 	bl	8000a38 <__aeabi_d2iz>
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800bb66:	f843 0b04 	str.w	r0, [r3], #4
 800bb6a:	9300      	str	r3, [sp, #0]
 800bb6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb70:	e9d8 2300 	ldrd	r2, r3, [r8]
 800bb74:	f7f4 fafa 	bl	800016c <__adddf3>
 800bb78:	4604      	mov	r4, r0
 800bb7a:	460d      	mov	r5, r1
 800bb7c:	e75f      	b.n	800ba3e <__kernel_rem_pio2+0x10a>
 800bb7e:	d105      	bne.n	800bb8c <__kernel_rem_pio2+0x258>
 800bb80:	1e73      	subs	r3, r6, #1
 800bb82:	aa0c      	add	r2, sp, #48	; 0x30
 800bb84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bb88:	15c3      	asrs	r3, r0, #23
 800bb8a:	e79b      	b.n	800bac4 <__kernel_rem_pio2+0x190>
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	4b28      	ldr	r3, [pc, #160]	; (800bc30 <__kernel_rem_pio2+0x2fc>)
 800bb90:	f7f4 ff28 	bl	80009e4 <__aeabi_dcmpge>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d13e      	bne.n	800bc16 <__kernel_rem_pio2+0x2e2>
 800bb98:	9000      	str	r0, [sp, #0]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	4640      	mov	r0, r8
 800bba0:	4649      	mov	r1, r9
 800bba2:	f7f4 ff01 	bl	80009a8 <__aeabi_dcmpeq>
 800bba6:	2800      	cmp	r0, #0
 800bba8:	f000 80b1 	beq.w	800bd0e <__kernel_rem_pio2+0x3da>
 800bbac:	1e74      	subs	r4, r6, #1
 800bbae:	4623      	mov	r3, r4
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	9902      	ldr	r1, [sp, #8]
 800bbb4:	428b      	cmp	r3, r1
 800bbb6:	da5f      	bge.n	800bc78 <__kernel_rem_pio2+0x344>
 800bbb8:	2a00      	cmp	r2, #0
 800bbba:	d074      	beq.n	800bca6 <__kernel_rem_pio2+0x372>
 800bbbc:	ab0c      	add	r3, sp, #48	; 0x30
 800bbbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bbc2:	f1ab 0b18 	sub.w	fp, fp, #24
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	f000 809f 	beq.w	800bd0a <__kernel_rem_pio2+0x3d6>
 800bbcc:	465a      	mov	r2, fp
 800bbce:	2000      	movs	r0, #0
 800bbd0:	4914      	ldr	r1, [pc, #80]	; (800bc24 <__kernel_rem_pio2+0x2f0>)
 800bbd2:	f000 faad 	bl	800c130 <scalbn>
 800bbd6:	46a2      	mov	sl, r4
 800bbd8:	4606      	mov	r6, r0
 800bbda:	460f      	mov	r7, r1
 800bbdc:	f04f 0800 	mov.w	r8, #0
 800bbe0:	ab70      	add	r3, sp, #448	; 0x1c0
 800bbe2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800bc28 <__kernel_rem_pio2+0x2f4>
 800bbe6:	00e5      	lsls	r5, r4, #3
 800bbe8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800bbec:	f1ba 0f00 	cmp.w	sl, #0
 800bbf0:	f280 80c3 	bge.w	800bd7a <__kernel_rem_pio2+0x446>
 800bbf4:	4626      	mov	r6, r4
 800bbf6:	2e00      	cmp	r6, #0
 800bbf8:	f2c0 80f5 	blt.w	800bde6 <__kernel_rem_pio2+0x4b2>
 800bbfc:	4b0d      	ldr	r3, [pc, #52]	; (800bc34 <__kernel_rem_pio2+0x300>)
 800bbfe:	f04f 0a00 	mov.w	sl, #0
 800bc02:	9307      	str	r3, [sp, #28]
 800bc04:	ab70      	add	r3, sp, #448	; 0x1c0
 800bc06:	f04f 0b00 	mov.w	fp, #0
 800bc0a:	f04f 0800 	mov.w	r8, #0
 800bc0e:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bc12:	1ba7      	subs	r7, r4, r6
 800bc14:	e0db      	b.n	800bdce <__kernel_rem_pio2+0x49a>
 800bc16:	2302      	movs	r3, #2
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	e757      	b.n	800bacc <__kernel_rem_pio2+0x198>
 800bc1c:	0800cdf0 	.word	0x0800cdf0
 800bc20:	40200000 	.word	0x40200000
 800bc24:	3ff00000 	.word	0x3ff00000
 800bc28:	3e700000 	.word	0x3e700000
 800bc2c:	41700000 	.word	0x41700000
 800bc30:	3fe00000 	.word	0x3fe00000
 800bc34:	0800cdb0 	.word	0x0800cdb0
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	b944      	cbnz	r4, 800bc4e <__kernel_rem_pio2+0x31a>
 800bc3c:	b11b      	cbz	r3, 800bc46 <__kernel_rem_pio2+0x312>
 800bc3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bc42:	603b      	str	r3, [r7, #0]
 800bc44:	2301      	movs	r3, #1
 800bc46:	461c      	mov	r4, r3
 800bc48:	3201      	adds	r2, #1
 800bc4a:	3704      	adds	r7, #4
 800bc4c:	e745      	b.n	800bada <__kernel_rem_pio2+0x1a6>
 800bc4e:	1acb      	subs	r3, r1, r3
 800bc50:	603b      	str	r3, [r7, #0]
 800bc52:	4623      	mov	r3, r4
 800bc54:	e7f7      	b.n	800bc46 <__kernel_rem_pio2+0x312>
 800bc56:	1e72      	subs	r2, r6, #1
 800bc58:	ab0c      	add	r3, sp, #48	; 0x30
 800bc5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc62:	a90c      	add	r1, sp, #48	; 0x30
 800bc64:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc68:	e745      	b.n	800baf6 <__kernel_rem_pio2+0x1c2>
 800bc6a:	1e72      	subs	r2, r6, #1
 800bc6c:	ab0c      	add	r3, sp, #48	; 0x30
 800bc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc72:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc76:	e7f4      	b.n	800bc62 <__kernel_rem_pio2+0x32e>
 800bc78:	a90c      	add	r1, sp, #48	; 0x30
 800bc7a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bc7e:	3b01      	subs	r3, #1
 800bc80:	430a      	orrs	r2, r1
 800bc82:	e796      	b.n	800bbb2 <__kernel_rem_pio2+0x27e>
 800bc84:	3401      	adds	r4, #1
 800bc86:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	d0fa      	beq.n	800bc84 <__kernel_rem_pio2+0x350>
 800bc8e:	9b08      	ldr	r3, [sp, #32]
 800bc90:	f106 0801 	add.w	r8, r6, #1
 800bc94:	18f5      	adds	r5, r6, r3
 800bc96:	ab20      	add	r3, sp, #128	; 0x80
 800bc98:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bc9c:	4434      	add	r4, r6
 800bc9e:	4544      	cmp	r4, r8
 800bca0:	da04      	bge.n	800bcac <__kernel_rem_pio2+0x378>
 800bca2:	4626      	mov	r6, r4
 800bca4:	e6bf      	b.n	800ba26 <__kernel_rem_pio2+0xf2>
 800bca6:	2401      	movs	r4, #1
 800bca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcaa:	e7ec      	b.n	800bc86 <__kernel_rem_pio2+0x352>
 800bcac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcae:	f04f 0900 	mov.w	r9, #0
 800bcb2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bcb6:	f7f4 fba5 	bl	8000404 <__aeabi_i2d>
 800bcba:	2600      	movs	r6, #0
 800bcbc:	2700      	movs	r7, #0
 800bcbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc0:	e9c5 0100 	strd	r0, r1, [r5]
 800bcc4:	3b08      	subs	r3, #8
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	9504      	str	r5, [sp, #16]
 800bcca:	9b07      	ldr	r3, [sp, #28]
 800bccc:	4599      	cmp	r9, r3
 800bcce:	dd05      	ble.n	800bcdc <__kernel_rem_pio2+0x3a8>
 800bcd0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800bcd4:	f108 0801 	add.w	r8, r8, #1
 800bcd8:	3508      	adds	r5, #8
 800bcda:	e7e0      	b.n	800bc9e <__kernel_rem_pio2+0x36a>
 800bcdc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800bce0:	9900      	ldr	r1, [sp, #0]
 800bce2:	f109 0901 	add.w	r9, r9, #1
 800bce6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800bcea:	9100      	str	r1, [sp, #0]
 800bcec:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800bcf0:	f8cd c010 	str.w	ip, [sp, #16]
 800bcf4:	f7f4 fbf0 	bl	80004d8 <__aeabi_dmul>
 800bcf8:	4602      	mov	r2, r0
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4630      	mov	r0, r6
 800bcfe:	4639      	mov	r1, r7
 800bd00:	f7f4 fa34 	bl	800016c <__adddf3>
 800bd04:	4606      	mov	r6, r0
 800bd06:	460f      	mov	r7, r1
 800bd08:	e7df      	b.n	800bcca <__kernel_rem_pio2+0x396>
 800bd0a:	3c01      	subs	r4, #1
 800bd0c:	e756      	b.n	800bbbc <__kernel_rem_pio2+0x288>
 800bd0e:	f1cb 0200 	rsb	r2, fp, #0
 800bd12:	4640      	mov	r0, r8
 800bd14:	4649      	mov	r1, r9
 800bd16:	f000 fa0b 	bl	800c130 <scalbn>
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	4ba4      	ldr	r3, [pc, #656]	; (800bfb0 <__kernel_rem_pio2+0x67c>)
 800bd1e:	4604      	mov	r4, r0
 800bd20:	460d      	mov	r5, r1
 800bd22:	f7f4 fe5f 	bl	80009e4 <__aeabi_dcmpge>
 800bd26:	b1f8      	cbz	r0, 800bd68 <__kernel_rem_pio2+0x434>
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4ba2      	ldr	r3, [pc, #648]	; (800bfb4 <__kernel_rem_pio2+0x680>)
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	4629      	mov	r1, r5
 800bd30:	f7f4 fbd2 	bl	80004d8 <__aeabi_dmul>
 800bd34:	f7f4 fe80 	bl	8000a38 <__aeabi_d2iz>
 800bd38:	4607      	mov	r7, r0
 800bd3a:	f7f4 fb63 	bl	8000404 <__aeabi_i2d>
 800bd3e:	2200      	movs	r2, #0
 800bd40:	4b9b      	ldr	r3, [pc, #620]	; (800bfb0 <__kernel_rem_pio2+0x67c>)
 800bd42:	f7f4 fbc9 	bl	80004d8 <__aeabi_dmul>
 800bd46:	460b      	mov	r3, r1
 800bd48:	4602      	mov	r2, r0
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	f7f4 fa0b 	bl	8000168 <__aeabi_dsub>
 800bd52:	f7f4 fe71 	bl	8000a38 <__aeabi_d2iz>
 800bd56:	1c74      	adds	r4, r6, #1
 800bd58:	ab0c      	add	r3, sp, #48	; 0x30
 800bd5a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bd5e:	f10b 0b18 	add.w	fp, fp, #24
 800bd62:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800bd66:	e731      	b.n	800bbcc <__kernel_rem_pio2+0x298>
 800bd68:	4620      	mov	r0, r4
 800bd6a:	4629      	mov	r1, r5
 800bd6c:	f7f4 fe64 	bl	8000a38 <__aeabi_d2iz>
 800bd70:	ab0c      	add	r3, sp, #48	; 0x30
 800bd72:	4634      	mov	r4, r6
 800bd74:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800bd78:	e728      	b.n	800bbcc <__kernel_rem_pio2+0x298>
 800bd7a:	ab0c      	add	r3, sp, #48	; 0x30
 800bd7c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800bd80:	f7f4 fb40 	bl	8000404 <__aeabi_i2d>
 800bd84:	4632      	mov	r2, r6
 800bd86:	463b      	mov	r3, r7
 800bd88:	f7f4 fba6 	bl	80004d8 <__aeabi_dmul>
 800bd8c:	4642      	mov	r2, r8
 800bd8e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800bd92:	464b      	mov	r3, r9
 800bd94:	4630      	mov	r0, r6
 800bd96:	4639      	mov	r1, r7
 800bd98:	f7f4 fb9e 	bl	80004d8 <__aeabi_dmul>
 800bd9c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bda0:	4606      	mov	r6, r0
 800bda2:	460f      	mov	r7, r1
 800bda4:	e722      	b.n	800bbec <__kernel_rem_pio2+0x2b8>
 800bda6:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800bdaa:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800bdae:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800bdb2:	f8cd c01c 	str.w	ip, [sp, #28]
 800bdb6:	f7f4 fb8f 	bl	80004d8 <__aeabi_dmul>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	460b      	mov	r3, r1
 800bdbe:	4650      	mov	r0, sl
 800bdc0:	4659      	mov	r1, fp
 800bdc2:	f7f4 f9d3 	bl	800016c <__adddf3>
 800bdc6:	4682      	mov	sl, r0
 800bdc8:	468b      	mov	fp, r1
 800bdca:	f108 0801 	add.w	r8, r8, #1
 800bdce:	9b02      	ldr	r3, [sp, #8]
 800bdd0:	4598      	cmp	r8, r3
 800bdd2:	dc01      	bgt.n	800bdd8 <__kernel_rem_pio2+0x4a4>
 800bdd4:	45b8      	cmp	r8, r7
 800bdd6:	dde6      	ble.n	800bda6 <__kernel_rem_pio2+0x472>
 800bdd8:	ab48      	add	r3, sp, #288	; 0x120
 800bdda:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bdde:	e9c7 ab00 	strd	sl, fp, [r7]
 800bde2:	3e01      	subs	r6, #1
 800bde4:	e707      	b.n	800bbf6 <__kernel_rem_pio2+0x2c2>
 800bde6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bde8:	2b02      	cmp	r3, #2
 800bdea:	dc09      	bgt.n	800be00 <__kernel_rem_pio2+0x4cc>
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	dc32      	bgt.n	800be56 <__kernel_rem_pio2+0x522>
 800bdf0:	d05a      	beq.n	800bea8 <__kernel_rem_pio2+0x574>
 800bdf2:	9b04      	ldr	r3, [sp, #16]
 800bdf4:	f003 0007 	and.w	r0, r3, #7
 800bdf8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be00:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800be02:	2b03      	cmp	r3, #3
 800be04:	d1f5      	bne.n	800bdf2 <__kernel_rem_pio2+0x4be>
 800be06:	ab48      	add	r3, sp, #288	; 0x120
 800be08:	441d      	add	r5, r3
 800be0a:	46aa      	mov	sl, r5
 800be0c:	46a3      	mov	fp, r4
 800be0e:	f1bb 0f00 	cmp.w	fp, #0
 800be12:	dc76      	bgt.n	800bf02 <__kernel_rem_pio2+0x5ce>
 800be14:	46aa      	mov	sl, r5
 800be16:	46a3      	mov	fp, r4
 800be18:	f1bb 0f01 	cmp.w	fp, #1
 800be1c:	f300 8090 	bgt.w	800bf40 <__kernel_rem_pio2+0x60c>
 800be20:	2700      	movs	r7, #0
 800be22:	463e      	mov	r6, r7
 800be24:	2c01      	cmp	r4, #1
 800be26:	f300 80aa 	bgt.w	800bf7e <__kernel_rem_pio2+0x64a>
 800be2a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800be2e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800be32:	9b00      	ldr	r3, [sp, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 80ac 	bne.w	800bf92 <__kernel_rem_pio2+0x65e>
 800be3a:	4603      	mov	r3, r0
 800be3c:	462a      	mov	r2, r5
 800be3e:	9806      	ldr	r0, [sp, #24]
 800be40:	e9c0 2300 	strd	r2, r3, [r0]
 800be44:	4622      	mov	r2, r4
 800be46:	460b      	mov	r3, r1
 800be48:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be4c:	463a      	mov	r2, r7
 800be4e:	4633      	mov	r3, r6
 800be50:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800be54:	e7cd      	b.n	800bdf2 <__kernel_rem_pio2+0x4be>
 800be56:	2000      	movs	r0, #0
 800be58:	46a0      	mov	r8, r4
 800be5a:	4601      	mov	r1, r0
 800be5c:	ab48      	add	r3, sp, #288	; 0x120
 800be5e:	441d      	add	r5, r3
 800be60:	f1b8 0f00 	cmp.w	r8, #0
 800be64:	da3a      	bge.n	800bedc <__kernel_rem_pio2+0x5a8>
 800be66:	9b00      	ldr	r3, [sp, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d03e      	beq.n	800beea <__kernel_rem_pio2+0x5b6>
 800be6c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800be70:	4602      	mov	r2, r0
 800be72:	462b      	mov	r3, r5
 800be74:	9d06      	ldr	r5, [sp, #24]
 800be76:	2601      	movs	r6, #1
 800be78:	e9c5 2300 	strd	r2, r3, [r5]
 800be7c:	460b      	mov	r3, r1
 800be7e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800be82:	f7f4 f971 	bl	8000168 <__aeabi_dsub>
 800be86:	4684      	mov	ip, r0
 800be88:	460f      	mov	r7, r1
 800be8a:	ad48      	add	r5, sp, #288	; 0x120
 800be8c:	42b4      	cmp	r4, r6
 800be8e:	f105 0508 	add.w	r5, r5, #8
 800be92:	da2c      	bge.n	800beee <__kernel_rem_pio2+0x5ba>
 800be94:	9b00      	ldr	r3, [sp, #0]
 800be96:	b10b      	cbz	r3, 800be9c <__kernel_rem_pio2+0x568>
 800be98:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800be9c:	4662      	mov	r2, ip
 800be9e:	463b      	mov	r3, r7
 800bea0:	9906      	ldr	r1, [sp, #24]
 800bea2:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bea6:	e7a4      	b.n	800bdf2 <__kernel_rem_pio2+0x4be>
 800bea8:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800beaa:	ab48      	add	r3, sp, #288	; 0x120
 800beac:	4637      	mov	r7, r6
 800beae:	441d      	add	r5, r3
 800beb0:	2c00      	cmp	r4, #0
 800beb2:	da09      	bge.n	800bec8 <__kernel_rem_pio2+0x594>
 800beb4:	9b00      	ldr	r3, [sp, #0]
 800beb6:	b10b      	cbz	r3, 800bebc <__kernel_rem_pio2+0x588>
 800beb8:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bebc:	4632      	mov	r2, r6
 800bebe:	463b      	mov	r3, r7
 800bec0:	9906      	ldr	r1, [sp, #24]
 800bec2:	e9c1 2300 	strd	r2, r3, [r1]
 800bec6:	e794      	b.n	800bdf2 <__kernel_rem_pio2+0x4be>
 800bec8:	4630      	mov	r0, r6
 800beca:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bece:	4639      	mov	r1, r7
 800bed0:	f7f4 f94c 	bl	800016c <__adddf3>
 800bed4:	3c01      	subs	r4, #1
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	e7e9      	b.n	800beb0 <__kernel_rem_pio2+0x57c>
 800bedc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bee0:	f7f4 f944 	bl	800016c <__adddf3>
 800bee4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bee8:	e7ba      	b.n	800be60 <__kernel_rem_pio2+0x52c>
 800beea:	460d      	mov	r5, r1
 800beec:	e7c0      	b.n	800be70 <__kernel_rem_pio2+0x53c>
 800beee:	4660      	mov	r0, ip
 800bef0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bef4:	4639      	mov	r1, r7
 800bef6:	f7f4 f939 	bl	800016c <__adddf3>
 800befa:	3601      	adds	r6, #1
 800befc:	4684      	mov	ip, r0
 800befe:	460f      	mov	r7, r1
 800bf00:	e7c4      	b.n	800be8c <__kernel_rem_pio2+0x558>
 800bf02:	e9da 6700 	ldrd	r6, r7, [sl]
 800bf06:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bf0a:	4632      	mov	r2, r6
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	4640      	mov	r0, r8
 800bf10:	4649      	mov	r1, r9
 800bf12:	f7f4 f92b 	bl	800016c <__adddf3>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf1e:	4640      	mov	r0, r8
 800bf20:	4649      	mov	r1, r9
 800bf22:	f7f4 f921 	bl	8000168 <__aeabi_dsub>
 800bf26:	4632      	mov	r2, r6
 800bf28:	463b      	mov	r3, r7
 800bf2a:	f7f4 f91f 	bl	800016c <__adddf3>
 800bf2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf32:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bf36:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bf3a:	e9ca 2300 	strd	r2, r3, [sl]
 800bf3e:	e766      	b.n	800be0e <__kernel_rem_pio2+0x4da>
 800bf40:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf44:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bf48:	4642      	mov	r2, r8
 800bf4a:	464b      	mov	r3, r9
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 f90c 	bl	800016c <__adddf3>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	4639      	mov	r1, r7
 800bf60:	f7f4 f902 	bl	8000168 <__aeabi_dsub>
 800bf64:	4642      	mov	r2, r8
 800bf66:	464b      	mov	r3, r9
 800bf68:	f7f4 f900 	bl	800016c <__adddf3>
 800bf6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf70:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bf74:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bf78:	e9ca 2300 	strd	r2, r3, [sl]
 800bf7c:	e74c      	b.n	800be18 <__kernel_rem_pio2+0x4e4>
 800bf7e:	4638      	mov	r0, r7
 800bf80:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bf84:	4631      	mov	r1, r6
 800bf86:	f7f4 f8f1 	bl	800016c <__adddf3>
 800bf8a:	3c01      	subs	r4, #1
 800bf8c:	4607      	mov	r7, r0
 800bf8e:	460e      	mov	r6, r1
 800bf90:	e748      	b.n	800be24 <__kernel_rem_pio2+0x4f0>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bf98:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bf9c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bfa0:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800bfa4:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800bfa8:	601d      	str	r5, [r3, #0]
 800bfaa:	615e      	str	r6, [r3, #20]
 800bfac:	e721      	b.n	800bdf2 <__kernel_rem_pio2+0x4be>
 800bfae:	bf00      	nop
 800bfb0:	41700000 	.word	0x41700000
 800bfb4:	3e700000 	.word	0x3e700000

0800bfb8 <__kernel_sin>:
 800bfb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfbc:	b086      	sub	sp, #24
 800bfbe:	e9cd 2300 	strd	r2, r3, [sp]
 800bfc2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfc6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bfca:	4682      	mov	sl, r0
 800bfcc:	460c      	mov	r4, r1
 800bfce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bfd0:	da03      	bge.n	800bfda <__kernel_sin+0x22>
 800bfd2:	f7f4 fd31 	bl	8000a38 <__aeabi_d2iz>
 800bfd6:	2800      	cmp	r0, #0
 800bfd8:	d050      	beq.n	800c07c <__kernel_sin+0xc4>
 800bfda:	4652      	mov	r2, sl
 800bfdc:	4623      	mov	r3, r4
 800bfde:	4650      	mov	r0, sl
 800bfe0:	4621      	mov	r1, r4
 800bfe2:	f7f4 fa79 	bl	80004d8 <__aeabi_dmul>
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460f      	mov	r7, r1
 800bfea:	4602      	mov	r2, r0
 800bfec:	460b      	mov	r3, r1
 800bfee:	4650      	mov	r0, sl
 800bff0:	4621      	mov	r1, r4
 800bff2:	f7f4 fa71 	bl	80004d8 <__aeabi_dmul>
 800bff6:	a33e      	add	r3, pc, #248	; (adr r3, 800c0f0 <__kernel_sin+0x138>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	4680      	mov	r8, r0
 800bffe:	4689      	mov	r9, r1
 800c000:	4630      	mov	r0, r6
 800c002:	4639      	mov	r1, r7
 800c004:	f7f4 fa68 	bl	80004d8 <__aeabi_dmul>
 800c008:	a33b      	add	r3, pc, #236	; (adr r3, 800c0f8 <__kernel_sin+0x140>)
 800c00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00e:	f7f4 f8ab 	bl	8000168 <__aeabi_dsub>
 800c012:	4632      	mov	r2, r6
 800c014:	463b      	mov	r3, r7
 800c016:	f7f4 fa5f 	bl	80004d8 <__aeabi_dmul>
 800c01a:	a339      	add	r3, pc, #228	; (adr r3, 800c100 <__kernel_sin+0x148>)
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f7f4 f8a4 	bl	800016c <__adddf3>
 800c024:	4632      	mov	r2, r6
 800c026:	463b      	mov	r3, r7
 800c028:	f7f4 fa56 	bl	80004d8 <__aeabi_dmul>
 800c02c:	a336      	add	r3, pc, #216	; (adr r3, 800c108 <__kernel_sin+0x150>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	f7f4 f899 	bl	8000168 <__aeabi_dsub>
 800c036:	4632      	mov	r2, r6
 800c038:	463b      	mov	r3, r7
 800c03a:	f7f4 fa4d 	bl	80004d8 <__aeabi_dmul>
 800c03e:	a334      	add	r3, pc, #208	; (adr r3, 800c110 <__kernel_sin+0x158>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f892 	bl	800016c <__adddf3>
 800c048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c04c:	b9dd      	cbnz	r5, 800c086 <__kernel_sin+0xce>
 800c04e:	4602      	mov	r2, r0
 800c050:	460b      	mov	r3, r1
 800c052:	4630      	mov	r0, r6
 800c054:	4639      	mov	r1, r7
 800c056:	f7f4 fa3f 	bl	80004d8 <__aeabi_dmul>
 800c05a:	a32f      	add	r3, pc, #188	; (adr r3, 800c118 <__kernel_sin+0x160>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f7f4 f882 	bl	8000168 <__aeabi_dsub>
 800c064:	4642      	mov	r2, r8
 800c066:	464b      	mov	r3, r9
 800c068:	f7f4 fa36 	bl	80004d8 <__aeabi_dmul>
 800c06c:	4602      	mov	r2, r0
 800c06e:	460b      	mov	r3, r1
 800c070:	4650      	mov	r0, sl
 800c072:	4621      	mov	r1, r4
 800c074:	f7f4 f87a 	bl	800016c <__adddf3>
 800c078:	4682      	mov	sl, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	4650      	mov	r0, sl
 800c07e:	4621      	mov	r1, r4
 800c080:	b006      	add	sp, #24
 800c082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c086:	2200      	movs	r2, #0
 800c088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c08c:	4b24      	ldr	r3, [pc, #144]	; (800c120 <__kernel_sin+0x168>)
 800c08e:	f7f4 fa23 	bl	80004d8 <__aeabi_dmul>
 800c092:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c09a:	4640      	mov	r0, r8
 800c09c:	4649      	mov	r1, r9
 800c09e:	f7f4 fa1b 	bl	80004d8 <__aeabi_dmul>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0aa:	f7f4 f85d 	bl	8000168 <__aeabi_dsub>
 800c0ae:	4632      	mov	r2, r6
 800c0b0:	463b      	mov	r3, r7
 800c0b2:	f7f4 fa11 	bl	80004d8 <__aeabi_dmul>
 800c0b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ba:	f7f4 f855 	bl	8000168 <__aeabi_dsub>
 800c0be:	a316      	add	r3, pc, #88	; (adr r3, 800c118 <__kernel_sin+0x160>)
 800c0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c4:	4606      	mov	r6, r0
 800c0c6:	460f      	mov	r7, r1
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	f7f4 fa04 	bl	80004d8 <__aeabi_dmul>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
 800c0d8:	f7f4 f848 	bl	800016c <__adddf3>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4650      	mov	r0, sl
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	f7f4 f840 	bl	8000168 <__aeabi_dsub>
 800c0e8:	e7c6      	b.n	800c078 <__kernel_sin+0xc0>
 800c0ea:	bf00      	nop
 800c0ec:	f3af 8000 	nop.w
 800c0f0:	5acfd57c 	.word	0x5acfd57c
 800c0f4:	3de5d93a 	.word	0x3de5d93a
 800c0f8:	8a2b9ceb 	.word	0x8a2b9ceb
 800c0fc:	3e5ae5e6 	.word	0x3e5ae5e6
 800c100:	57b1fe7d 	.word	0x57b1fe7d
 800c104:	3ec71de3 	.word	0x3ec71de3
 800c108:	19c161d5 	.word	0x19c161d5
 800c10c:	3f2a01a0 	.word	0x3f2a01a0
 800c110:	1110f8a6 	.word	0x1110f8a6
 800c114:	3f811111 	.word	0x3f811111
 800c118:	55555549 	.word	0x55555549
 800c11c:	3fc55555 	.word	0x3fc55555
 800c120:	3fe00000 	.word	0x3fe00000

0800c124 <fabs>:
 800c124:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c128:	4770      	bx	lr
 800c12a:	0000      	movs	r0, r0
 800c12c:	0000      	movs	r0, r0
	...

0800c130 <scalbn>:
 800c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c132:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c136:	4604      	mov	r4, r0
 800c138:	460d      	mov	r5, r1
 800c13a:	4617      	mov	r7, r2
 800c13c:	460b      	mov	r3, r1
 800c13e:	b996      	cbnz	r6, 800c166 <scalbn+0x36>
 800c140:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c144:	4303      	orrs	r3, r0
 800c146:	d039      	beq.n	800c1bc <scalbn+0x8c>
 800c148:	4b33      	ldr	r3, [pc, #204]	; (800c218 <scalbn+0xe8>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	f7f4 f9c4 	bl	80004d8 <__aeabi_dmul>
 800c150:	4b32      	ldr	r3, [pc, #200]	; (800c21c <scalbn+0xec>)
 800c152:	4604      	mov	r4, r0
 800c154:	429f      	cmp	r7, r3
 800c156:	460d      	mov	r5, r1
 800c158:	da0f      	bge.n	800c17a <scalbn+0x4a>
 800c15a:	a32b      	add	r3, pc, #172	; (adr r3, 800c208 <scalbn+0xd8>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 f9ba 	bl	80004d8 <__aeabi_dmul>
 800c164:	e006      	b.n	800c174 <scalbn+0x44>
 800c166:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c16a:	4296      	cmp	r6, r2
 800c16c:	d10a      	bne.n	800c184 <scalbn+0x54>
 800c16e:	4602      	mov	r2, r0
 800c170:	f7f3 fffc 	bl	800016c <__adddf3>
 800c174:	4604      	mov	r4, r0
 800c176:	460d      	mov	r5, r1
 800c178:	e020      	b.n	800c1bc <scalbn+0x8c>
 800c17a:	460b      	mov	r3, r1
 800c17c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c180:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c184:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c188:	19b9      	adds	r1, r7, r6
 800c18a:	4291      	cmp	r1, r2
 800c18c:	dd0e      	ble.n	800c1ac <scalbn+0x7c>
 800c18e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c192:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c196:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c19a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c19e:	4820      	ldr	r0, [pc, #128]	; (800c220 <scalbn+0xf0>)
 800c1a0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c1a4:	a31a      	add	r3, pc, #104	; (adr r3, 800c210 <scalbn+0xe0>)
 800c1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1aa:	e7d9      	b.n	800c160 <scalbn+0x30>
 800c1ac:	2900      	cmp	r1, #0
 800c1ae:	dd08      	ble.n	800c1c2 <scalbn+0x92>
 800c1b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1b8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c1bc:	4620      	mov	r0, r4
 800c1be:	4629      	mov	r1, r5
 800c1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1c2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c1c6:	da12      	bge.n	800c1ee <scalbn+0xbe>
 800c1c8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c1cc:	429f      	cmp	r7, r3
 800c1ce:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c1d2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c1d6:	dcdc      	bgt.n	800c192 <scalbn+0x62>
 800c1d8:	a30b      	add	r3, pc, #44	; (adr r3, 800c208 <scalbn+0xd8>)
 800c1da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1de:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c1e2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c1e6:	480f      	ldr	r0, [pc, #60]	; (800c224 <scalbn+0xf4>)
 800c1e8:	f041 011f 	orr.w	r1, r1, #31
 800c1ec:	e7b8      	b.n	800c160 <scalbn+0x30>
 800c1ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1f2:	3136      	adds	r1, #54	; 0x36
 800c1f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1f8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	4629      	mov	r1, r5
 800c200:	2200      	movs	r2, #0
 800c202:	4b09      	ldr	r3, [pc, #36]	; (800c228 <scalbn+0xf8>)
 800c204:	e7ac      	b.n	800c160 <scalbn+0x30>
 800c206:	bf00      	nop
 800c208:	c2f8f359 	.word	0xc2f8f359
 800c20c:	01a56e1f 	.word	0x01a56e1f
 800c210:	8800759c 	.word	0x8800759c
 800c214:	7e37e43c 	.word	0x7e37e43c
 800c218:	43500000 	.word	0x43500000
 800c21c:	ffff3cb0 	.word	0xffff3cb0
 800c220:	8800759c 	.word	0x8800759c
 800c224:	c2f8f359 	.word	0xc2f8f359
 800c228:	3c900000 	.word	0x3c900000

0800c22c <__errno>:
 800c22c:	4b01      	ldr	r3, [pc, #4]	; (800c234 <__errno+0x8>)
 800c22e:	6818      	ldr	r0, [r3, #0]
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	20000198 	.word	0x20000198

0800c238 <__libc_init_array>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	2600      	movs	r6, #0
 800c23c:	4d0c      	ldr	r5, [pc, #48]	; (800c270 <__libc_init_array+0x38>)
 800c23e:	4c0d      	ldr	r4, [pc, #52]	; (800c274 <__libc_init_array+0x3c>)
 800c240:	1b64      	subs	r4, r4, r5
 800c242:	10a4      	asrs	r4, r4, #2
 800c244:	42a6      	cmp	r6, r4
 800c246:	d109      	bne.n	800c25c <__libc_init_array+0x24>
 800c248:	f000 fc9c 	bl	800cb84 <_init>
 800c24c:	2600      	movs	r6, #0
 800c24e:	4d0a      	ldr	r5, [pc, #40]	; (800c278 <__libc_init_array+0x40>)
 800c250:	4c0a      	ldr	r4, [pc, #40]	; (800c27c <__libc_init_array+0x44>)
 800c252:	1b64      	subs	r4, r4, r5
 800c254:	10a4      	asrs	r4, r4, #2
 800c256:	42a6      	cmp	r6, r4
 800c258:	d105      	bne.n	800c266 <__libc_init_array+0x2e>
 800c25a:	bd70      	pop	{r4, r5, r6, pc}
 800c25c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c260:	4798      	blx	r3
 800c262:	3601      	adds	r6, #1
 800c264:	e7ee      	b.n	800c244 <__libc_init_array+0xc>
 800c266:	f855 3b04 	ldr.w	r3, [r5], #4
 800c26a:	4798      	blx	r3
 800c26c:	3601      	adds	r6, #1
 800c26e:	e7f2      	b.n	800c256 <__libc_init_array+0x1e>
 800c270:	0800ce34 	.word	0x0800ce34
 800c274:	0800ce34 	.word	0x0800ce34
 800c278:	0800ce34 	.word	0x0800ce34
 800c27c:	0800ce38 	.word	0x0800ce38

0800c280 <memset>:
 800c280:	4603      	mov	r3, r0
 800c282:	4402      	add	r2, r0
 800c284:	4293      	cmp	r3, r2
 800c286:	d100      	bne.n	800c28a <memset+0xa>
 800c288:	4770      	bx	lr
 800c28a:	f803 1b01 	strb.w	r1, [r3], #1
 800c28e:	e7f9      	b.n	800c284 <memset+0x4>

0800c290 <siprintf>:
 800c290:	b40e      	push	{r1, r2, r3}
 800c292:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c296:	b500      	push	{lr}
 800c298:	b09c      	sub	sp, #112	; 0x70
 800c29a:	ab1d      	add	r3, sp, #116	; 0x74
 800c29c:	9002      	str	r0, [sp, #8]
 800c29e:	9006      	str	r0, [sp, #24]
 800c2a0:	9107      	str	r1, [sp, #28]
 800c2a2:	9104      	str	r1, [sp, #16]
 800c2a4:	4808      	ldr	r0, [pc, #32]	; (800c2c8 <siprintf+0x38>)
 800c2a6:	4909      	ldr	r1, [pc, #36]	; (800c2cc <siprintf+0x3c>)
 800c2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ac:	9105      	str	r1, [sp, #20]
 800c2ae:	6800      	ldr	r0, [r0, #0]
 800c2b0:	a902      	add	r1, sp, #8
 800c2b2:	9301      	str	r3, [sp, #4]
 800c2b4:	f000 f868 	bl	800c388 <_svfiprintf_r>
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	9b02      	ldr	r3, [sp, #8]
 800c2bc:	701a      	strb	r2, [r3, #0]
 800c2be:	b01c      	add	sp, #112	; 0x70
 800c2c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2c4:	b003      	add	sp, #12
 800c2c6:	4770      	bx	lr
 800c2c8:	20000198 	.word	0x20000198
 800c2cc:	ffff0208 	.word	0xffff0208

0800c2d0 <__ssputs_r>:
 800c2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2d4:	688e      	ldr	r6, [r1, #8]
 800c2d6:	4682      	mov	sl, r0
 800c2d8:	429e      	cmp	r6, r3
 800c2da:	460c      	mov	r4, r1
 800c2dc:	4690      	mov	r8, r2
 800c2de:	461f      	mov	r7, r3
 800c2e0:	d838      	bhi.n	800c354 <__ssputs_r+0x84>
 800c2e2:	898a      	ldrh	r2, [r1, #12]
 800c2e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2e8:	d032      	beq.n	800c350 <__ssputs_r+0x80>
 800c2ea:	6825      	ldr	r5, [r4, #0]
 800c2ec:	6909      	ldr	r1, [r1, #16]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	eba5 0901 	sub.w	r9, r5, r1
 800c2f4:	6965      	ldr	r5, [r4, #20]
 800c2f6:	444b      	add	r3, r9
 800c2f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c300:	106d      	asrs	r5, r5, #1
 800c302:	429d      	cmp	r5, r3
 800c304:	bf38      	it	cc
 800c306:	461d      	movcc	r5, r3
 800c308:	0553      	lsls	r3, r2, #21
 800c30a:	d531      	bpl.n	800c370 <__ssputs_r+0xa0>
 800c30c:	4629      	mov	r1, r5
 800c30e:	f000 fb6f 	bl	800c9f0 <_malloc_r>
 800c312:	4606      	mov	r6, r0
 800c314:	b950      	cbnz	r0, 800c32c <__ssputs_r+0x5c>
 800c316:	230c      	movs	r3, #12
 800c318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c31c:	f8ca 3000 	str.w	r3, [sl]
 800c320:	89a3      	ldrh	r3, [r4, #12]
 800c322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c326:	81a3      	strh	r3, [r4, #12]
 800c328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32c:	464a      	mov	r2, r9
 800c32e:	6921      	ldr	r1, [r4, #16]
 800c330:	f000 face 	bl	800c8d0 <memcpy>
 800c334:	89a3      	ldrh	r3, [r4, #12]
 800c336:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c33a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	6126      	str	r6, [r4, #16]
 800c342:	444e      	add	r6, r9
 800c344:	6026      	str	r6, [r4, #0]
 800c346:	463e      	mov	r6, r7
 800c348:	6165      	str	r5, [r4, #20]
 800c34a:	eba5 0509 	sub.w	r5, r5, r9
 800c34e:	60a5      	str	r5, [r4, #8]
 800c350:	42be      	cmp	r6, r7
 800c352:	d900      	bls.n	800c356 <__ssputs_r+0x86>
 800c354:	463e      	mov	r6, r7
 800c356:	4632      	mov	r2, r6
 800c358:	4641      	mov	r1, r8
 800c35a:	6820      	ldr	r0, [r4, #0]
 800c35c:	f000 fac6 	bl	800c8ec <memmove>
 800c360:	68a3      	ldr	r3, [r4, #8]
 800c362:	2000      	movs	r0, #0
 800c364:	1b9b      	subs	r3, r3, r6
 800c366:	60a3      	str	r3, [r4, #8]
 800c368:	6823      	ldr	r3, [r4, #0]
 800c36a:	4433      	add	r3, r6
 800c36c:	6023      	str	r3, [r4, #0]
 800c36e:	e7db      	b.n	800c328 <__ssputs_r+0x58>
 800c370:	462a      	mov	r2, r5
 800c372:	f000 fbb1 	bl	800cad8 <_realloc_r>
 800c376:	4606      	mov	r6, r0
 800c378:	2800      	cmp	r0, #0
 800c37a:	d1e1      	bne.n	800c340 <__ssputs_r+0x70>
 800c37c:	4650      	mov	r0, sl
 800c37e:	6921      	ldr	r1, [r4, #16]
 800c380:	f000 face 	bl	800c920 <_free_r>
 800c384:	e7c7      	b.n	800c316 <__ssputs_r+0x46>
	...

0800c388 <_svfiprintf_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	4698      	mov	r8, r3
 800c38e:	898b      	ldrh	r3, [r1, #12]
 800c390:	4607      	mov	r7, r0
 800c392:	061b      	lsls	r3, r3, #24
 800c394:	460d      	mov	r5, r1
 800c396:	4614      	mov	r4, r2
 800c398:	b09d      	sub	sp, #116	; 0x74
 800c39a:	d50e      	bpl.n	800c3ba <_svfiprintf_r+0x32>
 800c39c:	690b      	ldr	r3, [r1, #16]
 800c39e:	b963      	cbnz	r3, 800c3ba <_svfiprintf_r+0x32>
 800c3a0:	2140      	movs	r1, #64	; 0x40
 800c3a2:	f000 fb25 	bl	800c9f0 <_malloc_r>
 800c3a6:	6028      	str	r0, [r5, #0]
 800c3a8:	6128      	str	r0, [r5, #16]
 800c3aa:	b920      	cbnz	r0, 800c3b6 <_svfiprintf_r+0x2e>
 800c3ac:	230c      	movs	r3, #12
 800c3ae:	603b      	str	r3, [r7, #0]
 800c3b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3b4:	e0d1      	b.n	800c55a <_svfiprintf_r+0x1d2>
 800c3b6:	2340      	movs	r3, #64	; 0x40
 800c3b8:	616b      	str	r3, [r5, #20]
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c3be:	2320      	movs	r3, #32
 800c3c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3c4:	2330      	movs	r3, #48	; 0x30
 800c3c6:	f04f 0901 	mov.w	r9, #1
 800c3ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c574 <_svfiprintf_r+0x1ec>
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d6:	4623      	mov	r3, r4
 800c3d8:	469a      	mov	sl, r3
 800c3da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3de:	b10a      	cbz	r2, 800c3e4 <_svfiprintf_r+0x5c>
 800c3e0:	2a25      	cmp	r2, #37	; 0x25
 800c3e2:	d1f9      	bne.n	800c3d8 <_svfiprintf_r+0x50>
 800c3e4:	ebba 0b04 	subs.w	fp, sl, r4
 800c3e8:	d00b      	beq.n	800c402 <_svfiprintf_r+0x7a>
 800c3ea:	465b      	mov	r3, fp
 800c3ec:	4622      	mov	r2, r4
 800c3ee:	4629      	mov	r1, r5
 800c3f0:	4638      	mov	r0, r7
 800c3f2:	f7ff ff6d 	bl	800c2d0 <__ssputs_r>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f000 80aa 	beq.w	800c550 <_svfiprintf_r+0x1c8>
 800c3fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3fe:	445a      	add	r2, fp
 800c400:	9209      	str	r2, [sp, #36]	; 0x24
 800c402:	f89a 3000 	ldrb.w	r3, [sl]
 800c406:	2b00      	cmp	r3, #0
 800c408:	f000 80a2 	beq.w	800c550 <_svfiprintf_r+0x1c8>
 800c40c:	2300      	movs	r3, #0
 800c40e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c412:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c416:	f10a 0a01 	add.w	sl, sl, #1
 800c41a:	9304      	str	r3, [sp, #16]
 800c41c:	9307      	str	r3, [sp, #28]
 800c41e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c422:	931a      	str	r3, [sp, #104]	; 0x68
 800c424:	4654      	mov	r4, sl
 800c426:	2205      	movs	r2, #5
 800c428:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c42c:	4851      	ldr	r0, [pc, #324]	; (800c574 <_svfiprintf_r+0x1ec>)
 800c42e:	f000 fa41 	bl	800c8b4 <memchr>
 800c432:	9a04      	ldr	r2, [sp, #16]
 800c434:	b9d8      	cbnz	r0, 800c46e <_svfiprintf_r+0xe6>
 800c436:	06d0      	lsls	r0, r2, #27
 800c438:	bf44      	itt	mi
 800c43a:	2320      	movmi	r3, #32
 800c43c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c440:	0711      	lsls	r1, r2, #28
 800c442:	bf44      	itt	mi
 800c444:	232b      	movmi	r3, #43	; 0x2b
 800c446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c44a:	f89a 3000 	ldrb.w	r3, [sl]
 800c44e:	2b2a      	cmp	r3, #42	; 0x2a
 800c450:	d015      	beq.n	800c47e <_svfiprintf_r+0xf6>
 800c452:	4654      	mov	r4, sl
 800c454:	2000      	movs	r0, #0
 800c456:	f04f 0c0a 	mov.w	ip, #10
 800c45a:	9a07      	ldr	r2, [sp, #28]
 800c45c:	4621      	mov	r1, r4
 800c45e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c462:	3b30      	subs	r3, #48	; 0x30
 800c464:	2b09      	cmp	r3, #9
 800c466:	d94e      	bls.n	800c506 <_svfiprintf_r+0x17e>
 800c468:	b1b0      	cbz	r0, 800c498 <_svfiprintf_r+0x110>
 800c46a:	9207      	str	r2, [sp, #28]
 800c46c:	e014      	b.n	800c498 <_svfiprintf_r+0x110>
 800c46e:	eba0 0308 	sub.w	r3, r0, r8
 800c472:	fa09 f303 	lsl.w	r3, r9, r3
 800c476:	4313      	orrs	r3, r2
 800c478:	46a2      	mov	sl, r4
 800c47a:	9304      	str	r3, [sp, #16]
 800c47c:	e7d2      	b.n	800c424 <_svfiprintf_r+0x9c>
 800c47e:	9b03      	ldr	r3, [sp, #12]
 800c480:	1d19      	adds	r1, r3, #4
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	9103      	str	r1, [sp, #12]
 800c486:	2b00      	cmp	r3, #0
 800c488:	bfbb      	ittet	lt
 800c48a:	425b      	neglt	r3, r3
 800c48c:	f042 0202 	orrlt.w	r2, r2, #2
 800c490:	9307      	strge	r3, [sp, #28]
 800c492:	9307      	strlt	r3, [sp, #28]
 800c494:	bfb8      	it	lt
 800c496:	9204      	strlt	r2, [sp, #16]
 800c498:	7823      	ldrb	r3, [r4, #0]
 800c49a:	2b2e      	cmp	r3, #46	; 0x2e
 800c49c:	d10c      	bne.n	800c4b8 <_svfiprintf_r+0x130>
 800c49e:	7863      	ldrb	r3, [r4, #1]
 800c4a0:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a2:	d135      	bne.n	800c510 <_svfiprintf_r+0x188>
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	3402      	adds	r4, #2
 800c4a8:	1d1a      	adds	r2, r3, #4
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	9203      	str	r2, [sp, #12]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	bfb8      	it	lt
 800c4b2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c4b6:	9305      	str	r3, [sp, #20]
 800c4b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c578 <_svfiprintf_r+0x1f0>
 800c4bc:	2203      	movs	r2, #3
 800c4be:	4650      	mov	r0, sl
 800c4c0:	7821      	ldrb	r1, [r4, #0]
 800c4c2:	f000 f9f7 	bl	800c8b4 <memchr>
 800c4c6:	b140      	cbz	r0, 800c4da <_svfiprintf_r+0x152>
 800c4c8:	2340      	movs	r3, #64	; 0x40
 800c4ca:	eba0 000a 	sub.w	r0, r0, sl
 800c4ce:	fa03 f000 	lsl.w	r0, r3, r0
 800c4d2:	9b04      	ldr	r3, [sp, #16]
 800c4d4:	3401      	adds	r4, #1
 800c4d6:	4303      	orrs	r3, r0
 800c4d8:	9304      	str	r3, [sp, #16]
 800c4da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4de:	2206      	movs	r2, #6
 800c4e0:	4826      	ldr	r0, [pc, #152]	; (800c57c <_svfiprintf_r+0x1f4>)
 800c4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4e6:	f000 f9e5 	bl	800c8b4 <memchr>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d038      	beq.n	800c560 <_svfiprintf_r+0x1d8>
 800c4ee:	4b24      	ldr	r3, [pc, #144]	; (800c580 <_svfiprintf_r+0x1f8>)
 800c4f0:	bb1b      	cbnz	r3, 800c53a <_svfiprintf_r+0x1b2>
 800c4f2:	9b03      	ldr	r3, [sp, #12]
 800c4f4:	3307      	adds	r3, #7
 800c4f6:	f023 0307 	bic.w	r3, r3, #7
 800c4fa:	3308      	adds	r3, #8
 800c4fc:	9303      	str	r3, [sp, #12]
 800c4fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c500:	4433      	add	r3, r6
 800c502:	9309      	str	r3, [sp, #36]	; 0x24
 800c504:	e767      	b.n	800c3d6 <_svfiprintf_r+0x4e>
 800c506:	460c      	mov	r4, r1
 800c508:	2001      	movs	r0, #1
 800c50a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50e:	e7a5      	b.n	800c45c <_svfiprintf_r+0xd4>
 800c510:	2300      	movs	r3, #0
 800c512:	f04f 0c0a 	mov.w	ip, #10
 800c516:	4619      	mov	r1, r3
 800c518:	3401      	adds	r4, #1
 800c51a:	9305      	str	r3, [sp, #20]
 800c51c:	4620      	mov	r0, r4
 800c51e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c522:	3a30      	subs	r2, #48	; 0x30
 800c524:	2a09      	cmp	r2, #9
 800c526:	d903      	bls.n	800c530 <_svfiprintf_r+0x1a8>
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d0c5      	beq.n	800c4b8 <_svfiprintf_r+0x130>
 800c52c:	9105      	str	r1, [sp, #20]
 800c52e:	e7c3      	b.n	800c4b8 <_svfiprintf_r+0x130>
 800c530:	4604      	mov	r4, r0
 800c532:	2301      	movs	r3, #1
 800c534:	fb0c 2101 	mla	r1, ip, r1, r2
 800c538:	e7f0      	b.n	800c51c <_svfiprintf_r+0x194>
 800c53a:	ab03      	add	r3, sp, #12
 800c53c:	9300      	str	r3, [sp, #0]
 800c53e:	462a      	mov	r2, r5
 800c540:	4638      	mov	r0, r7
 800c542:	4b10      	ldr	r3, [pc, #64]	; (800c584 <_svfiprintf_r+0x1fc>)
 800c544:	a904      	add	r1, sp, #16
 800c546:	f3af 8000 	nop.w
 800c54a:	1c42      	adds	r2, r0, #1
 800c54c:	4606      	mov	r6, r0
 800c54e:	d1d6      	bne.n	800c4fe <_svfiprintf_r+0x176>
 800c550:	89ab      	ldrh	r3, [r5, #12]
 800c552:	065b      	lsls	r3, r3, #25
 800c554:	f53f af2c 	bmi.w	800c3b0 <_svfiprintf_r+0x28>
 800c558:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c55a:	b01d      	add	sp, #116	; 0x74
 800c55c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c560:	ab03      	add	r3, sp, #12
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	462a      	mov	r2, r5
 800c566:	4638      	mov	r0, r7
 800c568:	4b06      	ldr	r3, [pc, #24]	; (800c584 <_svfiprintf_r+0x1fc>)
 800c56a:	a904      	add	r1, sp, #16
 800c56c:	f000 f87c 	bl	800c668 <_printf_i>
 800c570:	e7eb      	b.n	800c54a <_svfiprintf_r+0x1c2>
 800c572:	bf00      	nop
 800c574:	0800ce00 	.word	0x0800ce00
 800c578:	0800ce06 	.word	0x0800ce06
 800c57c:	0800ce0a 	.word	0x0800ce0a
 800c580:	00000000 	.word	0x00000000
 800c584:	0800c2d1 	.word	0x0800c2d1

0800c588 <_printf_common>:
 800c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	4616      	mov	r6, r2
 800c58e:	4699      	mov	r9, r3
 800c590:	688a      	ldr	r2, [r1, #8]
 800c592:	690b      	ldr	r3, [r1, #16]
 800c594:	4607      	mov	r7, r0
 800c596:	4293      	cmp	r3, r2
 800c598:	bfb8      	it	lt
 800c59a:	4613      	movlt	r3, r2
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5a2:	460c      	mov	r4, r1
 800c5a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5a8:	b10a      	cbz	r2, 800c5ae <_printf_common+0x26>
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	6033      	str	r3, [r6, #0]
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	0699      	lsls	r1, r3, #26
 800c5b2:	bf42      	ittt	mi
 800c5b4:	6833      	ldrmi	r3, [r6, #0]
 800c5b6:	3302      	addmi	r3, #2
 800c5b8:	6033      	strmi	r3, [r6, #0]
 800c5ba:	6825      	ldr	r5, [r4, #0]
 800c5bc:	f015 0506 	ands.w	r5, r5, #6
 800c5c0:	d106      	bne.n	800c5d0 <_printf_common+0x48>
 800c5c2:	f104 0a19 	add.w	sl, r4, #25
 800c5c6:	68e3      	ldr	r3, [r4, #12]
 800c5c8:	6832      	ldr	r2, [r6, #0]
 800c5ca:	1a9b      	subs	r3, r3, r2
 800c5cc:	42ab      	cmp	r3, r5
 800c5ce:	dc28      	bgt.n	800c622 <_printf_common+0x9a>
 800c5d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5d4:	1e13      	subs	r3, r2, #0
 800c5d6:	6822      	ldr	r2, [r4, #0]
 800c5d8:	bf18      	it	ne
 800c5da:	2301      	movne	r3, #1
 800c5dc:	0692      	lsls	r2, r2, #26
 800c5de:	d42d      	bmi.n	800c63c <_printf_common+0xb4>
 800c5e0:	4649      	mov	r1, r9
 800c5e2:	4638      	mov	r0, r7
 800c5e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5e8:	47c0      	blx	r8
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	d020      	beq.n	800c630 <_printf_common+0xa8>
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	68e5      	ldr	r5, [r4, #12]
 800c5f2:	f003 0306 	and.w	r3, r3, #6
 800c5f6:	2b04      	cmp	r3, #4
 800c5f8:	bf18      	it	ne
 800c5fa:	2500      	movne	r5, #0
 800c5fc:	6832      	ldr	r2, [r6, #0]
 800c5fe:	f04f 0600 	mov.w	r6, #0
 800c602:	68a3      	ldr	r3, [r4, #8]
 800c604:	bf08      	it	eq
 800c606:	1aad      	subeq	r5, r5, r2
 800c608:	6922      	ldr	r2, [r4, #16]
 800c60a:	bf08      	it	eq
 800c60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c610:	4293      	cmp	r3, r2
 800c612:	bfc4      	itt	gt
 800c614:	1a9b      	subgt	r3, r3, r2
 800c616:	18ed      	addgt	r5, r5, r3
 800c618:	341a      	adds	r4, #26
 800c61a:	42b5      	cmp	r5, r6
 800c61c:	d11a      	bne.n	800c654 <_printf_common+0xcc>
 800c61e:	2000      	movs	r0, #0
 800c620:	e008      	b.n	800c634 <_printf_common+0xac>
 800c622:	2301      	movs	r3, #1
 800c624:	4652      	mov	r2, sl
 800c626:	4649      	mov	r1, r9
 800c628:	4638      	mov	r0, r7
 800c62a:	47c0      	blx	r8
 800c62c:	3001      	adds	r0, #1
 800c62e:	d103      	bne.n	800c638 <_printf_common+0xb0>
 800c630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c638:	3501      	adds	r5, #1
 800c63a:	e7c4      	b.n	800c5c6 <_printf_common+0x3e>
 800c63c:	2030      	movs	r0, #48	; 0x30
 800c63e:	18e1      	adds	r1, r4, r3
 800c640:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c644:	1c5a      	adds	r2, r3, #1
 800c646:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c64a:	4422      	add	r2, r4
 800c64c:	3302      	adds	r3, #2
 800c64e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c652:	e7c5      	b.n	800c5e0 <_printf_common+0x58>
 800c654:	2301      	movs	r3, #1
 800c656:	4622      	mov	r2, r4
 800c658:	4649      	mov	r1, r9
 800c65a:	4638      	mov	r0, r7
 800c65c:	47c0      	blx	r8
 800c65e:	3001      	adds	r0, #1
 800c660:	d0e6      	beq.n	800c630 <_printf_common+0xa8>
 800c662:	3601      	adds	r6, #1
 800c664:	e7d9      	b.n	800c61a <_printf_common+0x92>
	...

0800c668 <_printf_i>:
 800c668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c66c:	7e0f      	ldrb	r7, [r1, #24]
 800c66e:	4691      	mov	r9, r2
 800c670:	2f78      	cmp	r7, #120	; 0x78
 800c672:	4680      	mov	r8, r0
 800c674:	460c      	mov	r4, r1
 800c676:	469a      	mov	sl, r3
 800c678:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c67a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c67e:	d807      	bhi.n	800c690 <_printf_i+0x28>
 800c680:	2f62      	cmp	r7, #98	; 0x62
 800c682:	d80a      	bhi.n	800c69a <_printf_i+0x32>
 800c684:	2f00      	cmp	r7, #0
 800c686:	f000 80d9 	beq.w	800c83c <_printf_i+0x1d4>
 800c68a:	2f58      	cmp	r7, #88	; 0x58
 800c68c:	f000 80a4 	beq.w	800c7d8 <_printf_i+0x170>
 800c690:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c698:	e03a      	b.n	800c710 <_printf_i+0xa8>
 800c69a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c69e:	2b15      	cmp	r3, #21
 800c6a0:	d8f6      	bhi.n	800c690 <_printf_i+0x28>
 800c6a2:	a101      	add	r1, pc, #4	; (adr r1, 800c6a8 <_printf_i+0x40>)
 800c6a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6a8:	0800c701 	.word	0x0800c701
 800c6ac:	0800c715 	.word	0x0800c715
 800c6b0:	0800c691 	.word	0x0800c691
 800c6b4:	0800c691 	.word	0x0800c691
 800c6b8:	0800c691 	.word	0x0800c691
 800c6bc:	0800c691 	.word	0x0800c691
 800c6c0:	0800c715 	.word	0x0800c715
 800c6c4:	0800c691 	.word	0x0800c691
 800c6c8:	0800c691 	.word	0x0800c691
 800c6cc:	0800c691 	.word	0x0800c691
 800c6d0:	0800c691 	.word	0x0800c691
 800c6d4:	0800c823 	.word	0x0800c823
 800c6d8:	0800c745 	.word	0x0800c745
 800c6dc:	0800c805 	.word	0x0800c805
 800c6e0:	0800c691 	.word	0x0800c691
 800c6e4:	0800c691 	.word	0x0800c691
 800c6e8:	0800c845 	.word	0x0800c845
 800c6ec:	0800c691 	.word	0x0800c691
 800c6f0:	0800c745 	.word	0x0800c745
 800c6f4:	0800c691 	.word	0x0800c691
 800c6f8:	0800c691 	.word	0x0800c691
 800c6fc:	0800c80d 	.word	0x0800c80d
 800c700:	682b      	ldr	r3, [r5, #0]
 800c702:	1d1a      	adds	r2, r3, #4
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	602a      	str	r2, [r5, #0]
 800c708:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c70c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c710:	2301      	movs	r3, #1
 800c712:	e0a4      	b.n	800c85e <_printf_i+0x1f6>
 800c714:	6820      	ldr	r0, [r4, #0]
 800c716:	6829      	ldr	r1, [r5, #0]
 800c718:	0606      	lsls	r6, r0, #24
 800c71a:	f101 0304 	add.w	r3, r1, #4
 800c71e:	d50a      	bpl.n	800c736 <_printf_i+0xce>
 800c720:	680e      	ldr	r6, [r1, #0]
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	2e00      	cmp	r6, #0
 800c726:	da03      	bge.n	800c730 <_printf_i+0xc8>
 800c728:	232d      	movs	r3, #45	; 0x2d
 800c72a:	4276      	negs	r6, r6
 800c72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c730:	230a      	movs	r3, #10
 800c732:	485e      	ldr	r0, [pc, #376]	; (800c8ac <_printf_i+0x244>)
 800c734:	e019      	b.n	800c76a <_printf_i+0x102>
 800c736:	680e      	ldr	r6, [r1, #0]
 800c738:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c73c:	602b      	str	r3, [r5, #0]
 800c73e:	bf18      	it	ne
 800c740:	b236      	sxthne	r6, r6
 800c742:	e7ef      	b.n	800c724 <_printf_i+0xbc>
 800c744:	682b      	ldr	r3, [r5, #0]
 800c746:	6820      	ldr	r0, [r4, #0]
 800c748:	1d19      	adds	r1, r3, #4
 800c74a:	6029      	str	r1, [r5, #0]
 800c74c:	0601      	lsls	r1, r0, #24
 800c74e:	d501      	bpl.n	800c754 <_printf_i+0xec>
 800c750:	681e      	ldr	r6, [r3, #0]
 800c752:	e002      	b.n	800c75a <_printf_i+0xf2>
 800c754:	0646      	lsls	r6, r0, #25
 800c756:	d5fb      	bpl.n	800c750 <_printf_i+0xe8>
 800c758:	881e      	ldrh	r6, [r3, #0]
 800c75a:	2f6f      	cmp	r7, #111	; 0x6f
 800c75c:	bf0c      	ite	eq
 800c75e:	2308      	moveq	r3, #8
 800c760:	230a      	movne	r3, #10
 800c762:	4852      	ldr	r0, [pc, #328]	; (800c8ac <_printf_i+0x244>)
 800c764:	2100      	movs	r1, #0
 800c766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c76a:	6865      	ldr	r5, [r4, #4]
 800c76c:	2d00      	cmp	r5, #0
 800c76e:	bfa8      	it	ge
 800c770:	6821      	ldrge	r1, [r4, #0]
 800c772:	60a5      	str	r5, [r4, #8]
 800c774:	bfa4      	itt	ge
 800c776:	f021 0104 	bicge.w	r1, r1, #4
 800c77a:	6021      	strge	r1, [r4, #0]
 800c77c:	b90e      	cbnz	r6, 800c782 <_printf_i+0x11a>
 800c77e:	2d00      	cmp	r5, #0
 800c780:	d04d      	beq.n	800c81e <_printf_i+0x1b6>
 800c782:	4615      	mov	r5, r2
 800c784:	fbb6 f1f3 	udiv	r1, r6, r3
 800c788:	fb03 6711 	mls	r7, r3, r1, r6
 800c78c:	5dc7      	ldrb	r7, [r0, r7]
 800c78e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c792:	4637      	mov	r7, r6
 800c794:	42bb      	cmp	r3, r7
 800c796:	460e      	mov	r6, r1
 800c798:	d9f4      	bls.n	800c784 <_printf_i+0x11c>
 800c79a:	2b08      	cmp	r3, #8
 800c79c:	d10b      	bne.n	800c7b6 <_printf_i+0x14e>
 800c79e:	6823      	ldr	r3, [r4, #0]
 800c7a0:	07de      	lsls	r6, r3, #31
 800c7a2:	d508      	bpl.n	800c7b6 <_printf_i+0x14e>
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	6861      	ldr	r1, [r4, #4]
 800c7a8:	4299      	cmp	r1, r3
 800c7aa:	bfde      	ittt	le
 800c7ac:	2330      	movle	r3, #48	; 0x30
 800c7ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c7b6:	1b52      	subs	r2, r2, r5
 800c7b8:	6122      	str	r2, [r4, #16]
 800c7ba:	464b      	mov	r3, r9
 800c7bc:	4621      	mov	r1, r4
 800c7be:	4640      	mov	r0, r8
 800c7c0:	f8cd a000 	str.w	sl, [sp]
 800c7c4:	aa03      	add	r2, sp, #12
 800c7c6:	f7ff fedf 	bl	800c588 <_printf_common>
 800c7ca:	3001      	adds	r0, #1
 800c7cc:	d14c      	bne.n	800c868 <_printf_i+0x200>
 800c7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d2:	b004      	add	sp, #16
 800c7d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7d8:	4834      	ldr	r0, [pc, #208]	; (800c8ac <_printf_i+0x244>)
 800c7da:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c7de:	6829      	ldr	r1, [r5, #0]
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	f851 6b04 	ldr.w	r6, [r1], #4
 800c7e6:	6029      	str	r1, [r5, #0]
 800c7e8:	061d      	lsls	r5, r3, #24
 800c7ea:	d514      	bpl.n	800c816 <_printf_i+0x1ae>
 800c7ec:	07df      	lsls	r7, r3, #31
 800c7ee:	bf44      	itt	mi
 800c7f0:	f043 0320 	orrmi.w	r3, r3, #32
 800c7f4:	6023      	strmi	r3, [r4, #0]
 800c7f6:	b91e      	cbnz	r6, 800c800 <_printf_i+0x198>
 800c7f8:	6823      	ldr	r3, [r4, #0]
 800c7fa:	f023 0320 	bic.w	r3, r3, #32
 800c7fe:	6023      	str	r3, [r4, #0]
 800c800:	2310      	movs	r3, #16
 800c802:	e7af      	b.n	800c764 <_printf_i+0xfc>
 800c804:	6823      	ldr	r3, [r4, #0]
 800c806:	f043 0320 	orr.w	r3, r3, #32
 800c80a:	6023      	str	r3, [r4, #0]
 800c80c:	2378      	movs	r3, #120	; 0x78
 800c80e:	4828      	ldr	r0, [pc, #160]	; (800c8b0 <_printf_i+0x248>)
 800c810:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c814:	e7e3      	b.n	800c7de <_printf_i+0x176>
 800c816:	0659      	lsls	r1, r3, #25
 800c818:	bf48      	it	mi
 800c81a:	b2b6      	uxthmi	r6, r6
 800c81c:	e7e6      	b.n	800c7ec <_printf_i+0x184>
 800c81e:	4615      	mov	r5, r2
 800c820:	e7bb      	b.n	800c79a <_printf_i+0x132>
 800c822:	682b      	ldr	r3, [r5, #0]
 800c824:	6826      	ldr	r6, [r4, #0]
 800c826:	1d18      	adds	r0, r3, #4
 800c828:	6961      	ldr	r1, [r4, #20]
 800c82a:	6028      	str	r0, [r5, #0]
 800c82c:	0635      	lsls	r5, r6, #24
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	d501      	bpl.n	800c836 <_printf_i+0x1ce>
 800c832:	6019      	str	r1, [r3, #0]
 800c834:	e002      	b.n	800c83c <_printf_i+0x1d4>
 800c836:	0670      	lsls	r0, r6, #25
 800c838:	d5fb      	bpl.n	800c832 <_printf_i+0x1ca>
 800c83a:	8019      	strh	r1, [r3, #0]
 800c83c:	2300      	movs	r3, #0
 800c83e:	4615      	mov	r5, r2
 800c840:	6123      	str	r3, [r4, #16]
 800c842:	e7ba      	b.n	800c7ba <_printf_i+0x152>
 800c844:	682b      	ldr	r3, [r5, #0]
 800c846:	2100      	movs	r1, #0
 800c848:	1d1a      	adds	r2, r3, #4
 800c84a:	602a      	str	r2, [r5, #0]
 800c84c:	681d      	ldr	r5, [r3, #0]
 800c84e:	6862      	ldr	r2, [r4, #4]
 800c850:	4628      	mov	r0, r5
 800c852:	f000 f82f 	bl	800c8b4 <memchr>
 800c856:	b108      	cbz	r0, 800c85c <_printf_i+0x1f4>
 800c858:	1b40      	subs	r0, r0, r5
 800c85a:	6060      	str	r0, [r4, #4]
 800c85c:	6863      	ldr	r3, [r4, #4]
 800c85e:	6123      	str	r3, [r4, #16]
 800c860:	2300      	movs	r3, #0
 800c862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c866:	e7a8      	b.n	800c7ba <_printf_i+0x152>
 800c868:	462a      	mov	r2, r5
 800c86a:	4649      	mov	r1, r9
 800c86c:	4640      	mov	r0, r8
 800c86e:	6923      	ldr	r3, [r4, #16]
 800c870:	47d0      	blx	sl
 800c872:	3001      	adds	r0, #1
 800c874:	d0ab      	beq.n	800c7ce <_printf_i+0x166>
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	079b      	lsls	r3, r3, #30
 800c87a:	d413      	bmi.n	800c8a4 <_printf_i+0x23c>
 800c87c:	68e0      	ldr	r0, [r4, #12]
 800c87e:	9b03      	ldr	r3, [sp, #12]
 800c880:	4298      	cmp	r0, r3
 800c882:	bfb8      	it	lt
 800c884:	4618      	movlt	r0, r3
 800c886:	e7a4      	b.n	800c7d2 <_printf_i+0x16a>
 800c888:	2301      	movs	r3, #1
 800c88a:	4632      	mov	r2, r6
 800c88c:	4649      	mov	r1, r9
 800c88e:	4640      	mov	r0, r8
 800c890:	47d0      	blx	sl
 800c892:	3001      	adds	r0, #1
 800c894:	d09b      	beq.n	800c7ce <_printf_i+0x166>
 800c896:	3501      	adds	r5, #1
 800c898:	68e3      	ldr	r3, [r4, #12]
 800c89a:	9903      	ldr	r1, [sp, #12]
 800c89c:	1a5b      	subs	r3, r3, r1
 800c89e:	42ab      	cmp	r3, r5
 800c8a0:	dcf2      	bgt.n	800c888 <_printf_i+0x220>
 800c8a2:	e7eb      	b.n	800c87c <_printf_i+0x214>
 800c8a4:	2500      	movs	r5, #0
 800c8a6:	f104 0619 	add.w	r6, r4, #25
 800c8aa:	e7f5      	b.n	800c898 <_printf_i+0x230>
 800c8ac:	0800ce11 	.word	0x0800ce11
 800c8b0:	0800ce22 	.word	0x0800ce22

0800c8b4 <memchr>:
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	b510      	push	{r4, lr}
 800c8b8:	b2c9      	uxtb	r1, r1
 800c8ba:	4402      	add	r2, r0
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	4618      	mov	r0, r3
 800c8c0:	d101      	bne.n	800c8c6 <memchr+0x12>
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	e003      	b.n	800c8ce <memchr+0x1a>
 800c8c6:	7804      	ldrb	r4, [r0, #0]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	428c      	cmp	r4, r1
 800c8cc:	d1f6      	bne.n	800c8bc <memchr+0x8>
 800c8ce:	bd10      	pop	{r4, pc}

0800c8d0 <memcpy>:
 800c8d0:	440a      	add	r2, r1
 800c8d2:	4291      	cmp	r1, r2
 800c8d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c8d8:	d100      	bne.n	800c8dc <memcpy+0xc>
 800c8da:	4770      	bx	lr
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8e2:	4291      	cmp	r1, r2
 800c8e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8e8:	d1f9      	bne.n	800c8de <memcpy+0xe>
 800c8ea:	bd10      	pop	{r4, pc}

0800c8ec <memmove>:
 800c8ec:	4288      	cmp	r0, r1
 800c8ee:	b510      	push	{r4, lr}
 800c8f0:	eb01 0402 	add.w	r4, r1, r2
 800c8f4:	d902      	bls.n	800c8fc <memmove+0x10>
 800c8f6:	4284      	cmp	r4, r0
 800c8f8:	4623      	mov	r3, r4
 800c8fa:	d807      	bhi.n	800c90c <memmove+0x20>
 800c8fc:	1e43      	subs	r3, r0, #1
 800c8fe:	42a1      	cmp	r1, r4
 800c900:	d008      	beq.n	800c914 <memmove+0x28>
 800c902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c90a:	e7f8      	b.n	800c8fe <memmove+0x12>
 800c90c:	4601      	mov	r1, r0
 800c90e:	4402      	add	r2, r0
 800c910:	428a      	cmp	r2, r1
 800c912:	d100      	bne.n	800c916 <memmove+0x2a>
 800c914:	bd10      	pop	{r4, pc}
 800c916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c91e:	e7f7      	b.n	800c910 <memmove+0x24>

0800c920 <_free_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4605      	mov	r5, r0
 800c924:	2900      	cmp	r1, #0
 800c926:	d040      	beq.n	800c9aa <_free_r+0x8a>
 800c928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c92c:	1f0c      	subs	r4, r1, #4
 800c92e:	2b00      	cmp	r3, #0
 800c930:	bfb8      	it	lt
 800c932:	18e4      	addlt	r4, r4, r3
 800c934:	f000 f910 	bl	800cb58 <__malloc_lock>
 800c938:	4a1c      	ldr	r2, [pc, #112]	; (800c9ac <_free_r+0x8c>)
 800c93a:	6813      	ldr	r3, [r2, #0]
 800c93c:	b933      	cbnz	r3, 800c94c <_free_r+0x2c>
 800c93e:	6063      	str	r3, [r4, #4]
 800c940:	6014      	str	r4, [r2, #0]
 800c942:	4628      	mov	r0, r5
 800c944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c948:	f000 b90c 	b.w	800cb64 <__malloc_unlock>
 800c94c:	42a3      	cmp	r3, r4
 800c94e:	d908      	bls.n	800c962 <_free_r+0x42>
 800c950:	6820      	ldr	r0, [r4, #0]
 800c952:	1821      	adds	r1, r4, r0
 800c954:	428b      	cmp	r3, r1
 800c956:	bf01      	itttt	eq
 800c958:	6819      	ldreq	r1, [r3, #0]
 800c95a:	685b      	ldreq	r3, [r3, #4]
 800c95c:	1809      	addeq	r1, r1, r0
 800c95e:	6021      	streq	r1, [r4, #0]
 800c960:	e7ed      	b.n	800c93e <_free_r+0x1e>
 800c962:	461a      	mov	r2, r3
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	b10b      	cbz	r3, 800c96c <_free_r+0x4c>
 800c968:	42a3      	cmp	r3, r4
 800c96a:	d9fa      	bls.n	800c962 <_free_r+0x42>
 800c96c:	6811      	ldr	r1, [r2, #0]
 800c96e:	1850      	adds	r0, r2, r1
 800c970:	42a0      	cmp	r0, r4
 800c972:	d10b      	bne.n	800c98c <_free_r+0x6c>
 800c974:	6820      	ldr	r0, [r4, #0]
 800c976:	4401      	add	r1, r0
 800c978:	1850      	adds	r0, r2, r1
 800c97a:	4283      	cmp	r3, r0
 800c97c:	6011      	str	r1, [r2, #0]
 800c97e:	d1e0      	bne.n	800c942 <_free_r+0x22>
 800c980:	6818      	ldr	r0, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	4401      	add	r1, r0
 800c986:	6011      	str	r1, [r2, #0]
 800c988:	6053      	str	r3, [r2, #4]
 800c98a:	e7da      	b.n	800c942 <_free_r+0x22>
 800c98c:	d902      	bls.n	800c994 <_free_r+0x74>
 800c98e:	230c      	movs	r3, #12
 800c990:	602b      	str	r3, [r5, #0]
 800c992:	e7d6      	b.n	800c942 <_free_r+0x22>
 800c994:	6820      	ldr	r0, [r4, #0]
 800c996:	1821      	adds	r1, r4, r0
 800c998:	428b      	cmp	r3, r1
 800c99a:	bf01      	itttt	eq
 800c99c:	6819      	ldreq	r1, [r3, #0]
 800c99e:	685b      	ldreq	r3, [r3, #4]
 800c9a0:	1809      	addeq	r1, r1, r0
 800c9a2:	6021      	streq	r1, [r4, #0]
 800c9a4:	6063      	str	r3, [r4, #4]
 800c9a6:	6054      	str	r4, [r2, #4]
 800c9a8:	e7cb      	b.n	800c942 <_free_r+0x22>
 800c9aa:	bd38      	pop	{r3, r4, r5, pc}
 800c9ac:	20001538 	.word	0x20001538

0800c9b0 <sbrk_aligned>:
 800c9b0:	b570      	push	{r4, r5, r6, lr}
 800c9b2:	4e0e      	ldr	r6, [pc, #56]	; (800c9ec <sbrk_aligned+0x3c>)
 800c9b4:	460c      	mov	r4, r1
 800c9b6:	6831      	ldr	r1, [r6, #0]
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	b911      	cbnz	r1, 800c9c2 <sbrk_aligned+0x12>
 800c9bc:	f000 f8bc 	bl	800cb38 <_sbrk_r>
 800c9c0:	6030      	str	r0, [r6, #0]
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f000 f8b7 	bl	800cb38 <_sbrk_r>
 800c9ca:	1c43      	adds	r3, r0, #1
 800c9cc:	d00a      	beq.n	800c9e4 <sbrk_aligned+0x34>
 800c9ce:	1cc4      	adds	r4, r0, #3
 800c9d0:	f024 0403 	bic.w	r4, r4, #3
 800c9d4:	42a0      	cmp	r0, r4
 800c9d6:	d007      	beq.n	800c9e8 <sbrk_aligned+0x38>
 800c9d8:	1a21      	subs	r1, r4, r0
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f000 f8ac 	bl	800cb38 <_sbrk_r>
 800c9e0:	3001      	adds	r0, #1
 800c9e2:	d101      	bne.n	800c9e8 <sbrk_aligned+0x38>
 800c9e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c9e8:	4620      	mov	r0, r4
 800c9ea:	bd70      	pop	{r4, r5, r6, pc}
 800c9ec:	2000153c 	.word	0x2000153c

0800c9f0 <_malloc_r>:
 800c9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9f4:	1ccd      	adds	r5, r1, #3
 800c9f6:	f025 0503 	bic.w	r5, r5, #3
 800c9fa:	3508      	adds	r5, #8
 800c9fc:	2d0c      	cmp	r5, #12
 800c9fe:	bf38      	it	cc
 800ca00:	250c      	movcc	r5, #12
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	4607      	mov	r7, r0
 800ca06:	db01      	blt.n	800ca0c <_malloc_r+0x1c>
 800ca08:	42a9      	cmp	r1, r5
 800ca0a:	d905      	bls.n	800ca18 <_malloc_r+0x28>
 800ca0c:	230c      	movs	r3, #12
 800ca0e:	2600      	movs	r6, #0
 800ca10:	603b      	str	r3, [r7, #0]
 800ca12:	4630      	mov	r0, r6
 800ca14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca18:	4e2e      	ldr	r6, [pc, #184]	; (800cad4 <_malloc_r+0xe4>)
 800ca1a:	f000 f89d 	bl	800cb58 <__malloc_lock>
 800ca1e:	6833      	ldr	r3, [r6, #0]
 800ca20:	461c      	mov	r4, r3
 800ca22:	bb34      	cbnz	r4, 800ca72 <_malloc_r+0x82>
 800ca24:	4629      	mov	r1, r5
 800ca26:	4638      	mov	r0, r7
 800ca28:	f7ff ffc2 	bl	800c9b0 <sbrk_aligned>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	4604      	mov	r4, r0
 800ca30:	d14d      	bne.n	800cace <_malloc_r+0xde>
 800ca32:	6834      	ldr	r4, [r6, #0]
 800ca34:	4626      	mov	r6, r4
 800ca36:	2e00      	cmp	r6, #0
 800ca38:	d140      	bne.n	800cabc <_malloc_r+0xcc>
 800ca3a:	6823      	ldr	r3, [r4, #0]
 800ca3c:	4631      	mov	r1, r6
 800ca3e:	4638      	mov	r0, r7
 800ca40:	eb04 0803 	add.w	r8, r4, r3
 800ca44:	f000 f878 	bl	800cb38 <_sbrk_r>
 800ca48:	4580      	cmp	r8, r0
 800ca4a:	d13a      	bne.n	800cac2 <_malloc_r+0xd2>
 800ca4c:	6821      	ldr	r1, [r4, #0]
 800ca4e:	3503      	adds	r5, #3
 800ca50:	1a6d      	subs	r5, r5, r1
 800ca52:	f025 0503 	bic.w	r5, r5, #3
 800ca56:	3508      	adds	r5, #8
 800ca58:	2d0c      	cmp	r5, #12
 800ca5a:	bf38      	it	cc
 800ca5c:	250c      	movcc	r5, #12
 800ca5e:	4638      	mov	r0, r7
 800ca60:	4629      	mov	r1, r5
 800ca62:	f7ff ffa5 	bl	800c9b0 <sbrk_aligned>
 800ca66:	3001      	adds	r0, #1
 800ca68:	d02b      	beq.n	800cac2 <_malloc_r+0xd2>
 800ca6a:	6823      	ldr	r3, [r4, #0]
 800ca6c:	442b      	add	r3, r5
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	e00e      	b.n	800ca90 <_malloc_r+0xa0>
 800ca72:	6822      	ldr	r2, [r4, #0]
 800ca74:	1b52      	subs	r2, r2, r5
 800ca76:	d41e      	bmi.n	800cab6 <_malloc_r+0xc6>
 800ca78:	2a0b      	cmp	r2, #11
 800ca7a:	d916      	bls.n	800caaa <_malloc_r+0xba>
 800ca7c:	1961      	adds	r1, r4, r5
 800ca7e:	42a3      	cmp	r3, r4
 800ca80:	6025      	str	r5, [r4, #0]
 800ca82:	bf18      	it	ne
 800ca84:	6059      	strne	r1, [r3, #4]
 800ca86:	6863      	ldr	r3, [r4, #4]
 800ca88:	bf08      	it	eq
 800ca8a:	6031      	streq	r1, [r6, #0]
 800ca8c:	5162      	str	r2, [r4, r5]
 800ca8e:	604b      	str	r3, [r1, #4]
 800ca90:	4638      	mov	r0, r7
 800ca92:	f104 060b 	add.w	r6, r4, #11
 800ca96:	f000 f865 	bl	800cb64 <__malloc_unlock>
 800ca9a:	f026 0607 	bic.w	r6, r6, #7
 800ca9e:	1d23      	adds	r3, r4, #4
 800caa0:	1af2      	subs	r2, r6, r3
 800caa2:	d0b6      	beq.n	800ca12 <_malloc_r+0x22>
 800caa4:	1b9b      	subs	r3, r3, r6
 800caa6:	50a3      	str	r3, [r4, r2]
 800caa8:	e7b3      	b.n	800ca12 <_malloc_r+0x22>
 800caaa:	6862      	ldr	r2, [r4, #4]
 800caac:	42a3      	cmp	r3, r4
 800caae:	bf0c      	ite	eq
 800cab0:	6032      	streq	r2, [r6, #0]
 800cab2:	605a      	strne	r2, [r3, #4]
 800cab4:	e7ec      	b.n	800ca90 <_malloc_r+0xa0>
 800cab6:	4623      	mov	r3, r4
 800cab8:	6864      	ldr	r4, [r4, #4]
 800caba:	e7b2      	b.n	800ca22 <_malloc_r+0x32>
 800cabc:	4634      	mov	r4, r6
 800cabe:	6876      	ldr	r6, [r6, #4]
 800cac0:	e7b9      	b.n	800ca36 <_malloc_r+0x46>
 800cac2:	230c      	movs	r3, #12
 800cac4:	4638      	mov	r0, r7
 800cac6:	603b      	str	r3, [r7, #0]
 800cac8:	f000 f84c 	bl	800cb64 <__malloc_unlock>
 800cacc:	e7a1      	b.n	800ca12 <_malloc_r+0x22>
 800cace:	6025      	str	r5, [r4, #0]
 800cad0:	e7de      	b.n	800ca90 <_malloc_r+0xa0>
 800cad2:	bf00      	nop
 800cad4:	20001538 	.word	0x20001538

0800cad8 <_realloc_r>:
 800cad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cadc:	4680      	mov	r8, r0
 800cade:	4614      	mov	r4, r2
 800cae0:	460e      	mov	r6, r1
 800cae2:	b921      	cbnz	r1, 800caee <_realloc_r+0x16>
 800cae4:	4611      	mov	r1, r2
 800cae6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800caea:	f7ff bf81 	b.w	800c9f0 <_malloc_r>
 800caee:	b92a      	cbnz	r2, 800cafc <_realloc_r+0x24>
 800caf0:	f7ff ff16 	bl	800c920 <_free_r>
 800caf4:	4625      	mov	r5, r4
 800caf6:	4628      	mov	r0, r5
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	f000 f838 	bl	800cb70 <_malloc_usable_size_r>
 800cb00:	4284      	cmp	r4, r0
 800cb02:	4607      	mov	r7, r0
 800cb04:	d802      	bhi.n	800cb0c <_realloc_r+0x34>
 800cb06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb0a:	d812      	bhi.n	800cb32 <_realloc_r+0x5a>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4640      	mov	r0, r8
 800cb10:	f7ff ff6e 	bl	800c9f0 <_malloc_r>
 800cb14:	4605      	mov	r5, r0
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d0ed      	beq.n	800caf6 <_realloc_r+0x1e>
 800cb1a:	42bc      	cmp	r4, r7
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	4631      	mov	r1, r6
 800cb20:	bf28      	it	cs
 800cb22:	463a      	movcs	r2, r7
 800cb24:	f7ff fed4 	bl	800c8d0 <memcpy>
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4640      	mov	r0, r8
 800cb2c:	f7ff fef8 	bl	800c920 <_free_r>
 800cb30:	e7e1      	b.n	800caf6 <_realloc_r+0x1e>
 800cb32:	4635      	mov	r5, r6
 800cb34:	e7df      	b.n	800caf6 <_realloc_r+0x1e>
	...

0800cb38 <_sbrk_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	4d05      	ldr	r5, [pc, #20]	; (800cb54 <_sbrk_r+0x1c>)
 800cb3e:	4604      	mov	r4, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	f7f5 fb2a 	bl	800219c <_sbrk>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_sbrk_r+0x1a>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_sbrk_r+0x1a>
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	20001540 	.word	0x20001540

0800cb58 <__malloc_lock>:
 800cb58:	4801      	ldr	r0, [pc, #4]	; (800cb60 <__malloc_lock+0x8>)
 800cb5a:	f000 b811 	b.w	800cb80 <__retarget_lock_acquire_recursive>
 800cb5e:	bf00      	nop
 800cb60:	20001544 	.word	0x20001544

0800cb64 <__malloc_unlock>:
 800cb64:	4801      	ldr	r0, [pc, #4]	; (800cb6c <__malloc_unlock+0x8>)
 800cb66:	f000 b80c 	b.w	800cb82 <__retarget_lock_release_recursive>
 800cb6a:	bf00      	nop
 800cb6c:	20001544 	.word	0x20001544

0800cb70 <_malloc_usable_size_r>:
 800cb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb74:	1f18      	subs	r0, r3, #4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	bfbc      	itt	lt
 800cb7a:	580b      	ldrlt	r3, [r1, r0]
 800cb7c:	18c0      	addlt	r0, r0, r3
 800cb7e:	4770      	bx	lr

0800cb80 <__retarget_lock_acquire_recursive>:
 800cb80:	4770      	bx	lr

0800cb82 <__retarget_lock_release_recursive>:
 800cb82:	4770      	bx	lr

0800cb84 <_init>:
 800cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb86:	bf00      	nop
 800cb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8a:	bc08      	pop	{r3}
 800cb8c:	469e      	mov	lr, r3
 800cb8e:	4770      	bx	lr

0800cb90 <_fini>:
 800cb90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb92:	bf00      	nop
 800cb94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb96:	bc08      	pop	{r3}
 800cb98:	469e      	mov	lr, r3
 800cb9a:	4770      	bx	lr
