
closedloop_position_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c86c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  0800c980  0800c980  0001c980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc0c  0800cc0c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc0c  0800cc0c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc0c  0800cc0c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc10  0800cc10  0001cc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800cc14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001350  200001f4  0800ce08  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001544  0800ce08  00021544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e2  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003424  00000000  00000000  000346ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00037b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00038d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b05d  00000000  00000000  00039df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161c4  00000000  00000000  00054e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8bc  00000000  00000000  0006b011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fa8cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054dc  00000000  00000000  000fa920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c964 	.word	0x0800c964

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	0800c964 	.word	0x0800c964

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f001 fa62 	bl	8002674 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f003 fc70 	bl	8004aa0 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f003 ff4a 	bl	800505c <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f001 fa4d 	bl	8002674 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f001 fa43 	bl	8002674 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f003 fd8a 	bl	8004d18 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f003 ff28 	bl	800505c <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f001 fa2b 	bl	8002674 <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_electricalAngle>:
    m = HAL_GetTick();
    u = tms - SysTick->VAL;
  }
  return (m * 1000 + (u * 1000) / tms);
}
float _electricalAngle(float shaft_angle, int pole_pairs) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  return (shaft_angle * pole_pairs);
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f7ff fd28 	bl	8000c9c <__aeabi_i2f>
 800124c:	4603      	mov	r3, r0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd77 	bl	8000d44 <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <_normalizeAngle>:
float _normalizeAngle(float angle){
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_f2d>
 800126e:	a316      	add	r3, pc, #88	; (adr r3, 80012c8 <_normalizeAngle+0x68>)
 8001270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001274:	f009 fde0 	bl	800ae38 <fmod>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fc02 	bl	8000a88 <__aeabi_d2f>
 8001284:	4603      	mov	r3, r0
 8001286:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8001288:	f04f 0100 	mov.w	r1, #0
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff ff0b 	bl	80010a8 <__aeabi_fcmpge>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <_normalizeAngle+0x3c>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	e00e      	b.n	80012ba <_normalizeAngle+0x5a>
 800129c:	68f8      	ldr	r0, [r7, #12]
 800129e:	f7ff f8c3 	bl	8000428 <__aeabi_f2d>
 80012a2:	a309      	add	r3, pc, #36	; (adr r3, 80012c8 <_normalizeAngle+0x68>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7fe ff60 	bl	800016c <__adddf3>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbe8 	bl	8000a88 <__aeabi_d2f>
 80012b8:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	54442d18 	.word	0x54442d18
 80012cc:	401921fb 	.word	0x401921fb

080012d0 <setPwm>:

void setPwm(float Ua, float Ub, float Uc) {
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 80012dc:	f04f 0100 	mov.w	r1, #0
 80012e0:	68f8      	ldr	r0, [r7, #12]
 80012e2:	f7ff fecd 	bl	8001080 <__aeabi_fcmplt>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <setPwm+0x22>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e00c      	b.n	800130c <setPwm+0x3c>
 80012f2:	4b88      	ldr	r3, [pc, #544]	; (8001514 <setPwm+0x244>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4619      	mov	r1, r3
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f7ff fedf 	bl	80010bc <__aeabi_fcmpgt>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d002      	beq.n	800130a <setPwm+0x3a>
 8001304:	4b83      	ldr	r3, [pc, #524]	; (8001514 <setPwm+0x244>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	e000      	b.n	800130c <setPwm+0x3c>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800130e:	f04f 0100 	mov.w	r1, #0
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f7ff feb4 	bl	8001080 <__aeabi_fcmplt>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <setPwm+0x54>
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	e00c      	b.n	800133e <setPwm+0x6e>
 8001324:	4b7b      	ldr	r3, [pc, #492]	; (8001514 <setPwm+0x244>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4619      	mov	r1, r3
 800132a:	68b8      	ldr	r0, [r7, #8]
 800132c:	f7ff fec6 	bl	80010bc <__aeabi_fcmpgt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d002      	beq.n	800133c <setPwm+0x6c>
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <setPwm+0x244>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	e000      	b.n	800133e <setPwm+0x6e>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8001340:	f04f 0100 	mov.w	r1, #0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f7ff fe9b 	bl	8001080 <__aeabi_fcmplt>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d002      	beq.n	8001356 <setPwm+0x86>
 8001350:	f04f 0300 	mov.w	r3, #0
 8001354:	e00c      	b.n	8001370 <setPwm+0xa0>
 8001356:	4b6f      	ldr	r3, [pc, #444]	; (8001514 <setPwm+0x244>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fead 	bl	80010bc <__aeabi_fcmpgt>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <setPwm+0x9e>
 8001368:	4b6a      	ldr	r3, [pc, #424]	; (8001514 <setPwm+0x244>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	e000      	b.n	8001370 <setPwm+0xa0>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8001372:	4b69      	ldr	r3, [pc, #420]	; (8001518 <setPwm+0x248>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4619      	mov	r1, r3
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f7ff fd97 	bl	8000eac <__aeabi_fdiv>
 800137e:	4603      	mov	r3, r0
 8001380:	f04f 0100 	mov.w	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe7b 	bl	8001080 <__aeabi_fcmplt>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <setPwm+0xc6>
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	e018      	b.n	80013c8 <setPwm+0xf8>
 8001396:	4b60      	ldr	r3, [pc, #384]	; (8001518 <setPwm+0x248>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4619      	mov	r1, r3
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff fd85 	bl	8000eac <__aeabi_fdiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fe87 	bl	80010bc <__aeabi_fcmpgt>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <setPwm+0xea>
 80013b4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80013b8:	e006      	b.n	80013c8 <setPwm+0xf8>
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <setPwm+0x248>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4619      	mov	r1, r3
 80013c0:	68f8      	ldr	r0, [r7, #12]
 80013c2:	f7ff fd73 	bl	8000eac <__aeabi_fdiv>
 80013c6:	4603      	mov	r3, r0
 80013c8:	4a54      	ldr	r2, [pc, #336]	; (800151c <setPwm+0x24c>)
 80013ca:	6013      	str	r3, [r2, #0]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 80013cc:	4b52      	ldr	r3, [pc, #328]	; (8001518 <setPwm+0x248>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	f7ff fd6a 	bl	8000eac <__aeabi_fdiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	f04f 0100 	mov.w	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fe4e 	bl	8001080 <__aeabi_fcmplt>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d002      	beq.n	80013f0 <setPwm+0x120>
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	e018      	b.n	8001422 <setPwm+0x152>
 80013f0:	4b49      	ldr	r3, [pc, #292]	; (8001518 <setPwm+0x248>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7ff fd58 	bl	8000eac <__aeabi_fdiv>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fe5a 	bl	80010bc <__aeabi_fcmpgt>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <setPwm+0x144>
 800140e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001412:	e006      	b.n	8001422 <setPwm+0x152>
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <setPwm+0x248>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4619      	mov	r1, r3
 800141a:	68b8      	ldr	r0, [r7, #8]
 800141c:	f7ff fd46 	bl	8000eac <__aeabi_fdiv>
 8001420:	4603      	mov	r3, r0
 8001422:	4a3f      	ldr	r2, [pc, #252]	; (8001520 <setPwm+0x250>)
 8001424:	6013      	str	r3, [r2, #0]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <setPwm+0x248>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff fd3d 	bl	8000eac <__aeabi_fdiv>
 8001432:	4603      	mov	r3, r0
 8001434:	f04f 0100 	mov.w	r1, #0
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fe21 	bl	8001080 <__aeabi_fcmplt>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <setPwm+0x17a>
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e018      	b.n	800147c <setPwm+0x1ac>
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <setPwm+0x248>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fd2b 	bl	8000eac <__aeabi_fdiv>
 8001456:	4603      	mov	r3, r0
 8001458:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe2d 	bl	80010bc <__aeabi_fcmpgt>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <setPwm+0x19e>
 8001468:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800146c:	e006      	b.n	800147c <setPwm+0x1ac>
 800146e:	4b2a      	ldr	r3, [pc, #168]	; (8001518 <setPwm+0x248>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4619      	mov	r1, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fd19 	bl	8000eac <__aeabi_fdiv>
 800147a:	4603      	mov	r3, r0
 800147c:	4a29      	ldr	r2, [pc, #164]	; (8001524 <setPwm+0x254>)
 800147e:	6013      	str	r3, [r2, #0]

	//写入PWM到PWM 0 1 2 通道
	TIM1->CCR1 = (uint32_t) roundf(dc_a*period);
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <setPwm+0x258>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fc09 	bl	8000c9c <__aeabi_i2f>
 800148a:	4602      	mov	r2, r0
 800148c:	4b23      	ldr	r3, [pc, #140]	; (800151c <setPwm+0x24c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff fc56 	bl	8000d44 <__aeabi_fmul>
 8001498:	4603      	mov	r3, r0
 800149a:	4618      	mov	r0, r3
 800149c:	f009 fca6 	bl	800adec <roundf>
 80014a0:	4603      	mov	r3, r0
 80014a2:	4c22      	ldr	r4, [pc, #136]	; (800152c <setPwm+0x25c>)
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fe13 	bl	80010d0 <__aeabi_f2uiz>
 80014aa:	4603      	mov	r3, r0
 80014ac:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) roundf(dc_b*period);
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <setPwm+0x258>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fbf2 	bl	8000c9c <__aeabi_i2f>
 80014b8:	4602      	mov	r2, r0
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <setPwm+0x250>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f7ff fc3f 	bl	8000d44 <__aeabi_fmul>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f009 fc8f 	bl	800adec <roundf>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4c16      	ldr	r4, [pc, #88]	; (800152c <setPwm+0x25c>)
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fdfc 	bl	80010d0 <__aeabi_f2uiz>
 80014d8:	4603      	mov	r3, r0
 80014da:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) roundf(dc_c*period);
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <setPwm+0x258>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fbdb 	bl	8000c9c <__aeabi_i2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <setPwm+0x254>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4619      	mov	r1, r3
 80014ee:	4610      	mov	r0, r2
 80014f0:	f7ff fc28 	bl	8000d44 <__aeabi_fmul>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 fc78 	bl	800adec <roundf>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4c0b      	ldr	r4, [pc, #44]	; (800152c <setPwm+0x25c>)
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fde5 	bl	80010d0 <__aeabi_f2uiz>
 8001506:	4603      	mov	r3, r0
 8001508:	63e3      	str	r3, [r4, #60]	; 0x3c

}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004
 800151c:	20000344 	.word	0x20000344
 8001520:	20000348 	.word	0x20000348
 8001524:	2000034c 	.word	0x2000034c
 8001528:	20000008 	.word	0x20000008
 800152c:	40012c00 	.word	0x40012c00

08001530 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el) {
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 800153c:	4b76      	ldr	r3, [pc, #472]	; (8001718 <setPhaseVoltage+0x1e8>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff faf6 	bl	8000b34 <__addsf3>
 8001548:	4603      	mov	r3, r0
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fe88 	bl	8001260 <_normalizeAngle>
 8001550:	6078      	str	r0, [r7, #4]
  // 帕克逆变换
  Ualpha =  -Uq*sin(angle_el);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe ff65 	bl	8000428 <__aeabi_f2d>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7fe ff60 	bl	8000428 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f009 fbf6 	bl	800ad60 <sin>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4620      	mov	r0, r4
 800157a:	4629      	mov	r1, r5
 800157c:	f7fe ffac 	bl	80004d8 <__aeabi_dmul>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7ff fa7e 	bl	8000a88 <__aeabi_d2f>
 800158c:	4603      	mov	r3, r0
 800158e:	4a63      	ldr	r2, [pc, #396]	; (800171c <setPhaseVoltage+0x1ec>)
 8001590:	6013      	str	r3, [r2, #0]
  Ubeta =   Uq*cos(angle_el);
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f7fe ff48 	bl	8000428 <__aeabi_f2d>
 8001598:	4604      	mov	r4, r0
 800159a:	460d      	mov	r5, r1
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7fe ff43 	bl	8000428 <__aeabi_f2d>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f009 fb93 	bl	800acd4 <cos>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4620      	mov	r0, r4
 80015b4:	4629      	mov	r1, r5
 80015b6:	f7fe ff8f 	bl	80004d8 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f7ff fa61 	bl	8000a88 <__aeabi_d2f>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a55      	ldr	r2, [pc, #340]	; (8001720 <setPhaseVoltage+0x1f0>)
 80015ca:	6013      	str	r3, [r2, #0]

  // 克拉克逆变换
  Ua = Ualpha + voltage_power_supply/2;
 80015cc:	4b55      	ldr	r3, [pc, #340]	; (8001724 <setPhaseVoltage+0x1f4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fc69 	bl	8000eac <__aeabi_fdiv>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <setPhaseVoltage+0x1ec>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f7ff faa5 	bl	8000b34 <__addsf3>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b4e      	ldr	r3, [pc, #312]	; (8001728 <setPhaseVoltage+0x1f8>)
 80015f0:	601a      	str	r2, [r3, #0]
  Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 80015f2:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <setPhaseVoltage+0x1f0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff16 	bl	8000428 <__aeabi_f2d>
 80015fc:	a344      	add	r3, pc, #272	; (adr r3, 8001710 <setPhaseVoltage+0x1e0>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe ff69 	bl	80004d8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4614      	mov	r4, r2
 800160c:	461d      	mov	r5, r3
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <setPhaseVoltage+0x1ec>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff08 	bl	8000428 <__aeabi_f2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7fe fda2 	bl	8000168 <__aeabi_dsub>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001634:	f7ff f87a 	bl	800072c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	4614      	mov	r4, r2
 800163e:	461d      	mov	r5, r3
 8001640:	4b38      	ldr	r3, [pc, #224]	; (8001724 <setPhaseVoltage+0x1f4>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fc2f 	bl	8000eac <__aeabi_fdiv>
 800164e:	4603      	mov	r3, r0
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fee9 	bl	8000428 <__aeabi_f2d>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fd85 	bl	800016c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa0d 	bl	8000a88 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	4a2e      	ldr	r2, [pc, #184]	; (800172c <setPhaseVoltage+0x1fc>)
 8001672:	6013      	str	r3, [r2, #0]
  Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <setPhaseVoltage+0x1ec>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fed3 	bl	8000428 <__aeabi_f2d>
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
 8001686:	4b26      	ldr	r3, [pc, #152]	; (8001720 <setPhaseVoltage+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe fecc 	bl	8000428 <__aeabi_f2d>
 8001690:	a31f      	add	r3, pc, #124	; (adr r3, 8001710 <setPhaseVoltage+0x1e0>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff1f 	bl	80004d8 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4620      	mov	r0, r4
 80016a0:	4629      	mov	r1, r5
 80016a2:	f7fe fd61 	bl	8000168 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b6:	f7ff f839 	bl	800072c <__aeabi_ddiv>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <setPhaseVoltage+0x1f4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fbee 	bl	8000eac <__aeabi_fdiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe fea8 	bl	8000428 <__aeabi_f2d>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4620      	mov	r0, r4
 80016de:	4629      	mov	r1, r5
 80016e0:	f7fe fd44 	bl	800016c <__adddf3>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff f9cc 	bl	8000a88 <__aeabi_d2f>
 80016f0:	4603      	mov	r3, r0
 80016f2:	4a0f      	ldr	r2, [pc, #60]	; (8001730 <setPhaseVoltage+0x200>)
 80016f4:	6013      	str	r3, [r2, #0]
  setPwm(Ua,Ub,Uc);
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <setPhaseVoltage+0x1f8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a0c      	ldr	r2, [pc, #48]	; (800172c <setPhaseVoltage+0x1fc>)
 80016fc:	6811      	ldr	r1, [r2, #0]
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <setPhaseVoltage+0x200>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fde4 	bl	80012d0 <setPwm>
}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bdb0      	pop	{r4, r5, r7, pc}
 8001710:	e8584caa 	.word	0xe8584caa
 8001714:	3ffbb67a 	.word	0x3ffbb67a
 8001718:	2000032c 	.word	0x2000032c
 800171c:	20000330 	.word	0x20000330
 8001720:	20000334 	.word	0x20000334
 8001724:	20000004 	.word	0x20000004
 8001728:	20000338 	.word	0x20000338
 800172c:	2000033c 	.word	0x2000033c
 8001730:	20000340 	.word	0x20000340

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001738:	f000 fca8 	bl	800208c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173c:	f000 f826 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001740:	f000 f9ba 	bl	8001ab8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001744:	f000 f87c 	bl	8001840 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001748:	f008 fe28 	bl	800a39c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800174c:	f000 f8b0 	bl	80018b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001750:	f000 f966 	bl	8001a20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 8001754:	2201      	movs	r2, #1
 8001756:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175a:	4809      	ldr	r0, [pc, #36]	; (8001780 <main+0x4c>)
 800175c:	f000 ff8a 	bl	8002674 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001760:	2100      	movs	r1, #0
 8001762:	4808      	ldr	r0, [pc, #32]	; (8001784 <main+0x50>)
 8001764:	f003 fe28 	bl	80053b8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001768:	2104      	movs	r1, #4
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <main+0x50>)
 800176c:	f003 fe24 	bl	80053b8 <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001770:	2108      	movs	r1, #8
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <main+0x50>)
 8001774:	f003 fe20 	bl	80053b8 <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start_IT(&htim2);
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <main+0x54>)
 800177a:	f003 fd73 	bl	8005264 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800177e:	e7fe      	b.n	800177e <main+0x4a>
 8001780:	40010c00 	.word	0x40010c00
 8001784:	20000268 	.word	0x20000268
 8001788:	200002b0 	.word	0x200002b0

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001796:	2228      	movs	r2, #40	; 0x28
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f00a fc60 	bl	800c060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017bc:	2301      	movs	r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017ca:	2301      	movs	r3, #1
 80017cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ce:	2302      	movs	r3, #2
 80017d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017d8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 fc3a 	bl	800405c <HAL_RCC_OscConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80017ee:	f000 fad1 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f2:	230f      	movs	r3, #15
 80017f4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001802:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f002 fea6 	bl	8004560 <HAL_RCC_ClockConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800181a:	f000 fabb 	bl	8001d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800181e:	2310      	movs	r3, #16
 8001820:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001826:	1d3b      	adds	r3, r7, #4
 8001828:	4618      	mov	r0, r3
 800182a:	f002 ffff 	bl	800482c <HAL_RCCEx_PeriphCLKConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001834:	f000 faae 	bl	8001d94 <Error_Handler>
  }
}
 8001838:	bf00      	nop
 800183a:	3750      	adds	r7, #80	; 0x50
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001844:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001846:	4a19      	ldr	r2, [pc, #100]	; (80018ac <MX_SPI1_Init+0x6c>)
 8001848:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800184a:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_SPI1_Init+0x68>)
 800184c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001850:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001852:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001858:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_SPI1_Init+0x68>)
 800185a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800185e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001866:	4b10      	ldr	r3, [pc, #64]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_SPI1_Init+0x68>)
 800186e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001872:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001876:	2220      	movs	r2, #32
 8001878:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_SPI1_Init+0x68>)
 800187c:	2200      	movs	r2, #0
 800187e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001888:	2200      	movs	r2, #0
 800188a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SPI1_Init+0x68>)
 800188e:	220a      	movs	r2, #10
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_SPI1_Init+0x68>)
 8001894:	f003 f880 	bl	8004998 <HAL_SPI_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800189e:	f000 fa79 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000210 	.word	0x20000210
 80018ac:	40013000 	.word	0x40013000

080018b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b096      	sub	sp, #88	; 0x58
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
 80018dc:	611a      	str	r2, [r3, #16]
 80018de:	615a      	str	r2, [r3, #20]
 80018e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2220      	movs	r2, #32
 80018e6:	2100      	movs	r1, #0
 80018e8:	4618      	mov	r0, r3
 80018ea:	f00a fbb9 	bl	800c060 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018ee:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <MX_TIM1_Init+0x168>)
 80018f0:	4a4a      	ldr	r2, [pc, #296]	; (8001a1c <MX_TIM1_Init+0x16c>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018f4:	4b48      	ldr	r3, [pc, #288]	; (8001a18 <MX_TIM1_Init+0x168>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <MX_TIM1_Init+0x168>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001900:	4b45      	ldr	r3, [pc, #276]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001902:	f640 125f 	movw	r2, #2399	; 0x95f
 8001906:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001908:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <MX_TIM1_Init+0x168>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001910:	2200      	movs	r2, #0
 8001912:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001916:	2200      	movs	r2, #0
 8001918:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800191a:	483f      	ldr	r0, [pc, #252]	; (8001a18 <MX_TIM1_Init+0x168>)
 800191c:	f003 fc52 	bl	80051c4 <HAL_TIM_Base_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001926:	f000 fa35 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800192a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800192e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001930:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001934:	4619      	mov	r1, r3
 8001936:	4838      	ldr	r0, [pc, #224]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001938:	f003 ffa6 	bl	8005888 <HAL_TIM_ConfigClockSource>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001942:	f000 fa27 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001946:	4834      	ldr	r0, [pc, #208]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001948:	f003 fcde 	bl	8005308 <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001952:	f000 fa1f 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800195e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001962:	4619      	mov	r1, r3
 8001964:	482c      	ldr	r0, [pc, #176]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001966:	f004 fb1b 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001970:	f000 fa10 	bl	8001d94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	; 0x60
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001980:	2300      	movs	r3, #0
 8001982:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800198c:	2300      	movs	r3, #0
 800198e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001994:	2200      	movs	r2, #0
 8001996:	4619      	mov	r1, r3
 8001998:	481f      	ldr	r0, [pc, #124]	; (8001a18 <MX_TIM1_Init+0x168>)
 800199a:	f003 feb7 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019a4:	f000 f9f6 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ac:	2204      	movs	r2, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4819      	ldr	r0, [pc, #100]	; (8001a18 <MX_TIM1_Init+0x168>)
 80019b2:	f003 feab 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019bc:	f000 f9ea 	bl	8001d94 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c4:	2208      	movs	r2, #8
 80019c6:	4619      	mov	r1, r3
 80019c8:	4813      	ldr	r0, [pc, #76]	; (8001a18 <MX_TIM1_Init+0x168>)
 80019ca:	f003 fe9f 	bl	800570c <HAL_TIM_PWM_ConfigChannel>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80019d4:	f000 f9de 	bl	8001d94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	4619      	mov	r1, r3
 80019fa:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM1_Init+0x168>)
 80019fc:	f004 fb2e 	bl	800605c <HAL_TIMEx_ConfigBreakDeadTime>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a06:	f000 f9c5 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a0a:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM1_Init+0x168>)
 8001a0c:	f000 fa6c 	bl	8001ee8 <HAL_TIM_MspPostInit>

}
 8001a10:	bf00      	nop
 8001a12:	3758      	adds	r7, #88	; 0x58
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000268 	.word	0x20000268
 8001a1c:	40012c00 	.word	0x40012c00

08001a20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0308 	add.w	r3, r7, #8
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	463b      	mov	r3, r7
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3c:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a46:	2259      	movs	r2, #89	; 0x59
 8001a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a52:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a64:	4813      	ldr	r0, [pc, #76]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a66:	f003 fbad 	bl	80051c4 <HAL_TIM_Base_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001a70:	f000 f990 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a82:	f003 ff01 	bl	8005888 <HAL_TIM_ConfigClockSource>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001a8c:	f000 f982 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_TIM2_Init+0x94>)
 8001a9e:	f004 fa7f 	bl	8005fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001aa8:	f000 f974 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aac:	bf00      	nop
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	200002b0 	.word	0x200002b0

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b088      	sub	sp, #32
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a37      	ldr	r2, [pc, #220]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001ad2:	f043 0310 	orr.w	r3, r3, #16
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ae4:	4b32      	ldr	r3, [pc, #200]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001aea:	f043 0320 	orr.w	r3, r3, #32
 8001aee:	6193      	str	r3, [r2, #24]
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 0320 	and.w	r3, r3, #32
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001b02:	f043 0304 	orr.w	r3, r3, #4
 8001b06:	6193      	str	r3, [r2, #24]
 8001b08:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	f003 0304 	and.w	r3, r3, #4
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b14:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6193      	str	r3, [r2, #24]
 8001b20:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <MX_GPIO_Init+0xf8>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	603b      	str	r3, [r7, #0]
 8001b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b32:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <MX_GPIO_Init+0xfc>)
 8001b34:	f000 fd9e 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	481e      	ldr	r0, [pc, #120]	; (8001bb8 <MX_GPIO_Init+0x100>)
 8001b3e:	f000 fd99 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001b42:	2200      	movs	r2, #0
 8001b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b48:	481b      	ldr	r0, [pc, #108]	; (8001bb8 <MX_GPIO_Init+0x100>)
 8001b4a:	f000 fd93 	bl	8002674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	4619      	mov	r1, r3
 8001b66:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <MX_GPIO_Init+0xfc>)
 8001b68:	f000 fc00 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0310 	add.w	r3, r7, #16
 8001b80:	4619      	mov	r1, r3
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_GPIO_Init+0x100>)
 8001b84:	f000 fbf2 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2302      	movs	r3, #2
 8001b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_GPIO_Init+0x100>)
 8001ba2:	f000 fbe3 	bl	800236c <HAL_GPIO_Init>

}
 8001ba6:	bf00      	nop
 8001ba8:	3720      	adds	r7, #32
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40011000 	.word	0x40011000
 8001bb8:	40010c00 	.word	0x40010c00
 8001bbc:	00000000 	.word	0x00000000

08001bc0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b085      	sub	sp, #20
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a63      	ldr	r2, [pc, #396]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	f040 80ba 	bne.w	8001d46 <HAL_TIM_PeriodElapsedCallback+0x186>
  {



    index1+=1;
 8001bd2:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a60      	ldr	r2, [pc, #384]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001bda:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 8001bdc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001be0:	2201      	movs	r2, #1
 8001be2:	495f      	ldr	r1, [pc, #380]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001be4:	485f      	ldr	r0, [pc, #380]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001be6:	f7ff fab7 	bl	8001158 <read>
 8001bea:	4603      	mov	r3, r0
 8001bec:	81fb      	strh	r3, [r7, #14]
    float angle_now=read_raw/MAX_ANGLE_VALUE*360;
 8001bee:	89fb      	ldrh	r3, [r7, #14]
 8001bf0:	0b5b      	lsrs	r3, r3, #13
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f84c 	bl	8000c9c <__aeabi_i2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	60bb      	str	r3, [r7, #8]
    setPhaseVoltage(_constrain(Kp*(motor_target-angle_now)*180/M_PI,-6,6),0,_electricalAngle(angle_now,pole_pairs));
 8001c08:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe ff8e 	bl	8000b30 <__aeabi_fsub>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461a      	mov	r2, r3
 8001c18:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4610      	mov	r0, r2
 8001c20:	f7ff f890 	bl	8000d44 <__aeabi_fmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	4952      	ldr	r1, [pc, #328]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff f88b 	bl	8000d44 <__aeabi_fmul>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fbf9 	bl	8000428 <__aeabi_f2d>
 8001c36:	a346      	add	r3, pc, #280	; (adr r3, 8001d50 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe fd76 	bl	800072c <__aeabi_ddiv>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001c4e:	f7fe feb5 	bl	80009bc <__aeabi_dcmplt>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_TIM_PeriodElapsedCallback+0x9c>
 8001c58:	4c47      	ldr	r4, [pc, #284]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001c5a:	e04c      	b.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x136>
 8001c5c:	4b42      	ldr	r3, [pc, #264]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe ff64 	bl	8000b30 <__aeabi_fsub>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b3f      	ldr	r3, [pc, #252]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff f866 	bl	8000d44 <__aeabi_fmul>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	493d      	ldr	r1, [pc, #244]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff f861 	bl	8000d44 <__aeabi_fmul>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fbcf 	bl	8000428 <__aeabi_f2d>
 8001c8a:	a331      	add	r3, pc, #196	; (adr r3, 8001d50 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c90:	f7fe fd4c 	bl	800072c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001ca2:	f7fe fea9 	bl	80009f8 <__aeabi_dcmpgt>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8001cac:	4c34      	ldr	r4, [pc, #208]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001cae:	e022      	b.n	8001cf6 <HAL_TIM_PeriodElapsedCallback+0x136>
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68b9      	ldr	r1, [r7, #8]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe ff3a 	bl	8000b30 <__aeabi_fsub>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b2a      	ldr	r3, [pc, #168]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7ff f83c 	bl	8000d44 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4928      	ldr	r1, [pc, #160]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f837 	bl	8000d44 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fba5 	bl	8000428 <__aeabi_f2d>
 8001cde:	a31c      	add	r3, pc, #112	; (adr r3, 8001d50 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce4:	f7fe fd22 	bl	800072c <__aeabi_ddiv>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f7fe feca 	bl	8000a88 <__aeabi_d2f>
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	68b8      	ldr	r0, [r7, #8]
 8001cfe:	f7ff fa9d 	bl	800123c <_electricalAngle>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f04f 0100 	mov.w	r1, #0
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff fc10 	bl	8001530 <setPhaseVoltage>
//    sprintf(data, "open loop control \n");
    sprintf(data, "angle: %u \n", read_raw);
 8001d10:	89fb      	ldrh	r3, [r7, #14]
 8001d12:	461a      	mov	r2, r3
 8001d14:	491c      	ldr	r1, [pc, #112]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001d16:	481d      	ldr	r0, [pc, #116]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d18:	f00a f9aa 	bl	800c070 <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001d1c:	481b      	ldr	r0, [pc, #108]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d1e:	f7fe fa17 	bl	8000150 <strlen>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4619      	mov	r1, r3
 8001d28:	4818      	ldr	r0, [pc, #96]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001d2a:	f008 fbf5 	bl	800a518 <CDC_Transmit_FS>
    if (index1 == 200){
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2bc8      	cmp	r3, #200	; 0xc8
 8001d34:	d107      	bne.n	8001d46 <HAL_TIM_PeriodElapsedCallback+0x186>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d3a:	4815      	ldr	r0, [pc, #84]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001d3c:	f000 fcb2 	bl	80026a4 <HAL_GPIO_TogglePin>

    	index1=0;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd90      	pop	{r4, r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	54442d18 	.word	0x54442d18
 8001d54:	400921fb 	.word	0x400921fb
 8001d58:	200002b0 	.word	0x200002b0
 8001d5c:	20000350 	.word	0x20000350
 8001d60:	40010c00 	.word	0x40010c00
 8001d64:	20000210 	.word	0x20000210
 8001d68:	20000354 	.word	0x20000354
 8001d6c:	20000010 	.word	0x20000010
 8001d70:	43340000 	.word	0x43340000
 8001d74:	c0180000 	.word	0xc0180000
 8001d78:	c0c00000 	.word	0xc0c00000
 8001d7c:	40180000 	.word	0x40180000
 8001d80:	40c00000 	.word	0x40c00000
 8001d84:	2000000c 	.word	0x2000000c
 8001d88:	0800c980 	.word	0x0800c980
 8001d8c:	200002f8 	.word	0x200002f8
 8001d90:	40011000 	.word	0x40011000

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>
	...

08001da0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_MspInit+0x40>)
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <HAL_MspInit+0x40>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6193      	str	r3, [r2, #24]
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <HAL_MspInit+0x40>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <HAL_MspInit+0x40>)
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <HAL_MspInit+0x40>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	61d3      	str	r3, [r2, #28]
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_MspInit+0x40>)
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <HAL_SPI_MspInit+0x88>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d12f      	bne.n	8001e64 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a19      	ldr	r2, [pc, #100]	; (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_SPI_MspInit+0x8c>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e34:	23a0      	movs	r3, #160	; 0xa0
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	480b      	ldr	r0, [pc, #44]	; (8001e74 <HAL_SPI_MspInit+0x90>)
 8001e48:	f000 fa90 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e4c:	2340      	movs	r3, #64	; 0x40
 8001e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_SPI_MspInit+0x90>)
 8001e60:	f000 fa84 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40013000 	.word	0x40013000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010800 	.word	0x40010800

08001e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_TIM_Base_MspInit+0x68>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10c      	bne.n	8001ea4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a15      	ldr	r2, [pc, #84]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ea2:	e018      	b.n	8001ed6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eac:	d113      	bne.n	8001ed6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eae:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	61d3      	str	r3, [r2, #28]
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_TIM_Base_MspInit+0x6c>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	201c      	movs	r0, #28
 8001ecc:	f000 fa17 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ed0:	201c      	movs	r0, #28
 8001ed2:	f000 fa30 	bl	8002336 <HAL_NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40012c00 	.word	0x40012c00
 8001ee4:	40021000 	.word	0x40021000

08001ee8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <HAL_TIM_MspPostInit+0x5c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d118      	bne.n	8001f3a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f08:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <HAL_TIM_MspPostInit+0x60>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <HAL_TIM_MspPostInit+0x60>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <HAL_TIM_MspPostInit+0x60>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001f20:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001f24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <HAL_TIM_MspPostInit+0x64>)
 8001f36:	f000 fa19 	bl	800236c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40012c00 	.word	0x40012c00
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010800 	.word	0x40010800

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f54:	e7fe      	b.n	8001f54 <NMI_Handler+0x4>

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bc80      	pop	{r7}
 8001f78:	4770      	bx	lr

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bc80      	pop	{r7}
 8001f84:	4770      	bx	lr

08001f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f96:	f000 f8bf 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001fa6:	f000 fcc7 	bl	8002938 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001028 	.word	0x20001028

08001fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM2_IRQHandler+0x10>)
 8001fba:	f003 fa9f 	bl	80054fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200002b0 	.word	0x200002b0

08001fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fd0:	4a14      	ldr	r2, [pc, #80]	; (8002024 <_sbrk+0x5c>)
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <_sbrk+0x60>)
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <_sbrk+0x64>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <_sbrk+0x64>)
 8001fe6:	4a12      	ldr	r2, [pc, #72]	; (8002030 <_sbrk+0x68>)
 8001fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d207      	bcs.n	8002008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ff8:	f00a f808 	bl	800c00c <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	220c      	movs	r2, #12
 8002000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002006:	e009      	b.n	800201c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <_sbrk+0x64>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800200e:	4b07      	ldr	r3, [pc, #28]	; (800202c <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <_sbrk+0x64>)
 8002018:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	20005000 	.word	0x20005000
 8002028:	00000400 	.word	0x00000400
 800202c:	20000358 	.word	0x20000358
 8002030:	20001548 	.word	0x20001548

08002034 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002042:	490d      	ldr	r1, [pc, #52]	; (8002078 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002044:	4a0d      	ldr	r2, [pc, #52]	; (800207c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002048:	e002      	b.n	8002050 <LoopCopyDataInit>

0800204a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800204c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204e:	3304      	adds	r3, #4

08002050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002054:	d3f9      	bcc.n	800204a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002056:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002058:	4c0a      	ldr	r4, [pc, #40]	; (8002084 <LoopFillZerobss+0x22>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800205c:	e001      	b.n	8002062 <LoopFillZerobss>

0800205e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002060:	3204      	adds	r2, #4

08002062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002064:	d3fb      	bcc.n	800205e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002066:	f7ff ffe5 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800206a:	f009 ffd5 	bl	800c018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800206e:	f7ff fb61 	bl	8001734 <main>
  bx lr
 8002072:	4770      	bx	lr
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800207c:	0800cc14 	.word	0x0800cc14
  ldr r2, =_sbss
 8002080:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002084:	20001544 	.word	0x20001544

08002088 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC1_2_IRQHandler>
	...

0800208c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x28>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x28>)
 8002096:	f043 0310 	orr.w	r3, r3, #16
 800209a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f923 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7ff fe7a 	bl	8001da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40022000 	.word	0x40022000

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f93b 	bl	8002352 <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f4:	f000 f903 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000014 	.word	0x20000014
 8002110:	2000001c 	.word	0x2000001c
 8002114:	20000018 	.word	0x20000018

08002118 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_IncTick+0x1c>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_IncTick+0x20>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a03      	ldr	r2, [pc, #12]	; (8002138 <HAL_IncTick+0x20>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr
 8002134:	2000001c 	.word	0x2000001c
 8002138:	2000035c 	.word	0x2000035c

0800213c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return uwTick;
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <HAL_GetTick+0x10>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr
 800214c:	2000035c 	.word	0x2000035c

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	db0b      	blt.n	80021de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4906      	ldr	r1, [pc, #24]	; (80021e8 <__NVIC_EnableIRQ+0x34>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2001      	movs	r0, #1
 80021d6:	fa00 f202 	lsl.w	r2, r0, r2
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022c8:	f7ff ff90 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff2d 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff42 	bl	8002198 <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff90 	bl	8002240 <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5f 	bl	80021ec <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ff35 	bl	80021b4 <__NVIC_EnableIRQ>
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffa2 	bl	80022a4 <SysTick_Config>
 8002360:	4603      	mov	r3, r0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
	...

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b08b      	sub	sp, #44	; 0x2c
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800237e:	e169      	b.n	8002654 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002380:	2201      	movs	r2, #1
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69fa      	ldr	r2, [r7, #28]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	429a      	cmp	r2, r3
 800239a:	f040 8158 	bne.w	800264e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4a9a      	ldr	r2, [pc, #616]	; (800260c <HAL_GPIO_Init+0x2a0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d05e      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023a8:	4a98      	ldr	r2, [pc, #608]	; (800260c <HAL_GPIO_Init+0x2a0>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d875      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023ae:	4a98      	ldr	r2, [pc, #608]	; (8002610 <HAL_GPIO_Init+0x2a4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d058      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023b4:	4a96      	ldr	r2, [pc, #600]	; (8002610 <HAL_GPIO_Init+0x2a4>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d86f      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023ba:	4a96      	ldr	r2, [pc, #600]	; (8002614 <HAL_GPIO_Init+0x2a8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d052      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023c0:	4a94      	ldr	r2, [pc, #592]	; (8002614 <HAL_GPIO_Init+0x2a8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d869      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023c6:	4a94      	ldr	r2, [pc, #592]	; (8002618 <HAL_GPIO_Init+0x2ac>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d04c      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023cc:	4a92      	ldr	r2, [pc, #584]	; (8002618 <HAL_GPIO_Init+0x2ac>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d863      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023d2:	4a92      	ldr	r2, [pc, #584]	; (800261c <HAL_GPIO_Init+0x2b0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d046      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
 80023d8:	4a90      	ldr	r2, [pc, #576]	; (800261c <HAL_GPIO_Init+0x2b0>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d85d      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d82a      	bhi.n	8002438 <HAL_GPIO_Init+0xcc>
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d859      	bhi.n	800249a <HAL_GPIO_Init+0x12e>
 80023e6:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_GPIO_Init+0x80>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	08002467 	.word	0x08002467
 80023f0:	08002441 	.word	0x08002441
 80023f4:	08002453 	.word	0x08002453
 80023f8:	08002495 	.word	0x08002495
 80023fc:	0800249b 	.word	0x0800249b
 8002400:	0800249b 	.word	0x0800249b
 8002404:	0800249b 	.word	0x0800249b
 8002408:	0800249b 	.word	0x0800249b
 800240c:	0800249b 	.word	0x0800249b
 8002410:	0800249b 	.word	0x0800249b
 8002414:	0800249b 	.word	0x0800249b
 8002418:	0800249b 	.word	0x0800249b
 800241c:	0800249b 	.word	0x0800249b
 8002420:	0800249b 	.word	0x0800249b
 8002424:	0800249b 	.word	0x0800249b
 8002428:	0800249b 	.word	0x0800249b
 800242c:	0800249b 	.word	0x0800249b
 8002430:	08002449 	.word	0x08002449
 8002434:	0800245d 	.word	0x0800245d
 8002438:	4a79      	ldr	r2, [pc, #484]	; (8002620 <HAL_GPIO_Init+0x2b4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800243e:	e02c      	b.n	800249a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	623b      	str	r3, [r7, #32]
          break;
 8002446:	e029      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	3304      	adds	r3, #4
 800244e:	623b      	str	r3, [r7, #32]
          break;
 8002450:	e024      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	3308      	adds	r3, #8
 8002458:	623b      	str	r3, [r7, #32]
          break;
 800245a:	e01f      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	330c      	adds	r3, #12
 8002462:	623b      	str	r3, [r7, #32]
          break;
 8002464:	e01a      	b.n	800249c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800246e:	2304      	movs	r3, #4
 8002470:	623b      	str	r3, [r7, #32]
          break;
 8002472:	e013      	b.n	800249c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d105      	bne.n	8002488 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800247c:	2308      	movs	r3, #8
 800247e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69fa      	ldr	r2, [r7, #28]
 8002484:	611a      	str	r2, [r3, #16]
          break;
 8002486:	e009      	b.n	800249c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002488:	2308      	movs	r3, #8
 800248a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	615a      	str	r2, [r3, #20]
          break;
 8002492:	e003      	b.n	800249c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002494:	2300      	movs	r3, #0
 8002496:	623b      	str	r3, [r7, #32]
          break;
 8002498:	e000      	b.n	800249c <HAL_GPIO_Init+0x130>
          break;
 800249a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2bff      	cmp	r3, #255	; 0xff
 80024a0:	d801      	bhi.n	80024a6 <HAL_GPIO_Init+0x13a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	e001      	b.n	80024aa <HAL_GPIO_Init+0x13e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3304      	adds	r3, #4
 80024aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2bff      	cmp	r3, #255	; 0xff
 80024b0:	d802      	bhi.n	80024b8 <HAL_GPIO_Init+0x14c>
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x152>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3b08      	subs	r3, #8
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	210f      	movs	r1, #15
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	fa01 f303 	lsl.w	r3, r1, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	401a      	ands	r2, r3
 80024d0:	6a39      	ldr	r1, [r7, #32]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	fa01 f303 	lsl.w	r3, r1, r3
 80024d8:	431a      	orrs	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80b1 	beq.w	800264e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024ec:	4b4d      	ldr	r3, [pc, #308]	; (8002624 <HAL_GPIO_Init+0x2b8>)
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4a4c      	ldr	r2, [pc, #304]	; (8002624 <HAL_GPIO_Init+0x2b8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6193      	str	r3, [r2, #24]
 80024f8:	4b4a      	ldr	r3, [pc, #296]	; (8002624 <HAL_GPIO_Init+0x2b8>)
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
 8002502:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002504:	4a48      	ldr	r2, [pc, #288]	; (8002628 <HAL_GPIO_Init+0x2bc>)
 8002506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002508:	089b      	lsrs	r3, r3, #2
 800250a:	3302      	adds	r3, #2
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4013      	ands	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a40      	ldr	r2, [pc, #256]	; (800262c <HAL_GPIO_Init+0x2c0>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d013      	beq.n	8002558 <HAL_GPIO_Init+0x1ec>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <HAL_GPIO_Init+0x2c4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00d      	beq.n	8002554 <HAL_GPIO_Init+0x1e8>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a3e      	ldr	r2, [pc, #248]	; (8002634 <HAL_GPIO_Init+0x2c8>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d007      	beq.n	8002550 <HAL_GPIO_Init+0x1e4>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a3d      	ldr	r2, [pc, #244]	; (8002638 <HAL_GPIO_Init+0x2cc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d101      	bne.n	800254c <HAL_GPIO_Init+0x1e0>
 8002548:	2303      	movs	r3, #3
 800254a:	e006      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 800254c:	2304      	movs	r3, #4
 800254e:	e004      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 8002550:	2302      	movs	r3, #2
 8002552:	e002      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <HAL_GPIO_Init+0x1ee>
 8002558:	2300      	movs	r3, #0
 800255a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255c:	f002 0203 	and.w	r2, r2, #3
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	4093      	lsls	r3, r2
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800256a:	492f      	ldr	r1, [pc, #188]	; (8002628 <HAL_GPIO_Init+0x2bc>)
 800256c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256e:	089b      	lsrs	r3, r3, #2
 8002570:	3302      	adds	r3, #2
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002584:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_GPIO_Init+0x2d0>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	492c      	ldr	r1, [pc, #176]	; (800263c <HAL_GPIO_Init+0x2d0>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	4313      	orrs	r3, r2
 800258e:	600b      	str	r3, [r1, #0]
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002592:	4b2a      	ldr	r3, [pc, #168]	; (800263c <HAL_GPIO_Init+0x2d0>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	43db      	mvns	r3, r3
 800259a:	4928      	ldr	r1, [pc, #160]	; (800263c <HAL_GPIO_Init+0x2d0>)
 800259c:	4013      	ands	r3, r2
 800259e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d006      	beq.n	80025ba <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025ac:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4922      	ldr	r1, [pc, #136]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	604b      	str	r3, [r1, #4]
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	491e      	ldr	r1, [pc, #120]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d006      	beq.n	80025e2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	4918      	ldr	r1, [pc, #96]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	4313      	orrs	r3, r2
 80025de:	608b      	str	r3, [r1, #8]
 80025e0:	e006      	b.n	80025f0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	4914      	ldr	r1, [pc, #80]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025ec:	4013      	ands	r3, r2
 80025ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d021      	beq.n	8002640 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_GPIO_Init+0x2d0>)
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_GPIO_Init+0x2d0>)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	60cb      	str	r3, [r1, #12]
 8002608:	e021      	b.n	800264e <HAL_GPIO_Init+0x2e2>
 800260a:	bf00      	nop
 800260c:	10320000 	.word	0x10320000
 8002610:	10310000 	.word	0x10310000
 8002614:	10220000 	.word	0x10220000
 8002618:	10210000 	.word	0x10210000
 800261c:	10120000 	.word	0x10120000
 8002620:	10110000 	.word	0x10110000
 8002624:	40021000 	.word	0x40021000
 8002628:	40010000 	.word	0x40010000
 800262c:	40010800 	.word	0x40010800
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40011000 	.word	0x40011000
 8002638:	40011400 	.word	0x40011400
 800263c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_GPIO_Init+0x304>)
 8002642:	68da      	ldr	r2, [r3, #12]
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	43db      	mvns	r3, r3
 8002648:	4909      	ldr	r1, [pc, #36]	; (8002670 <HAL_GPIO_Init+0x304>)
 800264a:	4013      	ands	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	3301      	adds	r3, #1
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	fa22 f303 	lsr.w	r3, r2, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	f47f ae8e 	bne.w	8002380 <HAL_GPIO_Init+0x14>
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	372c      	adds	r7, #44	; 0x2c
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	40010400 	.word	0x40010400

08002674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	807b      	strh	r3, [r7, #2]
 8002680:	4613      	mov	r3, r2
 8002682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002684:	787b      	ldrb	r3, [r7, #1]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002690:	e003      	b.n	800269a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	041a      	lsls	r2, r3, #16
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026b6:	887a      	ldrh	r2, [r7, #2]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4013      	ands	r3, r2
 80026bc:	041a      	lsls	r2, r3, #16
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	43d9      	mvns	r1, r3
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	400b      	ands	r3, r1
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	611a      	str	r2, [r3, #16]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d8:	b08b      	sub	sp, #44	; 0x2c
 80026da:	af06      	add	r7, sp, #24
 80026dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d101      	bne.n	80026e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0fd      	b.n	80028e4 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f008 f83f 	bl	800a780 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f003 fd2d 	bl	800616e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	687e      	ldr	r6, [r7, #4]
 800271c:	466d      	mov	r5, sp
 800271e:	f106 0410 	add.w	r4, r6, #16
 8002722:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002724:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	602b      	str	r3, [r5, #0]
 800272a:	1d33      	adds	r3, r6, #4
 800272c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272e:	6838      	ldr	r0, [r7, #0]
 8002730:	f003 fcf7 	bl	8006122 <USB_CoreInit>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0ce      	b.n	80028e4 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fd28 	bl	80061a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002752:	2300      	movs	r3, #0
 8002754:	73fb      	strb	r3, [r7, #15]
 8002756:	e04c      	b.n	80027f2 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	440b      	add	r3, r1
 8002768:	3301      	adds	r3, #1
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	4613      	mov	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4413      	add	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	7bfa      	ldrb	r2, [r7, #15]
 8002780:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	7bfb      	ldrb	r3, [r7, #15]
 8002786:	b298      	uxth	r0, r3
 8002788:	6879      	ldr	r1, [r7, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3336      	adds	r3, #54	; 0x36
 8002796:	4602      	mov	r2, r0
 8002798:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	4613      	mov	r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	3303      	adds	r3, #3
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	3338      	adds	r3, #56	; 0x38
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027c4:	7bfa      	ldrb	r2, [r7, #15]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	440b      	add	r3, r1
 80027d2:	333c      	adds	r3, #60	; 0x3c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80027d8:	7bfa      	ldrb	r2, [r7, #15]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	440b      	add	r3, r1
 80027e6:	3340      	adds	r3, #64	; 0x40
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
 80027ee:	3301      	adds	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d3ad      	bcc.n	8002758 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027fc:	2300      	movs	r3, #0
 80027fe:	73fb      	strb	r3, [r7, #15]
 8002800:	e044      	b.n	800288c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002802:	7bfa      	ldrb	r2, [r7, #15]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	440b      	add	r3, r1
 8002810:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002818:	7bfa      	ldrb	r2, [r7, #15]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800282e:	7bfa      	ldrb	r2, [r7, #15]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	440b      	add	r3, r1
 800283c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002844:	7bfa      	ldrb	r2, [r7, #15]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4413      	add	r3, r2
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	440b      	add	r3, r1
 8002852:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002856:	2200      	movs	r2, #0
 8002858:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800285a:	7bfa      	ldrb	r2, [r7, #15]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	440b      	add	r3, r1
 8002868:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	4413      	add	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	440b      	add	r3, r1
 800287e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002882:	2200      	movs	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	3301      	adds	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	d3b5      	bcc.n	8002802 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	687e      	ldr	r6, [r7, #4]
 800289e:	466d      	mov	r5, sp
 80028a0:	f106 0410 	add.w	r4, r6, #16
 80028a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	602b      	str	r3, [r5, #0]
 80028ac:	1d33      	adds	r3, r6, #4
 80028ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b0:	6838      	ldr	r0, [r7, #0]
 80028b2:	f003 fc82 	bl	80061ba <USB_DevInit>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2202      	movs	r2, #2
 80028c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e00d      	b.n	80028e4 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 f935 	bl	8008b4c <USB_DevDisconnect>

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028ec <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d101      	bne.n	8002902 <HAL_PCD_Start+0x16>
 80028fe:	2302      	movs	r3, #2
 8002900:	e016      	b.n	8002930 <HAL_PCD_Start+0x44>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fc17 	bl	8006142 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002914:	2101      	movs	r1, #1
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f008 f9a5 	bl	800ac66 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f006 f909 	bl	8008b38 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f006 f90b 	bl	8008b60 <USB_ReadInterrupts>
 800294a:	4603      	mov	r3, r0
 800294c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002954:	d102      	bne.n	800295c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 fb5f 	bl	800301a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f006 f8fd 	bl	8008b60 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800296c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002970:	d112      	bne.n	8002998 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002984:	b292      	uxth	r2, r2
 8002986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f007 ff73 	bl	800a876 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002990:	2100      	movs	r1, #0
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f923 	bl	8002bde <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f006 f8df 	bl	8008b60 <USB_ReadInterrupts>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029ac:	d10b      	bne.n	80029c6 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029c0:	b292      	uxth	r2, r2
 80029c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f006 f8c8 	bl	8008b60 <USB_ReadInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d10b      	bne.n	80029f4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ee:	b292      	uxth	r2, r2
 80029f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f006 f8b1 	bl	8008b60 <USB_ReadInterrupts>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d126      	bne.n	8002a58 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0204 	bic.w	r2, r2, #4
 8002a1c:	b292      	uxth	r2, r2
 8002a1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0208 	bic.w	r2, r2, #8
 8002a34:	b292      	uxth	r2, r2
 8002a36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f007 ff54 	bl	800a8e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a52:	b292      	uxth	r2, r2
 8002a54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f006 f87f 	bl	8008b60 <USB_ReadInterrupts>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a6c:	f040 8082 	bne.w	8002b74 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8002a70:	2300      	movs	r3, #0
 8002a72:	77fb      	strb	r3, [r7, #31]
 8002a74:	e010      	b.n	8002a98 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	7ffb      	ldrb	r3, [r7, #31]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	7ffb      	ldrb	r3, [r7, #31]
 8002a84:	8812      	ldrh	r2, [r2, #0]
 8002a86:	b292      	uxth	r2, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	3320      	adds	r3, #32
 8002a8c:	443b      	add	r3, r7
 8002a8e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002a92:	7ffb      	ldrb	r3, [r7, #31]
 8002a94:	3301      	adds	r3, #1
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	7ffb      	ldrb	r3, [r7, #31]
 8002a9a:	2b07      	cmp	r3, #7
 8002a9c:	d9eb      	bls.n	8002a76 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	b292      	uxth	r2, r2
 8002aca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002ace:	bf00      	nop
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0f6      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af4:	b292      	uxth	r2, r2
 8002af6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e00f      	b.n	8002b20 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002b00:	7ffb      	ldrb	r3, [r7, #31]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	4611      	mov	r1, r2
 8002b08:	7ffa      	ldrb	r2, [r7, #31]
 8002b0a:	0092      	lsls	r2, r2, #2
 8002b0c:	440a      	add	r2, r1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	3320      	adds	r3, #32
 8002b12:	443b      	add	r3, r7
 8002b14:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002b18:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002b1a:	7ffb      	ldrb	r3, [r7, #31]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	77fb      	strb	r3, [r7, #31]
 8002b20:	7ffb      	ldrb	r3, [r7, #31]
 8002b22:	2b07      	cmp	r3, #7
 8002b24:	d9ec      	bls.n	8002b00 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0208 	orr.w	r2, r2, #8
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b50:	b292      	uxth	r2, r2
 8002b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f042 0204 	orr.w	r2, r2, #4
 8002b68:	b292      	uxth	r2, r2
 8002b6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f007 fea0 	bl	800a8b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f005 fff1 	bl	8008b60 <USB_ReadInterrupts>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b88:	d10e      	bne.n	8002ba8 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f007 fe59 	bl	800a85a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f005 ffd7 	bl	8008b60 <USB_ReadInterrupts>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bbc:	d10b      	bne.n	8002bd6 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002bd6:	bf00      	nop
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
 8002be6:	460b      	mov	r3, r1
 8002be8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_PCD_SetAddress+0x1a>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e013      	b.n	8002c20 <HAL_PCD_SetAddress+0x42>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	78fa      	ldrb	r2, [r7, #3]
 8002c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f005 ff7e 	bl	8008b12 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	4608      	mov	r0, r1
 8002c32:	4611      	mov	r1, r2
 8002c34:	461a      	mov	r2, r3
 8002c36:	4603      	mov	r3, r0
 8002c38:	70fb      	strb	r3, [r7, #3]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	803b      	strh	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	da0e      	bge.n	8002c6c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2201      	movs	r2, #1
 8002c68:	705a      	strb	r2, [r3, #1]
 8002c6a:	e00e      	b.n	8002c8a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	f003 0207 	and.w	r2, r3, #7
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c96:	883a      	ldrh	r2, [r7, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	78ba      	ldrb	r2, [r7, #2]
 8002ca0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	785b      	ldrb	r3, [r3, #1]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cb4:	78bb      	ldrb	r3, [r7, #2]
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d102      	bne.n	8002cc0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_EP_Open+0xa6>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e00e      	b.n	8002cec <HAL_PCD_EP_Open+0xc4>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68f9      	ldr	r1, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f003 fa8d 	bl	80061fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002cea:	7afb      	ldrb	r3, [r7, #11]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0e      	bge.n	8002d26 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	4613      	mov	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	705a      	strb	r2, [r3, #1]
 8002d24:	e00e      	b.n	8002d44 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 0207 	and.w	r2, r3, #7
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_PCD_EP_Close+0x6a>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e00e      	b.n	8002d7c <HAL_PCD_EP_Close+0x88>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f003 fdaf 	bl	80068d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	460b      	mov	r3, r1
 8002d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d94:	7afb      	ldrb	r3, [r7, #11]
 8002d96:	f003 0207 	and.w	r2, r3, #7
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4413      	add	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc4:	7afb      	ldrb	r3, [r7, #11]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd0:	7afb      	ldrb	r3, [r7, #11]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6979      	ldr	r1, [r7, #20]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 ff61 	bl	8006ca8 <USB_EPStartXfer>
 8002de6:	e005      	b.n	8002df4 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6979      	ldr	r1, [r7, #20]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 ff5a 	bl	8006ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	b083      	sub	sp, #12
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	460b      	mov	r3, r1
 8002e08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	f003 0207 	and.w	r2, r3, #7
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002e20:	681b      	ldr	r3, [r3, #0]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	1c5a      	adds	r2, r3, #1
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	4413      	add	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2201      	movs	r2, #1
 8002e76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e78:	7afb      	ldrb	r3, [r7, #11]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e84:	7afb      	ldrb	r3, [r7, #11]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6979      	ldr	r1, [r7, #20]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 ff07 	bl	8006ca8 <USB_EPStartXfer>
 8002e9a:	e005      	b.n	8002ea8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6979      	ldr	r1, [r7, #20]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f003 ff00 	bl	8006ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ebe:	78fb      	ldrb	r3, [r7, #3]
 8002ec0:	f003 0207 	and.w	r2, r3, #7
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d901      	bls.n	8002ed0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e04c      	b.n	8002f6a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da0e      	bge.n	8002ef6 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	705a      	strb	r2, [r3, #1]
 8002ef4:	e00c      	b.n	8002f10 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0307 	and.w	r3, r3, #7
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_PCD_EP_SetStall+0x7e>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e01c      	b.n	8002f6a <HAL_PCD_EP_SetStall+0xb8>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f005 fcea 	bl	8008918 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d108      	bne.n	8002f60 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f005 fe0f 	bl	8008b7e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d901      	bls.n	8002f90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e040      	b.n	8003012 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da0e      	bge.n	8002fb6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	705a      	strb	r2, [r3, #1]
 8002fb4:	e00e      	b.n	8002fd4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 0207 	and.w	r2, r3, #7
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fda:	78fb      	ldrb	r3, [r7, #3]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_PCD_EP_ClrStall+0x82>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e00e      	b.n	8003012 <HAL_PCD_EP_ClrStall+0xa0>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	f005 fcd8 	bl	80089b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08e      	sub	sp, #56	; 0x38
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003022:	e2ec      	b.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800302c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800302e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003030:	b2db      	uxtb	r3, r3
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800303a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800303e:	2b00      	cmp	r3, #0
 8003040:	f040 8161 	bne.w	8003306 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	d152      	bne.n	80030f4 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305e:	81fb      	strh	r3, [r7, #14]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800306a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800306e:	b29b      	uxth	r3, r3
 8003070:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3328      	adds	r3, #40	; 0x28
 8003076:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003080:	b29b      	uxth	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	4413      	add	r3, r2
 800308c:	3302      	adds	r3, #2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	695a      	ldr	r2, [r3, #20]
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	441a      	add	r2, r3
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030b2:	2100      	movs	r1, #0
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f007 fbb6 	bl	800a826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 829b 	beq.w	80035fe <PCD_EP_ISR_Handler+0x5e4>
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8296 	bne.w	80035fe <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	b292      	uxth	r2, r2
 80030e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80030f2:	e284      	b.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030fa:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003104:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	2b00      	cmp	r3, #0
 800310c:	d034      	beq.n	8003178 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	3306      	adds	r3, #6
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6818      	ldr	r0, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800314c:	b29b      	uxth	r3, r3
 800314e:	f005 fd66 	bl	8008c1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29a      	uxth	r2, r3
 800315a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800315e:	4013      	ands	r3, r2
 8003160:	823b      	strh	r3, [r7, #16]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	8a3a      	ldrh	r2, [r7, #16]
 8003168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800316c:	b292      	uxth	r2, r2
 800316e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f007 fb2b 	bl	800a7cc <HAL_PCD_SetupStageCallback>
 8003176:	e242      	b.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003178:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800317c:	2b00      	cmp	r3, #0
 800317e:	f280 823e 	bge.w	80035fe <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29a      	uxth	r2, r3
 800318a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800318e:	4013      	ands	r3, r2
 8003190:	83bb      	strh	r3, [r7, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	8bba      	ldrh	r2, [r7, #28]
 8003198:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800319c:	b292      	uxth	r2, r2
 800319e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	3306      	adds	r3, #6
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d019      	beq.n	8003208 <PCD_EP_ISR_Handler+0x1ee>
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6818      	ldr	r0, [r3, #0]
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	6959      	ldr	r1, [r3, #20]
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80031e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ea:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	f005 fd16 	bl	8008c1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	441a      	add	r2, r3
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003200:	2100      	movs	r1, #0
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f007 faf4 	bl	800a7f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 81f2 	bne.w	80035fe <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003228:	b29b      	uxth	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	4413      	add	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d112      	bne.n	8003268 <PCD_EP_ISR_Handler+0x24e>
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	881b      	ldrh	r3, [r3, #0]
 8003246:	b29b      	uxth	r3, r3
 8003248:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800324c:	b29a      	uxth	r2, r3
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	801a      	strh	r2, [r3, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	b29b      	uxth	r3, r3
 8003258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800325c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003260:	b29a      	uxth	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	801a      	strh	r2, [r3, #0]
 8003266:	e02f      	b.n	80032c8 <PCD_EP_ISR_Handler+0x2ae>
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b3e      	cmp	r3, #62	; 0x3e
 800326e:	d813      	bhi.n	8003298 <PCD_EP_ISR_Handler+0x27e>
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	633b      	str	r3, [r7, #48]	; 0x30
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <PCD_EP_ISR_Handler+0x270>
 8003284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003286:	3301      	adds	r3, #1
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	b29b      	uxth	r3, r3
 800328e:	029b      	lsls	r3, r3, #10
 8003290:	b29a      	uxth	r2, r3
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	801a      	strh	r2, [r3, #0]
 8003296:	e017      	b.n	80032c8 <PCD_EP_ISR_Handler+0x2ae>
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <PCD_EP_ISR_Handler+0x298>
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	3b01      	subs	r3, #1
 80032b0:	633b      	str	r3, [r7, #48]	; 0x30
 80032b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	029b      	lsls	r3, r3, #10
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	827b      	strh	r3, [r7, #18]
 80032da:	8a7b      	ldrh	r3, [r7, #18]
 80032dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80032e0:	827b      	strh	r3, [r7, #18]
 80032e2:	8a7b      	ldrh	r3, [r7, #18]
 80032e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80032e8:	827b      	strh	r3, [r7, #18]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	8a7b      	ldrh	r3, [r7, #18]
 80032f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003300:	b29b      	uxth	r3, r3
 8003302:	8013      	strh	r3, [r2, #0]
 8003304:	e17b      	b.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	461a      	mov	r2, r3
 800330c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003318:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800331c:	2b00      	cmp	r3, #0
 800331e:	f280 80ea 	bge.w	80034f6 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	b29a      	uxth	r2, r3
 8003334:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003338:	4013      	ands	r3, r2
 800333a:	853b      	strh	r3, [r7, #40]	; 0x28
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	461a      	mov	r2, r3
 8003342:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800334c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003350:	b292      	uxth	r2, r2
 8003352:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003354:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003358:	4613      	mov	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	4413      	add	r3, r2
 8003368:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	7b1b      	ldrb	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d122      	bne.n	80033b8 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800337a:	b29b      	uxth	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	3306      	adds	r3, #6
 8003388:	005b      	lsls	r3, r3, #1
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	4413      	add	r3, r2
 8003390:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800339c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8087 	beq.w	80034b2 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6818      	ldr	r0, [r3, #0]
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	6959      	ldr	r1, [r3, #20]
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	88da      	ldrh	r2, [r3, #6]
 80033b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80033b2:	f005 fc34 	bl	8008c1e <USB_ReadPMA>
 80033b6:	e07c      	b.n	80034b2 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80033b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ba:	78db      	ldrb	r3, [r3, #3]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d108      	bne.n	80033d2 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80033c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033c2:	461a      	mov	r2, r3
 80033c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f927 	bl	800361a <HAL_PCD_EP_DB_Receive>
 80033cc:	4603      	mov	r3, r0
 80033ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 80033d0:	e06f      	b.n	80034b2 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ec:	847b      	strh	r3, [r7, #34]	; 0x22
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	441a      	add	r2, r3
 80033fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80033fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800340a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800340e:	b29b      	uxth	r3, r3
 8003410:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29b      	uxth	r3, r3
 8003424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d021      	beq.n	8003470 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003434:	b29b      	uxth	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	4413      	add	r3, r2
 8003440:	3302      	adds	r3, #2
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	4413      	add	r3, r2
 800344a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003454:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8003456:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02a      	beq.n	80034b2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	6959      	ldr	r1, [r3, #20]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	891a      	ldrh	r2, [r3, #8]
 8003468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800346a:	f005 fbd8 	bl	8008c1e <USB_ReadPMA>
 800346e:	e020      	b.n	80034b2 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	00db      	lsls	r3, r3, #3
 8003482:	4413      	add	r3, r2
 8003484:	3306      	adds	r3, #6
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003492:	881b      	ldrh	r3, [r3, #0]
 8003494:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003498:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800349a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	6959      	ldr	r1, [r3, #20]
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	895a      	ldrh	r2, [r3, #10]
 80034ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034ae:	f005 fbb6 	bl	8008c1e <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	69da      	ldr	r2, [r3, #28]
 80034b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034b8:	441a      	add	r2, r3
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80034c4:	441a      	add	r2, r3
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d004      	beq.n	80034dc <PCD_EP_ISR_Handler+0x4c2>
 80034d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d206      	bcs.n	80034ea <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	4619      	mov	r1, r3
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f007 f984 	bl	800a7f0 <HAL_PCD_DataOutStageCallback>
 80034e8:	e005      	b.n	80034f6 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 fbd9 	bl	8006ca8 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d07e      	beq.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003500:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	4413      	add	r3, r2
 8003512:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	881b      	ldrh	r3, [r3, #0]
 8003524:	b29b      	uxth	r3, r3
 8003526:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800352e:	843b      	strh	r3, [r7, #32]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	441a      	add	r2, r3
 800353e:	8c3b      	ldrh	r3, [r7, #32]
 8003540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003548:	b29b      	uxth	r3, r3
 800354a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	78db      	ldrb	r3, [r3, #3]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d00c      	beq.n	800356e <PCD_EP_ISR_Handler+0x554>
 8003554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003556:	78db      	ldrb	r3, [r3, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8003560:	2b02      	cmp	r3, #2
 8003562:	d146      	bne.n	80035f2 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8003564:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356a:	2b00      	cmp	r3, #0
 800356c:	d141      	bne.n	80035f2 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	3302      	adds	r3, #2
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	4413      	add	r3, r2
 800358c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003596:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	699a      	ldr	r2, [r3, #24]
 800359c:	8bfb      	ldrh	r3, [r7, #30]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d906      	bls.n	80035b0 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	8bfb      	ldrh	r3, [r7, #30]
 80035a8:	1ad2      	subs	r2, r2, r3
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	619a      	str	r2, [r3, #24]
 80035ae:	e002      	b.n	80035b6 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	2200      	movs	r2, #0
 80035b4:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80035b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f007 f92e 	bl	800a826 <HAL_PCD_DataInStageCallback>
 80035ca:	e018      	b.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80035cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	8bfb      	ldrh	r3, [r7, #30]
 80035d2:	441a      	add	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	69da      	ldr	r2, [r3, #28]
 80035dc:	8bfb      	ldrh	r3, [r7, #30]
 80035de:	441a      	add	r2, r3
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ea:	4618      	mov	r0, r3
 80035ec:	f003 fb5c 	bl	8006ca8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80035f0:	e005      	b.n	80035fe <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80035f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80035f4:	461a      	mov	r2, r3
 80035f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f91b 	bl	8003834 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003606:	b29b      	uxth	r3, r3
 8003608:	b21b      	sxth	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	f6ff ad0a 	blt.w	8003024 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3738      	adds	r7, #56	; 0x38
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b088      	sub	sp, #32
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	4613      	mov	r3, r2
 8003626:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d07e      	beq.n	8003730 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363a:	b29b      	uxth	r3, r3
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	3302      	adds	r3, #2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	699a      	ldr	r2, [r3, #24]
 8003660:	8b7b      	ldrh	r3, [r7, #26]
 8003662:	429a      	cmp	r2, r3
 8003664:	d306      	bcc.n	8003674 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	8b7b      	ldrh	r3, [r7, #26]
 800366c:	1ad2      	subs	r2, r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	619a      	str	r2, [r3, #24]
 8003672:	e002      	b.n	800367a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d123      	bne.n	80036ca <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29b      	uxth	r3, r3
 8003694:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800369c:	833b      	strh	r3, [r7, #24]
 800369e:	8b3b      	ldrh	r3, [r7, #24]
 80036a0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80036a4:	833b      	strh	r3, [r7, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	441a      	add	r2, r3
 80036b4:	8b3b      	ldrh	r3, [r7, #24]
 80036b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80036ca:	88fb      	ldrh	r3, [r7, #6]
 80036cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01f      	beq.n	8003714 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ee:	82fb      	strh	r3, [r7, #22]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	461a      	mov	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	8afb      	ldrh	r3, [r7, #22]
 8003700:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003704:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003710:	b29b      	uxth	r3, r3
 8003712:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003714:	8b7b      	ldrh	r3, [r7, #26]
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8087 	beq.w	800382a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	6959      	ldr	r1, [r3, #20]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	891a      	ldrh	r2, [r3, #8]
 8003728:	8b7b      	ldrh	r3, [r7, #26]
 800372a:	f005 fa78 	bl	8008c1e <USB_ReadPMA>
 800372e:	e07c      	b.n	800382a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003738:	b29b      	uxth	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	4413      	add	r3, r2
 8003744:	3306      	adds	r3, #6
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	6812      	ldr	r2, [r2, #0]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003758:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	8b7b      	ldrh	r3, [r7, #26]
 8003760:	429a      	cmp	r2, r3
 8003762:	d306      	bcc.n	8003772 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	699a      	ldr	r2, [r3, #24]
 8003768:	8b7b      	ldrh	r3, [r7, #26]
 800376a:	1ad2      	subs	r2, r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	619a      	str	r2, [r3, #24]
 8003770:	e002      	b.n	8003778 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d123      	bne.n	80037c8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	461a      	mov	r2, r3
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	881b      	ldrh	r3, [r3, #0]
 8003790:	b29b      	uxth	r3, r3
 8003792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800379a:	83fb      	strh	r3, [r7, #30]
 800379c:	8bfb      	ldrh	r3, [r7, #30]
 800379e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80037a2:	83fb      	strh	r3, [r7, #30]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	441a      	add	r2, r3
 80037b2:	8bfb      	ldrh	r3, [r7, #30]
 80037b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80037c8:	88fb      	ldrh	r3, [r7, #6]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11f      	bne.n	8003812 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ec:	83bb      	strh	r3, [r7, #28]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	8bbb      	ldrh	r3, [r7, #28]
 80037fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800380e:	b29b      	uxth	r3, r3
 8003810:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003812:	8b7b      	ldrh	r3, [r7, #26]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6818      	ldr	r0, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6959      	ldr	r1, [r3, #20]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	895a      	ldrh	r2, [r3, #10]
 8003824:	8b7b      	ldrh	r3, [r7, #26]
 8003826:	f005 f9fa 	bl	8008c1e <USB_ReadPMA>
    }
  }

  return count;
 800382a:	8b7b      	ldrh	r3, [r7, #26]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3720      	adds	r7, #32
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0a2      	sub	sp, #136	; 0x88
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	4613      	mov	r3, r2
 8003840:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003842:	88fb      	ldrh	r3, [r7, #6]
 8003844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 81c7 	beq.w	8003bdc <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003856:	b29b      	uxth	r3, r3
 8003858:	461a      	mov	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	4413      	add	r3, r2
 8003862:	3302      	adds	r3, #2
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003870:	881b      	ldrh	r3, [r3, #0]
 8003872:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003876:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003882:	429a      	cmp	r2, r3
 8003884:	d907      	bls.n	8003896 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	619a      	str	r2, [r3, #24]
 8003894:	e002      	b.n	800389c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2200      	movs	r2, #0
 800389a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 80b9 	bne.w	8003a18 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d126      	bne.n	80038fc <HAL_PCD_EP_DB_Transmit+0xc8>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038bc:	b29b      	uxth	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	4413      	add	r3, r2
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	011a      	lsls	r2, r3, #4
 80038cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ce:	4413      	add	r3, r2
 80038d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	801a      	strh	r2, [r3, #0]
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	881b      	ldrh	r3, [r3, #0]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	801a      	strh	r2, [r3, #0]
 80038fa:	e01a      	b.n	8003932 <HAL_PCD_EP_DB_Transmit+0xfe>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	785b      	ldrb	r3, [r3, #1]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d116      	bne.n	8003932 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	633b      	str	r3, [r7, #48]	; 0x30
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003912:	b29b      	uxth	r3, r3
 8003914:	461a      	mov	r2, r3
 8003916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003918:	4413      	add	r3, r2
 800391a:	633b      	str	r3, [r7, #48]	; 0x30
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	011a      	lsls	r2, r3, #4
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	4413      	add	r3, r2
 8003926:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800392a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392e:	2200      	movs	r2, #0
 8003930:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d126      	bne.n	800398e <HAL_PCD_EP_DB_Transmit+0x15a>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800394e:	b29b      	uxth	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	4413      	add	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	011a      	lsls	r2, r3, #4
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	4413      	add	r3, r2
 8003962:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	881b      	ldrh	r3, [r3, #0]
 800396c:	b29b      	uxth	r3, r3
 800396e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003972:	b29a      	uxth	r2, r3
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	801a      	strh	r2, [r3, #0]
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003986:	b29a      	uxth	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e017      	b.n	80039be <HAL_PCD_EP_DB_Transmit+0x18a>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	785b      	ldrb	r3, [r3, #1]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d113      	bne.n	80039be <HAL_PCD_EP_DB_Transmit+0x18a>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	4413      	add	r3, r2
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	011a      	lsls	r2, r3, #4
 80039ae:	6a3b      	ldr	r3, [r7, #32]
 80039b0:	4413      	add	r3, r2
 80039b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80039b6:	61fb      	str	r3, [r7, #28]
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	2200      	movs	r2, #0
 80039bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f006 ff2e 	bl	800a826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 82d4 	beq.w	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f0:	827b      	strh	r3, [r7, #18]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	441a      	add	r2, r3
 8003a00:	8a7b      	ldrh	r3, [r7, #18]
 8003a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	8013      	strh	r3, [r2, #0]
 8003a16:	e2b2      	b.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003a18:	88fb      	ldrh	r3, [r7, #6]
 8003a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d021      	beq.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	461a      	mov	r2, r3
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	441a      	add	r2, r3
 8003a4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	f040 8286 	bne.w	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a7a:	441a      	add	r2, r3
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	69da      	ldr	r2, [r3, #28]
 8003a84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003a88:	441a      	add	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	691b      	ldr	r3, [r3, #16]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d309      	bcc.n	8003aae <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	6a1a      	ldr	r2, [r3, #32]
 8003aa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa6:	1ad2      	subs	r2, r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	621a      	str	r2, [r3, #32]
 8003aac:	e015      	b.n	8003ada <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d107      	bne.n	8003ac6 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003ab6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003aba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003ac4:	e009      	b.n	8003ada <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d155      	bne.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x35a>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	4413      	add	r3, r2
 8003af8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	011a      	lsls	r2, r3, #4
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	4413      	add	r3, r2
 8003b04:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d112      	bne.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x302>
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	801a      	strh	r2, [r3, #0]
 8003b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b22:	881b      	ldrh	r3, [r3, #0]
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b32:	801a      	strh	r2, [r3, #0]
 8003b34:	e047      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b38:	2b3e      	cmp	r3, #62	; 0x3e
 8003b3a:	d811      	bhi.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x32c>
 8003b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_PCD_EP_DB_Transmit+0x31e>
 8003b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b4e:	3301      	adds	r3, #1
 8003b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	029b      	lsls	r3, r3, #10
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e032      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_PCD_EP_DB_Transmit+0x342>
 8003b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b72:	3b01      	subs	r3, #1
 8003b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	029b      	lsls	r3, r3, #10
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8a:	801a      	strh	r2, [r3, #0]
 8003b8c:	e01b      	b.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	785b      	ldrb	r3, [r3, #1]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d117      	bne.n	8003bc6 <HAL_PCD_EP_DB_Transmit+0x392>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003baa:	4413      	add	r3, r2
 8003bac:	643b      	str	r3, [r7, #64]	; 0x40
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	011a      	lsls	r2, r3, #4
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6959      	ldr	r1, [r3, #20]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	891a      	ldrh	r2, [r3, #8]
 8003bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	f004 ffdd 	bl	8008b94 <USB_WritePMA>
 8003bda:	e1d0      	b.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4413      	add	r3, r2
 8003bf0:	3306      	adds	r3, #6
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d307      	bcc.n	8003c24 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003c1c:	1ad2      	subs	r2, r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	619a      	str	r2, [r3, #24]
 8003c22:	e002      	b.n	8003c2a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2200      	movs	r2, #0
 8003c28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f040 80c4 	bne.w	8003dbc <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	785b      	ldrb	r3, [r3, #1]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d126      	bne.n	8003c8a <HAL_PCD_EP_DB_Transmit+0x456>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	4413      	add	r3, r2
 8003c52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	011a      	lsls	r2, r3, #4
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c72:	801a      	strh	r2, [r3, #0]
 8003c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c76:	881b      	ldrh	r3, [r3, #0]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	e01a      	b.n	8003cc0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	785b      	ldrb	r3, [r3, #1]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d116      	bne.n	8003cc0 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	677b      	str	r3, [r7, #116]	; 0x74
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca6:	4413      	add	r3, r2
 8003ca8:	677b      	str	r3, [r7, #116]	; 0x74
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	011a      	lsls	r2, r3, #4
 8003cb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003cb8:	673b      	str	r3, [r7, #112]	; 0x70
 8003cba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d12f      	bne.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	011a      	lsls	r2, r3, #4
 8003cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	e017      	b.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d113      	bne.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x52a>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d44:	4413      	add	r3, r2
 8003d46:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	011a      	lsls	r2, r3, #4
 8003d4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d50:	4413      	add	r3, r2
 8003d52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003d56:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	4619      	mov	r1, r3
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f006 fd5e 	bl	800a826 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 8104 	bne.w	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d90:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	441a      	add	r2, r3
 8003da2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003da6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003daa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	8013      	strh	r3, [r2, #0]
 8003dba:	e0e0      	b.n	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d121      	bne.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	461a      	mov	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ddc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	441a      	add	r2, r3
 8003df2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003df6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 80b4 	bne.w	8003f7e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e1e:	441a      	add	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e2c:	441a      	add	r2, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	6a1a      	ldr	r2, [r3, #32]
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d309      	bcc.n	8003e52 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	6a1a      	ldr	r2, [r3, #32]
 8003e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4a:	1ad2      	subs	r2, r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	621a      	str	r2, [r3, #32]
 8003e50:	e015      	b.n	8003e7e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8003e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003e68:	e009      	b.n	8003e7e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2200      	movs	r2, #0
 8003e74:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	667b      	str	r3, [r7, #100]	; 0x64
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d155      	bne.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x704>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ea0:	4413      	add	r3, r2
 8003ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	011a      	lsls	r2, r3, #4
 8003eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003eac:	4413      	add	r3, r2
 8003eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003eb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8003eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d112      	bne.n	8003ee0 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003eba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ecc:	881b      	ldrh	r3, [r3, #0]
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	e044      	b.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ee4:	d811      	bhi.n	8003f0a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003ee6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	657b      	str	r3, [r7, #84]	; 0x54
 8003eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef8:	3301      	adds	r3, #1
 8003efa:	657b      	str	r3, [r7, #84]	; 0x54
 8003efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	029b      	lsls	r3, r3, #10
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f06:	801a      	strh	r2, [r3, #0]
 8003f08:	e02f      	b.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f12:	f003 031f 	and.w	r3, r3, #31
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d102      	bne.n	8003f20 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	029b      	lsls	r3, r3, #10
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f34:	801a      	strh	r2, [r3, #0]
 8003f36:	e018      	b.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	785b      	ldrb	r3, [r3, #1]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d114      	bne.n	8003f6a <HAL_PCD_EP_DB_Transmit+0x736>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f4e:	4413      	add	r3, r2
 8003f50:	667b      	str	r3, [r7, #100]	; 0x64
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	011a      	lsls	r2, r3, #4
 8003f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f60:	663b      	str	r3, [r7, #96]	; 0x60
 8003f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f68:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6818      	ldr	r0, [r3, #0]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	6959      	ldr	r1, [r3, #20]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	895a      	ldrh	r2, [r3, #10]
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	f004 fe0b 	bl	8008b94 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	4413      	add	r3, r2
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f98:	823b      	strh	r3, [r7, #16]
 8003f9a:	8a3b      	ldrh	r3, [r7, #16]
 8003f9c:	f083 0310 	eor.w	r3, r3, #16
 8003fa0:	823b      	strh	r3, [r7, #16]
 8003fa2:	8a3b      	ldrh	r3, [r7, #16]
 8003fa4:	f083 0320 	eor.w	r3, r3, #32
 8003fa8:	823b      	strh	r3, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	441a      	add	r2, r3
 8003fb8:	8a3b      	ldrh	r3, [r7, #16]
 8003fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3788      	adds	r7, #136	; 0x88
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	607b      	str	r3, [r7, #4]
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	817b      	strh	r3, [r7, #10]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003fea:	897b      	ldrh	r3, [r7, #10]
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00b      	beq.n	800400e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff6:	897b      	ldrh	r3, [r7, #10]
 8003ff8:	f003 0307 	and.w	r3, r3, #7
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e009      	b.n	8004022 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800400e:	897a      	ldrh	r2, [r7, #10]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004022:	893b      	ldrh	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2200      	movs	r2, #0
 800402c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	b29a      	uxth	r2, r3
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	80da      	strh	r2, [r3, #6]
 8004036:	e00b      	b.n	8004050 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2201      	movs	r2, #1
 800403c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	b29a      	uxth	r2, r3
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	b29a      	uxth	r2, r3
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	bc80      	pop	{r7}
 800405a:	4770      	bx	lr

0800405c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e272      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 8087 	beq.w	800418a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800407c:	4b92      	ldr	r3, [pc, #584]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 030c 	and.w	r3, r3, #12
 8004084:	2b04      	cmp	r3, #4
 8004086:	d00c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004088:	4b8f      	ldr	r3, [pc, #572]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b08      	cmp	r3, #8
 8004092:	d112      	bne.n	80040ba <HAL_RCC_OscConfig+0x5e>
 8004094:	4b8c      	ldr	r3, [pc, #560]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a0:	d10b      	bne.n	80040ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a2:	4b89      	ldr	r3, [pc, #548]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d06c      	beq.n	8004188 <HAL_RCC_OscConfig+0x12c>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d168      	bne.n	8004188 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e24c      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c2:	d106      	bne.n	80040d2 <HAL_RCC_OscConfig+0x76>
 80040c4:	4b80      	ldr	r3, [pc, #512]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a7f      	ldr	r2, [pc, #508]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ce:	6013      	str	r3, [r2, #0]
 80040d0:	e02e      	b.n	8004130 <HAL_RCC_OscConfig+0xd4>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x98>
 80040da:	4b7b      	ldr	r3, [pc, #492]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a7a      	ldr	r2, [pc, #488]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b78      	ldr	r3, [pc, #480]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a77      	ldr	r2, [pc, #476]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80040ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xd4>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0xbc>
 80040fe:	4b72      	ldr	r3, [pc, #456]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a71      	ldr	r2, [pc, #452]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6f      	ldr	r3, [pc, #444]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6e      	ldr	r2, [pc, #440]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xd4>
 8004118:	4b6b      	ldr	r3, [pc, #428]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a6a      	ldr	r2, [pc, #424]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b68      	ldr	r3, [pc, #416]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a67      	ldr	r2, [pc, #412]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe f800 	bl	800213c <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004140:	f7fd fffc 	bl	800213c <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e200      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5d      	ldr	r3, [pc, #372]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xe4>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fd ffec 	bl	800213c <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004168:	f7fd ffe8 	bl	800213c <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1ec      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b53      	ldr	r3, [pc, #332]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x10c>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004196:	4b4c      	ldr	r3, [pc, #304]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80041a2:	4b49      	ldr	r3, [pc, #292]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f003 030c 	and.w	r3, r3, #12
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x18c>
 80041ae:	4b46      	ldr	r3, [pc, #280]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b43      	ldr	r3, [pc, #268]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x176>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c0      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3d      	ldr	r3, [pc, #244]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4939      	ldr	r1, [pc, #228]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f6:	f7fd ffa1 	bl	800213c <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fd ff9d 	bl	800213c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a1      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2d      	ldr	r3, [pc, #180]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b2a      	ldr	r3, [pc, #168]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4927      	ldr	r1, [pc, #156]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_RCC_OscConfig+0x270>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004238:	f7fd ff80 	bl	800213c <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004240:	f7fd ff7c 	bl	800213c <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e180      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d03a      	beq.n	80042e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d019      	beq.n	80042a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b17      	ldr	r3, [pc, #92]	; (80042d0 <HAL_RCC_OscConfig+0x274>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004278:	f7fd ff60 	bl	800213c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004280:	f7fd ff5c 	bl	800213c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e160      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0d      	ldr	r3, [pc, #52]	; (80042c8 <HAL_RCC_OscConfig+0x26c>)
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800429e:	2001      	movs	r0, #1
 80042a0:	f000 faa6 	bl	80047f0 <RCC_Delay>
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_RCC_OscConfig+0x274>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fd ff46 	bl	800213c <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042b4:	f7fd ff42 	bl	800213c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d908      	bls.n	80042d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e146      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
 80042c6:	bf00      	nop
 80042c8:	40021000 	.word	0x40021000
 80042cc:	42420000 	.word	0x42420000
 80042d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d4:	4b92      	ldr	r3, [pc, #584]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80042d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d8:	f003 0302 	and.w	r3, r3, #2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e9      	bne.n	80042b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80a6 	beq.w	800443a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042f2:	4b8b      	ldr	r3, [pc, #556]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10d      	bne.n	800431a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042fe:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	4a87      	ldr	r2, [pc, #540]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004308:	61d3      	str	r3, [r2, #28]
 800430a:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004312:	60bb      	str	r3, [r7, #8]
 8004314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431a:	4b82      	ldr	r3, [pc, #520]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d118      	bne.n	8004358 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004326:	4b7f      	ldr	r3, [pc, #508]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a7e      	ldr	r2, [pc, #504]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 800432c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004332:	f7fd ff03 	bl	800213c <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800433a:	f7fd feff 	bl	800213c <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b64      	cmp	r3, #100	; 0x64
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e103      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	4b75      	ldr	r3, [pc, #468]	; (8004524 <HAL_RCC_OscConfig+0x4c8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d0f0      	beq.n	800433a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <HAL_RCC_OscConfig+0x312>
 8004360:	4b6f      	ldr	r3, [pc, #444]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	4a6e      	ldr	r2, [pc, #440]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6213      	str	r3, [r2, #32]
 800436c:	e02d      	b.n	80043ca <HAL_RCC_OscConfig+0x36e>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10c      	bne.n	8004390 <HAL_RCC_OscConfig+0x334>
 8004376:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a69      	ldr	r2, [pc, #420]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	4b67      	ldr	r3, [pc, #412]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4a66      	ldr	r2, [pc, #408]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004388:	f023 0304 	bic.w	r3, r3, #4
 800438c:	6213      	str	r3, [r2, #32]
 800438e:	e01c      	b.n	80043ca <HAL_RCC_OscConfig+0x36e>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d10c      	bne.n	80043b2 <HAL_RCC_OscConfig+0x356>
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	4a60      	ldr	r2, [pc, #384]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800439e:	f043 0304 	orr.w	r3, r3, #4
 80043a2:	6213      	str	r3, [r2, #32]
 80043a4:	4b5e      	ldr	r3, [pc, #376]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	4a5d      	ldr	r2, [pc, #372]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	6213      	str	r3, [r2, #32]
 80043b0:	e00b      	b.n	80043ca <HAL_RCC_OscConfig+0x36e>
 80043b2:	4b5b      	ldr	r3, [pc, #364]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	4a5a      	ldr	r2, [pc, #360]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	f023 0301 	bic.w	r3, r3, #1
 80043bc:	6213      	str	r3, [r2, #32]
 80043be:	4b58      	ldr	r3, [pc, #352]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	4a57      	ldr	r2, [pc, #348]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043c4:	f023 0304 	bic.w	r3, r3, #4
 80043c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d015      	beq.n	80043fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7fd feb3 	bl	800213c <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d8:	e00a      	b.n	80043f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043da:	f7fd feaf 	bl	800213c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e0b1      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f0:	4b4b      	ldr	r3, [pc, #300]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d0ee      	beq.n	80043da <HAL_RCC_OscConfig+0x37e>
 80043fc:	e014      	b.n	8004428 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fe:	f7fd fe9d 	bl	800213c <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd fe99 	bl	800213c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	; 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e09b      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441c:	4b40      	ldr	r3, [pc, #256]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ee      	bne.n	8004406 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d105      	bne.n	800443a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442e:	4b3c      	ldr	r3, [pc, #240]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4a3b      	ldr	r2, [pc, #236]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004438:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 8087 	beq.w	8004552 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004444:	4b36      	ldr	r3, [pc, #216]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 030c 	and.w	r3, r3, #12
 800444c:	2b08      	cmp	r3, #8
 800444e:	d061      	beq.n	8004514 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	2b02      	cmp	r3, #2
 8004456:	d146      	bne.n	80044e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004458:	4b33      	ldr	r3, [pc, #204]	; (8004528 <HAL_RCC_OscConfig+0x4cc>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd fe6d 	bl	800213c <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fd fe69 	bl	800213c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e06d      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004478:	4b29      	ldr	r3, [pc, #164]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448c:	d108      	bne.n	80044a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800448e:	4b24      	ldr	r3, [pc, #144]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	4921      	ldr	r1, [pc, #132]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a0:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a19      	ldr	r1, [r3, #32]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	430b      	orrs	r3, r1
 80044b2:	491b      	ldr	r1, [pc, #108]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044b8:	4b1b      	ldr	r3, [pc, #108]	; (8004528 <HAL_RCC_OscConfig+0x4cc>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044be:	f7fd fe3d 	bl	800213c <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fd fe39 	bl	800213c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e03d      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044d8:	4b11      	ldr	r3, [pc, #68]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d0f0      	beq.n	80044c6 <HAL_RCC_OscConfig+0x46a>
 80044e4:	e035      	b.n	8004552 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044e6:	4b10      	ldr	r3, [pc, #64]	; (8004528 <HAL_RCC_OscConfig+0x4cc>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ec:	f7fd fe26 	bl	800213c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fe22 	bl	800213c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e026      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004506:	4b06      	ldr	r3, [pc, #24]	; (8004520 <HAL_RCC_OscConfig+0x4c4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x498>
 8004512:	e01e      	b.n	8004552 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	69db      	ldr	r3, [r3, #28]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d107      	bne.n	800452c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e019      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
 8004520:	40021000 	.word	0x40021000
 8004524:	40007000 	.word	0x40007000
 8004528:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_OscConfig+0x500>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	429a      	cmp	r2, r3
 800453e:	d106      	bne.n	800454e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d001      	beq.n	8004552 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3718      	adds	r7, #24
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000

08004560 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0d0      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004574:	4b6a      	ldr	r3, [pc, #424]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d910      	bls.n	80045a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b67      	ldr	r3, [pc, #412]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 0207 	bic.w	r2, r3, #7
 800458a:	4965      	ldr	r1, [pc, #404]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b63      	ldr	r3, [pc, #396]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d001      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e0b8      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0302 	and.w	r3, r3, #2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d020      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d005      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045bc:	4b59      	ldr	r3, [pc, #356]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a58      	ldr	r2, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d005      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045d4:	4b53      	ldr	r3, [pc, #332]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e0:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	494d      	ldr	r1, [pc, #308]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d040      	beq.n	8004680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d107      	bne.n	8004616 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d115      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e07f      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d107      	bne.n	800462e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d109      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e073      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800462e:	4b3d      	ldr	r3, [pc, #244]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06b      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800463e:	4b39      	ldr	r3, [pc, #228]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4936      	ldr	r1, [pc, #216]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004650:	f7fd fd74 	bl	800213c <HAL_GetTick>
 8004654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004656:	e00a      	b.n	800466e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004658:	f7fd fd70 	bl	800213c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e053      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f003 020c 	and.w	r2, r3, #12
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	429a      	cmp	r2, r3
 800467e:	d1eb      	bne.n	8004658 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d210      	bcs.n	80046b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 0207 	bic.w	r2, r3, #7
 8004696:	4922      	ldr	r1, [pc, #136]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	4313      	orrs	r3, r2
 800469c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800469e:	4b20      	ldr	r3, [pc, #128]	; (8004720 <HAL_RCC_ClockConfig+0x1c0>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d001      	beq.n	80046b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e032      	b.n	8004716 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046bc:	4b19      	ldr	r3, [pc, #100]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	4916      	ldr	r1, [pc, #88]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d009      	beq.n	80046ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046da:	4b12      	ldr	r3, [pc, #72]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	490e      	ldr	r1, [pc, #56]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ee:	f000 f821 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80046f2:	4602      	mov	r2, r0
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_RCC_ClockConfig+0x1c4>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	091b      	lsrs	r3, r3, #4
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	490a      	ldr	r1, [pc, #40]	; (8004728 <HAL_RCC_ClockConfig+0x1c8>)
 8004700:	5ccb      	ldrb	r3, [r1, r3]
 8004702:	fa22 f303 	lsr.w	r3, r2, r3
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x1cc>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x1d0>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd fcd2 	bl	80020b8 <HAL_InitTick>

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40022000 	.word	0x40022000
 8004724:	40021000 	.word	0x40021000
 8004728:	0800c9e0 	.word	0x0800c9e0
 800472c:	20000014 	.word	0x20000014
 8004730:	20000018 	.word	0x20000018

08004734 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b490      	push	{r4, r7}
 8004736:	b08a      	sub	sp, #40	; 0x28
 8004738:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800473a:	4b29      	ldr	r3, [pc, #164]	; (80047e0 <HAL_RCC_GetSysClockFreq+0xac>)
 800473c:	1d3c      	adds	r4, r7, #4
 800473e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004744:	f240 2301 	movw	r3, #513	; 0x201
 8004748:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
 8004752:	2300      	movs	r3, #0
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800475e:	4b21      	ldr	r3, [pc, #132]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f003 030c 	and.w	r3, r3, #12
 800476a:	2b04      	cmp	r3, #4
 800476c:	d002      	beq.n	8004774 <HAL_RCC_GetSysClockFreq+0x40>
 800476e:	2b08      	cmp	r3, #8
 8004770:	d003      	beq.n	800477a <HAL_RCC_GetSysClockFreq+0x46>
 8004772:	e02b      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004774:	4b1c      	ldr	r3, [pc, #112]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004776:	623b      	str	r3, [r7, #32]
      break;
 8004778:	e02b      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	0c9b      	lsrs	r3, r3, #18
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3328      	adds	r3, #40	; 0x28
 8004784:	443b      	add	r3, r7
 8004786:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800478a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d012      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004796:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	0c5b      	lsrs	r3, r3, #17
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	3328      	adds	r3, #40	; 0x28
 80047a2:	443b      	add	r3, r7
 80047a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80047a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	4a0e      	ldr	r2, [pc, #56]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047ae:	fb03 f202 	mul.w	r2, r3, r2
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	e004      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	4a0b      	ldr	r2, [pc, #44]	; (80047ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80047c0:	fb02 f303 	mul.w	r3, r2, r3
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	623b      	str	r3, [r7, #32]
      break;
 80047ca:	e002      	b.n	80047d2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b06      	ldr	r3, [pc, #24]	; (80047e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80047ce:	623b      	str	r3, [r7, #32]
      break;
 80047d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047d2:	6a3b      	ldr	r3, [r7, #32]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	; 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc90      	pop	{r4, r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	0800c98c 	.word	0x0800c98c
 80047e4:	40021000 	.word	0x40021000
 80047e8:	007a1200 	.word	0x007a1200
 80047ec:	003d0900 	.word	0x003d0900

080047f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b085      	sub	sp, #20
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80047f8:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <RCC_Delay+0x34>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a0a      	ldr	r2, [pc, #40]	; (8004828 <RCC_Delay+0x38>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	0a5b      	lsrs	r3, r3, #9
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800480c:	bf00      	nop
  }
  while (Delay --);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	1e5a      	subs	r2, r3, #1
 8004812:	60fa      	str	r2, [r7, #12]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1f9      	bne.n	800480c <RCC_Delay+0x1c>
}
 8004818:	bf00      	nop
 800481a:	bf00      	nop
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	bc80      	pop	{r7}
 8004822:	4770      	bx	lr
 8004824:	20000014 	.word	0x20000014
 8004828:	10624dd3 	.word	0x10624dd3

0800482c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	2300      	movs	r3, #0
 800483a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	2b00      	cmp	r3, #0
 8004846:	d07d      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004848:	2300      	movs	r3, #0
 800484a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484c:	4b4f      	ldr	r3, [pc, #316]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10d      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	4a4b      	ldr	r2, [pc, #300]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	61d3      	str	r3, [r2, #28]
 8004864:	4b49      	ldr	r3, [pc, #292]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486c:	60bb      	str	r3, [r7, #8]
 800486e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004870:	2301      	movs	r3, #1
 8004872:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004874:	4b46      	ldr	r3, [pc, #280]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487c:	2b00      	cmp	r3, #0
 800487e:	d118      	bne.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004880:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a42      	ldr	r2, [pc, #264]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004886:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800488a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800488c:	f7fd fc56 	bl	800213c <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004892:	e008      	b.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004894:	f7fd fc52 	bl	800213c <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e06d      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048a6:	4b3a      	ldr	r3, [pc, #232]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80048b2:	4b36      	ldr	r3, [pc, #216]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d02e      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d027      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80048d0:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048dc:	2201      	movs	r2, #1
 80048de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048e0:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80048e6:	4a29      	ldr	r2, [pc, #164]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d014      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fd fc21 	bl	800213c <HAL_GetTick>
 80048fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	e00a      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fe:	f7fd fc1d 	bl	800213c <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	4293      	cmp	r3, r2
 800490e:	d901      	bls.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e036      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004914:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f003 0302 	and.w	r3, r3, #2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d0ee      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004920:	4b1a      	ldr	r3, [pc, #104]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	4917      	ldr	r1, [pc, #92]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800492e:	4313      	orrs	r3, r2
 8004930:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004932:	7dfb      	ldrb	r3, [r7, #23]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d105      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004938:	4b14      	ldr	r3, [pc, #80]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	4a13      	ldr	r2, [pc, #76]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800493e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004942:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004950:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	490b      	ldr	r1, [pc, #44]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800495e:	4313      	orrs	r3, r2
 8004960:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	4904      	ldr	r1, [pc, #16]	; (800498c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497c:	4313      	orrs	r3, r2
 800497e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3718      	adds	r7, #24
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	40021000 	.word	0x40021000
 8004990:	40007000 	.word	0x40007000
 8004994:	42420440 	.word	0x42420440

08004998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e076      	b.n	8004a98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d108      	bne.n	80049c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d009      	beq.n	80049d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	61da      	str	r2, [r3, #28]
 80049c2:	e005      	b.n	80049d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fd f9fa 	bl	8001de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a40:	431a      	orrs	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a54:	ea42 0103 	orr.w	r1, r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	0c1a      	lsrs	r2, r3, #16
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f002 0204 	and.w	r2, r2, #4
 8004a76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	69da      	ldr	r2, [r3, #28]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_SPI_Transmit+0x22>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e126      	b.n	8004d10 <HAL_SPI_Transmit+0x270>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aca:	f7fd fb37 	bl	800213c <HAL_GetTick>
 8004ace:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d002      	beq.n	8004ae6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ae4:	e10b      	b.n	8004cfe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <HAL_SPI_Transmit+0x52>
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004af6:	e102      	b.n	8004cfe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2203      	movs	r2, #3
 8004afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	88fa      	ldrh	r2, [r7, #6]
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2200      	movs	r2, #0
 8004b22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3e:	d10f      	bne.n	8004b60 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b40      	cmp	r3, #64	; 0x40
 8004b6c:	d007      	beq.n	8004b7e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b86:	d14b      	bne.n	8004c20 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d002      	beq.n	8004b96 <HAL_SPI_Transmit+0xf6>
 8004b90:	8afb      	ldrh	r3, [r7, #22]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d13e      	bne.n	8004c14 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	881a      	ldrh	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba6:	1c9a      	adds	r2, r3, #2
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bba:	e02b      	b.n	8004c14 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d112      	bne.n	8004bf0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bce:	881a      	ldrh	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bda:	1c9a      	adds	r2, r3, #2
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bee:	e011      	b.n	8004c14 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bf0:	f7fd faa4 	bl	800213c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d803      	bhi.n	8004c08 <HAL_SPI_Transmit+0x168>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c06:	d102      	bne.n	8004c0e <HAL_SPI_Transmit+0x16e>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d102      	bne.n	8004c14 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c12:	e074      	b.n	8004cfe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1ce      	bne.n	8004bbc <HAL_SPI_Transmit+0x11c>
 8004c1e:	e04c      	b.n	8004cba <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_Transmit+0x18e>
 8004c28:	8afb      	ldrh	r3, [r7, #22]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d140      	bne.n	8004cb0 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	330c      	adds	r3, #12
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c54:	e02c      	b.n	8004cb0 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d113      	bne.n	8004c8c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	330c      	adds	r3, #12
 8004c6e:	7812      	ldrb	r2, [r2, #0]
 8004c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	3b01      	subs	r3, #1
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c8a:	e011      	b.n	8004cb0 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8c:	f7fd fa56 	bl	800213c <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d803      	bhi.n	8004ca4 <HAL_SPI_Transmit+0x204>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca2:	d102      	bne.n	8004caa <HAL_SPI_Transmit+0x20a>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cae:	e026      	b.n	8004cfe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1cd      	bne.n	8004c56 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 fa62 	bl	8005188 <SPI_EndRxTxTransaction>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	613b      	str	r3, [r7, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	77fb      	strb	r3, [r7, #31]
 8004cfa:	e000      	b.n	8004cfe <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2201      	movs	r2, #1
 8004d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08c      	sub	sp, #48	; 0x30
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d26:	2301      	movs	r3, #1
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x26>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e18a      	b.n	8005054 <HAL_SPI_TransmitReceive+0x33c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d46:	f7fd f9f9 	bl	800213c <HAL_GetTick>
 8004d4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d5c:	887b      	ldrh	r3, [r7, #2]
 8004d5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d00f      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x70>
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d6e:	d107      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <HAL_SPI_TransmitReceive+0x68>
 8004d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d003      	beq.n	8004d88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d86:	e15b      	b.n	8005040 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x82>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x82>
 8004d94:	887b      	ldrh	r3, [r7, #2]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004da0:	e14e      	b.n	8005040 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d003      	beq.n	8004db6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2205      	movs	r2, #5
 8004db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	887a      	ldrh	r2, [r7, #2]
 8004dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	887a      	ldrh	r2, [r7, #2]
 8004dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	887a      	ldrh	r2, [r7, #2]
 8004dd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	887a      	ldrh	r2, [r7, #2]
 8004dde:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d007      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e12:	d178      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <HAL_SPI_TransmitReceive+0x10a>
 8004e1c:	8b7b      	ldrh	r3, [r7, #26]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d166      	bne.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	881a      	ldrh	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	1c9a      	adds	r2, r3, #2
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e46:	e053      	b.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d11b      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0x176>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e5a:	b29b      	uxth	r3, r3
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d016      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x176>
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d113      	bne.n	8004e8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	881a      	ldrh	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	1c9a      	adds	r2, r3, #2
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d119      	bne.n	8004ed0 <HAL_SPI_TransmitReceive+0x1b8>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d014      	beq.n	8004ed0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	b292      	uxth	r2, r2
 8004eb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	1c9a      	adds	r2, r3, #2
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ed0:	f7fd f934 	bl	800213c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d807      	bhi.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d8>
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ee6:	d003      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004eee:	e0a7      	b.n	8005040 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1a6      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x130>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1a1      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x130>
 8004f04:	e07c      	b.n	8005000 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x1fc>
 8004f0e:	8b7b      	ldrh	r3, [r7, #26]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d16b      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	7812      	ldrb	r2, [r2, #0]
 8004f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	3b01      	subs	r3, #1
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f3a:	e057      	b.n	8004fec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d11c      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x26c>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x26c>
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d114      	bne.n	8004f84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	330c      	adds	r3, #12
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d119      	bne.n	8004fc6 <HAL_SPI_TransmitReceive+0x2ae>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d014      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa6:	b2d2      	uxtb	r2, r2
 8004fa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004fc6:	f7fd f8b9 	bl	800213c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d803      	bhi.n	8004fde <HAL_SPI_TransmitReceive+0x2c6>
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fdc:	d102      	bne.n	8004fe4 <HAL_SPI_TransmitReceive+0x2cc>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d103      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fea:	e029      	b.n	8005040 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1a2      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x224>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d19d      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005004:	68f8      	ldr	r0, [r7, #12]
 8005006:	f000 f8bf 	bl	8005188 <SPI_EndRxTxTransaction>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d006      	beq.n	800501e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800501c:	e010      	b.n	8005040 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d10b      	bne.n	800503e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	e000      	b.n	8005040 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800503e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005054:	4618      	mov	r0, r3
 8005056:	3730      	adds	r7, #48	; 0x30
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800506a:	b2db      	uxtb	r3, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr
	...

08005078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	4613      	mov	r3, r2
 8005086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005088:	f7fd f858 	bl	800213c <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005090:	1a9b      	subs	r3, r3, r2
 8005092:	683a      	ldr	r2, [r7, #0]
 8005094:	4413      	add	r3, r2
 8005096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005098:	f7fd f850 	bl	800213c <HAL_GetTick>
 800509c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800509e:	4b39      	ldr	r3, [pc, #228]	; (8005184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	015b      	lsls	r3, r3, #5
 80050a4:	0d1b      	lsrs	r3, r3, #20
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	fb02 f303 	mul.w	r3, r2, r3
 80050ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ae:	e054      	b.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050b6:	d050      	beq.n	800515a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80050b8:	f7fd f840 	bl	800213c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d902      	bls.n	80050ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d13d      	bne.n	800514a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e6:	d111      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f0:	d004      	beq.n	80050fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fa:	d107      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800510a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d10f      	bne.n	8005136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e017      	b.n	800517a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d101      	bne.n	8005154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	3b01      	subs	r3, #1
 8005158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4013      	ands	r3, r2
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	429a      	cmp	r2, r3
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	461a      	mov	r2, r3
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	429a      	cmp	r2, r3
 8005176:	d19b      	bne.n	80050b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000014 	.word	0x20000014

08005188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af02      	add	r7, sp, #8
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	9300      	str	r3, [sp, #0]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff ff6a 	bl	8005078 <SPI_WaitFlagStateUntilTimeout>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d007      	beq.n	80051ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ae:	f043 0220 	orr.w	r2, r3, #32
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e000      	b.n	80051bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e041      	b.n	800525a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fc fe44 	bl	8001e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3304      	adds	r3, #4
 8005200:	4619      	mov	r1, r3
 8005202:	4610      	mov	r0, r2
 8005204:	f000 fc28 	bl	8005a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e03a      	b.n	80052f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a18      	ldr	r2, [pc, #96]	; (80052fc <HAL_TIM_Base_Start_IT+0x98>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00e      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x58>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d009      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x58>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a14      	ldr	r2, [pc, #80]	; (8005300 <HAL_TIM_Base_Start_IT+0x9c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d004      	beq.n	80052bc <HAL_TIM_Base_Start_IT+0x58>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a13      	ldr	r2, [pc, #76]	; (8005304 <HAL_TIM_Base_Start_IT+0xa0>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d111      	bne.n	80052e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b06      	cmp	r3, #6
 80052cc:	d010      	beq.n	80052f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052de:	e007      	b.n	80052f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bc80      	pop	{r7}
 80052fa:	4770      	bx	lr
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40000400 	.word	0x40000400
 8005304:	40000800 	.word	0x40000800

08005308 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e041      	b.n	800539e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f839 	bl	80053a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f000 fb86 	bl	8005a58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x24>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e022      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d109      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x3e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e015      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x58>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e008      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e05e      	b.n	80054e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0x82>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005438:	e013      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0x92>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005448:	e00b      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005458:	e003      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fd74 	bl	8005f58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <HAL_TIM_PWM_Start+0x138>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d107      	bne.n	800548a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a18      	ldr	r2, [pc, #96]	; (80054f0 <HAL_TIM_PWM_Start+0x138>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_TIM_PWM_Start+0xfa>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d009      	beq.n	80054b2 <HAL_TIM_PWM_Start+0xfa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a14      	ldr	r2, [pc, #80]	; (80054f4 <HAL_TIM_PWM_Start+0x13c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_PWM_Start+0xfa>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <HAL_TIM_PWM_Start+0x140>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2b06      	cmp	r3, #6
 80054c2:	d010      	beq.n	80054e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0201 	orr.w	r2, r2, #1
 80054d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054d4:	e007      	b.n	80054e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40012c00 	.word	0x40012c00
 80054f4:	40000400 	.word	0x40000400
 80054f8:	40000800 	.word	0x40000800

080054fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b082      	sub	sp, #8
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b02      	cmp	r3, #2
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0202 	mvn.w	r2, #2
 8005528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa6f 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa62 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa71 	bl	8005a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b04      	cmp	r3, #4
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b04      	cmp	r3, #4
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0204 	mvn.w	r2, #4
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2202      	movs	r2, #2
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa45 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa38 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa47 	bl	8005a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b08      	cmp	r3, #8
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0208 	mvn.w	r2, #8
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2204      	movs	r2, #4
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f003 0303 	and.w	r3, r3, #3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa1b 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa0e 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa1d 	bl	8005a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b10      	cmp	r3, #16
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b10      	cmp	r3, #16
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0210 	mvn.w	r2, #16
 8005624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2208      	movs	r2, #8
 800562a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	69db      	ldr	r3, [r3, #28]
 8005632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f9f1 	bl	8005a22 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9e4 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f9f3 	bl	8005a34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10e      	bne.n	8005680 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0301 	and.w	r3, r3, #1
 800566c:	2b01      	cmp	r3, #1
 800566e:	d107      	bne.n	8005680 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0201 	mvn.w	r2, #1
 8005678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc faa0 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b80      	cmp	r3, #128	; 0x80
 800568c:	d10e      	bne.n	80056ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005698:	2b80      	cmp	r3, #128	; 0x80
 800569a:	d107      	bne.n	80056ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fd32 	bl	8006110 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b6:	2b40      	cmp	r3, #64	; 0x40
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9b7 	bl	8005a46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0220 	mvn.w	r2, #32
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 fcfd 	bl	80060fe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005704:	bf00      	nop
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005722:	2302      	movs	r3, #2
 8005724:	e0ac      	b.n	8005880 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	f200 809f 	bhi.w	8005874 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005736:	a201      	add	r2, pc, #4	; (adr r2, 800573c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800573c:	08005771 	.word	0x08005771
 8005740:	08005875 	.word	0x08005875
 8005744:	08005875 	.word	0x08005875
 8005748:	08005875 	.word	0x08005875
 800574c:	080057b1 	.word	0x080057b1
 8005750:	08005875 	.word	0x08005875
 8005754:	08005875 	.word	0x08005875
 8005758:	08005875 	.word	0x08005875
 800575c:	080057f3 	.word	0x080057f3
 8005760:	08005875 	.word	0x08005875
 8005764:	08005875 	.word	0x08005875
 8005768:	08005875 	.word	0x08005875
 800576c:	08005833 	.word	0x08005833
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 f9d0 	bl	8005b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699a      	ldr	r2, [r3, #24]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0208 	orr.w	r2, r2, #8
 800578a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699a      	ldr	r2, [r3, #24]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0204 	bic.w	r2, r2, #4
 800579a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6999      	ldr	r1, [r3, #24]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	619a      	str	r2, [r3, #24]
      break;
 80057ae:	e062      	b.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fa16 	bl	8005be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6999      	ldr	r1, [r3, #24]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	619a      	str	r2, [r3, #24]
      break;
 80057f0:	e041      	b.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68b9      	ldr	r1, [r7, #8]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 fa5f 	bl	8005cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	69da      	ldr	r2, [r3, #28]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f042 0208 	orr.w	r2, r2, #8
 800580c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69da      	ldr	r2, [r3, #28]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0204 	bic.w	r2, r2, #4
 800581c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	69d9      	ldr	r1, [r3, #28]
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	691a      	ldr	r2, [r3, #16]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	430a      	orrs	r2, r1
 800582e:	61da      	str	r2, [r3, #28]
      break;
 8005830:	e021      	b.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	4618      	mov	r0, r3
 800583a:	f000 faa9 	bl	8005d90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800584c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69da      	ldr	r2, [r3, #28]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800585c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69d9      	ldr	r1, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	021a      	lsls	r2, r3, #8
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	61da      	str	r2, [r3, #28]
      break;
 8005872:	e000      	b.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIM_ConfigClockSource+0x18>
 800589c:	2302      	movs	r3, #2
 800589e:	e0b3      	b.n	8005a08 <HAL_TIM_ConfigClockSource+0x180>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80058be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058d8:	d03e      	beq.n	8005958 <HAL_TIM_ConfigClockSource+0xd0>
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058de:	f200 8087 	bhi.w	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 80058e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e6:	f000 8085 	beq.w	80059f4 <HAL_TIM_ConfigClockSource+0x16c>
 80058ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ee:	d87f      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 80058f0:	2b70      	cmp	r3, #112	; 0x70
 80058f2:	d01a      	beq.n	800592a <HAL_TIM_ConfigClockSource+0xa2>
 80058f4:	2b70      	cmp	r3, #112	; 0x70
 80058f6:	d87b      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 80058f8:	2b60      	cmp	r3, #96	; 0x60
 80058fa:	d050      	beq.n	800599e <HAL_TIM_ConfigClockSource+0x116>
 80058fc:	2b60      	cmp	r3, #96	; 0x60
 80058fe:	d877      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 8005900:	2b50      	cmp	r3, #80	; 0x50
 8005902:	d03c      	beq.n	800597e <HAL_TIM_ConfigClockSource+0xf6>
 8005904:	2b50      	cmp	r3, #80	; 0x50
 8005906:	d873      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d058      	beq.n	80059be <HAL_TIM_ConfigClockSource+0x136>
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d86f      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 8005910:	2b30      	cmp	r3, #48	; 0x30
 8005912:	d064      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x156>
 8005914:	2b30      	cmp	r3, #48	; 0x30
 8005916:	d86b      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 8005918:	2b20      	cmp	r3, #32
 800591a:	d060      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x156>
 800591c:	2b20      	cmp	r3, #32
 800591e:	d867      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d05c      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x156>
 8005924:	2b10      	cmp	r3, #16
 8005926:	d05a      	beq.n	80059de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005928:	e062      	b.n	80059f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6818      	ldr	r0, [r3, #0]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6899      	ldr	r1, [r3, #8]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	685a      	ldr	r2, [r3, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f000 faee 	bl	8005f1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800594c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	609a      	str	r2, [r3, #8]
      break;
 8005956:	e04e      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6818      	ldr	r0, [r3, #0]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	6899      	ldr	r1, [r3, #8]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f000 fad7 	bl	8005f1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800597a:	609a      	str	r2, [r3, #8]
      break;
 800597c:	e03b      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	6859      	ldr	r1, [r3, #4]
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	461a      	mov	r2, r3
 800598c:	f000 fa4e 	bl	8005e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2150      	movs	r1, #80	; 0x50
 8005996:	4618      	mov	r0, r3
 8005998:	f000 faa5 	bl	8005ee6 <TIM_ITRx_SetConfig>
      break;
 800599c:	e02b      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6818      	ldr	r0, [r3, #0]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f000 fa6c 	bl	8005e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2160      	movs	r1, #96	; 0x60
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fa95 	bl	8005ee6 <TIM_ITRx_SetConfig>
      break;
 80059bc:	e01b      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	6859      	ldr	r1, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f000 fa2e 	bl	8005e2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2140      	movs	r1, #64	; 0x40
 80059d6:	4618      	mov	r0, r3
 80059d8:	f000 fa85 	bl	8005ee6 <TIM_ITRx_SetConfig>
      break;
 80059dc:	e00b      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 fa7c 	bl	8005ee6 <TIM_ITRx_SetConfig>
        break;
 80059ee:	e002      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80059f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bc80      	pop	{r7}
 8005a20:	4770      	bx	lr

08005a22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b083      	sub	sp, #12
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bc80      	pop	{r7}
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bc80      	pop	{r7}
 8005a44:	4770      	bx	lr

08005a46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b083      	sub	sp, #12
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a4e:	bf00      	nop
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <TIM_Base_SetConfig+0xb8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0x30>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0x30>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a26      	ldr	r2, [pc, #152]	; (8005b14 <TIM_Base_SetConfig+0xbc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0x30>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <TIM_Base_SetConfig+0xc0>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d108      	bne.n	8005a9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a1c      	ldr	r2, [pc, #112]	; (8005b10 <TIM_Base_SetConfig+0xb8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d00b      	beq.n	8005aba <TIM_Base_SetConfig+0x62>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d007      	beq.n	8005aba <TIM_Base_SetConfig+0x62>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a19      	ldr	r2, [pc, #100]	; (8005b14 <TIM_Base_SetConfig+0xbc>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d003      	beq.n	8005aba <TIM_Base_SetConfig+0x62>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <TIM_Base_SetConfig+0xc0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d108      	bne.n	8005acc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a07      	ldr	r2, [pc, #28]	; (8005b10 <TIM_Base_SetConfig+0xb8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d103      	bne.n	8005b00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	615a      	str	r2, [r3, #20]
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr
 8005b10:	40012c00 	.word	0x40012c00
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800

08005b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0303 	bic.w	r3, r3, #3
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f023 0302 	bic.w	r3, r3, #2
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <TIM_OC1_SetConfig+0xc8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d10c      	bne.n	8005b92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0308 	bic.w	r3, r3, #8
 8005b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f023 0304 	bic.w	r3, r3, #4
 8005b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <TIM_OC1_SetConfig+0xc8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d111      	bne.n	8005bbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685a      	ldr	r2, [r3, #4]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	697a      	ldr	r2, [r7, #20]
 8005bd6:	621a      	str	r2, [r3, #32]
}
 8005bd8:	bf00      	nop
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	40012c00 	.word	0x40012c00

08005be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b087      	sub	sp, #28
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0210 	bic.w	r2, r3, #16
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	f023 0320 	bic.w	r3, r3, #32
 8005c32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	011b      	lsls	r3, r3, #4
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a1d      	ldr	r2, [pc, #116]	; (8005cb8 <TIM_OC2_SetConfig+0xd0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d10d      	bne.n	8005c64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a14      	ldr	r2, [pc, #80]	; (8005cb8 <TIM_OC2_SetConfig+0xd0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d113      	bne.n	8005c94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685a      	ldr	r2, [r3, #4]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	697a      	ldr	r2, [r7, #20]
 8005cac:	621a      	str	r2, [r3, #32]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr
 8005cb8:	40012c00 	.word	0x40012c00

08005cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f023 0303 	bic.w	r3, r3, #3
 8005cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a1d      	ldr	r2, [pc, #116]	; (8005d8c <TIM_OC3_SetConfig+0xd0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d10d      	bne.n	8005d36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a14      	ldr	r2, [pc, #80]	; (8005d8c <TIM_OC3_SetConfig+0xd0>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d113      	bne.n	8005d66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	693a      	ldr	r2, [r7, #16]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	697a      	ldr	r2, [r7, #20]
 8005d7e:	621a      	str	r2, [r3, #32]
}
 8005d80:	bf00      	nop
 8005d82:	371c      	adds	r7, #28
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00

08005d90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	031b      	lsls	r3, r3, #12
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a0f      	ldr	r2, [pc, #60]	; (8005e28 <TIM_OC4_SetConfig+0x98>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d109      	bne.n	8005e04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	019b      	lsls	r3, r3, #6
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr
 8005e28:	40012c00 	.word	0x40012c00

08005e2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	f023 0201 	bic.w	r2, r3, #1
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f023 030a 	bic.w	r3, r3, #10
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f023 0210 	bic.w	r2, r3, #16
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	031b      	lsls	r3, r3, #12
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ec4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	011b      	lsls	r3, r3, #4
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	693a      	ldr	r2, [r7, #16]
 8005eda:	621a      	str	r2, [r3, #32]
}
 8005edc:	bf00      	nop
 8005ede:	371c      	adds	r7, #28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bc80      	pop	{r7}
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b085      	sub	sp, #20
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
 8005eee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f043 0307 	orr.w	r3, r3, #7
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	609a      	str	r2, [r3, #8]
}
 8005f10:	bf00      	nop
 8005f12:	3714      	adds	r7, #20
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bc80      	pop	{r7}
 8005f18:	4770      	bx	lr

08005f1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b087      	sub	sp, #28
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	60f8      	str	r0, [r7, #12]
 8005f22:	60b9      	str	r1, [r7, #8]
 8005f24:	607a      	str	r2, [r7, #4]
 8005f26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	021a      	lsls	r2, r3, #8
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	609a      	str	r2, [r3, #8]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 031f 	and.w	r3, r3, #31
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6a1a      	ldr	r2, [r3, #32]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	43db      	mvns	r3, r3
 8005f7a:	401a      	ands	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6a1a      	ldr	r2, [r3, #32]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	6879      	ldr	r1, [r7, #4]
 8005f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f90:	431a      	orrs	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr

08005fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e046      	b.n	8006046 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a16      	ldr	r2, [pc, #88]	; (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00e      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006004:	d009      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a12      	ldr	r2, [pc, #72]	; (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a10      	ldr	r2, [pc, #64]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d10c      	bne.n	8006034 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	68ba      	ldr	r2, [r7, #8]
 8006028:	4313      	orrs	r3, r2
 800602a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	bc80      	pop	{r7}
 800604e:	4770      	bx	lr
 8006050:	40012c00 	.word	0x40012c00
 8006054:	40000400 	.word	0x40000400
 8006058:	40000800 	.word	0x40000800

0800605c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006074:	2302      	movs	r3, #2
 8006076:	e03d      	b.n	80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4313      	orrs	r3, r2
 800609a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	69db      	ldr	r3, [r3, #28]
 80060de:	4313      	orrs	r3, r2
 80060e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3714      	adds	r7, #20
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060fe:	b480      	push	{r7}
 8006100:	b083      	sub	sp, #12
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	bc80      	pop	{r7}
 800610e:	4770      	bx	lr

08006110 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	bc80      	pop	{r7}
 8006120:	4770      	bx	lr

08006122 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006122:	b084      	sub	sp, #16
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	f107 0014 	add.w	r0, r7, #20
 8006130:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	bc80      	pop	{r7}
 800613e:	b004      	add	sp, #16
 8006140:	4770      	bx	lr

08006142 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006152:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8006156:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr

0800616e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800616e:	b480      	push	{r7}
 8006170:	b085      	sub	sp, #20
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006176:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800617a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	b29b      	uxth	r3, r3
 8006188:	43db      	mvns	r3, r3
 800618a:	b29b      	uxth	r3, r3
 800618c:	4013      	ands	r3, r2
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bc80      	pop	{r7}
 80061b8:	4770      	bx	lr

080061ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80061ba:	b084      	sub	sp, #16
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	f107 0014 	add.w	r0, r7, #20
 80061c8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bc80      	pop	{r7}
 80061f6:	b004      	add	sp, #16
 80061f8:	4770      	bx	lr
	...

080061fc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b09b      	sub	sp, #108	; 0x6c
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006206:	2300      	movs	r3, #0
 8006208:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	4413      	add	r3, r2
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	b29b      	uxth	r3, r3
 800621a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800621e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006222:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	78db      	ldrb	r3, [r3, #3]
 800622a:	2b03      	cmp	r3, #3
 800622c:	d81f      	bhi.n	800626e <USB_ActivateEndpoint+0x72>
 800622e:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <USB_ActivateEndpoint+0x38>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006245 	.word	0x08006245
 8006238:	08006261 	.word	0x08006261
 800623c:	08006277 	.word	0x08006277
 8006240:	08006253 	.word	0x08006253
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006244:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800624c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8006250:	e012      	b.n	8006278 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006252:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006256:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800625a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800625e:	e00b      	b.n	8006278 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006260:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006264:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006268:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800626c:	e004      	b.n	8006278 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8006274:	e000      	b.n	8006278 <USB_ActivateEndpoint+0x7c>
      break;
 8006276:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	441a      	add	r2, r3
 8006282:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8006286:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800628a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800628e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	b29b      	uxth	r3, r3
 8006298:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	4313      	orrs	r3, r2
 80062ba:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	441a      	add	r2, r3
 80062c8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80062cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	7b1b      	ldrb	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8149 	bne.w	800657c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8084 	beq.w	80063fc <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062fe:	b29b      	uxth	r3, r3
 8006300:	461a      	mov	r2, r3
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4413      	add	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	011a      	lsls	r2, r3, #4
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006316:	613b      	str	r3, [r7, #16]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	88db      	ldrh	r3, [r3, #6]
 800631c:	085b      	lsrs	r3, r3, #1
 800631e:	b29b      	uxth	r3, r3
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	81fb      	strh	r3, [r7, #14]
 8006336:	89fb      	ldrh	r3, [r7, #14]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01b      	beq.n	8006378 <USB_ActivateEndpoint+0x17c>
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29b      	uxth	r3, r3
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006356:	81bb      	strh	r3, [r7, #12]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	441a      	add	r2, r3
 8006362:	89bb      	ldrh	r3, [r7, #12]
 8006364:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006368:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006370:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006374:	b29b      	uxth	r3, r3
 8006376:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d020      	beq.n	80063c2 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006396:	813b      	strh	r3, [r7, #8]
 8006398:	893b      	ldrh	r3, [r7, #8]
 800639a:	f083 0320 	eor.w	r3, r3, #32
 800639e:	813b      	strh	r3, [r7, #8]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	441a      	add	r2, r3
 80063aa:	893b      	ldrh	r3, [r7, #8]
 80063ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063bc:	b29b      	uxth	r3, r3
 80063be:	8013      	strh	r3, [r2, #0]
 80063c0:	e27f      	b.n	80068c2 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063d8:	817b      	strh	r3, [r7, #10]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	897b      	ldrh	r3, [r7, #10]
 80063e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8013      	strh	r3, [r2, #0]
 80063fa:	e262      	b.n	80068c2 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006406:	b29b      	uxth	r3, r3
 8006408:	461a      	mov	r2, r3
 800640a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640c:	4413      	add	r3, r2
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	011a      	lsls	r2, r3, #4
 8006416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006418:	4413      	add	r3, r2
 800641a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	88db      	ldrh	r3, [r3, #6]
 8006424:	085b      	lsrs	r3, r3, #1
 8006426:	b29b      	uxth	r3, r3
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800643a:	b29b      	uxth	r3, r3
 800643c:	461a      	mov	r2, r3
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	4413      	add	r3, r2
 8006442:	627b      	str	r3, [r7, #36]	; 0x24
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	4413      	add	r3, r2
 800644e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006452:	623b      	str	r3, [r7, #32]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d112      	bne.n	8006482 <USB_ActivateEndpoint+0x286>
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	881b      	ldrh	r3, [r3, #0]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006466:	b29a      	uxth	r2, r3
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	801a      	strh	r2, [r3, #0]
 800646c:	6a3b      	ldr	r3, [r7, #32]
 800646e:	881b      	ldrh	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800647a:	b29a      	uxth	r2, r3
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e02f      	b.n	80064e2 <USB_ActivateEndpoint+0x2e6>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	2b3e      	cmp	r3, #62	; 0x3e
 8006488:	d813      	bhi.n	80064b2 <USB_ActivateEndpoint+0x2b6>
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	663b      	str	r3, [r7, #96]	; 0x60
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0301 	and.w	r3, r3, #1
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <USB_ActivateEndpoint+0x2a8>
 800649e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a0:	3301      	adds	r3, #1
 80064a2:	663b      	str	r3, [r7, #96]	; 0x60
 80064a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	029b      	lsls	r3, r3, #10
 80064aa:	b29a      	uxth	r2, r3
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	801a      	strh	r2, [r3, #0]
 80064b0:	e017      	b.n	80064e2 <USB_ActivateEndpoint+0x2e6>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	663b      	str	r3, [r7, #96]	; 0x60
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 031f 	and.w	r3, r3, #31
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d102      	bne.n	80064cc <USB_ActivateEndpoint+0x2d0>
 80064c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064c8:	3b01      	subs	r3, #1
 80064ca:	663b      	str	r3, [r7, #96]	; 0x60
 80064cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	029b      	lsls	r3, r3, #10
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064dc:	b29a      	uxth	r2, r3
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	83fb      	strh	r3, [r7, #30]
 80064f0:	8bfb      	ldrh	r3, [r7, #30]
 80064f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01b      	beq.n	8006532 <USB_ActivateEndpoint+0x336>
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006510:	83bb      	strh	r3, [r7, #28]
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8bbb      	ldrh	r3, [r7, #28]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006526:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	881b      	ldrh	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006548:	837b      	strh	r3, [r7, #26]
 800654a:	8b7b      	ldrh	r3, [r7, #26]
 800654c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006550:	837b      	strh	r3, [r7, #26]
 8006552:	8b7b      	ldrh	r3, [r7, #26]
 8006554:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006558:	837b      	strh	r3, [r7, #26]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	441a      	add	r2, r3
 8006564:	8b7b      	ldrh	r3, [r7, #26]
 8006566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006576:	b29b      	uxth	r3, r3
 8006578:	8013      	strh	r3, [r2, #0]
 800657a:	e1a2      	b.n	80068c2 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80065a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065ac:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80065b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	461a      	mov	r2, r3
 80065c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065c8:	4413      	add	r3, r2
 80065ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	011a      	lsls	r2, r3, #4
 80065d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065da:	657b      	str	r3, [r7, #84]	; 0x54
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	891b      	ldrh	r3, [r3, #8]
 80065e0:	085b      	lsrs	r3, r3, #1
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	b29a      	uxth	r2, r3
 80065e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ea:	801a      	strh	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	653b      	str	r3, [r7, #80]	; 0x50
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fc:	4413      	add	r3, r2
 80065fe:	653b      	str	r3, [r7, #80]	; 0x50
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	011a      	lsls	r2, r3, #4
 8006606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006608:	4413      	add	r3, r2
 800660a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800660e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	895b      	ldrh	r3, [r3, #10]
 8006614:	085b      	lsrs	r3, r3, #1
 8006616:	b29b      	uxth	r3, r3
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800661e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	785b      	ldrb	r3, [r3, #1]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 8091 	bne.w	800674c <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800662a:	687a      	ldr	r2, [r7, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006638:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800663a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800663e:	2b00      	cmp	r3, #0
 8006640:	d01b      	beq.n	800667a <USB_ActivateEndpoint+0x47e>
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	b29b      	uxth	r3, r3
 8006650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006658:	877b      	strh	r3, [r7, #58]	; 0x3a
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	441a      	add	r2, r3
 8006664:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006666:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800666e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006676:	b29b      	uxth	r3, r3
 8006678:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	873b      	strh	r3, [r7, #56]	; 0x38
 8006688:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800668a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668e:	2b00      	cmp	r3, #0
 8006690:	d01b      	beq.n	80066ca <USB_ActivateEndpoint+0x4ce>
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	441a      	add	r2, r3
 80066b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80066b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	4413      	add	r3, r2
 80066d4:	881b      	ldrh	r3, [r3, #0]
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066e4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066ec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066f0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	441a      	add	r2, r3
 80066fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80066fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800670a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800670e:	b29b      	uxth	r3, r3
 8006710:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006712:	687a      	ldr	r2, [r7, #4]
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006728:	867b      	strh	r3, [r7, #50]	; 0x32
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	441a      	add	r2, r3
 8006734:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800673a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800673e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006746:	b29b      	uxth	r3, r3
 8006748:	8013      	strh	r3, [r2, #0]
 800674a:	e0ba      	b.n	80068c2 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	881b      	ldrh	r3, [r3, #0]
 8006758:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800675c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01d      	beq.n	80067a4 <USB_ActivateEndpoint+0x5a8>
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	441a      	add	r2, r3
 800678c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80067b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80067b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01d      	beq.n	80067fc <USB_ActivateEndpoint+0x600>
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	441a      	add	r2, r3
 80067e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	78db      	ldrb	r3, [r3, #3]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d024      	beq.n	800684e <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4413      	add	r3, r2
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b29b      	uxth	r3, r3
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800681a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800681e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006822:	f083 0320 	eor.w	r3, r3, #32
 8006826:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]
 800684c:	e01d      	b.n	800688a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	881b      	ldrh	r3, [r3, #0]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006864:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	441a      	add	r2, r3
 8006872:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006876:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800687a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800687e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006882:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006886:	b29b      	uxth	r3, r3
 8006888:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800689c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	441a      	add	r2, r3
 80068ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80068ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068be:	b29b      	uxth	r3, r3
 80068c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80068c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	376c      	adds	r7, #108	; 0x6c
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bc80      	pop	{r7}
 80068ce:	4770      	bx	lr

080068d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b08d      	sub	sp, #52	; 0x34
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	7b1b      	ldrb	r3, [r3, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f040 808e 	bne.w	8006a00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d044      	beq.n	8006976 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	81bb      	strh	r3, [r7, #12]
 80068fa:	89bb      	ldrh	r3, [r7, #12]
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d01b      	beq.n	800693c <USB_DeactivateEndpoint+0x6c>
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	817b      	strh	r3, [r7, #10]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	441a      	add	r2, r3
 8006926:	897b      	ldrh	r3, [r7, #10]
 8006928:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800692c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006930:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006934:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006938:	b29b      	uxth	r3, r3
 800693a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	b29b      	uxth	r3, r3
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800694e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006952:	813b      	strh	r3, [r7, #8]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	441a      	add	r2, r3
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800696c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006970:	b29b      	uxth	r3, r3
 8006972:	8013      	strh	r3, [r2, #0]
 8006974:	e192      	b.n	8006c9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	881b      	ldrh	r3, [r3, #0]
 8006982:	827b      	strh	r3, [r7, #18]
 8006984:	8a7b      	ldrh	r3, [r7, #18]
 8006986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01b      	beq.n	80069c6 <USB_DeactivateEndpoint+0xf6>
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	881b      	ldrh	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069a4:	823b      	strh	r3, [r7, #16]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	441a      	add	r2, r3
 80069b0:	8a3b      	ldrh	r3, [r7, #16]
 80069b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	4413      	add	r3, r2
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069dc:	81fb      	strh	r3, [r7, #14]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	441a      	add	r2, r3
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	8013      	strh	r3, [r2, #0]
 80069fe:	e14d      	b.n	8006c9c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f040 80a5 	bne.w	8006b54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	843b      	strh	r3, [r7, #32]
 8006a18:	8c3b      	ldrh	r3, [r7, #32]
 8006a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d01b      	beq.n	8006a5a <USB_DeactivateEndpoint+0x18a>
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	009b      	lsls	r3, r3, #2
 8006a2a:	4413      	add	r3, r2
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a38:	83fb      	strh	r3, [r7, #30]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	441a      	add	r2, r3
 8006a44:	8bfb      	ldrh	r3, [r7, #30]
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	83bb      	strh	r3, [r7, #28]
 8006a68:	8bbb      	ldrh	r3, [r7, #28]
 8006a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01b      	beq.n	8006aaa <USB_DeactivateEndpoint+0x1da>
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	881b      	ldrh	r3, [r3, #0]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a88:	837b      	strh	r3, [r7, #26]
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	441a      	add	r2, r3
 8006a94:	8b7b      	ldrh	r3, [r7, #26]
 8006a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	881b      	ldrh	r3, [r3, #0]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac0:	833b      	strh	r3, [r7, #24]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	441a      	add	r2, r3
 8006acc:	8b3b      	ldrh	r3, [r7, #24]
 8006ace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ada:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006af8:	82fb      	strh	r3, [r7, #22]
 8006afa:	687a      	ldr	r2, [r7, #4]
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	441a      	add	r2, r3
 8006b04:	8afb      	ldrh	r3, [r7, #22]
 8006b06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b30:	82bb      	strh	r3, [r7, #20]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	441a      	add	r2, r3
 8006b3c:	8abb      	ldrh	r3, [r7, #20]
 8006b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	8013      	strh	r3, [r2, #0]
 8006b52:	e0a3      	b.n	8006c9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b54:	687a      	ldr	r2, [r7, #4]
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006b62:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d01b      	beq.n	8006ba4 <USB_DeactivateEndpoint+0x2d4>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	441a      	add	r2, r3
 8006b8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01b      	beq.n	8006bf4 <USB_DeactivateEndpoint+0x324>
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	4413      	add	r3, r2
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bd2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	441a      	add	r2, r3
 8006bde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006be4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006be8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006c0c:	687a      	ldr	r2, [r7, #4]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	441a      	add	r2, r3
 8006c16:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c42:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	009b      	lsls	r3, r3, #2
 8006c4c:	441a      	add	r2, r3
 8006c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4413      	add	r3, r2
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3734      	adds	r7, #52	; 0x34
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bc80      	pop	{r7}
 8006ca6:	4770      	bx	lr

08006ca8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b0cc      	sub	sp, #304	; 0x130
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cb6:	6018      	str	r0, [r3, #0]
 8006cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cc0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	785b      	ldrb	r3, [r3, #1]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	f041 817d 	bne.w	8007fce <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006cd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ce4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d908      	bls.n	8006d02 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8006d00:	e007      	b.n	8006d12 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006d02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	7b1b      	ldrb	r3, [r3, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d152      	bne.n	8006dc8 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006d22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6959      	ldr	r1, [r3, #20]
 8006d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	88da      	ldrh	r2, [r3, #6]
 8006d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006d44:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006d48:	6800      	ldr	r0, [r0, #0]
 8006d4a:	f001 ff23 	bl	8008b94 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d5a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006d5e:	6812      	ldr	r2, [r2, #0]
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	4619      	mov	r1, r3
 8006d74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d78:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006d7c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006d80:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8006d84:	6812      	ldr	r2, [r2, #0]
 8006d86:	440a      	add	r2, r1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	011a      	lsls	r2, r3, #4
 8006d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4413      	add	r3, r2
 8006da4:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8006da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dac:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dbc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	801a      	strh	r2, [r3, #0]
 8006dc4:	f001 b8b5 	b.w	8007f32 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	78db      	ldrb	r3, [r3, #3]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	f040 84c6 	bne.w	8007766 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6a1a      	ldr	r2, [r3, #32]
 8006de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	f240 8443 	bls.w	800767e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8006df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e1e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8006e22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	441a      	add	r2, r3
 8006e3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006e40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e48:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006e54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6a1a      	ldr	r2, [r3, #32]
 8006e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e64:	1ad2      	subs	r2, r2, r3
 8006e66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	4413      	add	r3, r2
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 823e 	beq.w	8007316 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e9e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8006ea2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ea6:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f040 809a 	bne.w	8006ff4 <USB_EPStartXfer+0x34c>
 8006ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ec8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ecc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	601a      	str	r2, [r3, #0]
 8006ed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ed8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006eee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006ef2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	440a      	add	r2, r1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	011a      	lsls	r2, r3, #4
 8006f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4413      	add	r3, r2
 8006f16:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8006f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f1e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d122      	bne.n	8006f72 <USB_EPStartXfer+0x2ca>
 8006f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	801a      	strh	r2, [r3, #0]
 8006f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f50:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f68:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	801a      	strh	r2, [r3, #0]
 8006f70:	e079      	b.n	8007066 <USB_EPStartXfer+0x3be>
 8006f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f76:	2b3e      	cmp	r3, #62	; 0x3e
 8006f78:	d81b      	bhi.n	8006fb2 <USB_EPStartXfer+0x30a>
 8006f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d004      	beq.n	8006f9a <USB_EPStartXfer+0x2f2>
 8006f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f94:	3301      	adds	r3, #1
 8006f96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e059      	b.n	8007066 <USB_EPStartXfer+0x3be>
 8006fb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fc0:	f003 031f 	and.w	r3, r3, #31
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d104      	bne.n	8006fd2 <USB_EPStartXfer+0x32a>
 8006fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fcc:	3b01      	subs	r3, #1
 8006fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006fd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	029b      	lsls	r3, r3, #10
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006fea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e038      	b.n	8007066 <USB_EPStartXfer+0x3be>
 8006ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ff8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d130      	bne.n	8007066 <USB_EPStartXfer+0x3be>
 8007004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007012:	b29b      	uxth	r3, r3
 8007014:	4619      	mov	r1, r3
 8007016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800701a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800701e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007022:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	440a      	add	r2, r1
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	011a      	lsls	r2, r3, #4
 800703a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800703e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4413      	add	r3, r2
 8007046:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800704a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800704e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007052:	601a      	str	r2, [r3, #0]
 8007054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007058:	b29a      	uxth	r2, r3
 800705a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800705e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800706a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	895b      	ldrh	r3, [r3, #10]
 8007072:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800707a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6959      	ldr	r1, [r3, #20]
 8007082:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007086:	b29b      	uxth	r3, r3
 8007088:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800708c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007090:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007094:	6800      	ldr	r0, [r0, #0]
 8007096:	f001 fd7d 	bl	8008b94 <USB_WritePMA>
            ep->xfer_buff += len;
 800709a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800709e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	695a      	ldr	r2, [r3, #20]
 80070a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070aa:	441a      	add	r2, r3
 80070ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80070b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	6a1a      	ldr	r2, [r3, #32]
 80070c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d90f      	bls.n	80070f4 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80070d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6a1a      	ldr	r2, [r3, #32]
 80070e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070e4:	1ad2      	subs	r2, r2, r3
 80070e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	621a      	str	r2, [r3, #32]
 80070f2:	e00e      	b.n	8007112 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80070f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8007104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2200      	movs	r2, #0
 8007110:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f040 809a 	bne.w	8007258 <USB_EPStartXfer+0x5b0>
 8007124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007128:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800712c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007130:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800713c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007146:	b29b      	uxth	r3, r3
 8007148:	4619      	mov	r1, r3
 800714a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800714e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007152:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007156:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800715a:	6812      	ldr	r2, [r2, #0]
 800715c:	440a      	add	r2, r1
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007164:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	011a      	lsls	r2, r3, #4
 800716e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007172:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4413      	add	r3, r2
 800717a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800717e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007182:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800718c:	2b00      	cmp	r3, #0
 800718e:	d122      	bne.n	80071d6 <USB_EPStartXfer+0x52e>
 8007190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007194:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071a8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	881b      	ldrh	r3, [r3, #0]
 80071bc:	b29b      	uxth	r3, r3
 80071be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80071cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	e083      	b.n	80072de <USB_EPStartXfer+0x636>
 80071d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071da:	2b3e      	cmp	r3, #62	; 0x3e
 80071dc:	d81b      	bhi.n	8007216 <USB_EPStartXfer+0x56e>
 80071de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071e2:	085b      	lsrs	r3, r3, #1
 80071e4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ec:	f003 0301 	and.w	r3, r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d004      	beq.n	80071fe <USB_EPStartXfer+0x556>
 80071f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80071f8:	3301      	adds	r3, #1
 80071fa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80071fe:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007202:	b29b      	uxth	r3, r3
 8007204:	029b      	lsls	r3, r3, #10
 8007206:	b29a      	uxth	r2, r3
 8007208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800720c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	801a      	strh	r2, [r3, #0]
 8007214:	e063      	b.n	80072de <USB_EPStartXfer+0x636>
 8007216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800721a:	095b      	lsrs	r3, r3, #5
 800721c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2b00      	cmp	r3, #0
 800722a:	d104      	bne.n	8007236 <USB_EPStartXfer+0x58e>
 800722c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8007230:	3b01      	subs	r3, #1
 8007232:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007236:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800723a:	b29b      	uxth	r3, r3
 800723c:	029b      	lsls	r3, r3, #10
 800723e:	b29b      	uxth	r3, r3
 8007240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007248:	b29a      	uxth	r2, r3
 800724a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800724e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	801a      	strh	r2, [r3, #0]
 8007256:	e042      	b.n	80072de <USB_EPStartXfer+0x636>
 8007258:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800725c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	785b      	ldrb	r3, [r3, #1]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d13a      	bne.n	80072de <USB_EPStartXfer+0x636>
 8007268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800726c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007270:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007274:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8007278:	6812      	ldr	r2, [r2, #0]
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800728a:	b29b      	uxth	r3, r3
 800728c:	4619      	mov	r1, r3
 800728e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007292:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007296:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800729a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800729e:	6812      	ldr	r2, [r2, #0]
 80072a0:	440a      	add	r2, r1
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	011a      	lsls	r2, r3, #4
 80072b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072b6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4413      	add	r3, r2
 80072be:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80072c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072c6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80072de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	891b      	ldrh	r3, [r3, #8]
 80072ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6959      	ldr	r1, [r3, #20]
 80072fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007304:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007308:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800730c:	6800      	ldr	r0, [r0, #0]
 800730e:	f001 fc41 	bl	8008b94 <USB_WritePMA>
 8007312:	f000 be0e 	b.w	8007f32 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800731a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	785b      	ldrb	r3, [r3, #1]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d16d      	bne.n	8007402 <USB_EPStartXfer+0x75a>
 8007326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800732a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	64bb      	str	r3, [r7, #72]	; 0x48
 8007332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007340:	b29b      	uxth	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007346:	4413      	add	r3, r2
 8007348:	64bb      	str	r3, [r7, #72]	; 0x48
 800734a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800734e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	011a      	lsls	r2, r3, #4
 8007358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800735a:	4413      	add	r3, r2
 800735c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007360:	647b      	str	r3, [r7, #68]	; 0x44
 8007362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007366:	2b00      	cmp	r3, #0
 8007368:	d112      	bne.n	8007390 <USB_EPStartXfer+0x6e8>
 800736a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007374:	b29a      	uxth	r2, r3
 8007376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007378:	801a      	strh	r2, [r3, #0]
 800737a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737c:	881b      	ldrh	r3, [r3, #0]
 800737e:	b29b      	uxth	r3, r3
 8007380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007388:	b29a      	uxth	r2, r3
 800738a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800738c:	801a      	strh	r2, [r3, #0]
 800738e:	e063      	b.n	8007458 <USB_EPStartXfer+0x7b0>
 8007390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007394:	2b3e      	cmp	r3, #62	; 0x3e
 8007396:	d817      	bhi.n	80073c8 <USB_EPStartXfer+0x720>
 8007398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800739c:	085b      	lsrs	r3, r3, #1
 800739e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d004      	beq.n	80073b8 <USB_EPStartXfer+0x710>
 80073ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073b2:	3301      	adds	r3, #1
 80073b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073bc:	b29b      	uxth	r3, r3
 80073be:	029b      	lsls	r3, r3, #10
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073c4:	801a      	strh	r2, [r3, #0]
 80073c6:	e047      	b.n	8007458 <USB_EPStartXfer+0x7b0>
 80073c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073d6:	f003 031f 	and.w	r3, r3, #31
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <USB_EPStartXfer+0x740>
 80073de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073e2:	3b01      	subs	r3, #1
 80073e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80073e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	029b      	lsls	r3, r3, #10
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fe:	801a      	strh	r2, [r3, #0]
 8007400:	e02a      	b.n	8007458 <USB_EPStartXfer+0x7b0>
 8007402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d122      	bne.n	8007458 <USB_EPStartXfer+0x7b0>
 8007412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007416:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	653b      	str	r3, [r7, #80]	; 0x50
 800741e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007422:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007432:	4413      	add	r3, r2
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
 8007436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800743a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	011a      	lsls	r2, r3, #4
 8007444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007446:	4413      	add	r3, r2
 8007448:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800744c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800744e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007452:	b29a      	uxth	r2, r3
 8007454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007456:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800745c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	891b      	ldrh	r3, [r3, #8]
 8007464:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800746c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6959      	ldr	r1, [r3, #20]
 8007474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007478:	b29b      	uxth	r3, r3
 800747a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800747e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007482:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	f001 fb84 	bl	8008b94 <USB_WritePMA>
            ep->xfer_buff += len;
 800748c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007490:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	695a      	ldr	r2, [r3, #20]
 8007498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800749c:	441a      	add	r2, r3
 800749e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	6a1a      	ldr	r2, [r3, #32]
 80074b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d90f      	bls.n	80074e6 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80074c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a1a      	ldr	r2, [r3, #32]
 80074d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074d6:	1ad2      	subs	r2, r2, r3
 80074d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	621a      	str	r2, [r3, #32]
 80074e4:	e00e      	b.n	8007504 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80074e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80074f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80074fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2200      	movs	r2, #0
 8007502:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	643b      	str	r3, [r7, #64]	; 0x40
 8007510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	785b      	ldrb	r3, [r3, #1]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d16d      	bne.n	80075fc <USB_EPStartXfer+0x954>
 8007520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007524:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	63bb      	str	r3, [r7, #56]	; 0x38
 800752c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007530:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800753a:	b29b      	uxth	r3, r3
 800753c:	461a      	mov	r2, r3
 800753e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007540:	4413      	add	r3, r2
 8007542:	63bb      	str	r3, [r7, #56]	; 0x38
 8007544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	011a      	lsls	r2, r3, #4
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	4413      	add	r3, r2
 8007556:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
 800755c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007560:	2b00      	cmp	r3, #0
 8007562:	d112      	bne.n	800758a <USB_EPStartXfer+0x8e2>
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	881b      	ldrh	r3, [r3, #0]
 8007568:	b29b      	uxth	r3, r3
 800756a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800756e:	b29a      	uxth	r2, r3
 8007570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007572:	801a      	strh	r2, [r3, #0]
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800757e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007582:	b29a      	uxth	r2, r3
 8007584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007586:	801a      	strh	r2, [r3, #0]
 8007588:	e05d      	b.n	8007646 <USB_EPStartXfer+0x99e>
 800758a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800758e:	2b3e      	cmp	r3, #62	; 0x3e
 8007590:	d817      	bhi.n	80075c2 <USB_EPStartXfer+0x91a>
 8007592:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007596:	085b      	lsrs	r3, r3, #1
 8007598:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800759c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <USB_EPStartXfer+0x90a>
 80075a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075ac:	3301      	adds	r3, #1
 80075ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	029b      	lsls	r3, r3, #10
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e041      	b.n	8007646 <USB_EPStartXfer+0x99e>
 80075c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	f003 031f 	and.w	r3, r3, #31
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <USB_EPStartXfer+0x93a>
 80075d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075dc:	3b01      	subs	r3, #1
 80075de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80075e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075f8:	801a      	strh	r2, [r3, #0]
 80075fa:	e024      	b.n	8007646 <USB_EPStartXfer+0x99e>
 80075fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	785b      	ldrb	r3, [r3, #1]
 8007608:	2b01      	cmp	r3, #1
 800760a:	d11c      	bne.n	8007646 <USB_EPStartXfer+0x99e>
 800760c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007610:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800761a:	b29b      	uxth	r3, r3
 800761c:	461a      	mov	r2, r3
 800761e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007620:	4413      	add	r3, r2
 8007622:	643b      	str	r3, [r7, #64]	; 0x40
 8007624:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007628:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	011a      	lsls	r2, r3, #4
 8007632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007634:	4413      	add	r3, r2
 8007636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800763a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800763c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007640:	b29a      	uxth	r2, r3
 8007642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007644:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800764a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	895b      	ldrh	r3, [r3, #10]
 8007652:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800765a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6959      	ldr	r1, [r3, #20]
 8007662:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007666:	b29b      	uxth	r3, r3
 8007668:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800766c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007670:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007674:	6800      	ldr	r0, [r0, #0]
 8007676:	f001 fa8d 	bl	8008b94 <USB_WritePMA>
 800767a:	f000 bc5a 	b.w	8007f32 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800767e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800768e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800769c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	881b      	ldrh	r3, [r3, #0]
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80076b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	441a      	add	r2, r3
 80076d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80076d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80076ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80076fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800770a:	4413      	add	r3, r2
 800770c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800770e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	011a      	lsls	r2, r3, #4
 800771c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800771e:	4413      	add	r3, r2
 8007720:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007724:	65bb      	str	r3, [r7, #88]	; 0x58
 8007726:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800772a:	b29a      	uxth	r2, r3
 800772c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800772e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	891b      	ldrh	r3, [r3, #8]
 800773c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	6959      	ldr	r1, [r3, #20]
 800774c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007750:	b29b      	uxth	r3, r3
 8007752:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007756:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800775a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800775e:	6800      	ldr	r0, [r0, #0]
 8007760:	f001 fa18 	bl	8008b94 <USB_WritePMA>
 8007764:	e3e5      	b.n	8007f32 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8007766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800776a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007774:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	881b      	ldrh	r3, [r3, #0]
 8007782:	b29b      	uxth	r3, r3
 8007784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8007790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007794:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800779e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	441a      	add	r2, r3
 80077aa:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 80077ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077b6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80077ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077be:	b29b      	uxth	r3, r3
 80077c0:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80077c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6a1a      	ldr	r2, [r3, #32]
 80077ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077d2:	1ad2      	subs	r2, r2, r3
 80077d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80077e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80077ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 81bc 	beq.w	8007b80 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800780c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800781a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d16d      	bne.n	8007902 <USB_EPStartXfer+0xc5a>
 8007826:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800782a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	67bb      	str	r3, [r7, #120]	; 0x78
 8007832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007836:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007840:	b29b      	uxth	r3, r3
 8007842:	461a      	mov	r2, r3
 8007844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007846:	4413      	add	r3, r2
 8007848:	67bb      	str	r3, [r7, #120]	; 0x78
 800784a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800784e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	011a      	lsls	r2, r3, #4
 8007858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785a:	4413      	add	r3, r2
 800785c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007860:	677b      	str	r3, [r7, #116]	; 0x74
 8007862:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d112      	bne.n	8007890 <USB_EPStartXfer+0xbe8>
 800786a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	b29b      	uxth	r3, r3
 8007870:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007874:	b29a      	uxth	r2, r3
 8007876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007878:	801a      	strh	r2, [r3, #0]
 800787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787c:	881b      	ldrh	r3, [r3, #0]
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007888:	b29a      	uxth	r2, r3
 800788a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800788c:	801a      	strh	r2, [r3, #0]
 800788e:	e060      	b.n	8007952 <USB_EPStartXfer+0xcaa>
 8007890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007894:	2b3e      	cmp	r3, #62	; 0x3e
 8007896:	d817      	bhi.n	80078c8 <USB_EPStartXfer+0xc20>
 8007898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <USB_EPStartXfer+0xc10>
 80078ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078b2:	3301      	adds	r3, #1
 80078b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078bc:	b29b      	uxth	r3, r3
 80078be:	029b      	lsls	r3, r3, #10
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c4:	801a      	strh	r2, [r3, #0]
 80078c6:	e044      	b.n	8007952 <USB_EPStartXfer+0xcaa>
 80078c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d104      	bne.n	80078e8 <USB_EPStartXfer+0xc40>
 80078de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078e2:	3b01      	subs	r3, #1
 80078e4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80078e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	029b      	lsls	r3, r3, #10
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e027      	b.n	8007952 <USB_EPStartXfer+0xcaa>
 8007902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d11f      	bne.n	8007952 <USB_EPStartXfer+0xcaa>
 8007912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007916:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007920:	b29b      	uxth	r3, r3
 8007922:	461a      	mov	r2, r3
 8007924:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007928:	4413      	add	r3, r2
 800792a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800792e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	781b      	ldrb	r3, [r3, #0]
 800793a:	011a      	lsls	r2, r3, #4
 800793c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007940:	4413      	add	r3, r2
 8007942:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007946:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800794c:	b29a      	uxth	r2, r3
 800794e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007950:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	895b      	ldrh	r3, [r3, #10]
 800795e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007966:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	6959      	ldr	r1, [r3, #20]
 800796e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007972:	b29b      	uxth	r3, r3
 8007974:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007978:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800797c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007980:	6800      	ldr	r0, [r0, #0]
 8007982:	f001 f907 	bl	8008b94 <USB_WritePMA>
          ep->xfer_buff += len;
 8007986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800798a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	695a      	ldr	r2, [r3, #20]
 8007992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007996:	441a      	add	r2, r3
 8007998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800799c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80079a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6a1a      	ldr	r2, [r3, #32]
 80079b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	429a      	cmp	r2, r3
 80079be:	d90f      	bls.n	80079e0 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80079c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	6a1a      	ldr	r2, [r3, #32]
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d0:	1ad2      	subs	r2, r2, r3
 80079d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	621a      	str	r2, [r3, #32]
 80079de:	e00e      	b.n	80079fe <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80079e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80079f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80079f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2200      	movs	r2, #0
 80079fc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80079fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8295 	beq.w	8007f32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	785b      	ldrb	r3, [r3, #1]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d16d      	bne.n	8007af4 <USB_EPStartXfer+0xe4c>
 8007a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a38:	4413      	add	r3, r2
 8007a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007a40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	011a      	lsls	r2, r3, #4
 8007a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a4c:	4413      	add	r3, r2
 8007a4e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a52:	667b      	str	r3, [r7, #100]	; 0x64
 8007a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d112      	bne.n	8007a82 <USB_EPStartXfer+0xdda>
 8007a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6a:	801a      	strh	r2, [r3, #0]
 8007a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	e063      	b.n	8007b4a <USB_EPStartXfer+0xea2>
 8007a82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a86:	2b3e      	cmp	r3, #62	; 0x3e
 8007a88:	d817      	bhi.n	8007aba <USB_EPStartXfer+0xe12>
 8007a8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a98:	f003 0301 	and.w	r3, r3, #1
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d004      	beq.n	8007aaa <USB_EPStartXfer+0xe02>
 8007aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	029b      	lsls	r3, r3, #10
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ab6:	801a      	strh	r2, [r3, #0]
 8007ab8:	e047      	b.n	8007b4a <USB_EPStartXfer+0xea2>
 8007aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007abe:	095b      	lsrs	r3, r3, #5
 8007ac0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac8:	f003 031f 	and.w	r3, r3, #31
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <USB_EPStartXfer+0xe32>
 8007ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8007ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	029b      	lsls	r3, r3, #10
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007af0:	801a      	strh	r2, [r3, #0]
 8007af2:	e02a      	b.n	8007b4a <USB_EPStartXfer+0xea2>
 8007af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	785b      	ldrb	r3, [r3, #1]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d122      	bne.n	8007b4a <USB_EPStartXfer+0xea2>
 8007b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	673b      	str	r3, [r7, #112]	; 0x70
 8007b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	461a      	mov	r2, r3
 8007b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b24:	4413      	add	r3, r2
 8007b26:	673b      	str	r3, [r7, #112]	; 0x70
 8007b28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	011a      	lsls	r2, r3, #4
 8007b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b38:	4413      	add	r3, r2
 8007b3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b44:	b29a      	uxth	r2, r3
 8007b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	891b      	ldrh	r3, [r3, #8]
 8007b56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6959      	ldr	r1, [r3, #20]
 8007b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007b70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007b78:	6800      	ldr	r0, [r0, #0]
 8007b7a:	f001 f80b 	bl	8008b94 <USB_WritePMA>
 8007b7e:	e1d8      	b.n	8007f32 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	785b      	ldrb	r3, [r3, #1]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d178      	bne.n	8007c82 <USB_EPStartXfer+0xfda>
 8007b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007b94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	011a      	lsls	r2, r3, #4
 8007bc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bcc:	4413      	add	r3, r2
 8007bce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007bd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d116      	bne.n	8007c0c <USB_EPStartXfer+0xf64>
 8007bde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007bea:	b29a      	uxth	r2, r3
 8007bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf0:	801a      	strh	r2, [r3, #0]
 8007bf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007bf6:	881b      	ldrh	r3, [r3, #0]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c08:	801a      	strh	r2, [r3, #0]
 8007c0a:	e06b      	b.n	8007ce4 <USB_EPStartXfer+0x103c>
 8007c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c10:	2b3e      	cmp	r3, #62	; 0x3e
 8007c12:	d818      	bhi.n	8007c46 <USB_EPStartXfer+0xf9e>
 8007c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c18:	085b      	lsrs	r3, r3, #1
 8007c1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c22:	f003 0301 	and.w	r3, r3, #1
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d004      	beq.n	8007c34 <USB_EPStartXfer+0xf8c>
 8007c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c2e:	3301      	adds	r3, #1
 8007c30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c34:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	029b      	lsls	r3, r3, #10
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e04e      	b.n	8007ce4 <USB_EPStartXfer+0x103c>
 8007c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c4a:	095b      	lsrs	r3, r3, #5
 8007c4c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c54:	f003 031f 	and.w	r3, r3, #31
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d104      	bne.n	8007c66 <USB_EPStartXfer+0xfbe>
 8007c5c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c60:	3b01      	subs	r3, #1
 8007c62:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007c66:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	029b      	lsls	r3, r3, #10
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c7e:	801a      	strh	r2, [r3, #0]
 8007c80:	e030      	b.n	8007ce4 <USB_EPStartXfer+0x103c>
 8007c82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	785b      	ldrb	r3, [r3, #1]
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d128      	bne.n	8007ce4 <USB_EPStartXfer+0x103c>
 8007c92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007c96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cb6:	4413      	add	r3, r2
 8007cb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007cbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	011a      	lsls	r2, r3, #4
 8007cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007cce:	4413      	add	r3, r2
 8007cd0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007cd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ce2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007ce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ce8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	891b      	ldrh	r3, [r3, #8]
 8007cf0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6959      	ldr	r1, [r3, #20]
 8007d00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007d0a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007d0e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007d12:	6800      	ldr	r0, [r0, #0]
 8007d14:	f000 ff3e 	bl	8008b94 <USB_WritePMA>
          ep->xfer_buff += len;
 8007d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	695a      	ldr	r2, [r3, #20]
 8007d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d28:	441a      	add	r2, r3
 8007d2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8007d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6a1a      	ldr	r2, [r3, #32]
 8007d42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d90f      	bls.n	8007d72 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8007d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6a1a      	ldr	r2, [r3, #32]
 8007d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d62:	1ad2      	subs	r2, r2, r3
 8007d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	621a      	str	r2, [r3, #32]
 8007d70:	e00e      	b.n	8007d90 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8007d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8007d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8007d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80cc 	beq.w	8007f32 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007d9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007d9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007da8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	785b      	ldrb	r3, [r3, #1]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d178      	bne.n	8007eaa <USB_EPStartXfer+0x1202>
 8007db8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ddc:	4413      	add	r3, r2
 8007dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007de2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007de6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	011a      	lsls	r2, r3, #4
 8007df0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007df4:	4413      	add	r3, r2
 8007df6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007dfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d116      	bne.n	8007e34 <USB_EPStartXfer+0x118c>
 8007e06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e18:	801a      	strh	r2, [r3, #0]
 8007e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e064      	b.n	8007efe <USB_EPStartXfer+0x1256>
 8007e34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e38:	2b3e      	cmp	r3, #62	; 0x3e
 8007e3a:	d818      	bhi.n	8007e6e <USB_EPStartXfer+0x11c6>
 8007e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e40:	085b      	lsrs	r3, r3, #1
 8007e42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e4a:	f003 0301 	and.w	r3, r3, #1
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d004      	beq.n	8007e5c <USB_EPStartXfer+0x11b4>
 8007e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e56:	3301      	adds	r3, #1
 8007e58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	029b      	lsls	r3, r3, #10
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e047      	b.n	8007efe <USB_EPStartXfer+0x1256>
 8007e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007e7c:	f003 031f 	and.w	r3, r3, #31
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d104      	bne.n	8007e8e <USB_EPStartXfer+0x11e6>
 8007e84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e88:	3b01      	subs	r3, #1
 8007e8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	029b      	lsls	r3, r3, #10
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ea6:	801a      	strh	r2, [r3, #0]
 8007ea8:	e029      	b.n	8007efe <USB_EPStartXfer+0x1256>
 8007eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	785b      	ldrb	r3, [r3, #1]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d121      	bne.n	8007efe <USB_EPStartXfer+0x1256>
 8007eba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ebe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	461a      	mov	r2, r3
 8007ecc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007ed6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007eda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	011a      	lsls	r2, r3, #4
 8007ee4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007eee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007efc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007efe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	895b      	ldrh	r3, [r3, #10]
 8007f0a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	6959      	ldr	r1, [r3, #20]
 8007f1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007f24:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007f28:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8007f2c:	6800      	ldr	r0, [r0, #0]
 8007f2e:	f000 fe31 	bl	8008b94 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f54:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f60:	8013      	strh	r3, [r2, #0]
 8007f62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f66:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007f6a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f6e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f72:	8812      	ldrh	r2, [r2, #0]
 8007f74:	f082 0210 	eor.w	r2, r2, #16
 8007f78:	801a      	strh	r2, [r3, #0]
 8007f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f7e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007f82:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8007f86:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8007f8a:	8812      	ldrh	r2, [r2, #0]
 8007f8c:	f082 0220 	eor.w	r2, r2, #32
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	441a      	add	r2, r3
 8007fac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fb0:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8007fb4:	881b      	ldrh	r3, [r3, #0]
 8007fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fc6:	b29b      	uxth	r3, r3
 8007fc8:	8013      	strh	r3, [r2, #0]
 8007fca:	f000 bc9f 	b.w	800890c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	7b1b      	ldrb	r3, [r3, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f040 80ae 	bne.w	800813c <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699a      	ldr	r2, [r3, #24]
 8007fec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007ff0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	691b      	ldr	r3, [r3, #16]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d917      	bls.n	800802c <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8007ffc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008000:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800800c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008010:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800801c:	1ad2      	subs	r2, r2, r3
 800801e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	619a      	str	r2, [r3, #24]
 800802a:	e00e      	b.n	800804a <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800802c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800803c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008040:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2200      	movs	r2, #0
 8008048:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800804a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800804e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800805c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008066:	b29b      	uxth	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800806e:	4413      	add	r3, r2
 8008070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008074:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008078:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	011a      	lsls	r2, r3, #4
 8008082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008086:	4413      	add	r3, r2
 8008088:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800808c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008094:	2b00      	cmp	r3, #0
 8008096:	d116      	bne.n	80080c6 <USB_EPStartXfer+0x141e>
 8008098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080aa:	801a      	strh	r2, [r3, #0]
 80080ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080bc:	b29a      	uxth	r2, r3
 80080be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080c2:	801a      	strh	r2, [r3, #0]
 80080c4:	e3e8      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
 80080c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080ca:	2b3e      	cmp	r3, #62	; 0x3e
 80080cc:	d818      	bhi.n	8008100 <USB_EPStartXfer+0x1458>
 80080ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d2:	085b      	lsrs	r3, r3, #1
 80080d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080dc:	f003 0301 	and.w	r3, r3, #1
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d004      	beq.n	80080ee <USB_EPStartXfer+0x1446>
 80080e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080e8:	3301      	adds	r3, #1
 80080ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80080ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	029b      	lsls	r3, r3, #10
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	e3cb      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
 8008100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008104:	095b      	lsrs	r3, r3, #5
 8008106:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800810a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <USB_EPStartXfer+0x1478>
 8008116:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800811a:	3b01      	subs	r3, #1
 800811c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008120:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8008124:	b29b      	uxth	r3, r3
 8008126:	029b      	lsls	r3, r3, #10
 8008128:	b29b      	uxth	r3, r3
 800812a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800812e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008132:	b29a      	uxth	r2, r3
 8008134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008138:	801a      	strh	r2, [r3, #0]
 800813a:	e3ad      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800813c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	78db      	ldrb	r3, [r3, #3]
 8008148:	2b02      	cmp	r3, #2
 800814a:	f040 8200 	bne.w	800854e <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800814e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f040 8091 	bne.w	8008282 <USB_EPStartXfer+0x15da>
 8008160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800816e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008172:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800817c:	b29b      	uxth	r3, r3
 800817e:	461a      	mov	r2, r3
 8008180:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008184:	4413      	add	r3, r2
 8008186:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800818a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800818e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	011a      	lsls	r2, r3, #4
 8008198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800819c:	4413      	add	r3, r2
 800819e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80081a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d116      	bne.n	80081e4 <USB_EPStartXfer+0x153c>
 80081b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081ba:	881b      	ldrh	r3, [r3, #0]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081c8:	801a      	strh	r2, [r3, #0]
 80081ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081ce:	881b      	ldrh	r3, [r3, #0]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081da:	b29a      	uxth	r2, r3
 80081dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80081e0:	801a      	strh	r2, [r3, #0]
 80081e2:	e083      	b.n	80082ec <USB_EPStartXfer+0x1644>
 80081e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	2b3e      	cmp	r3, #62	; 0x3e
 80081f2:	d820      	bhi.n	8008236 <USB_EPStartXfer+0x158e>
 80081f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80081f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800820a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0301 	and.w	r3, r3, #1
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <USB_EPStartXfer+0x157c>
 800821a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800821e:	3301      	adds	r3, #1
 8008220:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008228:	b29b      	uxth	r3, r3
 800822a:	029b      	lsls	r3, r3, #10
 800822c:	b29a      	uxth	r2, r3
 800822e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008232:	801a      	strh	r2, [r3, #0]
 8008234:	e05a      	b.n	80082ec <USB_EPStartXfer+0x1644>
 8008236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800823a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	095b      	lsrs	r3, r3, #5
 8008244:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800824c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	2b00      	cmp	r3, #0
 800825a:	d104      	bne.n	8008266 <USB_EPStartXfer+0x15be>
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	3b01      	subs	r3, #1
 8008262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29b      	uxth	r3, r3
 8008270:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008274:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008278:	b29a      	uxth	r2, r3
 800827a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800827e:	801a      	strh	r2, [r3, #0]
 8008280:	e034      	b.n	80082ec <USB_EPStartXfer+0x1644>
 8008282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	785b      	ldrb	r3, [r3, #1]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d12c      	bne.n	80082ec <USB_EPStartXfer+0x1644>
 8008292:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008296:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	461a      	mov	r2, r3
 80082b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082b6:	4413      	add	r3, r2
 80082b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80082bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	011a      	lsls	r2, r3, #4
 80082ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082ce:	4413      	add	r3, r2
 80082d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80082d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	691b      	ldr	r3, [r3, #16]
 80082e4:	b29a      	uxth	r2, r3
 80082e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80082fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	785b      	ldrb	r3, [r3, #1]
 8008306:	2b00      	cmp	r3, #0
 8008308:	f040 8091 	bne.w	800842e <USB_EPStartXfer+0x1786>
 800830c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008310:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800831a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800831e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008328:	b29b      	uxth	r3, r3
 800832a:	461a      	mov	r2, r3
 800832c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008330:	4413      	add	r3, r2
 8008332:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800833a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	011a      	lsls	r2, r3, #4
 8008344:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008348:	4413      	add	r3, r2
 800834a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800834e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d116      	bne.n	8008390 <USB_EPStartXfer+0x16e8>
 8008362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800836e:	b29a      	uxth	r2, r3
 8008370:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008374:	801a      	strh	r2, [r3, #0]
 8008376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	b29b      	uxth	r3, r3
 800837e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008382:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008386:	b29a      	uxth	r2, r3
 8008388:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800838c:	801a      	strh	r2, [r3, #0]
 800838e:	e07c      	b.n	800848a <USB_EPStartXfer+0x17e2>
 8008390:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008394:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b3e      	cmp	r3, #62	; 0x3e
 800839e:	d820      	bhi.n	80083e2 <USB_EPStartXfer+0x173a>
 80083a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d004      	beq.n	80083d0 <USB_EPStartXfer+0x1728>
 80083c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083ca:	3301      	adds	r3, #1
 80083cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	029b      	lsls	r3, r3, #10
 80083d8:	b29a      	uxth	r2, r3
 80083da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	e053      	b.n	800848a <USB_EPStartXfer+0x17e2>
 80083e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80083f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 031f 	and.w	r3, r3, #31
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <USB_EPStartXfer+0x176a>
 8008408:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800840c:	3b01      	subs	r3, #1
 800840e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008412:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008416:	b29b      	uxth	r3, r3
 8008418:	029b      	lsls	r3, r3, #10
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008424:	b29a      	uxth	r2, r3
 8008426:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800842a:	801a      	strh	r2, [r3, #0]
 800842c:	e02d      	b.n	800848a <USB_EPStartXfer+0x17e2>
 800842e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	785b      	ldrb	r3, [r3, #1]
 800843a:	2b01      	cmp	r3, #1
 800843c:	d125      	bne.n	800848a <USB_EPStartXfer+0x17e2>
 800843e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008442:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800844c:	b29b      	uxth	r3, r3
 800844e:	461a      	mov	r2, r3
 8008450:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008454:	4413      	add	r3, r2
 8008456:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800845a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800845e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	011a      	lsls	r2, r3, #4
 8008468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800846c:	4413      	add	r3, r2
 800846e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800847a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	b29a      	uxth	r2, r3
 8008484:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008488:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800848a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800848e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	69db      	ldr	r3, [r3, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 81fe 	beq.w	8008898 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800849c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	881b      	ldrh	r3, [r3, #0]
 80084b8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d005      	beq.n	80084d4 <USB_EPStartXfer+0x182c>
 80084c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d10d      	bne.n	80084f0 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 81db 	bne.w	8008898 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80084e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80084e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 81d4 	bne.w	8008898 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80084f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80084fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4413      	add	r3, r2
 800850a:	881b      	ldrh	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008516:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800851a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800851e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	441a      	add	r2, r3
 8008534:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8008538:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008544:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008548:	b29b      	uxth	r3, r3
 800854a:	8013      	strh	r3, [r2, #0]
 800854c:	e1a4      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800854e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	78db      	ldrb	r3, [r3, #3]
 800855a:	2b01      	cmp	r3, #1
 800855c:	f040 819a 	bne.w	8008894 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	429a      	cmp	r2, r3
 800857a:	d917      	bls.n	80085ac <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800857c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800858c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	699a      	ldr	r2, [r3, #24]
 8008598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859c:	1ad2      	subs	r2, r2, r3
 800859e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	619a      	str	r2, [r3, #24]
 80085aa:	e00e      	b.n	80085ca <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 80085ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80085bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2200      	movs	r2, #0
 80085c8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80085ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	785b      	ldrb	r3, [r3, #1]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d178      	bne.n	80086cc <USB_EPStartXfer+0x1a24>
 80085da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80085e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80085ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	461a      	mov	r2, r3
 80085fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80085fe:	4413      	add	r3, r2
 8008600:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008604:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008608:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	011a      	lsls	r2, r3, #4
 8008612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008616:	4413      	add	r3, r2
 8008618:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800861c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d116      	bne.n	8008656 <USB_EPStartXfer+0x19ae>
 8008628:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008634:	b29a      	uxth	r2, r3
 8008636:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800863a:	801a      	strh	r2, [r3, #0]
 800863c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008640:	881b      	ldrh	r3, [r3, #0]
 8008642:	b29b      	uxth	r3, r3
 8008644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800864c:	b29a      	uxth	r2, r3
 800864e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008652:	801a      	strh	r2, [r3, #0]
 8008654:	e06b      	b.n	800872e <USB_EPStartXfer+0x1a86>
 8008656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800865a:	2b3e      	cmp	r3, #62	; 0x3e
 800865c:	d818      	bhi.n	8008690 <USB_EPStartXfer+0x19e8>
 800865e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008662:	085b      	lsrs	r3, r3, #1
 8008664:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d004      	beq.n	800867e <USB_EPStartXfer+0x19d6>
 8008674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008678:	3301      	adds	r3, #1
 800867a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800867e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008682:	b29b      	uxth	r3, r3
 8008684:	029b      	lsls	r3, r3, #10
 8008686:	b29a      	uxth	r2, r3
 8008688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800868c:	801a      	strh	r2, [r3, #0]
 800868e:	e04e      	b.n	800872e <USB_EPStartXfer+0x1a86>
 8008690:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008694:	095b      	lsrs	r3, r3, #5
 8008696:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800869a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d104      	bne.n	80086b0 <USB_EPStartXfer+0x1a08>
 80086a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086aa:	3b01      	subs	r3, #1
 80086ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80086b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	029b      	lsls	r3, r3, #10
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80086c8:	801a      	strh	r2, [r3, #0]
 80086ca:	e030      	b.n	800872e <USB_EPStartXfer+0x1a86>
 80086cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	785b      	ldrb	r3, [r3, #1]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d128      	bne.n	800872e <USB_EPStartXfer+0x1a86>
 80086dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80086ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	461a      	mov	r2, r3
 80086fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008700:	4413      	add	r3, r2
 8008702:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800870a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	011a      	lsls	r2, r3, #4
 8008714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008718:	4413      	add	r3, r2
 800871a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800871e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008726:	b29a      	uxth	r2, r3
 8008728:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800872c:	801a      	strh	r2, [r3, #0]
 800872e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008732:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800873c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	785b      	ldrb	r3, [r3, #1]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d178      	bne.n	800883e <USB_EPStartXfer+0x1b96>
 800874c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008750:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800875a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800875e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008768:	b29b      	uxth	r3, r3
 800876a:	461a      	mov	r2, r3
 800876c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008770:	4413      	add	r3, r2
 8008772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800877a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	011a      	lsls	r2, r3, #4
 8008784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008788:	4413      	add	r3, r2
 800878a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800878e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d116      	bne.n	80087c8 <USB_EPStartXfer+0x1b20>
 800879a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ac:	801a      	strh	r2, [r3, #0]
 80087ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087b2:	881b      	ldrh	r3, [r3, #0]
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087be:	b29a      	uxth	r2, r3
 80087c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	e067      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
 80087c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087cc:	2b3e      	cmp	r3, #62	; 0x3e
 80087ce:	d818      	bhi.n	8008802 <USB_EPStartXfer+0x1b5a>
 80087d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d004      	beq.n	80087f0 <USB_EPStartXfer+0x1b48>
 80087e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087ea:	3301      	adds	r3, #1
 80087ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	029b      	lsls	r3, r3, #10
 80087f8:	b29a      	uxth	r2, r3
 80087fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e04a      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
 8008802:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800880c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008810:	f003 031f 	and.w	r3, r3, #31
 8008814:	2b00      	cmp	r3, #0
 8008816:	d104      	bne.n	8008822 <USB_EPStartXfer+0x1b7a>
 8008818:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800881c:	3b01      	subs	r3, #1
 800881e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008826:	b29b      	uxth	r3, r3
 8008828:	029b      	lsls	r3, r3, #10
 800882a:	b29b      	uxth	r3, r3
 800882c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008834:	b29a      	uxth	r2, r3
 8008836:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e02c      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
 800883e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008842:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d124      	bne.n	8008898 <USB_EPStartXfer+0x1bf0>
 800884e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800885c:	b29b      	uxth	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008864:	4413      	add	r3, r2
 8008866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800886a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800886e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	011a      	lsls	r2, r3, #4
 8008878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800887c:	4413      	add	r3, r2
 800887e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800888a:	b29a      	uxth	r2, r3
 800888c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008890:	801a      	strh	r2, [r3, #0]
 8008892:	e001      	b.n	8008898 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	e03a      	b.n	800890e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800889c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4413      	add	r3, r2
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80088ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80088ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088ce:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80088d6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80088da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	441a      	add	r2, r3
 80088f4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80088f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008908:	b29b      	uxth	r3, r3
 800890a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	785b      	ldrb	r3, [r3, #1]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d020      	beq.n	800896c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	881b      	ldrh	r3, [r3, #0]
 8008936:	b29b      	uxth	r3, r3
 8008938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800893c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008940:	81bb      	strh	r3, [r7, #12]
 8008942:	89bb      	ldrh	r3, [r7, #12]
 8008944:	f083 0310 	eor.w	r3, r3, #16
 8008948:	81bb      	strh	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	89bb      	ldrh	r3, [r7, #12]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]
 800896a:	e01f      	b.n	80089ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	4413      	add	r3, r2
 8008976:	881b      	ldrh	r3, [r3, #0]
 8008978:	b29b      	uxth	r3, r3
 800897a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008982:	81fb      	strh	r3, [r7, #14]
 8008984:	89fb      	ldrh	r3, [r7, #14]
 8008986:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800898a:	81fb      	strh	r3, [r7, #14]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	89fb      	ldrh	r3, [r7, #14]
 8008998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bc80      	pop	{r7}
 80089b6:	4770      	bx	lr

080089b8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	7b1b      	ldrb	r3, [r3, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f040 809d 	bne.w	8008b06 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d04c      	beq.n	8008a6e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	881b      	ldrh	r3, [r3, #0]
 80089e0:	823b      	strh	r3, [r7, #16]
 80089e2:	8a3b      	ldrh	r3, [r7, #16]
 80089e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d01b      	beq.n	8008a24 <USB_EPClearStall+0x6c>
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a02:	81fb      	strh	r3, [r7, #14]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	441a      	add	r2, r3
 8008a0e:	89fb      	ldrh	r3, [r7, #14]
 8008a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a20:	b29b      	uxth	r3, r3
 8008a22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	78db      	ldrb	r3, [r3, #3]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d06c      	beq.n	8008b06 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a42:	81bb      	strh	r3, [r7, #12]
 8008a44:	89bb      	ldrh	r3, [r7, #12]
 8008a46:	f083 0320 	eor.w	r3, r3, #32
 8008a4a:	81bb      	strh	r3, [r7, #12]
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	441a      	add	r2, r3
 8008a56:	89bb      	ldrh	r3, [r7, #12]
 8008a58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a68:	b29b      	uxth	r3, r3
 8008a6a:	8013      	strh	r3, [r2, #0]
 8008a6c:	e04b      	b.n	8008b06 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	881b      	ldrh	r3, [r3, #0]
 8008a7a:	82fb      	strh	r3, [r7, #22]
 8008a7c:	8afb      	ldrh	r3, [r7, #22]
 8008a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d01b      	beq.n	8008abe <USB_EPClearStall+0x106>
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	881b      	ldrh	r3, [r3, #0]
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a9c:	82bb      	strh	r3, [r7, #20]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	441a      	add	r2, r3
 8008aa8:	8abb      	ldrh	r3, [r7, #20]
 8008aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ab2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	881b      	ldrh	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ad4:	827b      	strh	r3, [r7, #18]
 8008ad6:	8a7b      	ldrh	r3, [r7, #18]
 8008ad8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008adc:	827b      	strh	r3, [r7, #18]
 8008ade:	8a7b      	ldrh	r3, [r7, #18]
 8008ae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008ae4:	827b      	strh	r3, [r7, #18]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	441a      	add	r2, r3
 8008af0:	8a7b      	ldrh	r3, [r7, #18]
 8008af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008b06:	2300      	movs	r3, #0
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	371c      	adds	r7, #28
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bc80      	pop	{r7}
 8008b10:	4770      	bx	lr

08008b12 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008b12:	b480      	push	{r7}
 8008b14:	b083      	sub	sp, #12
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d103      	bne.n	8008b2c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2280      	movs	r2, #128	; 0x80
 8008b28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bc80      	pop	{r7}
 8008b36:	4770      	bx	lr

08008b38 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	370c      	adds	r7, #12
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr

08008b4c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	370c      	adds	r7, #12
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bc80      	pop	{r7}
 8008b5e:	4770      	bx	lr

08008b60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008b72:	68fb      	ldr	r3, [r7, #12]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3714      	adds	r7, #20
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bc80      	pop	{r7}
 8008b7c:	4770      	bx	lr

08008b7e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	b083      	sub	sp, #12
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bc80      	pop	{r7}
 8008b92:	4770      	bx	lr

08008b94 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b08d      	sub	sp, #52	; 0x34
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	80fb      	strh	r3, [r7, #6]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008baa:	88bb      	ldrh	r3, [r7, #4]
 8008bac:	3301      	adds	r3, #1
 8008bae:	085b      	lsrs	r3, r3, #1
 8008bb0:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008bba:	88fb      	ldrh	r3, [r7, #6]
 8008bbc:	005a      	lsls	r2, r3, #1
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bc6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8008bc8:	6a3b      	ldr	r3, [r7, #32]
 8008bca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bcc:	e01e      	b.n	8008c0c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8008bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	021b      	lsls	r3, r3, #8
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	461a      	mov	r2, r3
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	3302      	adds	r3, #2
 8008bfe:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8008c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c02:	3301      	adds	r3, #1
 8008c04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	3b01      	subs	r3, #1
 8008c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1dd      	bne.n	8008bce <USB_WritePMA+0x3a>
  }
}
 8008c12:	bf00      	nop
 8008c14:	bf00      	nop
 8008c16:	3734      	adds	r7, #52	; 0x34
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bc80      	pop	{r7}
 8008c1c:	4770      	bx	lr

08008c1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b08b      	sub	sp, #44	; 0x2c
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	80fb      	strh	r3, [r7, #6]
 8008c30:	4613      	mov	r3, r2
 8008c32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008c34:	88bb      	ldrh	r3, [r7, #4]
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	b29b      	uxth	r3, r3
 8008c3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008c44:	88fb      	ldrh	r3, [r7, #6]
 8008c46:	005a      	lsls	r2, r3, #1
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c50:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	627b      	str	r3, [r7, #36]	; 0x24
 8008c56:	e01b      	b.n	8008c90 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008c60:	6a3b      	ldr	r3, [r7, #32]
 8008c62:	3302      	adds	r3, #2
 8008c64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	b2da      	uxtb	r2, r3
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	3301      	adds	r3, #1
 8008c72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	0a1b      	lsrs	r3, r3, #8
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	3301      	adds	r3, #1
 8008c82:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	3302      	adds	r3, #2
 8008c88:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e0      	bne.n	8008c58 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8008c96:	88bb      	ldrh	r3, [r7, #4]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d007      	beq.n	8008cb2 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8008ca2:	6a3b      	ldr	r3, [r7, #32]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	b2da      	uxtb	r2, r3
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	701a      	strb	r2, [r3, #0]
  }
}
 8008cb2:	bf00      	nop
 8008cb4:	372c      	adds	r7, #44	; 0x2c
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bc80      	pop	{r7}
 8008cba:	4770      	bx	lr

08008cbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	7c1b      	ldrb	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d115      	bne.n	8008d00 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008cd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cd8:	2202      	movs	r2, #2
 8008cda:	2181      	movs	r1, #129	; 0x81
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 fe86 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cec:	2202      	movs	r2, #2
 8008cee:	2101      	movs	r1, #1
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f001 fe7c 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8008cfe:	e012      	b.n	8008d26 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008d00:	2340      	movs	r3, #64	; 0x40
 8008d02:	2202      	movs	r2, #2
 8008d04:	2181      	movs	r1, #129	; 0x81
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f001 fe71 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8008d12:	2340      	movs	r3, #64	; 0x40
 8008d14:	2202      	movs	r2, #2
 8008d16:	2101      	movs	r1, #1
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f001 fe68 	bl	800a9ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2201      	movs	r2, #1
 8008d22:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008d26:	2308      	movs	r3, #8
 8008d28:	2203      	movs	r2, #3
 8008d2a:	2182      	movs	r1, #130	; 0x82
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f001 fe5e 	bl	800a9ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2201      	movs	r2, #1
 8008d36:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008d38:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008d3c:	f001 ff7e 	bl	800ac3c <USBD_static_malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008d52:	2301      	movs	r3, #1
 8008d54:	73fb      	strb	r3, [r7, #15]
 8008d56:	e026      	b.n	8008da6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	7c1b      	ldrb	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d109      	bne.n	8008d96 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d8c:	2101      	movs	r1, #1
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f001 ff1e 	bl	800abd0 <USBD_LL_PrepareReceive>
 8008d94:	e007      	b.n	8008da6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008d9c:	2340      	movs	r3, #64	; 0x40
 8008d9e:	2101      	movs	r1, #1
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f001 ff15 	bl	800abd0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	460b      	mov	r3, r1
 8008dba:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008dc0:	2181      	movs	r1, #129	; 0x81
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f001 fe39 	bl	800aa3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008dce:	2101      	movs	r1, #1
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f001 fe32 	bl	800aa3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008dde:	2182      	movs	r1, #130	; 0x82
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 fe2a 	bl	800aa3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00e      	beq.n	8008e14 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 ff24 	bl	800ac54 <USBD_static_free>
    pdev->pClassData = NULL;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b086      	sub	sp, #24
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
 8008e26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e2e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d039      	beq.n	8008ebc <USBD_CDC_Setup+0x9e>
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	d17f      	bne.n	8008f4c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	88db      	ldrh	r3, [r3, #6]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d029      	beq.n	8008ea8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	b25b      	sxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	da11      	bge.n	8008e82 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e64:	689b      	ldr	r3, [r3, #8]
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8008e6a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008e6c:	683a      	ldr	r2, [r7, #0]
 8008e6e:	88d2      	ldrh	r2, [r2, #6]
 8008e70:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e72:	6939      	ldr	r1, [r7, #16]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	88db      	ldrh	r3, [r3, #6]
 8008e78:	461a      	mov	r2, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f001 fa09 	bl	800a292 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008e80:	e06b      	b.n	8008f5a <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	785a      	ldrb	r2, [r3, #1]
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	88db      	ldrh	r3, [r3, #6]
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008e98:	6939      	ldr	r1, [r7, #16]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	88db      	ldrh	r3, [r3, #6]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 fa24 	bl	800a2ee <USBD_CtlPrepareRx>
      break;
 8008ea6:	e058      	b.n	8008f5a <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	683a      	ldr	r2, [r7, #0]
 8008eb2:	7850      	ldrb	r0, [r2, #1]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	6839      	ldr	r1, [r7, #0]
 8008eb8:	4798      	blx	r3
      break;
 8008eba:	e04e      	b.n	8008f5a <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	785b      	ldrb	r3, [r3, #1]
 8008ec0:	2b0b      	cmp	r3, #11
 8008ec2:	d02e      	beq.n	8008f22 <USBD_CDC_Setup+0x104>
 8008ec4:	2b0b      	cmp	r3, #11
 8008ec6:	dc38      	bgt.n	8008f3a <USBD_CDC_Setup+0x11c>
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d002      	beq.n	8008ed2 <USBD_CDC_Setup+0xb4>
 8008ecc:	2b0a      	cmp	r3, #10
 8008ece:	d014      	beq.n	8008efa <USBD_CDC_Setup+0xdc>
 8008ed0:	e033      	b.n	8008f3a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d107      	bne.n	8008eec <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008edc:	f107 030c 	add.w	r3, r7, #12
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 f9d4 	bl	800a292 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008eea:	e02e      	b.n	8008f4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f001 f965 	bl	800a1be <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef8:	e027      	b.n	8008f4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d107      	bne.n	8008f14 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f04:	f107 030f 	add.w	r3, r7, #15
 8008f08:	2201      	movs	r2, #1
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 f9c0 	bl	800a292 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f12:	e01a      	b.n	8008f4a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 f951 	bl	800a1be <USBD_CtlError>
            ret = USBD_FAIL;
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	75fb      	strb	r3, [r7, #23]
          break;
 8008f20:	e013      	b.n	8008f4a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d00d      	beq.n	8008f48 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 f945 	bl	800a1be <USBD_CtlError>
            ret = USBD_FAIL;
 8008f34:	2302      	movs	r3, #2
 8008f36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f38:	e006      	b.n	8008f48 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 f93e 	bl	800a1be <USBD_CtlError>
          ret = USBD_FAIL;
 8008f42:	2302      	movs	r3, #2
 8008f44:	75fb      	strb	r3, [r7, #23]
          break;
 8008f46:	e000      	b.n	8008f4a <USBD_CDC_Setup+0x12c>
          break;
 8008f48:	bf00      	nop
      }
      break;
 8008f4a:	e006      	b.n	8008f5a <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f001 f935 	bl	800a1be <USBD_CtlError>
      ret = USBD_FAIL;
 8008f54:	2302      	movs	r3, #2
 8008f56:	75fb      	strb	r3, [r7, #23]
      break;
 8008f58:	bf00      	nop
  }

  return ret;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3718      	adds	r7, #24
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f76:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008f7e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d03a      	beq.n	8009000 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008f8a:	78fa      	ldrb	r2, [r7, #3]
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	331c      	adds	r3, #28
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d029      	beq.n	8008ff4 <USBD_CDC_DataIn+0x90>
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	331c      	adds	r3, #28
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	78f9      	ldrb	r1, [r7, #3]
 8008fb4:	68b8      	ldr	r0, [r7, #8]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	00db      	lsls	r3, r3, #3
 8008fbe:	4403      	add	r3, r0
 8008fc0:	3338      	adds	r3, #56	; 0x38
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fc8:	fb01 f303 	mul.w	r3, r1, r3
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d110      	bne.n	8008ff4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008fd2:	78fa      	ldrb	r2, [r7, #3]
 8008fd4:	6879      	ldr	r1, [r7, #4]
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	440b      	add	r3, r1
 8008fe0:	331c      	adds	r3, #28
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008fe6:	78f9      	ldrb	r1, [r7, #3]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2200      	movs	r2, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f001 fdcc 	bl	800ab8a <USBD_LL_Transmit>
 8008ff2:	e003      	b.n	8008ffc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	e000      	b.n	8009002 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009000:	2302      	movs	r3, #2
  }
}
 8009002:	4618      	mov	r0, r3
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800901c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800901e:	78fb      	ldrb	r3, [r7, #3]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fdf7 	bl	800ac16 <USBD_LL_GetRxDataSize>
 8009028:	4602      	mov	r2, r0
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00d      	beq.n	8009056 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	68fa      	ldr	r2, [r7, #12]
 8009044:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800904e:	4611      	mov	r1, r2
 8009050:	4798      	blx	r3

    return USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	e000      	b.n	8009058 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009056:	2302      	movs	r3, #2
  }
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800906e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009076:	2b00      	cmp	r3, #0
 8009078:	d015      	beq.n	80090a6 <USBD_CDC_EP0_RxReady+0x46>
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009080:	2bff      	cmp	r3, #255	; 0xff
 8009082:	d010      	beq.n	80090a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009092:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009094:	68fa      	ldr	r2, [r7, #12]
 8009096:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800909a:	b292      	uxth	r2, r2
 800909c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3710      	adds	r7, #16
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2243      	movs	r2, #67	; 0x43
 80090bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80090be:	4b03      	ldr	r3, [pc, #12]	; (80090cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	370c      	adds	r7, #12
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bc80      	pop	{r7}
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	200000a8 	.word	0x200000a8

080090d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2243      	movs	r2, #67	; 0x43
 80090dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bc80      	pop	{r7}
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	20000064 	.word	0x20000064

080090f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2243      	movs	r2, #67	; 0x43
 80090fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80090fe:	4b03      	ldr	r3, [pc, #12]	; (800910c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009100:	4618      	mov	r0, r3
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	bc80      	pop	{r7}
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	200000ec 	.word	0x200000ec

08009110 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	220a      	movs	r2, #10
 800911c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800911e:	4b03      	ldr	r3, [pc, #12]	; (800912c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009120:	4618      	mov	r0, r3
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	bc80      	pop	{r7}
 8009128:	4770      	bx	lr
 800912a:	bf00      	nop
 800912c:	20000020 	.word	0x20000020

08009130 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d005      	beq.n	8009150 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	683a      	ldr	r2, [r7, #0]
 8009148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009150:	7bfb      	ldrb	r3, [r7, #15]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3714      	adds	r7, #20
 8009156:	46bd      	mov	sp, r7
 8009158:	bc80      	pop	{r7}
 800915a:	4770      	bx	lr

0800915c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800915c:	b480      	push	{r7}
 800915e:	b087      	sub	sp, #28
 8009160:	af00      	add	r7, sp, #0
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	60b9      	str	r1, [r7, #8]
 8009166:	4613      	mov	r3, r2
 8009168:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009170:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800917a:	88fa      	ldrh	r2, [r7, #6]
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	bc80      	pop	{r7}
 800918c:	4770      	bx	lr

0800918e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800918e:	b480      	push	{r7}
 8009190:	b085      	sub	sp, #20
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800919e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	683a      	ldr	r2, [r7, #0]
 80091a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80091a8:	2300      	movs	r3, #0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3714      	adds	r7, #20
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bc80      	pop	{r7}
 80091b2:	4770      	bx	lr

080091b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d01c      	beq.n	8009208 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d115      	bne.n	8009204 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2201      	movs	r2, #1
 80091dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	2181      	movs	r1, #129	; 0x81
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f001 fcc5 	bl	800ab8a <USBD_LL_Transmit>

      return USBD_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	e002      	b.n	800920a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009204:	2301      	movs	r3, #1
 8009206:	e000      	b.n	800920a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009208:	2302      	movs	r3, #2
  }
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009220:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009228:	2b00      	cmp	r3, #0
 800922a:	d017      	beq.n	800925c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	7c1b      	ldrb	r3, [r3, #16]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800923a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800923e:	2101      	movs	r1, #1
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 fcc5 	bl	800abd0 <USBD_LL_PrepareReceive>
 8009246:	e007      	b.n	8009258 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800924e:	2340      	movs	r3, #64	; 0x40
 8009250:	2101      	movs	r1, #1
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f001 fcbc 	bl	800abd0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009258:	2300      	movs	r3, #0
 800925a:	e000      	b.n	800925e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800925c:	2302      	movs	r3, #2
  }
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800927a:	2302      	movs	r3, #2
 800927c:	e01a      	b.n	80092b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	68ba      	ldr	r2, [r7, #8]
 800929a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	79fa      	ldrb	r2, [r7, #7]
 80092aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f001 fb29 	bl	800a904 <USBD_LL_Init>

  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d006      	beq.n	80092de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
 80092dc:	e001      	b.n	80092e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80092de:	2302      	movs	r3, #2
 80092e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80092e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3714      	adds	r7, #20
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr

080092ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b082      	sub	sp, #8
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f001 fb5e 	bl	800a9b8 <USBD_LL_Start>

  return USBD_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3708      	adds	r7, #8
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	bc80      	pop	{r7}
 8009318:	4770      	bx	lr

0800931a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b084      	sub	sp, #16
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
 8009322:	460b      	mov	r3, r1
 8009324:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009326:	2302      	movs	r3, #2
 8009328:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00c      	beq.n	800934e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	78fa      	ldrb	r2, [r7, #3]
 800933e:	4611      	mov	r1, r2
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	4798      	blx	r3
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d101      	bne.n	800934e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800934e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	78fa      	ldrb	r2, [r7, #3]
 800936e:	4611      	mov	r1, r2
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	4798      	blx	r3

  return USBD_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fed8 	bl	800a146 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80093a4:	461a      	mov	r2, r3
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093b2:	f003 031f 	and.w	r3, r3, #31
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d016      	beq.n	80093e8 <USBD_LL_SetupStage+0x6a>
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d81c      	bhi.n	80093f8 <USBD_LL_SetupStage+0x7a>
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d002      	beq.n	80093c8 <USBD_LL_SetupStage+0x4a>
 80093c2:	2b01      	cmp	r3, #1
 80093c4:	d008      	beq.n	80093d8 <USBD_LL_SetupStage+0x5a>
 80093c6:	e017      	b.n	80093f8 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 f9cb 	bl	800976c <USBD_StdDevReq>
      break;
 80093d6:	e01a      	b.n	800940e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 fa2d 	bl	8009840 <USBD_StdItfReq>
      break;
 80093e6:	e012      	b.n	800940e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 fa6d 	bl	80098d0 <USBD_StdEPReq>
      break;
 80093f6:	e00a      	b.n	800940e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80093fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009402:	b2db      	uxtb	r3, r3
 8009404:	4619      	mov	r1, r3
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f001 fb36 	bl	800aa78 <USBD_LL_StallEP>
      break;
 800940c:	bf00      	nop
  }

  return USBD_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b086      	sub	sp, #24
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	460b      	mov	r3, r1
 8009422:	607a      	str	r2, [r7, #4]
 8009424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009426:	7afb      	ldrb	r3, [r7, #11]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d14b      	bne.n	80094c4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009432:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800943a:	2b03      	cmp	r3, #3
 800943c:	d134      	bne.n	80094a8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	68da      	ldr	r2, [r3, #12]
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	429a      	cmp	r2, r3
 8009448:	d919      	bls.n	800947e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	68da      	ldr	r2, [r3, #12]
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	68da      	ldr	r2, [r3, #12]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009460:	429a      	cmp	r2, r3
 8009462:	d203      	bcs.n	800946c <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009468:	b29b      	uxth	r3, r3
 800946a:	e002      	b.n	8009472 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009470:	b29b      	uxth	r3, r3
 8009472:	461a      	mov	r2, r3
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 ff57 	bl	800a32a <USBD_CtlContinueRx>
 800947c:	e038      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00a      	beq.n	80094a0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009490:	2b03      	cmp	r3, #3
 8009492:	d105      	bne.n	80094a0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 ff54 	bl	800a34e <USBD_CtlSendStatus>
 80094a6:	e023      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d11e      	bne.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80094ba:	2100      	movs	r1, #0
 80094bc:	68f8      	ldr	r0, [r7, #12]
 80094be:	f001 fadb 	bl	800aa78 <USBD_LL_StallEP>
 80094c2:	e015      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d00d      	beq.n	80094ec <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d108      	bne.n	80094ec <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	7afa      	ldrb	r2, [r7, #11]
 80094e4:	4611      	mov	r1, r2
 80094e6:	68f8      	ldr	r0, [r7, #12]
 80094e8:	4798      	blx	r3
 80094ea:	e001      	b.n	80094f0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80094ec:	2302      	movs	r3, #2
 80094ee:	e000      	b.n	80094f2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80094f0:	2300      	movs	r3, #0
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3718      	adds	r7, #24
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b086      	sub	sp, #24
 80094fe:	af00      	add	r7, sp, #0
 8009500:	60f8      	str	r0, [r7, #12]
 8009502:	460b      	mov	r3, r1
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009508:	7afb      	ldrb	r3, [r7, #11]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d17f      	bne.n	800960e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3314      	adds	r3, #20
 8009512:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800951a:	2b02      	cmp	r3, #2
 800951c:	d15c      	bne.n	80095d8 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	68da      	ldr	r2, [r3, #12]
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	429a      	cmp	r2, r3
 8009528:	d915      	bls.n	8009556 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	68da      	ldr	r2, [r3, #12]
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	1ad2      	subs	r2, r2, r3
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	b29b      	uxth	r3, r3
 800953e:	461a      	mov	r2, r3
 8009540:	6879      	ldr	r1, [r7, #4]
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fec1 	bl	800a2ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009548:	2300      	movs	r3, #0
 800954a:	2200      	movs	r2, #0
 800954c:	2100      	movs	r1, #0
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f001 fb3e 	bl	800abd0 <USBD_LL_PrepareReceive>
 8009554:	e04e      	b.n	80095f4 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	6912      	ldr	r2, [r2, #16]
 800955e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009562:	fb01 f202 	mul.w	r2, r1, r2
 8009566:	1a9b      	subs	r3, r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11c      	bne.n	80095a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	689a      	ldr	r2, [r3, #8]
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009574:	429a      	cmp	r2, r3
 8009576:	d316      	bcc.n	80095a6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009582:	429a      	cmp	r2, r3
 8009584:	d20f      	bcs.n	80095a6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009586:	2200      	movs	r2, #0
 8009588:	2100      	movs	r1, #0
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 fe9d 	bl	800a2ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2200      	movs	r2, #0
 8009594:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009598:	2300      	movs	r3, #0
 800959a:	2200      	movs	r2, #0
 800959c:	2100      	movs	r1, #0
 800959e:	68f8      	ldr	r0, [r7, #12]
 80095a0:	f001 fb16 	bl	800abd0 <USBD_LL_PrepareReceive>
 80095a4:	e026      	b.n	80095f4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80095b8:	2b03      	cmp	r3, #3
 80095ba:	d105      	bne.n	80095c8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80095c8:	2180      	movs	r1, #128	; 0x80
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f001 fa54 	bl	800aa78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f000 fecf 	bl	800a374 <USBD_CtlReceiveStatus>
 80095d6:	e00d      	b.n	80095f4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095de:	2b04      	cmp	r3, #4
 80095e0:	d004      	beq.n	80095ec <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d103      	bne.n	80095f4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80095ec:	2180      	movs	r1, #128	; 0x80
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f001 fa42 	bl	800aa78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d11d      	bne.n	800963a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f7ff fe81 	bl	8009306 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800960c:	e015      	b.n	800963a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009614:	695b      	ldr	r3, [r3, #20]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d00d      	beq.n	8009636 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009620:	2b03      	cmp	r3, #3
 8009622:	d108      	bne.n	8009636 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800962a:	695b      	ldr	r3, [r3, #20]
 800962c:	7afa      	ldrb	r2, [r7, #11]
 800962e:	4611      	mov	r1, r2
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	4798      	blx	r3
 8009634:	e001      	b.n	800963a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009636:	2302      	movs	r3, #2
 8009638:	e000      	b.n	800963c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800964c:	2340      	movs	r3, #64	; 0x40
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f9cb 	bl	800a9ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2240      	movs	r2, #64	; 0x40
 8009664:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009668:	2340      	movs	r3, #64	; 0x40
 800966a:	2200      	movs	r2, #0
 800966c:	2180      	movs	r1, #128	; 0x80
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 f9bd 	bl	800a9ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2240      	movs	r2, #64	; 0x40
 800967e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d009      	beq.n	80096bc <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	6852      	ldr	r2, [r2, #4]
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	4611      	mov	r1, r2
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	4798      	blx	r3
  }

  return USBD_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}

080096c6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80096c6:	b480      	push	{r7}
 80096c8:	b083      	sub	sp, #12
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	460b      	mov	r3, r1
 80096d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	78fa      	ldrb	r2, [r7, #3]
 80096d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	bc80      	pop	{r7}
 80096e2:	4770      	bx	lr

080096e4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2204      	movs	r2, #4
 80096fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009700:	2300      	movs	r3, #0
}
 8009702:	4618      	mov	r0, r3
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	bc80      	pop	{r7}
 800970a:	4770      	bx	lr

0800970c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800971a:	2b04      	cmp	r3, #4
 800971c:	d105      	bne.n	800972a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	bc80      	pop	{r7}
 8009734:	4770      	bx	lr

08009736 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009736:	b580      	push	{r7, lr}
 8009738:	b082      	sub	sp, #8
 800973a:	af00      	add	r7, sp, #0
 800973c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009744:	2b03      	cmp	r3, #3
 8009746:	d10b      	bne.n	8009760 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d005      	beq.n	8009760 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009776:	2300      	movs	r3, #0
 8009778:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009782:	2b40      	cmp	r3, #64	; 0x40
 8009784:	d005      	beq.n	8009792 <USBD_StdDevReq+0x26>
 8009786:	2b40      	cmp	r3, #64	; 0x40
 8009788:	d84f      	bhi.n	800982a <USBD_StdDevReq+0xbe>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <USBD_StdDevReq+0x36>
 800978e:	2b20      	cmp	r3, #32
 8009790:	d14b      	bne.n	800982a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	4798      	blx	r3
      break;
 80097a0:	e048      	b.n	8009834 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	785b      	ldrb	r3, [r3, #1]
 80097a6:	2b09      	cmp	r3, #9
 80097a8:	d839      	bhi.n	800981e <USBD_StdDevReq+0xb2>
 80097aa:	a201      	add	r2, pc, #4	; (adr r2, 80097b0 <USBD_StdDevReq+0x44>)
 80097ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b0:	08009801 	.word	0x08009801
 80097b4:	08009815 	.word	0x08009815
 80097b8:	0800981f 	.word	0x0800981f
 80097bc:	0800980b 	.word	0x0800980b
 80097c0:	0800981f 	.word	0x0800981f
 80097c4:	080097e3 	.word	0x080097e3
 80097c8:	080097d9 	.word	0x080097d9
 80097cc:	0800981f 	.word	0x0800981f
 80097d0:	080097f7 	.word	0x080097f7
 80097d4:	080097ed 	.word	0x080097ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9dc 	bl	8009b98 <USBD_GetDescriptor>
          break;
 80097e0:	e022      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80097e2:	6839      	ldr	r1, [r7, #0]
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fb3f 	bl	8009e68 <USBD_SetAddress>
          break;
 80097ea:	e01d      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fb7e 	bl	8009ef0 <USBD_SetConfig>
          break;
 80097f4:	e018      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fc07 	bl	800a00c <USBD_GetConfig>
          break;
 80097fe:	e013      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009800:	6839      	ldr	r1, [r7, #0]
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fc37 	bl	800a076 <USBD_GetStatus>
          break;
 8009808:	e00e      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800980a:	6839      	ldr	r1, [r7, #0]
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fc65 	bl	800a0dc <USBD_SetFeature>
          break;
 8009812:	e009      	b.n	8009828 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009814:	6839      	ldr	r1, [r7, #0]
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f000 fc74 	bl	800a104 <USBD_ClrFeature>
          break;
 800981c:	e004      	b.n	8009828 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800981e:	6839      	ldr	r1, [r7, #0]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 fccc 	bl	800a1be <USBD_CtlError>
          break;
 8009826:	bf00      	nop
      }
      break;
 8009828:	e004      	b.n	8009834 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fcc6 	bl	800a1be <USBD_CtlError>
      break;
 8009832:	bf00      	nop
  }

  return ret;
 8009834:	7bfb      	ldrb	r3, [r7, #15]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop

08009840 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009856:	2b40      	cmp	r3, #64	; 0x40
 8009858:	d005      	beq.n	8009866 <USBD_StdItfReq+0x26>
 800985a:	2b40      	cmp	r3, #64	; 0x40
 800985c:	d82e      	bhi.n	80098bc <USBD_StdItfReq+0x7c>
 800985e:	2b00      	cmp	r3, #0
 8009860:	d001      	beq.n	8009866 <USBD_StdItfReq+0x26>
 8009862:	2b20      	cmp	r3, #32
 8009864:	d12a      	bne.n	80098bc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800986c:	3b01      	subs	r3, #1
 800986e:	2b02      	cmp	r3, #2
 8009870:	d81d      	bhi.n	80098ae <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	889b      	ldrh	r3, [r3, #4]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	2b01      	cmp	r3, #1
 800987a:	d813      	bhi.n	80098a4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	6839      	ldr	r1, [r7, #0]
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	88db      	ldrh	r3, [r3, #6]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d110      	bne.n	80098b8 <USBD_StdItfReq+0x78>
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10d      	bne.n	80098b8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 fd56 	bl	800a34e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80098a2:	e009      	b.n	80098b8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fc89 	bl	800a1be <USBD_CtlError>
          break;
 80098ac:	e004      	b.n	80098b8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80098ae:	6839      	ldr	r1, [r7, #0]
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 fc84 	bl	800a1be <USBD_CtlError>
          break;
 80098b6:	e000      	b.n	80098ba <USBD_StdItfReq+0x7a>
          break;
 80098b8:	bf00      	nop
      }
      break;
 80098ba:	e004      	b.n	80098c6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fc7d 	bl	800a1be <USBD_CtlError>
      break;
 80098c4:	bf00      	nop
  }

  return USBD_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80098da:	2300      	movs	r3, #0
 80098dc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	889b      	ldrh	r3, [r3, #4]
 80098e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098ec:	2b40      	cmp	r3, #64	; 0x40
 80098ee:	d007      	beq.n	8009900 <USBD_StdEPReq+0x30>
 80098f0:	2b40      	cmp	r3, #64	; 0x40
 80098f2:	f200 8146 	bhi.w	8009b82 <USBD_StdEPReq+0x2b2>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <USBD_StdEPReq+0x40>
 80098fa:	2b20      	cmp	r3, #32
 80098fc:	f040 8141 	bne.w	8009b82 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	4798      	blx	r3
      break;
 800990e:	e13d      	b.n	8009b8c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009918:	2b20      	cmp	r3, #32
 800991a:	d10a      	bne.n	8009932 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	4798      	blx	r3
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
 8009930:	e12d      	b.n	8009b8e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b03      	cmp	r3, #3
 8009938:	d007      	beq.n	800994a <USBD_StdEPReq+0x7a>
 800993a:	2b03      	cmp	r3, #3
 800993c:	f300 811b 	bgt.w	8009b76 <USBD_StdEPReq+0x2a6>
 8009940:	2b00      	cmp	r3, #0
 8009942:	d072      	beq.n	8009a2a <USBD_StdEPReq+0x15a>
 8009944:	2b01      	cmp	r3, #1
 8009946:	d03a      	beq.n	80099be <USBD_StdEPReq+0xee>
 8009948:	e115      	b.n	8009b76 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009950:	2b02      	cmp	r3, #2
 8009952:	d002      	beq.n	800995a <USBD_StdEPReq+0x8a>
 8009954:	2b03      	cmp	r3, #3
 8009956:	d015      	beq.n	8009984 <USBD_StdEPReq+0xb4>
 8009958:	e02b      	b.n	80099b2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800995a:	7bbb      	ldrb	r3, [r7, #14]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00c      	beq.n	800997a <USBD_StdEPReq+0xaa>
 8009960:	7bbb      	ldrb	r3, [r7, #14]
 8009962:	2b80      	cmp	r3, #128	; 0x80
 8009964:	d009      	beq.n	800997a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8009966:	7bbb      	ldrb	r3, [r7, #14]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f001 f884 	bl	800aa78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009970:	2180      	movs	r1, #128	; 0x80
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f001 f880 	bl	800aa78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009978:	e020      	b.n	80099bc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800997a:	6839      	ldr	r1, [r7, #0]
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fc1e 	bl	800a1be <USBD_CtlError>
              break;
 8009982:	e01b      	b.n	80099bc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	885b      	ldrh	r3, [r3, #2]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10e      	bne.n	80099aa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d00b      	beq.n	80099aa <USBD_StdEPReq+0xda>
 8009992:	7bbb      	ldrb	r3, [r7, #14]
 8009994:	2b80      	cmp	r3, #128	; 0x80
 8009996:	d008      	beq.n	80099aa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	88db      	ldrh	r3, [r3, #6]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d104      	bne.n	80099aa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80099a0:	7bbb      	ldrb	r3, [r7, #14]
 80099a2:	4619      	mov	r1, r3
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f001 f867 	bl	800aa78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fccf 	bl	800a34e <USBD_CtlSendStatus>

              break;
 80099b0:	e004      	b.n	80099bc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80099b2:	6839      	ldr	r1, [r7, #0]
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fc02 	bl	800a1be <USBD_CtlError>
              break;
 80099ba:	bf00      	nop
          }
          break;
 80099bc:	e0e0      	b.n	8009b80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d002      	beq.n	80099ce <USBD_StdEPReq+0xfe>
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d015      	beq.n	80099f8 <USBD_StdEPReq+0x128>
 80099cc:	e026      	b.n	8009a1c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00c      	beq.n	80099ee <USBD_StdEPReq+0x11e>
 80099d4:	7bbb      	ldrb	r3, [r7, #14]
 80099d6:	2b80      	cmp	r3, #128	; 0x80
 80099d8:	d009      	beq.n	80099ee <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80099da:	7bbb      	ldrb	r3, [r7, #14]
 80099dc:	4619      	mov	r1, r3
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 f84a 	bl	800aa78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80099e4:	2180      	movs	r1, #128	; 0x80
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f001 f846 	bl	800aa78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099ec:	e01c      	b.n	8009a28 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 fbe4 	bl	800a1be <USBD_CtlError>
              break;
 80099f6:	e017      	b.n	8009a28 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	885b      	ldrh	r3, [r3, #2]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d112      	bne.n	8009a26 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
 8009a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d004      	beq.n	8009a14 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 f851 	bl	800aab6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 fc9a 	bl	800a34e <USBD_CtlSendStatus>
              }
              break;
 8009a1a:	e004      	b.n	8009a26 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8009a1c:	6839      	ldr	r1, [r7, #0]
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 fbcd 	bl	800a1be <USBD_CtlError>
              break;
 8009a24:	e000      	b.n	8009a28 <USBD_StdEPReq+0x158>
              break;
 8009a26:	bf00      	nop
          }
          break;
 8009a28:	e0aa      	b.n	8009b80 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	d002      	beq.n	8009a3a <USBD_StdEPReq+0x16a>
 8009a34:	2b03      	cmp	r3, #3
 8009a36:	d032      	beq.n	8009a9e <USBD_StdEPReq+0x1ce>
 8009a38:	e097      	b.n	8009b6a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a3a:	7bbb      	ldrb	r3, [r7, #14]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d007      	beq.n	8009a50 <USBD_StdEPReq+0x180>
 8009a40:	7bbb      	ldrb	r3, [r7, #14]
 8009a42:	2b80      	cmp	r3, #128	; 0x80
 8009a44:	d004      	beq.n	8009a50 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8009a46:	6839      	ldr	r1, [r7, #0]
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fbb8 	bl	800a1be <USBD_CtlError>
                break;
 8009a4e:	e091      	b.n	8009b74 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	da0b      	bge.n	8009a70 <USBD_StdEPReq+0x1a0>
 8009a58:	7bbb      	ldrb	r3, [r7, #14]
 8009a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a5e:	4613      	mov	r3, r2
 8009a60:	009b      	lsls	r3, r3, #2
 8009a62:	4413      	add	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	3310      	adds	r3, #16
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	e00b      	b.n	8009a88 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a70:	7bbb      	ldrb	r3, [r7, #14]
 8009a72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a82:	687a      	ldr	r2, [r7, #4]
 8009a84:	4413      	add	r3, r2
 8009a86:	3304      	adds	r3, #4
 8009a88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	2202      	movs	r2, #2
 8009a94:	4619      	mov	r1, r3
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fbfb 	bl	800a292 <USBD_CtlSendData>
              break;
 8009a9c:	e06a      	b.n	8009b74 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	da11      	bge.n	8009aca <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aa6:	7bbb      	ldrb	r3, [r7, #14]
 8009aa8:	f003 020f 	and.w	r2, r3, #15
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	009b      	lsls	r3, r3, #2
 8009ab2:	4413      	add	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	3318      	adds	r3, #24
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d117      	bne.n	8009af0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ac0:	6839      	ldr	r1, [r7, #0]
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fb7b 	bl	800a1be <USBD_CtlError>
                  break;
 8009ac8:	e054      	b.n	8009b74 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009aca:	7bbb      	ldrb	r3, [r7, #14]
 8009acc:	f003 020f 	and.w	r2, r3, #15
 8009ad0:	6879      	ldr	r1, [r7, #4]
 8009ad2:	4613      	mov	r3, r2
 8009ad4:	009b      	lsls	r3, r3, #2
 8009ad6:	4413      	add	r3, r2
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	440b      	add	r3, r1
 8009adc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d104      	bne.n	8009af0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fb68 	bl	800a1be <USBD_CtlError>
                  break;
 8009aee:	e041      	b.n	8009b74 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009af0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	da0b      	bge.n	8009b10 <USBD_StdEPReq+0x240>
 8009af8:	7bbb      	ldrb	r3, [r7, #14]
 8009afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009afe:	4613      	mov	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	4413      	add	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	3310      	adds	r3, #16
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	4413      	add	r3, r2
 8009b0c:	3304      	adds	r3, #4
 8009b0e:	e00b      	b.n	8009b28 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b10:	7bbb      	ldrb	r3, [r7, #14]
 8009b12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b16:	4613      	mov	r3, r2
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	4413      	add	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	3304      	adds	r3, #4
 8009b28:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <USBD_StdEPReq+0x266>
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	2b80      	cmp	r3, #128	; 0x80
 8009b34:	d103      	bne.n	8009b3e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
 8009b3c:	e00e      	b.n	8009b5c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8009b3e:	7bbb      	ldrb	r3, [r7, #14]
 8009b40:	4619      	mov	r1, r3
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f000 ffd6 	bl	800aaf4 <USBD_LL_IsStallEP>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d003      	beq.n	8009b56 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	2201      	movs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
 8009b54:	e002      	b.n	8009b5c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	4619      	mov	r1, r3
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 fb95 	bl	800a292 <USBD_CtlSendData>
              break;
 8009b68:	e004      	b.n	8009b74 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fb26 	bl	800a1be <USBD_CtlError>
              break;
 8009b72:	bf00      	nop
          }
          break;
 8009b74:	e004      	b.n	8009b80 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8009b76:	6839      	ldr	r1, [r7, #0]
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 fb20 	bl	800a1be <USBD_CtlError>
          break;
 8009b7e:	bf00      	nop
      }
      break;
 8009b80:	e004      	b.n	8009b8c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fb1a 	bl	800a1be <USBD_CtlError>
      break;
 8009b8a:	bf00      	nop
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	885b      	ldrh	r3, [r3, #2]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	f200 8128 	bhi.w	8009e0e <USBD_GetDescriptor+0x276>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <USBD_GetDescriptor+0x2c>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009c39 	.word	0x08009c39
 8009bd0:	08009e0f 	.word	0x08009e0f
 8009bd4:	08009e0f 	.word	0x08009e0f
 8009bd8:	08009daf 	.word	0x08009daf
 8009bdc:	08009ddb 	.word	0x08009ddb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
      break;
 8009bf6:	e112      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7c1b      	ldrb	r3, [r3, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c08:	f107 0208 	add.w	r2, r7, #8
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	2202      	movs	r2, #2
 8009c18:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c1a:	e100      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	f107 0208 	add.w	r2, r7, #8
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e0f2      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	f200 80ac 	bhi.w	8009d9c <USBD_GetDescriptor+0x204>
 8009c44:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <USBD_GetDescriptor+0xb4>)
 8009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4a:	bf00      	nop
 8009c4c:	08009c65 	.word	0x08009c65
 8009c50:	08009c99 	.word	0x08009c99
 8009c54:	08009ccd 	.word	0x08009ccd
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d35 	.word	0x08009d35
 8009c60:	08009d69 	.word	0x08009d69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e091      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fa97 	bl	800a1be <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e089      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e077      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa7d 	bl	800a1be <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e06f      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e05d      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa63 	bl	800a1be <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e055      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e043      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa49 	bl	800a1be <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e03b      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e029      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa2f 	bl	800a1be <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e021      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	7c12      	ldrb	r2, [r2, #16]
 8009d80:	f107 0108 	add.w	r1, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d8a:	e00f      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa15 	bl	800a1be <USBD_CtlError>
            err++;
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9a:	e007      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa0d 	bl	800a1be <USBD_CtlError>
          err++;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	3301      	adds	r3, #1
 8009da8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009daa:	e038      	b.n	8009e1e <USBD_GetDescriptor+0x286>
 8009dac:	e037      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	7c1b      	ldrb	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbe:	f107 0208 	add.w	r2, r7, #8
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4798      	blx	r3
 8009dc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc8:	e029      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 f9f6 	bl	800a1be <USBD_CtlError>
        err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	e021      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7c1b      	ldrb	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10d      	bne.n	8009dfe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	f107 0208 	add.w	r2, r7, #8
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3301      	adds	r3, #1
 8009df8:	2207      	movs	r2, #7
 8009dfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dfc:	e00f      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f9dc 	bl	800a1be <USBD_CtlError>
        err++;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0c:	e007      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f9d4 	bl	800a1be <USBD_CtlError>
      err++;
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e1c:	bf00      	nop
  }

  if (err != 0U)
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11c      	bne.n	8009e5e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009e24:	893b      	ldrh	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d011      	beq.n	8009e4e <USBD_GetDescriptor+0x2b6>
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	88db      	ldrh	r3, [r3, #6]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00d      	beq.n	8009e4e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	88da      	ldrh	r2, [r3, #6]
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf28      	it	cs
 8009e3c:	4613      	movcs	r3, r2
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e42:	893b      	ldrh	r3, [r7, #8]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa22 	bl	800a292 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	88db      	ldrh	r3, [r3, #6]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d104      	bne.n	8009e60 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fa79 	bl	800a34e <USBD_CtlSendStatus>
 8009e5c:	e000      	b.n	8009e60 <USBD_GetDescriptor+0x2c8>
    return;
 8009e5e:	bf00      	nop
    }
  }
}
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	bf00      	nop

08009e68 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	889b      	ldrh	r3, [r3, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d130      	bne.n	8009edc <USBD_SetAddress+0x74>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	88db      	ldrh	r3, [r3, #6]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d12c      	bne.n	8009edc <USBD_SetAddress+0x74>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	885b      	ldrh	r3, [r3, #2]
 8009e86:	2b7f      	cmp	r3, #127	; 0x7f
 8009e88:	d828      	bhi.n	8009edc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	885b      	ldrh	r3, [r3, #2]
 8009e8e:	b2db      	uxtb	r3, r3
 8009e90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d104      	bne.n	8009eaa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009ea0:	6839      	ldr	r1, [r7, #0]
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f98b 	bl	800a1be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ea8:	e01d      	b.n	8009ee6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7bfa      	ldrb	r2, [r7, #15]
 8009eae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fe48 	bl	800ab4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fa46 	bl	800a34e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d004      	beq.n	8009ed2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed0:	e009      	b.n	8009ee6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eda:	e004      	b.n	8009ee6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009edc:	6839      	ldr	r1, [r7, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f96d 	bl	800a1be <USBD_CtlError>
  }
}
 8009ee4:	bf00      	nop
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
	...

08009ef0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b082      	sub	sp, #8
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	885b      	ldrh	r3, [r3, #2]
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	4b41      	ldr	r3, [pc, #260]	; (800a008 <USBD_SetConfig+0x118>)
 8009f02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f04:	4b40      	ldr	r3, [pc, #256]	; (800a008 <USBD_SetConfig+0x118>)
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d904      	bls.n	8009f16 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f955 	bl	800a1be <USBD_CtlError>
 8009f14:	e075      	b.n	800a002 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d002      	beq.n	8009f26 <USBD_SetConfig+0x36>
 8009f20:	2b03      	cmp	r3, #3
 8009f22:	d023      	beq.n	8009f6c <USBD_SetConfig+0x7c>
 8009f24:	e062      	b.n	8009fec <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009f26:	4b38      	ldr	r3, [pc, #224]	; (800a008 <USBD_SetConfig+0x118>)
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01a      	beq.n	8009f64 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009f2e:	4b36      	ldr	r3, [pc, #216]	; (800a008 <USBD_SetConfig+0x118>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009f40:	4b31      	ldr	r3, [pc, #196]	; (800a008 <USBD_SetConfig+0x118>)
 8009f42:	781b      	ldrb	r3, [r3, #0]
 8009f44:	4619      	mov	r1, r3
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f7ff f9e7 	bl	800931a <USBD_SetClassConfig>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d104      	bne.n	8009f5c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f932 	bl	800a1be <USBD_CtlError>
            return;
 8009f5a:	e052      	b.n	800a002 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f9f6 	bl	800a34e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f62:	e04e      	b.n	800a002 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 f9f2 	bl	800a34e <USBD_CtlSendStatus>
        break;
 8009f6a:	e04a      	b.n	800a002 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009f6c:	4b26      	ldr	r3, [pc, #152]	; (800a008 <USBD_SetConfig+0x118>)
 8009f6e:	781b      	ldrb	r3, [r3, #0]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d112      	bne.n	8009f9a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2202      	movs	r2, #2
 8009f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8009f7c:	4b22      	ldr	r3, [pc, #136]	; (800a008 <USBD_SetConfig+0x118>)
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	461a      	mov	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009f86:	4b20      	ldr	r3, [pc, #128]	; (800a008 <USBD_SetConfig+0x118>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff f9e3 	bl	8009358 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f9db 	bl	800a34e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009f98:	e033      	b.n	800a002 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <USBD_SetConfig+0x118>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	461a      	mov	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d01d      	beq.n	8009fe4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	b2db      	uxtb	r3, r3
 8009fae:	4619      	mov	r1, r3
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff f9d1 	bl	8009358 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009fb6:	4b14      	ldr	r3, [pc, #80]	; (800a008 <USBD_SetConfig+0x118>)
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009fc0:	4b11      	ldr	r3, [pc, #68]	; (800a008 <USBD_SetConfig+0x118>)
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff f9a7 	bl	800931a <USBD_SetClassConfig>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d104      	bne.n	8009fdc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009fd2:	6839      	ldr	r1, [r7, #0]
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f8f2 	bl	800a1be <USBD_CtlError>
            return;
 8009fda:	e012      	b.n	800a002 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f9b6 	bl	800a34e <USBD_CtlSendStatus>
        break;
 8009fe2:	e00e      	b.n	800a002 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f9b2 	bl	800a34e <USBD_CtlSendStatus>
        break;
 8009fea:	e00a      	b.n	800a002 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f8e5 	bl	800a1be <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009ff4:	4b04      	ldr	r3, [pc, #16]	; (800a008 <USBD_SetConfig+0x118>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	4619      	mov	r1, r3
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff f9ac 	bl	8009358 <USBD_ClrClassConfig>
        break;
 800a000:	bf00      	nop
    }
  }
}
 800a002:	3708      	adds	r7, #8
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}
 800a008:	20000360 	.word	0x20000360

0800a00c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b082      	sub	sp, #8
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	88db      	ldrh	r3, [r3, #6]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d004      	beq.n	800a028 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f8cc 	bl	800a1be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a026:	e022      	b.n	800a06e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a02e:	2b02      	cmp	r3, #2
 800a030:	dc02      	bgt.n	800a038 <USBD_GetConfig+0x2c>
 800a032:	2b00      	cmp	r3, #0
 800a034:	dc03      	bgt.n	800a03e <USBD_GetConfig+0x32>
 800a036:	e015      	b.n	800a064 <USBD_GetConfig+0x58>
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d00b      	beq.n	800a054 <USBD_GetConfig+0x48>
 800a03c:	e012      	b.n	800a064 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3308      	adds	r3, #8
 800a048:	2201      	movs	r2, #1
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f920 	bl	800a292 <USBD_CtlSendData>
        break;
 800a052:	e00c      	b.n	800a06e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3304      	adds	r3, #4
 800a058:	2201      	movs	r2, #1
 800a05a:	4619      	mov	r1, r3
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f918 	bl	800a292 <USBD_CtlSendData>
        break;
 800a062:	e004      	b.n	800a06e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a064:	6839      	ldr	r1, [r7, #0]
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 f8a9 	bl	800a1be <USBD_CtlError>
        break;
 800a06c:	bf00      	nop
}
 800a06e:	bf00      	nop
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b082      	sub	sp, #8
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a086:	3b01      	subs	r3, #1
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d81e      	bhi.n	800a0ca <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	88db      	ldrh	r3, [r3, #6]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d004      	beq.n	800a09e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f000 f891 	bl	800a1be <USBD_CtlError>
        break;
 800a09c:	e01a      	b.n	800a0d4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	f043 0202 	orr.w	r2, r3, #2
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	2202      	movs	r2, #2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f8e5 	bl	800a292 <USBD_CtlSendData>
      break;
 800a0c8:	e004      	b.n	800a0d4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a0ca:	6839      	ldr	r1, [r7, #0]
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f876 	bl	800a1be <USBD_CtlError>
      break;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3708      	adds	r7, #8
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	885b      	ldrh	r3, [r3, #2]
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d106      	bne.n	800a0fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f000 f929 	bl	800a34e <USBD_CtlSendStatus>
  }
}
 800a0fc:	bf00      	nop
 800a0fe:	3708      	adds	r7, #8
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a114:	3b01      	subs	r3, #1
 800a116:	2b02      	cmp	r3, #2
 800a118:	d80b      	bhi.n	800a132 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	885b      	ldrh	r3, [r3, #2]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d10c      	bne.n	800a13c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 f90f 	bl	800a34e <USBD_CtlSendStatus>
      }
      break;
 800a130:	e004      	b.n	800a13c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f842 	bl	800a1be <USBD_CtlError>
      break;
 800a13a:	e000      	b.n	800a13e <USBD_ClrFeature+0x3a>
      break;
 800a13c:	bf00      	nop
  }
}
 800a13e:	bf00      	nop
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
 800a14e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	781a      	ldrb	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	785a      	ldrb	r2, [r3, #1]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	3302      	adds	r3, #2
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	b29a      	uxth	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	3303      	adds	r3, #3
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	b29b      	uxth	r3, r3
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	b29b      	uxth	r3, r3
 800a174:	4413      	add	r3, r2
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	3304      	adds	r3, #4
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b29a      	uxth	r2, r3
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	3305      	adds	r3, #5
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	b29b      	uxth	r3, r3
 800a18c:	021b      	lsls	r3, r3, #8
 800a18e:	b29b      	uxth	r3, r3
 800a190:	4413      	add	r3, r2
 800a192:	b29a      	uxth	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	3306      	adds	r3, #6
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	3307      	adds	r3, #7
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	4413      	add	r3, r2
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	80da      	strh	r2, [r3, #6]

}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bc80      	pop	{r7}
 800a1bc:	4770      	bx	lr

0800a1be <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b082      	sub	sp, #8
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	6078      	str	r0, [r7, #4]
 800a1c6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a1c8:	2180      	movs	r1, #128	; 0x80
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 fc54 	bl	800aa78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fc50 	bl	800aa78 <USBD_LL_StallEP>
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d032      	beq.n	800a25c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 f834 	bl	800a264 <USBD_GetLen>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	3301      	adds	r3, #1
 800a200:	b29b      	uxth	r3, r3
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	b29a      	uxth	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a20a:	7dfb      	ldrb	r3, [r7, #23]
 800a20c:	1c5a      	adds	r2, r3, #1
 800a20e:	75fa      	strb	r2, [r7, #23]
 800a210:	461a      	mov	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	4413      	add	r3, r2
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	7812      	ldrb	r2, [r2, #0]
 800a21a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a21c:	7dfb      	ldrb	r3, [r7, #23]
 800a21e:	1c5a      	adds	r2, r3, #1
 800a220:	75fa      	strb	r2, [r7, #23]
 800a222:	461a      	mov	r2, r3
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	4413      	add	r3, r2
 800a228:	2203      	movs	r2, #3
 800a22a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a22c:	e012      	b.n	800a254 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	1c5a      	adds	r2, r3, #1
 800a232:	60fa      	str	r2, [r7, #12]
 800a234:	7dfa      	ldrb	r2, [r7, #23]
 800a236:	1c51      	adds	r1, r2, #1
 800a238:	75f9      	strb	r1, [r7, #23]
 800a23a:	4611      	mov	r1, r2
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	440a      	add	r2, r1
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	1c5a      	adds	r2, r3, #1
 800a248:	75fa      	strb	r2, [r7, #23]
 800a24a:	461a      	mov	r2, r3
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4413      	add	r3, r2
 800a250:	2200      	movs	r2, #0
 800a252:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1e8      	bne.n	800a22e <USBD_GetString+0x4e>
    }
  }
}
 800a25c:	bf00      	nop
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a270:	e005      	b.n	800a27e <USBD_GetLen+0x1a>
  {
    len++;
 800a272:	7bfb      	ldrb	r3, [r7, #15]
 800a274:	3301      	adds	r3, #1
 800a276:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3301      	adds	r3, #1
 800a27c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d1f5      	bne.n	800a272 <USBD_GetLen+0xe>
  }

  return len;
 800a286:	7bfb      	ldrb	r3, [r7, #15]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3714      	adds	r7, #20
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bc80      	pop	{r7}
 800a290:	4770      	bx	lr

0800a292 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	60f8      	str	r0, [r7, #12]
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	4613      	mov	r3, r2
 800a29e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a2a8:	88fa      	ldrh	r2, [r7, #6]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800a2ae:	88fa      	ldrh	r2, [r7, #6]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2b4:	88fb      	ldrh	r3, [r7, #6]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	2100      	movs	r1, #0
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 fc65 	bl	800ab8a <USBD_LL_Transmit>

  return USBD_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b084      	sub	sp, #16
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a2d8:	88fb      	ldrh	r3, [r7, #6]
 800a2da:	68ba      	ldr	r2, [r7, #8]
 800a2dc:	2100      	movs	r1, #0
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f000 fc53 	bl	800ab8a <USBD_LL_Transmit>

  return USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3710      	adds	r7, #16
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	60f8      	str	r0, [r7, #12]
 800a2f6:	60b9      	str	r1, [r7, #8]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2203      	movs	r2, #3
 800a300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800a30c:	88fa      	ldrh	r2, [r7, #6]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a314:	88fb      	ldrh	r3, [r7, #6]
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	2100      	movs	r1, #0
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fc58 	bl	800abd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a320:	2300      	movs	r3, #0
}
 800a322:	4618      	mov	r0, r3
 800a324:	3710      	adds	r7, #16
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}

0800a32a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800a32a:	b580      	push	{r7, lr}
 800a32c:	b084      	sub	sp, #16
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	4613      	mov	r3, r2
 800a336:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a338:	88fb      	ldrh	r3, [r7, #6]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	2100      	movs	r1, #0
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 fc46 	bl	800abd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a344:	2300      	movs	r3, #0
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}

0800a34e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	b082      	sub	sp, #8
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2204      	movs	r2, #4
 800a35a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a35e:	2300      	movs	r3, #0
 800a360:	2200      	movs	r2, #0
 800a362:	2100      	movs	r1, #0
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 fc10 	bl	800ab8a <USBD_LL_Transmit>

  return USBD_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3708      	adds	r7, #8
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2205      	movs	r2, #5
 800a380:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a384:	2300      	movs	r3, #0
 800a386:	2200      	movs	r2, #0
 800a388:	2100      	movs	r1, #0
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fc20 	bl	800abd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3708      	adds	r7, #8
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
	...

0800a39c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	4912      	ldr	r1, [pc, #72]	; (800a3ec <MX_USB_DEVICE_Init+0x50>)
 800a3a4:	4812      	ldr	r0, [pc, #72]	; (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3a6:	f7fe ff5e 	bl	8009266 <USBD_Init>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d001      	beq.n	800a3b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a3b0:	f7f7 fcf0 	bl	8001d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a3b4:	490f      	ldr	r1, [pc, #60]	; (800a3f4 <MX_USB_DEVICE_Init+0x58>)
 800a3b6:	480e      	ldr	r0, [pc, #56]	; (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3b8:	f7fe ff80 	bl	80092bc <USBD_RegisterClass>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a3c2:	f7f7 fce7 	bl	8001d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a3c6:	490c      	ldr	r1, [pc, #48]	; (800a3f8 <MX_USB_DEVICE_Init+0x5c>)
 800a3c8:	4809      	ldr	r0, [pc, #36]	; (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3ca:	f7fe feb1 	bl	8009130 <USBD_CDC_RegisterInterface>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d001      	beq.n	800a3d8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a3d4:	f7f7 fcde 	bl	8001d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a3d8:	4805      	ldr	r0, [pc, #20]	; (800a3f0 <MX_USB_DEVICE_Init+0x54>)
 800a3da:	f7fe ff88 	bl	80092ee <USBD_Start>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a3e4:	f7f7 fcd6 	bl	8001d94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a3e8:	bf00      	nop
 800a3ea:	bd80      	pop	{r7, pc}
 800a3ec:	20000140 	.word	0x20000140
 800a3f0:	20000364 	.word	0x20000364
 800a3f4:	2000002c 	.word	0x2000002c
 800a3f8:	20000130 	.word	0x20000130

0800a3fc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a400:	2200      	movs	r2, #0
 800a402:	4905      	ldr	r1, [pc, #20]	; (800a418 <CDC_Init_FS+0x1c>)
 800a404:	4805      	ldr	r0, [pc, #20]	; (800a41c <CDC_Init_FS+0x20>)
 800a406:	f7fe fea9 	bl	800915c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a40a:	4905      	ldr	r1, [pc, #20]	; (800a420 <CDC_Init_FS+0x24>)
 800a40c:	4803      	ldr	r0, [pc, #12]	; (800a41c <CDC_Init_FS+0x20>)
 800a40e:	f7fe febe 	bl	800918e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a412:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	20000a28 	.word	0x20000a28
 800a41c:	20000364 	.word	0x20000364
 800a420:	20000628 	.word	0x20000628

0800a424 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a424:	b480      	push	{r7}
 800a426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a428:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a42a:	4618      	mov	r0, r3
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bc80      	pop	{r7}
 800a430:	4770      	bx	lr
	...

0800a434 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	4603      	mov	r3, r0
 800a43c:	6039      	str	r1, [r7, #0]
 800a43e:	71fb      	strb	r3, [r7, #7]
 800a440:	4613      	mov	r3, r2
 800a442:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	2b23      	cmp	r3, #35	; 0x23
 800a448:	d84a      	bhi.n	800a4e0 <CDC_Control_FS+0xac>
 800a44a:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <CDC_Control_FS+0x1c>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a4e1 	.word	0x0800a4e1
 800a454:	0800a4e1 	.word	0x0800a4e1
 800a458:	0800a4e1 	.word	0x0800a4e1
 800a45c:	0800a4e1 	.word	0x0800a4e1
 800a460:	0800a4e1 	.word	0x0800a4e1
 800a464:	0800a4e1 	.word	0x0800a4e1
 800a468:	0800a4e1 	.word	0x0800a4e1
 800a46c:	0800a4e1 	.word	0x0800a4e1
 800a470:	0800a4e1 	.word	0x0800a4e1
 800a474:	0800a4e1 	.word	0x0800a4e1
 800a478:	0800a4e1 	.word	0x0800a4e1
 800a47c:	0800a4e1 	.word	0x0800a4e1
 800a480:	0800a4e1 	.word	0x0800a4e1
 800a484:	0800a4e1 	.word	0x0800a4e1
 800a488:	0800a4e1 	.word	0x0800a4e1
 800a48c:	0800a4e1 	.word	0x0800a4e1
 800a490:	0800a4e1 	.word	0x0800a4e1
 800a494:	0800a4e1 	.word	0x0800a4e1
 800a498:	0800a4e1 	.word	0x0800a4e1
 800a49c:	0800a4e1 	.word	0x0800a4e1
 800a4a0:	0800a4e1 	.word	0x0800a4e1
 800a4a4:	0800a4e1 	.word	0x0800a4e1
 800a4a8:	0800a4e1 	.word	0x0800a4e1
 800a4ac:	0800a4e1 	.word	0x0800a4e1
 800a4b0:	0800a4e1 	.word	0x0800a4e1
 800a4b4:	0800a4e1 	.word	0x0800a4e1
 800a4b8:	0800a4e1 	.word	0x0800a4e1
 800a4bc:	0800a4e1 	.word	0x0800a4e1
 800a4c0:	0800a4e1 	.word	0x0800a4e1
 800a4c4:	0800a4e1 	.word	0x0800a4e1
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e1 	.word	0x0800a4e1
 800a4d0:	0800a4e1 	.word	0x0800a4e1
 800a4d4:	0800a4e1 	.word	0x0800a4e1
 800a4d8:	0800a4e1 	.word	0x0800a4e1
 800a4dc:	0800a4e1 	.word	0x0800a4e1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a4e0:	bf00      	nop
  }

  return (USBD_OK);
 800a4e2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bc80      	pop	{r7}
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop

0800a4f0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b082      	sub	sp, #8
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
 800a4f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	4805      	ldr	r0, [pc, #20]	; (800a514 <CDC_Receive_FS+0x24>)
 800a4fe:	f7fe fe46 	bl	800918e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a502:	4804      	ldr	r0, [pc, #16]	; (800a514 <CDC_Receive_FS+0x24>)
 800a504:	f7fe fe85 	bl	8009212 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a508:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3708      	adds	r7, #8
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}
 800a512:	bf00      	nop
 800a514:	20000364 	.word	0x20000364

0800a518 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	460b      	mov	r3, r1
 800a522:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a528:	4b0d      	ldr	r3, [pc, #52]	; (800a560 <CDC_Transmit_FS+0x48>)
 800a52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a53a:	2301      	movs	r3, #1
 800a53c:	e00b      	b.n	800a556 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a53e:	887b      	ldrh	r3, [r7, #2]
 800a540:	461a      	mov	r2, r3
 800a542:	6879      	ldr	r1, [r7, #4]
 800a544:	4806      	ldr	r0, [pc, #24]	; (800a560 <CDC_Transmit_FS+0x48>)
 800a546:	f7fe fe09 	bl	800915c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a54a:	4805      	ldr	r0, [pc, #20]	; (800a560 <CDC_Transmit_FS+0x48>)
 800a54c:	f7fe fe32 	bl	80091b4 <USBD_CDC_TransmitPacket>
 800a550:	4603      	mov	r3, r0
 800a552:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a554:	7bfb      	ldrb	r3, [r7, #15]
}
 800a556:	4618      	mov	r0, r3
 800a558:	3710      	adds	r7, #16
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	20000364 	.word	0x20000364

0800a564 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	4603      	mov	r3, r0
 800a56c:	6039      	str	r1, [r7, #0]
 800a56e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	2212      	movs	r2, #18
 800a574:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a576:	4b03      	ldr	r3, [pc, #12]	; (800a584 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a578:	4618      	mov	r0, r3
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bc80      	pop	{r7}
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	2000015c 	.word	0x2000015c

0800a588 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	4603      	mov	r3, r0
 800a590:	6039      	str	r1, [r7, #0]
 800a592:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2204      	movs	r2, #4
 800a598:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a59a:	4b03      	ldr	r3, [pc, #12]	; (800a5a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bc80      	pop	{r7}
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	20000170 	.word	0x20000170

0800a5ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a5b8:	79fb      	ldrb	r3, [r7, #7]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d105      	bne.n	800a5ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	4907      	ldr	r1, [pc, #28]	; (800a5e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5c2:	4808      	ldr	r0, [pc, #32]	; (800a5e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5c4:	f7ff fe0c 	bl	800a1e0 <USBD_GetString>
 800a5c8:	e004      	b.n	800a5d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	4904      	ldr	r1, [pc, #16]	; (800a5e0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a5ce:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a5d0:	f7ff fe06 	bl	800a1e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a5d4:	4b02      	ldr	r3, [pc, #8]	; (800a5e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3708      	adds	r7, #8
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20000e28 	.word	0x20000e28
 800a5e4:	0800c99c 	.word	0x0800c99c

0800a5e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	6039      	str	r1, [r7, #0]
 800a5f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a5f4:	683a      	ldr	r2, [r7, #0]
 800a5f6:	4904      	ldr	r1, [pc, #16]	; (800a608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a5f8:	4804      	ldr	r0, [pc, #16]	; (800a60c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a5fa:	f7ff fdf1 	bl	800a1e0 <USBD_GetString>
  return USBD_StrDesc;
 800a5fe:	4b02      	ldr	r3, [pc, #8]	; (800a608 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a600:	4618      	mov	r0, r3
 800a602:	3708      	adds	r7, #8
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000e28 	.word	0x20000e28
 800a60c:	0800c9b0 	.word	0x0800c9b0

0800a610 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	4603      	mov	r3, r0
 800a618:	6039      	str	r1, [r7, #0]
 800a61a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	221a      	movs	r2, #26
 800a620:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a622:	f000 f843 	bl	800a6ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a626:	4b02      	ldr	r3, [pc, #8]	; (800a630 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3708      	adds	r7, #8
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}
 800a630:	20000174 	.word	0x20000174

0800a634 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	4603      	mov	r3, r0
 800a63c:	6039      	str	r1, [r7, #0]
 800a63e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a640:	79fb      	ldrb	r3, [r7, #7]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d105      	bne.n	800a652 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	4907      	ldr	r1, [pc, #28]	; (800a668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a64a:	4808      	ldr	r0, [pc, #32]	; (800a66c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a64c:	f7ff fdc8 	bl	800a1e0 <USBD_GetString>
 800a650:	e004      	b.n	800a65c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	4904      	ldr	r1, [pc, #16]	; (800a668 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a656:	4805      	ldr	r0, [pc, #20]	; (800a66c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a658:	f7ff fdc2 	bl	800a1e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a65c:	4b02      	ldr	r3, [pc, #8]	; (800a668 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3708      	adds	r7, #8
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000e28 	.word	0x20000e28
 800a66c:	0800c9c4 	.word	0x0800c9c4

0800a670 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	4603      	mov	r3, r0
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a67c:	79fb      	ldrb	r3, [r7, #7]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d105      	bne.n	800a68e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a682:	683a      	ldr	r2, [r7, #0]
 800a684:	4907      	ldr	r1, [pc, #28]	; (800a6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a686:	4808      	ldr	r0, [pc, #32]	; (800a6a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a688:	f7ff fdaa 	bl	800a1e0 <USBD_GetString>
 800a68c:	e004      	b.n	800a698 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a68e:	683a      	ldr	r2, [r7, #0]
 800a690:	4904      	ldr	r1, [pc, #16]	; (800a6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a692:	4805      	ldr	r0, [pc, #20]	; (800a6a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a694:	f7ff fda4 	bl	800a1e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a698:	4b02      	ldr	r3, [pc, #8]	; (800a6a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3708      	adds	r7, #8
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
 800a6a2:	bf00      	nop
 800a6a4:	20000e28 	.word	0x20000e28
 800a6a8:	0800c9d0 	.word	0x0800c9d0

0800a6ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b084      	sub	sp, #16
 800a6b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <Get_SerialNum+0x44>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a6b8:	4b0e      	ldr	r3, [pc, #56]	; (800a6f4 <Get_SerialNum+0x48>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a6be:	4b0e      	ldr	r3, [pc, #56]	; (800a6f8 <Get_SerialNum+0x4c>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d009      	beq.n	800a6e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a6d2:	2208      	movs	r2, #8
 800a6d4:	4909      	ldr	r1, [pc, #36]	; (800a6fc <Get_SerialNum+0x50>)
 800a6d6:	68f8      	ldr	r0, [r7, #12]
 800a6d8:	f000 f814 	bl	800a704 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a6dc:	2204      	movs	r2, #4
 800a6de:	4908      	ldr	r1, [pc, #32]	; (800a700 <Get_SerialNum+0x54>)
 800a6e0:	68b8      	ldr	r0, [r7, #8]
 800a6e2:	f000 f80f 	bl	800a704 <IntToUnicode>
  }
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	1ffff7e8 	.word	0x1ffff7e8
 800a6f4:	1ffff7ec 	.word	0x1ffff7ec
 800a6f8:	1ffff7f0 	.word	0x1ffff7f0
 800a6fc:	20000176 	.word	0x20000176
 800a700:	20000186 	.word	0x20000186

0800a704 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	4613      	mov	r3, r2
 800a710:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a716:	2300      	movs	r3, #0
 800a718:	75fb      	strb	r3, [r7, #23]
 800a71a:	e027      	b.n	800a76c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	0f1b      	lsrs	r3, r3, #28
 800a720:	2b09      	cmp	r3, #9
 800a722:	d80b      	bhi.n	800a73c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	0f1b      	lsrs	r3, r3, #28
 800a728:	b2da      	uxtb	r2, r3
 800a72a:	7dfb      	ldrb	r3, [r7, #23]
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	4619      	mov	r1, r3
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	440b      	add	r3, r1
 800a734:	3230      	adds	r2, #48	; 0x30
 800a736:	b2d2      	uxtb	r2, r2
 800a738:	701a      	strb	r2, [r3, #0]
 800a73a:	e00a      	b.n	800a752 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	0f1b      	lsrs	r3, r3, #28
 800a740:	b2da      	uxtb	r2, r3
 800a742:	7dfb      	ldrb	r3, [r7, #23]
 800a744:	005b      	lsls	r3, r3, #1
 800a746:	4619      	mov	r1, r3
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	440b      	add	r3, r1
 800a74c:	3237      	adds	r2, #55	; 0x37
 800a74e:	b2d2      	uxtb	r2, r2
 800a750:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	011b      	lsls	r3, r3, #4
 800a756:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a758:	7dfb      	ldrb	r3, [r7, #23]
 800a75a:	005b      	lsls	r3, r3, #1
 800a75c:	3301      	adds	r3, #1
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	2200      	movs	r2, #0
 800a764:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	3301      	adds	r3, #1
 800a76a:	75fb      	strb	r3, [r7, #23]
 800a76c:	7dfa      	ldrb	r2, [r7, #23]
 800a76e:	79fb      	ldrb	r3, [r7, #7]
 800a770:	429a      	cmp	r2, r3
 800a772:	d3d3      	bcc.n	800a71c <IntToUnicode+0x18>
  }
}
 800a774:	bf00      	nop
 800a776:	bf00      	nop
 800a778:	371c      	adds	r7, #28
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a0d      	ldr	r2, [pc, #52]	; (800a7c4 <HAL_PCD_MspInit+0x44>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d113      	bne.n	800a7ba <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800a792:	4b0d      	ldr	r3, [pc, #52]	; (800a7c8 <HAL_PCD_MspInit+0x48>)
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <HAL_PCD_MspInit+0x48>)
 800a798:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a79c:	61d3      	str	r3, [r2, #28]
 800a79e:	4b0a      	ldr	r3, [pc, #40]	; (800a7c8 <HAL_PCD_MspInit+0x48>)
 800a7a0:	69db      	ldr	r3, [r3, #28]
 800a7a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	2014      	movs	r0, #20
 800a7b0:	f7f7 fda5 	bl	80022fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800a7b4:	2014      	movs	r0, #20
 800a7b6:	f7f7 fdbe 	bl	8002336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	40005c00 	.word	0x40005c00
 800a7c8:	40021000 	.word	0x40021000

0800a7cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7fe fdcb 	bl	800937e <USBD_LL_SetupStage>
}
 800a7e8:	bf00      	nop
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b082      	sub	sp, #8
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	6879      	ldr	r1, [r7, #4]
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	00db      	lsls	r3, r3, #3
 800a80e:	440b      	add	r3, r1
 800a810:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800a814:	681a      	ldr	r2, [r3, #0]
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	4619      	mov	r1, r3
 800a81a:	f7fe fdfd 	bl	8009418 <USBD_LL_DataOutStage>
}
 800a81e:	bf00      	nop
 800a820:	3708      	adds	r7, #8
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a826:	b580      	push	{r7, lr}
 800a828:	b082      	sub	sp, #8
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	460b      	mov	r3, r1
 800a830:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800a838:	78fa      	ldrb	r2, [r7, #3]
 800a83a:	6879      	ldr	r1, [r7, #4]
 800a83c:	4613      	mov	r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	4413      	add	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	440b      	add	r3, r1
 800a846:	333c      	adds	r3, #60	; 0x3c
 800a848:	681a      	ldr	r2, [r3, #0]
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7fe fe54 	bl	80094fa <USBD_LL_DataInStage>
}
 800a852:	bf00      	nop
 800a854:	3708      	adds	r7, #8
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}

0800a85a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b082      	sub	sp, #8
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a868:	4618      	mov	r0, r3
 800a86a:	f7fe ff64 	bl	8009736 <USBD_LL_SOF>
}
 800a86e:	bf00      	nop
 800a870:	3708      	adds	r7, #8
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a87e:	2301      	movs	r3, #1
 800a880:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d001      	beq.n	800a88e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a88a:	f7f7 fa83 	bl	8001d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a894:	7bfa      	ldrb	r2, [r7, #15]
 800a896:	4611      	mov	r1, r2
 800a898:	4618      	mov	r0, r3
 800a89a:	f7fe ff14 	bl	80096c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fe fecd 	bl	8009644 <USBD_LL_Reset>
}
 800a8aa:	bf00      	nop
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b082      	sub	sp, #8
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7fe ff0e 	bl	80096e4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d005      	beq.n	800a8dc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a8d0:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <HAL_PCD_SuspendCallback+0x30>)
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	4a03      	ldr	r2, [pc, #12]	; (800a8e4 <HAL_PCD_SuspendCallback+0x30>)
 800a8d6:	f043 0306 	orr.w	r3, r3, #6
 800a8da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed00 	.word	0xe000ed00

0800a8e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fe ff08 	bl	800970c <USBD_LL_Resume>
}
 800a8fc:	bf00      	nop
 800a8fe:	3708      	adds	r7, #8
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800a90c:	4a28      	ldr	r2, [pc, #160]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a26      	ldr	r2, [pc, #152]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a918:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800a91c:	4b24      	ldr	r3, [pc, #144]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a91e:	4a25      	ldr	r2, [pc, #148]	; (800a9b4 <USBD_LL_Init+0xb0>)
 800a920:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800a922:	4b23      	ldr	r3, [pc, #140]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a924:	2208      	movs	r2, #8
 800a926:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800a928:	4b21      	ldr	r3, [pc, #132]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a92a:	2202      	movs	r2, #2
 800a92c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800a92e:	4b20      	ldr	r3, [pc, #128]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a930:	2200      	movs	r2, #0
 800a932:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800a934:	4b1e      	ldr	r3, [pc, #120]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a936:	2200      	movs	r2, #0
 800a938:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800a93a:	4b1d      	ldr	r3, [pc, #116]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a93c:	2200      	movs	r2, #0
 800a93e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800a940:	481b      	ldr	r0, [pc, #108]	; (800a9b0 <USBD_LL_Init+0xac>)
 800a942:	f7f7 fec8 	bl	80026d6 <HAL_PCD_Init>
 800a946:	4603      	mov	r3, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d001      	beq.n	800a950 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800a94c:	f7f7 fa22 	bl	8001d94 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a956:	2318      	movs	r3, #24
 800a958:	2200      	movs	r2, #0
 800a95a:	2100      	movs	r1, #0
 800a95c:	f7f9 fb3c 	bl	8003fd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a966:	2358      	movs	r3, #88	; 0x58
 800a968:	2200      	movs	r2, #0
 800a96a:	2180      	movs	r1, #128	; 0x80
 800a96c:	f7f9 fb34 	bl	8003fd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a976:	23c0      	movs	r3, #192	; 0xc0
 800a978:	2200      	movs	r2, #0
 800a97a:	2181      	movs	r1, #129	; 0x81
 800a97c:	f7f9 fb2c 	bl	8003fd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a986:	f44f 7388 	mov.w	r3, #272	; 0x110
 800a98a:	2200      	movs	r2, #0
 800a98c:	2101      	movs	r1, #1
 800a98e:	f7f9 fb23 	bl	8003fd8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800a998:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a99c:	2200      	movs	r2, #0
 800a99e:	2182      	movs	r1, #130	; 0x82
 800a9a0:	f7f9 fb1a 	bl	8003fd8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	20001028 	.word	0x20001028
 800a9b4:	40005c00 	.word	0x40005c00

0800a9b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7f7 ff8c 	bl	80028ec <HAL_PCD_Start>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d8:	7bfb      	ldrb	r3, [r7, #15]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f94e 	bl	800ac7c <USBD_Get_USB_Status>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	4608      	mov	r0, r1
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	461a      	mov	r2, r3
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	70fb      	strb	r3, [r7, #3]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70bb      	strb	r3, [r7, #2]
 800aa04:	4613      	mov	r3, r2
 800aa06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800aa16:	78bb      	ldrb	r3, [r7, #2]
 800aa18:	883a      	ldrh	r2, [r7, #0]
 800aa1a:	78f9      	ldrb	r1, [r7, #3]
 800aa1c:	f7f8 f904 	bl	8002c28 <HAL_PCD_EP_Open>
 800aa20:	4603      	mov	r3, r0
 800aa22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa24:	7bfb      	ldrb	r3, [r7, #15]
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 f928 	bl	800ac7c <USBD_Get_USB_Status>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3710      	adds	r7, #16
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b084      	sub	sp, #16
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	460b      	mov	r3, r1
 800aa44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa54:	78fa      	ldrb	r2, [r7, #3]
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7f8 f94b 	bl	8002cf4 <HAL_PCD_EP_Close>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 f909 	bl	800ac7c <USBD_Get_USB_Status>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aa92:	78fa      	ldrb	r2, [r7, #3]
 800aa94:	4611      	mov	r1, r2
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7f8 fa0b 	bl	8002eb2 <HAL_PCD_EP_SetStall>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f000 f8ea 	bl	800ac7c <USBD_Get_USB_Status>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b084      	sub	sp, #16
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	6078      	str	r0, [r7, #4]
 800aabe:	460b      	mov	r3, r1
 800aac0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aac2:	2300      	movs	r3, #0
 800aac4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aad0:	78fa      	ldrb	r2, [r7, #3]
 800aad2:	4611      	mov	r1, r2
 800aad4:	4618      	mov	r0, r3
 800aad6:	f7f8 fa4c 	bl	8002f72 <HAL_PCD_EP_ClrStall>
 800aada:	4603      	mov	r3, r0
 800aadc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aade:	7bfb      	ldrb	r3, [r7, #15]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f8cb 	bl	800ac7c <USBD_Get_USB_Status>
 800aae6:	4603      	mov	r3, r0
 800aae8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aaea:	7bbb      	ldrb	r3, [r7, #14]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}

0800aaf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	da0c      	bge.n	800ab2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab10:	78fb      	ldrb	r3, [r7, #3]
 800ab12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab16:	68f9      	ldr	r1, [r7, #12]
 800ab18:	1c5a      	adds	r2, r3, #1
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	00db      	lsls	r3, r3, #3
 800ab22:	440b      	add	r3, r1
 800ab24:	3302      	adds	r3, #2
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	e00b      	b.n	800ab42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab30:	68f9      	ldr	r1, [r7, #12]
 800ab32:	4613      	mov	r3, r2
 800ab34:	009b      	lsls	r3, r3, #2
 800ab36:	4413      	add	r3, r2
 800ab38:	00db      	lsls	r3, r3, #3
 800ab3a:	440b      	add	r3, r1
 800ab3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800ab40:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bc80      	pop	{r7}
 800ab4a:	4770      	bx	lr

0800ab4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ab66:	78fa      	ldrb	r2, [r7, #3]
 800ab68:	4611      	mov	r1, r2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7f8 f837 	bl	8002bde <HAL_PCD_SetAddress>
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f000 f880 	bl	800ac7c <USBD_Get_USB_Status>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3710      	adds	r7, #16
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b086      	sub	sp, #24
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	607a      	str	r2, [r7, #4]
 800ab94:	461a      	mov	r2, r3
 800ab96:	460b      	mov	r3, r1
 800ab98:	72fb      	strb	r3, [r7, #11]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abac:	893b      	ldrh	r3, [r7, #8]
 800abae:	7af9      	ldrb	r1, [r7, #11]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	f7f8 f93b 	bl	8002e2c <HAL_PCD_EP_Transmit>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abba:	7dfb      	ldrb	r3, [r7, #23]
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 f85d 	bl	800ac7c <USBD_Get_USB_Status>
 800abc2:	4603      	mov	r3, r0
 800abc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800abc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	607a      	str	r2, [r7, #4]
 800abda:	461a      	mov	r2, r3
 800abdc:	460b      	mov	r3, r1
 800abde:	72fb      	strb	r3, [r7, #11]
 800abe0:	4613      	mov	r3, r2
 800abe2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abe4:	2300      	movs	r3, #0
 800abe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800abf2:	893b      	ldrh	r3, [r7, #8]
 800abf4:	7af9      	ldrb	r1, [r7, #11]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	f7f8 f8c4 	bl	8002d84 <HAL_PCD_EP_Receive>
 800abfc:	4603      	mov	r3, r0
 800abfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac00:	7dfb      	ldrb	r3, [r7, #23]
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 f83a 	bl	800ac7c <USBD_Get_USB_Status>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ac0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
 800ac1e:	460b      	mov	r3, r1
 800ac20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ac28:	78fa      	ldrb	r2, [r7, #3]
 800ac2a:	4611      	mov	r1, r2
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f7f8 f8e6 	bl	8002dfe <HAL_PCD_EP_GetRxCount>
 800ac32:	4603      	mov	r3, r0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ac44:	4b02      	ldr	r3, [pc, #8]	; (800ac50 <USBD_static_malloc+0x14>)
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	370c      	adds	r7, #12
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bc80      	pop	{r7}
 800ac4e:	4770      	bx	lr
 800ac50:	20001314 	.word	0x20001314

0800ac54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bc80      	pop	{r7}
 800ac64:	4770      	bx	lr

0800ac66 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	460b      	mov	r3, r1
 800ac70:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800ac72:	bf00      	nop
 800ac74:	370c      	adds	r7, #12
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bc80      	pop	{r7}
 800ac7a:	4770      	bx	lr

0800ac7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	4603      	mov	r3, r0
 800ac84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
 800ac8c:	2b03      	cmp	r3, #3
 800ac8e:	d817      	bhi.n	800acc0 <USBD_Get_USB_Status+0x44>
 800ac90:	a201      	add	r2, pc, #4	; (adr r2, 800ac98 <USBD_Get_USB_Status+0x1c>)
 800ac92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac96:	bf00      	nop
 800ac98:	0800aca9 	.word	0x0800aca9
 800ac9c:	0800acaf 	.word	0x0800acaf
 800aca0:	0800acb5 	.word	0x0800acb5
 800aca4:	0800acbb 	.word	0x0800acbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800aca8:	2300      	movs	r3, #0
 800acaa:	73fb      	strb	r3, [r7, #15]
    break;
 800acac:	e00b      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800acae:	2302      	movs	r3, #2
 800acb0:	73fb      	strb	r3, [r7, #15]
    break;
 800acb2:	e008      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
    break;
 800acb8:	e005      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800acba:	2302      	movs	r3, #2
 800acbc:	73fb      	strb	r3, [r7, #15]
    break;
 800acbe:	e002      	b.n	800acc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800acc0:	2302      	movs	r3, #2
 800acc2:	73fb      	strb	r3, [r7, #15]
    break;
 800acc4:	bf00      	nop
  }
  return usb_status;
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3714      	adds	r7, #20
 800accc:	46bd      	mov	sp, r7
 800acce:	bc80      	pop	{r7}
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop

0800acd4 <cos>:
 800acd4:	b530      	push	{r4, r5, lr}
 800acd6:	4a20      	ldr	r2, [pc, #128]	; (800ad58 <cos+0x84>)
 800acd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800acdc:	4293      	cmp	r3, r2
 800acde:	b087      	sub	sp, #28
 800ace0:	dc06      	bgt.n	800acf0 <cos+0x1c>
 800ace2:	2200      	movs	r2, #0
 800ace4:	2300      	movs	r3, #0
 800ace6:	b007      	add	sp, #28
 800ace8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acec:	f000 bbd4 	b.w	800b498 <__kernel_cos>
 800acf0:	4a1a      	ldr	r2, [pc, #104]	; (800ad5c <cos+0x88>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	dd05      	ble.n	800ad02 <cos+0x2e>
 800acf6:	4602      	mov	r2, r0
 800acf8:	460b      	mov	r3, r1
 800acfa:	f7f5 fa35 	bl	8000168 <__aeabi_dsub>
 800acfe:	b007      	add	sp, #28
 800ad00:	bd30      	pop	{r4, r5, pc}
 800ad02:	aa02      	add	r2, sp, #8
 800ad04:	f000 f9d0 	bl	800b0a8 <__ieee754_rem_pio2>
 800ad08:	f000 0003 	and.w	r0, r0, #3
 800ad0c:	2801      	cmp	r0, #1
 800ad0e:	d009      	beq.n	800ad24 <cos+0x50>
 800ad10:	2802      	cmp	r0, #2
 800ad12:	d011      	beq.n	800ad38 <cos+0x64>
 800ad14:	b9b8      	cbnz	r0, 800ad46 <cos+0x72>
 800ad16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1e:	f000 fbbb 	bl	800b498 <__kernel_cos>
 800ad22:	e7ec      	b.n	800acfe <cos+0x2a>
 800ad24:	9000      	str	r0, [sp, #0]
 800ad26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad2e:	f000 ffb3 	bl	800bc98 <__kernel_sin>
 800ad32:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ad36:	e7e2      	b.n	800acfe <cos+0x2a>
 800ad38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad40:	f000 fbaa 	bl	800b498 <__kernel_cos>
 800ad44:	e7f5      	b.n	800ad32 <cos+0x5e>
 800ad46:	2301      	movs	r3, #1
 800ad48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad52:	f000 ffa1 	bl	800bc98 <__kernel_sin>
 800ad56:	e7d2      	b.n	800acfe <cos+0x2a>
 800ad58:	3fe921fb 	.word	0x3fe921fb
 800ad5c:	7fefffff 	.word	0x7fefffff

0800ad60 <sin>:
 800ad60:	b530      	push	{r4, r5, lr}
 800ad62:	4a20      	ldr	r2, [pc, #128]	; (800ade4 <sin+0x84>)
 800ad64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	dc06      	bgt.n	800ad7c <sin+0x1c>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2200      	movs	r2, #0
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	2300      	movs	r3, #0
 800ad76:	f000 ff8f 	bl	800bc98 <__kernel_sin>
 800ad7a:	e006      	b.n	800ad8a <sin+0x2a>
 800ad7c:	4a1a      	ldr	r2, [pc, #104]	; (800ade8 <sin+0x88>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	dd05      	ble.n	800ad8e <sin+0x2e>
 800ad82:	4602      	mov	r2, r0
 800ad84:	460b      	mov	r3, r1
 800ad86:	f7f5 f9ef 	bl	8000168 <__aeabi_dsub>
 800ad8a:	b007      	add	sp, #28
 800ad8c:	bd30      	pop	{r4, r5, pc}
 800ad8e:	aa02      	add	r2, sp, #8
 800ad90:	f000 f98a 	bl	800b0a8 <__ieee754_rem_pio2>
 800ad94:	f000 0003 	and.w	r0, r0, #3
 800ad98:	2801      	cmp	r0, #1
 800ad9a:	d009      	beq.n	800adb0 <sin+0x50>
 800ad9c:	2802      	cmp	r0, #2
 800ad9e:	d00e      	beq.n	800adbe <sin+0x5e>
 800ada0:	b9c0      	cbnz	r0, 800add4 <sin+0x74>
 800ada2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada6:	2301      	movs	r3, #1
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adae:	e7e2      	b.n	800ad76 <sin+0x16>
 800adb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adb4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adb8:	f000 fb6e 	bl	800b498 <__kernel_cos>
 800adbc:	e7e5      	b.n	800ad8a <sin+0x2a>
 800adbe:	2301      	movs	r3, #1
 800adc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800adca:	f000 ff65 	bl	800bc98 <__kernel_sin>
 800adce:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800add2:	e7da      	b.n	800ad8a <sin+0x2a>
 800add4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800add8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800addc:	f000 fb5c 	bl	800b498 <__kernel_cos>
 800ade0:	e7f5      	b.n	800adce <sin+0x6e>
 800ade2:	bf00      	nop
 800ade4:	3fe921fb 	.word	0x3fe921fb
 800ade8:	7fefffff 	.word	0x7fefffff

0800adec <roundf>:
 800adec:	b508      	push	{r3, lr}
 800adee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800adf2:	3b7f      	subs	r3, #127	; 0x7f
 800adf4:	2b16      	cmp	r3, #22
 800adf6:	4601      	mov	r1, r0
 800adf8:	4602      	mov	r2, r0
 800adfa:	dc14      	bgt.n	800ae26 <roundf+0x3a>
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	da07      	bge.n	800ae10 <roundf+0x24>
 800ae00:	3301      	adds	r3, #1
 800ae02:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800ae06:	d101      	bne.n	800ae0c <roundf+0x20>
 800ae08:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800ae0c:	4608      	mov	r0, r1
 800ae0e:	bd08      	pop	{r3, pc}
 800ae10:	4808      	ldr	r0, [pc, #32]	; (800ae34 <roundf+0x48>)
 800ae12:	4118      	asrs	r0, r3
 800ae14:	4201      	tst	r1, r0
 800ae16:	d0f9      	beq.n	800ae0c <roundf+0x20>
 800ae18:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ae1c:	4119      	asrs	r1, r3
 800ae1e:	4411      	add	r1, r2
 800ae20:	ea21 0100 	bic.w	r1, r1, r0
 800ae24:	e7f2      	b.n	800ae0c <roundf+0x20>
 800ae26:	2b80      	cmp	r3, #128	; 0x80
 800ae28:	d1f0      	bne.n	800ae0c <roundf+0x20>
 800ae2a:	f7f5 fe83 	bl	8000b34 <__addsf3>
 800ae2e:	4601      	mov	r1, r0
 800ae30:	e7ec      	b.n	800ae0c <roundf+0x20>
 800ae32:	bf00      	nop
 800ae34:	007fffff 	.word	0x007fffff

0800ae38 <fmod>:
 800ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	4680      	mov	r8, r0
 800ae3e:	4689      	mov	r9, r1
 800ae40:	4616      	mov	r6, r2
 800ae42:	461f      	mov	r7, r3
 800ae44:	f000 f820 	bl	800ae88 <__ieee754_fmod>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	460d      	mov	r5, r1
 800ae4e:	463b      	mov	r3, r7
 800ae50:	4640      	mov	r0, r8
 800ae52:	4649      	mov	r1, r9
 800ae54:	f7f5 fdda 	bl	8000a0c <__aeabi_dcmpun>
 800ae58:	b990      	cbnz	r0, 800ae80 <fmod+0x48>
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4630      	mov	r0, r6
 800ae60:	4639      	mov	r1, r7
 800ae62:	f7f5 fda1 	bl	80009a8 <__aeabi_dcmpeq>
 800ae66:	b158      	cbz	r0, 800ae80 <fmod+0x48>
 800ae68:	f001 f8d0 	bl	800c00c <__errno>
 800ae6c:	2321      	movs	r3, #33	; 0x21
 800ae6e:	2200      	movs	r2, #0
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	2300      	movs	r3, #0
 800ae74:	4610      	mov	r0, r2
 800ae76:	4619      	mov	r1, r3
 800ae78:	f7f5 fc58 	bl	800072c <__aeabi_ddiv>
 800ae7c:	4604      	mov	r4, r0
 800ae7e:	460d      	mov	r5, r1
 800ae80:	4620      	mov	r0, r4
 800ae82:	4629      	mov	r1, r5
 800ae84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800ae88 <__ieee754_fmod>:
 800ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae8c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 800ae90:	460e      	mov	r6, r1
 800ae92:	461d      	mov	r5, r3
 800ae94:	4619      	mov	r1, r3
 800ae96:	ea58 0302 	orrs.w	r3, r8, r2
 800ae9a:	4607      	mov	r7, r0
 800ae9c:	4614      	mov	r4, r2
 800ae9e:	4694      	mov	ip, r2
 800aea0:	4696      	mov	lr, r2
 800aea2:	d00c      	beq.n	800aebe <__ieee754_fmod+0x36>
 800aea4:	4a7a      	ldr	r2, [pc, #488]	; (800b090 <__ieee754_fmod+0x208>)
 800aea6:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	46b2      	mov	sl, r6
 800aeae:	dc06      	bgt.n	800aebe <__ieee754_fmod+0x36>
 800aeb0:	4262      	negs	r2, r4
 800aeb2:	4878      	ldr	r0, [pc, #480]	; (800b094 <__ieee754_fmod+0x20c>)
 800aeb4:	4322      	orrs	r2, r4
 800aeb6:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800aeba:	4282      	cmp	r2, r0
 800aebc:	d90c      	bls.n	800aed8 <__ieee754_fmod+0x50>
 800aebe:	460b      	mov	r3, r1
 800aec0:	4622      	mov	r2, r4
 800aec2:	4638      	mov	r0, r7
 800aec4:	4631      	mov	r1, r6
 800aec6:	f7f5 fb07 	bl	80004d8 <__aeabi_dmul>
 800aeca:	4602      	mov	r2, r0
 800aecc:	460b      	mov	r3, r1
 800aece:	f7f5 fc2d 	bl	800072c <__aeabi_ddiv>
 800aed2:	4607      	mov	r7, r0
 800aed4:	460e      	mov	r6, r1
 800aed6:	e00e      	b.n	800aef6 <__ieee754_fmod+0x6e>
 800aed8:	4543      	cmp	r3, r8
 800aeda:	46b9      	mov	r9, r7
 800aedc:	4639      	mov	r1, r7
 800aede:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 800aee2:	dc0c      	bgt.n	800aefe <__ieee754_fmod+0x76>
 800aee4:	db07      	blt.n	800aef6 <__ieee754_fmod+0x6e>
 800aee6:	4567      	cmp	r7, ip
 800aee8:	d305      	bcc.n	800aef6 <__ieee754_fmod+0x6e>
 800aeea:	d108      	bne.n	800aefe <__ieee754_fmod+0x76>
 800aeec:	4b6a      	ldr	r3, [pc, #424]	; (800b098 <__ieee754_fmod+0x210>)
 800aeee:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 800aef2:	e9d4 7600 	ldrd	r7, r6, [r4]
 800aef6:	4638      	mov	r0, r7
 800aef8:	4631      	mov	r1, r6
 800aefa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefe:	ea1a 0f00 	tst.w	sl, r0
 800af02:	d14a      	bne.n	800af9a <__ieee754_fmod+0x112>
 800af04:	2b00      	cmp	r3, #0
 800af06:	d141      	bne.n	800af8c <__ieee754_fmod+0x104>
 800af08:	464a      	mov	r2, r9
 800af0a:	4864      	ldr	r0, [pc, #400]	; (800b09c <__ieee754_fmod+0x214>)
 800af0c:	2a00      	cmp	r2, #0
 800af0e:	dc3a      	bgt.n	800af86 <__ieee754_fmod+0xfe>
 800af10:	4a60      	ldr	r2, [pc, #384]	; (800b094 <__ieee754_fmod+0x20c>)
 800af12:	402a      	ands	r2, r5
 800af14:	2a00      	cmp	r2, #0
 800af16:	d14f      	bne.n	800afb8 <__ieee754_fmod+0x130>
 800af18:	f1b8 0f00 	cmp.w	r8, #0
 800af1c:	d144      	bne.n	800afa8 <__ieee754_fmod+0x120>
 800af1e:	4666      	mov	r6, ip
 800af20:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800af24:	2e00      	cmp	r6, #0
 800af26:	dc3c      	bgt.n	800afa2 <__ieee754_fmod+0x11a>
 800af28:	4e5d      	ldr	r6, [pc, #372]	; (800b0a0 <__ieee754_fmod+0x218>)
 800af2a:	42b0      	cmp	r0, r6
 800af2c:	db49      	blt.n	800afc2 <__ieee754_fmod+0x13a>
 800af2e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800af32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af36:	4e5a      	ldr	r6, [pc, #360]	; (800b0a0 <__ieee754_fmod+0x218>)
 800af38:	42b2      	cmp	r2, r6
 800af3a:	db54      	blt.n	800afe6 <__ieee754_fmod+0x15e>
 800af3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800af40:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800af44:	1a80      	subs	r0, r0, r2
 800af46:	1b5e      	subs	r6, r3, r5
 800af48:	eba1 070e 	sub.w	r7, r1, lr
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d161      	bne.n	800b014 <__ieee754_fmod+0x18c>
 800af50:	4571      	cmp	r1, lr
 800af52:	bf38      	it	cc
 800af54:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800af58:	2e00      	cmp	r6, #0
 800af5a:	bfa4      	itt	ge
 800af5c:	4639      	movge	r1, r7
 800af5e:	4633      	movge	r3, r6
 800af60:	ea53 0001 	orrs.w	r0, r3, r1
 800af64:	d0c2      	beq.n	800aeec <__ieee754_fmod+0x64>
 800af66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af6a:	db68      	blt.n	800b03e <__ieee754_fmod+0x1b6>
 800af6c:	484c      	ldr	r0, [pc, #304]	; (800b0a0 <__ieee754_fmod+0x218>)
 800af6e:	4282      	cmp	r2, r0
 800af70:	db6b      	blt.n	800b04a <__ieee754_fmod+0x1c2>
 800af72:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af76:	431c      	orrs	r4, r3
 800af78:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800af7c:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 800af80:	460f      	mov	r7, r1
 800af82:	464e      	mov	r6, r9
 800af84:	e7b7      	b.n	800aef6 <__ieee754_fmod+0x6e>
 800af86:	3801      	subs	r0, #1
 800af88:	0052      	lsls	r2, r2, #1
 800af8a:	e7bf      	b.n	800af0c <__ieee754_fmod+0x84>
 800af8c:	4844      	ldr	r0, [pc, #272]	; (800b0a0 <__ieee754_fmod+0x218>)
 800af8e:	02da      	lsls	r2, r3, #11
 800af90:	2a00      	cmp	r2, #0
 800af92:	ddbd      	ble.n	800af10 <__ieee754_fmod+0x88>
 800af94:	3801      	subs	r0, #1
 800af96:	0052      	lsls	r2, r2, #1
 800af98:	e7fa      	b.n	800af90 <__ieee754_fmod+0x108>
 800af9a:	1518      	asrs	r0, r3, #20
 800af9c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800afa0:	e7b6      	b.n	800af10 <__ieee754_fmod+0x88>
 800afa2:	3a01      	subs	r2, #1
 800afa4:	0076      	lsls	r6, r6, #1
 800afa6:	e7bd      	b.n	800af24 <__ieee754_fmod+0x9c>
 800afa8:	4a3d      	ldr	r2, [pc, #244]	; (800b0a0 <__ieee754_fmod+0x218>)
 800afaa:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800afae:	2e00      	cmp	r6, #0
 800afb0:	ddba      	ble.n	800af28 <__ieee754_fmod+0xa0>
 800afb2:	3a01      	subs	r2, #1
 800afb4:	0076      	lsls	r6, r6, #1
 800afb6:	e7fa      	b.n	800afae <__ieee754_fmod+0x126>
 800afb8:	ea4f 5228 	mov.w	r2, r8, asr #20
 800afbc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800afc0:	e7b2      	b.n	800af28 <__ieee754_fmod+0xa0>
 800afc2:	1a31      	subs	r1, r6, r0
 800afc4:	291f      	cmp	r1, #31
 800afc6:	dc08      	bgt.n	800afda <__ieee754_fmod+0x152>
 800afc8:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800afcc:	408b      	lsls	r3, r1
 800afce:	fa29 f606 	lsr.w	r6, r9, r6
 800afd2:	4333      	orrs	r3, r6
 800afd4:	fa09 f101 	lsl.w	r1, r9, r1
 800afd8:	e7ad      	b.n	800af36 <__ieee754_fmod+0xae>
 800afda:	4b32      	ldr	r3, [pc, #200]	; (800b0a4 <__ieee754_fmod+0x21c>)
 800afdc:	2100      	movs	r1, #0
 800afde:	1a1b      	subs	r3, r3, r0
 800afe0:	fa09 f303 	lsl.w	r3, r9, r3
 800afe4:	e7a7      	b.n	800af36 <__ieee754_fmod+0xae>
 800afe6:	eba6 0e02 	sub.w	lr, r6, r2
 800afea:	f1be 0f1f 	cmp.w	lr, #31
 800afee:	dc0a      	bgt.n	800b006 <__ieee754_fmod+0x17e>
 800aff0:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800aff4:	fa08 f80e 	lsl.w	r8, r8, lr
 800aff8:	fa2c f505 	lsr.w	r5, ip, r5
 800affc:	ea45 0508 	orr.w	r5, r5, r8
 800b000:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b004:	e79e      	b.n	800af44 <__ieee754_fmod+0xbc>
 800b006:	4d27      	ldr	r5, [pc, #156]	; (800b0a4 <__ieee754_fmod+0x21c>)
 800b008:	f04f 0e00 	mov.w	lr, #0
 800b00c:	1aad      	subs	r5, r5, r2
 800b00e:	fa0c f505 	lsl.w	r5, ip, r5
 800b012:	e797      	b.n	800af44 <__ieee754_fmod+0xbc>
 800b014:	4571      	cmp	r1, lr
 800b016:	bf38      	it	cc
 800b018:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800b01c:	2e00      	cmp	r6, #0
 800b01e:	da05      	bge.n	800b02c <__ieee754_fmod+0x1a4>
 800b020:	0fce      	lsrs	r6, r1, #31
 800b022:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800b026:	0049      	lsls	r1, r1, #1
 800b028:	3801      	subs	r0, #1
 800b02a:	e78c      	b.n	800af46 <__ieee754_fmod+0xbe>
 800b02c:	ea56 0307 	orrs.w	r3, r6, r7
 800b030:	f43f af5c 	beq.w	800aeec <__ieee754_fmod+0x64>
 800b034:	0ffb      	lsrs	r3, r7, #31
 800b036:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800b03a:	0079      	lsls	r1, r7, #1
 800b03c:	e7f4      	b.n	800b028 <__ieee754_fmod+0x1a0>
 800b03e:	0fc8      	lsrs	r0, r1, #31
 800b040:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b044:	0049      	lsls	r1, r1, #1
 800b046:	3a01      	subs	r2, #1
 800b048:	e78d      	b.n	800af66 <__ieee754_fmod+0xde>
 800b04a:	1a80      	subs	r0, r0, r2
 800b04c:	2814      	cmp	r0, #20
 800b04e:	dc0a      	bgt.n	800b066 <__ieee754_fmod+0x1de>
 800b050:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b054:	fa03 f202 	lsl.w	r2, r3, r2
 800b058:	40c1      	lsrs	r1, r0
 800b05a:	430a      	orrs	r2, r1
 800b05c:	4103      	asrs	r3, r0
 800b05e:	4610      	mov	r0, r2
 800b060:	ea43 0104 	orr.w	r1, r3, r4
 800b064:	e735      	b.n	800aed2 <__ieee754_fmod+0x4a>
 800b066:	281f      	cmp	r0, #31
 800b068:	dc07      	bgt.n	800b07a <__ieee754_fmod+0x1f2>
 800b06a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800b06e:	40c1      	lsrs	r1, r0
 800b070:	fa03 f202 	lsl.w	r2, r3, r2
 800b074:	430a      	orrs	r2, r1
 800b076:	4623      	mov	r3, r4
 800b078:	e7f1      	b.n	800b05e <__ieee754_fmod+0x1d6>
 800b07a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800b07e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b082:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800b086:	32e2      	adds	r2, #226	; 0xe2
 800b088:	fa43 f202 	asr.w	r2, r3, r2
 800b08c:	e7f3      	b.n	800b076 <__ieee754_fmod+0x1ee>
 800b08e:	bf00      	nop
 800b090:	7fefffff 	.word	0x7fefffff
 800b094:	7ff00000 	.word	0x7ff00000
 800b098:	0800c9f0 	.word	0x0800c9f0
 800b09c:	fffffbed 	.word	0xfffffbed
 800b0a0:	fffffc02 	.word	0xfffffc02
 800b0a4:	fffffbe2 	.word	0xfffffbe2

0800b0a8 <__ieee754_rem_pio2>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	4614      	mov	r4, r2
 800b0ae:	4ac4      	ldr	r2, [pc, #784]	; (800b3c0 <__ieee754_rem_pio2+0x318>)
 800b0b0:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b0b4:	b08d      	sub	sp, #52	; 0x34
 800b0b6:	4592      	cmp	sl, r2
 800b0b8:	9104      	str	r1, [sp, #16]
 800b0ba:	dc07      	bgt.n	800b0cc <__ieee754_rem_pio2+0x24>
 800b0bc:	2200      	movs	r2, #0
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e9c4 0100 	strd	r0, r1, [r4]
 800b0c4:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	e024      	b.n	800b116 <__ieee754_rem_pio2+0x6e>
 800b0cc:	4abd      	ldr	r2, [pc, #756]	; (800b3c4 <__ieee754_rem_pio2+0x31c>)
 800b0ce:	4592      	cmp	sl, r2
 800b0d0:	dc72      	bgt.n	800b1b8 <__ieee754_rem_pio2+0x110>
 800b0d2:	9b04      	ldr	r3, [sp, #16]
 800b0d4:	4dbc      	ldr	r5, [pc, #752]	; (800b3c8 <__ieee754_rem_pio2+0x320>)
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	a3ab      	add	r3, pc, #684	; (adr r3, 800b388 <__ieee754_rem_pio2+0x2e0>)
 800b0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0de:	dd36      	ble.n	800b14e <__ieee754_rem_pio2+0xa6>
 800b0e0:	f7f5 f842 	bl	8000168 <__aeabi_dsub>
 800b0e4:	45aa      	cmp	sl, r5
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	460f      	mov	r7, r1
 800b0ea:	d018      	beq.n	800b11e <__ieee754_rem_pio2+0x76>
 800b0ec:	a3a8      	add	r3, pc, #672	; (adr r3, 800b390 <__ieee754_rem_pio2+0x2e8>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f839 	bl	8000168 <__aeabi_dsub>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	e9c4 2300 	strd	r2, r3, [r4]
 800b100:	4639      	mov	r1, r7
 800b102:	f7f5 f831 	bl	8000168 <__aeabi_dsub>
 800b106:	a3a2      	add	r3, pc, #648	; (adr r3, 800b390 <__ieee754_rem_pio2+0x2e8>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f7f5 f82c 	bl	8000168 <__aeabi_dsub>
 800b110:	2501      	movs	r5, #1
 800b112:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b116:	4628      	mov	r0, r5
 800b118:	b00d      	add	sp, #52	; 0x34
 800b11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b11e:	a39e      	add	r3, pc, #632	; (adr r3, 800b398 <__ieee754_rem_pio2+0x2f0>)
 800b120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b124:	f7f5 f820 	bl	8000168 <__aeabi_dsub>
 800b128:	a39d      	add	r3, pc, #628	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2f8>)
 800b12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12e:	4606      	mov	r6, r0
 800b130:	460f      	mov	r7, r1
 800b132:	f7f5 f819 	bl	8000168 <__aeabi_dsub>
 800b136:	4602      	mov	r2, r0
 800b138:	460b      	mov	r3, r1
 800b13a:	4630      	mov	r0, r6
 800b13c:	e9c4 2300 	strd	r2, r3, [r4]
 800b140:	4639      	mov	r1, r7
 800b142:	f7f5 f811 	bl	8000168 <__aeabi_dsub>
 800b146:	a396      	add	r3, pc, #600	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2f8>)
 800b148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14c:	e7de      	b.n	800b10c <__ieee754_rem_pio2+0x64>
 800b14e:	f7f5 f80d 	bl	800016c <__adddf3>
 800b152:	45aa      	cmp	sl, r5
 800b154:	4606      	mov	r6, r0
 800b156:	460f      	mov	r7, r1
 800b158:	d016      	beq.n	800b188 <__ieee754_rem_pio2+0xe0>
 800b15a:	a38d      	add	r3, pc, #564	; (adr r3, 800b390 <__ieee754_rem_pio2+0x2e8>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f7f5 f804 	bl	800016c <__adddf3>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	4630      	mov	r0, r6
 800b16a:	e9c4 2300 	strd	r2, r3, [r4]
 800b16e:	4639      	mov	r1, r7
 800b170:	f7f4 fffa 	bl	8000168 <__aeabi_dsub>
 800b174:	a386      	add	r3, pc, #536	; (adr r3, 800b390 <__ieee754_rem_pio2+0x2e8>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	f7f4 fff7 	bl	800016c <__adddf3>
 800b17e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800b182:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b186:	e7c6      	b.n	800b116 <__ieee754_rem_pio2+0x6e>
 800b188:	a383      	add	r3, pc, #524	; (adr r3, 800b398 <__ieee754_rem_pio2+0x2f0>)
 800b18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18e:	f7f4 ffed 	bl	800016c <__adddf3>
 800b192:	a383      	add	r3, pc, #524	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2f8>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	4606      	mov	r6, r0
 800b19a:	460f      	mov	r7, r1
 800b19c:	f7f4 ffe6 	bl	800016c <__adddf3>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	460b      	mov	r3, r1
 800b1a4:	4630      	mov	r0, r6
 800b1a6:	e9c4 2300 	strd	r2, r3, [r4]
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	f7f4 ffdc 	bl	8000168 <__aeabi_dsub>
 800b1b0:	a37b      	add	r3, pc, #492	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2f8>)
 800b1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b6:	e7e0      	b.n	800b17a <__ieee754_rem_pio2+0xd2>
 800b1b8:	4a84      	ldr	r2, [pc, #528]	; (800b3cc <__ieee754_rem_pio2+0x324>)
 800b1ba:	4592      	cmp	sl, r2
 800b1bc:	f300 80d5 	bgt.w	800b36a <__ieee754_rem_pio2+0x2c2>
 800b1c0:	f000 fe20 	bl	800be04 <fabs>
 800b1c4:	a378      	add	r3, pc, #480	; (adr r3, 800b3a8 <__ieee754_rem_pio2+0x300>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	4606      	mov	r6, r0
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	f7f5 f983 	bl	80004d8 <__aeabi_dmul>
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4b7e      	ldr	r3, [pc, #504]	; (800b3d0 <__ieee754_rem_pio2+0x328>)
 800b1d6:	f7f4 ffc9 	bl	800016c <__adddf3>
 800b1da:	f7f5 fc2d 	bl	8000a38 <__aeabi_d2iz>
 800b1de:	4605      	mov	r5, r0
 800b1e0:	f7f5 f910 	bl	8000404 <__aeabi_i2d>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b1ec:	a366      	add	r3, pc, #408	; (adr r3, 800b388 <__ieee754_rem_pio2+0x2e0>)
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	f7f5 f971 	bl	80004d8 <__aeabi_dmul>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	4639      	mov	r1, r7
 800b1fe:	f7f4 ffb3 	bl	8000168 <__aeabi_dsub>
 800b202:	a363      	add	r3, pc, #396	; (adr r3, 800b390 <__ieee754_rem_pio2+0x2e8>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b210:	f7f5 f962 	bl	80004d8 <__aeabi_dmul>
 800b214:	2d1f      	cmp	r5, #31
 800b216:	4606      	mov	r6, r0
 800b218:	460f      	mov	r7, r1
 800b21a:	dc0e      	bgt.n	800b23a <__ieee754_rem_pio2+0x192>
 800b21c:	4b6d      	ldr	r3, [pc, #436]	; (800b3d4 <__ieee754_rem_pio2+0x32c>)
 800b21e:	1e6a      	subs	r2, r5, #1
 800b220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b224:	4553      	cmp	r3, sl
 800b226:	d008      	beq.n	800b23a <__ieee754_rem_pio2+0x192>
 800b228:	4632      	mov	r2, r6
 800b22a:	463b      	mov	r3, r7
 800b22c:	4640      	mov	r0, r8
 800b22e:	4649      	mov	r1, r9
 800b230:	f7f4 ff9a 	bl	8000168 <__aeabi_dsub>
 800b234:	e9c4 0100 	strd	r0, r1, [r4]
 800b238:	e013      	b.n	800b262 <__ieee754_rem_pio2+0x1ba>
 800b23a:	463b      	mov	r3, r7
 800b23c:	4632      	mov	r2, r6
 800b23e:	4640      	mov	r0, r8
 800b240:	4649      	mov	r1, r9
 800b242:	f7f4 ff91 	bl	8000168 <__aeabi_dsub>
 800b246:	ea4f 532a 	mov.w	r3, sl, asr #20
 800b24a:	9305      	str	r3, [sp, #20]
 800b24c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b250:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800b254:	f1ba 0f10 	cmp.w	sl, #16
 800b258:	dc1f      	bgt.n	800b29a <__ieee754_rem_pio2+0x1f2>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	e9c4 2300 	strd	r2, r3, [r4]
 800b262:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800b266:	4640      	mov	r0, r8
 800b268:	4653      	mov	r3, sl
 800b26a:	4649      	mov	r1, r9
 800b26c:	f7f4 ff7c 	bl	8000168 <__aeabi_dsub>
 800b270:	4632      	mov	r2, r6
 800b272:	463b      	mov	r3, r7
 800b274:	f7f4 ff78 	bl	8000168 <__aeabi_dsub>
 800b278:	460b      	mov	r3, r1
 800b27a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b27e:	9904      	ldr	r1, [sp, #16]
 800b280:	4602      	mov	r2, r0
 800b282:	2900      	cmp	r1, #0
 800b284:	f6bf af47 	bge.w	800b116 <__ieee754_rem_pio2+0x6e>
 800b288:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800b28c:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800b290:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b294:	60e3      	str	r3, [r4, #12]
 800b296:	426d      	negs	r5, r5
 800b298:	e73d      	b.n	800b116 <__ieee754_rem_pio2+0x6e>
 800b29a:	a33f      	add	r3, pc, #252	; (adr r3, 800b398 <__ieee754_rem_pio2+0x2f0>)
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2a4:	f7f5 f918 	bl	80004d8 <__aeabi_dmul>
 800b2a8:	4606      	mov	r6, r0
 800b2aa:	460f      	mov	r7, r1
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	460b      	mov	r3, r1
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	f7f4 ff58 	bl	8000168 <__aeabi_dsub>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4682      	mov	sl, r0
 800b2be:	468b      	mov	fp, r1
 800b2c0:	4640      	mov	r0, r8
 800b2c2:	4649      	mov	r1, r9
 800b2c4:	f7f4 ff50 	bl	8000168 <__aeabi_dsub>
 800b2c8:	4632      	mov	r2, r6
 800b2ca:	463b      	mov	r3, r7
 800b2cc:	f7f4 ff4c 	bl	8000168 <__aeabi_dsub>
 800b2d0:	a333      	add	r3, pc, #204	; (adr r3, 800b3a0 <__ieee754_rem_pio2+0x2f8>)
 800b2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460f      	mov	r7, r1
 800b2da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2de:	f7f5 f8fb 	bl	80004d8 <__aeabi_dmul>
 800b2e2:	4632      	mov	r2, r6
 800b2e4:	463b      	mov	r3, r7
 800b2e6:	f7f4 ff3f 	bl	8000168 <__aeabi_dsub>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4606      	mov	r6, r0
 800b2f0:	460f      	mov	r7, r1
 800b2f2:	4650      	mov	r0, sl
 800b2f4:	4659      	mov	r1, fp
 800b2f6:	f7f4 ff37 	bl	8000168 <__aeabi_dsub>
 800b2fa:	9a05      	ldr	r2, [sp, #20]
 800b2fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	2b31      	cmp	r3, #49	; 0x31
 800b304:	dc06      	bgt.n	800b314 <__ieee754_rem_pio2+0x26c>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	46d0      	mov	r8, sl
 800b30c:	46d9      	mov	r9, fp
 800b30e:	e9c4 2300 	strd	r2, r3, [r4]
 800b312:	e7a6      	b.n	800b262 <__ieee754_rem_pio2+0x1ba>
 800b314:	a326      	add	r3, pc, #152	; (adr r3, 800b3b0 <__ieee754_rem_pio2+0x308>)
 800b316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b31a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b31e:	f7f5 f8db 	bl	80004d8 <__aeabi_dmul>
 800b322:	4606      	mov	r6, r0
 800b324:	460f      	mov	r7, r1
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	4650      	mov	r0, sl
 800b32c:	4659      	mov	r1, fp
 800b32e:	f7f4 ff1b 	bl	8000168 <__aeabi_dsub>
 800b332:	4602      	mov	r2, r0
 800b334:	460b      	mov	r3, r1
 800b336:	4680      	mov	r8, r0
 800b338:	4689      	mov	r9, r1
 800b33a:	4650      	mov	r0, sl
 800b33c:	4659      	mov	r1, fp
 800b33e:	f7f4 ff13 	bl	8000168 <__aeabi_dsub>
 800b342:	4632      	mov	r2, r6
 800b344:	463b      	mov	r3, r7
 800b346:	f7f4 ff0f 	bl	8000168 <__aeabi_dsub>
 800b34a:	a31b      	add	r3, pc, #108	; (adr r3, 800b3b8 <__ieee754_rem_pio2+0x310>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	4606      	mov	r6, r0
 800b352:	460f      	mov	r7, r1
 800b354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b358:	f7f5 f8be 	bl	80004d8 <__aeabi_dmul>
 800b35c:	4632      	mov	r2, r6
 800b35e:	463b      	mov	r3, r7
 800b360:	f7f4 ff02 	bl	8000168 <__aeabi_dsub>
 800b364:	4606      	mov	r6, r0
 800b366:	460f      	mov	r7, r1
 800b368:	e75e      	b.n	800b228 <__ieee754_rem_pio2+0x180>
 800b36a:	4a1b      	ldr	r2, [pc, #108]	; (800b3d8 <__ieee754_rem_pio2+0x330>)
 800b36c:	4592      	cmp	sl, r2
 800b36e:	dd35      	ble.n	800b3dc <__ieee754_rem_pio2+0x334>
 800b370:	4602      	mov	r2, r0
 800b372:	460b      	mov	r3, r1
 800b374:	f7f4 fef8 	bl	8000168 <__aeabi_dsub>
 800b378:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b37c:	e9c4 0100 	strd	r0, r1, [r4]
 800b380:	e6a2      	b.n	800b0c8 <__ieee754_rem_pio2+0x20>
 800b382:	bf00      	nop
 800b384:	f3af 8000 	nop.w
 800b388:	54400000 	.word	0x54400000
 800b38c:	3ff921fb 	.word	0x3ff921fb
 800b390:	1a626331 	.word	0x1a626331
 800b394:	3dd0b461 	.word	0x3dd0b461
 800b398:	1a600000 	.word	0x1a600000
 800b39c:	3dd0b461 	.word	0x3dd0b461
 800b3a0:	2e037073 	.word	0x2e037073
 800b3a4:	3ba3198a 	.word	0x3ba3198a
 800b3a8:	6dc9c883 	.word	0x6dc9c883
 800b3ac:	3fe45f30 	.word	0x3fe45f30
 800b3b0:	2e000000 	.word	0x2e000000
 800b3b4:	3ba3198a 	.word	0x3ba3198a
 800b3b8:	252049c1 	.word	0x252049c1
 800b3bc:	397b839a 	.word	0x397b839a
 800b3c0:	3fe921fb 	.word	0x3fe921fb
 800b3c4:	4002d97b 	.word	0x4002d97b
 800b3c8:	3ff921fb 	.word	0x3ff921fb
 800b3cc:	413921fb 	.word	0x413921fb
 800b3d0:	3fe00000 	.word	0x3fe00000
 800b3d4:	0800ca00 	.word	0x0800ca00
 800b3d8:	7fefffff 	.word	0x7fefffff
 800b3dc:	ea4f 552a 	mov.w	r5, sl, asr #20
 800b3e0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800b3e4:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800b3e8:	460f      	mov	r7, r1
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	f7f5 fb24 	bl	8000a38 <__aeabi_d2iz>
 800b3f0:	f7f5 f808 	bl	8000404 <__aeabi_i2d>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b400:	f7f4 feb2 	bl	8000168 <__aeabi_dsub>
 800b404:	2200      	movs	r2, #0
 800b406:	4b22      	ldr	r3, [pc, #136]	; (800b490 <__ieee754_rem_pio2+0x3e8>)
 800b408:	f7f5 f866 	bl	80004d8 <__aeabi_dmul>
 800b40c:	460f      	mov	r7, r1
 800b40e:	4606      	mov	r6, r0
 800b410:	f7f5 fb12 	bl	8000a38 <__aeabi_d2iz>
 800b414:	f7f4 fff6 	bl	8000404 <__aeabi_i2d>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4630      	mov	r0, r6
 800b41e:	4639      	mov	r1, r7
 800b420:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b424:	f7f4 fea0 	bl	8000168 <__aeabi_dsub>
 800b428:	2200      	movs	r2, #0
 800b42a:	4b19      	ldr	r3, [pc, #100]	; (800b490 <__ieee754_rem_pio2+0x3e8>)
 800b42c:	f7f5 f854 	bl	80004d8 <__aeabi_dmul>
 800b430:	f04f 0803 	mov.w	r8, #3
 800b434:	2600      	movs	r6, #0
 800b436:	2700      	movs	r7, #0
 800b438:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b43c:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800b440:	4632      	mov	r2, r6
 800b442:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800b446:	463b      	mov	r3, r7
 800b448:	46c2      	mov	sl, r8
 800b44a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b44e:	f7f5 faab 	bl	80009a8 <__aeabi_dcmpeq>
 800b452:	2800      	cmp	r0, #0
 800b454:	d1f4      	bne.n	800b440 <__ieee754_rem_pio2+0x398>
 800b456:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <__ieee754_rem_pio2+0x3ec>)
 800b458:	462a      	mov	r2, r5
 800b45a:	9301      	str	r3, [sp, #4]
 800b45c:	2302      	movs	r3, #2
 800b45e:	4621      	mov	r1, r4
 800b460:	9300      	str	r3, [sp, #0]
 800b462:	a806      	add	r0, sp, #24
 800b464:	4653      	mov	r3, sl
 800b466:	f000 f8d5 	bl	800b614 <__kernel_rem_pio2>
 800b46a:	9b04      	ldr	r3, [sp, #16]
 800b46c:	4605      	mov	r5, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f6bf ae51 	bge.w	800b116 <__ieee754_rem_pio2+0x6e>
 800b474:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b478:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b47c:	e9c4 2300 	strd	r2, r3, [r4]
 800b480:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b484:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b488:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b48c:	e703      	b.n	800b296 <__ieee754_rem_pio2+0x1ee>
 800b48e:	bf00      	nop
 800b490:	41700000 	.word	0x41700000
 800b494:	0800ca80 	.word	0x0800ca80

0800b498 <__kernel_cos>:
 800b498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4a0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	460f      	mov	r7, r1
 800b4a8:	e9cd 2300 	strd	r2, r3, [sp]
 800b4ac:	da04      	bge.n	800b4b8 <__kernel_cos+0x20>
 800b4ae:	f7f5 fac3 	bl	8000a38 <__aeabi_d2iz>
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f000 8086 	beq.w	800b5c4 <__kernel_cos+0x12c>
 800b4b8:	4642      	mov	r2, r8
 800b4ba:	463b      	mov	r3, r7
 800b4bc:	4640      	mov	r0, r8
 800b4be:	4639      	mov	r1, r7
 800b4c0:	f7f5 f80a 	bl	80004d8 <__aeabi_dmul>
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4b4e      	ldr	r3, [pc, #312]	; (800b600 <__kernel_cos+0x168>)
 800b4c8:	4604      	mov	r4, r0
 800b4ca:	460d      	mov	r5, r1
 800b4cc:	f7f5 f804 	bl	80004d8 <__aeabi_dmul>
 800b4d0:	a33f      	add	r3, pc, #252	; (adr r3, 800b5d0 <__kernel_cos+0x138>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	4682      	mov	sl, r0
 800b4d8:	468b      	mov	fp, r1
 800b4da:	4620      	mov	r0, r4
 800b4dc:	4629      	mov	r1, r5
 800b4de:	f7f4 fffb 	bl	80004d8 <__aeabi_dmul>
 800b4e2:	a33d      	add	r3, pc, #244	; (adr r3, 800b5d8 <__kernel_cos+0x140>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f4 fe40 	bl	800016c <__adddf3>
 800b4ec:	4622      	mov	r2, r4
 800b4ee:	462b      	mov	r3, r5
 800b4f0:	f7f4 fff2 	bl	80004d8 <__aeabi_dmul>
 800b4f4:	a33a      	add	r3, pc, #232	; (adr r3, 800b5e0 <__kernel_cos+0x148>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fe35 	bl	8000168 <__aeabi_dsub>
 800b4fe:	4622      	mov	r2, r4
 800b500:	462b      	mov	r3, r5
 800b502:	f7f4 ffe9 	bl	80004d8 <__aeabi_dmul>
 800b506:	a338      	add	r3, pc, #224	; (adr r3, 800b5e8 <__kernel_cos+0x150>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7f4 fe2e 	bl	800016c <__adddf3>
 800b510:	4622      	mov	r2, r4
 800b512:	462b      	mov	r3, r5
 800b514:	f7f4 ffe0 	bl	80004d8 <__aeabi_dmul>
 800b518:	a335      	add	r3, pc, #212	; (adr r3, 800b5f0 <__kernel_cos+0x158>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f4 fe23 	bl	8000168 <__aeabi_dsub>
 800b522:	4622      	mov	r2, r4
 800b524:	462b      	mov	r3, r5
 800b526:	f7f4 ffd7 	bl	80004d8 <__aeabi_dmul>
 800b52a:	a333      	add	r3, pc, #204	; (adr r3, 800b5f8 <__kernel_cos+0x160>)
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f7f4 fe1c 	bl	800016c <__adddf3>
 800b534:	4622      	mov	r2, r4
 800b536:	462b      	mov	r3, r5
 800b538:	f7f4 ffce 	bl	80004d8 <__aeabi_dmul>
 800b53c:	4622      	mov	r2, r4
 800b53e:	462b      	mov	r3, r5
 800b540:	f7f4 ffca 	bl	80004d8 <__aeabi_dmul>
 800b544:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b548:	4604      	mov	r4, r0
 800b54a:	460d      	mov	r5, r1
 800b54c:	4640      	mov	r0, r8
 800b54e:	4639      	mov	r1, r7
 800b550:	f7f4 ffc2 	bl	80004d8 <__aeabi_dmul>
 800b554:	460b      	mov	r3, r1
 800b556:	4602      	mov	r2, r0
 800b558:	4629      	mov	r1, r5
 800b55a:	4620      	mov	r0, r4
 800b55c:	f7f4 fe04 	bl	8000168 <__aeabi_dsub>
 800b560:	4b28      	ldr	r3, [pc, #160]	; (800b604 <__kernel_cos+0x16c>)
 800b562:	4680      	mov	r8, r0
 800b564:	429e      	cmp	r6, r3
 800b566:	4689      	mov	r9, r1
 800b568:	dc0e      	bgt.n	800b588 <__kernel_cos+0xf0>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4650      	mov	r0, sl
 800b570:	4659      	mov	r1, fp
 800b572:	f7f4 fdf9 	bl	8000168 <__aeabi_dsub>
 800b576:	4602      	mov	r2, r0
 800b578:	2000      	movs	r0, #0
 800b57a:	460b      	mov	r3, r1
 800b57c:	4922      	ldr	r1, [pc, #136]	; (800b608 <__kernel_cos+0x170>)
 800b57e:	f7f4 fdf3 	bl	8000168 <__aeabi_dsub>
 800b582:	b003      	add	sp, #12
 800b584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b588:	2400      	movs	r4, #0
 800b58a:	4b20      	ldr	r3, [pc, #128]	; (800b60c <__kernel_cos+0x174>)
 800b58c:	4622      	mov	r2, r4
 800b58e:	429e      	cmp	r6, r3
 800b590:	bfcc      	ite	gt
 800b592:	4d1f      	ldrgt	r5, [pc, #124]	; (800b610 <__kernel_cos+0x178>)
 800b594:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b598:	462b      	mov	r3, r5
 800b59a:	2000      	movs	r0, #0
 800b59c:	491a      	ldr	r1, [pc, #104]	; (800b608 <__kernel_cos+0x170>)
 800b59e:	f7f4 fde3 	bl	8000168 <__aeabi_dsub>
 800b5a2:	4622      	mov	r2, r4
 800b5a4:	4606      	mov	r6, r0
 800b5a6:	460f      	mov	r7, r1
 800b5a8:	462b      	mov	r3, r5
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	f7f4 fddb 	bl	8000168 <__aeabi_dsub>
 800b5b2:	4642      	mov	r2, r8
 800b5b4:	464b      	mov	r3, r9
 800b5b6:	f7f4 fdd7 	bl	8000168 <__aeabi_dsub>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	460b      	mov	r3, r1
 800b5be:	4630      	mov	r0, r6
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	e7dc      	b.n	800b57e <__kernel_cos+0xe6>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	4910      	ldr	r1, [pc, #64]	; (800b608 <__kernel_cos+0x170>)
 800b5c8:	e7db      	b.n	800b582 <__kernel_cos+0xea>
 800b5ca:	bf00      	nop
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	be8838d4 	.word	0xbe8838d4
 800b5d4:	bda8fae9 	.word	0xbda8fae9
 800b5d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800b5dc:	3e21ee9e 	.word	0x3e21ee9e
 800b5e0:	809c52ad 	.word	0x809c52ad
 800b5e4:	3e927e4f 	.word	0x3e927e4f
 800b5e8:	19cb1590 	.word	0x19cb1590
 800b5ec:	3efa01a0 	.word	0x3efa01a0
 800b5f0:	16c15177 	.word	0x16c15177
 800b5f4:	3f56c16c 	.word	0x3f56c16c
 800b5f8:	5555554c 	.word	0x5555554c
 800b5fc:	3fa55555 	.word	0x3fa55555
 800b600:	3fe00000 	.word	0x3fe00000
 800b604:	3fd33332 	.word	0x3fd33332
 800b608:	3ff00000 	.word	0x3ff00000
 800b60c:	3fe90000 	.word	0x3fe90000
 800b610:	3fd20000 	.word	0x3fd20000

0800b614 <__kernel_rem_pio2>:
 800b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b618:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800b61c:	9308      	str	r3, [sp, #32]
 800b61e:	9106      	str	r1, [sp, #24]
 800b620:	4bb6      	ldr	r3, [pc, #728]	; (800b8fc <__kernel_rem_pio2+0x2e8>)
 800b622:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b624:	f112 0f14 	cmn.w	r2, #20
 800b628:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b62c:	bfa8      	it	ge
 800b62e:	1ed4      	subge	r4, r2, #3
 800b630:	9302      	str	r3, [sp, #8]
 800b632:	9b08      	ldr	r3, [sp, #32]
 800b634:	bfb8      	it	lt
 800b636:	2400      	movlt	r4, #0
 800b638:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800b63c:	9307      	str	r3, [sp, #28]
 800b63e:	bfa4      	itt	ge
 800b640:	2318      	movge	r3, #24
 800b642:	fb94 f4f3 	sdivge	r4, r4, r3
 800b646:	f06f 0317 	mvn.w	r3, #23
 800b64a:	fb04 3303 	mla	r3, r4, r3, r3
 800b64e:	eb03 0b02 	add.w	fp, r3, r2
 800b652:	9a07      	ldr	r2, [sp, #28]
 800b654:	9b02      	ldr	r3, [sp, #8]
 800b656:	1aa7      	subs	r7, r4, r2
 800b658:	eb03 0802 	add.w	r8, r3, r2
 800b65c:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b65e:	2500      	movs	r5, #0
 800b660:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b664:	2200      	movs	r2, #0
 800b666:	2300      	movs	r3, #0
 800b668:	9009      	str	r0, [sp, #36]	; 0x24
 800b66a:	ae20      	add	r6, sp, #128	; 0x80
 800b66c:	4545      	cmp	r5, r8
 800b66e:	dd14      	ble.n	800b69a <__kernel_rem_pio2+0x86>
 800b670:	f04f 0800 	mov.w	r8, #0
 800b674:	9a08      	ldr	r2, [sp, #32]
 800b676:	ab20      	add	r3, sp, #128	; 0x80
 800b678:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800b67c:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800b680:	9b02      	ldr	r3, [sp, #8]
 800b682:	4598      	cmp	r8, r3
 800b684:	dc35      	bgt.n	800b6f2 <__kernel_rem_pio2+0xde>
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	2200      	movs	r2, #0
 800b68a:	f1a3 0908 	sub.w	r9, r3, #8
 800b68e:	2300      	movs	r3, #0
 800b690:	462f      	mov	r7, r5
 800b692:	2600      	movs	r6, #0
 800b694:	e9cd 2300 	strd	r2, r3, [sp]
 800b698:	e01f      	b.n	800b6da <__kernel_rem_pio2+0xc6>
 800b69a:	42ef      	cmn	r7, r5
 800b69c:	d40b      	bmi.n	800b6b6 <__kernel_rem_pio2+0xa2>
 800b69e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b6a2:	e9cd 2300 	strd	r2, r3, [sp]
 800b6a6:	f7f4 fead 	bl	8000404 <__aeabi_i2d>
 800b6aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ae:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b6b2:	3501      	adds	r5, #1
 800b6b4:	e7da      	b.n	800b66c <__kernel_rem_pio2+0x58>
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	e7f8      	b.n	800b6ae <__kernel_rem_pio2+0x9a>
 800b6bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6c0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800b6c4:	f7f4 ff08 	bl	80004d8 <__aeabi_dmul>
 800b6c8:	4602      	mov	r2, r0
 800b6ca:	460b      	mov	r3, r1
 800b6cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6d0:	f7f4 fd4c 	bl	800016c <__adddf3>
 800b6d4:	e9cd 0100 	strd	r0, r1, [sp]
 800b6d8:	3601      	adds	r6, #1
 800b6da:	9b07      	ldr	r3, [sp, #28]
 800b6dc:	3f08      	subs	r7, #8
 800b6de:	429e      	cmp	r6, r3
 800b6e0:	ddec      	ble.n	800b6bc <__kernel_rem_pio2+0xa8>
 800b6e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6e6:	f108 0801 	add.w	r8, r8, #1
 800b6ea:	e8ea 2302 	strd	r2, r3, [sl], #8
 800b6ee:	3508      	adds	r5, #8
 800b6f0:	e7c6      	b.n	800b680 <__kernel_rem_pio2+0x6c>
 800b6f2:	9b02      	ldr	r3, [sp, #8]
 800b6f4:	aa0c      	add	r2, sp, #48	; 0x30
 800b6f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b6fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b6fc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800b6fe:	9e02      	ldr	r6, [sp, #8]
 800b700:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b704:	930a      	str	r3, [sp, #40]	; 0x28
 800b706:	ab98      	add	r3, sp, #608	; 0x260
 800b708:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b70c:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800b710:	ab70      	add	r3, sp, #448	; 0x1c0
 800b712:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800b716:	46d0      	mov	r8, sl
 800b718:	46b1      	mov	r9, r6
 800b71a:	af0c      	add	r7, sp, #48	; 0x30
 800b71c:	9700      	str	r7, [sp, #0]
 800b71e:	f1b9 0f00 	cmp.w	r9, #0
 800b722:	f1a8 0808 	sub.w	r8, r8, #8
 800b726:	dc71      	bgt.n	800b80c <__kernel_rem_pio2+0x1f8>
 800b728:	465a      	mov	r2, fp
 800b72a:	4620      	mov	r0, r4
 800b72c:	4629      	mov	r1, r5
 800b72e:	f000 fbef 	bl	800bf10 <scalbn>
 800b732:	2200      	movs	r2, #0
 800b734:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b738:	4604      	mov	r4, r0
 800b73a:	460d      	mov	r5, r1
 800b73c:	f7f4 fecc 	bl	80004d8 <__aeabi_dmul>
 800b740:	f000 fb66 	bl	800be10 <floor>
 800b744:	2200      	movs	r2, #0
 800b746:	4b6e      	ldr	r3, [pc, #440]	; (800b900 <__kernel_rem_pio2+0x2ec>)
 800b748:	f7f4 fec6 	bl	80004d8 <__aeabi_dmul>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4620      	mov	r0, r4
 800b752:	4629      	mov	r1, r5
 800b754:	f7f4 fd08 	bl	8000168 <__aeabi_dsub>
 800b758:	460d      	mov	r5, r1
 800b75a:	4604      	mov	r4, r0
 800b75c:	f7f5 f96c 	bl	8000a38 <__aeabi_d2iz>
 800b760:	9004      	str	r0, [sp, #16]
 800b762:	f7f4 fe4f 	bl	8000404 <__aeabi_i2d>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4620      	mov	r0, r4
 800b76c:	4629      	mov	r1, r5
 800b76e:	f7f4 fcfb 	bl	8000168 <__aeabi_dsub>
 800b772:	f1bb 0f00 	cmp.w	fp, #0
 800b776:	4680      	mov	r8, r0
 800b778:	4689      	mov	r9, r1
 800b77a:	dd70      	ble.n	800b85e <__kernel_rem_pio2+0x24a>
 800b77c:	1e72      	subs	r2, r6, #1
 800b77e:	ab0c      	add	r3, sp, #48	; 0x30
 800b780:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b784:	9c04      	ldr	r4, [sp, #16]
 800b786:	f1cb 0118 	rsb	r1, fp, #24
 800b78a:	fa40 f301 	asr.w	r3, r0, r1
 800b78e:	441c      	add	r4, r3
 800b790:	408b      	lsls	r3, r1
 800b792:	1ac0      	subs	r0, r0, r3
 800b794:	ab0c      	add	r3, sp, #48	; 0x30
 800b796:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b79a:	f1cb 0317 	rsb	r3, fp, #23
 800b79e:	9404      	str	r4, [sp, #16]
 800b7a0:	fa40 f303 	asr.w	r3, r0, r3
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	9b00      	ldr	r3, [sp, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dd66      	ble.n	800b87a <__kernel_rem_pio2+0x266>
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b7b2:	4614      	mov	r4, r2
 800b7b4:	9b04      	ldr	r3, [sp, #16]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	4296      	cmp	r6, r2
 800b7bc:	f300 80ac 	bgt.w	800b918 <__kernel_rem_pio2+0x304>
 800b7c0:	f1bb 0f00 	cmp.w	fp, #0
 800b7c4:	dd07      	ble.n	800b7d6 <__kernel_rem_pio2+0x1c2>
 800b7c6:	f1bb 0f01 	cmp.w	fp, #1
 800b7ca:	f000 80b4 	beq.w	800b936 <__kernel_rem_pio2+0x322>
 800b7ce:	f1bb 0f02 	cmp.w	fp, #2
 800b7d2:	f000 80ba 	beq.w	800b94a <__kernel_rem_pio2+0x336>
 800b7d6:	9b00      	ldr	r3, [sp, #0]
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d14e      	bne.n	800b87a <__kernel_rem_pio2+0x266>
 800b7dc:	4642      	mov	r2, r8
 800b7de:	464b      	mov	r3, r9
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	4948      	ldr	r1, [pc, #288]	; (800b904 <__kernel_rem_pio2+0x2f0>)
 800b7e4:	f7f4 fcc0 	bl	8000168 <__aeabi_dsub>
 800b7e8:	4680      	mov	r8, r0
 800b7ea:	4689      	mov	r9, r1
 800b7ec:	2c00      	cmp	r4, #0
 800b7ee:	d044      	beq.n	800b87a <__kernel_rem_pio2+0x266>
 800b7f0:	465a      	mov	r2, fp
 800b7f2:	2000      	movs	r0, #0
 800b7f4:	4943      	ldr	r1, [pc, #268]	; (800b904 <__kernel_rem_pio2+0x2f0>)
 800b7f6:	f000 fb8b 	bl	800bf10 <scalbn>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	4640      	mov	r0, r8
 800b800:	4649      	mov	r1, r9
 800b802:	f7f4 fcb1 	bl	8000168 <__aeabi_dsub>
 800b806:	4680      	mov	r8, r0
 800b808:	4689      	mov	r9, r1
 800b80a:	e036      	b.n	800b87a <__kernel_rem_pio2+0x266>
 800b80c:	2200      	movs	r2, #0
 800b80e:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <__kernel_rem_pio2+0x2f4>)
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fe60 	bl	80004d8 <__aeabi_dmul>
 800b818:	f7f5 f90e 	bl	8000a38 <__aeabi_d2iz>
 800b81c:	f7f4 fdf2 	bl	8000404 <__aeabi_i2d>
 800b820:	4602      	mov	r2, r0
 800b822:	460b      	mov	r3, r1
 800b824:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b828:	2200      	movs	r2, #0
 800b82a:	4b38      	ldr	r3, [pc, #224]	; (800b90c <__kernel_rem_pio2+0x2f8>)
 800b82c:	f7f4 fe54 	bl	80004d8 <__aeabi_dmul>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	4620      	mov	r0, r4
 800b836:	4629      	mov	r1, r5
 800b838:	f7f4 fc96 	bl	8000168 <__aeabi_dsub>
 800b83c:	f7f5 f8fc 	bl	8000a38 <__aeabi_d2iz>
 800b840:	9b00      	ldr	r3, [sp, #0]
 800b842:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b846:	f843 0b04 	str.w	r0, [r3], #4
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b850:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b854:	f7f4 fc8a 	bl	800016c <__adddf3>
 800b858:	4604      	mov	r4, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	e75f      	b.n	800b71e <__kernel_rem_pio2+0x10a>
 800b85e:	d105      	bne.n	800b86c <__kernel_rem_pio2+0x258>
 800b860:	1e73      	subs	r3, r6, #1
 800b862:	aa0c      	add	r2, sp, #48	; 0x30
 800b864:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b868:	15c3      	asrs	r3, r0, #23
 800b86a:	e79b      	b.n	800b7a4 <__kernel_rem_pio2+0x190>
 800b86c:	2200      	movs	r2, #0
 800b86e:	4b28      	ldr	r3, [pc, #160]	; (800b910 <__kernel_rem_pio2+0x2fc>)
 800b870:	f7f5 f8b8 	bl	80009e4 <__aeabi_dcmpge>
 800b874:	2800      	cmp	r0, #0
 800b876:	d13e      	bne.n	800b8f6 <__kernel_rem_pio2+0x2e2>
 800b878:	9000      	str	r0, [sp, #0]
 800b87a:	2200      	movs	r2, #0
 800b87c:	2300      	movs	r3, #0
 800b87e:	4640      	mov	r0, r8
 800b880:	4649      	mov	r1, r9
 800b882:	f7f5 f891 	bl	80009a8 <__aeabi_dcmpeq>
 800b886:	2800      	cmp	r0, #0
 800b888:	f000 80b1 	beq.w	800b9ee <__kernel_rem_pio2+0x3da>
 800b88c:	1e74      	subs	r4, r6, #1
 800b88e:	4623      	mov	r3, r4
 800b890:	2200      	movs	r2, #0
 800b892:	9902      	ldr	r1, [sp, #8]
 800b894:	428b      	cmp	r3, r1
 800b896:	da5f      	bge.n	800b958 <__kernel_rem_pio2+0x344>
 800b898:	2a00      	cmp	r2, #0
 800b89a:	d074      	beq.n	800b986 <__kernel_rem_pio2+0x372>
 800b89c:	ab0c      	add	r3, sp, #48	; 0x30
 800b89e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8a2:	f1ab 0b18 	sub.w	fp, fp, #24
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f000 809f 	beq.w	800b9ea <__kernel_rem_pio2+0x3d6>
 800b8ac:	465a      	mov	r2, fp
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	4914      	ldr	r1, [pc, #80]	; (800b904 <__kernel_rem_pio2+0x2f0>)
 800b8b2:	f000 fb2d 	bl	800bf10 <scalbn>
 800b8b6:	46a2      	mov	sl, r4
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	f04f 0800 	mov.w	r8, #0
 800b8c0:	ab70      	add	r3, sp, #448	; 0x1c0
 800b8c2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800b908 <__kernel_rem_pio2+0x2f4>
 800b8c6:	00e5      	lsls	r5, r4, #3
 800b8c8:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800b8cc:	f1ba 0f00 	cmp.w	sl, #0
 800b8d0:	f280 80c3 	bge.w	800ba5a <__kernel_rem_pio2+0x446>
 800b8d4:	4626      	mov	r6, r4
 800b8d6:	2e00      	cmp	r6, #0
 800b8d8:	f2c0 80f5 	blt.w	800bac6 <__kernel_rem_pio2+0x4b2>
 800b8dc:	4b0d      	ldr	r3, [pc, #52]	; (800b914 <__kernel_rem_pio2+0x300>)
 800b8de:	f04f 0a00 	mov.w	sl, #0
 800b8e2:	9307      	str	r3, [sp, #28]
 800b8e4:	ab70      	add	r3, sp, #448	; 0x1c0
 800b8e6:	f04f 0b00 	mov.w	fp, #0
 800b8ea:	f04f 0800 	mov.w	r8, #0
 800b8ee:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800b8f2:	1ba7      	subs	r7, r4, r6
 800b8f4:	e0db      	b.n	800baae <__kernel_rem_pio2+0x49a>
 800b8f6:	2302      	movs	r3, #2
 800b8f8:	9300      	str	r3, [sp, #0]
 800b8fa:	e757      	b.n	800b7ac <__kernel_rem_pio2+0x198>
 800b8fc:	0800cbc8 	.word	0x0800cbc8
 800b900:	40200000 	.word	0x40200000
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	3e700000 	.word	0x3e700000
 800b90c:	41700000 	.word	0x41700000
 800b910:	3fe00000 	.word	0x3fe00000
 800b914:	0800cb88 	.word	0x0800cb88
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	b944      	cbnz	r4, 800b92e <__kernel_rem_pio2+0x31a>
 800b91c:	b11b      	cbz	r3, 800b926 <__kernel_rem_pio2+0x312>
 800b91e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b922:	603b      	str	r3, [r7, #0]
 800b924:	2301      	movs	r3, #1
 800b926:	461c      	mov	r4, r3
 800b928:	3201      	adds	r2, #1
 800b92a:	3704      	adds	r7, #4
 800b92c:	e745      	b.n	800b7ba <__kernel_rem_pio2+0x1a6>
 800b92e:	1acb      	subs	r3, r1, r3
 800b930:	603b      	str	r3, [r7, #0]
 800b932:	4623      	mov	r3, r4
 800b934:	e7f7      	b.n	800b926 <__kernel_rem_pio2+0x312>
 800b936:	1e72      	subs	r2, r6, #1
 800b938:	ab0c      	add	r3, sp, #48	; 0x30
 800b93a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b93e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b942:	a90c      	add	r1, sp, #48	; 0x30
 800b944:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b948:	e745      	b.n	800b7d6 <__kernel_rem_pio2+0x1c2>
 800b94a:	1e72      	subs	r2, r6, #1
 800b94c:	ab0c      	add	r3, sp, #48	; 0x30
 800b94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b952:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b956:	e7f4      	b.n	800b942 <__kernel_rem_pio2+0x32e>
 800b958:	a90c      	add	r1, sp, #48	; 0x30
 800b95a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b95e:	3b01      	subs	r3, #1
 800b960:	430a      	orrs	r2, r1
 800b962:	e796      	b.n	800b892 <__kernel_rem_pio2+0x27e>
 800b964:	3401      	adds	r4, #1
 800b966:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b96a:	2a00      	cmp	r2, #0
 800b96c:	d0fa      	beq.n	800b964 <__kernel_rem_pio2+0x350>
 800b96e:	9b08      	ldr	r3, [sp, #32]
 800b970:	f106 0801 	add.w	r8, r6, #1
 800b974:	18f5      	adds	r5, r6, r3
 800b976:	ab20      	add	r3, sp, #128	; 0x80
 800b978:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b97c:	4434      	add	r4, r6
 800b97e:	4544      	cmp	r4, r8
 800b980:	da04      	bge.n	800b98c <__kernel_rem_pio2+0x378>
 800b982:	4626      	mov	r6, r4
 800b984:	e6bf      	b.n	800b706 <__kernel_rem_pio2+0xf2>
 800b986:	2401      	movs	r4, #1
 800b988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b98a:	e7ec      	b.n	800b966 <__kernel_rem_pio2+0x352>
 800b98c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b98e:	f04f 0900 	mov.w	r9, #0
 800b992:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b996:	f7f4 fd35 	bl	8000404 <__aeabi_i2d>
 800b99a:	2600      	movs	r6, #0
 800b99c:	2700      	movs	r7, #0
 800b99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a0:	e9c5 0100 	strd	r0, r1, [r5]
 800b9a4:	3b08      	subs	r3, #8
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	9504      	str	r5, [sp, #16]
 800b9aa:	9b07      	ldr	r3, [sp, #28]
 800b9ac:	4599      	cmp	r9, r3
 800b9ae:	dd05      	ble.n	800b9bc <__kernel_rem_pio2+0x3a8>
 800b9b0:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800b9b4:	f108 0801 	add.w	r8, r8, #1
 800b9b8:	3508      	adds	r5, #8
 800b9ba:	e7e0      	b.n	800b97e <__kernel_rem_pio2+0x36a>
 800b9bc:	f8dd c010 	ldr.w	ip, [sp, #16]
 800b9c0:	9900      	ldr	r1, [sp, #0]
 800b9c2:	f109 0901 	add.w	r9, r9, #1
 800b9c6:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800b9ca:	9100      	str	r1, [sp, #0]
 800b9cc:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800b9d0:	f8cd c010 	str.w	ip, [sp, #16]
 800b9d4:	f7f4 fd80 	bl	80004d8 <__aeabi_dmul>
 800b9d8:	4602      	mov	r2, r0
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4630      	mov	r0, r6
 800b9de:	4639      	mov	r1, r7
 800b9e0:	f7f4 fbc4 	bl	800016c <__adddf3>
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	e7df      	b.n	800b9aa <__kernel_rem_pio2+0x396>
 800b9ea:	3c01      	subs	r4, #1
 800b9ec:	e756      	b.n	800b89c <__kernel_rem_pio2+0x288>
 800b9ee:	f1cb 0200 	rsb	r2, fp, #0
 800b9f2:	4640      	mov	r0, r8
 800b9f4:	4649      	mov	r1, r9
 800b9f6:	f000 fa8b 	bl	800bf10 <scalbn>
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	4ba4      	ldr	r3, [pc, #656]	; (800bc90 <__kernel_rem_pio2+0x67c>)
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	f7f4 ffef 	bl	80009e4 <__aeabi_dcmpge>
 800ba06:	b1f8      	cbz	r0, 800ba48 <__kernel_rem_pio2+0x434>
 800ba08:	2200      	movs	r2, #0
 800ba0a:	4ba2      	ldr	r3, [pc, #648]	; (800bc94 <__kernel_rem_pio2+0x680>)
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	4629      	mov	r1, r5
 800ba10:	f7f4 fd62 	bl	80004d8 <__aeabi_dmul>
 800ba14:	f7f5 f810 	bl	8000a38 <__aeabi_d2iz>
 800ba18:	4607      	mov	r7, r0
 800ba1a:	f7f4 fcf3 	bl	8000404 <__aeabi_i2d>
 800ba1e:	2200      	movs	r2, #0
 800ba20:	4b9b      	ldr	r3, [pc, #620]	; (800bc90 <__kernel_rem_pio2+0x67c>)
 800ba22:	f7f4 fd59 	bl	80004d8 <__aeabi_dmul>
 800ba26:	460b      	mov	r3, r1
 800ba28:	4602      	mov	r2, r0
 800ba2a:	4629      	mov	r1, r5
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7f4 fb9b 	bl	8000168 <__aeabi_dsub>
 800ba32:	f7f5 f801 	bl	8000a38 <__aeabi_d2iz>
 800ba36:	1c74      	adds	r4, r6, #1
 800ba38:	ab0c      	add	r3, sp, #48	; 0x30
 800ba3a:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800ba3e:	f10b 0b18 	add.w	fp, fp, #24
 800ba42:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800ba46:	e731      	b.n	800b8ac <__kernel_rem_pio2+0x298>
 800ba48:	4620      	mov	r0, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	f7f4 fff4 	bl	8000a38 <__aeabi_d2iz>
 800ba50:	ab0c      	add	r3, sp, #48	; 0x30
 800ba52:	4634      	mov	r4, r6
 800ba54:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800ba58:	e728      	b.n	800b8ac <__kernel_rem_pio2+0x298>
 800ba5a:	ab0c      	add	r3, sp, #48	; 0x30
 800ba5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ba60:	f7f4 fcd0 	bl	8000404 <__aeabi_i2d>
 800ba64:	4632      	mov	r2, r6
 800ba66:	463b      	mov	r3, r7
 800ba68:	f7f4 fd36 	bl	80004d8 <__aeabi_dmul>
 800ba6c:	4642      	mov	r2, r8
 800ba6e:	e86b 0102 	strd	r0, r1, [fp], #-8
 800ba72:	464b      	mov	r3, r9
 800ba74:	4630      	mov	r0, r6
 800ba76:	4639      	mov	r1, r7
 800ba78:	f7f4 fd2e 	bl	80004d8 <__aeabi_dmul>
 800ba7c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ba80:	4606      	mov	r6, r0
 800ba82:	460f      	mov	r7, r1
 800ba84:	e722      	b.n	800b8cc <__kernel_rem_pio2+0x2b8>
 800ba86:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800ba8a:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ba8e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800ba92:	f8cd c01c 	str.w	ip, [sp, #28]
 800ba96:	f7f4 fd1f 	bl	80004d8 <__aeabi_dmul>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	4650      	mov	r0, sl
 800baa0:	4659      	mov	r1, fp
 800baa2:	f7f4 fb63 	bl	800016c <__adddf3>
 800baa6:	4682      	mov	sl, r0
 800baa8:	468b      	mov	fp, r1
 800baaa:	f108 0801 	add.w	r8, r8, #1
 800baae:	9b02      	ldr	r3, [sp, #8]
 800bab0:	4598      	cmp	r8, r3
 800bab2:	dc01      	bgt.n	800bab8 <__kernel_rem_pio2+0x4a4>
 800bab4:	45b8      	cmp	r8, r7
 800bab6:	dde6      	ble.n	800ba86 <__kernel_rem_pio2+0x472>
 800bab8:	ab48      	add	r3, sp, #288	; 0x120
 800baba:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800babe:	e9c7 ab00 	strd	sl, fp, [r7]
 800bac2:	3e01      	subs	r6, #1
 800bac4:	e707      	b.n	800b8d6 <__kernel_rem_pio2+0x2c2>
 800bac6:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bac8:	2b02      	cmp	r3, #2
 800baca:	dc09      	bgt.n	800bae0 <__kernel_rem_pio2+0x4cc>
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dc32      	bgt.n	800bb36 <__kernel_rem_pio2+0x522>
 800bad0:	d05a      	beq.n	800bb88 <__kernel_rem_pio2+0x574>
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	f003 0007 	and.w	r0, r3, #7
 800bad8:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800badc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae0:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d1f5      	bne.n	800bad2 <__kernel_rem_pio2+0x4be>
 800bae6:	ab48      	add	r3, sp, #288	; 0x120
 800bae8:	441d      	add	r5, r3
 800baea:	46aa      	mov	sl, r5
 800baec:	46a3      	mov	fp, r4
 800baee:	f1bb 0f00 	cmp.w	fp, #0
 800baf2:	dc76      	bgt.n	800bbe2 <__kernel_rem_pio2+0x5ce>
 800baf4:	46aa      	mov	sl, r5
 800baf6:	46a3      	mov	fp, r4
 800baf8:	f1bb 0f01 	cmp.w	fp, #1
 800bafc:	f300 8090 	bgt.w	800bc20 <__kernel_rem_pio2+0x60c>
 800bb00:	2700      	movs	r7, #0
 800bb02:	463e      	mov	r6, r7
 800bb04:	2c01      	cmp	r4, #1
 800bb06:	f300 80aa 	bgt.w	800bc5e <__kernel_rem_pio2+0x64a>
 800bb0a:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800bb0e:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800bb12:	9b00      	ldr	r3, [sp, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	f040 80ac 	bne.w	800bc72 <__kernel_rem_pio2+0x65e>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	462a      	mov	r2, r5
 800bb1e:	9806      	ldr	r0, [sp, #24]
 800bb20:	e9c0 2300 	strd	r2, r3, [r0]
 800bb24:	4622      	mov	r2, r4
 800bb26:	460b      	mov	r3, r1
 800bb28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bb2c:	463a      	mov	r2, r7
 800bb2e:	4633      	mov	r3, r6
 800bb30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bb34:	e7cd      	b.n	800bad2 <__kernel_rem_pio2+0x4be>
 800bb36:	2000      	movs	r0, #0
 800bb38:	46a0      	mov	r8, r4
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	ab48      	add	r3, sp, #288	; 0x120
 800bb3e:	441d      	add	r5, r3
 800bb40:	f1b8 0f00 	cmp.w	r8, #0
 800bb44:	da3a      	bge.n	800bbbc <__kernel_rem_pio2+0x5a8>
 800bb46:	9b00      	ldr	r3, [sp, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d03e      	beq.n	800bbca <__kernel_rem_pio2+0x5b6>
 800bb4c:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800bb50:	4602      	mov	r2, r0
 800bb52:	462b      	mov	r3, r5
 800bb54:	9d06      	ldr	r5, [sp, #24]
 800bb56:	2601      	movs	r6, #1
 800bb58:	e9c5 2300 	strd	r2, r3, [r5]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bb62:	f7f4 fb01 	bl	8000168 <__aeabi_dsub>
 800bb66:	4684      	mov	ip, r0
 800bb68:	460f      	mov	r7, r1
 800bb6a:	ad48      	add	r5, sp, #288	; 0x120
 800bb6c:	42b4      	cmp	r4, r6
 800bb6e:	f105 0508 	add.w	r5, r5, #8
 800bb72:	da2c      	bge.n	800bbce <__kernel_rem_pio2+0x5ba>
 800bb74:	9b00      	ldr	r3, [sp, #0]
 800bb76:	b10b      	cbz	r3, 800bb7c <__kernel_rem_pio2+0x568>
 800bb78:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bb7c:	4662      	mov	r2, ip
 800bb7e:	463b      	mov	r3, r7
 800bb80:	9906      	ldr	r1, [sp, #24]
 800bb82:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800bb86:	e7a4      	b.n	800bad2 <__kernel_rem_pio2+0x4be>
 800bb88:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800bb8a:	ab48      	add	r3, sp, #288	; 0x120
 800bb8c:	4637      	mov	r7, r6
 800bb8e:	441d      	add	r5, r3
 800bb90:	2c00      	cmp	r4, #0
 800bb92:	da09      	bge.n	800bba8 <__kernel_rem_pio2+0x594>
 800bb94:	9b00      	ldr	r3, [sp, #0]
 800bb96:	b10b      	cbz	r3, 800bb9c <__kernel_rem_pio2+0x588>
 800bb98:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800bb9c:	4632      	mov	r2, r6
 800bb9e:	463b      	mov	r3, r7
 800bba0:	9906      	ldr	r1, [sp, #24]
 800bba2:	e9c1 2300 	strd	r2, r3, [r1]
 800bba6:	e794      	b.n	800bad2 <__kernel_rem_pio2+0x4be>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bbae:	4639      	mov	r1, r7
 800bbb0:	f7f4 fadc 	bl	800016c <__adddf3>
 800bbb4:	3c01      	subs	r4, #1
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	e7e9      	b.n	800bb90 <__kernel_rem_pio2+0x57c>
 800bbbc:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bbc0:	f7f4 fad4 	bl	800016c <__adddf3>
 800bbc4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bbc8:	e7ba      	b.n	800bb40 <__kernel_rem_pio2+0x52c>
 800bbca:	460d      	mov	r5, r1
 800bbcc:	e7c0      	b.n	800bb50 <__kernel_rem_pio2+0x53c>
 800bbce:	4660      	mov	r0, ip
 800bbd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbd4:	4639      	mov	r1, r7
 800bbd6:	f7f4 fac9 	bl	800016c <__adddf3>
 800bbda:	3601      	adds	r6, #1
 800bbdc:	4684      	mov	ip, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	e7c4      	b.n	800bb6c <__kernel_rem_pio2+0x558>
 800bbe2:	e9da 6700 	ldrd	r6, r7, [sl]
 800bbe6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800bbea:	4632      	mov	r2, r6
 800bbec:	463b      	mov	r3, r7
 800bbee:	4640      	mov	r0, r8
 800bbf0:	4649      	mov	r1, r9
 800bbf2:	f7f4 fabb 	bl	800016c <__adddf3>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbfe:	4640      	mov	r0, r8
 800bc00:	4649      	mov	r1, r9
 800bc02:	f7f4 fab1 	bl	8000168 <__aeabi_dsub>
 800bc06:	4632      	mov	r2, r6
 800bc08:	463b      	mov	r3, r7
 800bc0a:	f7f4 faaf 	bl	800016c <__adddf3>
 800bc0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc12:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bc16:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bc1a:	e9ca 2300 	strd	r2, r3, [sl]
 800bc1e:	e766      	b.n	800baee <__kernel_rem_pio2+0x4da>
 800bc20:	e9da 8900 	ldrd	r8, r9, [sl]
 800bc24:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800bc28:	4642      	mov	r2, r8
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	4630      	mov	r0, r6
 800bc2e:	4639      	mov	r1, r7
 800bc30:	f7f4 fa9c 	bl	800016c <__adddf3>
 800bc34:	4602      	mov	r2, r0
 800bc36:	460b      	mov	r3, r1
 800bc38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc3c:	4630      	mov	r0, r6
 800bc3e:	4639      	mov	r1, r7
 800bc40:	f7f4 fa92 	bl	8000168 <__aeabi_dsub>
 800bc44:	4642      	mov	r2, r8
 800bc46:	464b      	mov	r3, r9
 800bc48:	f7f4 fa90 	bl	800016c <__adddf3>
 800bc4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc50:	e86a 0102 	strd	r0, r1, [sl], #-8
 800bc54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800bc58:	e9ca 2300 	strd	r2, r3, [sl]
 800bc5c:	e74c      	b.n	800baf8 <__kernel_rem_pio2+0x4e4>
 800bc5e:	4638      	mov	r0, r7
 800bc60:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800bc64:	4631      	mov	r1, r6
 800bc66:	f7f4 fa81 	bl	800016c <__adddf3>
 800bc6a:	3c01      	subs	r4, #1
 800bc6c:	4607      	mov	r7, r0
 800bc6e:	460e      	mov	r6, r1
 800bc70:	e748      	b.n	800bb04 <__kernel_rem_pio2+0x4f0>
 800bc72:	9b06      	ldr	r3, [sp, #24]
 800bc74:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bc78:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bc7c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800bc80:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800bc84:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800bc88:	601d      	str	r5, [r3, #0]
 800bc8a:	615e      	str	r6, [r3, #20]
 800bc8c:	e721      	b.n	800bad2 <__kernel_rem_pio2+0x4be>
 800bc8e:	bf00      	nop
 800bc90:	41700000 	.word	0x41700000
 800bc94:	3e700000 	.word	0x3e700000

0800bc98 <__kernel_sin>:
 800bc98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9c:	b086      	sub	sp, #24
 800bc9e:	e9cd 2300 	strd	r2, r3, [sp]
 800bca2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bca6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bcaa:	4682      	mov	sl, r0
 800bcac:	460c      	mov	r4, r1
 800bcae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800bcb0:	da03      	bge.n	800bcba <__kernel_sin+0x22>
 800bcb2:	f7f4 fec1 	bl	8000a38 <__aeabi_d2iz>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d050      	beq.n	800bd5c <__kernel_sin+0xc4>
 800bcba:	4652      	mov	r2, sl
 800bcbc:	4623      	mov	r3, r4
 800bcbe:	4650      	mov	r0, sl
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	f7f4 fc09 	bl	80004d8 <__aeabi_dmul>
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	460f      	mov	r7, r1
 800bcca:	4602      	mov	r2, r0
 800bccc:	460b      	mov	r3, r1
 800bcce:	4650      	mov	r0, sl
 800bcd0:	4621      	mov	r1, r4
 800bcd2:	f7f4 fc01 	bl	80004d8 <__aeabi_dmul>
 800bcd6:	a33e      	add	r3, pc, #248	; (adr r3, 800bdd0 <__kernel_sin+0x138>)
 800bcd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcdc:	4680      	mov	r8, r0
 800bcde:	4689      	mov	r9, r1
 800bce0:	4630      	mov	r0, r6
 800bce2:	4639      	mov	r1, r7
 800bce4:	f7f4 fbf8 	bl	80004d8 <__aeabi_dmul>
 800bce8:	a33b      	add	r3, pc, #236	; (adr r3, 800bdd8 <__kernel_sin+0x140>)
 800bcea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcee:	f7f4 fa3b 	bl	8000168 <__aeabi_dsub>
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	463b      	mov	r3, r7
 800bcf6:	f7f4 fbef 	bl	80004d8 <__aeabi_dmul>
 800bcfa:	a339      	add	r3, pc, #228	; (adr r3, 800bde0 <__kernel_sin+0x148>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 fa34 	bl	800016c <__adddf3>
 800bd04:	4632      	mov	r2, r6
 800bd06:	463b      	mov	r3, r7
 800bd08:	f7f4 fbe6 	bl	80004d8 <__aeabi_dmul>
 800bd0c:	a336      	add	r3, pc, #216	; (adr r3, 800bde8 <__kernel_sin+0x150>)
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	f7f4 fa29 	bl	8000168 <__aeabi_dsub>
 800bd16:	4632      	mov	r2, r6
 800bd18:	463b      	mov	r3, r7
 800bd1a:	f7f4 fbdd 	bl	80004d8 <__aeabi_dmul>
 800bd1e:	a334      	add	r3, pc, #208	; (adr r3, 800bdf0 <__kernel_sin+0x158>)
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f7f4 fa22 	bl	800016c <__adddf3>
 800bd28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd2c:	b9dd      	cbnz	r5, 800bd66 <__kernel_sin+0xce>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4630      	mov	r0, r6
 800bd34:	4639      	mov	r1, r7
 800bd36:	f7f4 fbcf 	bl	80004d8 <__aeabi_dmul>
 800bd3a:	a32f      	add	r3, pc, #188	; (adr r3, 800bdf8 <__kernel_sin+0x160>)
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	f7f4 fa12 	bl	8000168 <__aeabi_dsub>
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	f7f4 fbc6 	bl	80004d8 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4650      	mov	r0, sl
 800bd52:	4621      	mov	r1, r4
 800bd54:	f7f4 fa0a 	bl	800016c <__adddf3>
 800bd58:	4682      	mov	sl, r0
 800bd5a:	460c      	mov	r4, r1
 800bd5c:	4650      	mov	r0, sl
 800bd5e:	4621      	mov	r1, r4
 800bd60:	b006      	add	sp, #24
 800bd62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd66:	2200      	movs	r2, #0
 800bd68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd6c:	4b24      	ldr	r3, [pc, #144]	; (800be00 <__kernel_sin+0x168>)
 800bd6e:	f7f4 fbb3 	bl	80004d8 <__aeabi_dmul>
 800bd72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd7a:	4640      	mov	r0, r8
 800bd7c:	4649      	mov	r1, r9
 800bd7e:	f7f4 fbab 	bl	80004d8 <__aeabi_dmul>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd8a:	f7f4 f9ed 	bl	8000168 <__aeabi_dsub>
 800bd8e:	4632      	mov	r2, r6
 800bd90:	463b      	mov	r3, r7
 800bd92:	f7f4 fba1 	bl	80004d8 <__aeabi_dmul>
 800bd96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd9a:	f7f4 f9e5 	bl	8000168 <__aeabi_dsub>
 800bd9e:	a316      	add	r3, pc, #88	; (adr r3, 800bdf8 <__kernel_sin+0x160>)
 800bda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	f7f4 fb94 	bl	80004d8 <__aeabi_dmul>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4630      	mov	r0, r6
 800bdb6:	4639      	mov	r1, r7
 800bdb8:	f7f4 f9d8 	bl	800016c <__adddf3>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	4621      	mov	r1, r4
 800bdc4:	f7f4 f9d0 	bl	8000168 <__aeabi_dsub>
 800bdc8:	e7c6      	b.n	800bd58 <__kernel_sin+0xc0>
 800bdca:	bf00      	nop
 800bdcc:	f3af 8000 	nop.w
 800bdd0:	5acfd57c 	.word	0x5acfd57c
 800bdd4:	3de5d93a 	.word	0x3de5d93a
 800bdd8:	8a2b9ceb 	.word	0x8a2b9ceb
 800bddc:	3e5ae5e6 	.word	0x3e5ae5e6
 800bde0:	57b1fe7d 	.word	0x57b1fe7d
 800bde4:	3ec71de3 	.word	0x3ec71de3
 800bde8:	19c161d5 	.word	0x19c161d5
 800bdec:	3f2a01a0 	.word	0x3f2a01a0
 800bdf0:	1110f8a6 	.word	0x1110f8a6
 800bdf4:	3f811111 	.word	0x3f811111
 800bdf8:	55555549 	.word	0x55555549
 800bdfc:	3fc55555 	.word	0x3fc55555
 800be00:	3fe00000 	.word	0x3fe00000

0800be04 <fabs>:
 800be04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800be08:	4770      	bx	lr
 800be0a:	0000      	movs	r0, r0
 800be0c:	0000      	movs	r0, r0
	...

0800be10 <floor>:
 800be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be14:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800be18:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800be1c:	2e13      	cmp	r6, #19
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4607      	mov	r7, r0
 800be24:	460c      	mov	r4, r1
 800be26:	4605      	mov	r5, r0
 800be28:	dc33      	bgt.n	800be92 <floor+0x82>
 800be2a:	2e00      	cmp	r6, #0
 800be2c:	da14      	bge.n	800be58 <floor+0x48>
 800be2e:	a334      	add	r3, pc, #208	; (adr r3, 800bf00 <floor+0xf0>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 f99a 	bl	800016c <__adddf3>
 800be38:	2200      	movs	r2, #0
 800be3a:	2300      	movs	r3, #0
 800be3c:	f7f4 fddc 	bl	80009f8 <__aeabi_dcmpgt>
 800be40:	b138      	cbz	r0, 800be52 <floor+0x42>
 800be42:	2c00      	cmp	r4, #0
 800be44:	da58      	bge.n	800bef8 <floor+0xe8>
 800be46:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800be4a:	431d      	orrs	r5, r3
 800be4c:	d001      	beq.n	800be52 <floor+0x42>
 800be4e:	2500      	movs	r5, #0
 800be50:	4c2d      	ldr	r4, [pc, #180]	; (800bf08 <floor+0xf8>)
 800be52:	4623      	mov	r3, r4
 800be54:	462f      	mov	r7, r5
 800be56:	e025      	b.n	800bea4 <floor+0x94>
 800be58:	4a2c      	ldr	r2, [pc, #176]	; (800bf0c <floor+0xfc>)
 800be5a:	fa42 f806 	asr.w	r8, r2, r6
 800be5e:	ea01 0208 	and.w	r2, r1, r8
 800be62:	4302      	orrs	r2, r0
 800be64:	d01e      	beq.n	800bea4 <floor+0x94>
 800be66:	a326      	add	r3, pc, #152	; (adr r3, 800bf00 <floor+0xf0>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	f7f4 f97e 	bl	800016c <__adddf3>
 800be70:	2200      	movs	r2, #0
 800be72:	2300      	movs	r3, #0
 800be74:	f7f4 fdc0 	bl	80009f8 <__aeabi_dcmpgt>
 800be78:	2800      	cmp	r0, #0
 800be7a:	d0ea      	beq.n	800be52 <floor+0x42>
 800be7c:	2c00      	cmp	r4, #0
 800be7e:	bfbe      	ittt	lt
 800be80:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800be84:	fa43 f606 	asrlt.w	r6, r3, r6
 800be88:	19a4      	addlt	r4, r4, r6
 800be8a:	2500      	movs	r5, #0
 800be8c:	ea24 0408 	bic.w	r4, r4, r8
 800be90:	e7df      	b.n	800be52 <floor+0x42>
 800be92:	2e33      	cmp	r6, #51	; 0x33
 800be94:	dd0a      	ble.n	800beac <floor+0x9c>
 800be96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800be9a:	d103      	bne.n	800bea4 <floor+0x94>
 800be9c:	f7f4 f966 	bl	800016c <__adddf3>
 800bea0:	4607      	mov	r7, r0
 800bea2:	460b      	mov	r3, r1
 800bea4:	4638      	mov	r0, r7
 800bea6:	4619      	mov	r1, r3
 800bea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800beb0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800beb4:	fa22 f808 	lsr.w	r8, r2, r8
 800beb8:	ea18 0f00 	tst.w	r8, r0
 800bebc:	d0f2      	beq.n	800bea4 <floor+0x94>
 800bebe:	a310      	add	r3, pc, #64	; (adr r3, 800bf00 <floor+0xf0>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	f7f4 f952 	bl	800016c <__adddf3>
 800bec8:	2200      	movs	r2, #0
 800beca:	2300      	movs	r3, #0
 800becc:	f7f4 fd94 	bl	80009f8 <__aeabi_dcmpgt>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d0be      	beq.n	800be52 <floor+0x42>
 800bed4:	2c00      	cmp	r4, #0
 800bed6:	da02      	bge.n	800bede <floor+0xce>
 800bed8:	2e14      	cmp	r6, #20
 800beda:	d103      	bne.n	800bee4 <floor+0xd4>
 800bedc:	3401      	adds	r4, #1
 800bede:	ea25 0508 	bic.w	r5, r5, r8
 800bee2:	e7b6      	b.n	800be52 <floor+0x42>
 800bee4:	2301      	movs	r3, #1
 800bee6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800beea:	fa03 f606 	lsl.w	r6, r3, r6
 800beee:	4435      	add	r5, r6
 800bef0:	42bd      	cmp	r5, r7
 800bef2:	bf38      	it	cc
 800bef4:	18e4      	addcc	r4, r4, r3
 800bef6:	e7f2      	b.n	800bede <floor+0xce>
 800bef8:	2500      	movs	r5, #0
 800befa:	462c      	mov	r4, r5
 800befc:	e7a9      	b.n	800be52 <floor+0x42>
 800befe:	bf00      	nop
 800bf00:	8800759c 	.word	0x8800759c
 800bf04:	7e37e43c 	.word	0x7e37e43c
 800bf08:	bff00000 	.word	0xbff00000
 800bf0c:	000fffff 	.word	0x000fffff

0800bf10 <scalbn>:
 800bf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf12:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	4617      	mov	r7, r2
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	b996      	cbnz	r6, 800bf46 <scalbn+0x36>
 800bf20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf24:	4303      	orrs	r3, r0
 800bf26:	d039      	beq.n	800bf9c <scalbn+0x8c>
 800bf28:	4b33      	ldr	r3, [pc, #204]	; (800bff8 <scalbn+0xe8>)
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	f7f4 fad4 	bl	80004d8 <__aeabi_dmul>
 800bf30:	4b32      	ldr	r3, [pc, #200]	; (800bffc <scalbn+0xec>)
 800bf32:	4604      	mov	r4, r0
 800bf34:	429f      	cmp	r7, r3
 800bf36:	460d      	mov	r5, r1
 800bf38:	da0f      	bge.n	800bf5a <scalbn+0x4a>
 800bf3a:	a32b      	add	r3, pc, #172	; (adr r3, 800bfe8 <scalbn+0xd8>)
 800bf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf40:	f7f4 faca 	bl	80004d8 <__aeabi_dmul>
 800bf44:	e006      	b.n	800bf54 <scalbn+0x44>
 800bf46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bf4a:	4296      	cmp	r6, r2
 800bf4c:	d10a      	bne.n	800bf64 <scalbn+0x54>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	f7f4 f90c 	bl	800016c <__adddf3>
 800bf54:	4604      	mov	r4, r0
 800bf56:	460d      	mov	r5, r1
 800bf58:	e020      	b.n	800bf9c <scalbn+0x8c>
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bf60:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800bf64:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800bf68:	19b9      	adds	r1, r7, r6
 800bf6a:	4291      	cmp	r1, r2
 800bf6c:	dd0e      	ble.n	800bf8c <scalbn+0x7c>
 800bf6e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800bf72:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800bf76:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800bf7a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800bf7e:	4820      	ldr	r0, [pc, #128]	; (800c000 <scalbn+0xf0>)
 800bf80:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800bf84:	a31a      	add	r3, pc, #104	; (adr r3, 800bff0 <scalbn+0xe0>)
 800bf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8a:	e7d9      	b.n	800bf40 <scalbn+0x30>
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	dd08      	ble.n	800bfa2 <scalbn+0x92>
 800bf90:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf98:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfa2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800bfa6:	da12      	bge.n	800bfce <scalbn+0xbe>
 800bfa8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bfac:	429f      	cmp	r7, r3
 800bfae:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800bfb2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800bfb6:	dcdc      	bgt.n	800bf72 <scalbn+0x62>
 800bfb8:	a30b      	add	r3, pc, #44	; (adr r3, 800bfe8 <scalbn+0xd8>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800bfc2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800bfc6:	480f      	ldr	r0, [pc, #60]	; (800c004 <scalbn+0xf4>)
 800bfc8:	f041 011f 	orr.w	r1, r1, #31
 800bfcc:	e7b8      	b.n	800bf40 <scalbn+0x30>
 800bfce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfd2:	3136      	adds	r1, #54	; 0x36
 800bfd4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfd8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800bfdc:	4620      	mov	r0, r4
 800bfde:	4629      	mov	r1, r5
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	4b09      	ldr	r3, [pc, #36]	; (800c008 <scalbn+0xf8>)
 800bfe4:	e7ac      	b.n	800bf40 <scalbn+0x30>
 800bfe6:	bf00      	nop
 800bfe8:	c2f8f359 	.word	0xc2f8f359
 800bfec:	01a56e1f 	.word	0x01a56e1f
 800bff0:	8800759c 	.word	0x8800759c
 800bff4:	7e37e43c 	.word	0x7e37e43c
 800bff8:	43500000 	.word	0x43500000
 800bffc:	ffff3cb0 	.word	0xffff3cb0
 800c000:	8800759c 	.word	0x8800759c
 800c004:	c2f8f359 	.word	0xc2f8f359
 800c008:	3c900000 	.word	0x3c900000

0800c00c <__errno>:
 800c00c:	4b01      	ldr	r3, [pc, #4]	; (800c014 <__errno+0x8>)
 800c00e:	6818      	ldr	r0, [r3, #0]
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20000190 	.word	0x20000190

0800c018 <__libc_init_array>:
 800c018:	b570      	push	{r4, r5, r6, lr}
 800c01a:	2600      	movs	r6, #0
 800c01c:	4d0c      	ldr	r5, [pc, #48]	; (800c050 <__libc_init_array+0x38>)
 800c01e:	4c0d      	ldr	r4, [pc, #52]	; (800c054 <__libc_init_array+0x3c>)
 800c020:	1b64      	subs	r4, r4, r5
 800c022:	10a4      	asrs	r4, r4, #2
 800c024:	42a6      	cmp	r6, r4
 800c026:	d109      	bne.n	800c03c <__libc_init_array+0x24>
 800c028:	f000 fc9c 	bl	800c964 <_init>
 800c02c:	2600      	movs	r6, #0
 800c02e:	4d0a      	ldr	r5, [pc, #40]	; (800c058 <__libc_init_array+0x40>)
 800c030:	4c0a      	ldr	r4, [pc, #40]	; (800c05c <__libc_init_array+0x44>)
 800c032:	1b64      	subs	r4, r4, r5
 800c034:	10a4      	asrs	r4, r4, #2
 800c036:	42a6      	cmp	r6, r4
 800c038:	d105      	bne.n	800c046 <__libc_init_array+0x2e>
 800c03a:	bd70      	pop	{r4, r5, r6, pc}
 800c03c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c040:	4798      	blx	r3
 800c042:	3601      	adds	r6, #1
 800c044:	e7ee      	b.n	800c024 <__libc_init_array+0xc>
 800c046:	f855 3b04 	ldr.w	r3, [r5], #4
 800c04a:	4798      	blx	r3
 800c04c:	3601      	adds	r6, #1
 800c04e:	e7f2      	b.n	800c036 <__libc_init_array+0x1e>
 800c050:	0800cc0c 	.word	0x0800cc0c
 800c054:	0800cc0c 	.word	0x0800cc0c
 800c058:	0800cc0c 	.word	0x0800cc0c
 800c05c:	0800cc10 	.word	0x0800cc10

0800c060 <memset>:
 800c060:	4603      	mov	r3, r0
 800c062:	4402      	add	r2, r0
 800c064:	4293      	cmp	r3, r2
 800c066:	d100      	bne.n	800c06a <memset+0xa>
 800c068:	4770      	bx	lr
 800c06a:	f803 1b01 	strb.w	r1, [r3], #1
 800c06e:	e7f9      	b.n	800c064 <memset+0x4>

0800c070 <siprintf>:
 800c070:	b40e      	push	{r1, r2, r3}
 800c072:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c076:	b500      	push	{lr}
 800c078:	b09c      	sub	sp, #112	; 0x70
 800c07a:	ab1d      	add	r3, sp, #116	; 0x74
 800c07c:	9002      	str	r0, [sp, #8]
 800c07e:	9006      	str	r0, [sp, #24]
 800c080:	9107      	str	r1, [sp, #28]
 800c082:	9104      	str	r1, [sp, #16]
 800c084:	4808      	ldr	r0, [pc, #32]	; (800c0a8 <siprintf+0x38>)
 800c086:	4909      	ldr	r1, [pc, #36]	; (800c0ac <siprintf+0x3c>)
 800c088:	f853 2b04 	ldr.w	r2, [r3], #4
 800c08c:	9105      	str	r1, [sp, #20]
 800c08e:	6800      	ldr	r0, [r0, #0]
 800c090:	a902      	add	r1, sp, #8
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	f000 f868 	bl	800c168 <_svfiprintf_r>
 800c098:	2200      	movs	r2, #0
 800c09a:	9b02      	ldr	r3, [sp, #8]
 800c09c:	701a      	strb	r2, [r3, #0]
 800c09e:	b01c      	add	sp, #112	; 0x70
 800c0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0a4:	b003      	add	sp, #12
 800c0a6:	4770      	bx	lr
 800c0a8:	20000190 	.word	0x20000190
 800c0ac:	ffff0208 	.word	0xffff0208

0800c0b0 <__ssputs_r>:
 800c0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b4:	688e      	ldr	r6, [r1, #8]
 800c0b6:	4682      	mov	sl, r0
 800c0b8:	429e      	cmp	r6, r3
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	4690      	mov	r8, r2
 800c0be:	461f      	mov	r7, r3
 800c0c0:	d838      	bhi.n	800c134 <__ssputs_r+0x84>
 800c0c2:	898a      	ldrh	r2, [r1, #12]
 800c0c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0c8:	d032      	beq.n	800c130 <__ssputs_r+0x80>
 800c0ca:	6825      	ldr	r5, [r4, #0]
 800c0cc:	6909      	ldr	r1, [r1, #16]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	eba5 0901 	sub.w	r9, r5, r1
 800c0d4:	6965      	ldr	r5, [r4, #20]
 800c0d6:	444b      	add	r3, r9
 800c0d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0e0:	106d      	asrs	r5, r5, #1
 800c0e2:	429d      	cmp	r5, r3
 800c0e4:	bf38      	it	cc
 800c0e6:	461d      	movcc	r5, r3
 800c0e8:	0553      	lsls	r3, r2, #21
 800c0ea:	d531      	bpl.n	800c150 <__ssputs_r+0xa0>
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	f000 fb6f 	bl	800c7d0 <_malloc_r>
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	b950      	cbnz	r0, 800c10c <__ssputs_r+0x5c>
 800c0f6:	230c      	movs	r3, #12
 800c0f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0fc:	f8ca 3000 	str.w	r3, [sl]
 800c100:	89a3      	ldrh	r3, [r4, #12]
 800c102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c106:	81a3      	strh	r3, [r4, #12]
 800c108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10c:	464a      	mov	r2, r9
 800c10e:	6921      	ldr	r1, [r4, #16]
 800c110:	f000 face 	bl	800c6b0 <memcpy>
 800c114:	89a3      	ldrh	r3, [r4, #12]
 800c116:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c11a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c11e:	81a3      	strh	r3, [r4, #12]
 800c120:	6126      	str	r6, [r4, #16]
 800c122:	444e      	add	r6, r9
 800c124:	6026      	str	r6, [r4, #0]
 800c126:	463e      	mov	r6, r7
 800c128:	6165      	str	r5, [r4, #20]
 800c12a:	eba5 0509 	sub.w	r5, r5, r9
 800c12e:	60a5      	str	r5, [r4, #8]
 800c130:	42be      	cmp	r6, r7
 800c132:	d900      	bls.n	800c136 <__ssputs_r+0x86>
 800c134:	463e      	mov	r6, r7
 800c136:	4632      	mov	r2, r6
 800c138:	4641      	mov	r1, r8
 800c13a:	6820      	ldr	r0, [r4, #0]
 800c13c:	f000 fac6 	bl	800c6cc <memmove>
 800c140:	68a3      	ldr	r3, [r4, #8]
 800c142:	2000      	movs	r0, #0
 800c144:	1b9b      	subs	r3, r3, r6
 800c146:	60a3      	str	r3, [r4, #8]
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	4433      	add	r3, r6
 800c14c:	6023      	str	r3, [r4, #0]
 800c14e:	e7db      	b.n	800c108 <__ssputs_r+0x58>
 800c150:	462a      	mov	r2, r5
 800c152:	f000 fbb1 	bl	800c8b8 <_realloc_r>
 800c156:	4606      	mov	r6, r0
 800c158:	2800      	cmp	r0, #0
 800c15a:	d1e1      	bne.n	800c120 <__ssputs_r+0x70>
 800c15c:	4650      	mov	r0, sl
 800c15e:	6921      	ldr	r1, [r4, #16]
 800c160:	f000 face 	bl	800c700 <_free_r>
 800c164:	e7c7      	b.n	800c0f6 <__ssputs_r+0x46>
	...

0800c168 <_svfiprintf_r>:
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	4698      	mov	r8, r3
 800c16e:	898b      	ldrh	r3, [r1, #12]
 800c170:	4607      	mov	r7, r0
 800c172:	061b      	lsls	r3, r3, #24
 800c174:	460d      	mov	r5, r1
 800c176:	4614      	mov	r4, r2
 800c178:	b09d      	sub	sp, #116	; 0x74
 800c17a:	d50e      	bpl.n	800c19a <_svfiprintf_r+0x32>
 800c17c:	690b      	ldr	r3, [r1, #16]
 800c17e:	b963      	cbnz	r3, 800c19a <_svfiprintf_r+0x32>
 800c180:	2140      	movs	r1, #64	; 0x40
 800c182:	f000 fb25 	bl	800c7d0 <_malloc_r>
 800c186:	6028      	str	r0, [r5, #0]
 800c188:	6128      	str	r0, [r5, #16]
 800c18a:	b920      	cbnz	r0, 800c196 <_svfiprintf_r+0x2e>
 800c18c:	230c      	movs	r3, #12
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c194:	e0d1      	b.n	800c33a <_svfiprintf_r+0x1d2>
 800c196:	2340      	movs	r3, #64	; 0x40
 800c198:	616b      	str	r3, [r5, #20]
 800c19a:	2300      	movs	r3, #0
 800c19c:	9309      	str	r3, [sp, #36]	; 0x24
 800c19e:	2320      	movs	r3, #32
 800c1a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1a4:	2330      	movs	r3, #48	; 0x30
 800c1a6:	f04f 0901 	mov.w	r9, #1
 800c1aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c354 <_svfiprintf_r+0x1ec>
 800c1b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1b6:	4623      	mov	r3, r4
 800c1b8:	469a      	mov	sl, r3
 800c1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1be:	b10a      	cbz	r2, 800c1c4 <_svfiprintf_r+0x5c>
 800c1c0:	2a25      	cmp	r2, #37	; 0x25
 800c1c2:	d1f9      	bne.n	800c1b8 <_svfiprintf_r+0x50>
 800c1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c8:	d00b      	beq.n	800c1e2 <_svfiprintf_r+0x7a>
 800c1ca:	465b      	mov	r3, fp
 800c1cc:	4622      	mov	r2, r4
 800c1ce:	4629      	mov	r1, r5
 800c1d0:	4638      	mov	r0, r7
 800c1d2:	f7ff ff6d 	bl	800c0b0 <__ssputs_r>
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	f000 80aa 	beq.w	800c330 <_svfiprintf_r+0x1c8>
 800c1dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1de:	445a      	add	r2, fp
 800c1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 80a2 	beq.w	800c330 <_svfiprintf_r+0x1c8>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1f6:	f10a 0a01 	add.w	sl, sl, #1
 800c1fa:	9304      	str	r3, [sp, #16]
 800c1fc:	9307      	str	r3, [sp, #28]
 800c1fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c202:	931a      	str	r3, [sp, #104]	; 0x68
 800c204:	4654      	mov	r4, sl
 800c206:	2205      	movs	r2, #5
 800c208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c20c:	4851      	ldr	r0, [pc, #324]	; (800c354 <_svfiprintf_r+0x1ec>)
 800c20e:	f000 fa41 	bl	800c694 <memchr>
 800c212:	9a04      	ldr	r2, [sp, #16]
 800c214:	b9d8      	cbnz	r0, 800c24e <_svfiprintf_r+0xe6>
 800c216:	06d0      	lsls	r0, r2, #27
 800c218:	bf44      	itt	mi
 800c21a:	2320      	movmi	r3, #32
 800c21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c220:	0711      	lsls	r1, r2, #28
 800c222:	bf44      	itt	mi
 800c224:	232b      	movmi	r3, #43	; 0x2b
 800c226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c22a:	f89a 3000 	ldrb.w	r3, [sl]
 800c22e:	2b2a      	cmp	r3, #42	; 0x2a
 800c230:	d015      	beq.n	800c25e <_svfiprintf_r+0xf6>
 800c232:	4654      	mov	r4, sl
 800c234:	2000      	movs	r0, #0
 800c236:	f04f 0c0a 	mov.w	ip, #10
 800c23a:	9a07      	ldr	r2, [sp, #28]
 800c23c:	4621      	mov	r1, r4
 800c23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c242:	3b30      	subs	r3, #48	; 0x30
 800c244:	2b09      	cmp	r3, #9
 800c246:	d94e      	bls.n	800c2e6 <_svfiprintf_r+0x17e>
 800c248:	b1b0      	cbz	r0, 800c278 <_svfiprintf_r+0x110>
 800c24a:	9207      	str	r2, [sp, #28]
 800c24c:	e014      	b.n	800c278 <_svfiprintf_r+0x110>
 800c24e:	eba0 0308 	sub.w	r3, r0, r8
 800c252:	fa09 f303 	lsl.w	r3, r9, r3
 800c256:	4313      	orrs	r3, r2
 800c258:	46a2      	mov	sl, r4
 800c25a:	9304      	str	r3, [sp, #16]
 800c25c:	e7d2      	b.n	800c204 <_svfiprintf_r+0x9c>
 800c25e:	9b03      	ldr	r3, [sp, #12]
 800c260:	1d19      	adds	r1, r3, #4
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	9103      	str	r1, [sp, #12]
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfbb      	ittet	lt
 800c26a:	425b      	neglt	r3, r3
 800c26c:	f042 0202 	orrlt.w	r2, r2, #2
 800c270:	9307      	strge	r3, [sp, #28]
 800c272:	9307      	strlt	r3, [sp, #28]
 800c274:	bfb8      	it	lt
 800c276:	9204      	strlt	r2, [sp, #16]
 800c278:	7823      	ldrb	r3, [r4, #0]
 800c27a:	2b2e      	cmp	r3, #46	; 0x2e
 800c27c:	d10c      	bne.n	800c298 <_svfiprintf_r+0x130>
 800c27e:	7863      	ldrb	r3, [r4, #1]
 800c280:	2b2a      	cmp	r3, #42	; 0x2a
 800c282:	d135      	bne.n	800c2f0 <_svfiprintf_r+0x188>
 800c284:	9b03      	ldr	r3, [sp, #12]
 800c286:	3402      	adds	r4, #2
 800c288:	1d1a      	adds	r2, r3, #4
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	9203      	str	r2, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bfb8      	it	lt
 800c292:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c296:	9305      	str	r3, [sp, #20]
 800c298:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c358 <_svfiprintf_r+0x1f0>
 800c29c:	2203      	movs	r2, #3
 800c29e:	4650      	mov	r0, sl
 800c2a0:	7821      	ldrb	r1, [r4, #0]
 800c2a2:	f000 f9f7 	bl	800c694 <memchr>
 800c2a6:	b140      	cbz	r0, 800c2ba <_svfiprintf_r+0x152>
 800c2a8:	2340      	movs	r3, #64	; 0x40
 800c2aa:	eba0 000a 	sub.w	r0, r0, sl
 800c2ae:	fa03 f000 	lsl.w	r0, r3, r0
 800c2b2:	9b04      	ldr	r3, [sp, #16]
 800c2b4:	3401      	adds	r4, #1
 800c2b6:	4303      	orrs	r3, r0
 800c2b8:	9304      	str	r3, [sp, #16]
 800c2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2be:	2206      	movs	r2, #6
 800c2c0:	4826      	ldr	r0, [pc, #152]	; (800c35c <_svfiprintf_r+0x1f4>)
 800c2c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2c6:	f000 f9e5 	bl	800c694 <memchr>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	d038      	beq.n	800c340 <_svfiprintf_r+0x1d8>
 800c2ce:	4b24      	ldr	r3, [pc, #144]	; (800c360 <_svfiprintf_r+0x1f8>)
 800c2d0:	bb1b      	cbnz	r3, 800c31a <_svfiprintf_r+0x1b2>
 800c2d2:	9b03      	ldr	r3, [sp, #12]
 800c2d4:	3307      	adds	r3, #7
 800c2d6:	f023 0307 	bic.w	r3, r3, #7
 800c2da:	3308      	adds	r3, #8
 800c2dc:	9303      	str	r3, [sp, #12]
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	4433      	add	r3, r6
 800c2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e4:	e767      	b.n	800c1b6 <_svfiprintf_r+0x4e>
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	2001      	movs	r0, #1
 800c2ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2ee:	e7a5      	b.n	800c23c <_svfiprintf_r+0xd4>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f04f 0c0a 	mov.w	ip, #10
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	3401      	adds	r4, #1
 800c2fa:	9305      	str	r3, [sp, #20]
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c302:	3a30      	subs	r2, #48	; 0x30
 800c304:	2a09      	cmp	r2, #9
 800c306:	d903      	bls.n	800c310 <_svfiprintf_r+0x1a8>
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d0c5      	beq.n	800c298 <_svfiprintf_r+0x130>
 800c30c:	9105      	str	r1, [sp, #20]
 800c30e:	e7c3      	b.n	800c298 <_svfiprintf_r+0x130>
 800c310:	4604      	mov	r4, r0
 800c312:	2301      	movs	r3, #1
 800c314:	fb0c 2101 	mla	r1, ip, r1, r2
 800c318:	e7f0      	b.n	800c2fc <_svfiprintf_r+0x194>
 800c31a:	ab03      	add	r3, sp, #12
 800c31c:	9300      	str	r3, [sp, #0]
 800c31e:	462a      	mov	r2, r5
 800c320:	4638      	mov	r0, r7
 800c322:	4b10      	ldr	r3, [pc, #64]	; (800c364 <_svfiprintf_r+0x1fc>)
 800c324:	a904      	add	r1, sp, #16
 800c326:	f3af 8000 	nop.w
 800c32a:	1c42      	adds	r2, r0, #1
 800c32c:	4606      	mov	r6, r0
 800c32e:	d1d6      	bne.n	800c2de <_svfiprintf_r+0x176>
 800c330:	89ab      	ldrh	r3, [r5, #12]
 800c332:	065b      	lsls	r3, r3, #25
 800c334:	f53f af2c 	bmi.w	800c190 <_svfiprintf_r+0x28>
 800c338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c33a:	b01d      	add	sp, #116	; 0x74
 800c33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c340:	ab03      	add	r3, sp, #12
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	462a      	mov	r2, r5
 800c346:	4638      	mov	r0, r7
 800c348:	4b06      	ldr	r3, [pc, #24]	; (800c364 <_svfiprintf_r+0x1fc>)
 800c34a:	a904      	add	r1, sp, #16
 800c34c:	f000 f87c 	bl	800c448 <_printf_i>
 800c350:	e7eb      	b.n	800c32a <_svfiprintf_r+0x1c2>
 800c352:	bf00      	nop
 800c354:	0800cbd8 	.word	0x0800cbd8
 800c358:	0800cbde 	.word	0x0800cbde
 800c35c:	0800cbe2 	.word	0x0800cbe2
 800c360:	00000000 	.word	0x00000000
 800c364:	0800c0b1 	.word	0x0800c0b1

0800c368 <_printf_common>:
 800c368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c36c:	4616      	mov	r6, r2
 800c36e:	4699      	mov	r9, r3
 800c370:	688a      	ldr	r2, [r1, #8]
 800c372:	690b      	ldr	r3, [r1, #16]
 800c374:	4607      	mov	r7, r0
 800c376:	4293      	cmp	r3, r2
 800c378:	bfb8      	it	lt
 800c37a:	4613      	movlt	r3, r2
 800c37c:	6033      	str	r3, [r6, #0]
 800c37e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c382:	460c      	mov	r4, r1
 800c384:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c388:	b10a      	cbz	r2, 800c38e <_printf_common+0x26>
 800c38a:	3301      	adds	r3, #1
 800c38c:	6033      	str	r3, [r6, #0]
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	0699      	lsls	r1, r3, #26
 800c392:	bf42      	ittt	mi
 800c394:	6833      	ldrmi	r3, [r6, #0]
 800c396:	3302      	addmi	r3, #2
 800c398:	6033      	strmi	r3, [r6, #0]
 800c39a:	6825      	ldr	r5, [r4, #0]
 800c39c:	f015 0506 	ands.w	r5, r5, #6
 800c3a0:	d106      	bne.n	800c3b0 <_printf_common+0x48>
 800c3a2:	f104 0a19 	add.w	sl, r4, #25
 800c3a6:	68e3      	ldr	r3, [r4, #12]
 800c3a8:	6832      	ldr	r2, [r6, #0]
 800c3aa:	1a9b      	subs	r3, r3, r2
 800c3ac:	42ab      	cmp	r3, r5
 800c3ae:	dc28      	bgt.n	800c402 <_printf_common+0x9a>
 800c3b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3b4:	1e13      	subs	r3, r2, #0
 800c3b6:	6822      	ldr	r2, [r4, #0]
 800c3b8:	bf18      	it	ne
 800c3ba:	2301      	movne	r3, #1
 800c3bc:	0692      	lsls	r2, r2, #26
 800c3be:	d42d      	bmi.n	800c41c <_printf_common+0xb4>
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	4638      	mov	r0, r7
 800c3c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3c8:	47c0      	blx	r8
 800c3ca:	3001      	adds	r0, #1
 800c3cc:	d020      	beq.n	800c410 <_printf_common+0xa8>
 800c3ce:	6823      	ldr	r3, [r4, #0]
 800c3d0:	68e5      	ldr	r5, [r4, #12]
 800c3d2:	f003 0306 	and.w	r3, r3, #6
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	bf18      	it	ne
 800c3da:	2500      	movne	r5, #0
 800c3dc:	6832      	ldr	r2, [r6, #0]
 800c3de:	f04f 0600 	mov.w	r6, #0
 800c3e2:	68a3      	ldr	r3, [r4, #8]
 800c3e4:	bf08      	it	eq
 800c3e6:	1aad      	subeq	r5, r5, r2
 800c3e8:	6922      	ldr	r2, [r4, #16]
 800c3ea:	bf08      	it	eq
 800c3ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	bfc4      	itt	gt
 800c3f4:	1a9b      	subgt	r3, r3, r2
 800c3f6:	18ed      	addgt	r5, r5, r3
 800c3f8:	341a      	adds	r4, #26
 800c3fa:	42b5      	cmp	r5, r6
 800c3fc:	d11a      	bne.n	800c434 <_printf_common+0xcc>
 800c3fe:	2000      	movs	r0, #0
 800c400:	e008      	b.n	800c414 <_printf_common+0xac>
 800c402:	2301      	movs	r3, #1
 800c404:	4652      	mov	r2, sl
 800c406:	4649      	mov	r1, r9
 800c408:	4638      	mov	r0, r7
 800c40a:	47c0      	blx	r8
 800c40c:	3001      	adds	r0, #1
 800c40e:	d103      	bne.n	800c418 <_printf_common+0xb0>
 800c410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c418:	3501      	adds	r5, #1
 800c41a:	e7c4      	b.n	800c3a6 <_printf_common+0x3e>
 800c41c:	2030      	movs	r0, #48	; 0x30
 800c41e:	18e1      	adds	r1, r4, r3
 800c420:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c42a:	4422      	add	r2, r4
 800c42c:	3302      	adds	r3, #2
 800c42e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c432:	e7c5      	b.n	800c3c0 <_printf_common+0x58>
 800c434:	2301      	movs	r3, #1
 800c436:	4622      	mov	r2, r4
 800c438:	4649      	mov	r1, r9
 800c43a:	4638      	mov	r0, r7
 800c43c:	47c0      	blx	r8
 800c43e:	3001      	adds	r0, #1
 800c440:	d0e6      	beq.n	800c410 <_printf_common+0xa8>
 800c442:	3601      	adds	r6, #1
 800c444:	e7d9      	b.n	800c3fa <_printf_common+0x92>
	...

0800c448 <_printf_i>:
 800c448:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c44c:	7e0f      	ldrb	r7, [r1, #24]
 800c44e:	4691      	mov	r9, r2
 800c450:	2f78      	cmp	r7, #120	; 0x78
 800c452:	4680      	mov	r8, r0
 800c454:	460c      	mov	r4, r1
 800c456:	469a      	mov	sl, r3
 800c458:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c45a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c45e:	d807      	bhi.n	800c470 <_printf_i+0x28>
 800c460:	2f62      	cmp	r7, #98	; 0x62
 800c462:	d80a      	bhi.n	800c47a <_printf_i+0x32>
 800c464:	2f00      	cmp	r7, #0
 800c466:	f000 80d9 	beq.w	800c61c <_printf_i+0x1d4>
 800c46a:	2f58      	cmp	r7, #88	; 0x58
 800c46c:	f000 80a4 	beq.w	800c5b8 <_printf_i+0x170>
 800c470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c474:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c478:	e03a      	b.n	800c4f0 <_printf_i+0xa8>
 800c47a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c47e:	2b15      	cmp	r3, #21
 800c480:	d8f6      	bhi.n	800c470 <_printf_i+0x28>
 800c482:	a101      	add	r1, pc, #4	; (adr r1, 800c488 <_printf_i+0x40>)
 800c484:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c488:	0800c4e1 	.word	0x0800c4e1
 800c48c:	0800c4f5 	.word	0x0800c4f5
 800c490:	0800c471 	.word	0x0800c471
 800c494:	0800c471 	.word	0x0800c471
 800c498:	0800c471 	.word	0x0800c471
 800c49c:	0800c471 	.word	0x0800c471
 800c4a0:	0800c4f5 	.word	0x0800c4f5
 800c4a4:	0800c471 	.word	0x0800c471
 800c4a8:	0800c471 	.word	0x0800c471
 800c4ac:	0800c471 	.word	0x0800c471
 800c4b0:	0800c471 	.word	0x0800c471
 800c4b4:	0800c603 	.word	0x0800c603
 800c4b8:	0800c525 	.word	0x0800c525
 800c4bc:	0800c5e5 	.word	0x0800c5e5
 800c4c0:	0800c471 	.word	0x0800c471
 800c4c4:	0800c471 	.word	0x0800c471
 800c4c8:	0800c625 	.word	0x0800c625
 800c4cc:	0800c471 	.word	0x0800c471
 800c4d0:	0800c525 	.word	0x0800c525
 800c4d4:	0800c471 	.word	0x0800c471
 800c4d8:	0800c471 	.word	0x0800c471
 800c4dc:	0800c5ed 	.word	0x0800c5ed
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	1d1a      	adds	r2, r3, #4
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	602a      	str	r2, [r5, #0]
 800c4e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e0a4      	b.n	800c63e <_printf_i+0x1f6>
 800c4f4:	6820      	ldr	r0, [r4, #0]
 800c4f6:	6829      	ldr	r1, [r5, #0]
 800c4f8:	0606      	lsls	r6, r0, #24
 800c4fa:	f101 0304 	add.w	r3, r1, #4
 800c4fe:	d50a      	bpl.n	800c516 <_printf_i+0xce>
 800c500:	680e      	ldr	r6, [r1, #0]
 800c502:	602b      	str	r3, [r5, #0]
 800c504:	2e00      	cmp	r6, #0
 800c506:	da03      	bge.n	800c510 <_printf_i+0xc8>
 800c508:	232d      	movs	r3, #45	; 0x2d
 800c50a:	4276      	negs	r6, r6
 800c50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c510:	230a      	movs	r3, #10
 800c512:	485e      	ldr	r0, [pc, #376]	; (800c68c <_printf_i+0x244>)
 800c514:	e019      	b.n	800c54a <_printf_i+0x102>
 800c516:	680e      	ldr	r6, [r1, #0]
 800c518:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c51c:	602b      	str	r3, [r5, #0]
 800c51e:	bf18      	it	ne
 800c520:	b236      	sxthne	r6, r6
 800c522:	e7ef      	b.n	800c504 <_printf_i+0xbc>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	6820      	ldr	r0, [r4, #0]
 800c528:	1d19      	adds	r1, r3, #4
 800c52a:	6029      	str	r1, [r5, #0]
 800c52c:	0601      	lsls	r1, r0, #24
 800c52e:	d501      	bpl.n	800c534 <_printf_i+0xec>
 800c530:	681e      	ldr	r6, [r3, #0]
 800c532:	e002      	b.n	800c53a <_printf_i+0xf2>
 800c534:	0646      	lsls	r6, r0, #25
 800c536:	d5fb      	bpl.n	800c530 <_printf_i+0xe8>
 800c538:	881e      	ldrh	r6, [r3, #0]
 800c53a:	2f6f      	cmp	r7, #111	; 0x6f
 800c53c:	bf0c      	ite	eq
 800c53e:	2308      	moveq	r3, #8
 800c540:	230a      	movne	r3, #10
 800c542:	4852      	ldr	r0, [pc, #328]	; (800c68c <_printf_i+0x244>)
 800c544:	2100      	movs	r1, #0
 800c546:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c54a:	6865      	ldr	r5, [r4, #4]
 800c54c:	2d00      	cmp	r5, #0
 800c54e:	bfa8      	it	ge
 800c550:	6821      	ldrge	r1, [r4, #0]
 800c552:	60a5      	str	r5, [r4, #8]
 800c554:	bfa4      	itt	ge
 800c556:	f021 0104 	bicge.w	r1, r1, #4
 800c55a:	6021      	strge	r1, [r4, #0]
 800c55c:	b90e      	cbnz	r6, 800c562 <_printf_i+0x11a>
 800c55e:	2d00      	cmp	r5, #0
 800c560:	d04d      	beq.n	800c5fe <_printf_i+0x1b6>
 800c562:	4615      	mov	r5, r2
 800c564:	fbb6 f1f3 	udiv	r1, r6, r3
 800c568:	fb03 6711 	mls	r7, r3, r1, r6
 800c56c:	5dc7      	ldrb	r7, [r0, r7]
 800c56e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c572:	4637      	mov	r7, r6
 800c574:	42bb      	cmp	r3, r7
 800c576:	460e      	mov	r6, r1
 800c578:	d9f4      	bls.n	800c564 <_printf_i+0x11c>
 800c57a:	2b08      	cmp	r3, #8
 800c57c:	d10b      	bne.n	800c596 <_printf_i+0x14e>
 800c57e:	6823      	ldr	r3, [r4, #0]
 800c580:	07de      	lsls	r6, r3, #31
 800c582:	d508      	bpl.n	800c596 <_printf_i+0x14e>
 800c584:	6923      	ldr	r3, [r4, #16]
 800c586:	6861      	ldr	r1, [r4, #4]
 800c588:	4299      	cmp	r1, r3
 800c58a:	bfde      	ittt	le
 800c58c:	2330      	movle	r3, #48	; 0x30
 800c58e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c592:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c596:	1b52      	subs	r2, r2, r5
 800c598:	6122      	str	r2, [r4, #16]
 800c59a:	464b      	mov	r3, r9
 800c59c:	4621      	mov	r1, r4
 800c59e:	4640      	mov	r0, r8
 800c5a0:	f8cd a000 	str.w	sl, [sp]
 800c5a4:	aa03      	add	r2, sp, #12
 800c5a6:	f7ff fedf 	bl	800c368 <_printf_common>
 800c5aa:	3001      	adds	r0, #1
 800c5ac:	d14c      	bne.n	800c648 <_printf_i+0x200>
 800c5ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5b2:	b004      	add	sp, #16
 800c5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5b8:	4834      	ldr	r0, [pc, #208]	; (800c68c <_printf_i+0x244>)
 800c5ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5be:	6829      	ldr	r1, [r5, #0]
 800c5c0:	6823      	ldr	r3, [r4, #0]
 800c5c2:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5c6:	6029      	str	r1, [r5, #0]
 800c5c8:	061d      	lsls	r5, r3, #24
 800c5ca:	d514      	bpl.n	800c5f6 <_printf_i+0x1ae>
 800c5cc:	07df      	lsls	r7, r3, #31
 800c5ce:	bf44      	itt	mi
 800c5d0:	f043 0320 	orrmi.w	r3, r3, #32
 800c5d4:	6023      	strmi	r3, [r4, #0]
 800c5d6:	b91e      	cbnz	r6, 800c5e0 <_printf_i+0x198>
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	f023 0320 	bic.w	r3, r3, #32
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	2310      	movs	r3, #16
 800c5e2:	e7af      	b.n	800c544 <_printf_i+0xfc>
 800c5e4:	6823      	ldr	r3, [r4, #0]
 800c5e6:	f043 0320 	orr.w	r3, r3, #32
 800c5ea:	6023      	str	r3, [r4, #0]
 800c5ec:	2378      	movs	r3, #120	; 0x78
 800c5ee:	4828      	ldr	r0, [pc, #160]	; (800c690 <_printf_i+0x248>)
 800c5f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5f4:	e7e3      	b.n	800c5be <_printf_i+0x176>
 800c5f6:	0659      	lsls	r1, r3, #25
 800c5f8:	bf48      	it	mi
 800c5fa:	b2b6      	uxthmi	r6, r6
 800c5fc:	e7e6      	b.n	800c5cc <_printf_i+0x184>
 800c5fe:	4615      	mov	r5, r2
 800c600:	e7bb      	b.n	800c57a <_printf_i+0x132>
 800c602:	682b      	ldr	r3, [r5, #0]
 800c604:	6826      	ldr	r6, [r4, #0]
 800c606:	1d18      	adds	r0, r3, #4
 800c608:	6961      	ldr	r1, [r4, #20]
 800c60a:	6028      	str	r0, [r5, #0]
 800c60c:	0635      	lsls	r5, r6, #24
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	d501      	bpl.n	800c616 <_printf_i+0x1ce>
 800c612:	6019      	str	r1, [r3, #0]
 800c614:	e002      	b.n	800c61c <_printf_i+0x1d4>
 800c616:	0670      	lsls	r0, r6, #25
 800c618:	d5fb      	bpl.n	800c612 <_printf_i+0x1ca>
 800c61a:	8019      	strh	r1, [r3, #0]
 800c61c:	2300      	movs	r3, #0
 800c61e:	4615      	mov	r5, r2
 800c620:	6123      	str	r3, [r4, #16]
 800c622:	e7ba      	b.n	800c59a <_printf_i+0x152>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	2100      	movs	r1, #0
 800c628:	1d1a      	adds	r2, r3, #4
 800c62a:	602a      	str	r2, [r5, #0]
 800c62c:	681d      	ldr	r5, [r3, #0]
 800c62e:	6862      	ldr	r2, [r4, #4]
 800c630:	4628      	mov	r0, r5
 800c632:	f000 f82f 	bl	800c694 <memchr>
 800c636:	b108      	cbz	r0, 800c63c <_printf_i+0x1f4>
 800c638:	1b40      	subs	r0, r0, r5
 800c63a:	6060      	str	r0, [r4, #4]
 800c63c:	6863      	ldr	r3, [r4, #4]
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	2300      	movs	r3, #0
 800c642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c646:	e7a8      	b.n	800c59a <_printf_i+0x152>
 800c648:	462a      	mov	r2, r5
 800c64a:	4649      	mov	r1, r9
 800c64c:	4640      	mov	r0, r8
 800c64e:	6923      	ldr	r3, [r4, #16]
 800c650:	47d0      	blx	sl
 800c652:	3001      	adds	r0, #1
 800c654:	d0ab      	beq.n	800c5ae <_printf_i+0x166>
 800c656:	6823      	ldr	r3, [r4, #0]
 800c658:	079b      	lsls	r3, r3, #30
 800c65a:	d413      	bmi.n	800c684 <_printf_i+0x23c>
 800c65c:	68e0      	ldr	r0, [r4, #12]
 800c65e:	9b03      	ldr	r3, [sp, #12]
 800c660:	4298      	cmp	r0, r3
 800c662:	bfb8      	it	lt
 800c664:	4618      	movlt	r0, r3
 800c666:	e7a4      	b.n	800c5b2 <_printf_i+0x16a>
 800c668:	2301      	movs	r3, #1
 800c66a:	4632      	mov	r2, r6
 800c66c:	4649      	mov	r1, r9
 800c66e:	4640      	mov	r0, r8
 800c670:	47d0      	blx	sl
 800c672:	3001      	adds	r0, #1
 800c674:	d09b      	beq.n	800c5ae <_printf_i+0x166>
 800c676:	3501      	adds	r5, #1
 800c678:	68e3      	ldr	r3, [r4, #12]
 800c67a:	9903      	ldr	r1, [sp, #12]
 800c67c:	1a5b      	subs	r3, r3, r1
 800c67e:	42ab      	cmp	r3, r5
 800c680:	dcf2      	bgt.n	800c668 <_printf_i+0x220>
 800c682:	e7eb      	b.n	800c65c <_printf_i+0x214>
 800c684:	2500      	movs	r5, #0
 800c686:	f104 0619 	add.w	r6, r4, #25
 800c68a:	e7f5      	b.n	800c678 <_printf_i+0x230>
 800c68c:	0800cbe9 	.word	0x0800cbe9
 800c690:	0800cbfa 	.word	0x0800cbfa

0800c694 <memchr>:
 800c694:	4603      	mov	r3, r0
 800c696:	b510      	push	{r4, lr}
 800c698:	b2c9      	uxtb	r1, r1
 800c69a:	4402      	add	r2, r0
 800c69c:	4293      	cmp	r3, r2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	d101      	bne.n	800c6a6 <memchr+0x12>
 800c6a2:	2000      	movs	r0, #0
 800c6a4:	e003      	b.n	800c6ae <memchr+0x1a>
 800c6a6:	7804      	ldrb	r4, [r0, #0]
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	428c      	cmp	r4, r1
 800c6ac:	d1f6      	bne.n	800c69c <memchr+0x8>
 800c6ae:	bd10      	pop	{r4, pc}

0800c6b0 <memcpy>:
 800c6b0:	440a      	add	r2, r1
 800c6b2:	4291      	cmp	r1, r2
 800c6b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c6b8:	d100      	bne.n	800c6bc <memcpy+0xc>
 800c6ba:	4770      	bx	lr
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6c2:	4291      	cmp	r1, r2
 800c6c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c6c8:	d1f9      	bne.n	800c6be <memcpy+0xe>
 800c6ca:	bd10      	pop	{r4, pc}

0800c6cc <memmove>:
 800c6cc:	4288      	cmp	r0, r1
 800c6ce:	b510      	push	{r4, lr}
 800c6d0:	eb01 0402 	add.w	r4, r1, r2
 800c6d4:	d902      	bls.n	800c6dc <memmove+0x10>
 800c6d6:	4284      	cmp	r4, r0
 800c6d8:	4623      	mov	r3, r4
 800c6da:	d807      	bhi.n	800c6ec <memmove+0x20>
 800c6dc:	1e43      	subs	r3, r0, #1
 800c6de:	42a1      	cmp	r1, r4
 800c6e0:	d008      	beq.n	800c6f4 <memmove+0x28>
 800c6e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ea:	e7f8      	b.n	800c6de <memmove+0x12>
 800c6ec:	4601      	mov	r1, r0
 800c6ee:	4402      	add	r2, r0
 800c6f0:	428a      	cmp	r2, r1
 800c6f2:	d100      	bne.n	800c6f6 <memmove+0x2a>
 800c6f4:	bd10      	pop	{r4, pc}
 800c6f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6fe:	e7f7      	b.n	800c6f0 <memmove+0x24>

0800c700 <_free_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4605      	mov	r5, r0
 800c704:	2900      	cmp	r1, #0
 800c706:	d040      	beq.n	800c78a <_free_r+0x8a>
 800c708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c70c:	1f0c      	subs	r4, r1, #4
 800c70e:	2b00      	cmp	r3, #0
 800c710:	bfb8      	it	lt
 800c712:	18e4      	addlt	r4, r4, r3
 800c714:	f000 f910 	bl	800c938 <__malloc_lock>
 800c718:	4a1c      	ldr	r2, [pc, #112]	; (800c78c <_free_r+0x8c>)
 800c71a:	6813      	ldr	r3, [r2, #0]
 800c71c:	b933      	cbnz	r3, 800c72c <_free_r+0x2c>
 800c71e:	6063      	str	r3, [r4, #4]
 800c720:	6014      	str	r4, [r2, #0]
 800c722:	4628      	mov	r0, r5
 800c724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c728:	f000 b90c 	b.w	800c944 <__malloc_unlock>
 800c72c:	42a3      	cmp	r3, r4
 800c72e:	d908      	bls.n	800c742 <_free_r+0x42>
 800c730:	6820      	ldr	r0, [r4, #0]
 800c732:	1821      	adds	r1, r4, r0
 800c734:	428b      	cmp	r3, r1
 800c736:	bf01      	itttt	eq
 800c738:	6819      	ldreq	r1, [r3, #0]
 800c73a:	685b      	ldreq	r3, [r3, #4]
 800c73c:	1809      	addeq	r1, r1, r0
 800c73e:	6021      	streq	r1, [r4, #0]
 800c740:	e7ed      	b.n	800c71e <_free_r+0x1e>
 800c742:	461a      	mov	r2, r3
 800c744:	685b      	ldr	r3, [r3, #4]
 800c746:	b10b      	cbz	r3, 800c74c <_free_r+0x4c>
 800c748:	42a3      	cmp	r3, r4
 800c74a:	d9fa      	bls.n	800c742 <_free_r+0x42>
 800c74c:	6811      	ldr	r1, [r2, #0]
 800c74e:	1850      	adds	r0, r2, r1
 800c750:	42a0      	cmp	r0, r4
 800c752:	d10b      	bne.n	800c76c <_free_r+0x6c>
 800c754:	6820      	ldr	r0, [r4, #0]
 800c756:	4401      	add	r1, r0
 800c758:	1850      	adds	r0, r2, r1
 800c75a:	4283      	cmp	r3, r0
 800c75c:	6011      	str	r1, [r2, #0]
 800c75e:	d1e0      	bne.n	800c722 <_free_r+0x22>
 800c760:	6818      	ldr	r0, [r3, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	4401      	add	r1, r0
 800c766:	6011      	str	r1, [r2, #0]
 800c768:	6053      	str	r3, [r2, #4]
 800c76a:	e7da      	b.n	800c722 <_free_r+0x22>
 800c76c:	d902      	bls.n	800c774 <_free_r+0x74>
 800c76e:	230c      	movs	r3, #12
 800c770:	602b      	str	r3, [r5, #0]
 800c772:	e7d6      	b.n	800c722 <_free_r+0x22>
 800c774:	6820      	ldr	r0, [r4, #0]
 800c776:	1821      	adds	r1, r4, r0
 800c778:	428b      	cmp	r3, r1
 800c77a:	bf01      	itttt	eq
 800c77c:	6819      	ldreq	r1, [r3, #0]
 800c77e:	685b      	ldreq	r3, [r3, #4]
 800c780:	1809      	addeq	r1, r1, r0
 800c782:	6021      	streq	r1, [r4, #0]
 800c784:	6063      	str	r3, [r4, #4]
 800c786:	6054      	str	r4, [r2, #4]
 800c788:	e7cb      	b.n	800c722 <_free_r+0x22>
 800c78a:	bd38      	pop	{r3, r4, r5, pc}
 800c78c:	20001534 	.word	0x20001534

0800c790 <sbrk_aligned>:
 800c790:	b570      	push	{r4, r5, r6, lr}
 800c792:	4e0e      	ldr	r6, [pc, #56]	; (800c7cc <sbrk_aligned+0x3c>)
 800c794:	460c      	mov	r4, r1
 800c796:	6831      	ldr	r1, [r6, #0]
 800c798:	4605      	mov	r5, r0
 800c79a:	b911      	cbnz	r1, 800c7a2 <sbrk_aligned+0x12>
 800c79c:	f000 f8bc 	bl	800c918 <_sbrk_r>
 800c7a0:	6030      	str	r0, [r6, #0]
 800c7a2:	4621      	mov	r1, r4
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 f8b7 	bl	800c918 <_sbrk_r>
 800c7aa:	1c43      	adds	r3, r0, #1
 800c7ac:	d00a      	beq.n	800c7c4 <sbrk_aligned+0x34>
 800c7ae:	1cc4      	adds	r4, r0, #3
 800c7b0:	f024 0403 	bic.w	r4, r4, #3
 800c7b4:	42a0      	cmp	r0, r4
 800c7b6:	d007      	beq.n	800c7c8 <sbrk_aligned+0x38>
 800c7b8:	1a21      	subs	r1, r4, r0
 800c7ba:	4628      	mov	r0, r5
 800c7bc:	f000 f8ac 	bl	800c918 <_sbrk_r>
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	d101      	bne.n	800c7c8 <sbrk_aligned+0x38>
 800c7c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c7c8:	4620      	mov	r0, r4
 800c7ca:	bd70      	pop	{r4, r5, r6, pc}
 800c7cc:	20001538 	.word	0x20001538

0800c7d0 <_malloc_r>:
 800c7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d4:	1ccd      	adds	r5, r1, #3
 800c7d6:	f025 0503 	bic.w	r5, r5, #3
 800c7da:	3508      	adds	r5, #8
 800c7dc:	2d0c      	cmp	r5, #12
 800c7de:	bf38      	it	cc
 800c7e0:	250c      	movcc	r5, #12
 800c7e2:	2d00      	cmp	r5, #0
 800c7e4:	4607      	mov	r7, r0
 800c7e6:	db01      	blt.n	800c7ec <_malloc_r+0x1c>
 800c7e8:	42a9      	cmp	r1, r5
 800c7ea:	d905      	bls.n	800c7f8 <_malloc_r+0x28>
 800c7ec:	230c      	movs	r3, #12
 800c7ee:	2600      	movs	r6, #0
 800c7f0:	603b      	str	r3, [r7, #0]
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7f8:	4e2e      	ldr	r6, [pc, #184]	; (800c8b4 <_malloc_r+0xe4>)
 800c7fa:	f000 f89d 	bl	800c938 <__malloc_lock>
 800c7fe:	6833      	ldr	r3, [r6, #0]
 800c800:	461c      	mov	r4, r3
 800c802:	bb34      	cbnz	r4, 800c852 <_malloc_r+0x82>
 800c804:	4629      	mov	r1, r5
 800c806:	4638      	mov	r0, r7
 800c808:	f7ff ffc2 	bl	800c790 <sbrk_aligned>
 800c80c:	1c43      	adds	r3, r0, #1
 800c80e:	4604      	mov	r4, r0
 800c810:	d14d      	bne.n	800c8ae <_malloc_r+0xde>
 800c812:	6834      	ldr	r4, [r6, #0]
 800c814:	4626      	mov	r6, r4
 800c816:	2e00      	cmp	r6, #0
 800c818:	d140      	bne.n	800c89c <_malloc_r+0xcc>
 800c81a:	6823      	ldr	r3, [r4, #0]
 800c81c:	4631      	mov	r1, r6
 800c81e:	4638      	mov	r0, r7
 800c820:	eb04 0803 	add.w	r8, r4, r3
 800c824:	f000 f878 	bl	800c918 <_sbrk_r>
 800c828:	4580      	cmp	r8, r0
 800c82a:	d13a      	bne.n	800c8a2 <_malloc_r+0xd2>
 800c82c:	6821      	ldr	r1, [r4, #0]
 800c82e:	3503      	adds	r5, #3
 800c830:	1a6d      	subs	r5, r5, r1
 800c832:	f025 0503 	bic.w	r5, r5, #3
 800c836:	3508      	adds	r5, #8
 800c838:	2d0c      	cmp	r5, #12
 800c83a:	bf38      	it	cc
 800c83c:	250c      	movcc	r5, #12
 800c83e:	4638      	mov	r0, r7
 800c840:	4629      	mov	r1, r5
 800c842:	f7ff ffa5 	bl	800c790 <sbrk_aligned>
 800c846:	3001      	adds	r0, #1
 800c848:	d02b      	beq.n	800c8a2 <_malloc_r+0xd2>
 800c84a:	6823      	ldr	r3, [r4, #0]
 800c84c:	442b      	add	r3, r5
 800c84e:	6023      	str	r3, [r4, #0]
 800c850:	e00e      	b.n	800c870 <_malloc_r+0xa0>
 800c852:	6822      	ldr	r2, [r4, #0]
 800c854:	1b52      	subs	r2, r2, r5
 800c856:	d41e      	bmi.n	800c896 <_malloc_r+0xc6>
 800c858:	2a0b      	cmp	r2, #11
 800c85a:	d916      	bls.n	800c88a <_malloc_r+0xba>
 800c85c:	1961      	adds	r1, r4, r5
 800c85e:	42a3      	cmp	r3, r4
 800c860:	6025      	str	r5, [r4, #0]
 800c862:	bf18      	it	ne
 800c864:	6059      	strne	r1, [r3, #4]
 800c866:	6863      	ldr	r3, [r4, #4]
 800c868:	bf08      	it	eq
 800c86a:	6031      	streq	r1, [r6, #0]
 800c86c:	5162      	str	r2, [r4, r5]
 800c86e:	604b      	str	r3, [r1, #4]
 800c870:	4638      	mov	r0, r7
 800c872:	f104 060b 	add.w	r6, r4, #11
 800c876:	f000 f865 	bl	800c944 <__malloc_unlock>
 800c87a:	f026 0607 	bic.w	r6, r6, #7
 800c87e:	1d23      	adds	r3, r4, #4
 800c880:	1af2      	subs	r2, r6, r3
 800c882:	d0b6      	beq.n	800c7f2 <_malloc_r+0x22>
 800c884:	1b9b      	subs	r3, r3, r6
 800c886:	50a3      	str	r3, [r4, r2]
 800c888:	e7b3      	b.n	800c7f2 <_malloc_r+0x22>
 800c88a:	6862      	ldr	r2, [r4, #4]
 800c88c:	42a3      	cmp	r3, r4
 800c88e:	bf0c      	ite	eq
 800c890:	6032      	streq	r2, [r6, #0]
 800c892:	605a      	strne	r2, [r3, #4]
 800c894:	e7ec      	b.n	800c870 <_malloc_r+0xa0>
 800c896:	4623      	mov	r3, r4
 800c898:	6864      	ldr	r4, [r4, #4]
 800c89a:	e7b2      	b.n	800c802 <_malloc_r+0x32>
 800c89c:	4634      	mov	r4, r6
 800c89e:	6876      	ldr	r6, [r6, #4]
 800c8a0:	e7b9      	b.n	800c816 <_malloc_r+0x46>
 800c8a2:	230c      	movs	r3, #12
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	f000 f84c 	bl	800c944 <__malloc_unlock>
 800c8ac:	e7a1      	b.n	800c7f2 <_malloc_r+0x22>
 800c8ae:	6025      	str	r5, [r4, #0]
 800c8b0:	e7de      	b.n	800c870 <_malloc_r+0xa0>
 800c8b2:	bf00      	nop
 800c8b4:	20001534 	.word	0x20001534

0800c8b8 <_realloc_r>:
 800c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8bc:	4680      	mov	r8, r0
 800c8be:	4614      	mov	r4, r2
 800c8c0:	460e      	mov	r6, r1
 800c8c2:	b921      	cbnz	r1, 800c8ce <_realloc_r+0x16>
 800c8c4:	4611      	mov	r1, r2
 800c8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ca:	f7ff bf81 	b.w	800c7d0 <_malloc_r>
 800c8ce:	b92a      	cbnz	r2, 800c8dc <_realloc_r+0x24>
 800c8d0:	f7ff ff16 	bl	800c700 <_free_r>
 800c8d4:	4625      	mov	r5, r4
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8dc:	f000 f838 	bl	800c950 <_malloc_usable_size_r>
 800c8e0:	4284      	cmp	r4, r0
 800c8e2:	4607      	mov	r7, r0
 800c8e4:	d802      	bhi.n	800c8ec <_realloc_r+0x34>
 800c8e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8ea:	d812      	bhi.n	800c912 <_realloc_r+0x5a>
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4640      	mov	r0, r8
 800c8f0:	f7ff ff6e 	bl	800c7d0 <_malloc_r>
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d0ed      	beq.n	800c8d6 <_realloc_r+0x1e>
 800c8fa:	42bc      	cmp	r4, r7
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4631      	mov	r1, r6
 800c900:	bf28      	it	cs
 800c902:	463a      	movcs	r2, r7
 800c904:	f7ff fed4 	bl	800c6b0 <memcpy>
 800c908:	4631      	mov	r1, r6
 800c90a:	4640      	mov	r0, r8
 800c90c:	f7ff fef8 	bl	800c700 <_free_r>
 800c910:	e7e1      	b.n	800c8d6 <_realloc_r+0x1e>
 800c912:	4635      	mov	r5, r6
 800c914:	e7df      	b.n	800c8d6 <_realloc_r+0x1e>
	...

0800c918 <_sbrk_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	2300      	movs	r3, #0
 800c91c:	4d05      	ldr	r5, [pc, #20]	; (800c934 <_sbrk_r+0x1c>)
 800c91e:	4604      	mov	r4, r0
 800c920:	4608      	mov	r0, r1
 800c922:	602b      	str	r3, [r5, #0]
 800c924:	f7f5 fb50 	bl	8001fc8 <_sbrk>
 800c928:	1c43      	adds	r3, r0, #1
 800c92a:	d102      	bne.n	800c932 <_sbrk_r+0x1a>
 800c92c:	682b      	ldr	r3, [r5, #0]
 800c92e:	b103      	cbz	r3, 800c932 <_sbrk_r+0x1a>
 800c930:	6023      	str	r3, [r4, #0]
 800c932:	bd38      	pop	{r3, r4, r5, pc}
 800c934:	2000153c 	.word	0x2000153c

0800c938 <__malloc_lock>:
 800c938:	4801      	ldr	r0, [pc, #4]	; (800c940 <__malloc_lock+0x8>)
 800c93a:	f000 b811 	b.w	800c960 <__retarget_lock_acquire_recursive>
 800c93e:	bf00      	nop
 800c940:	20001540 	.word	0x20001540

0800c944 <__malloc_unlock>:
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <__malloc_unlock+0x8>)
 800c946:	f000 b80c 	b.w	800c962 <__retarget_lock_release_recursive>
 800c94a:	bf00      	nop
 800c94c:	20001540 	.word	0x20001540

0800c950 <_malloc_usable_size_r>:
 800c950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c954:	1f18      	subs	r0, r3, #4
 800c956:	2b00      	cmp	r3, #0
 800c958:	bfbc      	itt	lt
 800c95a:	580b      	ldrlt	r3, [r1, r0]
 800c95c:	18c0      	addlt	r0, r0, r3
 800c95e:	4770      	bx	lr

0800c960 <__retarget_lock_acquire_recursive>:
 800c960:	4770      	bx	lr

0800c962 <__retarget_lock_release_recursive>:
 800c962:	4770      	bx	lr

0800c964 <_init>:
 800c964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c966:	bf00      	nop
 800c968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c96a:	bc08      	pop	{r3}
 800c96c:	469e      	mov	lr, r3
 800c96e:	4770      	bx	lr

0800c970 <_fini>:
 800c970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c972:	bf00      	nop
 800c974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c976:	bc08      	pop	{r3}
 800c978:	469e      	mov	lr, r3
 800c97a:	4770      	bx	lr
