
AS5048a_test_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800a0d8  0800a0d8  0001a0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1ec  0800a1ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1ec  0800a1ec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1ec  0800a1ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a1ec  0800a1ec  0001a1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1f4  0800a1f4  0001a1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a1f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012dc  200001e0  0800a3d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200014bc  0800a3d8  000214bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013249  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003278  00000000  00000000  00033452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba8  00000000  00000000  000373f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c7be  00000000  00000000  00037f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000118f7  00000000  00000000  00054756  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a53b  00000000  00000000  0006604d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0588  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b5c  00000000  00000000  000f05d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800a0c0 	.word	0x0800a0c0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800a0c0 	.word	0x0800a0c0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_fmul>:
 800015c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000160:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000164:	bf1e      	ittt	ne
 8000166:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016a:	ea92 0f0c 	teqne	r2, ip
 800016e:	ea93 0f0c 	teqne	r3, ip
 8000172:	d06f      	beq.n	8000254 <__aeabi_fmul+0xf8>
 8000174:	441a      	add	r2, r3
 8000176:	ea80 0c01 	eor.w	ip, r0, r1
 800017a:	0240      	lsls	r0, r0, #9
 800017c:	bf18      	it	ne
 800017e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000182:	d01e      	beq.n	80001c2 <__aeabi_fmul+0x66>
 8000184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000188:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800018c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000190:	fba0 3101 	umull	r3, r1, r0, r1
 8000194:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000198:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800019c:	bf3e      	ittt	cc
 800019e:	0049      	lslcc	r1, r1, #1
 80001a0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a4:	005b      	lslcc	r3, r3, #1
 80001a6:	ea40 0001 	orr.w	r0, r0, r1
 80001aa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ae:	2afd      	cmp	r2, #253	; 0xfd
 80001b0:	d81d      	bhi.n	80001ee <__aeabi_fmul+0x92>
 80001b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001b6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ba:	bf08      	it	eq
 80001bc:	f020 0001 	biceq.w	r0, r0, #1
 80001c0:	4770      	bx	lr
 80001c2:	f090 0f00 	teq	r0, #0
 80001c6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ca:	bf08      	it	eq
 80001cc:	0249      	lsleq	r1, r1, #9
 80001ce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001d6:	3a7f      	subs	r2, #127	; 0x7f
 80001d8:	bfc2      	ittt	gt
 80001da:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001de:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e2:	4770      	bxgt	lr
 80001e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001e8:	f04f 0300 	mov.w	r3, #0
 80001ec:	3a01      	subs	r2, #1
 80001ee:	dc5d      	bgt.n	80002ac <__aeabi_fmul+0x150>
 80001f0:	f112 0f19 	cmn.w	r2, #25
 80001f4:	bfdc      	itt	le
 80001f6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fa:	4770      	bxle	lr
 80001fc:	f1c2 0200 	rsb	r2, r2, #0
 8000200:	0041      	lsls	r1, r0, #1
 8000202:	fa21 f102 	lsr.w	r1, r1, r2
 8000206:	f1c2 0220 	rsb	r2, r2, #32
 800020a:	fa00 fc02 	lsl.w	ip, r0, r2
 800020e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000212:	f140 0000 	adc.w	r0, r0, #0
 8000216:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021a:	bf08      	it	eq
 800021c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000220:	4770      	bx	lr
 8000222:	f092 0f00 	teq	r2, #0
 8000226:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022a:	bf02      	ittt	eq
 800022c:	0040      	lsleq	r0, r0, #1
 800022e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000232:	3a01      	subeq	r2, #1
 8000234:	d0f9      	beq.n	800022a <__aeabi_fmul+0xce>
 8000236:	ea40 000c 	orr.w	r0, r0, ip
 800023a:	f093 0f00 	teq	r3, #0
 800023e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000242:	bf02      	ittt	eq
 8000244:	0049      	lsleq	r1, r1, #1
 8000246:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024a:	3b01      	subeq	r3, #1
 800024c:	d0f9      	beq.n	8000242 <__aeabi_fmul+0xe6>
 800024e:	ea41 010c 	orr.w	r1, r1, ip
 8000252:	e78f      	b.n	8000174 <__aeabi_fmul+0x18>
 8000254:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000258:	ea92 0f0c 	teq	r2, ip
 800025c:	bf18      	it	ne
 800025e:	ea93 0f0c 	teqne	r3, ip
 8000262:	d00a      	beq.n	800027a <__aeabi_fmul+0x11e>
 8000264:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000268:	bf18      	it	ne
 800026a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800026e:	d1d8      	bne.n	8000222 <__aeabi_fmul+0xc6>
 8000270:	ea80 0001 	eor.w	r0, r0, r1
 8000274:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000278:	4770      	bx	lr
 800027a:	f090 0f00 	teq	r0, #0
 800027e:	bf17      	itett	ne
 8000280:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000284:	4608      	moveq	r0, r1
 8000286:	f091 0f00 	teqne	r1, #0
 800028a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800028e:	d014      	beq.n	80002ba <__aeabi_fmul+0x15e>
 8000290:	ea92 0f0c 	teq	r2, ip
 8000294:	d101      	bne.n	800029a <__aeabi_fmul+0x13e>
 8000296:	0242      	lsls	r2, r0, #9
 8000298:	d10f      	bne.n	80002ba <__aeabi_fmul+0x15e>
 800029a:	ea93 0f0c 	teq	r3, ip
 800029e:	d103      	bne.n	80002a8 <__aeabi_fmul+0x14c>
 80002a0:	024b      	lsls	r3, r1, #9
 80002a2:	bf18      	it	ne
 80002a4:	4608      	movne	r0, r1
 80002a6:	d108      	bne.n	80002ba <__aeabi_fmul+0x15e>
 80002a8:	ea80 0001 	eor.w	r0, r0, r1
 80002ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bx	lr
 80002ba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002be:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c2:	4770      	bx	lr

080002c4 <__aeabi_drsub>:
 80002c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c8:	e002      	b.n	80002d0 <__adddf3>
 80002ca:	bf00      	nop

080002cc <__aeabi_dsub>:
 80002cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d0 <__adddf3>:
 80002d0:	b530      	push	{r4, r5, lr}
 80002d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002da:	ea94 0f05 	teq	r4, r5
 80002de:	bf08      	it	eq
 80002e0:	ea90 0f02 	teqeq	r0, r2
 80002e4:	bf1f      	itttt	ne
 80002e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f6:	f000 80e2 	beq.w	80004be <__adddf3+0x1ee>
 80002fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000302:	bfb8      	it	lt
 8000304:	426d      	neglt	r5, r5
 8000306:	dd0c      	ble.n	8000322 <__adddf3+0x52>
 8000308:	442c      	add	r4, r5
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	ea82 0000 	eor.w	r0, r2, r0
 8000316:	ea83 0101 	eor.w	r1, r3, r1
 800031a:	ea80 0202 	eor.w	r2, r0, r2
 800031e:	ea81 0303 	eor.w	r3, r1, r3
 8000322:	2d36      	cmp	r5, #54	; 0x36
 8000324:	bf88      	it	hi
 8000326:	bd30      	pophi	{r4, r5, pc}
 8000328:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000330:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000334:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x70>
 800033a:	4240      	negs	r0, r0
 800033c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000340:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000344:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000348:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x84>
 800034e:	4252      	negs	r2, r2
 8000350:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000354:	ea94 0f05 	teq	r4, r5
 8000358:	f000 80a7 	beq.w	80004aa <__adddf3+0x1da>
 800035c:	f1a4 0401 	sub.w	r4, r4, #1
 8000360:	f1d5 0e20 	rsbs	lr, r5, #32
 8000364:	db0d      	blt.n	8000382 <__adddf3+0xb2>
 8000366:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036a:	fa22 f205 	lsr.w	r2, r2, r5
 800036e:	1880      	adds	r0, r0, r2
 8000370:	f141 0100 	adc.w	r1, r1, #0
 8000374:	fa03 f20e 	lsl.w	r2, r3, lr
 8000378:	1880      	adds	r0, r0, r2
 800037a:	fa43 f305 	asr.w	r3, r3, r5
 800037e:	4159      	adcs	r1, r3
 8000380:	e00e      	b.n	80003a0 <__adddf3+0xd0>
 8000382:	f1a5 0520 	sub.w	r5, r5, #32
 8000386:	f10e 0e20 	add.w	lr, lr, #32
 800038a:	2a01      	cmp	r2, #1
 800038c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000390:	bf28      	it	cs
 8000392:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	18c0      	adds	r0, r0, r3
 800039c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a4:	d507      	bpl.n	80003b6 <__adddf3+0xe6>
 80003a6:	f04f 0e00 	mov.w	lr, #0
 80003aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ba:	d31b      	bcc.n	80003f4 <__adddf3+0x124>
 80003bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c0:	d30c      	bcc.n	80003dc <__adddf3+0x10c>
 80003c2:	0849      	lsrs	r1, r1, #1
 80003c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003cc:	f104 0401 	add.w	r4, r4, #1
 80003d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d8:	f080 809a 	bcs.w	8000510 <__adddf3+0x240>
 80003dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e0:	bf08      	it	eq
 80003e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e6:	f150 0000 	adcs.w	r0, r0, #0
 80003ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ee:	ea41 0105 	orr.w	r1, r1, r5
 80003f2:	bd30      	pop	{r4, r5, pc}
 80003f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f8:	4140      	adcs	r0, r0
 80003fa:	eb41 0101 	adc.w	r1, r1, r1
 80003fe:	3c01      	subs	r4, #1
 8000400:	bf28      	it	cs
 8000402:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000406:	d2e9      	bcs.n	80003dc <__adddf3+0x10c>
 8000408:	f091 0f00 	teq	r1, #0
 800040c:	bf04      	itt	eq
 800040e:	4601      	moveq	r1, r0
 8000410:	2000      	moveq	r0, #0
 8000412:	fab1 f381 	clz	r3, r1
 8000416:	bf08      	it	eq
 8000418:	3320      	addeq	r3, #32
 800041a:	f1a3 030b 	sub.w	r3, r3, #11
 800041e:	f1b3 0220 	subs.w	r2, r3, #32
 8000422:	da0c      	bge.n	800043e <__adddf3+0x16e>
 8000424:	320c      	adds	r2, #12
 8000426:	dd08      	ble.n	800043a <__adddf3+0x16a>
 8000428:	f102 0c14 	add.w	ip, r2, #20
 800042c:	f1c2 020c 	rsb	r2, r2, #12
 8000430:	fa01 f00c 	lsl.w	r0, r1, ip
 8000434:	fa21 f102 	lsr.w	r1, r1, r2
 8000438:	e00c      	b.n	8000454 <__adddf3+0x184>
 800043a:	f102 0214 	add.w	r2, r2, #20
 800043e:	bfd8      	it	le
 8000440:	f1c2 0c20 	rsble	ip, r2, #32
 8000444:	fa01 f102 	lsl.w	r1, r1, r2
 8000448:	fa20 fc0c 	lsr.w	ip, r0, ip
 800044c:	bfdc      	itt	le
 800044e:	ea41 010c 	orrle.w	r1, r1, ip
 8000452:	4090      	lslle	r0, r2
 8000454:	1ae4      	subs	r4, r4, r3
 8000456:	bfa2      	ittt	ge
 8000458:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800045c:	4329      	orrge	r1, r5
 800045e:	bd30      	popge	{r4, r5, pc}
 8000460:	ea6f 0404 	mvn.w	r4, r4
 8000464:	3c1f      	subs	r4, #31
 8000466:	da1c      	bge.n	80004a2 <__adddf3+0x1d2>
 8000468:	340c      	adds	r4, #12
 800046a:	dc0e      	bgt.n	800048a <__adddf3+0x1ba>
 800046c:	f104 0414 	add.w	r4, r4, #20
 8000470:	f1c4 0220 	rsb	r2, r4, #32
 8000474:	fa20 f004 	lsr.w	r0, r0, r4
 8000478:	fa01 f302 	lsl.w	r3, r1, r2
 800047c:	ea40 0003 	orr.w	r0, r0, r3
 8000480:	fa21 f304 	lsr.w	r3, r1, r4
 8000484:	ea45 0103 	orr.w	r1, r5, r3
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	f1c4 040c 	rsb	r4, r4, #12
 800048e:	f1c4 0220 	rsb	r2, r4, #32
 8000492:	fa20 f002 	lsr.w	r0, r0, r2
 8000496:	fa01 f304 	lsl.w	r3, r1, r4
 800049a:	ea40 0003 	orr.w	r0, r0, r3
 800049e:	4629      	mov	r1, r5
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	fa21 f004 	lsr.w	r0, r1, r4
 80004a6:	4629      	mov	r1, r5
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	f094 0f00 	teq	r4, #0
 80004ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b2:	bf06      	itte	eq
 80004b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b8:	3401      	addeq	r4, #1
 80004ba:	3d01      	subne	r5, #1
 80004bc:	e74e      	b.n	800035c <__adddf3+0x8c>
 80004be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c2:	bf18      	it	ne
 80004c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c8:	d029      	beq.n	800051e <__adddf3+0x24e>
 80004ca:	ea94 0f05 	teq	r4, r5
 80004ce:	bf08      	it	eq
 80004d0:	ea90 0f02 	teqeq	r0, r2
 80004d4:	d005      	beq.n	80004e2 <__adddf3+0x212>
 80004d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004da:	bf04      	itt	eq
 80004dc:	4619      	moveq	r1, r3
 80004de:	4610      	moveq	r0, r2
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea91 0f03 	teq	r1, r3
 80004e6:	bf1e      	ittt	ne
 80004e8:	2100      	movne	r1, #0
 80004ea:	2000      	movne	r0, #0
 80004ec:	bd30      	popne	{r4, r5, pc}
 80004ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f2:	d105      	bne.n	8000500 <__adddf3+0x230>
 80004f4:	0040      	lsls	r0, r0, #1
 80004f6:	4149      	adcs	r1, r1
 80004f8:	bf28      	it	cs
 80004fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000504:	bf3c      	itt	cc
 8000506:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050a:	bd30      	popcc	{r4, r5, pc}
 800050c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000510:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000514:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000518:	f04f 0000 	mov.w	r0, #0
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000522:	bf1a      	itte	ne
 8000524:	4619      	movne	r1, r3
 8000526:	4610      	movne	r0, r2
 8000528:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800052c:	bf1c      	itt	ne
 800052e:	460b      	movne	r3, r1
 8000530:	4602      	movne	r2, r0
 8000532:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000536:	bf06      	itte	eq
 8000538:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800053c:	ea91 0f03 	teqeq	r1, r3
 8000540:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	bf00      	nop

08000548 <__aeabi_ui2d>:
 8000548:	f090 0f00 	teq	r0, #0
 800054c:	bf04      	itt	eq
 800054e:	2100      	moveq	r1, #0
 8000550:	4770      	bxeq	lr
 8000552:	b530      	push	{r4, r5, lr}
 8000554:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000558:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055c:	f04f 0500 	mov.w	r5, #0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e750      	b.n	8000408 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_i2d>:
 8000568:	f090 0f00 	teq	r0, #0
 800056c:	bf04      	itt	eq
 800056e:	2100      	moveq	r1, #0
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000578:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800057c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000580:	bf48      	it	mi
 8000582:	4240      	negmi	r0, r0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e73e      	b.n	8000408 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_f2d>:
 800058c:	0042      	lsls	r2, r0, #1
 800058e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000592:	ea4f 0131 	mov.w	r1, r1, rrx
 8000596:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059a:	bf1f      	itttt	ne
 800059c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a8:	4770      	bxne	lr
 80005aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ae:	bf08      	it	eq
 80005b0:	4770      	bxeq	lr
 80005b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b6:	bf04      	itt	eq
 80005b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005cc:	e71c      	b.n	8000408 <__adddf3+0x138>
 80005ce:	bf00      	nop

080005d0 <__aeabi_ul2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f04f 0500 	mov.w	r5, #0
 80005de:	e00a      	b.n	80005f6 <__aeabi_l2d+0x16>

080005e0 <__aeabi_l2d>:
 80005e0:	ea50 0201 	orrs.w	r2, r0, r1
 80005e4:	bf08      	it	eq
 80005e6:	4770      	bxeq	lr
 80005e8:	b530      	push	{r4, r5, lr}
 80005ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ee:	d502      	bpl.n	80005f6 <__aeabi_l2d+0x16>
 80005f0:	4240      	negs	r0, r0
 80005f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000602:	f43f aed8 	beq.w	80003b6 <__adddf3+0xe6>
 8000606:	f04f 0203 	mov.w	r2, #3
 800060a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060e:	bf18      	it	ne
 8000610:	3203      	addne	r2, #3
 8000612:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000616:	bf18      	it	ne
 8000618:	3203      	addne	r2, #3
 800061a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061e:	f1c2 0320 	rsb	r3, r2, #32
 8000622:	fa00 fc03 	lsl.w	ip, r0, r3
 8000626:	fa20 f002 	lsr.w	r0, r0, r2
 800062a:	fa01 fe03 	lsl.w	lr, r1, r3
 800062e:	ea40 000e 	orr.w	r0, r0, lr
 8000632:	fa21 f102 	lsr.w	r1, r1, r2
 8000636:	4414      	add	r4, r2
 8000638:	e6bd      	b.n	80003b6 <__adddf3+0xe6>
 800063a:	bf00      	nop

0800063c <__aeabi_dmul>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000642:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000646:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064a:	bf1d      	ittte	ne
 800064c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000650:	ea94 0f0c 	teqne	r4, ip
 8000654:	ea95 0f0c 	teqne	r5, ip
 8000658:	f000 f8de 	bleq	8000818 <__aeabi_dmul+0x1dc>
 800065c:	442c      	add	r4, r5
 800065e:	ea81 0603 	eor.w	r6, r1, r3
 8000662:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000666:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066e:	bf18      	it	ne
 8000670:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800067c:	d038      	beq.n	80006f0 <__aeabi_dmul+0xb4>
 800067e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000682:	f04f 0500 	mov.w	r5, #0
 8000686:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000692:	f04f 0600 	mov.w	r6, #0
 8000696:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069a:	f09c 0f00 	teq	ip, #0
 800069e:	bf18      	it	ne
 80006a0:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006ac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b0:	d204      	bcs.n	80006bc <__aeabi_dmul+0x80>
 80006b2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b6:	416d      	adcs	r5, r5
 80006b8:	eb46 0606 	adc.w	r6, r6, r6
 80006bc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006cc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d4:	bf88      	it	hi
 80006d6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006da:	d81e      	bhi.n	800071a <__aeabi_dmul+0xde>
 80006dc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e0:	bf08      	it	eq
 80006e2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e6:	f150 0000 	adcs.w	r0, r0, #0
 80006ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
 80006f0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f4:	ea46 0101 	orr.w	r1, r6, r1
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000704:	bfc2      	ittt	gt
 8000706:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070e:	bd70      	popgt	{r4, r5, r6, pc}
 8000710:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000714:	f04f 0e00 	mov.w	lr, #0
 8000718:	3c01      	subs	r4, #1
 800071a:	f300 80ab 	bgt.w	8000874 <__aeabi_dmul+0x238>
 800071e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000722:	bfde      	ittt	le
 8000724:	2000      	movle	r0, #0
 8000726:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072a:	bd70      	pople	{r4, r5, r6, pc}
 800072c:	f1c4 0400 	rsb	r4, r4, #0
 8000730:	3c20      	subs	r4, #32
 8000732:	da35      	bge.n	80007a0 <__aeabi_dmul+0x164>
 8000734:	340c      	adds	r4, #12
 8000736:	dc1b      	bgt.n	8000770 <__aeabi_dmul+0x134>
 8000738:	f104 0414 	add.w	r4, r4, #20
 800073c:	f1c4 0520 	rsb	r5, r4, #32
 8000740:	fa00 f305 	lsl.w	r3, r0, r5
 8000744:	fa20 f004 	lsr.w	r0, r0, r4
 8000748:	fa01 f205 	lsl.w	r2, r1, r5
 800074c:	ea40 0002 	orr.w	r0, r0, r2
 8000750:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	fa21 f604 	lsr.w	r6, r1, r4
 8000760:	eb42 0106 	adc.w	r1, r2, r6
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 040c 	rsb	r4, r4, #12
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f304 	lsl.w	r3, r0, r4
 800077c:	fa20 f005 	lsr.w	r0, r0, r5
 8000780:	fa01 f204 	lsl.w	r2, r1, r4
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000790:	f141 0100 	adc.w	r1, r1, #0
 8000794:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000798:	bf08      	it	eq
 800079a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079e:	bd70      	pop	{r4, r5, r6, pc}
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f205 	lsl.w	r2, r0, r5
 80007a8:	ea4e 0e02 	orr.w	lr, lr, r2
 80007ac:	fa20 f304 	lsr.w	r3, r0, r4
 80007b0:	fa01 f205 	lsl.w	r2, r1, r5
 80007b4:	ea43 0302 	orr.w	r3, r3, r2
 80007b8:	fa21 f004 	lsr.w	r0, r1, r4
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c0:	fa21 f204 	lsr.w	r2, r1, r4
 80007c4:	ea20 0002 	bic.w	r0, r0, r2
 80007c8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f094 0f00 	teq	r4, #0
 80007dc:	d10f      	bne.n	80007fe <__aeabi_dmul+0x1c2>
 80007de:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e2:	0040      	lsls	r0, r0, #1
 80007e4:	eb41 0101 	adc.w	r1, r1, r1
 80007e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007ec:	bf08      	it	eq
 80007ee:	3c01      	subeq	r4, #1
 80007f0:	d0f7      	beq.n	80007e2 <__aeabi_dmul+0x1a6>
 80007f2:	ea41 0106 	orr.w	r1, r1, r6
 80007f6:	f095 0f00 	teq	r5, #0
 80007fa:	bf18      	it	ne
 80007fc:	4770      	bxne	lr
 80007fe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000802:	0052      	lsls	r2, r2, #1
 8000804:	eb43 0303 	adc.w	r3, r3, r3
 8000808:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800080c:	bf08      	it	eq
 800080e:	3d01      	subeq	r5, #1
 8000810:	d0f7      	beq.n	8000802 <__aeabi_dmul+0x1c6>
 8000812:	ea43 0306 	orr.w	r3, r3, r6
 8000816:	4770      	bx	lr
 8000818:	ea94 0f0c 	teq	r4, ip
 800081c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000820:	bf18      	it	ne
 8000822:	ea95 0f0c 	teqne	r5, ip
 8000826:	d00c      	beq.n	8000842 <__aeabi_dmul+0x206>
 8000828:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082c:	bf18      	it	ne
 800082e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000832:	d1d1      	bne.n	80007d8 <__aeabi_dmul+0x19c>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000846:	bf06      	itte	eq
 8000848:	4610      	moveq	r0, r2
 800084a:	4619      	moveq	r1, r3
 800084c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000850:	d019      	beq.n	8000886 <__aeabi_dmul+0x24a>
 8000852:	ea94 0f0c 	teq	r4, ip
 8000856:	d102      	bne.n	800085e <__aeabi_dmul+0x222>
 8000858:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800085c:	d113      	bne.n	8000886 <__aeabi_dmul+0x24a>
 800085e:	ea95 0f0c 	teq	r5, ip
 8000862:	d105      	bne.n	8000870 <__aeabi_dmul+0x234>
 8000864:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000868:	bf1c      	itt	ne
 800086a:	4610      	movne	r0, r2
 800086c:	4619      	movne	r1, r3
 800086e:	d10a      	bne.n	8000886 <__aeabi_dmul+0x24a>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000880:	f04f 0000 	mov.w	r0, #0
 8000884:	bd70      	pop	{r4, r5, r6, pc}
 8000886:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088e:	bd70      	pop	{r4, r5, r6, pc}

08000890 <__aeabi_ddiv>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000896:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089e:	bf1d      	ittte	ne
 80008a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a4:	ea94 0f0c 	teqne	r4, ip
 80008a8:	ea95 0f0c 	teqne	r5, ip
 80008ac:	f000 f8a7 	bleq	80009fe <__aeabi_ddiv+0x16e>
 80008b0:	eba4 0405 	sub.w	r4, r4, r5
 80008b4:	ea81 0e03 	eor.w	lr, r1, r3
 80008b8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c0:	f000 8088 	beq.w	80009d4 <__aeabi_ddiv+0x144>
 80008c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008cc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008dc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e8:	429d      	cmp	r5, r3
 80008ea:	bf08      	it	eq
 80008ec:	4296      	cmpeq	r6, r2
 80008ee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f6:	d202      	bcs.n	80008fe <__aeabi_ddiv+0x6e>
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	1ab6      	subs	r6, r6, r2
 8000900:	eb65 0503 	sbc.w	r5, r5, r3
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 000c 	orrcs.w	r0, r0, ip
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	ebb6 0e02 	subs.w	lr, r6, r2
 8000946:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094a:	bf22      	ittt	cs
 800094c:	1ab6      	subcs	r6, r6, r2
 800094e:	4675      	movcs	r5, lr
 8000950:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	ebb6 0e02 	subs.w	lr, r6, r2
 800095e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000962:	bf22      	ittt	cs
 8000964:	1ab6      	subcs	r6, r6, r2
 8000966:	4675      	movcs	r5, lr
 8000968:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800096c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000970:	d018      	beq.n	80009a4 <__aeabi_ddiv+0x114>
 8000972:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000976:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000982:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000986:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098e:	d1c0      	bne.n	8000912 <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	d10b      	bne.n	80009ae <__aeabi_ddiv+0x11e>
 8000996:	ea41 0100 	orr.w	r1, r1, r0
 800099a:	f04f 0000 	mov.w	r0, #0
 800099e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a2:	e7b6      	b.n	8000912 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	bf04      	itt	eq
 80009aa:	4301      	orreq	r1, r0
 80009ac:	2000      	moveq	r0, #0
 80009ae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b2:	bf88      	it	hi
 80009b4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b8:	f63f aeaf 	bhi.w	800071a <__aeabi_dmul+0xde>
 80009bc:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c0:	bf04      	itt	eq
 80009c2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ca:	f150 0000 	adcs.w	r0, r0, #0
 80009ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009dc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e0:	bfc2      	ittt	gt
 80009e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ea:	bd70      	popgt	{r4, r5, r6, pc}
 80009ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f0:	f04f 0e00 	mov.w	lr, #0
 80009f4:	3c01      	subs	r4, #1
 80009f6:	e690      	b.n	800071a <__aeabi_dmul+0xde>
 80009f8:	ea45 0e06 	orr.w	lr, r5, r6
 80009fc:	e68d      	b.n	800071a <__aeabi_dmul+0xde>
 80009fe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a02:	ea94 0f0c 	teq	r4, ip
 8000a06:	bf08      	it	eq
 8000a08:	ea95 0f0c 	teqeq	r5, ip
 8000a0c:	f43f af3b 	beq.w	8000886 <__aeabi_dmul+0x24a>
 8000a10:	ea94 0f0c 	teq	r4, ip
 8000a14:	d10a      	bne.n	8000a2c <__aeabi_ddiv+0x19c>
 8000a16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1a:	f47f af34 	bne.w	8000886 <__aeabi_dmul+0x24a>
 8000a1e:	ea95 0f0c 	teq	r5, ip
 8000a22:	f47f af25 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e72c      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a2c:	ea95 0f0c 	teq	r5, ip
 8000a30:	d106      	bne.n	8000a40 <__aeabi_ddiv+0x1b0>
 8000a32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a36:	f43f aefd 	beq.w	8000834 <__aeabi_dmul+0x1f8>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e722      	b.n	8000886 <__aeabi_dmul+0x24a>
 8000a40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a44:	bf18      	it	ne
 8000a46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4a:	f47f aec5 	bne.w	80007d8 <__aeabi_dmul+0x19c>
 8000a4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a52:	f47f af0d 	bne.w	8000870 <__aeabi_dmul+0x234>
 8000a56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5a:	f47f aeeb 	bne.w	8000834 <__aeabi_dmul+0x1f8>
 8000a5e:	e712      	b.n	8000886 <__aeabi_dmul+0x24a>

08000a60 <__gedf2>:
 8000a60:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a64:	e006      	b.n	8000a74 <__cmpdf2+0x4>
 8000a66:	bf00      	nop

08000a68 <__ledf2>:
 8000a68:	f04f 0c01 	mov.w	ip, #1
 8000a6c:	e002      	b.n	8000a74 <__cmpdf2+0x4>
 8000a6e:	bf00      	nop

08000a70 <__cmpdf2>:
 8000a70:	f04f 0c01 	mov.w	ip, #1
 8000a74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	bf18      	it	ne
 8000a86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8a:	d01b      	beq.n	8000ac4 <__cmpdf2+0x54>
 8000a8c:	b001      	add	sp, #4
 8000a8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a92:	bf0c      	ite	eq
 8000a94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a98:	ea91 0f03 	teqne	r1, r3
 8000a9c:	bf02      	ittt	eq
 8000a9e:	ea90 0f02 	teqeq	r0, r2
 8000aa2:	2000      	moveq	r0, #0
 8000aa4:	4770      	bxeq	lr
 8000aa6:	f110 0f00 	cmn.w	r0, #0
 8000aaa:	ea91 0f03 	teq	r1, r3
 8000aae:	bf58      	it	pl
 8000ab0:	4299      	cmppl	r1, r3
 8000ab2:	bf08      	it	eq
 8000ab4:	4290      	cmpeq	r0, r2
 8000ab6:	bf2c      	ite	cs
 8000ab8:	17d8      	asrcs	r0, r3, #31
 8000aba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000abe:	f040 0001 	orr.w	r0, r0, #1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__cmpdf2+0x64>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d107      	bne.n	8000ae4 <__cmpdf2+0x74>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d1d6      	bne.n	8000a8c <__cmpdf2+0x1c>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d0d3      	beq.n	8000a8c <__cmpdf2+0x1c>
 8000ae4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_cdrcmple>:
 8000aec:	4684      	mov	ip, r0
 8000aee:	4610      	mov	r0, r2
 8000af0:	4662      	mov	r2, ip
 8000af2:	468c      	mov	ip, r1
 8000af4:	4619      	mov	r1, r3
 8000af6:	4663      	mov	r3, ip
 8000af8:	e000      	b.n	8000afc <__aeabi_cdcmpeq>
 8000afa:	bf00      	nop

08000afc <__aeabi_cdcmpeq>:
 8000afc:	b501      	push	{r0, lr}
 8000afe:	f7ff ffb7 	bl	8000a70 <__cmpdf2>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	bf48      	it	mi
 8000b06:	f110 0f00 	cmnmi.w	r0, #0
 8000b0a:	bd01      	pop	{r0, pc}

08000b0c <__aeabi_dcmpeq>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff fff4 	bl	8000afc <__aeabi_cdcmpeq>
 8000b14:	bf0c      	ite	eq
 8000b16:	2001      	moveq	r0, #1
 8000b18:	2000      	movne	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmplt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffea 	bl	8000afc <__aeabi_cdcmpeq>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmple>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffe0 	bl	8000afc <__aeabi_cdcmpeq>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpge>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffce 	bl	8000aec <__aeabi_cdrcmple>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpgt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffc4 	bl	8000aec <__aeabi_cdrcmple>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpun>:
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x10>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d10a      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__aeabi_dcmpun+0x20>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d102      	bne.n	8000b96 <__aeabi_dcmpun+0x26>
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	f04f 0001 	mov.w	r0, #1
 8000b9a:	4770      	bx	lr

08000b9c <__aeabi_d2f>:
 8000b9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba4:	bf24      	itt	cs
 8000ba6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000baa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bae:	d90d      	bls.n	8000bcc <__aeabi_d2f+0x30>
 8000bb0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bbc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bc0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc4:	bf08      	it	eq
 8000bc6:	f020 0001 	biceq.w	r0, r0, #1
 8000bca:	4770      	bx	lr
 8000bcc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bd0:	d121      	bne.n	8000c16 <__aeabi_d2f+0x7a>
 8000bd2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd6:	bfbc      	itt	lt
 8000bd8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	4770      	bxlt	lr
 8000bde:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000be2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be6:	f1c2 0218 	rsb	r2, r2, #24
 8000bea:	f1c2 0c20 	rsb	ip, r2, #32
 8000bee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bf2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf6:	bf18      	it	ne
 8000bf8:	f040 0001 	orrne.w	r0, r0, #1
 8000bfc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c08:	ea40 000c 	orr.w	r0, r0, ip
 8000c0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c14:	e7cc      	b.n	8000bb0 <__aeabi_d2f+0x14>
 8000c16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c1a:	d107      	bne.n	8000c2c <__aeabi_d2f+0x90>
 8000c1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c20:	bf1e      	ittt	ne
 8000c22:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c26:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c2a:	4770      	bxne	lr
 8000c2c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c34:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <__aeabi_frsub>:
 8000c3c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c40:	e002      	b.n	8000c48 <__addsf3>
 8000c42:	bf00      	nop

08000c44 <__aeabi_fsub>:
 8000c44:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c48 <__addsf3>:
 8000c48:	0042      	lsls	r2, r0, #1
 8000c4a:	bf1f      	itttt	ne
 8000c4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c50:	ea92 0f03 	teqne	r2, r3
 8000c54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5c:	d06a      	beq.n	8000d34 <__addsf3+0xec>
 8000c5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c66:	bfc1      	itttt	gt
 8000c68:	18d2      	addgt	r2, r2, r3
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	4048      	eorgt	r0, r1
 8000c6e:	4041      	eorgt	r1, r0
 8000c70:	bfb8      	it	lt
 8000c72:	425b      	neglt	r3, r3
 8000c74:	2b19      	cmp	r3, #25
 8000c76:	bf88      	it	hi
 8000c78:	4770      	bxhi	lr
 8000c7a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c82:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c86:	bf18      	it	ne
 8000c88:	4240      	negne	r0, r0
 8000c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c96:	bf18      	it	ne
 8000c98:	4249      	negne	r1, r1
 8000c9a:	ea92 0f03 	teq	r2, r3
 8000c9e:	d03f      	beq.n	8000d20 <__addsf3+0xd8>
 8000ca0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca8:	eb10 000c 	adds.w	r0, r0, ip
 8000cac:	f1c3 0320 	rsb	r3, r3, #32
 8000cb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb8:	d502      	bpl.n	8000cc0 <__addsf3+0x78>
 8000cba:	4249      	negs	r1, r1
 8000cbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cc0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc4:	d313      	bcc.n	8000cee <__addsf3+0xa6>
 8000cc6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cca:	d306      	bcc.n	8000cda <__addsf3+0x92>
 8000ccc:	0840      	lsrs	r0, r0, #1
 8000cce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cd2:	f102 0201 	add.w	r2, r2, #1
 8000cd6:	2afe      	cmp	r2, #254	; 0xfe
 8000cd8:	d251      	bcs.n	8000d7e <__addsf3+0x136>
 8000cda:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ce2:	bf08      	it	eq
 8000ce4:	f020 0001 	biceq.w	r0, r0, #1
 8000ce8:	ea40 0003 	orr.w	r0, r0, r3
 8000cec:	4770      	bx	lr
 8000cee:	0049      	lsls	r1, r1, #1
 8000cf0:	eb40 0000 	adc.w	r0, r0, r0
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	bf28      	it	cs
 8000cf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cfc:	d2ed      	bcs.n	8000cda <__addsf3+0x92>
 8000cfe:	fab0 fc80 	clz	ip, r0
 8000d02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d06:	ebb2 020c 	subs.w	r2, r2, ip
 8000d0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0e:	bfaa      	itet	ge
 8000d10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d14:	4252      	neglt	r2, r2
 8000d16:	4318      	orrge	r0, r3
 8000d18:	bfbc      	itt	lt
 8000d1a:	40d0      	lsrlt	r0, r2
 8000d1c:	4318      	orrlt	r0, r3
 8000d1e:	4770      	bx	lr
 8000d20:	f092 0f00 	teq	r2, #0
 8000d24:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d28:	bf06      	itte	eq
 8000d2a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2e:	3201      	addeq	r2, #1
 8000d30:	3b01      	subne	r3, #1
 8000d32:	e7b5      	b.n	8000ca0 <__addsf3+0x58>
 8000d34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d3c:	bf18      	it	ne
 8000d3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d42:	d021      	beq.n	8000d88 <__addsf3+0x140>
 8000d44:	ea92 0f03 	teq	r2, r3
 8000d48:	d004      	beq.n	8000d54 <__addsf3+0x10c>
 8000d4a:	f092 0f00 	teq	r2, #0
 8000d4e:	bf08      	it	eq
 8000d50:	4608      	moveq	r0, r1
 8000d52:	4770      	bx	lr
 8000d54:	ea90 0f01 	teq	r0, r1
 8000d58:	bf1c      	itt	ne
 8000d5a:	2000      	movne	r0, #0
 8000d5c:	4770      	bxne	lr
 8000d5e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d62:	d104      	bne.n	8000d6e <__addsf3+0x126>
 8000d64:	0040      	lsls	r0, r0, #1
 8000d66:	bf28      	it	cs
 8000d68:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d6c:	4770      	bx	lr
 8000d6e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d72:	bf3c      	itt	cc
 8000d74:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d78:	4770      	bxcc	lr
 8000d7a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d86:	4770      	bx	lr
 8000d88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d8c:	bf16      	itet	ne
 8000d8e:	4608      	movne	r0, r1
 8000d90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d94:	4601      	movne	r1, r0
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	bf06      	itte	eq
 8000d9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9e:	ea90 0f01 	teqeq	r0, r1
 8000da2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da6:	4770      	bx	lr

08000da8 <__aeabi_ui2f>:
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	e004      	b.n	8000db8 <__aeabi_i2f+0x8>
 8000dae:	bf00      	nop

08000db0 <__aeabi_i2f>:
 8000db0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db4:	bf48      	it	mi
 8000db6:	4240      	negmi	r0, r0
 8000db8:	ea5f 0c00 	movs.w	ip, r0
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc4:	4601      	mov	r1, r0
 8000dc6:	f04f 0000 	mov.w	r0, #0
 8000dca:	e01c      	b.n	8000e06 <__aeabi_l2f+0x2a>

08000dcc <__aeabi_ul2f>:
 8000dcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	e00a      	b.n	8000df0 <__aeabi_l2f+0x14>
 8000dda:	bf00      	nop

08000ddc <__aeabi_l2f>:
 8000ddc:	ea50 0201 	orrs.w	r2, r0, r1
 8000de0:	bf08      	it	eq
 8000de2:	4770      	bxeq	lr
 8000de4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de8:	d502      	bpl.n	8000df0 <__aeabi_l2f+0x14>
 8000dea:	4240      	negs	r0, r0
 8000dec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000df0:	ea5f 0c01 	movs.w	ip, r1
 8000df4:	bf02      	ittt	eq
 8000df6:	4684      	moveq	ip, r0
 8000df8:	4601      	moveq	r1, r0
 8000dfa:	2000      	moveq	r0, #0
 8000dfc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e00:	bf08      	it	eq
 8000e02:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e06:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e0a:	fabc f28c 	clz	r2, ip
 8000e0e:	3a08      	subs	r2, #8
 8000e10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e14:	db10      	blt.n	8000e38 <__aeabi_l2f+0x5c>
 8000e16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e28:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	f020 0001 	biceq.w	r0, r0, #1
 8000e36:	4770      	bx	lr
 8000e38:	f102 0220 	add.w	r2, r2, #32
 8000e3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e40:	f1c2 0220 	rsb	r2, r2, #32
 8000e44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e48:	fa21 f202 	lsr.w	r2, r1, r2
 8000e4c:	eb43 0002 	adc.w	r0, r3, r2
 8000e50:	bf08      	it	eq
 8000e52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e56:	4770      	bx	lr

08000e58 <__gesf2>:
 8000e58:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000e5c:	e006      	b.n	8000e6c <__cmpsf2+0x4>
 8000e5e:	bf00      	nop

08000e60 <__lesf2>:
 8000e60:	f04f 0c01 	mov.w	ip, #1
 8000e64:	e002      	b.n	8000e6c <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__cmpsf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e70:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e7c:	bf18      	it	ne
 8000e7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e82:	d011      	beq.n	8000ea8 <__cmpsf2+0x40>
 8000e84:	b001      	add	sp, #4
 8000e86:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e8a:	bf18      	it	ne
 8000e8c:	ea90 0f01 	teqne	r0, r1
 8000e90:	bf58      	it	pl
 8000e92:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e96:	bf88      	it	hi
 8000e98:	17c8      	asrhi	r0, r1, #31
 8000e9a:	bf38      	it	cc
 8000e9c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea0:	bf18      	it	ne
 8000ea2:	f040 0001 	orrne.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	d102      	bne.n	8000eb4 <__cmpsf2+0x4c>
 8000eae:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eb2:	d105      	bne.n	8000ec0 <__cmpsf2+0x58>
 8000eb4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000eb8:	d1e4      	bne.n	8000e84 <__cmpsf2+0x1c>
 8000eba:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ebe:	d0e1      	beq.n	8000e84 <__cmpsf2+0x1c>
 8000ec0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__aeabi_cfrcmple>:
 8000ec8:	4684      	mov	ip, r0
 8000eca:	4608      	mov	r0, r1
 8000ecc:	4661      	mov	r1, ip
 8000ece:	e7ff      	b.n	8000ed0 <__aeabi_cfcmpeq>

08000ed0 <__aeabi_cfcmpeq>:
 8000ed0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ed2:	f7ff ffc9 	bl	8000e68 <__cmpsf2>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	bf48      	it	mi
 8000eda:	f110 0f00 	cmnmi.w	r0, #0
 8000ede:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee0 <__aeabi_fcmpeq>:
 8000ee0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee4:	f7ff fff4 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000ee8:	bf0c      	ite	eq
 8000eea:	2001      	moveq	r0, #1
 8000eec:	2000      	movne	r0, #0
 8000eee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_fcmplt>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff ffea 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000efc:	bf34      	ite	cc
 8000efe:	2001      	movcc	r0, #1
 8000f00:	2000      	movcs	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmple>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffe0 	bl	8000ed0 <__aeabi_cfcmpeq>
 8000f10:	bf94      	ite	ls
 8000f12:	2001      	movls	r0, #1
 8000f14:	2000      	movhi	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmpge>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffd2 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpgt>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffc8 	bl	8000ec8 <__aeabi_cfrcmple>
 8000f38:	bf34      	ite	cc
 8000f3a:	2001      	movcc	r0, #1
 8000f3c:	2000      	movcs	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2uiz>:
 8000f44:	0042      	lsls	r2, r0, #1
 8000f46:	d20e      	bcs.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30b      	bcc.n	8000f66 <__aeabi_f2uiz+0x22>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d409      	bmi.n	8000f6c <__aeabi_f2uiz+0x28>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	4770      	bx	lr
 8000f66:	f04f 0000 	mov.w	r0, #0
 8000f6a:	4770      	bx	lr
 8000f6c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f70:	d101      	bne.n	8000f76 <__aeabi_f2uiz+0x32>
 8000f72:	0242      	lsls	r2, r0, #9
 8000f74:	d102      	bne.n	8000f7c <__aeabi_f2uiz+0x38>
 8000f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f7a:	4770      	bx	lr
 8000f7c:	f04f 0000 	mov.w	r0, #0
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:
#include <as5048a.hpp>

/**
 * Constructor
 */
AS5048A::AS5048A(SPI_HandleTypeDef* hspi, GPIO_TypeDef* arg_ps, uint16_t arg_cs){
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	807b      	strh	r3, [r7, #2]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
	_cs = arg_cs;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	805a      	strh	r2, [r3, #2]
	_ps = arg_ps;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
	_spi = hspi;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
	errorFlag = 0;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	701a      	strb	r2, [r3, #0]
	position = 0;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	829a      	strh	r2, [r3, #20]
}
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <_ZN7AS5048A17spiCalcEvenParityEt>:
}

/**
 * Utility function used to calculate even parity of word
 */
uint8_t AS5048A::spiCalcEvenParity(uint16_t value){
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73bb      	strb	r3, [r7, #14]
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	2b0f      	cmp	r3, #15
 8000fda:	d80e      	bhi.n	8000ffa <_ZN7AS5048A17spiCalcEvenParityEt+0x38>
	{
		if (value & 0x1)
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <_ZN7AS5048A17spiCalcEvenParityEt+0x2a>
		{
			cnt++;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	085b      	lsrs	r3, r3, #1
 8000ff0:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++)
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	73bb      	strb	r3, [r7, #14]
 8000ff8:	e7ed      	b.n	8000fd6 <_ZN7AS5048A17spiCalcEvenParityEt+0x14>
	}
	return cnt & 0x1;
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <_ZN7AS5048A4readEt>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t AS5048A::read(uint16_t registerAddress){
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 8001018:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800101c:	81fb      	strh	r3, [r7, #14]
	command = command | registerAddress;
 800101e:	89fa      	ldrh	r2, [r7, #14]
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	4313      	orrs	r3, r2
 8001024:	81fb      	strh	r3, [r7, #14]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 8001026:	89fb      	ldrh	r3, [r7, #14]
 8001028:	4619      	mov	r1, r3
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffc9 	bl	8000fc2 <_ZN7AS5048A17spiCalcEvenParityEt>
 8001030:	4603      	mov	r3, r0
 8001032:	03db      	lsls	r3, r3, #15
 8001034:	b21a      	sxth	r2, r3
 8001036:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800103a:	4313      	orrs	r3, r2
 800103c:	b21b      	sxth	r3, r3
 800103e:	81fb      	strh	r3, [r7, #14]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	b2db      	uxtb	r3, r3
 8001044:	737b      	strb	r3, [r7, #13]
	send_data[0] = ( command >> 8 ) & 0xFF;
 8001046:	89fb      	ldrh	r3, [r7, #14]
 8001048:	0a1b      	lsrs	r3, r3, #8
 800104a:	b29b      	uxth	r3, r3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	733b      	strb	r3, [r7, #12]

	EN_SPI;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	885b      	ldrh	r3, [r3, #2]
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f000 fee4 	bl	8001e28 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68d8      	ldr	r0, [r3, #12]
 8001064:	f107 010c 	add.w	r1, r7, #12
 8001068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800106c:	2202      	movs	r2, #2
 800106e:	f003 f8d9 	bl	8004224 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	68db      	ldr	r3, [r3, #12]
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fbb2 	bl	80047e0 <HAL_SPI_GetState>
 800107c:	4603      	mov	r3, r0
 800107e:	2b01      	cmp	r3, #1
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d000      	beq.n	800108e <_ZN7AS5048A4readEt+0x82>
 800108c:	e7f1      	b.n	8001072 <_ZN7AS5048A4readEt+0x66>
	DIS_SPI;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6898      	ldr	r0, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	885b      	ldrh	r3, [r3, #2]
 8001096:	2201      	movs	r2, #1
 8001098:	4619      	mov	r1, r3
 800109a:	f000 fec5 	bl	8001e28 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	733b      	strb	r3, [r7, #12]
	send_data[1]=0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	737b      	strb	r3, [r7, #13]
	EN_SPI;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6898      	ldr	r0, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	885b      	ldrh	r3, [r3, #2]
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	f000 feb9 	bl	8001e28 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68d8      	ldr	r0, [r3, #12]
 80010ba:	f107 0208 	add.w	r2, r7, #8
 80010be:	f107 010c 	add.w	r1, r7, #12
 80010c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2302      	movs	r3, #2
 80010ca:	f003 f9e7 	bl	800449c <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fb84 	bl	80047e0 <HAL_SPI_GetState>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	bf14      	ite	ne
 80010de:	2301      	movne	r3, #1
 80010e0:	2300      	moveq	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d000      	beq.n	80010ea <_ZN7AS5048A4readEt+0xde>
 80010e8:	e7f1      	b.n	80010ce <_ZN7AS5048A4readEt+0xc2>
	DIS_SPI;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6898      	ldr	r0, [r3, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	885b      	ldrh	r3, [r3, #2]
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f000 fe97 	bl	8001e28 <HAL_GPIO_WritePin>

	if (recv_data[1] & 0x40) {
 80010fa:	7a7b      	ldrb	r3, [r7, #9]
 80010fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <_ZN7AS5048A4readEt+0x100>
		errorFlag = 1;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	e002      	b.n	8001112 <_ZN7AS5048A4readEt+0x106>
	} else {
		errorFlag = 0;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 8001112:	7a7b      	ldrb	r3, [r7, #9]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7a3b      	ldrb	r3, [r7, #8]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21b      	sxth	r3, r3
 8001120:	b29b      	uxth	r3, r3
 8001122:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001126:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001128:	4618      	mov	r0, r3
 800112a:	3710      	adds	r7, #16
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN7AS5048A14getRawRotationEv>:
}

/**
 * Returns the raw angle directly from the sensor
 */
uint16_t AS5048A::getRawRotation(){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	return AS5048A::read(AS5048A_ANGLE);
 8001138:	f643 71ff 	movw	r1, #16383	; 0x3fff
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff ff65 	bl	800100c <_ZN7AS5048A4readEt>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <_ZN7AS5048A5errorEv>:
}

/*
 * Check if an error has been encountered.
 */
uint8_t AS5048A::error(){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	return errorFlag;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <_ZN7AS5048A9getErrorsEv>:
}

/*
 * Get and clear the error register by reading it
 */
uint16_t AS5048A::getErrors(){
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
	return AS5048A::read(AS5048A_CLEAR_ERROR_FLAG);
 800116a:	2101      	movs	r1, #1
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff4d 	bl	800100c <_ZN7AS5048A4readEt>
 8001172:	4603      	mov	r3, r0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 800117c:	b5b0      	push	{r4, r5, r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fa00 	bl	800058c <__aeabi_f2d>
 800118c:	4604      	mov	r4, r0
 800118e:	460d      	mov	r5, r1
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	f7ff f9e9 	bl	8000568 <__aeabi_i2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4620      	mov	r0, r4
 800119c:	4629      	mov	r1, r5
 800119e:	f008 f9ab 	bl	80094f8 <fmod>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
    }
 80011a6:	4610      	mov	r0, r2
 80011a8:	4619      	mov	r1, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bdb0      	pop	{r4, r5, r7, pc}

080011b0 <_ZN7AS5048A9normalizeEf>:
}

/*
 * Returns normalized angle value
 */
float AS5048A::normalize(float angle) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	// http://stackoverflow.com/a/11498248/3167294
	#ifdef ANGLE_MODE_1
		angle += 180;
	#endif
	angle = fmod(angle, 360);
 80011ba:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80011be:	6838      	ldr	r0, [r7, #0]
 80011c0:	f7ff ffdc 	bl	800117c <_ZSt4fmodIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fce6 	bl	8000b9c <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	603b      	str	r3, [r7, #0]
	if (angle < 0) {
 80011d4:	f04f 0100 	mov.w	r1, #0
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff fe8b 	bl	8000ef4 <__aeabi_fcmplt>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <_ZN7AS5048A9normalizeEf+0x40>
		angle += 360;
 80011e4:	4905      	ldr	r1, [pc, #20]	; (80011fc <_ZN7AS5048A9normalizeEf+0x4c>)
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff fd2e 	bl	8000c48 <__addsf3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	603b      	str	r3, [r7, #0]
	}
	#ifdef ANGLE_MODE_1
		angle -= 180;
	#endif
	return angle;
 80011f0:	683b      	ldr	r3, [r7, #0]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	43b40000 	.word	0x43b40000

08001200 <_ZN7AS5048A10read2angleEt>:

/*
 * Returns caalculated angle value
 */
float AS5048A::read2angle(uint16_t angle) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
	 * 14 bits = 2^(14) - 1 = 16.383
	 *
	 * https://www.arduino.cc/en/Reference/Map
	 *
	 */
	return (float)angle * ((float)360 / 16383);
 800120c:	887b      	ldrh	r3, [r7, #2]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fdca 	bl	8000da8 <__aeabi_ui2f>
 8001214:	4603      	mov	r3, r0
 8001216:	4904      	ldr	r1, [pc, #16]	; (8001228 <_ZN7AS5048A10read2angleEt+0x28>)
 8001218:	4618      	mov	r0, r3
 800121a:	f7fe ff9f 	bl	800015c <__aeabi_fmul>
 800121e:	4603      	mov	r3, r0
};
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	3cb402d0 	.word	0x3cb402d0

0800122c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001232:	f000 fae1 	bl	80017f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001236:	f000 f8a1 	bl	800137c <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800123a:	f000 f945 	bl	80014c8 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 800123e:	f000 f907 	bl	8001450 <_ZL12MX_SPI1_Initv>
	MX_USB_DEVICE_Init();
 8001242:	f007 fcbd 	bl	8008bc0 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	sprintf(data, "Hello from stm32 \n");
 8001246:	4946      	ldr	r1, [pc, #280]	; (8001360 <main+0x134>)
 8001248:	4846      	ldr	r0, [pc, #280]	; (8001364 <main+0x138>)
 800124a:	f008 fabf 	bl	80097cc <siprintf>
	CDC_Transmit_FS((uint8_t*) data, strlen(data));
 800124e:	4845      	ldr	r0, [pc, #276]	; (8001364 <main+0x138>)
 8001250:	f7fe ff7c 	bl	800014c <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29b      	uxth	r3, r3
 8001258:	4619      	mov	r1, r3
 800125a:	4842      	ldr	r0, [pc, #264]	; (8001364 <main+0x138>)
 800125c:	f007 fd6e 	bl	8008d3c <CDC_Transmit_FS>

	zero_position = angleSensor.getRawRotation();
 8001260:	4841      	ldr	r0, [pc, #260]	; (8001368 <main+0x13c>)
 8001262:	f7ff ff65 	bl	8001130 <_ZN7AS5048A14getRawRotationEv>
 8001266:	4603      	mov	r3, r0
 8001268:	82fb      	strh	r3, [r7, #22]
	sprintf(data, "Zero: %d\n", zero_position);
 800126a:	8afb      	ldrh	r3, [r7, #22]
 800126c:	461a      	mov	r2, r3
 800126e:	493f      	ldr	r1, [pc, #252]	; (800136c <main+0x140>)
 8001270:	483c      	ldr	r0, [pc, #240]	; (8001364 <main+0x138>)
 8001272:	f008 faab 	bl	80097cc <siprintf>
	CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001276:	483b      	ldr	r0, [pc, #236]	; (8001364 <main+0x138>)
 8001278:	f7fe ff68 	bl	800014c <strlen>
 800127c:	4603      	mov	r3, r0
 800127e:	b29b      	uxth	r3, r3
 8001280:	4619      	mov	r1, r3
 8001282:	4838      	ldr	r0, [pc, #224]	; (8001364 <main+0x138>)
 8001284:	f007 fd5a 	bl	8008d3c <CDC_Transmit_FS>
	zero_position_map = angleSensor.read2angle(zero_position);
 8001288:	8afb      	ldrh	r3, [r7, #22]
 800128a:	4619      	mov	r1, r3
 800128c:	4836      	ldr	r0, [pc, #216]	; (8001368 <main+0x13c>)
 800128e:	f7ff ffb7 	bl	8001200 <_ZN7AS5048A10read2angleEt>
 8001292:	6138      	str	r0, [r7, #16]
	sprintf(data, "Angle: %u\n", (uint16_t) zero_position_map);
 8001294:	6938      	ldr	r0, [r7, #16]
 8001296:	f7ff fe55 	bl	8000f44 <__aeabi_f2uiz>
 800129a:	4603      	mov	r3, r0
 800129c:	b29b      	uxth	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	4933      	ldr	r1, [pc, #204]	; (8001370 <main+0x144>)
 80012a2:	4830      	ldr	r0, [pc, #192]	; (8001364 <main+0x138>)
 80012a4:	f008 fa92 	bl	80097cc <siprintf>
	CDC_Transmit_FS((uint8_t*) data, strlen(data));
 80012a8:	482e      	ldr	r0, [pc, #184]	; (8001364 <main+0x138>)
 80012aa:	f7fe ff4f 	bl	800014c <strlen>
 80012ae:	4603      	mov	r3, r0
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4619      	mov	r1, r3
 80012b4:	482b      	ldr	r0, [pc, #172]	; (8001364 <main+0x138>)
 80012b6:	f007 fd41 	bl	8008d3c <CDC_Transmit_FS>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		uint16_t current_angle = angleSensor.getRawRotation();
 80012ba:	482b      	ldr	r0, [pc, #172]	; (8001368 <main+0x13c>)
 80012bc:	f7ff ff38 	bl	8001130 <_ZN7AS5048A14getRawRotationEv>
 80012c0:	4603      	mov	r3, r0
 80012c2:	81fb      	strh	r3, [r7, #14]
		float current_angle_map = angleSensor.read2angle(current_angle);
 80012c4:	89fb      	ldrh	r3, [r7, #14]
 80012c6:	4619      	mov	r1, r3
 80012c8:	4827      	ldr	r0, [pc, #156]	; (8001368 <main+0x13c>)
 80012ca:	f7ff ff99 	bl	8001200 <_ZN7AS5048A10read2angleEt>
 80012ce:	60b8      	str	r0, [r7, #8]

		float angle = current_angle_map - zero_position_map;
 80012d0:	6939      	ldr	r1, [r7, #16]
 80012d2:	68b8      	ldr	r0, [r7, #8]
 80012d4:	f7ff fcb6 	bl	8000c44 <__aeabi_fsub>
 80012d8:	4603      	mov	r3, r0
 80012da:	607b      	str	r3, [r7, #4]
		angle = angleSensor.normalize(angle);
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4822      	ldr	r0, [pc, #136]	; (8001368 <main+0x13c>)
 80012e0:	f7ff ff66 	bl	80011b0 <_ZN7AS5048A9normalizeEf>
 80012e4:	6078      	str	r0, [r7, #4]

		sprintf(data, "Current Angle: %d\nCurrent Angle Map: %u\nAngle: %u\n\n",
 80012e6:	89fc      	ldrh	r4, [r7, #14]
				current_angle, (uint16_t) current_angle_map, (uint16_t) angle);
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff fe2b 	bl	8000f44 <__aeabi_f2uiz>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29b      	uxth	r3, r3
		sprintf(data, "Current Angle: %d\nCurrent Angle Map: %u\nAngle: %u\n\n",
 80012f2:	461d      	mov	r5, r3
				current_angle, (uint16_t) current_angle_map, (uint16_t) angle);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff fe25 	bl	8000f44 <__aeabi_f2uiz>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29b      	uxth	r3, r3
		sprintf(data, "Current Angle: %d\nCurrent Angle Map: %u\nAngle: %u\n\n",
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	462b      	mov	r3, r5
 8001302:	4622      	mov	r2, r4
 8001304:	491b      	ldr	r1, [pc, #108]	; (8001374 <main+0x148>)
 8001306:	4817      	ldr	r0, [pc, #92]	; (8001364 <main+0x138>)
 8001308:	f008 fa60 	bl	80097cc <siprintf>
		CDC_Transmit_FS((uint8_t*) data, strlen(data));
 800130c:	4815      	ldr	r0, [pc, #84]	; (8001364 <main+0x138>)
 800130e:	f7fe ff1d 	bl	800014c <strlen>
 8001312:	4603      	mov	r3, r0
 8001314:	b29b      	uxth	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <main+0x138>)
 800131a:	f007 fd0f 	bl	8008d3c <CDC_Transmit_FS>
		if (angleSensor.error()) {
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <main+0x13c>)
 8001320:	f7ff ff14 	bl	800114c <_ZN7AS5048A5errorEv>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	bf14      	ite	ne
 800132a:	2301      	movne	r3, #1
 800132c:	2300      	moveq	r3, #0
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d011      	beq.n	8001358 <main+0x12c>
			sprintf(data, "ERROR: %d\n", angleSensor.getErrors());
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <main+0x13c>)
 8001336:	f7ff ff14 	bl	8001162 <_ZN7AS5048A9getErrorsEv>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	490e      	ldr	r1, [pc, #56]	; (8001378 <main+0x14c>)
 8001340:	4808      	ldr	r0, [pc, #32]	; (8001364 <main+0x138>)
 8001342:	f008 fa43 	bl	80097cc <siprintf>
			CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001346:	4807      	ldr	r0, [pc, #28]	; (8001364 <main+0x138>)
 8001348:	f7fe ff00 	bl	800014c <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29b      	uxth	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4804      	ldr	r0, [pc, #16]	; (8001364 <main+0x138>)
 8001354:	f007 fcf2 	bl	8008d3c <CDC_Transmit_FS>
		}

		HAL_Delay(200);
 8001358:	20c8      	movs	r0, #200	; 0xc8
 800135a:	f000 faaf 	bl	80018bc <HAL_Delay>

		/* USER CODE BEGIN 3 */
	}
 800135e:	e7ac      	b.n	80012ba <main+0x8e>
 8001360:	0800a0d8 	.word	0x0800a0d8
 8001364:	20000254 	.word	0x20000254
 8001368:	200002b8 	.word	0x200002b8
 800136c:	0800a0ec 	.word	0x0800a0ec
 8001370:	0800a0f8 	.word	0x0800a0f8
 8001374:	0800a104 	.word	0x0800a104
 8001378:	0800a138 	.word	0x0800a138

0800137c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	; 0x50
 8001380:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001386:	2228      	movs	r2, #40	; 0x28
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f008 fa16 	bl	80097bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ba:	2301      	movs	r3, #1
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013c8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013cc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	4618      	mov	r0, r3
 80013d4:	f002 fa04 	bl	80037e0 <HAL_RCC_OscConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <_Z18SystemClock_Configv+0x70>
		Error_Handler();
 80013e8:	f000 f8da 	bl	80015a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013fc:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f002 fc6b 	bl	8003ce4 <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <_Z18SystemClock_Configv+0xa6>
		Error_Handler();
 800141e:	f000 f8bf 	bl	80015a0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001422:	2310      	movs	r3, #16
 8001424:	607b      	str	r3, [r7, #4]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4618      	mov	r0, r3
 800142e:	f002 fdbf 	bl	8003fb0 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	bf14      	ite	ne
 8001438:	2301      	movne	r3, #1
 800143a:	2300      	moveq	r3, #0
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <_Z18SystemClock_Configv+0xca>
		Error_Handler();
 8001442:	f000 f8ad 	bl	80015a0 <Error_Handler>
	}
}
 8001446:	bf00      	nop
 8001448:	3750      	adds	r7, #80	; 0x50
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001456:	4a1b      	ldr	r2, [pc, #108]	; (80014c4 <_ZL12MX_SPI1_Initv+0x74>)
 8001458:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001468:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 800146a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800146e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800147c:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 800147e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001482:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001484:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001486:	2220      	movs	r2, #32
 8001488:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148a:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 800149e:	220a      	movs	r2, #10
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <_ZL12MX_SPI1_Initv+0x70>)
 80014a4:	f002 fe3a 	bl	800411c <HAL_SPI_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	bf14      	ite	ne
 80014ae:	2301      	movne	r3, #1
 80014b0:	2300      	moveq	r3, #0
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <_ZL12MX_SPI1_Initv+0x6c>
		Error_Handler();
 80014b8:	f000 f872 	bl	80015a0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200001fc 	.word	0x200001fc
 80014c4:	40013000 	.word	0x40013000

080014c8 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 80014e2:	f043 0310 	orr.w	r3, r3, #16
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0310 	and.w	r3, r3, #16
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 80014fa:	f043 0320 	orr.w	r3, r3, #32
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a20      	ldr	r2, [pc, #128]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <_ZL12MX_GPIO_Initv+0xcc>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800153c:	2200      	movs	r2, #0
 800153e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001542:	4815      	ldr	r0, [pc, #84]	; (8001598 <_ZL12MX_GPIO_Initv+0xd0>)
 8001544:	f000 fc70 	bl	8001e28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	2101      	movs	r1, #1
 800154c:	4813      	ldr	r0, [pc, #76]	; (800159c <_ZL12MX_GPIO_Initv+0xd4>)
 800154e:	f000 fc6b 	bl	8001e28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001558:	2301      	movs	r3, #1
 800155a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2302      	movs	r3, #2
 8001562:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0310 	add.w	r3, r7, #16
 8001568:	4619      	mov	r1, r3
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <_ZL12MX_GPIO_Initv+0xd0>)
 800156c:	f000 fad8 	bl	8001b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_CSn_Pin */
	GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4619      	mov	r1, r3
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <_ZL12MX_GPIO_Initv+0xd4>)
 8001588:	f000 faca 	bl	8001b20 <HAL_GPIO_Init>

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	40011000 	.word	0x40011000
 800159c:	40010c00 	.word	0x40010c00

080015a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>
	...

080015ac <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d10a      	bne.n	80015d2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d105      	bne.n	80015d2 <_Z41__static_initialization_and_destruction_0ii+0x26>
AS5048A angleSensor(&hspi1, GPIOB,GPIO_PIN_0);
 80015c6:	2301      	movs	r3, #1
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80015ca:	4905      	ldr	r1, [pc, #20]	; (80015e0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80015ce:	f7ff fcd9 	bl	8000f84 <_ZN7AS5048AC1EP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	200001fc 	.word	0x200001fc
 80015e4:	200002b8 	.word	0x200002b8

080015e8 <_GLOBAL__sub_I_hspi1>:
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff ffdb 	bl	80015ac <_Z41__static_initialization_and_destruction_0ii>
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_MspInit+0x40>)
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_MspInit+0x40>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6193      	str	r3, [r2, #24]
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_MspInit+0x40>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_MspInit+0x40>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_MspInit+0x40>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <HAL_MspInit+0x40>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b088      	sub	sp, #32
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <HAL_SPI_MspInit+0x88>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d12f      	bne.n	80016bc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <HAL_SPI_MspInit+0x8c>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <HAL_SPI_MspInit+0x8c>)
 8001662:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <HAL_SPI_MspInit+0x8c>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <HAL_SPI_MspInit+0x8c>)
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_SPI_MspInit+0x8c>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	6193      	str	r3, [r2, #24]
 8001680:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <HAL_SPI_MspInit+0x8c>)
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800168c:	23a0      	movs	r3, #160	; 0xa0
 800168e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0310 	add.w	r3, r7, #16
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <HAL_SPI_MspInit+0x90>)
 80016a0:	f000 fa3e 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016ac:	2301      	movs	r3, #1
 80016ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	4619      	mov	r1, r3
 80016b6:	4805      	ldr	r0, [pc, #20]	; (80016cc <HAL_SPI_MspInit+0x90>)
 80016b8:	f000 fa32 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016bc:	bf00      	nop
 80016be:	3720      	adds	r7, #32
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	40013000 	.word	0x40013000
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010800 	.word	0x40010800

080016d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <NMI_Handler+0x4>

080016d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <MemManage_Handler+0x4>

080016e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <BusFault_Handler+0x4>

080016e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <UsageFault_Handler+0x4>

080016ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001716:	f000 f8b5 	bl	8001884 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001724:	4802      	ldr	r0, [pc, #8]	; (8001730 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001726:	f000 fcc8 	bl	80020ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000fa0 	.word	0x20000fa0

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f008 f800 	bl	8009768 <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20005000 	.word	0x20005000
 8001794:	00000400 	.word	0x00000400
 8001798:	200002d0 	.word	0x200002d0
 800179c:	200014c0 	.word	0x200014c0

080017a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480c      	ldr	r0, [pc, #48]	; (80017e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ae:	490d      	ldr	r1, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b0:	4a0d      	ldr	r2, [pc, #52]	; (80017e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017d2:	f7ff ffe5 	bl	80017a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d6:	f007 ffcd 	bl	8009774 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017da:	f7ff fd27 	bl	800122c <main>
  bx lr
 80017de:	4770      	bx	lr
  ldr r0, =_sdata
 80017e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017e8:	0800a1f8 	.word	0x0800a1f8
  ldr r2, =_sbss
 80017ec:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017f0:	200014bc 	.word	0x200014bc

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>
	...

080017f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017fc:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_Init+0x28>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <HAL_Init+0x28>)
 8001802:	f043 0310 	orr.w	r3, r3, #16
 8001806:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f000 f947 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180e:	200f      	movs	r0, #15
 8001810:	f000 f808 	bl	8001824 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001814:	f7ff fef0 	bl	80015f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <HAL_InitTick+0x54>)
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b12      	ldr	r3, [pc, #72]	; (800187c <HAL_InitTick+0x58>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4619      	mov	r1, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183a:	fbb3 f3f1 	udiv	r3, r3, r1
 800183e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f95f 	bl	8001b06 <HAL_SYSTICK_Config>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e00e      	b.n	8001870 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d80a      	bhi.n	800186e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001860:	f000 f927 	bl	8001ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001864:	4a06      	ldr	r2, [pc, #24]	; (8001880 <HAL_InitTick+0x5c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e000      	b.n	8001870 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
}
 8001870:	4618      	mov	r0, r3
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000000 	.word	0x20000000
 800187c:	20000008 	.word	0x20000008
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_IncTick+0x1c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	461a      	mov	r2, r3
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_IncTick+0x20>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4413      	add	r3, r2
 8001894:	4a03      	ldr	r2, [pc, #12]	; (80018a4 <HAL_IncTick+0x20>)
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000008 	.word	0x20000008
 80018a4:	200002d4 	.word	0x200002d4

080018a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b02      	ldr	r3, [pc, #8]	; (80018b8 <HAL_GetTick+0x10>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	200002d4 	.word	0x200002d4

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff fff0 	bl	80018a8 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_Delay+0x44>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffe0 	bl	80018a8 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008

08001904 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001920:	4013      	ands	r3, r2
 8001922:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800192c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001934:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001936:	4a04      	ldr	r2, [pc, #16]	; (8001948 <__NVIC_SetPriorityGrouping+0x44>)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	60d3      	str	r3, [r2, #12]
}
 800193c:	bf00      	nop
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <__NVIC_GetPriorityGrouping+0x18>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	f003 0307 	and.w	r3, r3, #7
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	e000ed00 	.word	0xe000ed00

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4906      	ldr	r1, [pc, #24]	; (800199c <__NVIC_EnableIRQ+0x34>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a7c:	f7ff ff90 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff2d 	bl	8001904 <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff42 	bl	800194c <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff90 	bl	80019f4 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5f 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff35 	bl	8001968 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b08b      	sub	sp, #44	; 0x2c
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b32:	e169      	b.n	8001e08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b34:	2201      	movs	r2, #1
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8158 	bne.w	8001e02 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	4a9a      	ldr	r2, [pc, #616]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d05e      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b5c:	4a98      	ldr	r2, [pc, #608]	; (8001dc0 <HAL_GPIO_Init+0x2a0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d875      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b62:	4a98      	ldr	r2, [pc, #608]	; (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d058      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b68:	4a96      	ldr	r2, [pc, #600]	; (8001dc4 <HAL_GPIO_Init+0x2a4>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d86f      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b6e:	4a96      	ldr	r2, [pc, #600]	; (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d052      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b74:	4a94      	ldr	r2, [pc, #592]	; (8001dc8 <HAL_GPIO_Init+0x2a8>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d869      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b7a:	4a94      	ldr	r2, [pc, #592]	; (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d04c      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b80:	4a92      	ldr	r2, [pc, #584]	; (8001dcc <HAL_GPIO_Init+0x2ac>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d863      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b86:	4a92      	ldr	r2, [pc, #584]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d046      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
 8001b8c:	4a90      	ldr	r2, [pc, #576]	; (8001dd0 <HAL_GPIO_Init+0x2b0>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d85d      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d82a      	bhi.n	8001bec <HAL_GPIO_Init+0xcc>
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d859      	bhi.n	8001c4e <HAL_GPIO_Init+0x12e>
 8001b9a:	a201      	add	r2, pc, #4	; (adr r2, 8001ba0 <HAL_GPIO_Init+0x80>)
 8001b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001bf5 	.word	0x08001bf5
 8001ba8:	08001c07 	.word	0x08001c07
 8001bac:	08001c49 	.word	0x08001c49
 8001bb0:	08001c4f 	.word	0x08001c4f
 8001bb4:	08001c4f 	.word	0x08001c4f
 8001bb8:	08001c4f 	.word	0x08001c4f
 8001bbc:	08001c4f 	.word	0x08001c4f
 8001bc0:	08001c4f 	.word	0x08001c4f
 8001bc4:	08001c4f 	.word	0x08001c4f
 8001bc8:	08001c4f 	.word	0x08001c4f
 8001bcc:	08001c4f 	.word	0x08001c4f
 8001bd0:	08001c4f 	.word	0x08001c4f
 8001bd4:	08001c4f 	.word	0x08001c4f
 8001bd8:	08001c4f 	.word	0x08001c4f
 8001bdc:	08001c4f 	.word	0x08001c4f
 8001be0:	08001c4f 	.word	0x08001c4f
 8001be4:	08001bfd 	.word	0x08001bfd
 8001be8:	08001c11 	.word	0x08001c11
 8001bec:	4a79      	ldr	r2, [pc, #484]	; (8001dd4 <HAL_GPIO_Init+0x2b4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d013      	beq.n	8001c1a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bf2:	e02c      	b.n	8001c4e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	623b      	str	r3, [r7, #32]
          break;
 8001bfa:	e029      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	3304      	adds	r3, #4
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e024      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	3308      	adds	r3, #8
 8001c0c:	623b      	str	r3, [r7, #32]
          break;
 8001c0e:	e01f      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	330c      	adds	r3, #12
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e01a      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c22:	2304      	movs	r3, #4
 8001c24:	623b      	str	r3, [r7, #32]
          break;
 8001c26:	e013      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d105      	bne.n	8001c3c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c30:	2308      	movs	r3, #8
 8001c32:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	611a      	str	r2, [r3, #16]
          break;
 8001c3a:	e009      	b.n	8001c50 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c3c:	2308      	movs	r3, #8
 8001c3e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69fa      	ldr	r2, [r7, #28]
 8001c44:	615a      	str	r2, [r3, #20]
          break;
 8001c46:	e003      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	623b      	str	r3, [r7, #32]
          break;
 8001c4c:	e000      	b.n	8001c50 <HAL_GPIO_Init+0x130>
          break;
 8001c4e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2bff      	cmp	r3, #255	; 0xff
 8001c54:	d801      	bhi.n	8001c5a <HAL_GPIO_Init+0x13a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	e001      	b.n	8001c5e <HAL_GPIO_Init+0x13e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d802      	bhi.n	8001c6c <HAL_GPIO_Init+0x14c>
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	e002      	b.n	8001c72 <HAL_GPIO_Init+0x152>
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	3b08      	subs	r3, #8
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	210f      	movs	r1, #15
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	401a      	ands	r2, r3
 8001c84:	6a39      	ldr	r1, [r7, #32]
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	431a      	orrs	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 80b1 	beq.w	8001e02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca0:	4b4d      	ldr	r3, [pc, #308]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6193      	str	r3, [r2, #24]
 8001cac:	4b4a      	ldr	r3, [pc, #296]	; (8001dd8 <HAL_GPIO_Init+0x2b8>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb8:	4a48      	ldr	r2, [pc, #288]	; (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	089b      	lsrs	r3, r3, #2
 8001cbe:	3302      	adds	r3, #2
 8001cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	220f      	movs	r2, #15
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a40      	ldr	r2, [pc, #256]	; (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_GPIO_Init+0x2c4>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d00d      	beq.n	8001d08 <HAL_GPIO_Init+0x1e8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3e      	ldr	r2, [pc, #248]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d007      	beq.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3d      	ldr	r2, [pc, #244]	; (8001dec <HAL_GPIO_Init+0x2cc>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d101      	bne.n	8001d00 <HAL_GPIO_Init+0x1e0>
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e006      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e004      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e002      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e000      	b.n	8001d0e <HAL_GPIO_Init+0x1ee>
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d10:	f002 0203 	and.w	r2, r2, #3
 8001d14:	0092      	lsls	r2, r2, #2
 8001d16:	4093      	lsls	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d1e:	492f      	ldr	r1, [pc, #188]	; (8001ddc <HAL_GPIO_Init+0x2bc>)
 8001d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d38:	4b2d      	ldr	r3, [pc, #180]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	492c      	ldr	r1, [pc, #176]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d46:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	4928      	ldr	r1, [pc, #160]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4922      	ldr	r1, [pc, #136]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d6e:	4b20      	ldr	r3, [pc, #128]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	491e      	ldr	r1, [pc, #120]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	4918      	ldr	r1, [pc, #96]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4914      	ldr	r1, [pc, #80]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d021      	beq.n	8001df4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	490e      	ldr	r1, [pc, #56]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
 8001dbc:	e021      	b.n	8001e02 <HAL_GPIO_Init+0x2e2>
 8001dbe:	bf00      	nop
 8001dc0:	10320000 	.word	0x10320000
 8001dc4:	10310000 	.word	0x10310000
 8001dc8:	10220000 	.word	0x10220000
 8001dcc:	10210000 	.word	0x10210000
 8001dd0:	10120000 	.word	0x10120000
 8001dd4:	10110000 	.word	0x10110000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	40010800 	.word	0x40010800
 8001de4:	40010c00 	.word	0x40010c00
 8001de8:	40011000 	.word	0x40011000
 8001dec:	40011400 	.word	0x40011400
 8001df0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_GPIO_Init+0x304>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4909      	ldr	r1, [pc, #36]	; (8001e24 <HAL_GPIO_Init+0x304>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	3301      	adds	r3, #1
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f47f ae8e 	bne.w	8001b34 <HAL_GPIO_Init+0x14>
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	372c      	adds	r7, #44	; 0x2c
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	40010400 	.word	0x40010400

08001e28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	807b      	strh	r3, [r7, #2]
 8001e34:	4613      	mov	r3, r2
 8001e36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e38:	787b      	ldrb	r3, [r7, #1]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3e:	887a      	ldrh	r2, [r7, #2]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e44:	e003      	b.n	8001e4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	041a      	lsls	r2, r3, #16
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
}
 8001e4e:	bf00      	nop
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5a:	b08b      	sub	sp, #44	; 0x2c
 8001e5c:	af06      	add	r7, sp, #24
 8001e5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e0fd      	b.n	8002066 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d106      	bne.n	8001e84 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f007 f890 	bl	8008fa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2203      	movs	r2, #3
 8001e88:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fd7f 	bl	8004994 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	687e      	ldr	r6, [r7, #4]
 8001e9e:	466d      	mov	r5, sp
 8001ea0:	f106 0410 	add.w	r4, r6, #16
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea8:	6823      	ldr	r3, [r4, #0]
 8001eaa:	602b      	str	r3, [r5, #0]
 8001eac:	1d33      	adds	r3, r6, #4
 8001eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb0:	6838      	ldr	r0, [r7, #0]
 8001eb2:	f002 fd49 	bl	8004948 <USB_CoreInit>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0ce      	b.n	8002066 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2100      	movs	r1, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 fd7a 	bl	80049c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]
 8001ed8:	e04c      	b.n	8001f74 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	6879      	ldr	r1, [r7, #4]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	3301      	adds	r3, #1
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	b298      	uxth	r0, r3
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	440b      	add	r3, r1
 8001f16:	3336      	adds	r3, #54	; 0x36
 8001f18:	4602      	mov	r2, r0
 8001f1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3303      	adds	r3, #3
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	3338      	adds	r3, #56	; 0x38
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f46:	7bfa      	ldrb	r2, [r7, #15]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	333c      	adds	r3, #60	; 0x3c
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f5a:	7bfa      	ldrb	r2, [r7, #15]
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	440b      	add	r3, r1
 8001f68:	3340      	adds	r3, #64	; 0x40
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	3301      	adds	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d3ad      	bcc.n	8001eda <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	73fb      	strb	r3, [r7, #15]
 8001f82:	e044      	b.n	800200e <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	440b      	add	r3, r1
 8001f92:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f9a:	7bfa      	ldrb	r2, [r7, #15]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	440b      	add	r3, r1
 8001fbe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fc6:	7bfa      	ldrb	r2, [r7, #15]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002008:	7bfb      	ldrb	r3, [r7, #15]
 800200a:	3301      	adds	r3, #1
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	d3b5      	bcc.n	8001f84 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	603b      	str	r3, [r7, #0]
 800201e:	687e      	ldr	r6, [r7, #4]
 8002020:	466d      	mov	r5, sp
 8002022:	f106 0410 	add.w	r4, r6, #16
 8002026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	602b      	str	r3, [r5, #0]
 800202e:	1d33      	adds	r3, r6, #4
 8002030:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002032:	6838      	ldr	r0, [r7, #0]
 8002034:	f002 fcd4 	bl	80049e0 <USB_DevInit>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d005      	beq.n	800204a <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2202      	movs	r2, #2
 8002042:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e00d      	b.n	8002066 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f005 f986 	bl	8007370 <USB_DevDisconnect>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800206e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_PCD_Start+0x16>
 8002080:	2302      	movs	r3, #2
 8002082:	e016      	b.n	80020b2 <HAL_PCD_Start+0x44>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f002 fc69 	bl	8004968 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002096:	2101      	movs	r1, #1
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f007 f9f6 	bl	800948a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f005 f95a 	bl	800735c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b088      	sub	sp, #32
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f005 f95c 	bl	8007384 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d6:	d102      	bne.n	80020de <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fb5f 	bl	800279c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f005 f94e 	bl	8007384 <USB_ReadInterrupts>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020f2:	d112      	bne.n	800211a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002106:	b292      	uxth	r2, r2
 8002108:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f006 ffc4 	bl	800909a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002112:	2100      	movs	r1, #0
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f923 	bl	8002360 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f005 f930 	bl	8007384 <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800212e:	d10b      	bne.n	8002148 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002138:	b29a      	uxth	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002142:	b292      	uxth	r2, r2
 8002144:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f005 f919 	bl	8007384 <USB_ReadInterrupts>
 8002152:	4603      	mov	r3, r0
 8002154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215c:	d10b      	bne.n	8002176 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002166:	b29a      	uxth	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002170:	b292      	uxth	r2, r2
 8002172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f005 f902 	bl	8007384 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002186:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800218a:	d126      	bne.n	80021da <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002194:	b29a      	uxth	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0204 	bic.w	r2, r2, #4
 800219e:	b292      	uxth	r2, r2
 80021a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0208 	bic.w	r2, r2, #8
 80021b6:	b292      	uxth	r2, r2
 80021b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f006 ffa5 	bl	800910c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021d4:	b292      	uxth	r2, r2
 80021d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f005 f8d0 	bl	8007384 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021ee:	f040 8082 	bne.w	80022f6 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	77fb      	strb	r3, [r7, #31]
 80021f6:	e010      	b.n	800221a <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	441a      	add	r2, r3
 8002204:	7ffb      	ldrb	r3, [r7, #31]
 8002206:	8812      	ldrh	r2, [r2, #0]
 8002208:	b292      	uxth	r2, r2
 800220a:	005b      	lsls	r3, r3, #1
 800220c:	3320      	adds	r3, #32
 800220e:	443b      	add	r3, r7
 8002210:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8002214:	7ffb      	ldrb	r3, [r7, #31]
 8002216:	3301      	adds	r3, #1
 8002218:	77fb      	strb	r3, [r7, #31]
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	2b07      	cmp	r3, #7
 800221e:	d9eb      	bls.n	80021f8 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002228:	b29a      	uxth	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0201 	orr.w	r2, r2, #1
 8002232:	b292      	uxth	r2, r2
 8002234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002240:	b29a      	uxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	b292      	uxth	r2, r2
 800224c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002250:	bf00      	nop
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800225a:	b29b      	uxth	r3, r3
 800225c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f6      	beq.n	8002252 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800226c:	b29a      	uxth	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002276:	b292      	uxth	r2, r2
 8002278:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
 8002280:	e00f      	b.n	80022a2 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	4611      	mov	r1, r2
 800228a:	7ffa      	ldrb	r2, [r7, #31]
 800228c:	0092      	lsls	r2, r2, #2
 800228e:	440a      	add	r2, r1
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	3320      	adds	r3, #32
 8002294:	443b      	add	r3, r7
 8002296:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800229a:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800229c:	7ffb      	ldrb	r3, [r7, #31]
 800229e:	3301      	adds	r3, #1
 80022a0:	77fb      	strb	r3, [r7, #31]
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	2b07      	cmp	r3, #7
 80022a6:	d9ec      	bls.n	8002282 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0208 	orr.w	r2, r2, #8
 80022ba:	b292      	uxth	r2, r2
 80022bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d2:	b292      	uxth	r2, r2
 80022d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0204 	orr.w	r2, r2, #4
 80022ea:	b292      	uxth	r2, r2
 80022ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f006 fef1 	bl	80090d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f005 f842 	bl	8007384 <USB_ReadInterrupts>
 8002300:	4603      	mov	r3, r0
 8002302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002306:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230a:	d10e      	bne.n	800232a <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002314:	b29a      	uxth	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231e:	b292      	uxth	r2, r2
 8002320:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f006 feaa 	bl	800907e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f005 f828 	bl	8007384 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233e:	d10b      	bne.n	8002358 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002348:	b29a      	uxth	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002352:	b292      	uxth	r2, r2
 8002354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8002358:	bf00      	nop
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <HAL_PCD_SetAddress+0x1a>
 8002376:	2302      	movs	r3, #2
 8002378:	e013      	b.n	80023a2 <HAL_PCD_SetAddress+0x42>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	78fa      	ldrb	r2, [r7, #3]
 8002386:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	4611      	mov	r1, r2
 8002392:	4618      	mov	r0, r3
 8002394:	f004 ffcf 	bl	8007336 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
 80023b2:	4608      	mov	r0, r1
 80023b4:	4611      	mov	r1, r2
 80023b6:	461a      	mov	r2, r3
 80023b8:	4603      	mov	r3, r0
 80023ba:	70fb      	strb	r3, [r7, #3]
 80023bc:	460b      	mov	r3, r1
 80023be:	803b      	strh	r3, [r7, #0]
 80023c0:	4613      	mov	r3, r2
 80023c2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	da0e      	bge.n	80023ee <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023d0:	78fb      	ldrb	r3, [r7, #3]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	705a      	strb	r2, [r3, #1]
 80023ec:	e00e      	b.n	800240c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023ee:	78fb      	ldrb	r3, [r7, #3]
 80023f0:	f003 0207 	and.w	r2, r3, #7
 80023f4:	4613      	mov	r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002400:	687a      	ldr	r2, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002418:	883a      	ldrh	r2, [r7, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	78ba      	ldrb	r2, [r7, #2]
 8002422:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002436:	78bb      	ldrb	r3, [r7, #2]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d102      	bne.n	8002442 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_PCD_EP_Open+0xa6>
 800244c:	2302      	movs	r3, #2
 800244e:	e00e      	b.n	800246e <HAL_PCD_EP_Open+0xc4>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68f9      	ldr	r1, [r7, #12]
 800245e:	4618      	mov	r0, r3
 8002460:	f002 fade 	bl	8004a20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800246c:	7afb      	ldrb	r3, [r7, #11]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	460b      	mov	r3, r1
 8002480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002482:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002486:	2b00      	cmp	r3, #0
 8002488:	da0e      	bge.n	80024a8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2201      	movs	r2, #1
 80024a4:	705a      	strb	r2, [r3, #1]
 80024a6:	e00e      	b.n	80024c6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	f003 0207 	and.w	r2, r3, #7
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	00db      	lsls	r3, r3, #3
 80024b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_PCD_EP_Close+0x6a>
 80024dc:	2302      	movs	r3, #2
 80024de:	e00e      	b.n	80024fe <HAL_PCD_EP_Close+0x88>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68f9      	ldr	r1, [r7, #12]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f002 fe00 	bl	80050f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b086      	sub	sp, #24
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	460b      	mov	r3, r1
 8002514:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002516:	7afb      	ldrb	r3, [r7, #11]
 8002518:	f003 0207 	and.w	r2, r3, #7
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	2200      	movs	r2, #0
 800253e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2200      	movs	r2, #0
 8002544:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002546:	7afb      	ldrb	r3, [r7, #11]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	b2da      	uxtb	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002552:	7afb      	ldrb	r3, [r7, #11]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	2b00      	cmp	r3, #0
 800255a:	d106      	bne.n	800256a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6979      	ldr	r1, [r7, #20]
 8002562:	4618      	mov	r0, r3
 8002564:	f002 ffb2 	bl	80054cc <USB_EPStartXfer>
 8002568:	e005      	b.n	8002576 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	6979      	ldr	r1, [r7, #20]
 8002570:	4618      	mov	r0, r3
 8002572:	f002 ffab 	bl	80054cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800258c:	78fb      	ldrb	r3, [r7, #3]
 800258e:	f003 0207 	and.w	r2, r3, #7
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	603b      	str	r3, [r7, #0]
 80025ba:	460b      	mov	r3, r1
 80025bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025be:	7afb      	ldrb	r3, [r7, #11]
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	4613      	mov	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4413      	add	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	2200      	movs	r2, #0
 80025f2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2201      	movs	r2, #1
 80025f8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025fa:	7afb      	ldrb	r3, [r7, #11]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	b2da      	uxtb	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002606:	7afb      	ldrb	r3, [r7, #11]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	2b00      	cmp	r3, #0
 800260e:	d106      	bne.n	800261e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6979      	ldr	r1, [r7, #20]
 8002616:	4618      	mov	r0, r3
 8002618:	f002 ff58 	bl	80054cc <USB_EPStartXfer>
 800261c:	e005      	b.n	800262a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6979      	ldr	r1, [r7, #20]
 8002624:	4618      	mov	r0, r3
 8002626:	f002 ff51 	bl	80054cc <USB_EPStartXfer>
  }

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002640:	78fb      	ldrb	r3, [r7, #3]
 8002642:	f003 0207 	and.w	r2, r3, #7
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	429a      	cmp	r2, r3
 800264c:	d901      	bls.n	8002652 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e04c      	b.n	80026ec <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002656:	2b00      	cmp	r3, #0
 8002658:	da0e      	bge.n	8002678 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800265a:	78fb      	ldrb	r3, [r7, #3]
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	4613      	mov	r3, r2
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	00db      	lsls	r3, r3, #3
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	4413      	add	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	705a      	strb	r2, [r3, #1]
 8002676:	e00c      	b.n	8002692 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4613      	mov	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4413      	add	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	f003 0307 	and.w	r3, r3, #7
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_PCD_EP_SetStall+0x7e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e01c      	b.n	80026ec <HAL_PCD_EP_SetStall+0xb8>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68f9      	ldr	r1, [r7, #12]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f004 fd3b 	bl	800713c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d108      	bne.n	80026e2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f004 fe60 	bl	80073a2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	f003 020f 	and.w	r2, r3, #15
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d901      	bls.n	8002712 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e040      	b.n	8002794 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002716:	2b00      	cmp	r3, #0
 8002718:	da0e      	bge.n	8002738 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800271a:	78fb      	ldrb	r3, [r7, #3]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	4413      	add	r3, r2
 800272e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	705a      	strb	r2, [r3, #1]
 8002736:	e00e      	b.n	8002756 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	f003 0207 	and.w	r2, r3, #7
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	b2da      	uxtb	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_PCD_EP_ClrStall+0x82>
 8002772:	2302      	movs	r3, #2
 8002774:	e00e      	b.n	8002794 <HAL_PCD_EP_ClrStall+0xa0>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68f9      	ldr	r1, [r7, #12]
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fd29 	bl	80071dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08e      	sub	sp, #56	; 0x38
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80027a4:	e2ec      	b.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80027ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80027bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 8161 	bne.w	8002a88 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d152      	bne.n	8002876 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80027dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e0:	81fb      	strh	r3, [r7, #14]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3328      	adds	r3, #40	; 0x28
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002802:	b29b      	uxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	3302      	adds	r3, #2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	4413      	add	r3, r2
 8002818:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	441a      	add	r2, r3
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002834:	2100      	movs	r1, #0
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f006 fc07 	bl	800904a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 829b 	beq.w	8002d80 <PCD_EP_ISR_Handler+0x5e4>
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 8296 	bne.w	8002d80 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800285a:	b2db      	uxtb	r3, r3
 800285c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002860:	b2da      	uxtb	r2, r3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	b292      	uxth	r2, r2
 8002868:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002874:	e284      	b.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002886:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800288c:	2b00      	cmp	r3, #0
 800288e:	d034      	beq.n	80028fa <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002898:	b29b      	uxth	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	3306      	adds	r3, #6
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80028c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f004 fdb7 	bl	8007442 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b29a      	uxth	r2, r3
 80028dc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80028e0:	4013      	ands	r3, r2
 80028e2:	823b      	strh	r3, [r7, #16]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	8a3a      	ldrh	r2, [r7, #16]
 80028ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028ee:	b292      	uxth	r2, r2
 80028f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f006 fb7c 	bl	8008ff0 <HAL_PCD_SetupStageCallback>
 80028f8:	e242      	b.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028fa:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f280 823e 	bge.w	8002d80 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29a      	uxth	r2, r3
 800290c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002910:	4013      	ands	r3, r2
 8002912:	83bb      	strh	r3, [r7, #28]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	8bba      	ldrh	r2, [r7, #28]
 800291a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800291e:	b292      	uxth	r2, r2
 8002920:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292a:	b29b      	uxth	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	3306      	adds	r3, #6
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4413      	add	r3, r2
 8002940:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d019      	beq.n	800298a <PCD_EP_ISR_Handler+0x1ee>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d015      	beq.n	800298a <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	6959      	ldr	r1, [r3, #20]
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800296e:	b29b      	uxth	r3, r3
 8002970:	f004 fd67 	bl	8007442 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	441a      	add	r2, r3
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002982:	2100      	movs	r1, #0
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f006 fb45 	bl	8009014 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002996:	2b00      	cmp	r3, #0
 8002998:	f040 81f2 	bne.w	8002d80 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	4413      	add	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d112      	bne.n	80029ea <PCD_EP_ISR_Handler+0x24e>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	801a      	strh	r2, [r3, #0]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	801a      	strh	r2, [r3, #0]
 80029e8:	e02f      	b.n	8002a4a <PCD_EP_ISR_Handler+0x2ae>
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b3e      	cmp	r3, #62	; 0x3e
 80029f0:	d813      	bhi.n	8002a1a <PCD_EP_ISR_Handler+0x27e>
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	085b      	lsrs	r3, r3, #1
 80029f8:	633b      	str	r3, [r7, #48]	; 0x30
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d002      	beq.n	8002a0c <PCD_EP_ISR_Handler+0x270>
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	3301      	adds	r3, #1
 8002a0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	029b      	lsls	r3, r3, #10
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	801a      	strh	r2, [r3, #0]
 8002a18:	e017      	b.n	8002a4a <PCD_EP_ISR_Handler+0x2ae>
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	633b      	str	r3, [r7, #48]	; 0x30
 8002a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d102      	bne.n	8002a34 <PCD_EP_ISR_Handler+0x298>
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	3b01      	subs	r3, #1
 8002a32:	633b      	str	r3, [r7, #48]	; 0x30
 8002a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	029b      	lsls	r3, r3, #10
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	827b      	strh	r3, [r7, #18]
 8002a5c:	8a7b      	ldrh	r3, [r7, #18]
 8002a5e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a62:	827b      	strh	r3, [r7, #18]
 8002a64:	8a7b      	ldrh	r3, [r7, #18]
 8002a66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a6a:	827b      	strh	r3, [r7, #18]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	8a7b      	ldrh	r3, [r7, #18]
 8002a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	8013      	strh	r3, [r2, #0]
 8002a86:	e17b      	b.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a9a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f280 80ea 	bge.w	8002c78 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002aba:	4013      	ands	r3, r2
 8002abc:	853b      	strh	r3, [r7, #40]	; 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ace:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ad2:	b292      	uxth	r2, r2
 8002ad4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ad6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002ada:	4613      	mov	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	4413      	add	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	7b1b      	ldrb	r3, [r3, #12]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d122      	bne.n	8002b3a <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	3306      	adds	r3, #6
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	4413      	add	r3, r2
 8002b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b16:	881b      	ldrh	r3, [r3, #0]
 8002b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b1c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002b1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8087 	beq.w	8002c34 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6818      	ldr	r0, [r3, #0]
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	6959      	ldr	r1, [r3, #20]
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	88da      	ldrh	r2, [r3, #6]
 8002b32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002b34:	f004 fc85 	bl	8007442 <USB_ReadPMA>
 8002b38:	e07c      	b.n	8002c34 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	78db      	ldrb	r3, [r3, #3]
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d108      	bne.n	8002b54 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002b44:	461a      	mov	r2, r3
 8002b46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f927 	bl	8002d9c <HAL_PCD_EP_DB_Receive>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002b52:	e06f      	b.n	8002c34 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	881b      	ldrh	r3, [r3, #0]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	441a      	add	r2, r3
 8002b7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d021      	beq.n	8002bf2 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	461a      	mov	r2, r3
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bd6:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002bd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d02a      	beq.n	8002c34 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	6959      	ldr	r1, [r3, #20]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	891a      	ldrh	r2, [r3, #8]
 8002bea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002bec:	f004 fc29 	bl	8007442 <USB_ReadPMA>
 8002bf0:	e020      	b.n	8002c34 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	3306      	adds	r3, #6
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6812      	ldr	r2, [r2, #0]
 8002c0e:	4413      	add	r3, r2
 8002c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c28:	6959      	ldr	r1, [r3, #20]
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	895a      	ldrh	r2, [r3, #10]
 8002c2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c30:	f004 fc07 	bl	8007442 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c3a:	441a      	add	r2, r3
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	695a      	ldr	r2, [r3, #20]
 8002c44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002c46:	441a      	add	r2, r3
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d004      	beq.n	8002c5e <PCD_EP_ISR_Handler+0x4c2>
 8002c54:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d206      	bcs.n	8002c6c <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f006 f9d5 	bl	8009014 <HAL_PCD_DataOutStageCallback>
 8002c6a:	e005      	b.n	8002c78 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fc2a 	bl	80054cc <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d07e      	beq.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4413      	add	r3, r2
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	4413      	add	r3, r2
 8002c94:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	881b      	ldrh	r3, [r3, #0]
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb0:	843b      	strh	r3, [r7, #32]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	441a      	add	r2, r3
 8002cc0:	8c3b      	ldrh	r3, [r7, #32]
 8002cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd0:	78db      	ldrb	r3, [r3, #3]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d00c      	beq.n	8002cf0 <PCD_EP_ISR_Handler+0x554>
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	78db      	ldrb	r3, [r3, #3]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d146      	bne.n	8002d74 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002ce6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d141      	bne.n	8002d74 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	4413      	add	r3, r2
 8002d04:	3302      	adds	r3, #2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d18:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	699a      	ldr	r2, [r3, #24]
 8002d1e:	8bfb      	ldrh	r3, [r7, #30]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d906      	bls.n	8002d32 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	8bfb      	ldrh	r3, [r7, #30]
 8002d2a:	1ad2      	subs	r2, r2, r3
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	e002      	b.n	8002d38 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d106      	bne.n	8002d4e <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	4619      	mov	r1, r3
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f006 f97f 	bl	800904a <HAL_PCD_DataInStageCallback>
 8002d4c:	e018      	b.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	8bfb      	ldrh	r3, [r7, #30]
 8002d54:	441a      	add	r2, r3
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	8bfb      	ldrh	r3, [r7, #30]
 8002d60:	441a      	add	r2, r3
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fbad 	bl	80054cc <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002d72:	e005      	b.n	8002d80 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002d74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d76:	461a      	mov	r2, r3
 8002d78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f91b 	bl	8002fb6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	b21b      	sxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f6ff ad0a 	blt.w	80027a6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3738      	adds	r7, #56	; 0x38
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	4613      	mov	r3, r2
 8002da8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002daa:	88fb      	ldrh	r3, [r7, #6]
 8002dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d07e      	beq.n	8002eb2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3302      	adds	r3, #2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ddc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	8b7b      	ldrh	r3, [r7, #26]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d306      	bcc.n	8002df6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	699a      	ldr	r2, [r3, #24]
 8002dec:	8b7b      	ldrh	r3, [r7, #26]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	619a      	str	r2, [r3, #24]
 8002df4:	e002      	b.n	8002dfc <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d123      	bne.n	8002e4c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	4413      	add	r3, r2
 8002e12:	881b      	ldrh	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1e:	833b      	strh	r3, [r7, #24]
 8002e20:	8b3b      	ldrh	r3, [r7, #24]
 8002e22:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002e26:	833b      	strh	r3, [r7, #24]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	8b3b      	ldrh	r3, [r7, #24]
 8002e38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e4c:	88fb      	ldrh	r3, [r7, #6]
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01f      	beq.n	8002e96 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e70:	82fb      	strh	r3, [r7, #22]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	441a      	add	r2, r3
 8002e80:	8afb      	ldrh	r3, [r7, #22]
 8002e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002e96:	8b7b      	ldrh	r3, [r7, #26]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8087 	beq.w	8002fac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6959      	ldr	r1, [r3, #20]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	891a      	ldrh	r2, [r3, #8]
 8002eaa:	8b7b      	ldrh	r3, [r7, #26]
 8002eac:	f004 fac9 	bl	8007442 <USB_ReadPMA>
 8002eb0:	e07c      	b.n	8002fac <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002eda:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	699a      	ldr	r2, [r3, #24]
 8002ee0:	8b7b      	ldrh	r3, [r7, #26]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d306      	bcc.n	8002ef4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	8b7b      	ldrh	r3, [r7, #26]
 8002eec:	1ad2      	subs	r2, r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	619a      	str	r2, [r3, #24]
 8002ef2:	e002      	b.n	8002efa <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d123      	bne.n	8002f4a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1c:	83fb      	strh	r3, [r7, #30]
 8002f1e:	8bfb      	ldrh	r3, [r7, #30]
 8002f20:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f24:	83fb      	strh	r3, [r7, #30]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	441a      	add	r2, r3
 8002f34:	8bfb      	ldrh	r3, [r7, #30]
 8002f36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002f4a:	88fb      	ldrh	r3, [r7, #6]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d11f      	bne.n	8002f94 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	83bb      	strh	r3, [r7, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	441a      	add	r2, r3
 8002f7e:	8bbb      	ldrh	r3, [r7, #28]
 8002f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002f94:	8b7b      	ldrh	r3, [r7, #26]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6818      	ldr	r0, [r3, #0]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6959      	ldr	r1, [r3, #20]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	895a      	ldrh	r2, [r3, #10]
 8002fa6:	8b7b      	ldrh	r3, [r7, #26]
 8002fa8:	f004 fa4b 	bl	8007442 <USB_ReadPMA>
    }
  }

  return count;
 8002fac:	8b7b      	ldrh	r3, [r7, #26]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3720      	adds	r7, #32
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002fb6:	b580      	push	{r7, lr}
 8002fb8:	b0a2      	sub	sp, #136	; 0x88
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 81c7 	beq.w	800335e <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	461a      	mov	r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	4413      	add	r3, r2
 8002fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ff8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003004:	429a      	cmp	r2, r3
 8003006:	d907      	bls.n	8003018 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	699a      	ldr	r2, [r3, #24]
 800300c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	619a      	str	r2, [r3, #24]
 8003016:	e002      	b.n	800301e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2200      	movs	r2, #0
 800301c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f040 80b9 	bne.w	800319a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	785b      	ldrb	r3, [r3, #1]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d126      	bne.n	800307e <HAL_PCD_EP_DB_Transmit+0xc8>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800303e:	b29b      	uxth	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	4413      	add	r3, r2
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	011a      	lsls	r2, r3, #4
 800304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003050:	4413      	add	r3, r2
 8003052:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	881b      	ldrh	r3, [r3, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003062:	b29a      	uxth	r2, r3
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	881b      	ldrh	r3, [r3, #0]
 800306c:	b29b      	uxth	r3, r3
 800306e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003076:	b29a      	uxth	r2, r3
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	801a      	strh	r2, [r3, #0]
 800307c:	e01a      	b.n	80030b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	785b      	ldrb	r3, [r3, #1]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d116      	bne.n	80030b4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	4413      	add	r3, r2
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	011a      	lsls	r2, r3, #4
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	4413      	add	r3, r2
 80030a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80030ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	2200      	movs	r2, #0
 80030b2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	785b      	ldrb	r3, [r3, #1]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d126      	bne.n	8003110 <HAL_PCD_EP_DB_Transmit+0x15a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4413      	add	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	011a      	lsls	r2, r3, #4
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	801a      	strh	r2, [r3, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003108:	b29a      	uxth	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	801a      	strh	r2, [r3, #0]
 800310e:	e017      	b.n	8003140 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	785b      	ldrb	r3, [r3, #1]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d113      	bne.n	8003140 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003120:	b29b      	uxth	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	4413      	add	r3, r2
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	011a      	lsls	r2, r3, #4
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	4413      	add	r3, r2
 8003134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	2200      	movs	r2, #0
 800313e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4619      	mov	r1, r3
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f005 ff7f 	bl	800904a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 82d4 	beq.w	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	461a      	mov	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003172:	827b      	strh	r3, [r7, #18]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	461a      	mov	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	441a      	add	r2, r3
 8003182:	8a7b      	ldrh	r3, [r7, #18]
 8003184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800318c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003194:	b29b      	uxth	r3, r3
 8003196:	8013      	strh	r3, [r2, #0]
 8003198:	e2b2      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d021      	beq.n	80031e8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	881b      	ldrh	r3, [r3, #0]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80031d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	f040 8286 	bne.w	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	695a      	ldr	r2, [r3, #20]
 80031f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031fc:	441a      	add	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800320a:	441a      	add	r2, r3
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d309      	bcc.n	8003230 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003228:	1ad2      	subs	r2, r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	621a      	str	r2, [r3, #32]
 800322e:	e015      	b.n	800325c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d107      	bne.n	8003248 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8003238:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800323c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003246:	e009      	b.n	800325c <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	785b      	ldrb	r3, [r3, #1]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d155      	bne.n	8003310 <HAL_PCD_EP_DB_Transmit+0x35a>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	63bb      	str	r3, [r7, #56]	; 0x38
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003272:	b29b      	uxth	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003278:	4413      	add	r3, r2
 800327a:	63bb      	str	r3, [r7, #56]	; 0x38
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	011a      	lsls	r2, r3, #4
 8003282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003284:	4413      	add	r3, r2
 8003286:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
 800328c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328e:	2b00      	cmp	r3, #0
 8003290:	d112      	bne.n	80032b8 <HAL_PCD_EP_DB_Transmit+0x302>
 8003292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29b      	uxth	r3, r3
 8003298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800329c:	b29a      	uxth	r2, r3
 800329e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a0:	801a      	strh	r2, [r3, #0]
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e047      	b.n	8003348 <HAL_PCD_EP_DB_Transmit+0x392>
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	2b3e      	cmp	r3, #62	; 0x3e
 80032bc:	d811      	bhi.n	80032e2 <HAL_PCD_EP_DB_Transmit+0x32c>
 80032be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c0:	085b      	lsrs	r3, r3, #1
 80032c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_PCD_EP_DB_Transmit+0x31e>
 80032ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d0:	3301      	adds	r3, #1
 80032d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80032d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	029b      	lsls	r3, r3, #10
 80032da:	b29a      	uxth	r2, r3
 80032dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032de:	801a      	strh	r2, [r3, #0]
 80032e0:	e032      	b.n	8003348 <HAL_PCD_EP_DB_Transmit+0x392>
 80032e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e4:	095b      	lsrs	r3, r3, #5
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	f003 031f 	and.w	r3, r3, #31
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d102      	bne.n	80032f8 <HAL_PCD_EP_DB_Transmit+0x342>
 80032f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f4:	3b01      	subs	r3, #1
 80032f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80032f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	029b      	lsls	r3, r3, #10
 80032fe:	b29b      	uxth	r3, r3
 8003300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003308:	b29a      	uxth	r2, r3
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e01b      	b.n	8003348 <HAL_PCD_EP_DB_Transmit+0x392>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	785b      	ldrb	r3, [r3, #1]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d117      	bne.n	8003348 <HAL_PCD_EP_DB_Transmit+0x392>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	643b      	str	r3, [r7, #64]	; 0x40
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800332c:	4413      	add	r3, r2
 800332e:	643b      	str	r3, [r7, #64]	; 0x40
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	011a      	lsls	r2, r3, #4
 8003336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003338:	4413      	add	r3, r2
 800333a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800333e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	b29a      	uxth	r2, r3
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6959      	ldr	r1, [r3, #20]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	891a      	ldrh	r2, [r3, #8]
 8003354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003356:	b29b      	uxth	r3, r3
 8003358:	f004 f82e 	bl	80073b8 <USB_WritePMA>
 800335c:	e1d0      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003366:	b29b      	uxth	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	3306      	adds	r3, #6
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	6812      	ldr	r2, [r2, #0]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003386:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	699a      	ldr	r2, [r3, #24]
 800338e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003392:	429a      	cmp	r2, r3
 8003394:	d307      	bcc.n	80033a6 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	619a      	str	r2, [r3, #24]
 80033a4:	e002      	b.n	80033ac <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	2200      	movs	r2, #0
 80033aa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f040 80c4 	bne.w	800353e <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d126      	bne.n	800340c <HAL_PCD_EP_DB_Transmit+0x456>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d2:	4413      	add	r3, r2
 80033d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	011a      	lsls	r2, r3, #4
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	4413      	add	r3, r2
 80033e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80033e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033f8:	881b      	ldrh	r3, [r3, #0]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003404:	b29a      	uxth	r2, r3
 8003406:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003408:	801a      	strh	r2, [r3, #0]
 800340a:	e01a      	b.n	8003442 <HAL_PCD_EP_DB_Transmit+0x48c>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	785b      	ldrb	r3, [r3, #1]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d116      	bne.n	8003442 <HAL_PCD_EP_DB_Transmit+0x48c>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	677b      	str	r3, [r7, #116]	; 0x74
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003422:	b29b      	uxth	r3, r3
 8003424:	461a      	mov	r2, r3
 8003426:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003428:	4413      	add	r3, r2
 800342a:	677b      	str	r3, [r7, #116]	; 0x74
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	011a      	lsls	r2, r3, #4
 8003432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003434:	4413      	add	r3, r2
 8003436:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800343a:	673b      	str	r3, [r7, #112]	; 0x70
 800343c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800343e:	2200      	movs	r2, #0
 8003440:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	67bb      	str	r3, [r7, #120]	; 0x78
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	785b      	ldrb	r3, [r3, #1]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d12f      	bne.n	80034b0 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003460:	b29b      	uxth	r3, r3
 8003462:	461a      	mov	r2, r3
 8003464:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003468:	4413      	add	r3, r2
 800346a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	011a      	lsls	r2, r3, #4
 8003474:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003478:	4413      	add	r3, r2
 800347a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29b      	uxth	r3, r3
 800348a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800348e:	b29a      	uxth	r2, r3
 8003490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003494:	801a      	strh	r2, [r3, #0]
 8003496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ac:	801a      	strh	r2, [r3, #0]
 80034ae:	e017      	b.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x52a>
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d113      	bne.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x52a>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034c6:	4413      	add	r3, r2
 80034c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	011a      	lsls	r2, r3, #4
 80034d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d2:	4413      	add	r3, r2
 80034d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80034d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034dc:	2200      	movs	r2, #0
 80034de:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4619      	mov	r1, r3
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f005 fdaf 	bl	800904a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f040 8104 	bne.w	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800350e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003512:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800352c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003530:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003538:	b29b      	uxth	r3, r3
 800353a:	8013      	strh	r3, [r2, #0]
 800353c:	e0e0      	b.n	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d121      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	441a      	add	r2, r3
 8003574:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800357c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003580:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003588:	b29b      	uxth	r3, r3
 800358a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003592:	2b01      	cmp	r3, #1
 8003594:	f040 80b4 	bne.w	8003700 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	695a      	ldr	r2, [r3, #20]
 800359c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a0:	441a      	add	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	69da      	ldr	r2, [r3, #28]
 80035aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035ae:	441a      	add	r2, r3
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6a1a      	ldr	r2, [r3, #32]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d309      	bcc.n	80035d4 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	6a1a      	ldr	r2, [r3, #32]
 80035ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035cc:	1ad2      	subs	r2, r2, r3
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	621a      	str	r2, [r3, #32]
 80035d2:	e015      	b.n	8003600 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80035dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80035ea:	e009      	b.n	8003600 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2200      	movs	r2, #0
 80035f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	667b      	str	r3, [r7, #100]	; 0x64
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	785b      	ldrb	r3, [r3, #1]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d155      	bne.n	80036ba <HAL_PCD_EP_DB_Transmit+0x704>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800361c:	b29b      	uxth	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003622:	4413      	add	r3, r2
 8003624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	011a      	lsls	r2, r3, #4
 800362c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800362e:	4413      	add	r3, r2
 8003630:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003634:	65bb      	str	r3, [r7, #88]	; 0x58
 8003636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003638:	2b00      	cmp	r3, #0
 800363a:	d112      	bne.n	8003662 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800363c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	b29b      	uxth	r3, r3
 8003642:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003646:	b29a      	uxth	r2, r3
 8003648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364a:	801a      	strh	r2, [r3, #0]
 800364c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364e:	881b      	ldrh	r3, [r3, #0]
 8003650:	b29b      	uxth	r3, r3
 8003652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365a:	b29a      	uxth	r2, r3
 800365c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800365e:	801a      	strh	r2, [r3, #0]
 8003660:	e044      	b.n	80036ec <HAL_PCD_EP_DB_Transmit+0x736>
 8003662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003664:	2b3e      	cmp	r3, #62	; 0x3e
 8003666:	d811      	bhi.n	800368c <HAL_PCD_EP_DB_Transmit+0x6d6>
 8003668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	657b      	str	r3, [r7, #84]	; 0x54
 800366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800367a:	3301      	adds	r3, #1
 800367c:	657b      	str	r3, [r7, #84]	; 0x54
 800367e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003680:	b29b      	uxth	r3, r3
 8003682:	029b      	lsls	r3, r3, #10
 8003684:	b29a      	uxth	r2, r3
 8003686:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e02f      	b.n	80036ec <HAL_PCD_EP_DB_Transmit+0x736>
 800368c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	657b      	str	r3, [r7, #84]	; 0x54
 8003692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800369c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800369e:	3b01      	subs	r3, #1
 80036a0:	657b      	str	r3, [r7, #84]	; 0x54
 80036a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	e018      	b.n	80036ec <HAL_PCD_EP_DB_Transmit+0x736>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	785b      	ldrb	r3, [r3, #1]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d114      	bne.n	80036ec <HAL_PCD_EP_DB_Transmit+0x736>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	461a      	mov	r2, r3
 80036ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036d0:	4413      	add	r3, r2
 80036d2:	667b      	str	r3, [r7, #100]	; 0x64
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	011a      	lsls	r2, r3, #4
 80036da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036dc:	4413      	add	r3, r2
 80036de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80036e2:	663b      	str	r3, [r7, #96]	; 0x60
 80036e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	6959      	ldr	r1, [r3, #20]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	895a      	ldrh	r2, [r3, #10]
 80036f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f003 fe5c 	bl	80073b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	461a      	mov	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	b29b      	uxth	r3, r3
 8003712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371a:	823b      	strh	r3, [r7, #16]
 800371c:	8a3b      	ldrh	r3, [r7, #16]
 800371e:	f083 0310 	eor.w	r3, r3, #16
 8003722:	823b      	strh	r3, [r7, #16]
 8003724:	8a3b      	ldrh	r3, [r7, #16]
 8003726:	f083 0320 	eor.w	r3, r3, #32
 800372a:	823b      	strh	r3, [r7, #16]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	441a      	add	r2, r3
 800373a:	8a3b      	ldrh	r3, [r7, #16]
 800373c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800374c:	b29b      	uxth	r3, r3
 800374e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3788      	adds	r7, #136	; 0x88
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800375a:	b480      	push	{r7}
 800375c:	b087      	sub	sp, #28
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	607b      	str	r3, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	817b      	strh	r3, [r7, #10]
 8003768:	4613      	mov	r3, r2
 800376a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800376c:	897b      	ldrh	r3, [r7, #10]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003778:	897b      	ldrh	r3, [r7, #10]
 800377a:	f003 0307 	and.w	r3, r3, #7
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4413      	add	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e009      	b.n	80037a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003790:	897a      	ldrh	r2, [r7, #10]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	4413      	add	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80037a4:	893b      	ldrh	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d107      	bne.n	80037ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	80da      	strh	r2, [r3, #6]
 80037b8:	e00b      	b.n	80037d2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2201      	movs	r2, #1
 80037be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	0c1b      	lsrs	r3, r3, #16
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
	...

080037e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e272      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 8087 	beq.w	800390e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003800:	4b92      	ldr	r3, [pc, #584]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 030c 	and.w	r3, r3, #12
 8003808:	2b04      	cmp	r3, #4
 800380a:	d00c      	beq.n	8003826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800380c:	4b8f      	ldr	r3, [pc, #572]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d112      	bne.n	800383e <HAL_RCC_OscConfig+0x5e>
 8003818:	4b8c      	ldr	r3, [pc, #560]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003824:	d10b      	bne.n	800383e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003826:	4b89      	ldr	r3, [pc, #548]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d06c      	beq.n	800390c <HAL_RCC_OscConfig+0x12c>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d168      	bne.n	800390c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e24c      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x76>
 8003848:	4b80      	ldr	r3, [pc, #512]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a7f      	ldr	r2, [pc, #508]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800384e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	e02e      	b.n	80038b4 <HAL_RCC_OscConfig+0xd4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x98>
 800385e:	4b7b      	ldr	r3, [pc, #492]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a7a      	ldr	r2, [pc, #488]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	4b78      	ldr	r3, [pc, #480]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a77      	ldr	r2, [pc, #476]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e01d      	b.n	80038b4 <HAL_RCC_OscConfig+0xd4>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003880:	d10c      	bne.n	800389c <HAL_RCC_OscConfig+0xbc>
 8003882:	4b72      	ldr	r3, [pc, #456]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a71      	ldr	r2, [pc, #452]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	4b6f      	ldr	r3, [pc, #444]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6e      	ldr	r2, [pc, #440]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	e00b      	b.n	80038b4 <HAL_RCC_OscConfig+0xd4>
 800389c:	4b6b      	ldr	r3, [pc, #428]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a6a      	ldr	r2, [pc, #424]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80038a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	4b68      	ldr	r3, [pc, #416]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a67      	ldr	r2, [pc, #412]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d013      	beq.n	80038e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fd fff4 	bl	80018a8 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c4:	f7fd fff0 	bl	80018a8 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b64      	cmp	r3, #100	; 0x64
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e200      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038d6:	4b5d      	ldr	r3, [pc, #372]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0xe4>
 80038e2:	e014      	b.n	800390e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fd ffe0 	bl	80018a8 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fd ffdc 	bl	80018a8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1ec      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038fe:	4b53      	ldr	r3, [pc, #332]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x10c>
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800390c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d063      	beq.n	80039e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800391a:	4b4c      	ldr	r3, [pc, #304]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 030c 	and.w	r3, r3, #12
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00b      	beq.n	800393e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003926:	4b49      	ldr	r3, [pc, #292]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b08      	cmp	r3, #8
 8003930:	d11c      	bne.n	800396c <HAL_RCC_OscConfig+0x18c>
 8003932:	4b46      	ldr	r3, [pc, #280]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d116      	bne.n	800396c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800393e:	4b43      	ldr	r3, [pc, #268]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d005      	beq.n	8003956 <HAL_RCC_OscConfig+0x176>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d001      	beq.n	8003956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e1c0      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b3d      	ldr	r3, [pc, #244]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4939      	ldr	r1, [pc, #228]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003966:	4313      	orrs	r3, r2
 8003968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	e03a      	b.n	80039e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d020      	beq.n	80039b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003974:	4b36      	ldr	r3, [pc, #216]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fd ff95 	bl	80018a8 <HAL_GetTick>
 800397e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003982:	f7fd ff91 	bl	80018a8 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e1a1      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a0:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	695b      	ldr	r3, [r3, #20]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	4927      	ldr	r1, [pc, #156]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	600b      	str	r3, [r1, #0]
 80039b4:	e015      	b.n	80039e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_RCC_OscConfig+0x270>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039bc:	f7fd ff74 	bl	80018a8 <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c2:	e008      	b.n	80039d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039c4:	f7fd ff70 	bl	80018a8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e180      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039d6:	4b1d      	ldr	r3, [pc, #116]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1f0      	bne.n	80039c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d03a      	beq.n	8003a64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d019      	beq.n	8003a2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039f6:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <HAL_RCC_OscConfig+0x274>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039fc:	f7fd ff54 	bl	80018a8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a04:	f7fd ff50 	bl	80018a8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e160      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a16:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <HAL_RCC_OscConfig+0x26c>)
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003a22:	2001      	movs	r0, #1
 8003a24:	f000 faa6 	bl	8003f74 <RCC_Delay>
 8003a28:	e01c      	b.n	8003a64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_OscConfig+0x274>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fd ff3a 	bl	80018a8 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a36:	e00f      	b.n	8003a58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a38:	f7fd ff36 	bl	80018a8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b02      	cmp	r3, #2
 8003a44:	d908      	bls.n	8003a58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e146      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
 8003a4a:	bf00      	nop
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	42420000 	.word	0x42420000
 8003a54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a58:	4b92      	ldr	r3, [pc, #584]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e9      	bne.n	8003a38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80a6 	beq.w	8003bbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a76:	4b8b      	ldr	r3, [pc, #556]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10d      	bne.n	8003a9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4a87      	ldr	r2, [pc, #540]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	61d3      	str	r3, [r2, #28]
 8003a8e:	4b85      	ldr	r3, [pc, #532]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a9e:	4b82      	ldr	r3, [pc, #520]	; (8003ca8 <HAL_RCC_OscConfig+0x4c8>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d118      	bne.n	8003adc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aaa:	4b7f      	ldr	r3, [pc, #508]	; (8003ca8 <HAL_RCC_OscConfig+0x4c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a7e      	ldr	r2, [pc, #504]	; (8003ca8 <HAL_RCC_OscConfig+0x4c8>)
 8003ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ab6:	f7fd fef7 	bl	80018a8 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003abe:	f7fd fef3 	bl	80018a8 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b64      	cmp	r3, #100	; 0x64
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e103      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad0:	4b75      	ldr	r3, [pc, #468]	; (8003ca8 <HAL_RCC_OscConfig+0x4c8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d106      	bne.n	8003af2 <HAL_RCC_OscConfig+0x312>
 8003ae4:	4b6f      	ldr	r3, [pc, #444]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4a6e      	ldr	r2, [pc, #440]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	6213      	str	r3, [r2, #32]
 8003af0:	e02d      	b.n	8003b4e <HAL_RCC_OscConfig+0x36e>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x334>
 8003afa:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a69      	ldr	r2, [pc, #420]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6213      	str	r3, [r2, #32]
 8003b06:	4b67      	ldr	r3, [pc, #412]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	4a66      	ldr	r2, [pc, #408]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	f023 0304 	bic.w	r3, r3, #4
 8003b10:	6213      	str	r3, [r2, #32]
 8003b12:	e01c      	b.n	8003b4e <HAL_RCC_OscConfig+0x36e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b05      	cmp	r3, #5
 8003b1a:	d10c      	bne.n	8003b36 <HAL_RCC_OscConfig+0x356>
 8003b1c:	4b61      	ldr	r3, [pc, #388]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	4a60      	ldr	r2, [pc, #384]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b22:	f043 0304 	orr.w	r3, r3, #4
 8003b26:	6213      	str	r3, [r2, #32]
 8003b28:	4b5e      	ldr	r3, [pc, #376]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	4a5d      	ldr	r2, [pc, #372]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	6213      	str	r3, [r2, #32]
 8003b34:	e00b      	b.n	8003b4e <HAL_RCC_OscConfig+0x36e>
 8003b36:	4b5b      	ldr	r3, [pc, #364]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b38:	6a1b      	ldr	r3, [r3, #32]
 8003b3a:	4a5a      	ldr	r2, [pc, #360]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	6213      	str	r3, [r2, #32]
 8003b42:	4b58      	ldr	r3, [pc, #352]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f023 0304 	bic.w	r3, r3, #4
 8003b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d015      	beq.n	8003b82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b56:	f7fd fea7 	bl	80018a8 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5e:	f7fd fea3 	bl	80018a8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e0b1      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	4b4b      	ldr	r3, [pc, #300]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0ee      	beq.n	8003b5e <HAL_RCC_OscConfig+0x37e>
 8003b80:	e014      	b.n	8003bac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fd fe91 	bl	80018a8 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd fe8d 	bl	80018a8 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e09b      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba0:	4b40      	ldr	r3, [pc, #256]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1ee      	bne.n	8003b8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d105      	bne.n	8003bbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb2:	4b3c      	ldr	r3, [pc, #240]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f000 8087 	beq.w	8003cd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc8:	4b36      	ldr	r3, [pc, #216]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d061      	beq.n	8003c98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d146      	bne.n	8003c6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bdc:	4b33      	ldr	r3, [pc, #204]	; (8003cac <HAL_RCC_OscConfig+0x4cc>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be2:	f7fd fe61 	bl	80018a8 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bea:	f7fd fe5d 	bl	80018a8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e06d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfc:	4b29      	ldr	r3, [pc, #164]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d108      	bne.n	8003c24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4921      	ldr	r1, [pc, #132]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c24:	4b1f      	ldr	r3, [pc, #124]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a19      	ldr	r1, [r3, #32]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	430b      	orrs	r3, r1
 8003c36:	491b      	ldr	r1, [pc, #108]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <HAL_RCC_OscConfig+0x4cc>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fd fe31 	bl	80018a8 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fd fe2d 	bl	80018a8 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e03d      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x46a>
 8003c68:	e035      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCC_OscConfig+0x4cc>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd fe1a 	bl	80018a8 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fd fe16 	bl	80018a8 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e026      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HAL_RCC_OscConfig+0x4c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x498>
 8003c96:	e01e      	b.n	8003cd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e019      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_OscConfig+0x500>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d001      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000

08003ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0d0      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d910      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 0207 	bic.w	r2, r3, #7
 8003d0e:	4965      	ldr	r1, [pc, #404]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d16:	4b63      	ldr	r3, [pc, #396]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0307 	and.w	r3, r3, #7
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0b8      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d40:	4b59      	ldr	r3, [pc, #356]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	4a58      	ldr	r2, [pc, #352]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d58:	4b53      	ldr	r3, [pc, #332]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4a52      	ldr	r2, [pc, #328]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b50      	ldr	r3, [pc, #320]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	494d      	ldr	r1, [pc, #308]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d040      	beq.n	8003e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d8a:	4b47      	ldr	r3, [pc, #284]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d115      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e07f      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da2:	4b41      	ldr	r3, [pc, #260]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d109      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e073      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0302 	and.w	r3, r3, #2
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e06b      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dc2:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f023 0203 	bic.w	r2, r3, #3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4936      	ldr	r1, [pc, #216]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd4:	f7fd fd68 	bl	80018a8 <HAL_GetTick>
 8003dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dda:	e00a      	b.n	8003df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ddc:	f7fd fd64 	bl	80018a8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d901      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e053      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	4b2d      	ldr	r3, [pc, #180]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 020c 	and.w	r2, r3, #12
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d1eb      	bne.n	8003ddc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e04:	4b27      	ldr	r3, [pc, #156]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	683a      	ldr	r2, [r7, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d210      	bcs.n	8003e34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 0207 	bic.w	r2, r3, #7
 8003e1a:	4922      	ldr	r1, [pc, #136]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	683a      	ldr	r2, [r7, #0]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d001      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e032      	b.n	8003e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e40:	4b19      	ldr	r3, [pc, #100]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4916      	ldr	r1, [pc, #88]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e5e:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	490e      	ldr	r1, [pc, #56]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e72:	f000 f821 	bl	8003eb8 <HAL_RCC_GetSysClockFreq>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	091b      	lsrs	r3, r3, #4
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	490a      	ldr	r1, [pc, #40]	; (8003eac <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	5ccb      	ldrb	r3, [r1, r3]
 8003e86:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8003e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fd fcc6 	bl	8001824 <HAL_InitTick>

  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40022000 	.word	0x40022000
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	0800a198 	.word	0x0800a198
 8003eb0:	20000000 	.word	0x20000000
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eb8:	b490      	push	{r4, r7}
 8003eba:	b08a      	sub	sp, #40	; 0x28
 8003ebc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <HAL_RCC_GetSysClockFreq+0xac>)
 8003ec0:	1d3c      	adds	r4, r7, #4
 8003ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003ec8:	f240 2301 	movw	r3, #513	; 0x201
 8003ecc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	61fb      	str	r3, [r7, #28]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ee2:	4b21      	ldr	r3, [pc, #132]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d002      	beq.n	8003ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ef2:	2b08      	cmp	r3, #8
 8003ef4:	d003      	beq.n	8003efe <HAL_RCC_GetSysClockFreq+0x46>
 8003ef6:	e02b      	b.n	8003f50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ef8:	4b1c      	ldr	r3, [pc, #112]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003efa:	623b      	str	r3, [r7, #32]
      break;
 8003efc:	e02b      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	0c9b      	lsrs	r3, r3, #18
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	3328      	adds	r3, #40	; 0x28
 8003f08:	443b      	add	r3, r7
 8003f0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003f0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d012      	beq.n	8003f40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f1a:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	0c5b      	lsrs	r3, r3, #17
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	3328      	adds	r3, #40	; 0x28
 8003f26:	443b      	add	r3, r7
 8003f28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003f2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	4a0e      	ldr	r2, [pc, #56]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f32:	fb03 f202 	mul.w	r2, r3, r2
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f3e:	e004      	b.n	8003f4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4a0b      	ldr	r2, [pc, #44]	; (8003f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	623b      	str	r3, [r7, #32]
      break;
 8003f4e:	e002      	b.n	8003f56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f52:	623b      	str	r3, [r7, #32]
      break;
 8003f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f56:	6a3b      	ldr	r3, [r7, #32]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bc90      	pop	{r4, r7}
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	0800a144 	.word	0x0800a144
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	007a1200 	.word	0x007a1200
 8003f70:	003d0900 	.word	0x003d0900

08003f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <RCC_Delay+0x34>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <RCC_Delay+0x38>)
 8003f82:	fba2 2303 	umull	r2, r3, r2, r3
 8003f86:	0a5b      	lsrs	r3, r3, #9
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f90:	bf00      	nop
  }
  while (Delay --);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	1e5a      	subs	r2, r3, #1
 8003f96:	60fa      	str	r2, [r7, #12]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1f9      	bne.n	8003f90 <RCC_Delay+0x1c>
}
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	20000000 	.word	0x20000000
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d07d      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd0:	4b4f      	ldr	r3, [pc, #316]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10d      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fdc:	4b4c      	ldr	r3, [pc, #304]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fde:	69db      	ldr	r3, [r3, #28]
 8003fe0:	4a4b      	ldr	r2, [pc, #300]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	61d3      	str	r3, [r2, #28]
 8003fe8:	4b49      	ldr	r3, [pc, #292]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fea:	69db      	ldr	r3, [r3, #28]
 8003fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff8:	4b46      	ldr	r3, [pc, #280]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d118      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004004:	4b43      	ldr	r3, [pc, #268]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a42      	ldr	r2, [pc, #264]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800400a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004010:	f7fd fc4a 	bl	80018a8 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004016:	e008      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004018:	f7fd fc46 	bl	80018a8 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e06d      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402a:	4b3a      	ldr	r3, [pc, #232]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0f0      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004036:	4b36      	ldr	r3, [pc, #216]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800403e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d02e      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d027      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004054:	4b2e      	ldr	r3, [pc, #184]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800405e:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004060:	2201      	movs	r2, #1
 8004062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004064:	4b2c      	ldr	r3, [pc, #176]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800406a:	4a29      	ldr	r2, [pc, #164]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d014      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407a:	f7fd fc15 	bl	80018a8 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004080:	e00a      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004082:	f7fd fc11 	bl	80018a8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004090:	4293      	cmp	r3, r2
 8004092:	d901      	bls.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e036      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004098:	4b1d      	ldr	r3, [pc, #116]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d0ee      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a4:	4b1a      	ldr	r3, [pc, #104]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4917      	ldr	r1, [pc, #92]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4b14      	ldr	r3, [pc, #80]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040d4:	4b0e      	ldr	r3, [pc, #56]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	490b      	ldr	r1, [pc, #44]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0310 	and.w	r3, r3, #16
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040f2:	4b07      	ldr	r3, [pc, #28]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	4904      	ldr	r1, [pc, #16]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
 8004118:	42420440 	.word	0x42420440

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e076      	b.n	800421c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fa64 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1a      	lsrs	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f002 0204 	and.w	r2, r2, #4
 80041fa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69da      	ldr	r2, [r3, #28]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800420a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	603b      	str	r3, [r7, #0]
 8004230:	4613      	mov	r3, r2
 8004232:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800423e:	2b01      	cmp	r3, #1
 8004240:	d101      	bne.n	8004246 <HAL_SPI_Transmit+0x22>
 8004242:	2302      	movs	r3, #2
 8004244:	e126      	b.n	8004494 <HAL_SPI_Transmit+0x270>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800424e:	f7fd fb2b 	bl	80018a8 <HAL_GetTick>
 8004252:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004254:	88fb      	ldrh	r3, [r7, #6]
 8004256:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d002      	beq.n	800426a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004264:	2302      	movs	r3, #2
 8004266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004268:	e10b      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_SPI_Transmit+0x52>
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	77fb      	strb	r3, [r7, #31]
    goto error;
 800427a:	e102      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2203      	movs	r2, #3
 8004280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d10f      	bne.n	80042e4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d007      	beq.n	8004302 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430a:	d14b      	bne.n	80043a4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d002      	beq.n	800431a <HAL_SPI_Transmit+0xf6>
 8004314:	8afb      	ldrh	r3, [r7, #22]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d13e      	bne.n	8004398 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	881a      	ldrh	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800433e:	e02b      	b.n	8004398 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b02      	cmp	r3, #2
 800434c:	d112      	bne.n	8004374 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	881a      	ldrh	r2, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	1c9a      	adds	r2, r3, #2
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	86da      	strh	r2, [r3, #54]	; 0x36
 8004372:	e011      	b.n	8004398 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004374:	f7fd fa98 	bl	80018a8 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d803      	bhi.n	800438c <HAL_SPI_Transmit+0x168>
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800438a:	d102      	bne.n	8004392 <HAL_SPI_Transmit+0x16e>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d102      	bne.n	8004398 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004396:	e074      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1ce      	bne.n	8004340 <HAL_SPI_Transmit+0x11c>
 80043a2:	e04c      	b.n	800443e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <HAL_SPI_Transmit+0x18e>
 80043ac:	8afb      	ldrh	r3, [r7, #22]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d140      	bne.n	8004434 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	330c      	adds	r3, #12
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043d8:	e02c      	b.n	8004434 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d113      	bne.n	8004410 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	7812      	ldrb	r2, [r2, #0]
 80043f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	1c5a      	adds	r2, r3, #1
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b01      	subs	r3, #1
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	86da      	strh	r2, [r3, #54]	; 0x36
 800440e:	e011      	b.n	8004434 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004410:	f7fd fa4a 	bl	80018a8 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d803      	bhi.n	8004428 <HAL_SPI_Transmit+0x204>
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004426:	d102      	bne.n	800442e <HAL_SPI_Transmit+0x20a>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d102      	bne.n	8004434 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004432:	e026      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004438:	b29b      	uxth	r3, r3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1cd      	bne.n	80043da <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f000 fa62 	bl	800490c <SPI_EndRxTxTransaction>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004476:	2b00      	cmp	r3, #0
 8004478:	d002      	beq.n	8004480 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	77fb      	strb	r3, [r7, #31]
 800447e:	e000      	b.n	8004482 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004492:	7ffb      	ldrb	r3, [r7, #31]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3720      	adds	r7, #32
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08c      	sub	sp, #48	; 0x30
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80044aa:	2301      	movs	r3, #1
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d101      	bne.n	80044c2 <HAL_SPI_TransmitReceive+0x26>
 80044be:	2302      	movs	r3, #2
 80044c0:	e18a      	b.n	80047d8 <HAL_SPI_TransmitReceive+0x33c>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044ca:	f7fd f9ed 	bl	80018a8 <HAL_GetTick>
 80044ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80044e0:	887b      	ldrh	r3, [r7, #2]
 80044e2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d00f      	beq.n	800450c <HAL_SPI_TransmitReceive+0x70>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f2:	d107      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <HAL_SPI_TransmitReceive+0x68>
 80044fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004500:	2b04      	cmp	r3, #4
 8004502:	d003      	beq.n	800450c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004504:	2302      	movs	r3, #2
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800450a:	e15b      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <HAL_SPI_TransmitReceive+0x82>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_SPI_TransmitReceive+0x82>
 8004518:	887b      	ldrh	r3, [r7, #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004524:	e14e      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b04      	cmp	r3, #4
 8004530:	d003      	beq.n	800453a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2205      	movs	r2, #5
 8004536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	887a      	ldrh	r2, [r7, #2]
 800454a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	887a      	ldrh	r2, [r7, #2]
 8004550:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	887a      	ldrh	r2, [r7, #2]
 800455c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	887a      	ldrh	r2, [r7, #2]
 8004562:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d007      	beq.n	800458e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800458c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004596:	d178      	bne.n	800468a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x10a>
 80045a0:	8b7b      	ldrh	r3, [r7, #26]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d166      	bne.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	881a      	ldrh	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	1c9a      	adds	r2, r3, #2
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ca:	e053      	b.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d11b      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x176>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d016      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x176>
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d113      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	881a      	ldrh	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b01      	cmp	r3, #1
 800461e:	d119      	bne.n	8004654 <HAL_SPI_TransmitReceive+0x1b8>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004624:	b29b      	uxth	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d014      	beq.n	8004654 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	b292      	uxth	r2, r2
 8004636:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	1c9a      	adds	r2, r3, #2
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004650:	2301      	movs	r3, #1
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004654:	f7fd f928 	bl	80018a8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004660:	429a      	cmp	r2, r3
 8004662:	d807      	bhi.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
 8004664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800466a:	d003      	beq.n	8004674 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004672:	e0a7      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1a6      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x130>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1a1      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x130>
 8004688:	e07c      	b.n	8004784 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <HAL_SPI_TransmitReceive+0x1fc>
 8004692:	8b7b      	ldrh	r3, [r7, #26]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d16b      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	330c      	adds	r3, #12
 80046a2:	7812      	ldrb	r2, [r2, #0]
 80046a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	1c5a      	adds	r2, r3, #1
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046be:	e057      	b.n	8004770 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d11c      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x26c>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d017      	beq.n	8004708 <HAL_SPI_TransmitReceive+0x26c>
 80046d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d114      	bne.n	8004708 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	7812      	ldrb	r2, [r2, #0]
 80046ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	3b01      	subs	r3, #1
 80046fe:	b29a      	uxth	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0301 	and.w	r3, r3, #1
 8004712:	2b01      	cmp	r3, #1
 8004714:	d119      	bne.n	800474a <HAL_SPI_TransmitReceive+0x2ae>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d014      	beq.n	800474a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004746:	2301      	movs	r3, #1
 8004748:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800474a:	f7fd f8ad 	bl	80018a8 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004756:	429a      	cmp	r2, r3
 8004758:	d803      	bhi.n	8004762 <HAL_SPI_TransmitReceive+0x2c6>
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004760:	d102      	bne.n	8004768 <HAL_SPI_TransmitReceive+0x2cc>
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	2b00      	cmp	r3, #0
 8004766:	d103      	bne.n	8004770 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800476e:	e029      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004774:	b29b      	uxth	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1a2      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x224>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d19d      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f8bf 	bl	800490c <SPI_EndRxTxTransaction>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80047a0:	e010      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e000      	b.n	80047c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80047c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3730      	adds	r7, #48	; 0x30
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047ee:	b2db      	uxtb	r3, r3
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
	...

080047fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b088      	sub	sp, #32
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800480c:	f7fd f84c 	bl	80018a8 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4413      	add	r3, r2
 800481a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800481c:	f7fd f844 	bl	80018a8 <HAL_GetTick>
 8004820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004822:	4b39      	ldr	r3, [pc, #228]	; (8004908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	015b      	lsls	r3, r3, #5
 8004828:	0d1b      	lsrs	r3, r3, #20
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	fb02 f303 	mul.w	r3, r2, r3
 8004830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004832:	e054      	b.n	80048de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800483a:	d050      	beq.n	80048de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800483c:	f7fd f834 	bl	80018a8 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	69fa      	ldr	r2, [r7, #28]
 8004848:	429a      	cmp	r2, r3
 800484a:	d902      	bls.n	8004852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d13d      	bne.n	80048ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486a:	d111      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004874:	d004      	beq.n	8004880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800487e:	d107      	bne.n	8004890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004898:	d10f      	bne.n	80048ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e017      	b.n	80048fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	3b01      	subs	r3, #1
 80048dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4013      	ands	r3, r2
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d19b      	bne.n	8004834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3720      	adds	r7, #32
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	20000000 	.word	0x20000000

0800490c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff ff6a 	bl	80047fc <SPI_WaitFlagStateUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d007      	beq.n	800493e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e000      	b.n	8004940 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004948:	b084      	sub	sp, #16
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	f107 0014 	add.w	r0, r7, #20
 8004956:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	bc80      	pop	{r7}
 8004964:	b004      	add	sp, #16
 8004966:	4770      	bx	lr

08004968 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004978:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800497c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	b29a      	uxth	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800499c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80049a0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	b29b      	uxth	r3, r3
 80049ae:	43db      	mvns	r3, r3
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	4013      	ands	r3, r2
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	bc80      	pop	{r7}
 80049de:	4770      	bx	lr

080049e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049e0:	b084      	sub	sp, #16
 80049e2:	b480      	push	{r7}
 80049e4:	b083      	sub	sp, #12
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	f107 0014 	add.w	r0, r7, #20
 80049ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2201      	movs	r2, #1
 80049f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bc80      	pop	{r7}
 8004a1c:	b004      	add	sp, #16
 8004a1e:	4770      	bx	lr

08004a20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b09b      	sub	sp, #108	; 0x6c
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a46:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	78db      	ldrb	r3, [r3, #3]
 8004a4e:	2b03      	cmp	r3, #3
 8004a50:	d81f      	bhi.n	8004a92 <USB_ActivateEndpoint+0x72>
 8004a52:	a201      	add	r2, pc, #4	; (adr r2, 8004a58 <USB_ActivateEndpoint+0x38>)
 8004a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a58:	08004a69 	.word	0x08004a69
 8004a5c:	08004a85 	.word	0x08004a85
 8004a60:	08004a9b 	.word	0x08004a9b
 8004a64:	08004a77 	.word	0x08004a77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a70:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a74:	e012      	b.n	8004a9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a76:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a7e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a82:	e00b      	b.n	8004a9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a84:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a8c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a90:	e004      	b.n	8004a9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004a98:	e000      	b.n	8004a9c <USB_ActivateEndpoint+0x7c>
      break;
 8004a9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	441a      	add	r2, r3
 8004aa6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	441a      	add	r2, r3
 8004aec:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004af0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004af4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004afc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	7b1b      	ldrb	r3, [r3, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f040 8149 	bne.w	8004da0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 8084 	beq.w	8004c20 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	461a      	mov	r2, r3
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	011a      	lsls	r2, r3, #4
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b3a:	613b      	str	r3, [r7, #16]
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	88db      	ldrh	r3, [r3, #6]
 8004b40:	085b      	lsrs	r3, r3, #1
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	881b      	ldrh	r3, [r3, #0]
 8004b58:	81fb      	strh	r3, [r7, #14]
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01b      	beq.n	8004b9c <USB_ActivateEndpoint+0x17c>
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	81bb      	strh	r3, [r7, #12]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	89bb      	ldrh	r3, [r7, #12]
 8004b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	78db      	ldrb	r3, [r3, #3]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d020      	beq.n	8004be6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bba:	813b      	strh	r3, [r7, #8]
 8004bbc:	893b      	ldrh	r3, [r7, #8]
 8004bbe:	f083 0320 	eor.w	r3, r3, #32
 8004bc2:	813b      	strh	r3, [r7, #8]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	893b      	ldrh	r3, [r7, #8]
 8004bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]
 8004be4:	e27f      	b.n	80050e6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	881b      	ldrh	r3, [r3, #0]
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	897b      	ldrh	r3, [r7, #10]
 8004c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	8013      	strh	r3, [r2, #0]
 8004c1e:	e262      	b.n	80050e6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c30:	4413      	add	r3, r2
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	011a      	lsls	r2, r3, #4
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	88db      	ldrh	r3, [r3, #6]
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c52:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	461a      	mov	r2, r3
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	4413      	add	r3, r2
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	011a      	lsls	r2, r3, #4
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	4413      	add	r3, r2
 8004c72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c76:	623b      	str	r3, [r7, #32]
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d112      	bne.n	8004ca6 <USB_ActivateEndpoint+0x286>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	6a3b      	ldr	r3, [r7, #32]
 8004c92:	881b      	ldrh	r3, [r3, #0]
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	e02f      	b.n	8004d06 <USB_ActivateEndpoint+0x2e6>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b3e      	cmp	r3, #62	; 0x3e
 8004cac:	d813      	bhi.n	8004cd6 <USB_ActivateEndpoint+0x2b6>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	085b      	lsrs	r3, r3, #1
 8004cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <USB_ActivateEndpoint+0x2a8>
 8004cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	801a      	strh	r2, [r3, #0]
 8004cd4:	e017      	b.n	8004d06 <USB_ActivateEndpoint+0x2e6>
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d102      	bne.n	8004cf0 <USB_ActivateEndpoint+0x2d0>
 8004cea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cec:	3b01      	subs	r3, #1
 8004cee:	663b      	str	r3, [r7, #96]	; 0x60
 8004cf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	029b      	lsls	r3, r3, #10
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	6a3b      	ldr	r3, [r7, #32]
 8004d04:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	83fb      	strh	r3, [r7, #30]
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d01b      	beq.n	8004d56 <USB_ActivateEndpoint+0x336>
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d34:	83bb      	strh	r3, [r7, #28]
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	441a      	add	r2, r3
 8004d40:	8bbb      	ldrh	r3, [r7, #28]
 8004d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	881b      	ldrh	r3, [r3, #0]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6c:	837b      	strh	r3, [r7, #26]
 8004d6e:	8b7b      	ldrh	r3, [r7, #26]
 8004d70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d74:	837b      	strh	r3, [r7, #26]
 8004d76:	8b7b      	ldrh	r3, [r7, #26]
 8004d78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d7c:	837b      	strh	r3, [r7, #26]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	441a      	add	r2, r3
 8004d88:	8b7b      	ldrh	r3, [r7, #26]
 8004d8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	8013      	strh	r3, [r2, #0]
 8004d9e:	e1a2      	b.n	80050e6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	441a      	add	r2, r3
 8004dc4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004dc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	65bb      	str	r3, [r7, #88]	; 0x58
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dec:	4413      	add	r3, r2
 8004dee:	65bb      	str	r3, [r7, #88]	; 0x58
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	011a      	lsls	r2, r3, #4
 8004df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dfe:	657b      	str	r3, [r7, #84]	; 0x54
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	891b      	ldrh	r3, [r3, #8]
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e0e:	801a      	strh	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	653b      	str	r3, [r7, #80]	; 0x50
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e20:	4413      	add	r3, r2
 8004e22:	653b      	str	r3, [r7, #80]	; 0x50
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	011a      	lsls	r2, r3, #4
 8004e2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	895b      	ldrh	r3, [r3, #10]
 8004e38:	085b      	lsrs	r3, r3, #1
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e42:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 8091 	bne.w	8004f70 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	881b      	ldrh	r3, [r3, #0]
 8004e5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e5c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d01b      	beq.n	8004e9e <USB_ActivateEndpoint+0x47e>
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	441a      	add	r2, r3
 8004e88:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	873b      	strh	r3, [r7, #56]	; 0x38
 8004eac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d01b      	beq.n	8004eee <USB_ActivateEndpoint+0x4ce>
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	4413      	add	r3, r2
 8004ec0:	881b      	ldrh	r3, [r3, #0]
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ecc:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	441a      	add	r2, r3
 8004ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ee6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f0c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	441a      	add	r2, r3
 8004f20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f4c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	441a      	add	r2, r3
 8004f58:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	8013      	strh	r3, [r2, #0]
 8004f6e:	e0ba      	b.n	80050e6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f70:	687a      	ldr	r2, [r7, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01d      	beq.n	8004fc8 <USB_ActivateEndpoint+0x5a8>
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004fb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fd8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01d      	beq.n	8005020 <USB_ActivateEndpoint+0x600>
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800500c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005014:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005018:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800501c:	b29b      	uxth	r3, r3
 800501e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	78db      	ldrb	r3, [r3, #3]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d024      	beq.n	8005072 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	881b      	ldrh	r3, [r3, #0]
 8005034:	b29b      	uxth	r3, r3
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800503e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005042:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005046:	f083 0320 	eor.w	r3, r3, #32
 800504a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	441a      	add	r2, r3
 8005058:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]
 8005070:	e01d      	b.n	80050ae <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005088:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	441a      	add	r2, r3
 8005096:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800509a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	881b      	ldrh	r3, [r3, #0]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	441a      	add	r2, r3
 80050d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80050e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	376c      	adds	r7, #108	; 0x6c
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b08d      	sub	sp, #52	; 0x34
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	7b1b      	ldrb	r3, [r3, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f040 808e 	bne.w	8005224 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d044      	beq.n	800519a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	81bb      	strh	r3, [r7, #12]
 800511e:	89bb      	ldrh	r3, [r7, #12]
 8005120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01b      	beq.n	8005160 <USB_DeactivateEndpoint+0x6c>
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	b29b      	uxth	r3, r3
 8005136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	817b      	strh	r3, [r7, #10]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	441a      	add	r2, r3
 800514a:	897b      	ldrh	r3, [r7, #10]
 800514c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005158:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800515c:	b29b      	uxth	r3, r3
 800515e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4413      	add	r3, r2
 800516a:	881b      	ldrh	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005176:	813b      	strh	r3, [r7, #8]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	441a      	add	r2, r3
 8005182:	893b      	ldrh	r3, [r7, #8]
 8005184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800518c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	b29b      	uxth	r3, r3
 8005196:	8013      	strh	r3, [r2, #0]
 8005198:	e192      	b.n	80054c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	881b      	ldrh	r3, [r3, #0]
 80051a6:	827b      	strh	r3, [r7, #18]
 80051a8:	8a7b      	ldrh	r3, [r7, #18]
 80051aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01b      	beq.n	80051ea <USB_DeactivateEndpoint+0xf6>
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	4413      	add	r3, r2
 80051bc:	881b      	ldrh	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	823b      	strh	r3, [r7, #16]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	441a      	add	r2, r3
 80051d4:	8a3b      	ldrh	r3, [r7, #16]
 80051d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4413      	add	r3, r2
 80051f4:	881b      	ldrh	r3, [r3, #0]
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005200:	81fb      	strh	r3, [r7, #14]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	441a      	add	r2, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800521a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800521e:	b29b      	uxth	r3, r3
 8005220:	8013      	strh	r3, [r2, #0]
 8005222:	e14d      	b.n	80054c0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 80a5 	bne.w	8005378 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	843b      	strh	r3, [r7, #32]
 800523c:	8c3b      	ldrh	r3, [r7, #32]
 800523e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d01b      	beq.n	800527e <USB_DeactivateEndpoint+0x18a>
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	4413      	add	r3, r2
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	b29b      	uxth	r3, r3
 8005254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800525c:	83fb      	strh	r3, [r7, #30]
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	8bfb      	ldrh	r3, [r7, #30]
 800526a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800526e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800527a:	b29b      	uxth	r3, r3
 800527c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	881b      	ldrh	r3, [r3, #0]
 800528a:	83bb      	strh	r3, [r7, #28]
 800528c:	8bbb      	ldrh	r3, [r7, #28]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01b      	beq.n	80052ce <USB_DeactivateEndpoint+0x1da>
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ac:	837b      	strh	r3, [r7, #26]
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	441a      	add	r2, r3
 80052b8:	8b7b      	ldrh	r3, [r7, #26]
 80052ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052ce:	687a      	ldr	r2, [r7, #4]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	833b      	strh	r3, [r7, #24]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	441a      	add	r2, r3
 80052f0:	8b3b      	ldrh	r3, [r7, #24]
 80052f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005302:	b29b      	uxth	r3, r3
 8005304:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	009b      	lsls	r3, r3, #2
 800530e:	4413      	add	r3, r2
 8005310:	881b      	ldrh	r3, [r3, #0]
 8005312:	b29b      	uxth	r3, r3
 8005314:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531c:	82fb      	strh	r3, [r7, #22]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	8afb      	ldrh	r3, [r7, #22]
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	881b      	ldrh	r3, [r3, #0]
 800534a:	b29b      	uxth	r3, r3
 800534c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005354:	82bb      	strh	r3, [r7, #20]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	441a      	add	r2, r3
 8005360:	8abb      	ldrh	r3, [r7, #20]
 8005362:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005366:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800536a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800536e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005372:	b29b      	uxth	r3, r3
 8005374:	8013      	strh	r3, [r2, #0]
 8005376:	e0a3      	b.n	80054c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005386:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005388:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <USB_DeactivateEndpoint+0x2d4>
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	881b      	ldrh	r3, [r3, #0]
 800539c:	b29b      	uxth	r3, r3
 800539e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	441a      	add	r2, r3
 80053b2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80053b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	881b      	ldrh	r3, [r3, #0]
 80053d4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80053d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d01b      	beq.n	8005418 <USB_DeactivateEndpoint+0x324>
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4413      	add	r3, r2
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	853b      	strh	r3, [r7, #40]	; 0x28
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	441a      	add	r2, r3
 8005402:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800540c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	441a      	add	r2, r3
 800543a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800543c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800544c:	b29b      	uxth	r3, r3
 800544e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4413      	add	r3, r2
 800545a:	881b      	ldrh	r3, [r3, #0]
 800545c:	b29b      	uxth	r3, r3
 800545e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005466:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	441a      	add	r2, r3
 8005472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800547c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005484:	b29b      	uxth	r3, r3
 8005486:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29b      	uxth	r3, r3
 8005496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	847b      	strh	r3, [r7, #34]	; 0x22
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	441a      	add	r2, r3
 80054aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054bc:	b29b      	uxth	r3, r3
 80054be:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3734      	adds	r7, #52	; 0x34
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr

080054cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b0cc      	sub	sp, #304	; 0x130
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054da:	6018      	str	r0, [r3, #0]
 80054dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	f041 817d 	bne.w	80067f2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80054f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	429a      	cmp	r2, r3
 8005512:	d908      	bls.n	8005526 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005514:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005518:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005524:	e007      	b.n	8005536 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	7b1b      	ldrb	r3, [r3, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d152      	bne.n	80055ec <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005546:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6959      	ldr	r1, [r3, #20]
 8005552:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	88da      	ldrh	r2, [r3, #6]
 800555e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005562:	b29b      	uxth	r3, r3
 8005564:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005568:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800556c:	6800      	ldr	r0, [r0, #0]
 800556e:	f001 ff23 	bl	80073b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005572:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005576:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800557a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800557e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800558a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005594:	b29b      	uxth	r3, r3
 8005596:	4619      	mov	r1, r3
 8005598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800559c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80055a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055a4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80055a8:	6812      	ldr	r2, [r2, #0]
 80055aa:	440a      	add	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	011a      	lsls	r2, r3, #4
 80055bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4413      	add	r3, r2
 80055c8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055da:	b29a      	uxth	r2, r3
 80055dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	f001 b8b5 	b.w	8006756 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80055ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	78db      	ldrb	r3, [r3, #3]
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	f040 84c6 	bne.w	8005f8a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	429a      	cmp	r2, r3
 8005618:	f240 8443 	bls.w	8005ea2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800561c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005620:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800563e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005642:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005654:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	441a      	add	r2, r3
 8005660:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800566c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005674:	b29b      	uxth	r3, r3
 8005676:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005678:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800567c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6a1a      	ldr	r2, [r3, #32]
 8005684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	881b      	ldrh	r3, [r3, #0]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 823e 	beq.w	8005b3a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80056c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056ca:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	785b      	ldrb	r3, [r3, #1]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 809a 	bne.w	8005818 <USB_EPStartXfer+0x34c>
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80056f0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80056f4:	6812      	ldr	r2, [r2, #0]
 80056f6:	601a      	str	r2, [r3, #0]
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800570e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005712:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005716:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	440a      	add	r2, r1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005724:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	011a      	lsls	r2, r3, #4
 800572e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005732:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4413      	add	r3, r2
 800573a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800573e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005742:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d122      	bne.n	8005796 <USB_EPStartXfer+0x2ca>
 8005750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005754:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	881b      	ldrh	r3, [r3, #0]
 800575c:	b29b      	uxth	r3, r3
 800575e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005762:	b29a      	uxth	r2, r3
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	801a      	strh	r2, [r3, #0]
 8005770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005774:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	881b      	ldrh	r3, [r3, #0]
 800577c:	b29b      	uxth	r3, r3
 800577e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005786:	b29a      	uxth	r2, r3
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	801a      	strh	r2, [r3, #0]
 8005794:	e079      	b.n	800588a <USB_EPStartXfer+0x3be>
 8005796:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579a:	2b3e      	cmp	r3, #62	; 0x3e
 800579c:	d81b      	bhi.n	80057d6 <USB_EPStartXfer+0x30a>
 800579e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a2:	085b      	lsrs	r3, r3, #1
 80057a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <USB_EPStartXfer+0x2f2>
 80057b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057b8:	3301      	adds	r3, #1
 80057ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	801a      	strh	r2, [r3, #0]
 80057d4:	e059      	b.n	800588a <USB_EPStartXfer+0x3be>
 80057d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <USB_EPStartXfer+0x32a>
 80057ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057f0:	3b01      	subs	r3, #1
 80057f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80057f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	029b      	lsls	r3, r3, #10
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	801a      	strh	r2, [r3, #0]
 8005816:	e038      	b.n	800588a <USB_EPStartXfer+0x3be>
 8005818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	785b      	ldrb	r3, [r3, #1]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d130      	bne.n	800588a <USB_EPStartXfer+0x3be>
 8005828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005836:	b29b      	uxth	r3, r3
 8005838:	4619      	mov	r1, r3
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005842:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005846:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800584a:	6812      	ldr	r2, [r2, #0]
 800584c:	440a      	add	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005862:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4413      	add	r3, r2
 800586a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005872:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800587c:	b29a      	uxth	r2, r3
 800587e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005882:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	895b      	ldrh	r3, [r3, #10]
 8005896:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6959      	ldr	r1, [r3, #20]
 80058a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80058b4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80058b8:	6800      	ldr	r0, [r0, #0]
 80058ba:	f001 fd7d 	bl	80073b8 <USB_WritePMA>
            ep->xfer_buff += len;
 80058be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	695a      	ldr	r2, [r3, #20]
 80058ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ce:	441a      	add	r2, r3
 80058d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6a1a      	ldr	r2, [r3, #32]
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d90f      	bls.n	8005918 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6a1a      	ldr	r2, [r3, #32]
 8005904:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005908:	1ad2      	subs	r2, r2, r3
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	621a      	str	r2, [r3, #32]
 8005916:	e00e      	b.n	8005936 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005918:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005928:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2200      	movs	r2, #0
 8005934:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005936:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 809a 	bne.w	8005a7c <USB_EPStartXfer+0x5b0>
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005950:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005954:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	601a      	str	r2, [r3, #0]
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	4619      	mov	r1, r3
 800596e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005972:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005976:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800597a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	440a      	add	r2, r1
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	011a      	lsls	r2, r3, #4
 8005992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005996:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4413      	add	r3, r2
 800599e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80059a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d122      	bne.n	80059fa <USB_EPStartXfer+0x52e>
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	801a      	strh	r2, [r3, #0]
 80059f8:	e083      	b.n	8005b02 <USB_EPStartXfer+0x636>
 80059fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059fe:	2b3e      	cmp	r3, #62	; 0x3e
 8005a00:	d81b      	bhi.n	8005a3a <USB_EPStartXfer+0x56e>
 8005a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a06:	085b      	lsrs	r3, r3, #1
 8005a08:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <USB_EPStartXfer+0x556>
 8005a18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	029b      	lsls	r3, r3, #10
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a30:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	801a      	strh	r2, [r3, #0]
 8005a38:	e063      	b.n	8005b02 <USB_EPStartXfer+0x636>
 8005a3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a48:	f003 031f 	and.w	r3, r3, #31
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d104      	bne.n	8005a5a <USB_EPStartXfer+0x58e>
 8005a50:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a54:	3b01      	subs	r3, #1
 8005a56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005a5a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	029b      	lsls	r3, r3, #10
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a72:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	e042      	b.n	8005b02 <USB_EPStartXfer+0x636>
 8005a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	785b      	ldrb	r3, [r3, #1]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d13a      	bne.n	8005b02 <USB_EPStartXfer+0x636>
 8005a8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a90:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005a94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005a98:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005a9c:	6812      	ldr	r2, [r2, #0]
 8005a9e:	601a      	str	r2, [r3, #0]
 8005aa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005aba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005abe:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	011a      	lsls	r2, r3, #4
 8005ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ada:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	891b      	ldrh	r3, [r3, #8]
 8005b0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6959      	ldr	r1, [r3, #20]
 8005b1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b28:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b2c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b30:	6800      	ldr	r0, [r0, #0]
 8005b32:	f001 fc41 	bl	80073b8 <USB_WritePMA>
 8005b36:	f000 be0e 	b.w	8006756 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	785b      	ldrb	r3, [r3, #1]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d16d      	bne.n	8005c26 <USB_EPStartXfer+0x75a>
 8005b4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b6a:	4413      	add	r3, r2
 8005b6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	011a      	lsls	r2, r3, #4
 8005b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b7e:	4413      	add	r3, r2
 8005b80:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b84:	647b      	str	r3, [r7, #68]	; 0x44
 8005b86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d112      	bne.n	8005bb4 <USB_EPStartXfer+0x6e8>
 8005b8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	b29b      	uxth	r3, r3
 8005b94:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b9c:	801a      	strh	r2, [r3, #0]
 8005b9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb0:	801a      	strh	r2, [r3, #0]
 8005bb2:	e063      	b.n	8005c7c <USB_EPStartXfer+0x7b0>
 8005bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005bba:	d817      	bhi.n	8005bec <USB_EPStartXfer+0x720>
 8005bbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d004      	beq.n	8005bdc <USB_EPStartXfer+0x710>
 8005bd2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	029b      	lsls	r3, r3, #10
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be8:	801a      	strh	r2, [r3, #0]
 8005bea:	e047      	b.n	8005c7c <USB_EPStartXfer+0x7b0>
 8005bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005bf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bfa:	f003 031f 	and.w	r3, r3, #31
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d104      	bne.n	8005c0c <USB_EPStartXfer+0x740>
 8005c02:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c06:	3b01      	subs	r3, #1
 8005c08:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	029b      	lsls	r3, r3, #10
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c22:	801a      	strh	r2, [r3, #0]
 8005c24:	e02a      	b.n	8005c7c <USB_EPStartXfer+0x7b0>
 8005c26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	785b      	ldrb	r3, [r3, #1]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d122      	bne.n	8005c7c <USB_EPStartXfer+0x7b0>
 8005c36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	653b      	str	r3, [r7, #80]	; 0x50
 8005c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c56:	4413      	add	r3, r2
 8005c58:	653b      	str	r3, [r7, #80]	; 0x50
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	011a      	lsls	r2, r3, #4
 8005c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	891b      	ldrh	r3, [r3, #8]
 8005c88:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ca2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ca6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	f001 fb84 	bl	80073b8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695a      	ldr	r2, [r3, #20]
 8005cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc0:	441a      	add	r2, r3
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	6a1a      	ldr	r2, [r3, #32]
 8005cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d90f      	bls.n	8005d0a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8005cea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfa:	1ad2      	subs	r2, r2, r3
 8005cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	621a      	str	r2, [r3, #32]
 8005d08:	e00e      	b.n	8005d28 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8005d0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2200      	movs	r2, #0
 8005d26:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	643b      	str	r3, [r7, #64]	; 0x40
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d16d      	bne.n	8005e20 <USB_EPStartXfer+0x954>
 8005d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d64:	4413      	add	r3, r2
 8005d66:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	011a      	lsls	r2, r3, #4
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	4413      	add	r3, r2
 8005d7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d112      	bne.n	8005dae <USB_EPStartXfer+0x8e2>
 8005d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9a:	881b      	ldrh	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	e05d      	b.n	8005e6a <USB_EPStartXfer+0x99e>
 8005dae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db2:	2b3e      	cmp	r3, #62	; 0x3e
 8005db4:	d817      	bhi.n	8005de6 <USB_EPStartXfer+0x91a>
 8005db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dba:	085b      	lsrs	r3, r3, #1
 8005dbc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc4:	f003 0301 	and.w	r3, r3, #1
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <USB_EPStartXfer+0x90a>
 8005dcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005de2:	801a      	strh	r2, [r3, #0]
 8005de4:	e041      	b.n	8005e6a <USB_EPStartXfer+0x99e>
 8005de6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005df4:	f003 031f 	and.w	r3, r3, #31
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <USB_EPStartXfer+0x93a>
 8005dfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e00:	3b01      	subs	r3, #1
 8005e02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	029b      	lsls	r3, r3, #10
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e024      	b.n	8005e6a <USB_EPStartXfer+0x99e>
 8005e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	785b      	ldrb	r3, [r3, #1]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d11c      	bne.n	8005e6a <USB_EPStartXfer+0x99e>
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e44:	4413      	add	r3, r2
 8005e46:	643b      	str	r3, [r7, #64]	; 0x40
 8005e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	011a      	lsls	r2, r3, #4
 8005e56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e58:	4413      	add	r3, r2
 8005e5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	895b      	ldrh	r3, [r3, #10]
 8005e76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	6959      	ldr	r1, [r3, #20]
 8005e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005e94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005e98:	6800      	ldr	r0, [r0, #0]
 8005e9a:	f001 fa8d 	bl	80073b8 <USB_WritePMA>
 8005e9e:	f000 bc5a 	b.w	8006756 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005eb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005edc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f2e:	4413      	add	r3, r2
 8005f30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	011a      	lsls	r2, r3, #4
 8005f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f42:	4413      	add	r3, r2
 8005f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f48:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	891b      	ldrh	r3, [r3, #8]
 8005f60:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6959      	ldr	r1, [r3, #20]
 8005f70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f7a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005f7e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005f82:	6800      	ldr	r0, [r0, #0]
 8005f84:	f001 fa18 	bl	80073b8 <USB_WritePMA>
 8005f88:	e3e5      	b.n	8006756 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005f8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	4413      	add	r3, r2
 8005fa4:	881b      	ldrh	r3, [r3, #0]
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb0:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005fb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	441a      	add	r2, r3
 8005fce:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fda:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005fe6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff6:	1ad2      	subs	r2, r2, r3
 8005ff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006008:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	4413      	add	r3, r2
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	b29b      	uxth	r3, r3
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 81bc 	beq.w	80063a4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800602c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006030:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800603a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	785b      	ldrb	r3, [r3, #1]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d16d      	bne.n	8006126 <USB_EPStartXfer+0xc5a>
 800604a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	67bb      	str	r3, [r7, #120]	; 0x78
 8006056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006064:	b29b      	uxth	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800606a:	4413      	add	r3, r2
 800606c:	67bb      	str	r3, [r7, #120]	; 0x78
 800606e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	011a      	lsls	r2, r3, #4
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	4413      	add	r3, r2
 8006080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006084:	677b      	str	r3, [r7, #116]	; 0x74
 8006086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d112      	bne.n	80060b4 <USB_EPStartXfer+0xbe8>
 800608e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006098:	b29a      	uxth	r2, r3
 800609a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609c:	801a      	strh	r2, [r3, #0]
 800609e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060b0:	801a      	strh	r2, [r3, #0]
 80060b2:	e060      	b.n	8006176 <USB_EPStartXfer+0xcaa>
 80060b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060b8:	2b3e      	cmp	r3, #62	; 0x3e
 80060ba:	d817      	bhi.n	80060ec <USB_EPStartXfer+0xc20>
 80060bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c0:	085b      	lsrs	r3, r3, #1
 80060c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d004      	beq.n	80060dc <USB_EPStartXfer+0xc10>
 80060d2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060d6:	3301      	adds	r3, #1
 80060d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	029b      	lsls	r3, r3, #10
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060e8:	801a      	strh	r2, [r3, #0]
 80060ea:	e044      	b.n	8006176 <USB_EPStartXfer+0xcaa>
 80060ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d104      	bne.n	800610c <USB_EPStartXfer+0xc40>
 8006102:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006106:	3b01      	subs	r3, #1
 8006108:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800610c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006110:	b29b      	uxth	r3, r3
 8006112:	029b      	lsls	r3, r3, #10
 8006114:	b29b      	uxth	r3, r3
 8006116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800611a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611e:	b29a      	uxth	r2, r3
 8006120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	e027      	b.n	8006176 <USB_EPStartXfer+0xcaa>
 8006126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800612a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	785b      	ldrb	r3, [r3, #1]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d11f      	bne.n	8006176 <USB_EPStartXfer+0xcaa>
 8006136:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006144:	b29b      	uxth	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800614c:	4413      	add	r3, r2
 800614e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	011a      	lsls	r2, r3, #4
 8006160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006164:	4413      	add	r3, r2
 8006166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800616a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800616c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006170:	b29a      	uxth	r2, r3
 8006172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006174:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800617a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	895b      	ldrh	r3, [r3, #10]
 8006182:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800618a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6959      	ldr	r1, [r3, #20]
 8006192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006196:	b29b      	uxth	r3, r3
 8006198:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800619c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80061a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80061a4:	6800      	ldr	r0, [r0, #0]
 80061a6:	f001 f907 	bl	80073b8 <USB_WritePMA>
          ep->xfer_buff += len;
 80061aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	695a      	ldr	r2, [r3, #20]
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	441a      	add	r2, r3
 80061bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80061c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d90f      	bls.n	8006204 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80061e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6a1a      	ldr	r2, [r3, #32]
 80061f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f4:	1ad2      	subs	r2, r2, r3
 80061f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	621a      	str	r2, [r3, #32]
 8006202:	e00e      	b.n	8006222 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8006204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006226:	2b00      	cmp	r3, #0
 8006228:	f000 8295 	beq.w	8006756 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800622c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d16d      	bne.n	8006318 <USB_EPStartXfer+0xe4c>
 800623c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006240:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	66bb      	str	r3, [r7, #104]	; 0x68
 8006248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800625c:	4413      	add	r3, r2
 800625e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006260:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006264:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	011a      	lsls	r2, r3, #4
 800626e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006270:	4413      	add	r3, r2
 8006272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006276:	667b      	str	r3, [r7, #100]	; 0x64
 8006278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d112      	bne.n	80062a6 <USB_EPStartXfer+0xdda>
 8006280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800628a:	b29a      	uxth	r2, r3
 800628c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800629a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	e063      	b.n	800636e <USB_EPStartXfer+0xea2>
 80062a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062aa:	2b3e      	cmp	r3, #62	; 0x3e
 80062ac:	d817      	bhi.n	80062de <USB_EPStartXfer+0xe12>
 80062ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <USB_EPStartXfer+0xe02>
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062c8:	3301      	adds	r3, #1
 80062ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	029b      	lsls	r3, r3, #10
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	e047      	b.n	800636e <USB_EPStartXfer+0xea2>
 80062de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <USB_EPStartXfer+0xe32>
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80062f8:	3b01      	subs	r3, #1
 80062fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80062fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006302:	b29b      	uxth	r3, r3
 8006304:	029b      	lsls	r3, r3, #10
 8006306:	b29b      	uxth	r3, r3
 8006308:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800630c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006310:	b29a      	uxth	r2, r3
 8006312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006314:	801a      	strh	r2, [r3, #0]
 8006316:	e02a      	b.n	800636e <USB_EPStartXfer+0xea2>
 8006318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	785b      	ldrb	r3, [r3, #1]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d122      	bne.n	800636e <USB_EPStartXfer+0xea2>
 8006328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800632c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	673b      	str	r3, [r7, #112]	; 0x70
 8006334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006338:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006342:	b29b      	uxth	r3, r3
 8006344:	461a      	mov	r2, r3
 8006346:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006348:	4413      	add	r3, r2
 800634a:	673b      	str	r3, [r7, #112]	; 0x70
 800634c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	011a      	lsls	r2, r3, #4
 800635a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800635c:	4413      	add	r3, r2
 800635e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006362:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	b29a      	uxth	r2, r3
 800636a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800636e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	891b      	ldrh	r3, [r3, #8]
 800637a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800637e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6959      	ldr	r1, [r3, #20]
 800638a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800638e:	b29b      	uxth	r3, r3
 8006390:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006394:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006398:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800639c:	6800      	ldr	r0, [r0, #0]
 800639e:	f001 f80b 	bl	80073b8 <USB_WritePMA>
 80063a2:	e1d8      	b.n	8006756 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d178      	bne.n	80064a6 <USB_EPStartXfer+0xfda>
 80063b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	461a      	mov	r2, r3
 80063d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063d8:	4413      	add	r3, r2
 80063da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	011a      	lsls	r2, r3, #4
 80063ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063f0:	4413      	add	r3, r2
 80063f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d116      	bne.n	8006430 <USB_EPStartXfer+0xf64>
 8006402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800640e:	b29a      	uxth	r2, r3
 8006410:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006414:	801a      	strh	r2, [r3, #0]
 8006416:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006426:	b29a      	uxth	r2, r3
 8006428:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	e06b      	b.n	8006508 <USB_EPStartXfer+0x103c>
 8006430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006434:	2b3e      	cmp	r3, #62	; 0x3e
 8006436:	d818      	bhi.n	800646a <USB_EPStartXfer+0xf9e>
 8006438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643c:	085b      	lsrs	r3, r3, #1
 800643e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006446:	f003 0301 	and.w	r3, r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	d004      	beq.n	8006458 <USB_EPStartXfer+0xf8c>
 800644e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006452:	3301      	adds	r3, #1
 8006454:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006458:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800645c:	b29b      	uxth	r3, r3
 800645e:	029b      	lsls	r3, r3, #10
 8006460:	b29a      	uxth	r2, r3
 8006462:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	e04e      	b.n	8006508 <USB_EPStartXfer+0x103c>
 800646a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800646e:	095b      	lsrs	r3, r3, #5
 8006470:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	f003 031f 	and.w	r3, r3, #31
 800647c:	2b00      	cmp	r3, #0
 800647e:	d104      	bne.n	800648a <USB_EPStartXfer+0xfbe>
 8006480:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006484:	3b01      	subs	r3, #1
 8006486:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800648a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800648e:	b29b      	uxth	r3, r3
 8006490:	029b      	lsls	r3, r3, #10
 8006492:	b29b      	uxth	r3, r3
 8006494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800649c:	b29a      	uxth	r2, r3
 800649e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064a2:	801a      	strh	r2, [r3, #0]
 80064a4:	e030      	b.n	8006508 <USB_EPStartXfer+0x103c>
 80064a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d128      	bne.n	8006508 <USB_EPStartXfer+0x103c>
 80064b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	461a      	mov	r2, r3
 80064d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064da:	4413      	add	r3, r2
 80064dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	011a      	lsls	r2, r3, #4
 80064ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80064f2:	4413      	add	r3, r2
 80064f4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80064f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006500:	b29a      	uxth	r2, r3
 8006502:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006506:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800650c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	891b      	ldrh	r3, [r3, #8]
 8006514:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6959      	ldr	r1, [r3, #20]
 8006524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006528:	b29b      	uxth	r3, r3
 800652a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800652e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006532:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006536:	6800      	ldr	r0, [r0, #0]
 8006538:	f000 ff3e 	bl	80073b8 <USB_WritePMA>
          ep->xfer_buff += len;
 800653c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	695a      	ldr	r2, [r3, #20]
 8006548:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800654c:	441a      	add	r2, r3
 800654e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800655a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a1a      	ldr	r2, [r3, #32]
 8006566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	429a      	cmp	r2, r3
 8006574:	d90f      	bls.n	8006596 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8006576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800658c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	621a      	str	r2, [r3, #32]
 8006594:	e00e      	b.n	80065b4 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8006596:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800659a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80065a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2200      	movs	r2, #0
 80065b2:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80065b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 80cc 	beq.w	8006756 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80065be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d178      	bne.n	80066ce <USB_EPStartXfer+0x1202>
 80065dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	461a      	mov	r2, r3
 80065fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006600:	4413      	add	r3, r2
 8006602:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	011a      	lsls	r2, r3, #4
 8006614:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006618:	4413      	add	r3, r2
 800661a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800661e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d116      	bne.n	8006658 <USB_EPStartXfer+0x118c>
 800662a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006636:	b29a      	uxth	r2, r3
 8006638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800663c:	801a      	strh	r2, [r3, #0]
 800663e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800664e:	b29a      	uxth	r2, r3
 8006650:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e064      	b.n	8006722 <USB_EPStartXfer+0x1256>
 8006658:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665c:	2b3e      	cmp	r3, #62	; 0x3e
 800665e:	d818      	bhi.n	8006692 <USB_EPStartXfer+0x11c6>
 8006660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006664:	085b      	lsrs	r3, r3, #1
 8006666:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800666a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <USB_EPStartXfer+0x11b4>
 8006676:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800667a:	3301      	adds	r3, #1
 800667c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006680:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006684:	b29b      	uxth	r3, r3
 8006686:	029b      	lsls	r3, r3, #10
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e047      	b.n	8006722 <USB_EPStartXfer+0x1256>
 8006692:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800669c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <USB_EPStartXfer+0x11e6>
 80066a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066ac:	3b01      	subs	r3, #1
 80066ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80066b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	029b      	lsls	r3, r3, #10
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066ca:	801a      	strh	r2, [r3, #0]
 80066cc:	e029      	b.n	8006722 <USB_EPStartXfer+0x1256>
 80066ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d121      	bne.n	8006722 <USB_EPStartXfer+0x1256>
 80066de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	461a      	mov	r2, r3
 80066f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80066f4:	4413      	add	r3, r2
 80066f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80066fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	011a      	lsls	r2, r3, #4
 8006708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800670c:	4413      	add	r3, r2
 800670e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	b29a      	uxth	r2, r3
 800671c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006720:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	895b      	ldrh	r3, [r3, #10]
 800672e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006736:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6959      	ldr	r1, [r3, #20]
 800673e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006742:	b29b      	uxth	r3, r3
 8006744:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006748:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800674c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006750:	6800      	ldr	r0, [r0, #0]
 8006752:	f000 fe31 	bl	80073b8 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006764:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006778:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800677c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006784:	8013      	strh	r3, [r2, #0]
 8006786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800678a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800678e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8006792:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8006796:	8812      	ldrh	r2, [r2, #0]
 8006798:	f082 0210 	eor.w	r2, r2, #16
 800679c:	801a      	strh	r2, [r3, #0]
 800679e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80067a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80067aa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80067ae:	8812      	ldrh	r2, [r2, #0]
 80067b0:	f082 0220 	eor.w	r2, r2, #32
 80067b4:	801a      	strh	r2, [r3, #0]
 80067b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	441a      	add	r2, r3
 80067d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	8013      	strh	r3, [r2, #0]
 80067ee:	f000 bc9f 	b.w	8007130 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80067f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	7b1b      	ldrb	r3, [r3, #12]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 80ae 	bne.w	8006960 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006804:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006808:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	429a      	cmp	r2, r3
 800681e:	d917      	bls.n	8006850 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006824:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	699a      	ldr	r2, [r3, #24]
 800683c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006840:	1ad2      	subs	r2, r2, r3
 8006842:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006846:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	619a      	str	r2, [r3, #24]
 800684e:	e00e      	b.n	800686e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8006850:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006854:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006860:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006864:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2200      	movs	r2, #0
 800686c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800687c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006880:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688a:	b29b      	uxth	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006892:	4413      	add	r3, r2
 8006894:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	011a      	lsls	r2, r3, #4
 80068a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068aa:	4413      	add	r3, r2
 80068ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d116      	bne.n	80068ea <USB_EPStartXfer+0x141e>
 80068bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068e6:	801a      	strh	r2, [r3, #0]
 80068e8:	e3e8      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
 80068ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068ee:	2b3e      	cmp	r3, #62	; 0x3e
 80068f0:	d818      	bhi.n	8006924 <USB_EPStartXfer+0x1458>
 80068f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068f6:	085b      	lsrs	r3, r3, #1
 80068f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <USB_EPStartXfer+0x1446>
 8006908:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800690c:	3301      	adds	r3, #1
 800690e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006912:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006916:	b29b      	uxth	r3, r3
 8006918:	029b      	lsls	r3, r3, #10
 800691a:	b29a      	uxth	r2, r3
 800691c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e3cb      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
 8006924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006928:	095b      	lsrs	r3, r3, #5
 800692a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800692e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2b00      	cmp	r3, #0
 8006938:	d104      	bne.n	8006944 <USB_EPStartXfer+0x1478>
 800693a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800693e:	3b01      	subs	r3, #1
 8006940:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006944:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006948:	b29b      	uxth	r3, r3
 800694a:	029b      	lsls	r3, r3, #10
 800694c:	b29b      	uxth	r3, r3
 800694e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006952:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006956:	b29a      	uxth	r2, r3
 8006958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800695c:	801a      	strh	r2, [r3, #0]
 800695e:	e3ad      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006960:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006964:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	78db      	ldrb	r3, [r3, #3]
 800696c:	2b02      	cmp	r3, #2
 800696e:	f040 8200 	bne.w	8006d72 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b00      	cmp	r3, #0
 8006980:	f040 8091 	bne.w	8006aa6 <USB_EPStartXfer+0x15da>
 8006984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069a8:	4413      	add	r3, r2
 80069aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	011a      	lsls	r2, r3, #4
 80069bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069c0:	4413      	add	r3, r2
 80069c2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80069c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80069ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d116      	bne.n	8006a08 <USB_EPStartXfer+0x153c>
 80069da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069de:	881b      	ldrh	r3, [r3, #0]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069ec:	801a      	strh	r2, [r3, #0]
 80069ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069f2:	881b      	ldrh	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	e083      	b.n	8006b10 <USB_EPStartXfer+0x1644>
 8006a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	691b      	ldr	r3, [r3, #16]
 8006a14:	2b3e      	cmp	r3, #62	; 0x3e
 8006a16:	d820      	bhi.n	8006a5a <USB_EPStartXfer+0x158e>
 8006a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	085b      	lsrs	r3, r3, #1
 8006a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <USB_EPStartXfer+0x157c>
 8006a3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a42:	3301      	adds	r3, #1
 8006a44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	029b      	lsls	r3, r3, #10
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a56:	801a      	strh	r2, [r3, #0]
 8006a58:	e05a      	b.n	8006b10 <USB_EPStartXfer+0x1644>
 8006a5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	f003 031f 	and.w	r3, r3, #31
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d104      	bne.n	8006a8a <USB_EPStartXfer+0x15be>
 8006a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a84:	3b01      	subs	r3, #1
 8006a86:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	029b      	lsls	r3, r3, #10
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9c:	b29a      	uxth	r2, r3
 8006a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e034      	b.n	8006b10 <USB_EPStartXfer+0x1644>
 8006aa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d12c      	bne.n	8006b10 <USB_EPStartXfer+0x1644>
 8006ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ac4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ada:	4413      	add	r3, r2
 8006adc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006ae0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ae4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	011a      	lsls	r2, r3, #4
 8006aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af2:	4413      	add	r3, r2
 8006af4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f040 8091 	bne.w	8006c52 <USB_EPStartXfer+0x1786>
 8006b30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b54:	4413      	add	r3, r2
 8006b56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	011a      	lsls	r2, r3, #4
 8006b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	691b      	ldr	r3, [r3, #16]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d116      	bne.n	8006bb4 <USB_EPStartXfer+0x16e8>
 8006b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b92:	b29a      	uxth	r2, r3
 8006b94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b98:	801a      	strh	r2, [r3, #0]
 8006b9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b9e:	881b      	ldrh	r3, [r3, #0]
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	e07c      	b.n	8006cae <USB_EPStartXfer+0x17e2>
 8006bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	2b3e      	cmp	r3, #62	; 0x3e
 8006bc2:	d820      	bhi.n	8006c06 <USB_EPStartXfer+0x173a>
 8006bc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	691b      	ldr	r3, [r3, #16]
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f003 0301 	and.w	r3, r3, #1
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <USB_EPStartXfer+0x1728>
 8006bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006bf4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	029b      	lsls	r3, r3, #10
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e053      	b.n	8006cae <USB_EPStartXfer+0x17e2>
 8006c06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691b      	ldr	r3, [r3, #16]
 8006c12:	095b      	lsrs	r3, r3, #5
 8006c14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 031f 	and.w	r3, r3, #31
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <USB_EPStartXfer+0x176a>
 8006c2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c30:	3b01      	subs	r3, #1
 8006c32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006c36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	029b      	lsls	r3, r3, #10
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006c4e:	801a      	strh	r2, [r3, #0]
 8006c50:	e02d      	b.n	8006cae <USB_EPStartXfer+0x17e2>
 8006c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	785b      	ldrb	r3, [r3, #1]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d125      	bne.n	8006cae <USB_EPStartXfer+0x17e2>
 8006c62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	461a      	mov	r2, r3
 8006c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c78:	4413      	add	r3, r2
 8006c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	011a      	lsls	r2, r3, #4
 8006c8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c90:	4413      	add	r3, r2
 8006c92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cac:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006cae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 81fe 	beq.w	80070bc <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cc4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006cce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	881b      	ldrh	r3, [r3, #0]
 8006cdc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006ce0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d005      	beq.n	8006cf8 <USB_EPStartXfer+0x182c>
 8006cec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006cf8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f040 81db 	bne.w	80070bc <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006d06:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f040 81d4 	bne.w	80070bc <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	441a      	add	r2, r3
 8006d58:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006d5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	8013      	strh	r3, [r2, #0]
 8006d70:	e1a4      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006d72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	78db      	ldrb	r3, [r3, #3]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	f040 819a 	bne.w	80070b8 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006d84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006d94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d917      	bls.n	8006dd0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	699a      	ldr	r2, [r3, #24]
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	619a      	str	r2, [r3, #24]
 8006dce:	e00e      	b.n	8006dee <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2200      	movs	r2, #0
 8006dec:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006df2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	785b      	ldrb	r3, [r3, #1]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d178      	bne.n	8006ef0 <USB_EPStartXfer+0x1a24>
 8006dfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e22:	4413      	add	r3, r2
 8006e24:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006e28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006e2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	011a      	lsls	r2, r3, #4
 8006e36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006e3a:	4413      	add	r3, r2
 8006e3c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006e40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d116      	bne.n	8006e7a <USB_EPStartXfer+0x19ae>
 8006e4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e50:	881b      	ldrh	r3, [r3, #0]
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e5e:	801a      	strh	r2, [r3, #0]
 8006e60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006e76:	801a      	strh	r2, [r3, #0]
 8006e78:	e06b      	b.n	8006f52 <USB_EPStartXfer+0x1a86>
 8006e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e7e:	2b3e      	cmp	r3, #62	; 0x3e
 8006e80:	d818      	bhi.n	8006eb4 <USB_EPStartXfer+0x19e8>
 8006e82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e90:	f003 0301 	and.w	r3, r3, #1
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d004      	beq.n	8006ea2 <USB_EPStartXfer+0x19d6>
 8006e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	029b      	lsls	r3, r3, #10
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e04e      	b.n	8006f52 <USB_EPStartXfer+0x1a86>
 8006eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb8:	095b      	lsrs	r3, r3, #5
 8006eba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ebe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <USB_EPStartXfer+0x1a08>
 8006eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ece:	3b01      	subs	r3, #1
 8006ed0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	029b      	lsls	r3, r3, #10
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ee2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e030      	b.n	8006f52 <USB_EPStartXfer+0x1a86>
 8006ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ef4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d128      	bne.n	8006f52 <USB_EPStartXfer+0x1a86>
 8006f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f24:	4413      	add	r3, r2
 8006f26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	011a      	lsls	r2, r3, #4
 8006f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006f50:	801a      	strh	r2, [r3, #0]
 8006f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d178      	bne.n	8007062 <USB_EPStartXfer+0x1b96>
 8006f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	461a      	mov	r2, r3
 8006f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f94:	4413      	add	r3, r2
 8006f96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006f9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	011a      	lsls	r2, r3, #4
 8006fa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fac:	4413      	add	r3, r2
 8006fae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d116      	bne.n	8006fec <USB_EPStartXfer+0x1b20>
 8006fbe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd0:	801a      	strh	r2, [r3, #0]
 8006fd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006fe8:	801a      	strh	r2, [r3, #0]
 8006fea:	e067      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
 8006fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ff2:	d818      	bhi.n	8007026 <USB_EPStartXfer+0x1b5a>
 8006ff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ff8:	085b      	lsrs	r3, r3, #1
 8006ffa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d004      	beq.n	8007014 <USB_EPStartXfer+0x1b48>
 800700a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800700e:	3301      	adds	r3, #1
 8007010:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007014:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007018:	b29b      	uxth	r3, r3
 800701a:	029b      	lsls	r3, r3, #10
 800701c:	b29a      	uxth	r2, r3
 800701e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007022:	801a      	strh	r2, [r3, #0]
 8007024:	e04a      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
 8007026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800702a:	095b      	lsrs	r3, r3, #5
 800702c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007034:	f003 031f 	and.w	r3, r3, #31
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <USB_EPStartXfer+0x1b7a>
 800703c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007040:	3b01      	subs	r3, #1
 8007042:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007046:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800704a:	b29b      	uxth	r3, r3
 800704c:	029b      	lsls	r3, r3, #10
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	e02c      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
 8007062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	785b      	ldrb	r3, [r3, #1]
 800706e:	2b01      	cmp	r3, #1
 8007070:	d124      	bne.n	80070bc <USB_EPStartXfer+0x1bf0>
 8007072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007080:	b29b      	uxth	r3, r3
 8007082:	461a      	mov	r2, r3
 8007084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007088:	4413      	add	r3, r2
 800708a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800708e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007092:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	011a      	lsls	r2, r3, #4
 800709c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80070a0:	4413      	add	r3, r2
 80070a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80070a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80070aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070b4:	801a      	strh	r2, [r3, #0]
 80070b6:	e001      	b.n	80070bc <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e03a      	b.n	8007132 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80070bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80070ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80070e6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070ea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80070ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80070f2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80070f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80070fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80070fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007102:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800710c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	441a      	add	r2, r3
 8007118:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800711c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007120:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007124:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712c:	b29b      	uxth	r3, r3
 800712e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d020      	beq.n	8007190 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	881b      	ldrh	r3, [r3, #0]
 800715a:	b29b      	uxth	r3, r3
 800715c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007164:	81bb      	strh	r3, [r7, #12]
 8007166:	89bb      	ldrh	r3, [r7, #12]
 8007168:	f083 0310 	eor.w	r3, r3, #16
 800716c:	81bb      	strh	r3, [r7, #12]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	781b      	ldrb	r3, [r3, #0]
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	441a      	add	r2, r3
 8007178:	89bb      	ldrh	r3, [r7, #12]
 800717a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800717e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800718a:	b29b      	uxth	r3, r3
 800718c:	8013      	strh	r3, [r2, #0]
 800718e:	e01f      	b.n	80071d0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b29b      	uxth	r3, r3
 800719e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a6:	81fb      	strh	r3, [r7, #14]
 80071a8:	89fb      	ldrh	r3, [r7, #14]
 80071aa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80071ae:	81fb      	strh	r3, [r7, #14]
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	89fb      	ldrh	r3, [r7, #14]
 80071bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3714      	adds	r7, #20
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	7b1b      	ldrb	r3, [r3, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 809d 	bne.w	800732a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	785b      	ldrb	r3, [r3, #1]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d04c      	beq.n	8007292 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	881b      	ldrh	r3, [r3, #0]
 8007204:	823b      	strh	r3, [r7, #16]
 8007206:	8a3b      	ldrh	r3, [r7, #16]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d01b      	beq.n	8007248 <USB_EPClearStall+0x6c>
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29b      	uxth	r3, r3
 800721e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	81fb      	strh	r3, [r7, #14]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	89fb      	ldrh	r3, [r7, #14]
 8007234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800723c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007244:	b29b      	uxth	r3, r3
 8007246:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	78db      	ldrb	r3, [r3, #3]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d06c      	beq.n	800732a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	b29b      	uxth	r3, r3
 800725e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007266:	81bb      	strh	r3, [r7, #12]
 8007268:	89bb      	ldrh	r3, [r7, #12]
 800726a:	f083 0320 	eor.w	r3, r3, #32
 800726e:	81bb      	strh	r3, [r7, #12]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	441a      	add	r2, r3
 800727a:	89bb      	ldrh	r3, [r7, #12]
 800727c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728c:	b29b      	uxth	r3, r3
 800728e:	8013      	strh	r3, [r2, #0]
 8007290:	e04b      	b.n	800732a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	4413      	add	r3, r2
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	82fb      	strh	r3, [r7, #22]
 80072a0:	8afb      	ldrh	r3, [r7, #22]
 80072a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01b      	beq.n	80072e2 <USB_EPClearStall+0x106>
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c0:	82bb      	strh	r3, [r7, #20]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	441a      	add	r2, r3
 80072cc:	8abb      	ldrh	r3, [r7, #20]
 80072ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80072da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072de:	b29b      	uxth	r3, r3
 80072e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072f8:	827b      	strh	r3, [r7, #18]
 80072fa:	8a7b      	ldrh	r3, [r7, #18]
 80072fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007300:	827b      	strh	r3, [r7, #18]
 8007302:	8a7b      	ldrh	r3, [r7, #18]
 8007304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007308:	827b      	strh	r3, [r7, #18]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	441a      	add	r2, r3
 8007314:	8a7b      	ldrh	r3, [r7, #18]
 8007316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800731a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800731e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007326:	b29b      	uxth	r3, r3
 8007328:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	371c      	adds	r7, #28
 8007330:	46bd      	mov	sp, r7
 8007332:	bc80      	pop	{r7}
 8007334:	4770      	bx	lr

08007336 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d103      	bne.n	8007350 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2280      	movs	r2, #128	; 0x80
 800734c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	bc80      	pop	{r7}
 800735a:	4770      	bx	lr

0800735c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	bc80      	pop	{r7}
 800736e:	4770      	bx	lr

08007370 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	bc80      	pop	{r7}
 8007382:	4770      	bx	lr

08007384 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007392:	b29b      	uxth	r3, r3
 8007394:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007396:	68fb      	ldr	r3, [r7, #12]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3714      	adds	r7, #20
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr

080073a2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
 80073aa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bc80      	pop	{r7}
 80073b6:	4770      	bx	lr

080073b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b08d      	sub	sp, #52	; 0x34
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	460b      	mov	r3, r1
 80073c8:	80fb      	strh	r3, [r7, #6]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80073ce:	88bb      	ldrh	r3, [r7, #4]
 80073d0:	3301      	adds	r3, #1
 80073d2:	085b      	lsrs	r3, r3, #1
 80073d4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	005a      	lsls	r2, r3, #1
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073f0:	e01e      	b.n	8007430 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	3301      	adds	r3, #1
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80073fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	021b      	lsls	r3, r3, #8
 8007406:	b29b      	uxth	r3, r3
 8007408:	461a      	mov	r2, r3
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	4313      	orrs	r3, r2
 800740e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	b29a      	uxth	r2, r3
 8007414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007416:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741a:	3302      	adds	r3, #2
 800741c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	3302      	adds	r3, #2
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	3301      	adds	r3, #1
 8007428:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800742a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742c:	3b01      	subs	r3, #1
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d1dd      	bne.n	80073f2 <USB_WritePMA+0x3a>
  }
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	3734      	adds	r7, #52	; 0x34
 800743c:	46bd      	mov	sp, r7
 800743e:	bc80      	pop	{r7}
 8007440:	4770      	bx	lr

08007442 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007442:	b480      	push	{r7}
 8007444:	b08b      	sub	sp, #44	; 0x2c
 8007446:	af00      	add	r7, sp, #0
 8007448:	60f8      	str	r0, [r7, #12]
 800744a:	60b9      	str	r1, [r7, #8]
 800744c:	4611      	mov	r1, r2
 800744e:	461a      	mov	r2, r3
 8007450:	460b      	mov	r3, r1
 8007452:	80fb      	strh	r3, [r7, #6]
 8007454:	4613      	mov	r3, r2
 8007456:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007458:	88bb      	ldrh	r3, [r7, #4]
 800745a:	085b      	lsrs	r3, r3, #1
 800745c:	b29b      	uxth	r3, r3
 800745e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	005a      	lsls	r2, r3, #1
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007474:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	627b      	str	r3, [r7, #36]	; 0x24
 800747a:	e01b      	b.n	80074b4 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800747c:	6a3b      	ldr	r3, [r7, #32]
 800747e:	881b      	ldrh	r3, [r3, #0]
 8007480:	b29b      	uxth	r3, r3
 8007482:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	3302      	adds	r3, #2
 8007488:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3301      	adds	r3, #1
 8007496:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	0a1b      	lsrs	r3, r3, #8
 800749c:	b2da      	uxtb	r2, r3
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	3301      	adds	r3, #1
 80074a6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	3302      	adds	r3, #2
 80074ac:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	3b01      	subs	r3, #1
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e0      	bne.n	800747c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80074ba:	88bb      	ldrh	r3, [r7, #4]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80074c6:	6a3b      	ldr	r3, [r7, #32]
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	b2da      	uxtb	r2, r3
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	701a      	strb	r2, [r3, #0]
  }
}
 80074d6:	bf00      	nop
 80074d8:	372c      	adds	r7, #44	; 0x2c
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr

080074e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	460b      	mov	r3, r1
 80074ea:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	7c1b      	ldrb	r3, [r3, #16]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d115      	bne.n	8007524 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80074f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074fc:	2202      	movs	r2, #2
 80074fe:	2181      	movs	r1, #129	; 0x81
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f001 fe86 	bl	8009212 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800750c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007510:	2202      	movs	r2, #2
 8007512:	2101      	movs	r1, #1
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fe7c 	bl	8009212 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007522:	e012      	b.n	800754a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	2202      	movs	r2, #2
 8007528:	2181      	movs	r1, #129	; 0x81
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f001 fe71 	bl	8009212 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	2202      	movs	r2, #2
 800753a:	2101      	movs	r1, #1
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fe68 	bl	8009212 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800754a:	2308      	movs	r3, #8
 800754c:	2203      	movs	r2, #3
 800754e:	2182      	movs	r1, #130	; 0x82
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fe5e 	bl	8009212 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800755c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007560:	f001 ff7e 	bl	8009460 <USBD_static_malloc>
 8007564:	4602      	mov	r2, r0
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007576:	2301      	movs	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
 800757a:	e026      	b.n	80075ca <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007582:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2200      	movs	r2, #0
 800759a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	7c1b      	ldrb	r3, [r3, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d109      	bne.n	80075ba <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b0:	2101      	movs	r1, #1
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f001 ff1e 	bl	80093f4 <USBD_LL_PrepareReceive>
 80075b8:	e007      	b.n	80075ca <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075c0:	2340      	movs	r3, #64	; 0x40
 80075c2:	2101      	movs	r1, #1
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f001 ff15 	bl	80093f4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80075e0:	2300      	movs	r3, #0
 80075e2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80075e4:	2181      	movs	r1, #129	; 0x81
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 fe39 	bl	800925e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2200      	movs	r2, #0
 80075f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80075f2:	2101      	movs	r1, #1
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f001 fe32 	bl	800925e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007602:	2182      	movs	r1, #130	; 0x82
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f001 fe2a 	bl	800925e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00e      	beq.n	8007638 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800762a:	4618      	mov	r0, r3
 800762c:	f001 ff24 	bl	8009478 <USBD_static_free>
    pdev->pClassData = NULL;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b086      	sub	sp, #24
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007652:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007668:	2b00      	cmp	r3, #0
 800766a:	d039      	beq.n	80076e0 <USBD_CDC_Setup+0x9e>
 800766c:	2b20      	cmp	r3, #32
 800766e:	d17f      	bne.n	8007770 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	88db      	ldrh	r3, [r3, #6]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d029      	beq.n	80076cc <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	b25b      	sxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	da11      	bge.n	80076a6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	683a      	ldr	r2, [r7, #0]
 800768c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800768e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	88d2      	ldrh	r2, [r2, #6]
 8007694:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007696:	6939      	ldr	r1, [r7, #16]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	88db      	ldrh	r3, [r3, #6]
 800769c:	461a      	mov	r2, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fa09 	bl	8008ab6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80076a4:	e06b      	b.n	800777e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	785a      	ldrb	r2, [r3, #1]
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	88db      	ldrh	r3, [r3, #6]
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80076bc:	6939      	ldr	r1, [r7, #16]
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	88db      	ldrh	r3, [r3, #6]
 80076c2:	461a      	mov	r2, r3
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f001 fa24 	bl	8008b12 <USBD_CtlPrepareRx>
      break;
 80076ca:	e058      	b.n	800777e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	7850      	ldrb	r0, [r2, #1]
 80076d8:	2200      	movs	r2, #0
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	4798      	blx	r3
      break;
 80076de:	e04e      	b.n	800777e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b0b      	cmp	r3, #11
 80076e6:	d02e      	beq.n	8007746 <USBD_CDC_Setup+0x104>
 80076e8:	2b0b      	cmp	r3, #11
 80076ea:	dc38      	bgt.n	800775e <USBD_CDC_Setup+0x11c>
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d002      	beq.n	80076f6 <USBD_CDC_Setup+0xb4>
 80076f0:	2b0a      	cmp	r3, #10
 80076f2:	d014      	beq.n	800771e <USBD_CDC_Setup+0xdc>
 80076f4:	e033      	b.n	800775e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d107      	bne.n	8007710 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007700:	f107 030c 	add.w	r3, r7, #12
 8007704:	2202      	movs	r2, #2
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 f9d4 	bl	8008ab6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800770e:	e02e      	b.n	800776e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007710:	6839      	ldr	r1, [r7, #0]
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f001 f965 	bl	80089e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007718:	2302      	movs	r3, #2
 800771a:	75fb      	strb	r3, [r7, #23]
          break;
 800771c:	e027      	b.n	800776e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007724:	2b03      	cmp	r3, #3
 8007726:	d107      	bne.n	8007738 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007728:	f107 030f 	add.w	r3, r7, #15
 800772c:	2201      	movs	r2, #1
 800772e:	4619      	mov	r1, r3
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f001 f9c0 	bl	8008ab6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007736:	e01a      	b.n	800776e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f001 f951 	bl	80089e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007740:	2302      	movs	r3, #2
 8007742:	75fb      	strb	r3, [r7, #23]
          break;
 8007744:	e013      	b.n	800776e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800774c:	2b03      	cmp	r3, #3
 800774e:	d00d      	beq.n	800776c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f001 f945 	bl	80089e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007758:	2302      	movs	r3, #2
 800775a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800775c:	e006      	b.n	800776c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f001 f93e 	bl	80089e2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007766:	2302      	movs	r3, #2
 8007768:	75fb      	strb	r3, [r7, #23]
          break;
 800776a:	e000      	b.n	800776e <USBD_CDC_Setup+0x12c>
          break;
 800776c:	bf00      	nop
      }
      break;
 800776e:	e006      	b.n	800777e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007770:	6839      	ldr	r1, [r7, #0]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f001 f935 	bl	80089e2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007778:	2302      	movs	r3, #2
 800777a:	75fb      	strb	r3, [r7, #23]
      break;
 800777c:	bf00      	nop
  }

  return ret;
 800777e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	460b      	mov	r3, r1
 8007792:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800779a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077a2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d03a      	beq.n	8007824 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	6879      	ldr	r1, [r7, #4]
 80077b2:	4613      	mov	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	440b      	add	r3, r1
 80077bc:	331c      	adds	r3, #28
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d029      	beq.n	8007818 <USBD_CDC_DataIn+0x90>
 80077c4:	78fa      	ldrb	r2, [r7, #3]
 80077c6:	6879      	ldr	r1, [r7, #4]
 80077c8:	4613      	mov	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	440b      	add	r3, r1
 80077d2:	331c      	adds	r3, #28
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	78f9      	ldrb	r1, [r7, #3]
 80077d8:	68b8      	ldr	r0, [r7, #8]
 80077da:	460b      	mov	r3, r1
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	440b      	add	r3, r1
 80077e0:	00db      	lsls	r3, r3, #3
 80077e2:	4403      	add	r3, r0
 80077e4:	3338      	adds	r3, #56	; 0x38
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d110      	bne.n	8007818 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80077f6:	78fa      	ldrb	r2, [r7, #3]
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	331c      	adds	r3, #28
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800780a:	78f9      	ldrb	r1, [r7, #3]
 800780c:	2300      	movs	r3, #0
 800780e:	2200      	movs	r2, #0
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 fdcc 	bl	80093ae <USBD_LL_Transmit>
 8007816:	e003      	b.n	8007820 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007820:	2300      	movs	r3, #0
 8007822:	e000      	b.n	8007826 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007824:	2302      	movs	r3, #2
  }
}
 8007826:	4618      	mov	r0, r3
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800782e:	b580      	push	{r7, lr}
 8007830:	b084      	sub	sp, #16
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007840:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007842:	78fb      	ldrb	r3, [r7, #3]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f001 fdf7 	bl	800943a <USBD_LL_GetRxDataSize>
 800784c:	4602      	mov	r2, r0
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00d      	beq.n	800787a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007872:	4611      	mov	r1, r2
 8007874:	4798      	blx	r3

    return USBD_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	e000      	b.n	800787c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800787a:	2302      	movs	r3, #2
  }
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800789a:	2b00      	cmp	r3, #0
 800789c:	d015      	beq.n	80078ca <USBD_CDC_EP0_RxReady+0x46>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80078a4:	2bff      	cmp	r3, #255	; 0xff
 80078a6:	d010      	beq.n	80078ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80078b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80078be:	b292      	uxth	r2, r2
 80078c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	22ff      	movs	r2, #255	; 0xff
 80078c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3710      	adds	r7, #16
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2243      	movs	r2, #67	; 0x43
 80078e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80078e2:	4b03      	ldr	r3, [pc, #12]	; (80078f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bc80      	pop	{r7}
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	20000094 	.word	0x20000094

080078f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2243      	movs	r2, #67	; 0x43
 8007900:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007902:	4b03      	ldr	r3, [pc, #12]	; (8007910 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007904:	4618      	mov	r0, r3
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	bc80      	pop	{r7}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop
 8007910:	20000050 	.word	0x20000050

08007914 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2243      	movs	r2, #67	; 0x43
 8007920:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	200000d8 	.word	0x200000d8

08007934 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	220a      	movs	r2, #10
 8007940:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007942:	4b03      	ldr	r3, [pc, #12]	; (8007950 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007944:	4618      	mov	r0, r3
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	bc80      	pop	{r7}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	2000000c 	.word	0x2000000c

08007954 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8007954:	b480      	push	{r7}
 8007956:	b085      	sub	sp, #20
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800795e:	2302      	movs	r3, #2
 8007960:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d005      	beq.n	8007974 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007994:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800799e:	88fa      	ldrh	r2, [r7, #6]
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80079a6:	2300      	movs	r3, #0
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bc80      	pop	{r7}
 80079b0:	4770      	bx	lr

080079b2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80079b2:	b480      	push	{r7}
 80079b4:	b085      	sub	sp, #20
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr

080079d8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01c      	beq.n	8007a2c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d115      	bne.n	8007a28 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2181      	movs	r1, #129	; 0x81
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f001 fcc5 	bl	80093ae <USBD_LL_Transmit>

      return USBD_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	e002      	b.n	8007a2e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007a2c:	2302      	movs	r3, #2
  }
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d017      	beq.n	8007a80 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	7c1b      	ldrb	r3, [r3, #16]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d109      	bne.n	8007a6c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a62:	2101      	movs	r1, #1
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 fcc5 	bl	80093f4 <USBD_LL_PrepareReceive>
 8007a6a:	e007      	b.n	8007a7c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a72:	2340      	movs	r3, #64	; 0x40
 8007a74:	2101      	movs	r1, #1
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fcbc 	bl	80093f4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	e000      	b.n	8007a82 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007a80:	2302      	movs	r3, #2
  }
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	60f8      	str	r0, [r7, #12]
 8007a92:	60b9      	str	r1, [r7, #8]
 8007a94:	4613      	mov	r3, r2
 8007a96:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007a9e:	2302      	movs	r3, #2
 8007aa0:	e01a      	b.n	8007ad8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d003      	beq.n	8007ab4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	79fa      	ldrb	r2, [r7, #7]
 8007ace:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f001 fb29 	bl	8009128 <USBD_LL_Init>

  return USBD_OK;
 8007ad6:	2300      	movs	r3, #0
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d006      	beq.n	8007b02 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	73fb      	strb	r3, [r7, #15]
 8007b00:	e001      	b.n	8007b06 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007b02:	2302      	movs	r3, #2
 8007b04:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bc80      	pop	{r7}
 8007b10:	4770      	bx	lr

08007b12 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fb5e 	bl	80091dc <USBD_LL_Start>

  return USBD_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bc80      	pop	{r7}
 8007b3c:	4770      	bx	lr

08007b3e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b084      	sub	sp, #16
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	460b      	mov	r3, r1
 8007b48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00c      	beq.n	8007b72 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	78fa      	ldrb	r2, [r7, #3]
 8007b62:	4611      	mov	r1, r2
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	4798      	blx	r3
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	78fa      	ldrb	r2, [r7, #3]
 8007b92:	4611      	mov	r1, r2
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	4798      	blx	r3

  return USBD_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fed8 	bl	800896a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007bc8:	461a      	mov	r2, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d016      	beq.n	8007c0c <USBD_LL_SetupStage+0x6a>
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d81c      	bhi.n	8007c1c <USBD_LL_SetupStage+0x7a>
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d002      	beq.n	8007bec <USBD_LL_SetupStage+0x4a>
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d008      	beq.n	8007bfc <USBD_LL_SetupStage+0x5a>
 8007bea:	e017      	b.n	8007c1c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9cb 	bl	8007f90 <USBD_StdDevReq>
      break;
 8007bfa:	e01a      	b.n	8007c32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa2d 	bl	8008064 <USBD_StdItfReq>
      break;
 8007c0a:	e012      	b.n	8007c32 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa6d 	bl	80080f4 <USBD_StdEPReq>
      break;
 8007c1a:	e00a      	b.n	8007c32 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fb36 	bl	800929c <USBD_LL_StallEP>
      break;
 8007c30:	bf00      	nop
  }

  return USBD_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	460b      	mov	r3, r1
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d14b      	bne.n	8007ce8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c56:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d134      	bne.n	8007ccc <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	68da      	ldr	r2, [r3, #12]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d919      	bls.n	8007ca2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	68da      	ldr	r2, [r3, #12]
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	68da      	ldr	r2, [r3, #12]
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d203      	bcs.n	8007c90 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	e002      	b.n	8007c96 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	461a      	mov	r2, r3
 8007c98:	6879      	ldr	r1, [r7, #4]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 ff57 	bl	8008b4e <USBD_CtlContinueRx>
 8007ca0:	e038      	b.n	8007d14 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d105      	bne.n	8007cc4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007cc4:	68f8      	ldr	r0, [r7, #12]
 8007cc6:	f000 ff54 	bl	8008b72 <USBD_CtlSendStatus>
 8007cca:	e023      	b.n	8007d14 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007cd2:	2b05      	cmp	r3, #5
 8007cd4:	d11e      	bne.n	8007d14 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007cde:	2100      	movs	r1, #0
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f001 fadb 	bl	800929c <USBD_LL_StallEP>
 8007ce6:	e015      	b.n	8007d14 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00d      	beq.n	8007d10 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d108      	bne.n	8007d10 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d04:	699b      	ldr	r3, [r3, #24]
 8007d06:	7afa      	ldrb	r2, [r7, #11]
 8007d08:	4611      	mov	r1, r2
 8007d0a:	68f8      	ldr	r0, [r7, #12]
 8007d0c:	4798      	blx	r3
 8007d0e:	e001      	b.n	8007d14 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d10:	2302      	movs	r3, #2
 8007d12:	e000      	b.n	8007d16 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b086      	sub	sp, #24
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	460b      	mov	r3, r1
 8007d28:	607a      	str	r2, [r7, #4]
 8007d2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d17f      	bne.n	8007e32 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3314      	adds	r3, #20
 8007d36:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d3e:	2b02      	cmp	r3, #2
 8007d40:	d15c      	bne.n	8007dfc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d915      	bls.n	8007d7a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	1ad2      	subs	r2, r2, r3
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	461a      	mov	r2, r3
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fec1 	bl	8008aee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2100      	movs	r1, #0
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f001 fb3e 	bl	80093f4 <USBD_LL_PrepareReceive>
 8007d78:	e04e      	b.n	8007e18 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	6912      	ldr	r2, [r2, #16]
 8007d82:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d86:	fb01 f202 	mul.w	r2, r1, r2
 8007d8a:	1a9b      	subs	r3, r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d11c      	bne.n	8007dca <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	689a      	ldr	r2, [r3, #8]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d316      	bcc.n	8007dca <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d20f      	bcs.n	8007dca <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007daa:	2200      	movs	r2, #0
 8007dac:	2100      	movs	r1, #0
 8007dae:	68f8      	ldr	r0, [r7, #12]
 8007db0:	f000 fe9d 	bl	8008aee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	68f8      	ldr	r0, [r7, #12]
 8007dc4:	f001 fb16 	bl	80093f4 <USBD_LL_PrepareReceive>
 8007dc8:	e026      	b.n	8007e18 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d105      	bne.n	8007dec <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007dec:	2180      	movs	r1, #128	; 0x80
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	f001 fa54 	bl	800929c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 fecf 	bl	8008b98 <USBD_CtlReceiveStatus>
 8007dfa:	e00d      	b.n	8007e18 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d004      	beq.n	8007e10 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d103      	bne.n	8007e18 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007e10:	2180      	movs	r1, #128	; 0x80
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f001 fa42 	bl	800929c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d11d      	bne.n	8007e5e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f7ff fe81 	bl	8007b2a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e30:	e015      	b.n	8007e5e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00d      	beq.n	8007e5a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007e44:	2b03      	cmp	r3, #3
 8007e46:	d108      	bne.n	8007e5a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e4e:	695b      	ldr	r3, [r3, #20]
 8007e50:	7afa      	ldrb	r2, [r7, #11]
 8007e52:	4611      	mov	r1, r2
 8007e54:	68f8      	ldr	r0, [r7, #12]
 8007e56:	4798      	blx	r3
 8007e58:	e001      	b.n	8007e5e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e000      	b.n	8007e60 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3718      	adds	r7, #24
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	2200      	movs	r2, #0
 8007e74:	2100      	movs	r1, #0
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f001 f9cb 	bl	8009212 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2240      	movs	r2, #64	; 0x40
 8007e88:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e8c:	2340      	movs	r3, #64	; 0x40
 8007e8e:	2200      	movs	r2, #0
 8007e90:	2180      	movs	r1, #128	; 0x80
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f001 f9bd 	bl	8009212 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2240      	movs	r2, #64	; 0x40
 8007ea2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6852      	ldr	r2, [r2, #4]
 8007ed8:	b2d2      	uxtb	r2, r2
 8007eda:	4611      	mov	r1, r2
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	4798      	blx	r3
  }

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007eea:	b480      	push	{r7}
 8007eec:	b083      	sub	sp, #12
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	78fa      	ldrb	r2, [r7, #3]
 8007efa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bc80      	pop	{r7}
 8007f06:	4770      	bx	lr

08007f08 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2204      	movs	r2, #4
 8007f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bc80      	pop	{r7}
 8007f2e:	4770      	bx	lr

08007f30 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3e:	2b04      	cmp	r3, #4
 8007f40:	d105      	bne.n	8007f4e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bc80      	pop	{r7}
 8007f58:	4770      	bx	lr

08007f5a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b082      	sub	sp, #8
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	2b03      	cmp	r3, #3
 8007f6a:	d10b      	bne.n	8007f84 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d005      	beq.n	8007f84 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fa6:	2b40      	cmp	r3, #64	; 0x40
 8007fa8:	d005      	beq.n	8007fb6 <USBD_StdDevReq+0x26>
 8007faa:	2b40      	cmp	r3, #64	; 0x40
 8007fac:	d84f      	bhi.n	800804e <USBD_StdDevReq+0xbe>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d009      	beq.n	8007fc6 <USBD_StdDevReq+0x36>
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d14b      	bne.n	800804e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	4798      	blx	r3
      break;
 8007fc4:	e048      	b.n	8008058 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	2b09      	cmp	r3, #9
 8007fcc:	d839      	bhi.n	8008042 <USBD_StdDevReq+0xb2>
 8007fce:	a201      	add	r2, pc, #4	; (adr r2, 8007fd4 <USBD_StdDevReq+0x44>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08008025 	.word	0x08008025
 8007fd8:	08008039 	.word	0x08008039
 8007fdc:	08008043 	.word	0x08008043
 8007fe0:	0800802f 	.word	0x0800802f
 8007fe4:	08008043 	.word	0x08008043
 8007fe8:	08008007 	.word	0x08008007
 8007fec:	08007ffd 	.word	0x08007ffd
 8007ff0:	08008043 	.word	0x08008043
 8007ff4:	0800801b 	.word	0x0800801b
 8007ff8:	08008011 	.word	0x08008011
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 f9dc 	bl	80083bc <USBD_GetDescriptor>
          break;
 8008004:	e022      	b.n	800804c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008006:	6839      	ldr	r1, [r7, #0]
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 fb3f 	bl	800868c <USBD_SetAddress>
          break;
 800800e:	e01d      	b.n	800804c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fb7e 	bl	8008714 <USBD_SetConfig>
          break;
 8008018:	e018      	b.n	800804c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fc07 	bl	8008830 <USBD_GetConfig>
          break;
 8008022:	e013      	b.n	800804c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fc37 	bl	800889a <USBD_GetStatus>
          break;
 800802c:	e00e      	b.n	800804c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 fc65 	bl	8008900 <USBD_SetFeature>
          break;
 8008036:	e009      	b.n	800804c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 fc74 	bl	8008928 <USBD_ClrFeature>
          break;
 8008040:	e004      	b.n	800804c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008042:	6839      	ldr	r1, [r7, #0]
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fccc 	bl	80089e2 <USBD_CtlError>
          break;
 800804a:	bf00      	nop
      }
      break;
 800804c:	e004      	b.n	8008058 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fcc6 	bl	80089e2 <USBD_CtlError>
      break;
 8008056:	bf00      	nop
  }

  return ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop

08008064 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800806e:	2300      	movs	r3, #0
 8008070:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800807a:	2b40      	cmp	r3, #64	; 0x40
 800807c:	d005      	beq.n	800808a <USBD_StdItfReq+0x26>
 800807e:	2b40      	cmp	r3, #64	; 0x40
 8008080:	d82e      	bhi.n	80080e0 <USBD_StdItfReq+0x7c>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <USBD_StdItfReq+0x26>
 8008086:	2b20      	cmp	r3, #32
 8008088:	d12a      	bne.n	80080e0 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	3b01      	subs	r3, #1
 8008092:	2b02      	cmp	r3, #2
 8008094:	d81d      	bhi.n	80080d2 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	889b      	ldrh	r3, [r3, #4]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	2b01      	cmp	r3, #1
 800809e:	d813      	bhi.n	80080c8 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
 80080ae:	4603      	mov	r3, r0
 80080b0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	88db      	ldrh	r3, [r3, #6]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d110      	bne.n	80080dc <USBD_StdItfReq+0x78>
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d10d      	bne.n	80080dc <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 fd56 	bl	8008b72 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80080c6:	e009      	b.n	80080dc <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 fc89 	bl	80089e2 <USBD_CtlError>
          break;
 80080d0:	e004      	b.n	80080dc <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fc84 	bl	80089e2 <USBD_CtlError>
          break;
 80080da:	e000      	b.n	80080de <USBD_StdItfReq+0x7a>
          break;
 80080dc:	bf00      	nop
      }
      break;
 80080de:	e004      	b.n	80080ea <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 80080e0:	6839      	ldr	r1, [r7, #0]
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 fc7d 	bl	80089e2 <USBD_CtlError>
      break;
 80080e8:	bf00      	nop
  }

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	889b      	ldrh	r3, [r3, #4]
 8008106:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008110:	2b40      	cmp	r3, #64	; 0x40
 8008112:	d007      	beq.n	8008124 <USBD_StdEPReq+0x30>
 8008114:	2b40      	cmp	r3, #64	; 0x40
 8008116:	f200 8146 	bhi.w	80083a6 <USBD_StdEPReq+0x2b2>
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <USBD_StdEPReq+0x40>
 800811e:	2b20      	cmp	r3, #32
 8008120:	f040 8141 	bne.w	80083a6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	4798      	blx	r3
      break;
 8008132:	e13d      	b.n	80083b0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800813c:	2b20      	cmp	r3, #32
 800813e:	d10a      	bne.n	8008156 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
 800814e:	4603      	mov	r3, r0
 8008150:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008152:	7bfb      	ldrb	r3, [r7, #15]
 8008154:	e12d      	b.n	80083b2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	785b      	ldrb	r3, [r3, #1]
 800815a:	2b03      	cmp	r3, #3
 800815c:	d007      	beq.n	800816e <USBD_StdEPReq+0x7a>
 800815e:	2b03      	cmp	r3, #3
 8008160:	f300 811b 	bgt.w	800839a <USBD_StdEPReq+0x2a6>
 8008164:	2b00      	cmp	r3, #0
 8008166:	d072      	beq.n	800824e <USBD_StdEPReq+0x15a>
 8008168:	2b01      	cmp	r3, #1
 800816a:	d03a      	beq.n	80081e2 <USBD_StdEPReq+0xee>
 800816c:	e115      	b.n	800839a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008174:	2b02      	cmp	r3, #2
 8008176:	d002      	beq.n	800817e <USBD_StdEPReq+0x8a>
 8008178:	2b03      	cmp	r3, #3
 800817a:	d015      	beq.n	80081a8 <USBD_StdEPReq+0xb4>
 800817c:	e02b      	b.n	80081d6 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800817e:	7bbb      	ldrb	r3, [r7, #14]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00c      	beq.n	800819e <USBD_StdEPReq+0xaa>
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d009      	beq.n	800819e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	4619      	mov	r1, r3
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 f884 	bl	800929c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008194:	2180      	movs	r1, #128	; 0x80
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f001 f880 	bl	800929c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800819c:	e020      	b.n	80081e0 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800819e:	6839      	ldr	r1, [r7, #0]
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 fc1e 	bl	80089e2 <USBD_CtlError>
              break;
 80081a6:	e01b      	b.n	80081e0 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	885b      	ldrh	r3, [r3, #2]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10e      	bne.n	80081ce <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00b      	beq.n	80081ce <USBD_StdEPReq+0xda>
 80081b6:	7bbb      	ldrb	r3, [r7, #14]
 80081b8:	2b80      	cmp	r3, #128	; 0x80
 80081ba:	d008      	beq.n	80081ce <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	88db      	ldrh	r3, [r3, #6]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d104      	bne.n	80081ce <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f867 	bl	800929c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 fccf 	bl	8008b72 <USBD_CtlSendStatus>

              break;
 80081d4:	e004      	b.n	80081e0 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 80081d6:	6839      	ldr	r1, [r7, #0]
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 fc02 	bl	80089e2 <USBD_CtlError>
              break;
 80081de:	bf00      	nop
          }
          break;
 80081e0:	e0e0      	b.n	80083a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d002      	beq.n	80081f2 <USBD_StdEPReq+0xfe>
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d015      	beq.n	800821c <USBD_StdEPReq+0x128>
 80081f0:	e026      	b.n	8008240 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d00c      	beq.n	8008212 <USBD_StdEPReq+0x11e>
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	2b80      	cmp	r3, #128	; 0x80
 80081fc:	d009      	beq.n	8008212 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f001 f84a 	bl	800929c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008208:	2180      	movs	r1, #128	; 0x80
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f846 	bl	800929c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008210:	e01c      	b.n	800824c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008212:	6839      	ldr	r1, [r7, #0]
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fbe4 	bl	80089e2 <USBD_CtlError>
              break;
 800821a:	e017      	b.n	800824c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	885b      	ldrh	r3, [r3, #2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d112      	bne.n	800824a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008224:	7bbb      	ldrb	r3, [r7, #14]
 8008226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800822e:	7bbb      	ldrb	r3, [r7, #14]
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f851 	bl	80092da <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 fc9a 	bl	8008b72 <USBD_CtlSendStatus>
              }
              break;
 800823e:	e004      	b.n	800824a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008240:	6839      	ldr	r1, [r7, #0]
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fbcd 	bl	80089e2 <USBD_CtlError>
              break;
 8008248:	e000      	b.n	800824c <USBD_StdEPReq+0x158>
              break;
 800824a:	bf00      	nop
          }
          break;
 800824c:	e0aa      	b.n	80083a4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008254:	2b02      	cmp	r3, #2
 8008256:	d002      	beq.n	800825e <USBD_StdEPReq+0x16a>
 8008258:	2b03      	cmp	r3, #3
 800825a:	d032      	beq.n	80082c2 <USBD_StdEPReq+0x1ce>
 800825c:	e097      	b.n	800838e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d007      	beq.n	8008274 <USBD_StdEPReq+0x180>
 8008264:	7bbb      	ldrb	r3, [r7, #14]
 8008266:	2b80      	cmp	r3, #128	; 0x80
 8008268:	d004      	beq.n	8008274 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fbb8 	bl	80089e2 <USBD_CtlError>
                break;
 8008272:	e091      	b.n	8008398 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	da0b      	bge.n	8008294 <USBD_StdEPReq+0x1a0>
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	3310      	adds	r3, #16
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4413      	add	r3, r2
 8008290:	3304      	adds	r3, #4
 8008292:	e00b      	b.n	80082ac <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	3304      	adds	r3, #4
 80082ac:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	2202      	movs	r2, #2
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fbfb 	bl	8008ab6 <USBD_CtlSendData>
              break;
 80082c0:	e06a      	b.n	8008398 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da11      	bge.n	80082ee <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082ca:	7bbb      	ldrb	r3, [r7, #14]
 80082cc:	f003 020f 	and.w	r2, r3, #15
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	4613      	mov	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4413      	add	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	440b      	add	r3, r1
 80082dc:	3318      	adds	r3, #24
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d117      	bne.n	8008314 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80082e4:	6839      	ldr	r1, [r7, #0]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fb7b 	bl	80089e2 <USBD_CtlError>
                  break;
 80082ec:	e054      	b.n	8008398 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	f003 020f 	and.w	r2, r3, #15
 80082f4:	6879      	ldr	r1, [r7, #4]
 80082f6:	4613      	mov	r3, r2
 80082f8:	009b      	lsls	r3, r3, #2
 80082fa:	4413      	add	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	440b      	add	r3, r1
 8008300:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d104      	bne.n	8008314 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fb68 	bl	80089e2 <USBD_CtlError>
                  break;
 8008312:	e041      	b.n	8008398 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008318:	2b00      	cmp	r3, #0
 800831a:	da0b      	bge.n	8008334 <USBD_StdEPReq+0x240>
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	3310      	adds	r3, #16
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	4413      	add	r3, r2
 8008330:	3304      	adds	r3, #4
 8008332:	e00b      	b.n	800834c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	4413      	add	r3, r2
 800834a:	3304      	adds	r3, #4
 800834c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800834e:	7bbb      	ldrb	r3, [r7, #14]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <USBD_StdEPReq+0x266>
 8008354:	7bbb      	ldrb	r3, [r7, #14]
 8008356:	2b80      	cmp	r3, #128	; 0x80
 8008358:	d103      	bne.n	8008362 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	e00e      	b.n	8008380 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	4619      	mov	r1, r3
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	f000 ffd6 	bl	8009318 <USBD_LL_IsStallEP>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2201      	movs	r2, #1
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	e002      	b.n	8008380 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	2202      	movs	r2, #2
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fb95 	bl	8008ab6 <USBD_CtlSendData>
              break;
 800838c:	e004      	b.n	8008398 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fb26 	bl	80089e2 <USBD_CtlError>
              break;
 8008396:	bf00      	nop
          }
          break;
 8008398:	e004      	b.n	80083a4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fb20 	bl	80089e2 <USBD_CtlError>
          break;
 80083a2:	bf00      	nop
      }
      break;
 80083a4:	e004      	b.n	80083b0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80083a6:	6839      	ldr	r1, [r7, #0]
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fb1a 	bl	80089e2 <USBD_CtlError>
      break;
 80083ae:	bf00      	nop
  }

  return ret;
 80083b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}
	...

080083bc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083c6:	2300      	movs	r3, #0
 80083c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083ce:	2300      	movs	r3, #0
 80083d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	885b      	ldrh	r3, [r3, #2]
 80083d6:	0a1b      	lsrs	r3, r3, #8
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	2b06      	cmp	r3, #6
 80083de:	f200 8128 	bhi.w	8008632 <USBD_GetDescriptor+0x276>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <USBD_GetDescriptor+0x2c>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	08008405 	.word	0x08008405
 80083ec:	0800841d 	.word	0x0800841d
 80083f0:	0800845d 	.word	0x0800845d
 80083f4:	08008633 	.word	0x08008633
 80083f8:	08008633 	.word	0x08008633
 80083fc:	080085d3 	.word	0x080085d3
 8008400:	080085ff 	.word	0x080085ff
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	7c12      	ldrb	r2, [r2, #16]
 8008410:	f107 0108 	add.w	r1, r7, #8
 8008414:	4610      	mov	r0, r2
 8008416:	4798      	blx	r3
 8008418:	60f8      	str	r0, [r7, #12]
      break;
 800841a:	e112      	b.n	8008642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	7c1b      	ldrb	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10d      	bne.n	8008440 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800842c:	f107 0208 	add.w	r2, r7, #8
 8008430:	4610      	mov	r0, r2
 8008432:	4798      	blx	r3
 8008434:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	2202      	movs	r2, #2
 800843c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800843e:	e100      	b.n	8008642 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	f107 0208 	add.w	r2, r7, #8
 800844c:	4610      	mov	r0, r2
 800844e:	4798      	blx	r3
 8008450:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	3301      	adds	r3, #1
 8008456:	2202      	movs	r2, #2
 8008458:	701a      	strb	r2, [r3, #0]
      break;
 800845a:	e0f2      	b.n	8008642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	885b      	ldrh	r3, [r3, #2]
 8008460:	b2db      	uxtb	r3, r3
 8008462:	2b05      	cmp	r3, #5
 8008464:	f200 80ac 	bhi.w	80085c0 <USBD_GetDescriptor+0x204>
 8008468:	a201      	add	r2, pc, #4	; (adr r2, 8008470 <USBD_GetDescriptor+0xb4>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008489 	.word	0x08008489
 8008474:	080084bd 	.word	0x080084bd
 8008478:	080084f1 	.word	0x080084f1
 800847c:	08008525 	.word	0x08008525
 8008480:	08008559 	.word	0x08008559
 8008484:	0800858d 	.word	0x0800858d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	7c12      	ldrb	r2, [r2, #16]
 80084a0:	f107 0108 	add.w	r1, r7, #8
 80084a4:	4610      	mov	r0, r2
 80084a6:	4798      	blx	r3
 80084a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084aa:	e091      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084ac:	6839      	ldr	r1, [r7, #0]
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa97 	bl	80089e2 <USBD_CtlError>
            err++;
 80084b4:	7afb      	ldrb	r3, [r7, #11]
 80084b6:	3301      	adds	r3, #1
 80084b8:	72fb      	strb	r3, [r7, #11]
          break;
 80084ba:	e089      	b.n	80085d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084ce:	689b      	ldr	r3, [r3, #8]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	7c12      	ldrb	r2, [r2, #16]
 80084d4:	f107 0108 	add.w	r1, r7, #8
 80084d8:	4610      	mov	r0, r2
 80084da:	4798      	blx	r3
 80084dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084de:	e077      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa7d 	bl	80089e2 <USBD_CtlError>
            err++;
 80084e8:	7afb      	ldrb	r3, [r7, #11]
 80084ea:	3301      	adds	r3, #1
 80084ec:	72fb      	strb	r3, [r7, #11]
          break;
 80084ee:	e06f      	b.n	80085d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00b      	beq.n	8008514 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	7c12      	ldrb	r2, [r2, #16]
 8008508:	f107 0108 	add.w	r1, r7, #8
 800850c:	4610      	mov	r0, r2
 800850e:	4798      	blx	r3
 8008510:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008512:	e05d      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008514:	6839      	ldr	r1, [r7, #0]
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 fa63 	bl	80089e2 <USBD_CtlError>
            err++;
 800851c:	7afb      	ldrb	r3, [r7, #11]
 800851e:	3301      	adds	r3, #1
 8008520:	72fb      	strb	r3, [r7, #11]
          break;
 8008522:	e055      	b.n	80085d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	7c12      	ldrb	r2, [r2, #16]
 800853c:	f107 0108 	add.w	r1, r7, #8
 8008540:	4610      	mov	r0, r2
 8008542:	4798      	blx	r3
 8008544:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008546:	e043      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008548:	6839      	ldr	r1, [r7, #0]
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f000 fa49 	bl	80089e2 <USBD_CtlError>
            err++;
 8008550:	7afb      	ldrb	r3, [r7, #11]
 8008552:	3301      	adds	r3, #1
 8008554:	72fb      	strb	r3, [r7, #11]
          break;
 8008556:	e03b      	b.n	80085d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d00b      	beq.n	800857c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800856a:	695b      	ldr	r3, [r3, #20]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	7c12      	ldrb	r2, [r2, #16]
 8008570:	f107 0108 	add.w	r1, r7, #8
 8008574:	4610      	mov	r0, r2
 8008576:	4798      	blx	r3
 8008578:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800857a:	e029      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa2f 	bl	80089e2 <USBD_CtlError>
            err++;
 8008584:	7afb      	ldrb	r3, [r7, #11]
 8008586:	3301      	adds	r3, #1
 8008588:	72fb      	strb	r3, [r7, #11]
          break;
 800858a:	e021      	b.n	80085d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008592:	699b      	ldr	r3, [r3, #24]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00b      	beq.n	80085b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	7c12      	ldrb	r2, [r2, #16]
 80085a4:	f107 0108 	add.w	r1, r7, #8
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
 80085ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ae:	e00f      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 fa15 	bl	80089e2 <USBD_CtlError>
            err++;
 80085b8:	7afb      	ldrb	r3, [r7, #11]
 80085ba:	3301      	adds	r3, #1
 80085bc:	72fb      	strb	r3, [r7, #11]
          break;
 80085be:	e007      	b.n	80085d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa0d 	bl	80089e2 <USBD_CtlError>
          err++;
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	3301      	adds	r3, #1
 80085cc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80085ce:	e038      	b.n	8008642 <USBD_GetDescriptor+0x286>
 80085d0:	e037      	b.n	8008642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	7c1b      	ldrb	r3, [r3, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d109      	bne.n	80085ee <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e2:	f107 0208 	add.w	r2, r7, #8
 80085e6:	4610      	mov	r0, r2
 80085e8:	4798      	blx	r3
 80085ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80085ec:	e029      	b.n	8008642 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 f9f6 	bl	80089e2 <USBD_CtlError>
        err++;
 80085f6:	7afb      	ldrb	r3, [r7, #11]
 80085f8:	3301      	adds	r3, #1
 80085fa:	72fb      	strb	r3, [r7, #11]
      break;
 80085fc:	e021      	b.n	8008642 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	7c1b      	ldrb	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d10d      	bne.n	8008622 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860e:	f107 0208 	add.w	r2, r7, #8
 8008612:	4610      	mov	r0, r2
 8008614:	4798      	blx	r3
 8008616:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3301      	adds	r3, #1
 800861c:	2207      	movs	r2, #7
 800861e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008620:	e00f      	b.n	8008642 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f9dc 	bl	80089e2 <USBD_CtlError>
        err++;
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	3301      	adds	r3, #1
 800862e:	72fb      	strb	r3, [r7, #11]
      break;
 8008630:	e007      	b.n	8008642 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f9d4 	bl	80089e2 <USBD_CtlError>
      err++;
 800863a:	7afb      	ldrb	r3, [r7, #11]
 800863c:	3301      	adds	r3, #1
 800863e:	72fb      	strb	r3, [r7, #11]
      break;
 8008640:	bf00      	nop
  }

  if (err != 0U)
 8008642:	7afb      	ldrb	r3, [r7, #11]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d11c      	bne.n	8008682 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008648:	893b      	ldrh	r3, [r7, #8]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d011      	beq.n	8008672 <USBD_GetDescriptor+0x2b6>
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	88db      	ldrh	r3, [r3, #6]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00d      	beq.n	8008672 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	88da      	ldrh	r2, [r3, #6]
 800865a:	893b      	ldrh	r3, [r7, #8]
 800865c:	4293      	cmp	r3, r2
 800865e:	bf28      	it	cs
 8008660:	4613      	movcs	r3, r2
 8008662:	b29b      	uxth	r3, r3
 8008664:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008666:	893b      	ldrh	r3, [r7, #8]
 8008668:	461a      	mov	r2, r3
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fa22 	bl	8008ab6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	88db      	ldrh	r3, [r3, #6]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d104      	bne.n	8008684 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fa79 	bl	8008b72 <USBD_CtlSendStatus>
 8008680:	e000      	b.n	8008684 <USBD_GetDescriptor+0x2c8>
    return;
 8008682:	bf00      	nop
    }
  }
}
 8008684:	3710      	adds	r7, #16
 8008686:	46bd      	mov	sp, r7
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop

0800868c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	889b      	ldrh	r3, [r3, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d130      	bne.n	8008700 <USBD_SetAddress+0x74>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88db      	ldrh	r3, [r3, #6]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d12c      	bne.n	8008700 <USBD_SetAddress+0x74>
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	885b      	ldrh	r3, [r3, #2]
 80086aa:	2b7f      	cmp	r3, #127	; 0x7f
 80086ac:	d828      	bhi.n	8008700 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	885b      	ldrh	r3, [r3, #2]
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d104      	bne.n	80086ce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 f98b 	bl	80089e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086cc:	e01d      	b.n	800870a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	7bfa      	ldrb	r2, [r7, #15]
 80086d2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80086d6:	7bfb      	ldrb	r3, [r7, #15]
 80086d8:	4619      	mov	r1, r3
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fe48 	bl	8009370 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fa46 	bl	8008b72 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80086e6:	7bfb      	ldrb	r3, [r7, #15]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086f4:	e009      	b.n	800870a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	e004      	b.n	800870a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f96d 	bl	80089e2 <USBD_CtlError>
  }
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	885b      	ldrh	r3, [r3, #2]
 8008722:	b2da      	uxtb	r2, r3
 8008724:	4b41      	ldr	r3, [pc, #260]	; (800882c <USBD_SetConfig+0x118>)
 8008726:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008728:	4b40      	ldr	r3, [pc, #256]	; (800882c <USBD_SetConfig+0x118>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d904      	bls.n	800873a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f955 	bl	80089e2 <USBD_CtlError>
 8008738:	e075      	b.n	8008826 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008740:	2b02      	cmp	r3, #2
 8008742:	d002      	beq.n	800874a <USBD_SetConfig+0x36>
 8008744:	2b03      	cmp	r3, #3
 8008746:	d023      	beq.n	8008790 <USBD_SetConfig+0x7c>
 8008748:	e062      	b.n	8008810 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800874a:	4b38      	ldr	r3, [pc, #224]	; (800882c <USBD_SetConfig+0x118>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d01a      	beq.n	8008788 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008752:	4b36      	ldr	r3, [pc, #216]	; (800882c <USBD_SetConfig+0x118>)
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	461a      	mov	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2203      	movs	r2, #3
 8008760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008764:	4b31      	ldr	r3, [pc, #196]	; (800882c <USBD_SetConfig+0x118>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff f9e7 	bl	8007b3e <USBD_SetClassConfig>
 8008770:	4603      	mov	r3, r0
 8008772:	2b02      	cmp	r3, #2
 8008774:	d104      	bne.n	8008780 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008776:	6839      	ldr	r1, [r7, #0]
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f932 	bl	80089e2 <USBD_CtlError>
            return;
 800877e:	e052      	b.n	8008826 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f9f6 	bl	8008b72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008786:	e04e      	b.n	8008826 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 f9f2 	bl	8008b72 <USBD_CtlSendStatus>
        break;
 800878e:	e04a      	b.n	8008826 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008790:	4b26      	ldr	r3, [pc, #152]	; (800882c <USBD_SetConfig+0x118>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d112      	bne.n	80087be <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2202      	movs	r2, #2
 800879c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80087a0:	4b22      	ldr	r3, [pc, #136]	; (800882c <USBD_SetConfig+0x118>)
 80087a2:	781b      	ldrb	r3, [r3, #0]
 80087a4:	461a      	mov	r2, r3
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80087aa:	4b20      	ldr	r3, [pc, #128]	; (800882c <USBD_SetConfig+0x118>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	4619      	mov	r1, r3
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f7ff f9e3 	bl	8007b7c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f9db 	bl	8008b72 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80087bc:	e033      	b.n	8008826 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80087be:	4b1b      	ldr	r3, [pc, #108]	; (800882c <USBD_SetConfig+0x118>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	429a      	cmp	r2, r3
 80087ca:	d01d      	beq.n	8008808 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff f9d1 	bl	8007b7c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80087da:	4b14      	ldr	r3, [pc, #80]	; (800882c <USBD_SetConfig+0x118>)
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	461a      	mov	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80087e4:	4b11      	ldr	r3, [pc, #68]	; (800882c <USBD_SetConfig+0x118>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	4619      	mov	r1, r3
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f7ff f9a7 	bl	8007b3e <USBD_SetClassConfig>
 80087f0:	4603      	mov	r3, r0
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d104      	bne.n	8008800 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f8f2 	bl	80089e2 <USBD_CtlError>
            return;
 80087fe:	e012      	b.n	8008826 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f9b6 	bl	8008b72 <USBD_CtlSendStatus>
        break;
 8008806:	e00e      	b.n	8008826 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9b2 	bl	8008b72 <USBD_CtlSendStatus>
        break;
 800880e:	e00a      	b.n	8008826 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008810:	6839      	ldr	r1, [r7, #0]
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 f8e5 	bl	80089e2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008818:	4b04      	ldr	r3, [pc, #16]	; (800882c <USBD_SetConfig+0x118>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f7ff f9ac 	bl	8007b7c <USBD_ClrClassConfig>
        break;
 8008824:	bf00      	nop
    }
  }
}
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	200002d8 	.word	0x200002d8

08008830 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b082      	sub	sp, #8
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	88db      	ldrh	r3, [r3, #6]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d004      	beq.n	800884c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f8cc 	bl	80089e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800884a:	e022      	b.n	8008892 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008852:	2b02      	cmp	r3, #2
 8008854:	dc02      	bgt.n	800885c <USBD_GetConfig+0x2c>
 8008856:	2b00      	cmp	r3, #0
 8008858:	dc03      	bgt.n	8008862 <USBD_GetConfig+0x32>
 800885a:	e015      	b.n	8008888 <USBD_GetConfig+0x58>
 800885c:	2b03      	cmp	r3, #3
 800885e:	d00b      	beq.n	8008878 <USBD_GetConfig+0x48>
 8008860:	e012      	b.n	8008888 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	3308      	adds	r3, #8
 800886c:	2201      	movs	r2, #1
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f920 	bl	8008ab6 <USBD_CtlSendData>
        break;
 8008876:	e00c      	b.n	8008892 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3304      	adds	r3, #4
 800887c:	2201      	movs	r2, #1
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f918 	bl	8008ab6 <USBD_CtlSendData>
        break;
 8008886:	e004      	b.n	8008892 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008888:	6839      	ldr	r1, [r7, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f8a9 	bl	80089e2 <USBD_CtlError>
        break;
 8008890:	bf00      	nop
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b082      	sub	sp, #8
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088aa:	3b01      	subs	r3, #1
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d81e      	bhi.n	80088ee <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	88db      	ldrh	r3, [r3, #6]
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d004      	beq.n	80088c2 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80088b8:	6839      	ldr	r1, [r7, #0]
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f891 	bl	80089e2 <USBD_CtlError>
        break;
 80088c0:	e01a      	b.n	80088f8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	68db      	ldr	r3, [r3, #12]
 80088d6:	f043 0202 	orr.w	r2, r3, #2
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	330c      	adds	r3, #12
 80088e2:	2202      	movs	r2, #2
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f8e5 	bl	8008ab6 <USBD_CtlSendData>
      break;
 80088ec:	e004      	b.n	80088f8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f876 	bl	80089e2 <USBD_CtlError>
      break;
 80088f6:	bf00      	nop
  }
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	885b      	ldrh	r3, [r3, #2]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d106      	bne.n	8008920 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f929 	bl	8008b72 <USBD_CtlSendStatus>
  }
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	3b01      	subs	r3, #1
 800893a:	2b02      	cmp	r3, #2
 800893c:	d80b      	bhi.n	8008956 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	885b      	ldrh	r3, [r3, #2]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d10c      	bne.n	8008960 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f90f 	bl	8008b72 <USBD_CtlSendStatus>
      }
      break;
 8008954:	e004      	b.n	8008960 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f842 	bl	80089e2 <USBD_CtlError>
      break;
 800895e:	e000      	b.n	8008962 <USBD_ClrFeature+0x3a>
      break;
 8008960:	bf00      	nop
  }
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800896a:	b480      	push	{r7}
 800896c:	b083      	sub	sp, #12
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781a      	ldrb	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	785a      	ldrb	r2, [r3, #1]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	3302      	adds	r3, #2
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	b29a      	uxth	r2, r3
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	3303      	adds	r3, #3
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b29b      	uxth	r3, r3
 8008994:	021b      	lsls	r3, r3, #8
 8008996:	b29b      	uxth	r3, r3
 8008998:	4413      	add	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	3304      	adds	r3, #4
 80089a4:	781b      	ldrb	r3, [r3, #0]
 80089a6:	b29a      	uxth	r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	3305      	adds	r3, #5
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	021b      	lsls	r3, r3, #8
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	4413      	add	r3, r2
 80089b6:	b29a      	uxth	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	3306      	adds	r3, #6
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	b29a      	uxth	r2, r3
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	3307      	adds	r3, #7
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	021b      	lsls	r3, r3, #8
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	4413      	add	r3, r2
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	80da      	strh	r2, [r3, #6]

}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	bc80      	pop	{r7}
 80089e0:	4770      	bx	lr

080089e2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80089ec:	2180      	movs	r1, #128	; 0x80
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f000 fc54 	bl	800929c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80089f4:	2100      	movs	r1, #0
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fc50 	bl	800929c <USBD_LL_StallEP>
}
 80089fc:	bf00      	nop
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008a10:	2300      	movs	r3, #0
 8008a12:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d032      	beq.n	8008a80 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 f834 	bl	8008a88 <USBD_GetLen>
 8008a20:	4603      	mov	r3, r0
 8008a22:	3301      	adds	r3, #1
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	005b      	lsls	r3, r3, #1
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008a2e:	7dfb      	ldrb	r3, [r7, #23]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	75fa      	strb	r2, [r7, #23]
 8008a34:	461a      	mov	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4413      	add	r3, r2
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	7812      	ldrb	r2, [r2, #0]
 8008a3e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008a40:	7dfb      	ldrb	r3, [r7, #23]
 8008a42:	1c5a      	adds	r2, r3, #1
 8008a44:	75fa      	strb	r2, [r7, #23]
 8008a46:	461a      	mov	r2, r3
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	4413      	add	r3, r2
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008a50:	e012      	b.n	8008a78 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	1c5a      	adds	r2, r3, #1
 8008a56:	60fa      	str	r2, [r7, #12]
 8008a58:	7dfa      	ldrb	r2, [r7, #23]
 8008a5a:	1c51      	adds	r1, r2, #1
 8008a5c:	75f9      	strb	r1, [r7, #23]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	440a      	add	r2, r1
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008a68:	7dfb      	ldrb	r3, [r7, #23]
 8008a6a:	1c5a      	adds	r2, r3, #1
 8008a6c:	75fa      	strb	r2, [r7, #23]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	4413      	add	r3, r2
 8008a74:	2200      	movs	r2, #0
 8008a76:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e8      	bne.n	8008a52 <USBD_GetString+0x4e>
    }
  }
}
 8008a80:	bf00      	nop
 8008a82:	3718      	adds	r7, #24
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008a94:	e005      	b.n	8008aa2 <USBD_GetLen+0x1a>
  {
    len++;
 8008a96:	7bfb      	ldrb	r3, [r7, #15]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	781b      	ldrb	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1f5      	bne.n	8008a96 <USBD_GetLen+0xe>
  }

  return len;
 8008aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bc80      	pop	{r7}
 8008ab4:	4770      	bx	lr

08008ab6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	60f8      	str	r0, [r7, #12]
 8008abe:	60b9      	str	r1, [r7, #8]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2202      	movs	r2, #2
 8008ac8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008acc:	88fa      	ldrh	r2, [r7, #6]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ad2:	88fa      	ldrh	r2, [r7, #6]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ad8:	88fb      	ldrh	r3, [r7, #6]
 8008ada:	68ba      	ldr	r2, [r7, #8]
 8008adc:	2100      	movs	r1, #0
 8008ade:	68f8      	ldr	r0, [r7, #12]
 8008ae0:	f000 fc65 	bl	80093ae <USBD_LL_Transmit>

  return USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	4613      	mov	r3, r2
 8008afa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008afc:	88fb      	ldrh	r3, [r7, #6]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	2100      	movs	r1, #0
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 fc53 	bl	80093ae <USBD_LL_Transmit>

  return USBD_OK;
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	60f8      	str	r0, [r7, #12]
 8008b1a:	60b9      	str	r1, [r7, #8]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2203      	movs	r2, #3
 8008b24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008b28:	88fa      	ldrh	r2, [r7, #6]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008b30:	88fa      	ldrh	r2, [r7, #6]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 fc58 	bl	80093f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	2100      	movs	r1, #0
 8008b62:	68f8      	ldr	r0, [r7, #12]
 8008b64:	f000 fc46 	bl	80093f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b082      	sub	sp, #8
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2204      	movs	r2, #4
 8008b7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b82:	2300      	movs	r3, #0
 8008b84:	2200      	movs	r2, #0
 8008b86:	2100      	movs	r1, #0
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fc10 	bl	80093ae <USBD_LL_Transmit>

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2205      	movs	r2, #5
 8008ba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	2200      	movs	r2, #0
 8008bac:	2100      	movs	r1, #0
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fc20 	bl	80093f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3708      	adds	r7, #8
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	4912      	ldr	r1, [pc, #72]	; (8008c10 <MX_USB_DEVICE_Init+0x50>)
 8008bc8:	4812      	ldr	r0, [pc, #72]	; (8008c14 <MX_USB_DEVICE_Init+0x54>)
 8008bca:	f7fe ff5e 	bl	8007a8a <USBD_Init>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d001      	beq.n	8008bd8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008bd4:	f7f8 fce4 	bl	80015a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008bd8:	490f      	ldr	r1, [pc, #60]	; (8008c18 <MX_USB_DEVICE_Init+0x58>)
 8008bda:	480e      	ldr	r0, [pc, #56]	; (8008c14 <MX_USB_DEVICE_Init+0x54>)
 8008bdc:	f7fe ff80 	bl	8007ae0 <USBD_RegisterClass>
 8008be0:	4603      	mov	r3, r0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d001      	beq.n	8008bea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008be6:	f7f8 fcdb 	bl	80015a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008bea:	490c      	ldr	r1, [pc, #48]	; (8008c1c <MX_USB_DEVICE_Init+0x5c>)
 8008bec:	4809      	ldr	r0, [pc, #36]	; (8008c14 <MX_USB_DEVICE_Init+0x54>)
 8008bee:	f7fe feb1 	bl	8007954 <USBD_CDC_RegisterInterface>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d001      	beq.n	8008bfc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008bf8:	f7f8 fcd2 	bl	80015a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008bfc:	4805      	ldr	r0, [pc, #20]	; (8008c14 <MX_USB_DEVICE_Init+0x54>)
 8008bfe:	f7fe ff88 	bl	8007b12 <USBD_Start>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008c08:	f7f8 fcca 	bl	80015a0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008c0c:	bf00      	nop
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	2000012c 	.word	0x2000012c
 8008c14:	200002dc 	.word	0x200002dc
 8008c18:	20000018 	.word	0x20000018
 8008c1c:	2000011c 	.word	0x2000011c

08008c20 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008c24:	2200      	movs	r2, #0
 8008c26:	4905      	ldr	r1, [pc, #20]	; (8008c3c <CDC_Init_FS+0x1c>)
 8008c28:	4805      	ldr	r0, [pc, #20]	; (8008c40 <CDC_Init_FS+0x20>)
 8008c2a:	f7fe fea9 	bl	8007980 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008c2e:	4905      	ldr	r1, [pc, #20]	; (8008c44 <CDC_Init_FS+0x24>)
 8008c30:	4803      	ldr	r0, [pc, #12]	; (8008c40 <CDC_Init_FS+0x20>)
 8008c32:	f7fe febe 	bl	80079b2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008c36:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	200009a0 	.word	0x200009a0
 8008c40:	200002dc 	.word	0x200002dc
 8008c44:	200005a0 	.word	0x200005a0

08008c48 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008c4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
	...

08008c58 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	4603      	mov	r3, r0
 8008c60:	6039      	str	r1, [r7, #0]
 8008c62:	71fb      	strb	r3, [r7, #7]
 8008c64:	4613      	mov	r3, r2
 8008c66:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008c68:	79fb      	ldrb	r3, [r7, #7]
 8008c6a:	2b23      	cmp	r3, #35	; 0x23
 8008c6c:	d84a      	bhi.n	8008d04 <CDC_Control_FS+0xac>
 8008c6e:	a201      	add	r2, pc, #4	; (adr r2, 8008c74 <CDC_Control_FS+0x1c>)
 8008c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c74:	08008d05 	.word	0x08008d05
 8008c78:	08008d05 	.word	0x08008d05
 8008c7c:	08008d05 	.word	0x08008d05
 8008c80:	08008d05 	.word	0x08008d05
 8008c84:	08008d05 	.word	0x08008d05
 8008c88:	08008d05 	.word	0x08008d05
 8008c8c:	08008d05 	.word	0x08008d05
 8008c90:	08008d05 	.word	0x08008d05
 8008c94:	08008d05 	.word	0x08008d05
 8008c98:	08008d05 	.word	0x08008d05
 8008c9c:	08008d05 	.word	0x08008d05
 8008ca0:	08008d05 	.word	0x08008d05
 8008ca4:	08008d05 	.word	0x08008d05
 8008ca8:	08008d05 	.word	0x08008d05
 8008cac:	08008d05 	.word	0x08008d05
 8008cb0:	08008d05 	.word	0x08008d05
 8008cb4:	08008d05 	.word	0x08008d05
 8008cb8:	08008d05 	.word	0x08008d05
 8008cbc:	08008d05 	.word	0x08008d05
 8008cc0:	08008d05 	.word	0x08008d05
 8008cc4:	08008d05 	.word	0x08008d05
 8008cc8:	08008d05 	.word	0x08008d05
 8008ccc:	08008d05 	.word	0x08008d05
 8008cd0:	08008d05 	.word	0x08008d05
 8008cd4:	08008d05 	.word	0x08008d05
 8008cd8:	08008d05 	.word	0x08008d05
 8008cdc:	08008d05 	.word	0x08008d05
 8008ce0:	08008d05 	.word	0x08008d05
 8008ce4:	08008d05 	.word	0x08008d05
 8008ce8:	08008d05 	.word	0x08008d05
 8008cec:	08008d05 	.word	0x08008d05
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d05 	.word	0x08008d05
 8008cf8:	08008d05 	.word	0x08008d05
 8008cfc:	08008d05 	.word	0x08008d05
 8008d00:	08008d05 	.word	0x08008d05
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008d04:	bf00      	nop
  }

  return (USBD_OK);
 8008d06:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bc80      	pop	{r7}
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop

08008d14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4805      	ldr	r0, [pc, #20]	; (8008d38 <CDC_Receive_FS+0x24>)
 8008d22:	f7fe fe46 	bl	80079b2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008d26:	4804      	ldr	r0, [pc, #16]	; (8008d38 <CDC_Receive_FS+0x24>)
 8008d28:	f7fe fe85 	bl	8007a36 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008d2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	200002dc 	.word	0x200002dc

08008d3c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	460b      	mov	r3, r1
 8008d46:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008d4c:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <CDC_Transmit_FS+0x48>)
 8008d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d52:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e00b      	b.n	8008d7a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008d62:	887b      	ldrh	r3, [r7, #2]
 8008d64:	461a      	mov	r2, r3
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	4806      	ldr	r0, [pc, #24]	; (8008d84 <CDC_Transmit_FS+0x48>)
 8008d6a:	f7fe fe09 	bl	8007980 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008d6e:	4805      	ldr	r0, [pc, #20]	; (8008d84 <CDC_Transmit_FS+0x48>)
 8008d70:	f7fe fe32 	bl	80079d8 <USBD_CDC_TransmitPacket>
 8008d74:	4603      	mov	r3, r0
 8008d76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3710      	adds	r7, #16
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	200002dc 	.word	0x200002dc

08008d88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	4603      	mov	r3, r0
 8008d90:	6039      	str	r1, [r7, #0]
 8008d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2212      	movs	r2, #18
 8008d98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008d9a:	4b03      	ldr	r3, [pc, #12]	; (8008da8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	370c      	adds	r7, #12
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bc80      	pop	{r7}
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	20000148 	.word	0x20000148

08008dac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	4603      	mov	r3, r0
 8008db4:	6039      	str	r1, [r7, #0]
 8008db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	2204      	movs	r2, #4
 8008dbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008dbe:	4b03      	ldr	r3, [pc, #12]	; (8008dcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	2000015c 	.word	0x2000015c

08008dd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	6039      	str	r1, [r7, #0]
 8008dda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ddc:	79fb      	ldrb	r3, [r7, #7]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d105      	bne.n	8008dee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	4907      	ldr	r1, [pc, #28]	; (8008e04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008de6:	4808      	ldr	r0, [pc, #32]	; (8008e08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008de8:	f7ff fe0c 	bl	8008a04 <USBD_GetString>
 8008dec:	e004      	b.n	8008df8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008dee:	683a      	ldr	r2, [r7, #0]
 8008df0:	4904      	ldr	r1, [pc, #16]	; (8008e04 <USBD_FS_ProductStrDescriptor+0x34>)
 8008df2:	4805      	ldr	r0, [pc, #20]	; (8008e08 <USBD_FS_ProductStrDescriptor+0x38>)
 8008df4:	f7ff fe06 	bl	8008a04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008df8:	4b02      	ldr	r3, [pc, #8]	; (8008e04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	20000da0 	.word	0x20000da0
 8008e08:	0800a154 	.word	0x0800a154

08008e0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	6039      	str	r1, [r7, #0]
 8008e16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008e18:	683a      	ldr	r2, [r7, #0]
 8008e1a:	4904      	ldr	r1, [pc, #16]	; (8008e2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008e1c:	4804      	ldr	r0, [pc, #16]	; (8008e30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008e1e:	f7ff fdf1 	bl	8008a04 <USBD_GetString>
  return USBD_StrDesc;
 8008e22:	4b02      	ldr	r3, [pc, #8]	; (8008e2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000da0 	.word	0x20000da0
 8008e30:	0800a168 	.word	0x0800a168

08008e34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	221a      	movs	r2, #26
 8008e44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008e46:	f000 f843 	bl	8008ed0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008e4a:	4b02      	ldr	r3, [pc, #8]	; (8008e54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	20000160 	.word	0x20000160

08008e58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008e64:	79fb      	ldrb	r3, [r7, #7]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	4907      	ldr	r1, [pc, #28]	; (8008e8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e6e:	4808      	ldr	r0, [pc, #32]	; (8008e90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e70:	f7ff fdc8 	bl	8008a04 <USBD_GetString>
 8008e74:	e004      	b.n	8008e80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	4904      	ldr	r1, [pc, #16]	; (8008e8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8008e7a:	4805      	ldr	r0, [pc, #20]	; (8008e90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008e7c:	f7ff fdc2 	bl	8008a04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000da0 	.word	0x20000da0
 8008e90:	0800a17c 	.word	0x0800a17c

08008e94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	6039      	str	r1, [r7, #0]
 8008e9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d105      	bne.n	8008eb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008ea6:	683a      	ldr	r2, [r7, #0]
 8008ea8:	4907      	ldr	r1, [pc, #28]	; (8008ec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eaa:	4808      	ldr	r0, [pc, #32]	; (8008ecc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eac:	f7ff fdaa 	bl	8008a04 <USBD_GetString>
 8008eb0:	e004      	b.n	8008ebc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	4904      	ldr	r1, [pc, #16]	; (8008ec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008eb6:	4805      	ldr	r0, [pc, #20]	; (8008ecc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008eb8:	f7ff fda4 	bl	8008a04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ebc:	4b02      	ldr	r3, [pc, #8]	; (8008ec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3708      	adds	r7, #8
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	20000da0 	.word	0x20000da0
 8008ecc:	0800a188 	.word	0x0800a188

08008ed0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ed6:	4b0f      	ldr	r3, [pc, #60]	; (8008f14 <Get_SerialNum+0x44>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008edc:	4b0e      	ldr	r3, [pc, #56]	; (8008f18 <Get_SerialNum+0x48>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008ee2:	4b0e      	ldr	r3, [pc, #56]	; (8008f1c <Get_SerialNum+0x4c>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4413      	add	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ef6:	2208      	movs	r2, #8
 8008ef8:	4909      	ldr	r1, [pc, #36]	; (8008f20 <Get_SerialNum+0x50>)
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 f814 	bl	8008f28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008f00:	2204      	movs	r2, #4
 8008f02:	4908      	ldr	r1, [pc, #32]	; (8008f24 <Get_SerialNum+0x54>)
 8008f04:	68b8      	ldr	r0, [r7, #8]
 8008f06:	f000 f80f 	bl	8008f28 <IntToUnicode>
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}
 8008f12:	bf00      	nop
 8008f14:	1ffff7e8 	.word	0x1ffff7e8
 8008f18:	1ffff7ec 	.word	0x1ffff7ec
 8008f1c:	1ffff7f0 	.word	0x1ffff7f0
 8008f20:	20000162 	.word	0x20000162
 8008f24:	20000172 	.word	0x20000172

08008f28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b087      	sub	sp, #28
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4613      	mov	r3, r2
 8008f34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	75fb      	strb	r3, [r7, #23]
 8008f3e:	e027      	b.n	8008f90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	0f1b      	lsrs	r3, r3, #28
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	d80b      	bhi.n	8008f60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	0f1b      	lsrs	r3, r3, #28
 8008f4c:	b2da      	uxtb	r2, r3
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	005b      	lsls	r3, r3, #1
 8008f52:	4619      	mov	r1, r3
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	440b      	add	r3, r1
 8008f58:	3230      	adds	r2, #48	; 0x30
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]
 8008f5e:	e00a      	b.n	8008f76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	0f1b      	lsrs	r3, r3, #28
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	7dfb      	ldrb	r3, [r7, #23]
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	4619      	mov	r1, r3
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	440b      	add	r3, r1
 8008f70:	3237      	adds	r2, #55	; 0x37
 8008f72:	b2d2      	uxtb	r2, r2
 8008f74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	011b      	lsls	r3, r3, #4
 8008f7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008f7c:	7dfb      	ldrb	r3, [r7, #23]
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	3301      	adds	r3, #1
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	4413      	add	r3, r2
 8008f86:	2200      	movs	r2, #0
 8008f88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
 8008f90:	7dfa      	ldrb	r2, [r7, #23]
 8008f92:	79fb      	ldrb	r3, [r7, #7]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d3d3      	bcc.n	8008f40 <IntToUnicode+0x18>
  }
}
 8008f98:	bf00      	nop
 8008f9a:	bf00      	nop
 8008f9c:	371c      	adds	r7, #28
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc80      	pop	{r7}
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0d      	ldr	r2, [pc, #52]	; (8008fe8 <HAL_PCD_MspInit+0x44>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d113      	bne.n	8008fde <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	; (8008fec <HAL_PCD_MspInit+0x48>)
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	4a0c      	ldr	r2, [pc, #48]	; (8008fec <HAL_PCD_MspInit+0x48>)
 8008fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fc0:	61d3      	str	r3, [r2, #28]
 8008fc2:	4b0a      	ldr	r3, [pc, #40]	; (8008fec <HAL_PCD_MspInit+0x48>)
 8008fc4:	69db      	ldr	r3, [r3, #28]
 8008fc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fca:	60fb      	str	r3, [r7, #12]
 8008fcc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	2014      	movs	r0, #20
 8008fd4:	f7f8 fd6d 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008fd8:	2014      	movs	r0, #20
 8008fda:	f7f8 fd86 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	40005c00 	.word	0x40005c00
 8008fec:	40021000 	.word	0x40021000

08008ff0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009004:	4619      	mov	r1, r3
 8009006:	4610      	mov	r0, r2
 8009008:	f7fe fdcb 	bl	8007ba2 <USBD_LL_SetupStage>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	460b      	mov	r3, r1
 800901e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009026:	78fa      	ldrb	r2, [r7, #3]
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	4613      	mov	r3, r2
 800902c:	009b      	lsls	r3, r3, #2
 800902e:	4413      	add	r3, r2
 8009030:	00db      	lsls	r3, r3, #3
 8009032:	440b      	add	r3, r1
 8009034:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	4619      	mov	r1, r3
 800903e:	f7fe fdfd 	bl	8007c3c <USBD_LL_DataOutStage>
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	440b      	add	r3, r1
 800906a:	333c      	adds	r3, #60	; 0x3c
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	78fb      	ldrb	r3, [r7, #3]
 8009070:	4619      	mov	r1, r3
 8009072:	f7fe fe54 	bl	8007d1e <USBD_LL_DataInStage>
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800908c:	4618      	mov	r0, r3
 800908e:	f7fe ff64 	bl	8007f5a <USBD_LL_SOF>
}
 8009092:	bf00      	nop
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b084      	sub	sp, #16
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80090a2:	2301      	movs	r3, #1
 80090a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d001      	beq.n	80090b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80090ae:	f7f8 fa77 	bl	80015a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090b8:	7bfa      	ldrb	r2, [r7, #15]
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f7fe ff14 	bl	8007eea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fe fecd 	bl	8007e68 <USBD_LL_Reset>
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
	...

080090d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fe ff0e 	bl	8007f08 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d005      	beq.n	8009100 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090f4:	4b04      	ldr	r3, [pc, #16]	; (8009108 <HAL_PCD_SuspendCallback+0x30>)
 80090f6:	691b      	ldr	r3, [r3, #16]
 80090f8:	4a03      	ldr	r2, [pc, #12]	; (8009108 <HAL_PCD_SuspendCallback+0x30>)
 80090fa:	f043 0306 	orr.w	r3, r3, #6
 80090fe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009100:	bf00      	nop
 8009102:	3708      	adds	r7, #8
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	e000ed00 	.word	0xe000ed00

0800910c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe ff08 	bl	8007f30 <USBD_LL_Resume>
}
 8009120:	bf00      	nop
 8009122:	3708      	adds	r7, #8
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}

08009128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009130:	4a28      	ldr	r2, [pc, #160]	; (80091d4 <USBD_LL_Init+0xac>)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a26      	ldr	r2, [pc, #152]	; (80091d4 <USBD_LL_Init+0xac>)
 800913c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009140:	4b24      	ldr	r3, [pc, #144]	; (80091d4 <USBD_LL_Init+0xac>)
 8009142:	4a25      	ldr	r2, [pc, #148]	; (80091d8 <USBD_LL_Init+0xb0>)
 8009144:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009146:	4b23      	ldr	r3, [pc, #140]	; (80091d4 <USBD_LL_Init+0xac>)
 8009148:	2208      	movs	r2, #8
 800914a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800914c:	4b21      	ldr	r3, [pc, #132]	; (80091d4 <USBD_LL_Init+0xac>)
 800914e:	2202      	movs	r2, #2
 8009150:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009152:	4b20      	ldr	r3, [pc, #128]	; (80091d4 <USBD_LL_Init+0xac>)
 8009154:	2200      	movs	r2, #0
 8009156:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009158:	4b1e      	ldr	r3, [pc, #120]	; (80091d4 <USBD_LL_Init+0xac>)
 800915a:	2200      	movs	r2, #0
 800915c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800915e:	4b1d      	ldr	r3, [pc, #116]	; (80091d4 <USBD_LL_Init+0xac>)
 8009160:	2200      	movs	r2, #0
 8009162:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009164:	481b      	ldr	r0, [pc, #108]	; (80091d4 <USBD_LL_Init+0xac>)
 8009166:	f7f8 fe77 	bl	8001e58 <HAL_PCD_Init>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009170:	f7f8 fa16 	bl	80015a0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800917a:	2318      	movs	r3, #24
 800917c:	2200      	movs	r2, #0
 800917e:	2100      	movs	r1, #0
 8009180:	f7fa faeb 	bl	800375a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800918a:	2358      	movs	r3, #88	; 0x58
 800918c:	2200      	movs	r2, #0
 800918e:	2180      	movs	r1, #128	; 0x80
 8009190:	f7fa fae3 	bl	800375a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800919a:	23c0      	movs	r3, #192	; 0xc0
 800919c:	2200      	movs	r2, #0
 800919e:	2181      	movs	r1, #129	; 0x81
 80091a0:	f7fa fadb 	bl	800375a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091aa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80091ae:	2200      	movs	r2, #0
 80091b0:	2101      	movs	r1, #1
 80091b2:	f7fa fad2 	bl	800375a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80091bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091c0:	2200      	movs	r2, #0
 80091c2:	2182      	movs	r1, #130	; 0x82
 80091c4:	f7fa fac9 	bl	800375a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	bf00      	nop
 80091d4:	20000fa0 	.word	0x20000fa0
 80091d8:	40005c00 	.word	0x40005c00

080091dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e4:	2300      	movs	r3, #0
 80091e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7f8 ff3b 	bl	800206e <HAL_PCD_Start>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 f94e 	bl	80094a0 <USBD_Get_USB_Status>
 8009204:	4603      	mov	r3, r0
 8009206:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009208:	7bbb      	ldrb	r3, [r7, #14]
}
 800920a:	4618      	mov	r0, r3
 800920c:	3710      	adds	r7, #16
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b084      	sub	sp, #16
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	4608      	mov	r0, r1
 800921c:	4611      	mov	r1, r2
 800921e:	461a      	mov	r2, r3
 8009220:	4603      	mov	r3, r0
 8009222:	70fb      	strb	r3, [r7, #3]
 8009224:	460b      	mov	r3, r1
 8009226:	70bb      	strb	r3, [r7, #2]
 8009228:	4613      	mov	r3, r2
 800922a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800922c:	2300      	movs	r3, #0
 800922e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009230:	2300      	movs	r3, #0
 8009232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800923a:	78bb      	ldrb	r3, [r7, #2]
 800923c:	883a      	ldrh	r2, [r7, #0]
 800923e:	78f9      	ldrb	r1, [r7, #3]
 8009240:	f7f9 f8b3 	bl	80023aa <HAL_PCD_EP_Open>
 8009244:	4603      	mov	r3, r0
 8009246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009248:	7bfb      	ldrb	r3, [r7, #15]
 800924a:	4618      	mov	r0, r3
 800924c:	f000 f928 	bl	80094a0 <USBD_Get_USB_Status>
 8009250:	4603      	mov	r3, r0
 8009252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009254:	7bbb      	ldrb	r3, [r7, #14]
}
 8009256:	4618      	mov	r0, r3
 8009258:	3710      	adds	r7, #16
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b084      	sub	sp, #16
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009278:	78fa      	ldrb	r2, [r7, #3]
 800927a:	4611      	mov	r1, r2
 800927c:	4618      	mov	r0, r3
 800927e:	f7f9 f8fa 	bl	8002476 <HAL_PCD_EP_Close>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	4618      	mov	r0, r3
 800928a:	f000 f909 	bl	80094a0 <USBD_Get_USB_Status>
 800928e:	4603      	mov	r3, r0
 8009290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009292:	7bbb      	ldrb	r3, [r7, #14]
}
 8009294:	4618      	mov	r0, r3
 8009296:	3710      	adds	r7, #16
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	460b      	mov	r3, r1
 80092a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092a8:	2300      	movs	r3, #0
 80092aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ac:	2300      	movs	r3, #0
 80092ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7f9 f9ba 	bl	8002634 <HAL_PCD_EP_SetStall>
 80092c0:	4603      	mov	r3, r0
 80092c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092c4:	7bfb      	ldrb	r3, [r7, #15]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f000 f8ea 	bl	80094a0 <USBD_Get_USB_Status>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}

080092da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	460b      	mov	r3, r1
 80092e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	4611      	mov	r1, r2
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7f9 f9fb 	bl	80026f4 <HAL_PCD_EP_ClrStall>
 80092fe:	4603      	mov	r3, r0
 8009300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	4618      	mov	r0, r3
 8009306:	f000 f8cb 	bl	80094a0 <USBD_Get_USB_Status>
 800930a:	4603      	mov	r3, r0
 800930c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800930e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009310:	4618      	mov	r0, r3
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800932a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800932c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009330:	2b00      	cmp	r3, #0
 8009332:	da0c      	bge.n	800934e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009334:	78fb      	ldrb	r3, [r7, #3]
 8009336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933a:	68f9      	ldr	r1, [r7, #12]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	4613      	mov	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	4413      	add	r3, r2
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	440b      	add	r3, r1
 8009348:	3302      	adds	r3, #2
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	e00b      	b.n	8009366 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800934e:	78fb      	ldrb	r3, [r7, #3]
 8009350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009354:	68f9      	ldr	r1, [r7, #12]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	440b      	add	r3, r1
 8009360:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009364:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009366:	4618      	mov	r0, r3
 8009368:	3714      	adds	r7, #20
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr

08009370 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	460b      	mov	r3, r1
 800937a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009380:	2300      	movs	r3, #0
 8009382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	4611      	mov	r1, r2
 800938e:	4618      	mov	r0, r3
 8009390:	f7f8 ffe6 	bl	8002360 <HAL_PCD_SetAddress>
 8009394:	4603      	mov	r3, r0
 8009396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009398:	7bfb      	ldrb	r3, [r7, #15]
 800939a:	4618      	mov	r0, r3
 800939c:	f000 f880 	bl	80094a0 <USBD_Get_USB_Status>
 80093a0:	4603      	mov	r3, r0
 80093a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b086      	sub	sp, #24
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	60f8      	str	r0, [r7, #12]
 80093b6:	607a      	str	r2, [r7, #4]
 80093b8:	461a      	mov	r2, r3
 80093ba:	460b      	mov	r3, r1
 80093bc:	72fb      	strb	r3, [r7, #11]
 80093be:	4613      	mov	r3, r2
 80093c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80093d0:	893b      	ldrh	r3, [r7, #8]
 80093d2:	7af9      	ldrb	r1, [r7, #11]
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	f7f9 f8ea 	bl	80025ae <HAL_PCD_EP_Transmit>
 80093da:	4603      	mov	r3, r0
 80093dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093de:	7dfb      	ldrb	r3, [r7, #23]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f000 f85d 	bl	80094a0 <USBD_Get_USB_Status>
 80093e6:	4603      	mov	r3, r0
 80093e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80093ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	461a      	mov	r2, r3
 8009400:	460b      	mov	r3, r1
 8009402:	72fb      	strb	r3, [r7, #11]
 8009404:	4613      	mov	r3, r2
 8009406:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009408:	2300      	movs	r3, #0
 800940a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009416:	893b      	ldrh	r3, [r7, #8]
 8009418:	7af9      	ldrb	r1, [r7, #11]
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	f7f9 f873 	bl	8002506 <HAL_PCD_EP_Receive>
 8009420:	4603      	mov	r3, r0
 8009422:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	4618      	mov	r0, r3
 8009428:	f000 f83a 	bl	80094a0 <USBD_Get_USB_Status>
 800942c:	4603      	mov	r3, r0
 800942e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009430:	7dbb      	ldrb	r3, [r7, #22]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	4611      	mov	r1, r2
 8009450:	4618      	mov	r0, r3
 8009452:	f7f9 f895 	bl	8002580 <HAL_PCD_EP_GetRxCount>
 8009456:	4603      	mov	r3, r0
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009468:	4b02      	ldr	r3, [pc, #8]	; (8009474 <USBD_static_malloc+0x14>)
}
 800946a:	4618      	mov	r0, r3
 800946c:	370c      	adds	r7, #12
 800946e:	46bd      	mov	sp, r7
 8009470:	bc80      	pop	{r7}
 8009472:	4770      	bx	lr
 8009474:	2000128c 	.word	0x2000128c

08009478 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]

}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	bc80      	pop	{r7}
 8009488:	4770      	bx	lr

0800948a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800948a:	b480      	push	{r7}
 800948c:	b083      	sub	sp, #12
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
 8009492:	460b      	mov	r3, r1
 8009494:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009496:	bf00      	nop
 8009498:	370c      	adds	r7, #12
 800949a:	46bd      	mov	sp, r7
 800949c:	bc80      	pop	{r7}
 800949e:	4770      	bx	lr

080094a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	4603      	mov	r3, r0
 80094a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b03      	cmp	r3, #3
 80094b2:	d817      	bhi.n	80094e4 <USBD_Get_USB_Status+0x44>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <USBD_Get_USB_Status+0x1c>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	080094cd 	.word	0x080094cd
 80094c0:	080094d3 	.word	0x080094d3
 80094c4:	080094d9 	.word	0x080094d9
 80094c8:	080094df 	.word	0x080094df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	73fb      	strb	r3, [r7, #15]
    break;
 80094d0:	e00b      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094d2:	2302      	movs	r3, #2
 80094d4:	73fb      	strb	r3, [r7, #15]
    break;
 80094d6:	e008      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094d8:	2301      	movs	r3, #1
 80094da:	73fb      	strb	r3, [r7, #15]
    break;
 80094dc:	e005      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094de:	2302      	movs	r3, #2
 80094e0:	73fb      	strb	r3, [r7, #15]
    break;
 80094e2:	e002      	b.n	80094ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094e4:	2302      	movs	r3, #2
 80094e6:	73fb      	strb	r3, [r7, #15]
    break;
 80094e8:	bf00      	nop
  }
  return usb_status;
 80094ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bc80      	pop	{r7}
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop

080094f8 <fmod>:
 80094f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094fc:	4680      	mov	r8, r0
 80094fe:	4689      	mov	r9, r1
 8009500:	4616      	mov	r6, r2
 8009502:	461f      	mov	r7, r3
 8009504:	f000 f820 	bl	8009548 <__ieee754_fmod>
 8009508:	4632      	mov	r2, r6
 800950a:	4604      	mov	r4, r0
 800950c:	460d      	mov	r5, r1
 800950e:	463b      	mov	r3, r7
 8009510:	4640      	mov	r0, r8
 8009512:	4649      	mov	r1, r9
 8009514:	f7f7 fb2c 	bl	8000b70 <__aeabi_dcmpun>
 8009518:	b990      	cbnz	r0, 8009540 <fmod+0x48>
 800951a:	2200      	movs	r2, #0
 800951c:	2300      	movs	r3, #0
 800951e:	4630      	mov	r0, r6
 8009520:	4639      	mov	r1, r7
 8009522:	f7f7 faf3 	bl	8000b0c <__aeabi_dcmpeq>
 8009526:	b158      	cbz	r0, 8009540 <fmod+0x48>
 8009528:	f000 f91e 	bl	8009768 <__errno>
 800952c:	2321      	movs	r3, #33	; 0x21
 800952e:	2200      	movs	r2, #0
 8009530:	6003      	str	r3, [r0, #0]
 8009532:	2300      	movs	r3, #0
 8009534:	4610      	mov	r0, r2
 8009536:	4619      	mov	r1, r3
 8009538:	f7f7 f9aa 	bl	8000890 <__aeabi_ddiv>
 800953c:	4604      	mov	r4, r0
 800953e:	460d      	mov	r5, r1
 8009540:	4620      	mov	r0, r4
 8009542:	4629      	mov	r1, r5
 8009544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08009548 <__ieee754_fmod>:
 8009548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800954c:	f023 4800 	bic.w	r8, r3, #2147483648	; 0x80000000
 8009550:	460e      	mov	r6, r1
 8009552:	461d      	mov	r5, r3
 8009554:	4619      	mov	r1, r3
 8009556:	ea58 0302 	orrs.w	r3, r8, r2
 800955a:	4607      	mov	r7, r0
 800955c:	4614      	mov	r4, r2
 800955e:	4694      	mov	ip, r2
 8009560:	4696      	mov	lr, r2
 8009562:	d00c      	beq.n	800957e <__ieee754_fmod+0x36>
 8009564:	4a7a      	ldr	r2, [pc, #488]	; (8009750 <__ieee754_fmod+0x208>)
 8009566:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800956a:	4293      	cmp	r3, r2
 800956c:	46b2      	mov	sl, r6
 800956e:	dc06      	bgt.n	800957e <__ieee754_fmod+0x36>
 8009570:	4262      	negs	r2, r4
 8009572:	4878      	ldr	r0, [pc, #480]	; (8009754 <__ieee754_fmod+0x20c>)
 8009574:	4322      	orrs	r2, r4
 8009576:	ea48 72d2 	orr.w	r2, r8, r2, lsr #31
 800957a:	4282      	cmp	r2, r0
 800957c:	d90c      	bls.n	8009598 <__ieee754_fmod+0x50>
 800957e:	460b      	mov	r3, r1
 8009580:	4622      	mov	r2, r4
 8009582:	4638      	mov	r0, r7
 8009584:	4631      	mov	r1, r6
 8009586:	f7f7 f859 	bl	800063c <__aeabi_dmul>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	f7f7 f97f 	bl	8000890 <__aeabi_ddiv>
 8009592:	4607      	mov	r7, r0
 8009594:	460e      	mov	r6, r1
 8009596:	e00e      	b.n	80095b6 <__ieee754_fmod+0x6e>
 8009598:	4543      	cmp	r3, r8
 800959a:	46b9      	mov	r9, r7
 800959c:	4639      	mov	r1, r7
 800959e:	f006 4400 	and.w	r4, r6, #2147483648	; 0x80000000
 80095a2:	dc0c      	bgt.n	80095be <__ieee754_fmod+0x76>
 80095a4:	db07      	blt.n	80095b6 <__ieee754_fmod+0x6e>
 80095a6:	4567      	cmp	r7, ip
 80095a8:	d305      	bcc.n	80095b6 <__ieee754_fmod+0x6e>
 80095aa:	d108      	bne.n	80095be <__ieee754_fmod+0x76>
 80095ac:	4b6a      	ldr	r3, [pc, #424]	; (8009758 <__ieee754_fmod+0x210>)
 80095ae:	eb03 7414 	add.w	r4, r3, r4, lsr #28
 80095b2:	e9d4 7600 	ldrd	r7, r6, [r4]
 80095b6:	4638      	mov	r0, r7
 80095b8:	4631      	mov	r1, r6
 80095ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095be:	ea1a 0f00 	tst.w	sl, r0
 80095c2:	d14a      	bne.n	800965a <__ieee754_fmod+0x112>
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d141      	bne.n	800964c <__ieee754_fmod+0x104>
 80095c8:	464a      	mov	r2, r9
 80095ca:	4864      	ldr	r0, [pc, #400]	; (800975c <__ieee754_fmod+0x214>)
 80095cc:	2a00      	cmp	r2, #0
 80095ce:	dc3a      	bgt.n	8009646 <__ieee754_fmod+0xfe>
 80095d0:	4a60      	ldr	r2, [pc, #384]	; (8009754 <__ieee754_fmod+0x20c>)
 80095d2:	402a      	ands	r2, r5
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	d14f      	bne.n	8009678 <__ieee754_fmod+0x130>
 80095d8:	f1b8 0f00 	cmp.w	r8, #0
 80095dc:	d144      	bne.n	8009668 <__ieee754_fmod+0x120>
 80095de:	4666      	mov	r6, ip
 80095e0:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	dc3c      	bgt.n	8009662 <__ieee754_fmod+0x11a>
 80095e8:	4e5d      	ldr	r6, [pc, #372]	; (8009760 <__ieee754_fmod+0x218>)
 80095ea:	42b0      	cmp	r0, r6
 80095ec:	db49      	blt.n	8009682 <__ieee754_fmod+0x13a>
 80095ee:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80095f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095f6:	4e5a      	ldr	r6, [pc, #360]	; (8009760 <__ieee754_fmod+0x218>)
 80095f8:	42b2      	cmp	r2, r6
 80095fa:	db54      	blt.n	80096a6 <__ieee754_fmod+0x15e>
 80095fc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009600:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8009604:	1a80      	subs	r0, r0, r2
 8009606:	1b5e      	subs	r6, r3, r5
 8009608:	eba1 070e 	sub.w	r7, r1, lr
 800960c:	2800      	cmp	r0, #0
 800960e:	d161      	bne.n	80096d4 <__ieee754_fmod+0x18c>
 8009610:	4571      	cmp	r1, lr
 8009612:	bf38      	it	cc
 8009614:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 8009618:	2e00      	cmp	r6, #0
 800961a:	bfa4      	itt	ge
 800961c:	4639      	movge	r1, r7
 800961e:	4633      	movge	r3, r6
 8009620:	ea53 0001 	orrs.w	r0, r3, r1
 8009624:	d0c2      	beq.n	80095ac <__ieee754_fmod+0x64>
 8009626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800962a:	db68      	blt.n	80096fe <__ieee754_fmod+0x1b6>
 800962c:	484c      	ldr	r0, [pc, #304]	; (8009760 <__ieee754_fmod+0x218>)
 800962e:	4282      	cmp	r2, r0
 8009630:	db6b      	blt.n	800970a <__ieee754_fmod+0x1c2>
 8009632:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009636:	431c      	orrs	r4, r3
 8009638:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800963c:	ea44 5902 	orr.w	r9, r4, r2, lsl #20
 8009640:	460f      	mov	r7, r1
 8009642:	464e      	mov	r6, r9
 8009644:	e7b7      	b.n	80095b6 <__ieee754_fmod+0x6e>
 8009646:	3801      	subs	r0, #1
 8009648:	0052      	lsls	r2, r2, #1
 800964a:	e7bf      	b.n	80095cc <__ieee754_fmod+0x84>
 800964c:	4844      	ldr	r0, [pc, #272]	; (8009760 <__ieee754_fmod+0x218>)
 800964e:	02da      	lsls	r2, r3, #11
 8009650:	2a00      	cmp	r2, #0
 8009652:	ddbd      	ble.n	80095d0 <__ieee754_fmod+0x88>
 8009654:	3801      	subs	r0, #1
 8009656:	0052      	lsls	r2, r2, #1
 8009658:	e7fa      	b.n	8009650 <__ieee754_fmod+0x108>
 800965a:	1518      	asrs	r0, r3, #20
 800965c:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8009660:	e7b6      	b.n	80095d0 <__ieee754_fmod+0x88>
 8009662:	3a01      	subs	r2, #1
 8009664:	0076      	lsls	r6, r6, #1
 8009666:	e7bd      	b.n	80095e4 <__ieee754_fmod+0x9c>
 8009668:	4a3d      	ldr	r2, [pc, #244]	; (8009760 <__ieee754_fmod+0x218>)
 800966a:	ea4f 26c8 	mov.w	r6, r8, lsl #11
 800966e:	2e00      	cmp	r6, #0
 8009670:	ddba      	ble.n	80095e8 <__ieee754_fmod+0xa0>
 8009672:	3a01      	subs	r2, #1
 8009674:	0076      	lsls	r6, r6, #1
 8009676:	e7fa      	b.n	800966e <__ieee754_fmod+0x126>
 8009678:	ea4f 5228 	mov.w	r2, r8, asr #20
 800967c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009680:	e7b2      	b.n	80095e8 <__ieee754_fmod+0xa0>
 8009682:	1a31      	subs	r1, r6, r0
 8009684:	291f      	cmp	r1, #31
 8009686:	dc08      	bgt.n	800969a <__ieee754_fmod+0x152>
 8009688:	f200 461e 	addw	r6, r0, #1054	; 0x41e
 800968c:	408b      	lsls	r3, r1
 800968e:	fa29 f606 	lsr.w	r6, r9, r6
 8009692:	4333      	orrs	r3, r6
 8009694:	fa09 f101 	lsl.w	r1, r9, r1
 8009698:	e7ad      	b.n	80095f6 <__ieee754_fmod+0xae>
 800969a:	4b32      	ldr	r3, [pc, #200]	; (8009764 <__ieee754_fmod+0x21c>)
 800969c:	2100      	movs	r1, #0
 800969e:	1a1b      	subs	r3, r3, r0
 80096a0:	fa09 f303 	lsl.w	r3, r9, r3
 80096a4:	e7a7      	b.n	80095f6 <__ieee754_fmod+0xae>
 80096a6:	eba6 0e02 	sub.w	lr, r6, r2
 80096aa:	f1be 0f1f 	cmp.w	lr, #31
 80096ae:	dc0a      	bgt.n	80096c6 <__ieee754_fmod+0x17e>
 80096b0:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 80096b4:	fa08 f80e 	lsl.w	r8, r8, lr
 80096b8:	fa2c f505 	lsr.w	r5, ip, r5
 80096bc:	ea45 0508 	orr.w	r5, r5, r8
 80096c0:	fa0c fe0e 	lsl.w	lr, ip, lr
 80096c4:	e79e      	b.n	8009604 <__ieee754_fmod+0xbc>
 80096c6:	4d27      	ldr	r5, [pc, #156]	; (8009764 <__ieee754_fmod+0x21c>)
 80096c8:	f04f 0e00 	mov.w	lr, #0
 80096cc:	1aad      	subs	r5, r5, r2
 80096ce:	fa0c f505 	lsl.w	r5, ip, r5
 80096d2:	e797      	b.n	8009604 <__ieee754_fmod+0xbc>
 80096d4:	4571      	cmp	r1, lr
 80096d6:	bf38      	it	cc
 80096d8:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 80096dc:	2e00      	cmp	r6, #0
 80096de:	da05      	bge.n	80096ec <__ieee754_fmod+0x1a4>
 80096e0:	0fce      	lsrs	r6, r1, #31
 80096e2:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 80096e6:	0049      	lsls	r1, r1, #1
 80096e8:	3801      	subs	r0, #1
 80096ea:	e78c      	b.n	8009606 <__ieee754_fmod+0xbe>
 80096ec:	ea56 0307 	orrs.w	r3, r6, r7
 80096f0:	f43f af5c 	beq.w	80095ac <__ieee754_fmod+0x64>
 80096f4:	0ffb      	lsrs	r3, r7, #31
 80096f6:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80096fa:	0079      	lsls	r1, r7, #1
 80096fc:	e7f4      	b.n	80096e8 <__ieee754_fmod+0x1a0>
 80096fe:	0fc8      	lsrs	r0, r1, #31
 8009700:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009704:	0049      	lsls	r1, r1, #1
 8009706:	3a01      	subs	r2, #1
 8009708:	e78d      	b.n	8009626 <__ieee754_fmod+0xde>
 800970a:	1a80      	subs	r0, r0, r2
 800970c:	2814      	cmp	r0, #20
 800970e:	dc0a      	bgt.n	8009726 <__ieee754_fmod+0x1de>
 8009710:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8009714:	fa03 f202 	lsl.w	r2, r3, r2
 8009718:	40c1      	lsrs	r1, r0
 800971a:	430a      	orrs	r2, r1
 800971c:	4103      	asrs	r3, r0
 800971e:	4610      	mov	r0, r2
 8009720:	ea43 0104 	orr.w	r1, r3, r4
 8009724:	e735      	b.n	8009592 <__ieee754_fmod+0x4a>
 8009726:	281f      	cmp	r0, #31
 8009728:	dc07      	bgt.n	800973a <__ieee754_fmod+0x1f2>
 800972a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800972e:	40c1      	lsrs	r1, r0
 8009730:	fa03 f202 	lsl.w	r2, r3, r2
 8009734:	430a      	orrs	r2, r1
 8009736:	4623      	mov	r3, r4
 8009738:	e7f1      	b.n	800971e <__ieee754_fmod+0x1d6>
 800973a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800973e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009742:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8009746:	32e2      	adds	r2, #226	; 0xe2
 8009748:	fa43 f202 	asr.w	r2, r3, r2
 800974c:	e7f3      	b.n	8009736 <__ieee754_fmod+0x1ee>
 800974e:	bf00      	nop
 8009750:	7fefffff 	.word	0x7fefffff
 8009754:	7ff00000 	.word	0x7ff00000
 8009758:	0800a1a8 	.word	0x0800a1a8
 800975c:	fffffbed 	.word	0xfffffbed
 8009760:	fffffc02 	.word	0xfffffc02
 8009764:	fffffbe2 	.word	0xfffffbe2

08009768 <__errno>:
 8009768:	4b01      	ldr	r3, [pc, #4]	; (8009770 <__errno+0x8>)
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	2000017c 	.word	0x2000017c

08009774 <__libc_init_array>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	2600      	movs	r6, #0
 8009778:	4d0c      	ldr	r5, [pc, #48]	; (80097ac <__libc_init_array+0x38>)
 800977a:	4c0d      	ldr	r4, [pc, #52]	; (80097b0 <__libc_init_array+0x3c>)
 800977c:	1b64      	subs	r4, r4, r5
 800977e:	10a4      	asrs	r4, r4, #2
 8009780:	42a6      	cmp	r6, r4
 8009782:	d109      	bne.n	8009798 <__libc_init_array+0x24>
 8009784:	f000 fc9c 	bl	800a0c0 <_init>
 8009788:	2600      	movs	r6, #0
 800978a:	4d0a      	ldr	r5, [pc, #40]	; (80097b4 <__libc_init_array+0x40>)
 800978c:	4c0a      	ldr	r4, [pc, #40]	; (80097b8 <__libc_init_array+0x44>)
 800978e:	1b64      	subs	r4, r4, r5
 8009790:	10a4      	asrs	r4, r4, #2
 8009792:	42a6      	cmp	r6, r4
 8009794:	d105      	bne.n	80097a2 <__libc_init_array+0x2e>
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	f855 3b04 	ldr.w	r3, [r5], #4
 800979c:	4798      	blx	r3
 800979e:	3601      	adds	r6, #1
 80097a0:	e7ee      	b.n	8009780 <__libc_init_array+0xc>
 80097a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a6:	4798      	blx	r3
 80097a8:	3601      	adds	r6, #1
 80097aa:	e7f2      	b.n	8009792 <__libc_init_array+0x1e>
 80097ac:	0800a1ec 	.word	0x0800a1ec
 80097b0:	0800a1ec 	.word	0x0800a1ec
 80097b4:	0800a1ec 	.word	0x0800a1ec
 80097b8:	0800a1f4 	.word	0x0800a1f4

080097bc <memset>:
 80097bc:	4603      	mov	r3, r0
 80097be:	4402      	add	r2, r0
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d100      	bne.n	80097c6 <memset+0xa>
 80097c4:	4770      	bx	lr
 80097c6:	f803 1b01 	strb.w	r1, [r3], #1
 80097ca:	e7f9      	b.n	80097c0 <memset+0x4>

080097cc <siprintf>:
 80097cc:	b40e      	push	{r1, r2, r3}
 80097ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097d2:	b500      	push	{lr}
 80097d4:	b09c      	sub	sp, #112	; 0x70
 80097d6:	ab1d      	add	r3, sp, #116	; 0x74
 80097d8:	9002      	str	r0, [sp, #8]
 80097da:	9006      	str	r0, [sp, #24]
 80097dc:	9107      	str	r1, [sp, #28]
 80097de:	9104      	str	r1, [sp, #16]
 80097e0:	4808      	ldr	r0, [pc, #32]	; (8009804 <siprintf+0x38>)
 80097e2:	4909      	ldr	r1, [pc, #36]	; (8009808 <siprintf+0x3c>)
 80097e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e8:	9105      	str	r1, [sp, #20]
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	a902      	add	r1, sp, #8
 80097ee:	9301      	str	r3, [sp, #4]
 80097f0:	f000 f868 	bl	80098c4 <_svfiprintf_r>
 80097f4:	2200      	movs	r2, #0
 80097f6:	9b02      	ldr	r3, [sp, #8]
 80097f8:	701a      	strb	r2, [r3, #0]
 80097fa:	b01c      	add	sp, #112	; 0x70
 80097fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009800:	b003      	add	sp, #12
 8009802:	4770      	bx	lr
 8009804:	2000017c 	.word	0x2000017c
 8009808:	ffff0208 	.word	0xffff0208

0800980c <__ssputs_r>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	688e      	ldr	r6, [r1, #8]
 8009812:	4682      	mov	sl, r0
 8009814:	429e      	cmp	r6, r3
 8009816:	460c      	mov	r4, r1
 8009818:	4690      	mov	r8, r2
 800981a:	461f      	mov	r7, r3
 800981c:	d838      	bhi.n	8009890 <__ssputs_r+0x84>
 800981e:	898a      	ldrh	r2, [r1, #12]
 8009820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009824:	d032      	beq.n	800988c <__ssputs_r+0x80>
 8009826:	6825      	ldr	r5, [r4, #0]
 8009828:	6909      	ldr	r1, [r1, #16]
 800982a:	3301      	adds	r3, #1
 800982c:	eba5 0901 	sub.w	r9, r5, r1
 8009830:	6965      	ldr	r5, [r4, #20]
 8009832:	444b      	add	r3, r9
 8009834:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009838:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800983c:	106d      	asrs	r5, r5, #1
 800983e:	429d      	cmp	r5, r3
 8009840:	bf38      	it	cc
 8009842:	461d      	movcc	r5, r3
 8009844:	0553      	lsls	r3, r2, #21
 8009846:	d531      	bpl.n	80098ac <__ssputs_r+0xa0>
 8009848:	4629      	mov	r1, r5
 800984a:	f000 fb6f 	bl	8009f2c <_malloc_r>
 800984e:	4606      	mov	r6, r0
 8009850:	b950      	cbnz	r0, 8009868 <__ssputs_r+0x5c>
 8009852:	230c      	movs	r3, #12
 8009854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009858:	f8ca 3000 	str.w	r3, [sl]
 800985c:	89a3      	ldrh	r3, [r4, #12]
 800985e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009862:	81a3      	strh	r3, [r4, #12]
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	464a      	mov	r2, r9
 800986a:	6921      	ldr	r1, [r4, #16]
 800986c:	f000 face 	bl	8009e0c <memcpy>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	6126      	str	r6, [r4, #16]
 800987e:	444e      	add	r6, r9
 8009880:	6026      	str	r6, [r4, #0]
 8009882:	463e      	mov	r6, r7
 8009884:	6165      	str	r5, [r4, #20]
 8009886:	eba5 0509 	sub.w	r5, r5, r9
 800988a:	60a5      	str	r5, [r4, #8]
 800988c:	42be      	cmp	r6, r7
 800988e:	d900      	bls.n	8009892 <__ssputs_r+0x86>
 8009890:	463e      	mov	r6, r7
 8009892:	4632      	mov	r2, r6
 8009894:	4641      	mov	r1, r8
 8009896:	6820      	ldr	r0, [r4, #0]
 8009898:	f000 fac6 	bl	8009e28 <memmove>
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	2000      	movs	r0, #0
 80098a0:	1b9b      	subs	r3, r3, r6
 80098a2:	60a3      	str	r3, [r4, #8]
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	4433      	add	r3, r6
 80098a8:	6023      	str	r3, [r4, #0]
 80098aa:	e7db      	b.n	8009864 <__ssputs_r+0x58>
 80098ac:	462a      	mov	r2, r5
 80098ae:	f000 fbb1 	bl	800a014 <_realloc_r>
 80098b2:	4606      	mov	r6, r0
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1e1      	bne.n	800987c <__ssputs_r+0x70>
 80098b8:	4650      	mov	r0, sl
 80098ba:	6921      	ldr	r1, [r4, #16]
 80098bc:	f000 face 	bl	8009e5c <_free_r>
 80098c0:	e7c7      	b.n	8009852 <__ssputs_r+0x46>
	...

080098c4 <_svfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4698      	mov	r8, r3
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	4607      	mov	r7, r0
 80098ce:	061b      	lsls	r3, r3, #24
 80098d0:	460d      	mov	r5, r1
 80098d2:	4614      	mov	r4, r2
 80098d4:	b09d      	sub	sp, #116	; 0x74
 80098d6:	d50e      	bpl.n	80098f6 <_svfiprintf_r+0x32>
 80098d8:	690b      	ldr	r3, [r1, #16]
 80098da:	b963      	cbnz	r3, 80098f6 <_svfiprintf_r+0x32>
 80098dc:	2140      	movs	r1, #64	; 0x40
 80098de:	f000 fb25 	bl	8009f2c <_malloc_r>
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	6128      	str	r0, [r5, #16]
 80098e6:	b920      	cbnz	r0, 80098f2 <_svfiprintf_r+0x2e>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098f0:	e0d1      	b.n	8009a96 <_svfiprintf_r+0x1d2>
 80098f2:	2340      	movs	r3, #64	; 0x40
 80098f4:	616b      	str	r3, [r5, #20]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	2320      	movs	r3, #32
 80098fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009900:	2330      	movs	r3, #48	; 0x30
 8009902:	f04f 0901 	mov.w	r9, #1
 8009906:	f8cd 800c 	str.w	r8, [sp, #12]
 800990a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ab0 <_svfiprintf_r+0x1ec>
 800990e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009912:	4623      	mov	r3, r4
 8009914:	469a      	mov	sl, r3
 8009916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991a:	b10a      	cbz	r2, 8009920 <_svfiprintf_r+0x5c>
 800991c:	2a25      	cmp	r2, #37	; 0x25
 800991e:	d1f9      	bne.n	8009914 <_svfiprintf_r+0x50>
 8009920:	ebba 0b04 	subs.w	fp, sl, r4
 8009924:	d00b      	beq.n	800993e <_svfiprintf_r+0x7a>
 8009926:	465b      	mov	r3, fp
 8009928:	4622      	mov	r2, r4
 800992a:	4629      	mov	r1, r5
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ff6d 	bl	800980c <__ssputs_r>
 8009932:	3001      	adds	r0, #1
 8009934:	f000 80aa 	beq.w	8009a8c <_svfiprintf_r+0x1c8>
 8009938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800993a:	445a      	add	r2, fp
 800993c:	9209      	str	r2, [sp, #36]	; 0x24
 800993e:	f89a 3000 	ldrb.w	r3, [sl]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80a2 	beq.w	8009a8c <_svfiprintf_r+0x1c8>
 8009948:	2300      	movs	r3, #0
 800994a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800994e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009952:	f10a 0a01 	add.w	sl, sl, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	9307      	str	r3, [sp, #28]
 800995a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800995e:	931a      	str	r3, [sp, #104]	; 0x68
 8009960:	4654      	mov	r4, sl
 8009962:	2205      	movs	r2, #5
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	4851      	ldr	r0, [pc, #324]	; (8009ab0 <_svfiprintf_r+0x1ec>)
 800996a:	f000 fa41 	bl	8009df0 <memchr>
 800996e:	9a04      	ldr	r2, [sp, #16]
 8009970:	b9d8      	cbnz	r0, 80099aa <_svfiprintf_r+0xe6>
 8009972:	06d0      	lsls	r0, r2, #27
 8009974:	bf44      	itt	mi
 8009976:	2320      	movmi	r3, #32
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	0711      	lsls	r1, r2, #28
 800997e:	bf44      	itt	mi
 8009980:	232b      	movmi	r3, #43	; 0x2b
 8009982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009986:	f89a 3000 	ldrb.w	r3, [sl]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d015      	beq.n	80099ba <_svfiprintf_r+0xf6>
 800998e:	4654      	mov	r4, sl
 8009990:	2000      	movs	r0, #0
 8009992:	f04f 0c0a 	mov.w	ip, #10
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	4621      	mov	r1, r4
 800999a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999e:	3b30      	subs	r3, #48	; 0x30
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d94e      	bls.n	8009a42 <_svfiprintf_r+0x17e>
 80099a4:	b1b0      	cbz	r0, 80099d4 <_svfiprintf_r+0x110>
 80099a6:	9207      	str	r2, [sp, #28]
 80099a8:	e014      	b.n	80099d4 <_svfiprintf_r+0x110>
 80099aa:	eba0 0308 	sub.w	r3, r0, r8
 80099ae:	fa09 f303 	lsl.w	r3, r9, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	46a2      	mov	sl, r4
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	e7d2      	b.n	8009960 <_svfiprintf_r+0x9c>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	1d19      	adds	r1, r3, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfbb      	ittet	lt
 80099c6:	425b      	neglt	r3, r3
 80099c8:	f042 0202 	orrlt.w	r2, r2, #2
 80099cc:	9307      	strge	r3, [sp, #28]
 80099ce:	9307      	strlt	r3, [sp, #28]
 80099d0:	bfb8      	it	lt
 80099d2:	9204      	strlt	r2, [sp, #16]
 80099d4:	7823      	ldrb	r3, [r4, #0]
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d10c      	bne.n	80099f4 <_svfiprintf_r+0x130>
 80099da:	7863      	ldrb	r3, [r4, #1]
 80099dc:	2b2a      	cmp	r3, #42	; 0x2a
 80099de:	d135      	bne.n	8009a4c <_svfiprintf_r+0x188>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	3402      	adds	r4, #2
 80099e4:	1d1a      	adds	r2, r3, #4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	9203      	str	r2, [sp, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bfb8      	it	lt
 80099ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009ab4 <_svfiprintf_r+0x1f0>
 80099f8:	2203      	movs	r2, #3
 80099fa:	4650      	mov	r0, sl
 80099fc:	7821      	ldrb	r1, [r4, #0]
 80099fe:	f000 f9f7 	bl	8009df0 <memchr>
 8009a02:	b140      	cbz	r0, 8009a16 <_svfiprintf_r+0x152>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	eba0 000a 	sub.w	r0, r0, sl
 8009a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	3401      	adds	r4, #1
 8009a12:	4303      	orrs	r3, r0
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	2206      	movs	r2, #6
 8009a1c:	4826      	ldr	r0, [pc, #152]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a22:	f000 f9e5 	bl	8009df0 <memchr>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d038      	beq.n	8009a9c <_svfiprintf_r+0x1d8>
 8009a2a:	4b24      	ldr	r3, [pc, #144]	; (8009abc <_svfiprintf_r+0x1f8>)
 8009a2c:	bb1b      	cbnz	r3, 8009a76 <_svfiprintf_r+0x1b2>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	3308      	adds	r3, #8
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	4433      	add	r3, r6
 8009a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a40:	e767      	b.n	8009912 <_svfiprintf_r+0x4e>
 8009a42:	460c      	mov	r4, r1
 8009a44:	2001      	movs	r0, #1
 8009a46:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4a:	e7a5      	b.n	8009998 <_svfiprintf_r+0xd4>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	f04f 0c0a 	mov.w	ip, #10
 8009a52:	4619      	mov	r1, r3
 8009a54:	3401      	adds	r4, #1
 8009a56:	9305      	str	r3, [sp, #20]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5e:	3a30      	subs	r2, #48	; 0x30
 8009a60:	2a09      	cmp	r2, #9
 8009a62:	d903      	bls.n	8009a6c <_svfiprintf_r+0x1a8>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0c5      	beq.n	80099f4 <_svfiprintf_r+0x130>
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	e7c3      	b.n	80099f4 <_svfiprintf_r+0x130>
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	2301      	movs	r3, #1
 8009a70:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a74:	e7f0      	b.n	8009a58 <_svfiprintf_r+0x194>
 8009a76:	ab03      	add	r3, sp, #12
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4638      	mov	r0, r7
 8009a7e:	4b10      	ldr	r3, [pc, #64]	; (8009ac0 <_svfiprintf_r+0x1fc>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	f3af 8000 	nop.w
 8009a86:	1c42      	adds	r2, r0, #1
 8009a88:	4606      	mov	r6, r0
 8009a8a:	d1d6      	bne.n	8009a3a <_svfiprintf_r+0x176>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	065b      	lsls	r3, r3, #25
 8009a90:	f53f af2c 	bmi.w	80098ec <_svfiprintf_r+0x28>
 8009a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a96:	b01d      	add	sp, #116	; 0x74
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	ab03      	add	r3, sp, #12
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4638      	mov	r0, r7
 8009aa4:	4b06      	ldr	r3, [pc, #24]	; (8009ac0 <_svfiprintf_r+0x1fc>)
 8009aa6:	a904      	add	r1, sp, #16
 8009aa8:	f000 f87c 	bl	8009ba4 <_printf_i>
 8009aac:	e7eb      	b.n	8009a86 <_svfiprintf_r+0x1c2>
 8009aae:	bf00      	nop
 8009ab0:	0800a1b8 	.word	0x0800a1b8
 8009ab4:	0800a1be 	.word	0x0800a1be
 8009ab8:	0800a1c2 	.word	0x0800a1c2
 8009abc:	00000000 	.word	0x00000000
 8009ac0:	0800980d 	.word	0x0800980d

08009ac4 <_printf_common>:
 8009ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	4616      	mov	r6, r2
 8009aca:	4699      	mov	r9, r3
 8009acc:	688a      	ldr	r2, [r1, #8]
 8009ace:	690b      	ldr	r3, [r1, #16]
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	bfb8      	it	lt
 8009ad6:	4613      	movlt	r3, r2
 8009ad8:	6033      	str	r3, [r6, #0]
 8009ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ade:	460c      	mov	r4, r1
 8009ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ae4:	b10a      	cbz	r2, 8009aea <_printf_common+0x26>
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	0699      	lsls	r1, r3, #26
 8009aee:	bf42      	ittt	mi
 8009af0:	6833      	ldrmi	r3, [r6, #0]
 8009af2:	3302      	addmi	r3, #2
 8009af4:	6033      	strmi	r3, [r6, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	f015 0506 	ands.w	r5, r5, #6
 8009afc:	d106      	bne.n	8009b0c <_printf_common+0x48>
 8009afe:	f104 0a19 	add.w	sl, r4, #25
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	6832      	ldr	r2, [r6, #0]
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	42ab      	cmp	r3, r5
 8009b0a:	dc28      	bgt.n	8009b5e <_printf_common+0x9a>
 8009b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b10:	1e13      	subs	r3, r2, #0
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	bf18      	it	ne
 8009b16:	2301      	movne	r3, #1
 8009b18:	0692      	lsls	r2, r2, #26
 8009b1a:	d42d      	bmi.n	8009b78 <_printf_common+0xb4>
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4638      	mov	r0, r7
 8009b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d020      	beq.n	8009b6c <_printf_common+0xa8>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	68e5      	ldr	r5, [r4, #12]
 8009b2e:	f003 0306 	and.w	r3, r3, #6
 8009b32:	2b04      	cmp	r3, #4
 8009b34:	bf18      	it	ne
 8009b36:	2500      	movne	r5, #0
 8009b38:	6832      	ldr	r2, [r6, #0]
 8009b3a:	f04f 0600 	mov.w	r6, #0
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	bf08      	it	eq
 8009b42:	1aad      	subeq	r5, r5, r2
 8009b44:	6922      	ldr	r2, [r4, #16]
 8009b46:	bf08      	it	eq
 8009b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	bfc4      	itt	gt
 8009b50:	1a9b      	subgt	r3, r3, r2
 8009b52:	18ed      	addgt	r5, r5, r3
 8009b54:	341a      	adds	r4, #26
 8009b56:	42b5      	cmp	r5, r6
 8009b58:	d11a      	bne.n	8009b90 <_printf_common+0xcc>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e008      	b.n	8009b70 <_printf_common+0xac>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	4652      	mov	r2, sl
 8009b62:	4649      	mov	r1, r9
 8009b64:	4638      	mov	r0, r7
 8009b66:	47c0      	blx	r8
 8009b68:	3001      	adds	r0, #1
 8009b6a:	d103      	bne.n	8009b74 <_printf_common+0xb0>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b74:	3501      	adds	r5, #1
 8009b76:	e7c4      	b.n	8009b02 <_printf_common+0x3e>
 8009b78:	2030      	movs	r0, #48	; 0x30
 8009b7a:	18e1      	adds	r1, r4, r3
 8009b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b80:	1c5a      	adds	r2, r3, #1
 8009b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b86:	4422      	add	r2, r4
 8009b88:	3302      	adds	r3, #2
 8009b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b8e:	e7c5      	b.n	8009b1c <_printf_common+0x58>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4622      	mov	r2, r4
 8009b94:	4649      	mov	r1, r9
 8009b96:	4638      	mov	r0, r7
 8009b98:	47c0      	blx	r8
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d0e6      	beq.n	8009b6c <_printf_common+0xa8>
 8009b9e:	3601      	adds	r6, #1
 8009ba0:	e7d9      	b.n	8009b56 <_printf_common+0x92>
	...

08009ba4 <_printf_i>:
 8009ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba8:	7e0f      	ldrb	r7, [r1, #24]
 8009baa:	4691      	mov	r9, r2
 8009bac:	2f78      	cmp	r7, #120	; 0x78
 8009bae:	4680      	mov	r8, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	469a      	mov	sl, r3
 8009bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bba:	d807      	bhi.n	8009bcc <_printf_i+0x28>
 8009bbc:	2f62      	cmp	r7, #98	; 0x62
 8009bbe:	d80a      	bhi.n	8009bd6 <_printf_i+0x32>
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	f000 80d9 	beq.w	8009d78 <_printf_i+0x1d4>
 8009bc6:	2f58      	cmp	r7, #88	; 0x58
 8009bc8:	f000 80a4 	beq.w	8009d14 <_printf_i+0x170>
 8009bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd4:	e03a      	b.n	8009c4c <_printf_i+0xa8>
 8009bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bda:	2b15      	cmp	r3, #21
 8009bdc:	d8f6      	bhi.n	8009bcc <_printf_i+0x28>
 8009bde:	a101      	add	r1, pc, #4	; (adr r1, 8009be4 <_printf_i+0x40>)
 8009be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be4:	08009c3d 	.word	0x08009c3d
 8009be8:	08009c51 	.word	0x08009c51
 8009bec:	08009bcd 	.word	0x08009bcd
 8009bf0:	08009bcd 	.word	0x08009bcd
 8009bf4:	08009bcd 	.word	0x08009bcd
 8009bf8:	08009bcd 	.word	0x08009bcd
 8009bfc:	08009c51 	.word	0x08009c51
 8009c00:	08009bcd 	.word	0x08009bcd
 8009c04:	08009bcd 	.word	0x08009bcd
 8009c08:	08009bcd 	.word	0x08009bcd
 8009c0c:	08009bcd 	.word	0x08009bcd
 8009c10:	08009d5f 	.word	0x08009d5f
 8009c14:	08009c81 	.word	0x08009c81
 8009c18:	08009d41 	.word	0x08009d41
 8009c1c:	08009bcd 	.word	0x08009bcd
 8009c20:	08009bcd 	.word	0x08009bcd
 8009c24:	08009d81 	.word	0x08009d81
 8009c28:	08009bcd 	.word	0x08009bcd
 8009c2c:	08009c81 	.word	0x08009c81
 8009c30:	08009bcd 	.word	0x08009bcd
 8009c34:	08009bcd 	.word	0x08009bcd
 8009c38:	08009d49 	.word	0x08009d49
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	1d1a      	adds	r2, r3, #4
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	602a      	str	r2, [r5, #0]
 8009c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e0a4      	b.n	8009d9a <_printf_i+0x1f6>
 8009c50:	6820      	ldr	r0, [r4, #0]
 8009c52:	6829      	ldr	r1, [r5, #0]
 8009c54:	0606      	lsls	r6, r0, #24
 8009c56:	f101 0304 	add.w	r3, r1, #4
 8009c5a:	d50a      	bpl.n	8009c72 <_printf_i+0xce>
 8009c5c:	680e      	ldr	r6, [r1, #0]
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	2e00      	cmp	r6, #0
 8009c62:	da03      	bge.n	8009c6c <_printf_i+0xc8>
 8009c64:	232d      	movs	r3, #45	; 0x2d
 8009c66:	4276      	negs	r6, r6
 8009c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c6c:	230a      	movs	r3, #10
 8009c6e:	485e      	ldr	r0, [pc, #376]	; (8009de8 <_printf_i+0x244>)
 8009c70:	e019      	b.n	8009ca6 <_printf_i+0x102>
 8009c72:	680e      	ldr	r6, [r1, #0]
 8009c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	bf18      	it	ne
 8009c7c:	b236      	sxthne	r6, r6
 8009c7e:	e7ef      	b.n	8009c60 <_printf_i+0xbc>
 8009c80:	682b      	ldr	r3, [r5, #0]
 8009c82:	6820      	ldr	r0, [r4, #0]
 8009c84:	1d19      	adds	r1, r3, #4
 8009c86:	6029      	str	r1, [r5, #0]
 8009c88:	0601      	lsls	r1, r0, #24
 8009c8a:	d501      	bpl.n	8009c90 <_printf_i+0xec>
 8009c8c:	681e      	ldr	r6, [r3, #0]
 8009c8e:	e002      	b.n	8009c96 <_printf_i+0xf2>
 8009c90:	0646      	lsls	r6, r0, #25
 8009c92:	d5fb      	bpl.n	8009c8c <_printf_i+0xe8>
 8009c94:	881e      	ldrh	r6, [r3, #0]
 8009c96:	2f6f      	cmp	r7, #111	; 0x6f
 8009c98:	bf0c      	ite	eq
 8009c9a:	2308      	moveq	r3, #8
 8009c9c:	230a      	movne	r3, #10
 8009c9e:	4852      	ldr	r0, [pc, #328]	; (8009de8 <_printf_i+0x244>)
 8009ca0:	2100      	movs	r1, #0
 8009ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca6:	6865      	ldr	r5, [r4, #4]
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	bfa8      	it	ge
 8009cac:	6821      	ldrge	r1, [r4, #0]
 8009cae:	60a5      	str	r5, [r4, #8]
 8009cb0:	bfa4      	itt	ge
 8009cb2:	f021 0104 	bicge.w	r1, r1, #4
 8009cb6:	6021      	strge	r1, [r4, #0]
 8009cb8:	b90e      	cbnz	r6, 8009cbe <_printf_i+0x11a>
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	d04d      	beq.n	8009d5a <_printf_i+0x1b6>
 8009cbe:	4615      	mov	r5, r2
 8009cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8009cc8:	5dc7      	ldrb	r7, [r0, r7]
 8009cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cce:	4637      	mov	r7, r6
 8009cd0:	42bb      	cmp	r3, r7
 8009cd2:	460e      	mov	r6, r1
 8009cd4:	d9f4      	bls.n	8009cc0 <_printf_i+0x11c>
 8009cd6:	2b08      	cmp	r3, #8
 8009cd8:	d10b      	bne.n	8009cf2 <_printf_i+0x14e>
 8009cda:	6823      	ldr	r3, [r4, #0]
 8009cdc:	07de      	lsls	r6, r3, #31
 8009cde:	d508      	bpl.n	8009cf2 <_printf_i+0x14e>
 8009ce0:	6923      	ldr	r3, [r4, #16]
 8009ce2:	6861      	ldr	r1, [r4, #4]
 8009ce4:	4299      	cmp	r1, r3
 8009ce6:	bfde      	ittt	le
 8009ce8:	2330      	movle	r3, #48	; 0x30
 8009cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009cf2:	1b52      	subs	r2, r2, r5
 8009cf4:	6122      	str	r2, [r4, #16]
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f8cd a000 	str.w	sl, [sp]
 8009d00:	aa03      	add	r2, sp, #12
 8009d02:	f7ff fedf 	bl	8009ac4 <_printf_common>
 8009d06:	3001      	adds	r0, #1
 8009d08:	d14c      	bne.n	8009da4 <_printf_i+0x200>
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d0e:	b004      	add	sp, #16
 8009d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d14:	4834      	ldr	r0, [pc, #208]	; (8009de8 <_printf_i+0x244>)
 8009d16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d1a:	6829      	ldr	r1, [r5, #0]
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d22:	6029      	str	r1, [r5, #0]
 8009d24:	061d      	lsls	r5, r3, #24
 8009d26:	d514      	bpl.n	8009d52 <_printf_i+0x1ae>
 8009d28:	07df      	lsls	r7, r3, #31
 8009d2a:	bf44      	itt	mi
 8009d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8009d30:	6023      	strmi	r3, [r4, #0]
 8009d32:	b91e      	cbnz	r6, 8009d3c <_printf_i+0x198>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	f023 0320 	bic.w	r3, r3, #32
 8009d3a:	6023      	str	r3, [r4, #0]
 8009d3c:	2310      	movs	r3, #16
 8009d3e:	e7af      	b.n	8009ca0 <_printf_i+0xfc>
 8009d40:	6823      	ldr	r3, [r4, #0]
 8009d42:	f043 0320 	orr.w	r3, r3, #32
 8009d46:	6023      	str	r3, [r4, #0]
 8009d48:	2378      	movs	r3, #120	; 0x78
 8009d4a:	4828      	ldr	r0, [pc, #160]	; (8009dec <_printf_i+0x248>)
 8009d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d50:	e7e3      	b.n	8009d1a <_printf_i+0x176>
 8009d52:	0659      	lsls	r1, r3, #25
 8009d54:	bf48      	it	mi
 8009d56:	b2b6      	uxthmi	r6, r6
 8009d58:	e7e6      	b.n	8009d28 <_printf_i+0x184>
 8009d5a:	4615      	mov	r5, r2
 8009d5c:	e7bb      	b.n	8009cd6 <_printf_i+0x132>
 8009d5e:	682b      	ldr	r3, [r5, #0]
 8009d60:	6826      	ldr	r6, [r4, #0]
 8009d62:	1d18      	adds	r0, r3, #4
 8009d64:	6961      	ldr	r1, [r4, #20]
 8009d66:	6028      	str	r0, [r5, #0]
 8009d68:	0635      	lsls	r5, r6, #24
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	d501      	bpl.n	8009d72 <_printf_i+0x1ce>
 8009d6e:	6019      	str	r1, [r3, #0]
 8009d70:	e002      	b.n	8009d78 <_printf_i+0x1d4>
 8009d72:	0670      	lsls	r0, r6, #25
 8009d74:	d5fb      	bpl.n	8009d6e <_printf_i+0x1ca>
 8009d76:	8019      	strh	r1, [r3, #0]
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4615      	mov	r5, r2
 8009d7c:	6123      	str	r3, [r4, #16]
 8009d7e:	e7ba      	b.n	8009cf6 <_printf_i+0x152>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	2100      	movs	r1, #0
 8009d84:	1d1a      	adds	r2, r3, #4
 8009d86:	602a      	str	r2, [r5, #0]
 8009d88:	681d      	ldr	r5, [r3, #0]
 8009d8a:	6862      	ldr	r2, [r4, #4]
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	f000 f82f 	bl	8009df0 <memchr>
 8009d92:	b108      	cbz	r0, 8009d98 <_printf_i+0x1f4>
 8009d94:	1b40      	subs	r0, r0, r5
 8009d96:	6060      	str	r0, [r4, #4]
 8009d98:	6863      	ldr	r3, [r4, #4]
 8009d9a:	6123      	str	r3, [r4, #16]
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009da2:	e7a8      	b.n	8009cf6 <_printf_i+0x152>
 8009da4:	462a      	mov	r2, r5
 8009da6:	4649      	mov	r1, r9
 8009da8:	4640      	mov	r0, r8
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	47d0      	blx	sl
 8009dae:	3001      	adds	r0, #1
 8009db0:	d0ab      	beq.n	8009d0a <_printf_i+0x166>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	079b      	lsls	r3, r3, #30
 8009db6:	d413      	bmi.n	8009de0 <_printf_i+0x23c>
 8009db8:	68e0      	ldr	r0, [r4, #12]
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	4298      	cmp	r0, r3
 8009dbe:	bfb8      	it	lt
 8009dc0:	4618      	movlt	r0, r3
 8009dc2:	e7a4      	b.n	8009d0e <_printf_i+0x16a>
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	4632      	mov	r2, r6
 8009dc8:	4649      	mov	r1, r9
 8009dca:	4640      	mov	r0, r8
 8009dcc:	47d0      	blx	sl
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d09b      	beq.n	8009d0a <_printf_i+0x166>
 8009dd2:	3501      	adds	r5, #1
 8009dd4:	68e3      	ldr	r3, [r4, #12]
 8009dd6:	9903      	ldr	r1, [sp, #12]
 8009dd8:	1a5b      	subs	r3, r3, r1
 8009dda:	42ab      	cmp	r3, r5
 8009ddc:	dcf2      	bgt.n	8009dc4 <_printf_i+0x220>
 8009dde:	e7eb      	b.n	8009db8 <_printf_i+0x214>
 8009de0:	2500      	movs	r5, #0
 8009de2:	f104 0619 	add.w	r6, r4, #25
 8009de6:	e7f5      	b.n	8009dd4 <_printf_i+0x230>
 8009de8:	0800a1c9 	.word	0x0800a1c9
 8009dec:	0800a1da 	.word	0x0800a1da

08009df0 <memchr>:
 8009df0:	4603      	mov	r3, r0
 8009df2:	b510      	push	{r4, lr}
 8009df4:	b2c9      	uxtb	r1, r1
 8009df6:	4402      	add	r2, r0
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	d101      	bne.n	8009e02 <memchr+0x12>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e003      	b.n	8009e0a <memchr+0x1a>
 8009e02:	7804      	ldrb	r4, [r0, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	428c      	cmp	r4, r1
 8009e08:	d1f6      	bne.n	8009df8 <memchr+0x8>
 8009e0a:	bd10      	pop	{r4, pc}

08009e0c <memcpy>:
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009e14:	d100      	bne.n	8009e18 <memcpy+0xc>
 8009e16:	4770      	bx	lr
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1e:	4291      	cmp	r1, r2
 8009e20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e24:	d1f9      	bne.n	8009e1a <memcpy+0xe>
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <memmove>:
 8009e28:	4288      	cmp	r0, r1
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	eb01 0402 	add.w	r4, r1, r2
 8009e30:	d902      	bls.n	8009e38 <memmove+0x10>
 8009e32:	4284      	cmp	r4, r0
 8009e34:	4623      	mov	r3, r4
 8009e36:	d807      	bhi.n	8009e48 <memmove+0x20>
 8009e38:	1e43      	subs	r3, r0, #1
 8009e3a:	42a1      	cmp	r1, r4
 8009e3c:	d008      	beq.n	8009e50 <memmove+0x28>
 8009e3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e46:	e7f8      	b.n	8009e3a <memmove+0x12>
 8009e48:	4601      	mov	r1, r0
 8009e4a:	4402      	add	r2, r0
 8009e4c:	428a      	cmp	r2, r1
 8009e4e:	d100      	bne.n	8009e52 <memmove+0x2a>
 8009e50:	bd10      	pop	{r4, pc}
 8009e52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e5a:	e7f7      	b.n	8009e4c <memmove+0x24>

08009e5c <_free_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4605      	mov	r5, r0
 8009e60:	2900      	cmp	r1, #0
 8009e62:	d040      	beq.n	8009ee6 <_free_r+0x8a>
 8009e64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e68:	1f0c      	subs	r4, r1, #4
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfb8      	it	lt
 8009e6e:	18e4      	addlt	r4, r4, r3
 8009e70:	f000 f910 	bl	800a094 <__malloc_lock>
 8009e74:	4a1c      	ldr	r2, [pc, #112]	; (8009ee8 <_free_r+0x8c>)
 8009e76:	6813      	ldr	r3, [r2, #0]
 8009e78:	b933      	cbnz	r3, 8009e88 <_free_r+0x2c>
 8009e7a:	6063      	str	r3, [r4, #4]
 8009e7c:	6014      	str	r4, [r2, #0]
 8009e7e:	4628      	mov	r0, r5
 8009e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e84:	f000 b90c 	b.w	800a0a0 <__malloc_unlock>
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	d908      	bls.n	8009e9e <_free_r+0x42>
 8009e8c:	6820      	ldr	r0, [r4, #0]
 8009e8e:	1821      	adds	r1, r4, r0
 8009e90:	428b      	cmp	r3, r1
 8009e92:	bf01      	itttt	eq
 8009e94:	6819      	ldreq	r1, [r3, #0]
 8009e96:	685b      	ldreq	r3, [r3, #4]
 8009e98:	1809      	addeq	r1, r1, r0
 8009e9a:	6021      	streq	r1, [r4, #0]
 8009e9c:	e7ed      	b.n	8009e7a <_free_r+0x1e>
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	b10b      	cbz	r3, 8009ea8 <_free_r+0x4c>
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d9fa      	bls.n	8009e9e <_free_r+0x42>
 8009ea8:	6811      	ldr	r1, [r2, #0]
 8009eaa:	1850      	adds	r0, r2, r1
 8009eac:	42a0      	cmp	r0, r4
 8009eae:	d10b      	bne.n	8009ec8 <_free_r+0x6c>
 8009eb0:	6820      	ldr	r0, [r4, #0]
 8009eb2:	4401      	add	r1, r0
 8009eb4:	1850      	adds	r0, r2, r1
 8009eb6:	4283      	cmp	r3, r0
 8009eb8:	6011      	str	r1, [r2, #0]
 8009eba:	d1e0      	bne.n	8009e7e <_free_r+0x22>
 8009ebc:	6818      	ldr	r0, [r3, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	4401      	add	r1, r0
 8009ec2:	6011      	str	r1, [r2, #0]
 8009ec4:	6053      	str	r3, [r2, #4]
 8009ec6:	e7da      	b.n	8009e7e <_free_r+0x22>
 8009ec8:	d902      	bls.n	8009ed0 <_free_r+0x74>
 8009eca:	230c      	movs	r3, #12
 8009ecc:	602b      	str	r3, [r5, #0]
 8009ece:	e7d6      	b.n	8009e7e <_free_r+0x22>
 8009ed0:	6820      	ldr	r0, [r4, #0]
 8009ed2:	1821      	adds	r1, r4, r0
 8009ed4:	428b      	cmp	r3, r1
 8009ed6:	bf01      	itttt	eq
 8009ed8:	6819      	ldreq	r1, [r3, #0]
 8009eda:	685b      	ldreq	r3, [r3, #4]
 8009edc:	1809      	addeq	r1, r1, r0
 8009ede:	6021      	streq	r1, [r4, #0]
 8009ee0:	6063      	str	r3, [r4, #4]
 8009ee2:	6054      	str	r4, [r2, #4]
 8009ee4:	e7cb      	b.n	8009e7e <_free_r+0x22>
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	200014ac 	.word	0x200014ac

08009eec <sbrk_aligned>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	4e0e      	ldr	r6, [pc, #56]	; (8009f28 <sbrk_aligned+0x3c>)
 8009ef0:	460c      	mov	r4, r1
 8009ef2:	6831      	ldr	r1, [r6, #0]
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	b911      	cbnz	r1, 8009efe <sbrk_aligned+0x12>
 8009ef8:	f000 f8bc 	bl	800a074 <_sbrk_r>
 8009efc:	6030      	str	r0, [r6, #0]
 8009efe:	4621      	mov	r1, r4
 8009f00:	4628      	mov	r0, r5
 8009f02:	f000 f8b7 	bl	800a074 <_sbrk_r>
 8009f06:	1c43      	adds	r3, r0, #1
 8009f08:	d00a      	beq.n	8009f20 <sbrk_aligned+0x34>
 8009f0a:	1cc4      	adds	r4, r0, #3
 8009f0c:	f024 0403 	bic.w	r4, r4, #3
 8009f10:	42a0      	cmp	r0, r4
 8009f12:	d007      	beq.n	8009f24 <sbrk_aligned+0x38>
 8009f14:	1a21      	subs	r1, r4, r0
 8009f16:	4628      	mov	r0, r5
 8009f18:	f000 f8ac 	bl	800a074 <_sbrk_r>
 8009f1c:	3001      	adds	r0, #1
 8009f1e:	d101      	bne.n	8009f24 <sbrk_aligned+0x38>
 8009f20:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f24:	4620      	mov	r0, r4
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	200014b0 	.word	0x200014b0

08009f2c <_malloc_r>:
 8009f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f30:	1ccd      	adds	r5, r1, #3
 8009f32:	f025 0503 	bic.w	r5, r5, #3
 8009f36:	3508      	adds	r5, #8
 8009f38:	2d0c      	cmp	r5, #12
 8009f3a:	bf38      	it	cc
 8009f3c:	250c      	movcc	r5, #12
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	4607      	mov	r7, r0
 8009f42:	db01      	blt.n	8009f48 <_malloc_r+0x1c>
 8009f44:	42a9      	cmp	r1, r5
 8009f46:	d905      	bls.n	8009f54 <_malloc_r+0x28>
 8009f48:	230c      	movs	r3, #12
 8009f4a:	2600      	movs	r6, #0
 8009f4c:	603b      	str	r3, [r7, #0]
 8009f4e:	4630      	mov	r0, r6
 8009f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f54:	4e2e      	ldr	r6, [pc, #184]	; (800a010 <_malloc_r+0xe4>)
 8009f56:	f000 f89d 	bl	800a094 <__malloc_lock>
 8009f5a:	6833      	ldr	r3, [r6, #0]
 8009f5c:	461c      	mov	r4, r3
 8009f5e:	bb34      	cbnz	r4, 8009fae <_malloc_r+0x82>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4638      	mov	r0, r7
 8009f64:	f7ff ffc2 	bl	8009eec <sbrk_aligned>
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	d14d      	bne.n	800a00a <_malloc_r+0xde>
 8009f6e:	6834      	ldr	r4, [r6, #0]
 8009f70:	4626      	mov	r6, r4
 8009f72:	2e00      	cmp	r6, #0
 8009f74:	d140      	bne.n	8009ff8 <_malloc_r+0xcc>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	eb04 0803 	add.w	r8, r4, r3
 8009f80:	f000 f878 	bl	800a074 <_sbrk_r>
 8009f84:	4580      	cmp	r8, r0
 8009f86:	d13a      	bne.n	8009ffe <_malloc_r+0xd2>
 8009f88:	6821      	ldr	r1, [r4, #0]
 8009f8a:	3503      	adds	r5, #3
 8009f8c:	1a6d      	subs	r5, r5, r1
 8009f8e:	f025 0503 	bic.w	r5, r5, #3
 8009f92:	3508      	adds	r5, #8
 8009f94:	2d0c      	cmp	r5, #12
 8009f96:	bf38      	it	cc
 8009f98:	250c      	movcc	r5, #12
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	4629      	mov	r1, r5
 8009f9e:	f7ff ffa5 	bl	8009eec <sbrk_aligned>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d02b      	beq.n	8009ffe <_malloc_r+0xd2>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	442b      	add	r3, r5
 8009faa:	6023      	str	r3, [r4, #0]
 8009fac:	e00e      	b.n	8009fcc <_malloc_r+0xa0>
 8009fae:	6822      	ldr	r2, [r4, #0]
 8009fb0:	1b52      	subs	r2, r2, r5
 8009fb2:	d41e      	bmi.n	8009ff2 <_malloc_r+0xc6>
 8009fb4:	2a0b      	cmp	r2, #11
 8009fb6:	d916      	bls.n	8009fe6 <_malloc_r+0xba>
 8009fb8:	1961      	adds	r1, r4, r5
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	6025      	str	r5, [r4, #0]
 8009fbe:	bf18      	it	ne
 8009fc0:	6059      	strne	r1, [r3, #4]
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	bf08      	it	eq
 8009fc6:	6031      	streq	r1, [r6, #0]
 8009fc8:	5162      	str	r2, [r4, r5]
 8009fca:	604b      	str	r3, [r1, #4]
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f104 060b 	add.w	r6, r4, #11
 8009fd2:	f000 f865 	bl	800a0a0 <__malloc_unlock>
 8009fd6:	f026 0607 	bic.w	r6, r6, #7
 8009fda:	1d23      	adds	r3, r4, #4
 8009fdc:	1af2      	subs	r2, r6, r3
 8009fde:	d0b6      	beq.n	8009f4e <_malloc_r+0x22>
 8009fe0:	1b9b      	subs	r3, r3, r6
 8009fe2:	50a3      	str	r3, [r4, r2]
 8009fe4:	e7b3      	b.n	8009f4e <_malloc_r+0x22>
 8009fe6:	6862      	ldr	r2, [r4, #4]
 8009fe8:	42a3      	cmp	r3, r4
 8009fea:	bf0c      	ite	eq
 8009fec:	6032      	streq	r2, [r6, #0]
 8009fee:	605a      	strne	r2, [r3, #4]
 8009ff0:	e7ec      	b.n	8009fcc <_malloc_r+0xa0>
 8009ff2:	4623      	mov	r3, r4
 8009ff4:	6864      	ldr	r4, [r4, #4]
 8009ff6:	e7b2      	b.n	8009f5e <_malloc_r+0x32>
 8009ff8:	4634      	mov	r4, r6
 8009ffa:	6876      	ldr	r6, [r6, #4]
 8009ffc:	e7b9      	b.n	8009f72 <_malloc_r+0x46>
 8009ffe:	230c      	movs	r3, #12
 800a000:	4638      	mov	r0, r7
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	f000 f84c 	bl	800a0a0 <__malloc_unlock>
 800a008:	e7a1      	b.n	8009f4e <_malloc_r+0x22>
 800a00a:	6025      	str	r5, [r4, #0]
 800a00c:	e7de      	b.n	8009fcc <_malloc_r+0xa0>
 800a00e:	bf00      	nop
 800a010:	200014ac 	.word	0x200014ac

0800a014 <_realloc_r>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	4680      	mov	r8, r0
 800a01a:	4614      	mov	r4, r2
 800a01c:	460e      	mov	r6, r1
 800a01e:	b921      	cbnz	r1, 800a02a <_realloc_r+0x16>
 800a020:	4611      	mov	r1, r2
 800a022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a026:	f7ff bf81 	b.w	8009f2c <_malloc_r>
 800a02a:	b92a      	cbnz	r2, 800a038 <_realloc_r+0x24>
 800a02c:	f7ff ff16 	bl	8009e5c <_free_r>
 800a030:	4625      	mov	r5, r4
 800a032:	4628      	mov	r0, r5
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	f000 f838 	bl	800a0ac <_malloc_usable_size_r>
 800a03c:	4284      	cmp	r4, r0
 800a03e:	4607      	mov	r7, r0
 800a040:	d802      	bhi.n	800a048 <_realloc_r+0x34>
 800a042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a046:	d812      	bhi.n	800a06e <_realloc_r+0x5a>
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff ff6e 	bl	8009f2c <_malloc_r>
 800a050:	4605      	mov	r5, r0
 800a052:	2800      	cmp	r0, #0
 800a054:	d0ed      	beq.n	800a032 <_realloc_r+0x1e>
 800a056:	42bc      	cmp	r4, r7
 800a058:	4622      	mov	r2, r4
 800a05a:	4631      	mov	r1, r6
 800a05c:	bf28      	it	cs
 800a05e:	463a      	movcs	r2, r7
 800a060:	f7ff fed4 	bl	8009e0c <memcpy>
 800a064:	4631      	mov	r1, r6
 800a066:	4640      	mov	r0, r8
 800a068:	f7ff fef8 	bl	8009e5c <_free_r>
 800a06c:	e7e1      	b.n	800a032 <_realloc_r+0x1e>
 800a06e:	4635      	mov	r5, r6
 800a070:	e7df      	b.n	800a032 <_realloc_r+0x1e>
	...

0800a074 <_sbrk_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	2300      	movs	r3, #0
 800a078:	4d05      	ldr	r5, [pc, #20]	; (800a090 <_sbrk_r+0x1c>)
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	602b      	str	r3, [r5, #0]
 800a080:	f7f7 fb58 	bl	8001734 <_sbrk>
 800a084:	1c43      	adds	r3, r0, #1
 800a086:	d102      	bne.n	800a08e <_sbrk_r+0x1a>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	b103      	cbz	r3, 800a08e <_sbrk_r+0x1a>
 800a08c:	6023      	str	r3, [r4, #0]
 800a08e:	bd38      	pop	{r3, r4, r5, pc}
 800a090:	200014b4 	.word	0x200014b4

0800a094 <__malloc_lock>:
 800a094:	4801      	ldr	r0, [pc, #4]	; (800a09c <__malloc_lock+0x8>)
 800a096:	f000 b811 	b.w	800a0bc <__retarget_lock_acquire_recursive>
 800a09a:	bf00      	nop
 800a09c:	200014b8 	.word	0x200014b8

0800a0a0 <__malloc_unlock>:
 800a0a0:	4801      	ldr	r0, [pc, #4]	; (800a0a8 <__malloc_unlock+0x8>)
 800a0a2:	f000 b80c 	b.w	800a0be <__retarget_lock_release_recursive>
 800a0a6:	bf00      	nop
 800a0a8:	200014b8 	.word	0x200014b8

0800a0ac <_malloc_usable_size_r>:
 800a0ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0b0:	1f18      	subs	r0, r3, #4
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bfbc      	itt	lt
 800a0b6:	580b      	ldrlt	r3, [r1, r0]
 800a0b8:	18c0      	addlt	r0, r0, r3
 800a0ba:	4770      	bx	lr

0800a0bc <__retarget_lock_acquire_recursive>:
 800a0bc:	4770      	bx	lr

0800a0be <__retarget_lock_release_recursive>:
 800a0be:	4770      	bx	lr

0800a0c0 <_init>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr

0800a0cc <_fini>:
 800a0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ce:	bf00      	nop
 800a0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0d2:	bc08      	pop	{r3}
 800a0d4:	469e      	mov	lr, r3
 800a0d6:	4770      	bx	lr
