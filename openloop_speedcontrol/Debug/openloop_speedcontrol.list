
openloop_speedcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ead4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0800ecb8  0800ecb8  0001ecb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ef94  0800ef94  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ef94  0800ef94  0001ef94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ef9c  0800ef9c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ef9c  0800ef9c  0001ef9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800efa0  0800efa0  0001efa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800efa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001418  200001f8  0800f19c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  0800f19c  00021610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211f2  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041fa  00000000  00000000  0004141a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  00045618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  00047068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d4e  00000000  00000000  00048920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc4e  00000000  00000000  0006c66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1033  00000000  00000000  0008c2bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d2ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007944  00000000  00000000  0016d340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f8 	.word	0x200001f8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ec9c 	.word	0x0800ec9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001fc 	.word	0x200001fc
 800021c:	0800ec9c 	.word	0x0800ec9c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <_electricalAngle>:
    m = HAL_GetTick();
    u = tms - SysTick->VAL;
  }
  return (m * 1000 + (u * 1000) / tms);
}
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fa6:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	ee07 3a90 	vmov	s15, r3
 8000fae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000fba:	eeb0 0a67 	vmov.f32	s0, s15
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <_normalizeAngle>:
float _normalizeAngle(float angle){
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fae0 	bl	8000598 <__aeabi_f2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8001038 <_normalizeAngle+0x70>
 8000fe0:	ec43 2b10 	vmov	d0, r2, r3
 8000fe4:	f00c f888 	bl	800d0f8 <fmod>
 8000fe8:	ec53 2b10 	vmov	r2, r3, d0
 8000fec:	4610      	mov	r0, r2
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fe02 	bl	8000bf8 <__aeabi_d2f>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 8000ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001004:	db01      	blt.n	800100a <_normalizeAngle+0x42>
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	e00e      	b.n	8001028 <_normalizeAngle+0x60>
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff fac4 	bl	8000598 <__aeabi_f2d>
 8001010:	a309      	add	r3, pc, #36	; (adr r3, 8001038 <_normalizeAngle+0x70>)
 8001012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001016:	f7ff f961 	bl	80002dc <__adddf3>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4610      	mov	r0, r2
 8001020:	4619      	mov	r1, r3
 8001022:	f7ff fde9 	bl	8000bf8 <__aeabi_d2f>
 8001026:	4603      	mov	r3, r0
 8001028:	ee07 3a90 	vmov	s15, r3
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	3710      	adds	r7, #16
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	54442d18 	.word	0x54442d18
 800103c:	401921fb 	.word	0x401921fb

08001040 <setPwm>:

void setPwm(float Ua, float Ub, float Uc) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	ed87 0a03 	vstr	s0, [r7, #12]
 800104a:	edc7 0a02 	vstr	s1, [r7, #8]
 800104e:	ed87 1a01 	vstr	s2, [r7, #4]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	d502      	bpl.n	8001066 <setPwm+0x26>
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e00d      	b.n	8001082 <setPwm+0x42>
 8001066:	4b84      	ldr	r3, [pc, #528]	; (8001278 <setPwm+0x238>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	dd02      	ble.n	8001080 <setPwm+0x40>
 800107a:	4b7f      	ldr	r3, [pc, #508]	; (8001278 <setPwm+0x238>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	e000      	b.n	8001082 <setPwm+0x42>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8001084:	edd7 7a02 	vldr	s15, [r7, #8]
 8001088:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800108c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001090:	d502      	bpl.n	8001098 <setPwm+0x58>
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	e00d      	b.n	80010b4 <setPwm+0x74>
 8001098:	4b77      	ldr	r3, [pc, #476]	; (8001278 <setPwm+0x238>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ed97 7a02 	vldr	s14, [r7, #8]
 80010a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd02      	ble.n	80010b2 <setPwm+0x72>
 80010ac:	4b72      	ldr	r3, [pc, #456]	; (8001278 <setPwm+0x238>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	e000      	b.n	80010b4 <setPwm+0x74>
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	d502      	bpl.n	80010ca <setPwm+0x8a>
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	e00d      	b.n	80010e6 <setPwm+0xa6>
 80010ca:	4b6b      	ldr	r3, [pc, #428]	; (8001278 <setPwm+0x238>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80010d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd02      	ble.n	80010e4 <setPwm+0xa4>
 80010de:	4b66      	ldr	r3, [pc, #408]	; (8001278 <setPwm+0x238>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e000      	b.n	80010e6 <setPwm+0xa6>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 80010e8:	4b64      	ldr	r3, [pc, #400]	; (800127c <setPwm+0x23c>)
 80010ea:	ed93 7a00 	vldr	s14, [r3]
 80010ee:	edd7 6a03 	vldr	s13, [r7, #12]
 80010f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fe:	d502      	bpl.n	8001106 <setPwm+0xc6>
 8001100:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8001280 <setPwm+0x240>
 8001104:	e017      	b.n	8001136 <setPwm+0xf6>
 8001106:	4b5d      	ldr	r3, [pc, #372]	; (800127c <setPwm+0x23c>)
 8001108:	ed93 7a00 	vldr	s14, [r3]
 800110c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd02      	ble.n	8001128 <setPwm+0xe8>
 8001122:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001126:	e006      	b.n	8001136 <setPwm+0xf6>
 8001128:	4b54      	ldr	r3, [pc, #336]	; (800127c <setPwm+0x23c>)
 800112a:	ed93 7a00 	vldr	s14, [r3]
 800112e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001136:	4b53      	ldr	r3, [pc, #332]	; (8001284 <setPwm+0x244>)
 8001138:	edc3 7a00 	vstr	s15, [r3]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 800113c:	4b4f      	ldr	r3, [pc, #316]	; (800127c <setPwm+0x23c>)
 800113e:	ed93 7a00 	vldr	s14, [r3]
 8001142:	edd7 6a02 	vldr	s13, [r7, #8]
 8001146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800114a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	d502      	bpl.n	800115a <setPwm+0x11a>
 8001154:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8001280 <setPwm+0x240>
 8001158:	e017      	b.n	800118a <setPwm+0x14a>
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <setPwm+0x23c>)
 800115c:	ed93 7a00 	vldr	s14, [r3]
 8001160:	edd7 6a02 	vldr	s13, [r7, #8]
 8001164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800116c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	dd02      	ble.n	800117c <setPwm+0x13c>
 8001176:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800117a:	e006      	b.n	800118a <setPwm+0x14a>
 800117c:	4b3f      	ldr	r3, [pc, #252]	; (800127c <setPwm+0x23c>)
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	edd7 6a02 	vldr	s13, [r7, #8]
 8001186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800118a:	4b3f      	ldr	r3, [pc, #252]	; (8001288 <setPwm+0x248>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 8001190:	4b3a      	ldr	r3, [pc, #232]	; (800127c <setPwm+0x23c>)
 8001192:	ed93 7a00 	vldr	s14, [r3]
 8001196:	edd7 6a01 	vldr	s13, [r7, #4]
 800119a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	d502      	bpl.n	80011ae <setPwm+0x16e>
 80011a8:	eddf 7a35 	vldr	s15, [pc, #212]	; 8001280 <setPwm+0x240>
 80011ac:	e017      	b.n	80011de <setPwm+0x19e>
 80011ae:	4b33      	ldr	r3, [pc, #204]	; (800127c <setPwm+0x23c>)
 80011b0:	ed93 7a00 	vldr	s14, [r3]
 80011b4:	edd7 6a01 	vldr	s13, [r7, #4]
 80011b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80011c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd02      	ble.n	80011d0 <setPwm+0x190>
 80011ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011ce:	e006      	b.n	80011de <setPwm+0x19e>
 80011d0:	4b2a      	ldr	r3, [pc, #168]	; (800127c <setPwm+0x23c>)
 80011d2:	ed93 7a00 	vldr	s14, [r3]
 80011d6:	edd7 6a01 	vldr	s13, [r7, #4]
 80011da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011de:	4b2b      	ldr	r3, [pc, #172]	; (800128c <setPwm+0x24c>)
 80011e0:	edc3 7a00 	vstr	s15, [r3]

	//写入PWM到PWM 0 1 2 通道
	TIM1->CCR1 = (uint32_t) roundf(dc_a*period);
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <setPwm+0x250>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	4b24      	ldr	r3, [pc, #144]	; (8001284 <setPwm+0x244>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	eeb0 0a67 	vmov.f32	s0, s15
 80011fe:	f00b ff57 	bl	800d0b0 <roundf>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <setPwm+0x254>)
 8001208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800120c:	ee17 2a90 	vmov	r2, s15
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = (uint32_t) roundf(dc_b*period);
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <setPwm+0x250>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	ee07 3a90 	vmov	s15, r3
 800121a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121e:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <setPwm+0x248>)
 8001220:	edd3 7a00 	vldr	s15, [r3]
 8001224:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001228:	eeb0 0a67 	vmov.f32	s0, s15
 800122c:	f00b ff40 	bl	800d0b0 <roundf>
 8001230:	eef0 7a40 	vmov.f32	s15, s0
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <setPwm+0x254>)
 8001236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123a:	ee17 2a90 	vmov	r2, s15
 800123e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = (uint32_t) roundf(dc_c*period);
 8001240:	4b13      	ldr	r3, [pc, #76]	; (8001290 <setPwm+0x250>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <setPwm+0x24c>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	f00b ff29 	bl	800d0b0 <roundf>
 800125e:	eef0 7a40 	vmov.f32	s15, s0
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <setPwm+0x254>)
 8001264:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001268:	ee17 2a90 	vmov	r2, s15
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004
 8001280:	00000000 	.word	0x00000000
 8001284:	200003f8 	.word	0x200003f8
 8001288:	200003fc 	.word	0x200003fc
 800128c:	20000400 	.word	0x20000400
 8001290:	20000008 	.word	0x20000008
 8001294:	40012c00 	.word	0x40012c00

08001298 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	ed87 0a03 	vstr	s0, [r7, #12]
 80012a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80012a6:	ed87 1a01 	vstr	s2, [r7, #4]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <setPhaseVoltage+0x208>)
 80012ac:	ed93 7a00 	vldr	s14, [r3]
 80012b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b8:	eeb0 0a67 	vmov.f32	s0, s15
 80012bc:	f7ff fe84 	bl	8000fc8 <_normalizeAngle>
 80012c0:	ed87 0a01 	vstr	s0, [r7, #4]
  // 帕克逆变换
  Ualpha =  -Uq*sin(angle_el);
 80012c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80012c8:	eef1 7a67 	vneg.f32	s15, s15
 80012cc:	ee17 3a90 	vmov	r3, s15
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f961 	bl	8000598 <__aeabi_f2d>
 80012d6:	4604      	mov	r4, r0
 80012d8:	460d      	mov	r5, r1
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff f95c 	bl	8000598 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	ec43 2b10 	vmov	d0, r2, r3
 80012e8:	f00b fe8a 	bl	800d000 <sin>
 80012ec:	ec53 2b10 	vmov	r2, r3, d0
 80012f0:	4620      	mov	r0, r4
 80012f2:	4629      	mov	r1, r5
 80012f4:	f7ff f9a8 	bl	8000648 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fc7a 	bl	8000bf8 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	4a67      	ldr	r2, [pc, #412]	; (80014a4 <setPhaseVoltage+0x20c>)
 8001308:	6013      	str	r3, [r2, #0]
  Ubeta =   Uq*cos(angle_el);
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4604      	mov	r4, r0
 8001312:	460d      	mov	r5, r1
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff f93f 	bl	8000598 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	ec43 2b10 	vmov	d0, r2, r3
 8001322:	f00b fe19 	bl	800cf58 <cos>
 8001326:	ec53 2b10 	vmov	r2, r3, d0
 800132a:	4620      	mov	r0, r4
 800132c:	4629      	mov	r1, r5
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc5d 	bl	8000bf8 <__aeabi_d2f>
 800133e:	4603      	mov	r3, r0
 8001340:	4a59      	ldr	r2, [pc, #356]	; (80014a8 <setPhaseVoltage+0x210>)
 8001342:	6013      	str	r3, [r2, #0]

  // 克拉克逆变换
  Ua = Ualpha + voltage_power_supply/2;
 8001344:	4b59      	ldr	r3, [pc, #356]	; (80014ac <setPhaseVoltage+0x214>)
 8001346:	edd3 7a00 	vldr	s15, [r3]
 800134a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800134e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001352:	4b54      	ldr	r3, [pc, #336]	; (80014a4 <setPhaseVoltage+0x20c>)
 8001354:	edd3 7a00 	vldr	s15, [r3]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	4b54      	ldr	r3, [pc, #336]	; (80014b0 <setPhaseVoltage+0x218>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
  Ub = (sqrt(3)*Ubeta-Ualpha)/2 + voltage_power_supply/2;
 8001362:	4b51      	ldr	r3, [pc, #324]	; (80014a8 <setPhaseVoltage+0x210>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff f916 	bl	8000598 <__aeabi_f2d>
 800136c:	a34a      	add	r3, pc, #296	; (adr r3, 8001498 <setPhaseVoltage+0x200>)
 800136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001372:	f7ff f969 	bl	8000648 <__aeabi_dmul>
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4614      	mov	r4, r2
 800137c:	461d      	mov	r5, r3
 800137e:	4b49      	ldr	r3, [pc, #292]	; (80014a4 <setPhaseVoltage+0x20c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f908 	bl	8000598 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7fe ffa2 	bl	80002d8 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013a4:	f7ff fa7a 	bl	800089c <__aeabi_ddiv>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4614      	mov	r4, r2
 80013ae:	461d      	mov	r5, r3
 80013b0:	4b3e      	ldr	r3, [pc, #248]	; (80014ac <setPhaseVoltage+0x214>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013be:	ee16 0a90 	vmov	r0, s13
 80013c2:	f7ff f8e9 	bl	8000598 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7fe ff85 	bl	80002dc <__adddf3>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc0d 	bl	8000bf8 <__aeabi_d2f>
 80013de:	4603      	mov	r3, r0
 80013e0:	4a34      	ldr	r2, [pc, #208]	; (80014b4 <setPhaseVoltage+0x21c>)
 80013e2:	6013      	str	r3, [r2, #0]
  Uc = (-Ualpha-sqrt(3)*Ubeta)/2 + voltage_power_supply/2;
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <setPhaseVoltage+0x20c>)
 80013e6:	edd3 7a00 	vldr	s15, [r3]
 80013ea:	eef1 7a67 	vneg.f32	s15, s15
 80013ee:	ee17 3a90 	vmov	r3, s15
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8d0 	bl	8000598 <__aeabi_f2d>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <setPhaseVoltage+0x210>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8c9 	bl	8000598 <__aeabi_f2d>
 8001406:	a324      	add	r3, pc, #144	; (adr r3, 8001498 <setPhaseVoltage+0x200>)
 8001408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140c:	f7ff f91c 	bl	8000648 <__aeabi_dmul>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4620      	mov	r0, r4
 8001416:	4629      	mov	r1, r5
 8001418:	f7fe ff5e 	bl	80002d8 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4610      	mov	r0, r2
 8001422:	4619      	mov	r1, r3
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142c:	f7ff fa36 	bl	800089c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4614      	mov	r4, r2
 8001436:	461d      	mov	r5, r3
 8001438:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <setPhaseVoltage+0x214>)
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001442:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001446:	ee16 0a90 	vmov	r0, s13
 800144a:	f7ff f8a5 	bl	8000598 <__aeabi_f2d>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4620      	mov	r0, r4
 8001454:	4629      	mov	r1, r5
 8001456:	f7fe ff41 	bl	80002dc <__adddf3>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fbc9 	bl	8000bf8 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <setPhaseVoltage+0x220>)
 800146a:	6013      	str	r3, [r2, #0]
  setPwm(Ua,Ub,Uc);
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <setPhaseVoltage+0x218>)
 800146e:	edd3 7a00 	vldr	s15, [r3]
 8001472:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <setPhaseVoltage+0x21c>)
 8001474:	ed93 7a00 	vldr	s14, [r3]
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <setPhaseVoltage+0x220>)
 800147a:	edd3 6a00 	vldr	s13, [r3]
 800147e:	eeb0 1a66 	vmov.f32	s2, s13
 8001482:	eef0 0a47 	vmov.f32	s1, s14
 8001486:	eeb0 0a67 	vmov.f32	s0, s15
 800148a:	f7ff fdd9 	bl	8001040 <setPwm>
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bdb0      	pop	{r4, r5, r7, pc}
 8001496:	bf00      	nop
 8001498:	e8584caa 	.word	0xe8584caa
 800149c:	3ffbb67a 	.word	0x3ffbb67a
 80014a0:	200003e0 	.word	0x200003e0
 80014a4:	200003e4 	.word	0x200003e4
 80014a8:	200003e8 	.word	0x200003e8
 80014ac:	20000004 	.word	0x20000004
 80014b0:	200003ec 	.word	0x200003ec
 80014b4:	200003f0 	.word	0x200003f0
 80014b8:	200003f4 	.word	0x200003f4

080014bc <velocityOpenloop>:


//开环速度函数
float velocityOpenloop(float target_velocity){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	ed87 0a01 	vstr	s0, [r7, #4]
//	uint32_t now_us = HAL_GetTick();
//  Provides a tick value in microseconds.

  //计算当前每个Loop的运行时间间隔
//  float Ts = (now_us - open_loop_timestamp) * 1e-3f;
	float Ts=5E-3f;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	; (8001530 <velocityOpenloop+0x74>)
 80014c8:	60fb      	str	r3, [r7, #12]

  // 通过乘以时间间隔和目标速度来计算需要转动的机械角度，存储在 shaft_angle 变量中。
  //在此之前，还需要对轴角度进行归一化，以确保其值在 0 到 2π 之间。
  shaft_angle = _normalizeAngle(shaft_angle + target_velocity*Ts);
 80014ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80014ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014d6:	4b17      	ldr	r3, [pc, #92]	; (8001534 <velocityOpenloop+0x78>)
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	f7ff fd70 	bl	8000fc8 <_normalizeAngle>
 80014e8:	eef0 7a40 	vmov.f32	s15, s0
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <velocityOpenloop+0x78>)
 80014ee:	edc3 7a00 	vstr	s15, [r3]
  //以目标速度为 10 rad/s 为例，如果时间间隔是 1 秒，则在每个循环中需要增加 10 * 1 = 10 弧度的角度变化量，才能使电机转动到目标速度。
  //如果时间间隔是 0.1 秒，那么在每个循环中需要增加的角度变化量就是 10 * 0.1 = 1 弧度，才能实现相同的目标速度。
  //因此，电机轴的转动角度取决于目标速度和时间间隔的乘积。

  // 使用早前设置的voltage_limit作为Uq值，这个值会直接影响输出力矩
  float Uq = 5.5;
 80014f2:	4b11      	ldr	r3, [pc, #68]	; (8001538 <velocityOpenloop+0x7c>)
 80014f4:	60bb      	str	r3, [r7, #8]

  setPhaseVoltage(Uq,  0, _electricalAngle(shaft_angle, pole_pairs));
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <velocityOpenloop+0x78>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <velocityOpenloop+0x80>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	eeb0 0a67 	vmov.f32	s0, s15
 8001506:	f7ff fd49 	bl	8000f9c <_electricalAngle>
 800150a:	eef0 7a40 	vmov.f32	s15, s0
 800150e:	eeb0 1a67 	vmov.f32	s2, s15
 8001512:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001540 <velocityOpenloop+0x84>
 8001516:	ed97 0a02 	vldr	s0, [r7, #8]
 800151a:	f7ff febd 	bl	8001298 <setPhaseVoltage>

//  open_loop_timestamp = now_us;  //用于计算下一个时间间隔

  return Uq;
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	ee07 3a90 	vmov	s15, r3
}
 8001524:	eeb0 0a67 	vmov.f32	s0, s15
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	3ba3d70a 	.word	0x3ba3d70a
 8001534:	200003dc 	.word	0x200003dc
 8001538:	40b00000 	.word	0x40b00000
 800153c:	2000000c 	.word	0x2000000c
 8001540:	00000000 	.word	0x00000000

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f000 fd83 	bl	8002052 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f85a 	bl	8001604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f000 fa96 	bl	8001a80 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001554:	f000 f934 	bl	80017c0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8001558:	f000 f97c 	bl	8001854 <MX_TIM1_Init>
  MX_USB_Device_Init();
 800155c:	f00b f816 	bl	800c58c <MX_USB_Device_Init>
  MX_TIM2_Init();
 8001560:	f000 fa40 	bl	80019e4 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001564:	f000 f898 	bl	8001698 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001568:	2201      	movs	r2, #1
 800156a:	2120      	movs	r1, #32
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f002 f9f2 	bl	8003958 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(EN_FAULT_GPIO_Port, EN_FAULT_Pin, GPIO_PIN_SET);
 8001574:	2201      	movs	r2, #1
 8001576:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800157a:	481b      	ldr	r0, [pc, #108]	; (80015e8 <main+0xa4>)
 800157c:	f002 f9ec 	bl	8003958 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENU_GPIO_Port, ENU_Pin, GPIO_PIN_SET);
 8001580:	2201      	movs	r2, #1
 8001582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001586:	4818      	ldr	r0, [pc, #96]	; (80015e8 <main+0xa4>)
 8001588:	f002 f9e6 	bl	8003958 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENV_GPIO_Port, ENV_Pin, GPIO_PIN_SET);
 800158c:	2201      	movs	r2, #1
 800158e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001592:	4815      	ldr	r0, [pc, #84]	; (80015e8 <main+0xa4>)
 8001594:	f002 f9e0 	bl	8003958 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENW_GPIO_Port, ENW_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <main+0xa4>)
 80015a0:	f002 f9da 	bl	8003958 <HAL_GPIO_WritePin>
  sprintf(data, "Hello from stm32 \n");
 80015a4:	4911      	ldr	r1, [pc, #68]	; (80015ec <main+0xa8>)
 80015a6:	4812      	ldr	r0, [pc, #72]	; (80015f0 <main+0xac>)
 80015a8:	f00c ff0a 	bl	800e3c0 <siprintf>
  HAL_UART_Transmit(&hlpuart1,(uint8_t *)data, strlen(data),100);
 80015ac:	4810      	ldr	r0, [pc, #64]	; (80015f0 <main+0xac>)
 80015ae:	f7fe fe37 	bl	8000220 <strlen>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	2364      	movs	r3, #100	; 0x64
 80015b8:	490d      	ldr	r1, [pc, #52]	; (80015f0 <main+0xac>)
 80015ba:	480e      	ldr	r0, [pc, #56]	; (80015f4 <main+0xb0>)
 80015bc:	f006 fae4 	bl	8007b88 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80015c0:	2100      	movs	r1, #0
 80015c2:	480d      	ldr	r0, [pc, #52]	; (80015f8 <main+0xb4>)
 80015c4:	f005 f82a 	bl	800661c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015c8:	2104      	movs	r1, #4
 80015ca:	480b      	ldr	r0, [pc, #44]	; (80015f8 <main+0xb4>)
 80015cc:	f005 f826 	bl	800661c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80015d0:	2108      	movs	r1, #8
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <main+0xb4>)
 80015d4:	f005 f822 	bl	800661c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <main+0xb8>)
 80015da:	f004 ff53 	bl	8006484 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 80015de:	4808      	ldr	r0, [pc, #32]	; (8001600 <main+0xbc>)
 80015e0:	f001 f942 	bl	8002868 <HAL_ADC_Start>
//  int index=0;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <main+0xa0>
 80015e6:	bf00      	nop
 80015e8:	48000400 	.word	0x48000400
 80015ec:	0800ecb8 	.word	0x0800ecb8
 80015f0:	200003a8 	.word	0x200003a8
 80015f4:	20000280 	.word	0x20000280
 80015f8:	20000310 	.word	0x20000310
 80015fc:	2000035c 	.word	0x2000035c
 8001600:	20000214 	.word	0x20000214

08001604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b094      	sub	sp, #80	; 0x50
 8001608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160a:	f107 0318 	add.w	r3, r7, #24
 800160e:	2238      	movs	r2, #56	; 0x38
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f00c fecc 	bl	800e3b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001626:	f44f 7000 	mov.w	r0, #512	; 0x200
 800162a:	f003 fefb 	bl	8005424 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800163c:	2303      	movs	r3, #3
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001640:	2304      	movs	r3, #4
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001644:	2310      	movs	r3, #16
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001648:	2302      	movs	r3, #2
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800164c:	2302      	movs	r3, #2
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f003 ff97 	bl	800558c <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8001664:	f000 fae6 	bl	8001c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2303      	movs	r3, #3
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2101      	movs	r1, #1
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fa9b 	bl	8005bbc <HAL_RCC_ClockConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800168c:	f000 fad2 	bl	8001c34 <Error_Handler>
  }
}
 8001690:	bf00      	nop
 8001692:	3750      	adds	r7, #80	; 0x50
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800169e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2220      	movs	r2, #32
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f00c fe7d 	bl	800e3b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016b6:	4b3f      	ldr	r3, [pc, #252]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80016bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80016be:	4b3d      	ldr	r3, [pc, #244]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80016c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c6:	4b3b      	ldr	r3, [pc, #236]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016cc:	4b39      	ldr	r3, [pc, #228]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016d8:	4b36      	ldr	r3, [pc, #216]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016da:	2201      	movs	r2, #1
 80016dc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016de:	4b35      	ldr	r3, [pc, #212]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016e0:	2204      	movs	r2, #4
 80016e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e4:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80016f0:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016f2:	2203      	movs	r2, #3
 80016f4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f6:	4b2f      	ldr	r3, [pc, #188]	; (80017b4 <MX_ADC1_Init+0x11c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <MX_ADC1_Init+0x11c>)
 8001700:	2200      	movs	r2, #0
 8001702:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <MX_ADC1_Init+0x11c>)
 8001706:	2200      	movs	r2, #0
 8001708:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <MX_ADC1_Init+0x11c>)
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001712:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MX_ADC1_Init+0x11c>)
 8001714:	2200      	movs	r2, #0
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <MX_ADC1_Init+0x11c>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001720:	4824      	ldr	r0, [pc, #144]	; (80017b4 <MX_ADC1_Init+0x11c>)
 8001722:	f000 ff17 	bl	8002554 <HAL_ADC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800172c:	f000 fa82 	bl	8001c34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001738:	4619      	mov	r1, r3
 800173a:	481e      	ldr	r0, [pc, #120]	; (80017b4 <MX_ADC1_Init+0x11c>)
 800173c:	f001 fdd6 	bl	80032ec <HAL_ADCEx_MultiModeConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001746:	f000 fa75 	bl	8001c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <MX_ADC1_Init+0x120>)
 800174c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800174e:	2306      	movs	r3, #6
 8001750:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001756:	237f      	movs	r3, #127	; 0x7f
 8001758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800175a:	2304      	movs	r3, #4
 800175c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	4619      	mov	r1, r3
 8001766:	4813      	ldr	r0, [pc, #76]	; (80017b4 <MX_ADC1_Init+0x11c>)
 8001768:	f001 f948 	bl	80029fc <HAL_ADC_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001772:	f000 fa5f 	bl	8001c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_ADC1_Init+0x124>)
 8001778:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800177a:	230c      	movs	r3, #12
 800177c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_ADC1_Init+0x11c>)
 8001784:	f001 f93a 	bl	80029fc <HAL_ADC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800178e:	f000 fa51 	bl	8001c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001792:	2312      	movs	r3, #18
 8001794:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_ADC1_Init+0x11c>)
 800179c:	f001 f92e 	bl	80029fc <HAL_ADC_ConfigChannel>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_ADC1_Init+0x112>
  {
    Error_Handler();
 80017a6:	f000 fa45 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017aa:	bf00      	nop
 80017ac:	3730      	adds	r7, #48	; 0x30
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000214 	.word	0x20000214
 80017b8:	3ac04000 	.word	0x3ac04000
 80017bc:	08600004 	.word	0x08600004

080017c0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80017c4:	4b21      	ldr	r3, [pc, #132]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017c6:	4a22      	ldr	r2, [pc, #136]	; (8001850 <MX_LPUART1_UART_Init+0x90>)
 80017c8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017d2:	4b1e      	ldr	r3, [pc, #120]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017e6:	220c      	movs	r2, #12
 80017e8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017f0:	4b16      	ldr	r3, [pc, #88]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 80017fe:	2200      	movs	r2, #0
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001802:	4812      	ldr	r0, [pc, #72]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 8001804:	f006 f970 	bl	8007ae8 <HAL_UART_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800180e:	f000 fa11 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 8001816:	f006 ff07 	bl	8008628 <HAL_UARTEx_SetTxFifoThreshold>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001820:	f000 fa08 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001824:	2100      	movs	r1, #0
 8001826:	4809      	ldr	r0, [pc, #36]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 8001828:	f006 ff3c 	bl	80086a4 <HAL_UARTEx_SetRxFifoThreshold>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8001832:	f000 f9ff 	bl	8001c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_LPUART1_UART_Init+0x8c>)
 8001838:	f006 febd 	bl	80085b6 <HAL_UARTEx_DisableFifoMode>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001842:	f000 f9f7 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000280 	.word	0x20000280
 8001850:	40008000 	.word	0x40008000

08001854 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b09c      	sub	sp, #112	; 0x70
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001868:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
 8001884:	615a      	str	r2, [r3, #20]
 8001886:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2234      	movs	r2, #52	; 0x34
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f00c fd8e 	bl	800e3b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001894:	4b51      	ldr	r3, [pc, #324]	; (80019dc <MX_TIM1_Init+0x188>)
 8001896:	4a52      	ldr	r2, [pc, #328]	; (80019e0 <MX_TIM1_Init+0x18c>)
 8001898:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800189a:	4b50      	ldr	r3, [pc, #320]	; (80019dc <MX_TIM1_Init+0x188>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b4e      	ldr	r3, [pc, #312]	; (80019dc <MX_TIM1_Init+0x188>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1599;
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <MX_TIM1_Init+0x188>)
 80018a8:	f240 623f 	movw	r2, #1599	; 0x63f
 80018ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b4b      	ldr	r3, [pc, #300]	; (80019dc <MX_TIM1_Init+0x188>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018b4:	4b49      	ldr	r3, [pc, #292]	; (80019dc <MX_TIM1_Init+0x188>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ba:	4b48      	ldr	r3, [pc, #288]	; (80019dc <MX_TIM1_Init+0x188>)
 80018bc:	2200      	movs	r2, #0
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018c0:	4846      	ldr	r0, [pc, #280]	; (80019dc <MX_TIM1_Init+0x188>)
 80018c2:	f004 fd87 	bl	80063d4 <HAL_TIM_Base_Init>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80018cc:	f000 f9b2 	bl	8001c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018d6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80018da:	4619      	mov	r1, r3
 80018dc:	483f      	ldr	r0, [pc, #252]	; (80019dc <MX_TIM1_Init+0x188>)
 80018de:	f005 fa31 	bl	8006d44 <HAL_TIM_ConfigClockSource>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018e8:	f000 f9a4 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018ec:	483b      	ldr	r0, [pc, #236]	; (80019dc <MX_TIM1_Init+0x188>)
 80018ee:	f004 fe33 	bl	8006558 <HAL_TIM_PWM_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80018f8:	f000 f99c 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001908:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800190c:	4619      	mov	r1, r3
 800190e:	4833      	ldr	r0, [pc, #204]	; (80019dc <MX_TIM1_Init+0x188>)
 8001910:	f005 ff82 	bl	8007818 <HAL_TIMEx_MasterConfigSynchronization>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800191a:	f000 f98b 	bl	8001c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191e:	2360      	movs	r3, #96	; 0x60
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001926:	2300      	movs	r3, #0
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001932:	2300      	movs	r3, #0
 8001934:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001936:	2300      	movs	r3, #0
 8001938:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800193a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800193e:	2200      	movs	r2, #0
 8001940:	4619      	mov	r1, r3
 8001942:	4826      	ldr	r0, [pc, #152]	; (80019dc <MX_TIM1_Init+0x188>)
 8001944:	f005 f8ea 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800194e:	f000 f971 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001956:	2204      	movs	r2, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4820      	ldr	r0, [pc, #128]	; (80019dc <MX_TIM1_Init+0x188>)
 800195c:	f005 f8de 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001966:	f000 f965 	bl	8001c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800196a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800196e:	2208      	movs	r2, #8
 8001970:	4619      	mov	r1, r3
 8001972:	481a      	ldr	r0, [pc, #104]	; (80019dc <MX_TIM1_Init+0x188>)
 8001974:	f005 f8d2 	bl	8006b1c <HAL_TIM_PWM_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800197e:	f000 f959 	bl	8001c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800199a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ae:	2300      	movs	r3, #0
 80019b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80019b2:	2300      	movs	r3, #0
 80019b4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <MX_TIM1_Init+0x188>)
 80019c0:	f005 ffac 	bl	800791c <HAL_TIMEx_ConfigBreakDeadTime>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80019ca:	f000 f933 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ce:	4803      	ldr	r0, [pc, #12]	; (80019dc <MX_TIM1_Init+0x188>)
 80019d0:	f000 fa58 	bl	8001e84 <HAL_TIM_MspPostInit>

}
 80019d4:	bf00      	nop
 80019d6:	3770      	adds	r7, #112	; 0x70
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000310 	.word	0x20000310
 80019e0:	40012c00 	.word	0x40012c00

080019e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b088      	sub	sp, #32
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	605a      	str	r2, [r3, #4]
 8001a00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a0c:	224f      	movs	r2, #79	; 0x4f
 8001a0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2999;
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a18:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001a1c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a2c:	f004 fcd2 	bl	80063d4 <HAL_TIM_Base_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a36:	f000 f8fd 	bl	8001c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a3e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a40:	f107 0310 	add.w	r3, r7, #16
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a48:	f005 f97c 	bl	8006d44 <HAL_TIM_ConfigClockSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a52:	f000 f8ef 	bl	8001c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_TIM2_Init+0x98>)
 8001a64:	f005 fed8 	bl	8007818 <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a6e:	f000 f8e1 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	2000035c 	.word	0x2000035c

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a35      	ldr	r2, [pc, #212]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001a9c:	f043 0304 	orr.w	r3, r3, #4
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab2:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001ab4:	f043 0320 	orr.w	r3, r3, #32
 8001ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a29      	ldr	r2, [pc, #164]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_GPIO_Init+0xf0>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2120      	movs	r1, #32
 8001afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afe:	f001 ff2b 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_FAULT_Pin|ENU_Pin|ENV_Pin|ENW_Pin, GPIO_PIN_RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001b08:	481a      	ldr	r0, [pc, #104]	; (8001b74 <MX_GPIO_Init+0xf4>)
 8001b0a:	f001 ff25 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 0314 	add.w	r3, r7, #20
 8001b22:	4619      	mov	r1, r3
 8001b24:	4814      	ldr	r0, [pc, #80]	; (8001b78 <MX_GPIO_Init+0xf8>)
 8001b26:	f001 fd95 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b2a:	2320      	movs	r3, #32
 8001b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b44:	f001 fd86 	bl	8003654 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_FAULT_Pin ENU_Pin ENV_Pin ENW_Pin */
  GPIO_InitStruct.Pin = EN_FAULT_Pin|ENU_Pin|ENV_Pin|ENW_Pin;
 8001b48:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001b4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5a:	f107 0314 	add.w	r3, r7, #20
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <MX_GPIO_Init+0xf4>)
 8001b62:	f001 fd77 	bl	8003654 <HAL_GPIO_Init>

}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	; 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	48000400 	.word	0x48000400
 8001b78:	48000800 	.word	0x48000800

08001b7c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d141      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x94>
  {
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001b8c:	2120      	movs	r1, #32
 8001b8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b92:	f001 fef9 	bl	8003988 <HAL_GPIO_TogglePin>
    velocityOpenloop(5);
 8001b96:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001b9a:	f7ff fc8f 	bl	80014bc <velocityOpenloop>
    index1+=1;
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001ba6:	6013      	str	r3, [r2, #0]
    if (index1 == 200){
 8001ba8:	4b1c      	ldr	r3, [pc, #112]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2bc8      	cmp	r3, #200	; 0xc8
 8001bae:	d12f      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0x94>
		adc_values[0] = HAL_ADC_GetValue(&hadc1); // Get IN1 converted value
 8001bb0:	481b      	ldr	r0, [pc, #108]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bb2:	f000 ff15 	bl	80029e0 <HAL_ADC_GetValue>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bbc:	801a      	strh	r2, [r3, #0]
		adc_values[1] = HAL_ADC_GetValue(&hadc1); // Get IN2 converted value
 8001bbe:	4818      	ldr	r0, [pc, #96]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bc0:	f000 ff0e 	bl	80029e0 <HAL_ADC_GetValue>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bca:	805a      	strh	r2, [r3, #2]
		adc_values[2] = HAL_ADC_GetValue(&hadc1); // Get IN3 converted value
 8001bcc:	4814      	ldr	r0, [pc, #80]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001bce:	f000 ff07 	bl	80029e0 <HAL_ADC_GetValue>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bd8:	809a      	strh	r2, [r3, #4]
		sprintf(data, "sensed voltage: %u  \t %u \t %u  \n", adc_values[0] ,adc_values[1],adc_values[2]  );
 8001bda:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001be2:	885b      	ldrh	r3, [r3, #2]
 8001be4:	4619      	mov	r1, r3
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001be8:	889b      	ldrh	r3, [r3, #4]
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	460b      	mov	r3, r1
 8001bee:	490e      	ldr	r1, [pc, #56]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bf0:	480e      	ldr	r0, [pc, #56]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bf2:	f00c fbe5 	bl	800e3c0 <siprintf>
//    	sprintf(data, "open loop control \n");
    	HAL_UART_Transmit(&hlpuart1,(uint8_t *)data, strlen(data),100);
 8001bf6:	480d      	ldr	r0, [pc, #52]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001bf8:	f7fe fb12 	bl	8000220 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	2364      	movs	r3, #100	; 0x64
 8001c02:	490a      	ldr	r1, [pc, #40]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c04:	480a      	ldr	r0, [pc, #40]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001c06:	f005 ffbf 	bl	8007b88 <HAL_UART_Transmit>
    	index1=0;
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2000035c 	.word	0x2000035c
 8001c1c:	20000404 	.word	0x20000404
 8001c20:	20000214 	.word	0x20000214
 8001c24:	20000408 	.word	0x20000408
 8001c28:	0800eccc 	.word	0x0800eccc
 8001c2c:	200003a8 	.word	0x200003a8
 8001c30:	20000280 	.word	0x20000280

08001c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c38:	b672      	cpsid	i
}
 8001c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <Error_Handler+0x8>
	...

08001c40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_MspInit+0x44>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	4a0e      	ldr	r2, [pc, #56]	; (8001c84 <HAL_MspInit+0x44>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6613      	str	r3, [r2, #96]	; 0x60
 8001c52:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <HAL_MspInit+0x44>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_MspInit+0x44>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	4a08      	ldr	r2, [pc, #32]	; (8001c84 <HAL_MspInit+0x44>)
 8001c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_MspInit+0x44>)
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001c76:	f003 fc79 	bl	800556c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000

08001c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b09c      	sub	sp, #112	; 0x70
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ca0:	f107 0318 	add.w	r3, r7, #24
 8001ca4:	2244      	movs	r2, #68	; 0x44
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00c fb81 	bl	800e3b0 <memset>
  if(hadc->Instance==ADC1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cb6:	d14d      	bne.n	8001d54 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cbc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001cbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cc2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f993 	bl	8005ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001cd4:	f7ff ffae 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001cd8:	4b20      	ldr	r3, [pc, #128]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cdc:	4a1f      	ldr	r2, [pc, #124]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001cde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf4:	4a19      	ldr	r2, [pc, #100]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	613b      	str	r3, [r7, #16]
 8001d06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <HAL_ADC_MspInit+0xd4>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001d20:	2302      	movs	r3, #2
 8001d22:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d24:	2303      	movs	r3, #3
 8001d26:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d30:	4619      	mov	r1, r3
 8001d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d36:	f001 fc8d 	bl	8003654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11;
 8001d3a:	f640 0301 	movw	r3, #2049	; 0x801
 8001d3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d40:	2303      	movs	r3, #3
 8001d42:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <HAL_ADC_MspInit+0xd8>)
 8001d50:	f001 fc80 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3770      	adds	r7, #112	; 0x70
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000400 	.word	0x48000400

08001d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b09a      	sub	sp, #104	; 0x68
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	2244      	movs	r2, #68	; 0x44
 8001d82:	2100      	movs	r1, #0
 8001d84:	4618      	mov	r0, r3
 8001d86:	f00c fb13 	bl	800e3b0 <memset>
  if(huart->Instance==LPUART1)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1f      	ldr	r2, [pc, #124]	; (8001e0c <HAL_UART_MspInit+0xa8>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d136      	bne.n	8001e02 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d94:	2320      	movs	r3, #32
 8001d96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4618      	mov	r0, r3
 8001da2:	f004 f927 	bl	8005ff4 <HAL_RCCEx_PeriphCLKConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001dac:	f7ff ff42 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001db4:	4a16      	ldr	r2, [pc, #88]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	4a10      	ldr	r2, [pc, #64]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_UART_MspInit+0xac>)
 8001dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001de0:	230c      	movs	r3, #12
 8001de2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	2300      	movs	r3, #0
 8001dee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001df0:	230c      	movs	r3, #12
 8001df2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dfe:	f001 fc29 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3768      	adds	r7, #104	; 0x68
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40008000 	.word	0x40008000
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_TIM_Base_MspInit+0x68>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10c      	bne.n	8001e40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e26:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e2a:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e30:	6613      	str	r3, [r2, #96]	; 0x60
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e3e:	e018      	b.n	8001e72 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e48:	d113      	bne.n	8001e72 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a0c      	ldr	r2, [pc, #48]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_TIM_Base_MspInit+0x6c>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	201c      	movs	r0, #28
 8001e68:	f001 fbbf 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e6c:	201c      	movs	r0, #28
 8001e6e:	f001 fbd6 	bl	800361e <HAL_NVIC_EnableIRQ>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <HAL_TIM_MspPostInit+0x68>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d11d      	bne.n	8001ee2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_TIM_MspPostInit+0x6c>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <HAL_TIM_MspPostInit+0x6c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_TIM_MspPostInit+0x6c>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001ebe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ec2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ed0:	2306      	movs	r3, #6
 8001ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed4:	f107 030c 	add.w	r3, r7, #12
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ede:	f001 fbb9 	bl	8003654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40021000 	.word	0x40021000

08001ef4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef8:	e7fe      	b.n	8001ef8 <NMI_Handler+0x4>

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 f8da 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f4c:	4802      	ldr	r0, [pc, #8]	; (8001f58 <USB_LP_IRQHandler+0x10>)
 8001f4e:	f001 fe3c 	bl	8003bca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200010ec 	.word	0x200010ec

08001f5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f60:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM2_IRQHandler+0x10>)
 8001f62:	f004 fc5b 	bl	800681c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000035c 	.word	0x2000035c

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f00c f9dc 	bl	800e35c <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20008000 	.word	0x20008000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	20000410 	.word	0x20000410
 8001fd8:	20001610 	.word	0x20001610

08001fdc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002000:	480d      	ldr	r0, [pc, #52]	; (8002038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002002:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <LoopForever+0x6>)
  ldr r1, =_edata
 8002006:	490e      	ldr	r1, [pc, #56]	; (8002040 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <LoopForever+0xe>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <LoopForever+0x12>)
  ldr r4, =_ebss
 800201c:	4c0b      	ldr	r4, [pc, #44]	; (800204c <LoopForever+0x16>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800202a:	f7ff ffd7 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800202e:	f00c f99b 	bl	800e368 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002032:	f7ff fa87 	bl	8001544 <main>

08002036 <LoopForever>:

LoopForever:
    b LoopForever
 8002036:	e7fe      	b.n	8002036 <LoopForever>
  ldr   r0, =_estack
 8002038:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800203c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002040:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002044:	0800efa4 	.word	0x0800efa4
  ldr r2, =_sbss
 8002048:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800204c:	20001610 	.word	0x20001610

08002050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002050:	e7fe      	b.n	8002050 <ADC1_2_IRQHandler>

08002052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800205c:	2003      	movs	r0, #3
 800205e:	f001 fab9 	bl	80035d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f80e 	bl	8002084 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	71fb      	strb	r3, [r7, #7]
 8002072:	e001      	b.n	8002078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002074:	f7ff fde4 	bl	8001c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002078:	79fb      	ldrb	r3, [r7, #7]

}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_InitTick+0x68>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d022      	beq.n	80020de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002098:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <HAL_InitTick+0x6c>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_InitTick+0x68>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80020a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	4618      	mov	r0, r3
 80020ae:	f001 fac4 	bl	800363a <HAL_SYSTICK_Config>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10f      	bne.n	80020d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b0f      	cmp	r3, #15
 80020bc:	d809      	bhi.n	80020d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020be:	2200      	movs	r2, #0
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c6:	f001 fa90 	bl	80035ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020ca:	4a0a      	ldr	r2, [pc, #40]	; (80020f4 <HAL_InitTick+0x70>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e007      	b.n	80020e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
 80020d6:	e004      	b.n	80020e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e001      	b.n	80020e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20000018 	.word	0x20000018
 80020f0:	20000010 	.word	0x20000010
 80020f4:	20000014 	.word	0x20000014

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <HAL_IncTick+0x1c>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_IncTick+0x20>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4413      	add	r3, r2
 8002106:	4a03      	ldr	r2, [pc, #12]	; (8002114 <HAL_IncTick+0x1c>)
 8002108:	6013      	str	r3, [r2, #0]
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	20000414 	.word	0x20000414
 8002118:	20000018 	.word	0x20000018

0800211c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b03      	ldr	r3, [pc, #12]	; (8002130 <HAL_GetTick+0x14>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	4618      	mov	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000414 	.word	0x20000414

08002134 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	609a      	str	r2, [r3, #8]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	609a      	str	r2, [r3, #8]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002190:	4618      	mov	r0, r3
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800219c:	b480      	push	{r7}
 800219e:	b087      	sub	sp, #28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	3360      	adds	r3, #96	; 0x60
 80021ae:	461a      	mov	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <LL_ADC_SetOffset+0x44>)
 80021be:	4013      	ands	r3, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	430a      	orrs	r2, r1
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80021d4:	bf00      	nop
 80021d6:	371c      	adds	r7, #28
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	03fff000 	.word	0x03fff000

080021e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3360      	adds	r3, #96	; 0x60
 80021f2:	461a      	mov	r2, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002210:	b480      	push	{r7}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	431a      	orrs	r2, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800223a:	bf00      	nop
 800223c:	371c      	adds	r7, #28
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3360      	adds	r3, #96	; 0x60
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	431a      	orrs	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002270:	bf00      	nop
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3360      	adds	r3, #96	; 0x60
 800228c:	461a      	mov	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	695b      	ldr	r3, [r3, #20]
 80022c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	615a      	str	r2, [r3, #20]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	3330      	adds	r3, #48	; 0x30
 80022e8:	461a      	mov	r2, r3
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	4413      	add	r3, r2
 80022f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	211f      	movs	r1, #31
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	0e9b      	lsrs	r3, r3, #26
 8002310:	f003 011f 	and.w	r1, r3, #31
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	fa01 f303 	lsl.w	r3, r1, r3
 800231e:	431a      	orrs	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	3314      	adds	r3, #20
 8002340:	461a      	mov	r2, r3
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	0e5b      	lsrs	r3, r3, #25
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	4413      	add	r3, r2
 800234e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0d1b      	lsrs	r3, r3, #20
 8002358:	f003 031f 	and.w	r3, r3, #31
 800235c:	2107      	movs	r1, #7
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	401a      	ands	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	0d1b      	lsrs	r3, r3, #20
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800237a:	bf00      	nop
 800237c:	371c      	adds	r7, #28
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	4a0f      	ldr	r2, [pc, #60]	; (80023d4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d10a      	bne.n	80023b2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	431a      	orrs	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80023b0:	e00a      	b.n	80023c8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023be:	43db      	mvns	r3, r3
 80023c0:	401a      	ands	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	407f0000 	.word	0x407f0000

080023d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 031f 	and.w	r3, r3, #31
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6093      	str	r3, [r2, #8]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800242c:	d101      	bne.n	8002432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800247c:	d101      	bne.n	8002482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <LL_ADC_IsEnabled+0x18>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <LL_ADC_IsEnabled+0x1a>
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024de:	b480      	push	{r7}
 80024e0:	b083      	sub	sp, #12
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024f2:	f043 0204 	orr.w	r2, r3, #4
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d101      	bne.n	800251e <LL_ADC_REG_IsConversionOngoing+0x18>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b08      	cmp	r3, #8
 800253e:	d101      	bne.n	8002544 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255c:	2300      	movs	r3, #0
 800255e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e177      	b.n	800285e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f7ff fb83 	bl	8001c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff3f 	bl	8002418 <LL_ADC_IsDeepPowerDownEnabled>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff25 	bl	80023f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff5a 	bl	8002468 <LL_ADC_IsInternalRegulatorEnabled>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d115      	bne.n	80025e6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff3e 	bl	8002440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c4:	4b9c      	ldr	r3, [pc, #624]	; (8002838 <HAL_ADC_Init+0x2e4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	4a9c      	ldr	r2, [pc, #624]	; (800283c <HAL_ADC_Init+0x2e8>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	3301      	adds	r3, #1
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025d8:	e002      	b.n	80025e0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	3b01      	subs	r3, #1
 80025de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f9      	bne.n	80025da <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff ff3c 	bl	8002468 <LL_ADC_IsInternalRegulatorEnabled>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10d      	bne.n	8002612 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fa:	f043 0210 	orr.w	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7ff ff75 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 800261c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 8110 	bne.w	800284c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f040 810c 	bne.w	800284c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff ff35 	bl	80024b8 <LL_ADC_IsEnabled>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d111      	bne.n	8002678 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002654:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002658:	f7ff ff2e 	bl	80024b8 <LL_ADC_IsEnabled>
 800265c:	4604      	mov	r4, r0
 800265e:	4878      	ldr	r0, [pc, #480]	; (8002840 <HAL_ADC_Init+0x2ec>)
 8002660:	f7ff ff2a 	bl	80024b8 <LL_ADC_IsEnabled>
 8002664:	4603      	mov	r3, r0
 8002666:	4323      	orrs	r3, r4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	4619      	mov	r1, r3
 8002672:	4874      	ldr	r0, [pc, #464]	; (8002844 <HAL_ADC_Init+0x2f0>)
 8002674:	f7ff fd5e 	bl	8002134 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7f5b      	ldrb	r3, [r3, #29]
 800267c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002682:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002688:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800268e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002696:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d106      	bne.n	80026b4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	045b      	lsls	r3, r3, #17
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_ADC_Init+0x2f4>)
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	69b9      	ldr	r1, [r7, #24]
 80026e0:	430b      	orrs	r3, r1
 80026e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff ff01 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002704:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff0e 	bl	800252c <LL_ADC_INJ_IsConversionOngoing>
 8002710:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d16d      	bne.n	80027f4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d16a      	bne.n	80027f4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002722:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800272a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800273a:	f023 0302 	bic.w	r3, r3, #2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	69b9      	ldr	r1, [r7, #24]
 8002744:	430b      	orrs	r3, r1
 8002746:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d017      	beq.n	8002780 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800275e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002768:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800276c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6911      	ldr	r1, [r2, #16]
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	430b      	orrs	r3, r1
 800277a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800277e:	e013      	b.n	80027a8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691a      	ldr	r2, [r3, #16]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800278e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d118      	bne.n	80027e4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027c8:	4311      	orrs	r1, r2
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80027d4:	430a      	orrs	r2, r1
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0201 	orr.w	r2, r2, #1
 80027e0:	611a      	str	r2, [r3, #16]
 80027e2:	e007      	b.n	80027f4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10c      	bne.n	8002816 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f023 010f 	bic.w	r1, r3, #15
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1b      	ldr	r3, [r3, #32]
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
 8002814:	e007      	b.n	8002826 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020f 	bic.w	r2, r2, #15
 8002824:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282a:	f023 0303 	bic.w	r3, r3, #3
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c
 8002836:	e011      	b.n	800285c <HAL_ADC_Init+0x308>
 8002838:	20000010 	.word	0x20000010
 800283c:	053e2d63 	.word	0x053e2d63
 8002840:	50000100 	.word	0x50000100
 8002844:	50000300 	.word	0x50000300
 8002848:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002850:	f043 0210 	orr.w	r2, r3, #16
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800285c:	7ffb      	ldrb	r3, [r7, #31]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}
 8002866:	bf00      	nop

08002868 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002870:	4859      	ldr	r0, [pc, #356]	; (80029d8 <HAL_ADC_Start+0x170>)
 8002872:	f7ff fdb1 	bl	80023d8 <LL_ADC_GetMultimode>
 8002876:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe42 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f040 809f 	bne.w	80029c8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_ADC_Start+0x30>
 8002894:	2302      	movs	r3, #2
 8002896:	e09a      	b.n	80029ce <HAL_ADC_Start+0x166>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fc9b 	bl	80031dc <ADC_Enable>
 80028a6:	4603      	mov	r3, r0
 80028a8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f040 8086 	bne.w	80029be <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028ba:	f023 0301 	bic.w	r3, r3, #1
 80028be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a44      	ldr	r2, [pc, #272]	; (80029dc <HAL_ADC_Start+0x174>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d002      	beq.n	80028d6 <HAL_ADC_Start+0x6e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	e001      	b.n	80028da <HAL_ADC_Start+0x72>
 80028d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	4293      	cmp	r3, r2
 80028e0:	d002      	beq.n	80028e8 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d105      	bne.n	80028f4 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002900:	d106      	bne.n	8002910 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002906:	f023 0206 	bic.w	r2, r3, #6
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	661a      	str	r2, [r3, #96]	; 0x60
 800290e:	e002      	b.n	8002916 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	221c      	movs	r2, #28
 800291c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <HAL_ADC_Start+0x174>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d002      	beq.n	8002936 <HAL_ADC_Start+0xce>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e001      	b.n	800293a <HAL_ADC_Start+0xd2>
 8002936:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4293      	cmp	r3, r2
 8002940:	d008      	beq.n	8002954 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d002      	beq.n	8002954 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d114      	bne.n	800297e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800296a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fdb1 	bl	80024de <LL_ADC_REG_StartConversion>
 800297c:	e026      	b.n	80029cc <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <HAL_ADC_Start+0x174>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d002      	beq.n	800299a <HAL_ADC_Start+0x132>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	e001      	b.n	800299e <HAL_ADC_Start+0x136>
 800299a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800299e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00f      	beq.n	80029cc <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80029bc:	e006      	b.n	80029cc <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80029c6:	e001      	b.n	80029cc <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
 80029ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	50000300 	.word	0x50000300
 80029dc:	50000100 	.word	0x50000100

080029e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0b6      	sub	sp, #216	; 0xd8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d101      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x22>
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	e3c8      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x7b4>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fd6b 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f040 83ad 	bne.w	8003192 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6818      	ldr	r0, [r3, #0]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	461a      	mov	r2, r3
 8002a46:	f7ff fc47 	bl	80022d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fd59 	bl	8002506 <LL_ADC_REG_IsConversionOngoing>
 8002a54:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fd65 	bl	800252c <LL_ADC_INJ_IsConversionOngoing>
 8002a62:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f040 81d9 	bne.w	8002e22 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f040 81d4 	bne.w	8002e22 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a82:	d10f      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6818      	ldr	r0, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	4619      	mov	r1, r3
 8002a90:	f7ff fc4e 	bl	8002330 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fc08 	bl	80022b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002aa2:	e00e      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6818      	ldr	r0, [r3, #0]
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f7ff fc3d 	bl	8002330 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fbf8 	bl	80022b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695a      	ldr	r2, [r3, #20]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d022      	beq.n	8002b2a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	6919      	ldr	r1, [r3, #16]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002af4:	f7ff fb52 	bl	800219c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	6919      	ldr	r1, [r3, #16]
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	461a      	mov	r2, r3
 8002b06:	f7ff fb9e 	bl	8002246 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	6919      	ldr	r1, [r3, #16]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	7f1b      	ldrb	r3, [r3, #28]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d102      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x124>
 8002b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b1e:	e000      	b.n	8002b22 <HAL_ADC_ConfigChannel+0x126>
 8002b20:	2300      	movs	r3, #0
 8002b22:	461a      	mov	r2, r3
 8002b24:	f7ff fbaa 	bl	800227c <LL_ADC_SetOffsetSaturation>
 8002b28:	e17b      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fb57 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x15a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fb4c 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	e01e      	b.n	8002b94 <HAL_ADC_ConfigChannel+0x198>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fb41 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002b84:	2320      	movs	r3, #32
 8002b86:	e004      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d105      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1b0>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0e9b      	lsrs	r3, r3, #26
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	e018      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1e2>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bc8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e004      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002bd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d106      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fb10 	bl	8002210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff faf4 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10a      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x220>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff fae9 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 021f 	and.w	r2, r3, #31
 8002c1a:	e01e      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x25e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fade 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c32:	fa93 f3a3 	rbit	r3, r3
 8002c36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e004      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8002c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d105      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x276>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	0e9b      	lsrs	r3, r3, #26
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	e018      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x2a8>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e004      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002c9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d106      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2200      	movs	r2, #0
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff faad 	bl	8002210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fa91 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10a      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x2e6>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2102      	movs	r1, #2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fa86 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	0e9b      	lsrs	r3, r3, #26
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	e01e      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x324>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fa7b 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d04:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e004      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d18:	fab3 f383 	clz	r3, r3
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_ADC_ConfigChannel+0x33c>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	0e9b      	lsrs	r3, r3, #26
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	e016      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x36a>
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d44:	fa93 f3a3 	rbit	r3, r3
 8002d48:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e004      	b.n	8002d66 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002d5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d106      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff fa4c 	bl	8002210 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2103      	movs	r1, #3
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff fa30 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x3a8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2103      	movs	r1, #3
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fa25 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	0e9b      	lsrs	r3, r3, #26
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	e017      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x3d8>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2103      	movs	r1, #3
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa1a 	bl	80021e4 <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dbe:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e003      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x3f0>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	0e9b      	lsrs	r3, r3, #26
 8002de6:	f003 031f 	and.w	r3, r3, #31
 8002dea:	e011      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x414>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dfc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002e04:	2320      	movs	r3, #32
 8002e06:	e003      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d106      	bne.n	8002e22 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2103      	movs	r1, #3
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff f9f7 	bl	8002210 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb46 	bl	80024b8 <LL_ADC_IsEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f040 8140 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6819      	ldr	r1, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	461a      	mov	r2, r3
 8002e42:	f7ff faa1 	bl	8002388 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	4a8f      	ldr	r2, [pc, #572]	; (8003088 <HAL_ADC_ConfigChannel+0x68c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	f040 8131 	bne.w	80030b4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x47e>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0e9b      	lsrs	r3, r3, #26
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	2b09      	cmp	r3, #9
 8002e70:	bf94      	ite	ls
 8002e72:	2301      	movls	r3, #1
 8002e74:	2300      	movhi	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e019      	b.n	8002eae <HAL_ADC_ConfigChannel+0x4b2>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e82:	fa93 f3a3 	rbit	r3, r3
 8002e86:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002e92:	2320      	movs	r3, #32
 8002e94:	e003      	b.n	8002e9e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e98:	fab3 f383 	clz	r3, r3
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	2b09      	cmp	r3, #9
 8002ea6:	bf94      	ite	ls
 8002ea8:	2301      	movls	r3, #1
 8002eaa:	2300      	movhi	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d079      	beq.n	8002fa6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x4d2>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	069b      	lsls	r3, r3, #26
 8002ec8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ecc:	e015      	b.n	8002efa <HAL_ADC_ConfigChannel+0x4fe>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ed6:	fa93 f3a3 	rbit	r3, r3
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002ee6:	2320      	movs	r3, #32
 8002ee8:	e003      	b.n	8002ef2 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x51e>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	e017      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x54e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002f32:	2320      	movs	r3, #32
 8002f34:	e003      	b.n	8002f3e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f38:	fab3 f383 	clz	r3, r3
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	3301      	adds	r3, #1
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	2101      	movs	r1, #1
 8002f46:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4a:	ea42 0103 	orr.w	r1, r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x574>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	3301      	adds	r3, #1
 8002f62:	f003 021f 	and.w	r2, r3, #31
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	051b      	lsls	r3, r3, #20
 8002f6e:	e018      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x5a6>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	fa93 f3a3 	rbit	r3, r3
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002f88:	2320      	movs	r3, #32
 8002f8a:	e003      	b.n	8002f94 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8e:	fab3 f383 	clz	r3, r3
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	3301      	adds	r3, #1
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	4413      	add	r3, r2
 8002fa0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa2:	430b      	orrs	r3, r1
 8002fa4:	e081      	b.n	80030aa <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d107      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x5c6>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0e9b      	lsrs	r3, r3, #26
 8002fb8:	3301      	adds	r3, #1
 8002fba:	069b      	lsls	r3, r3, #26
 8002fbc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc0:	e015      	b.n	8002fee <HAL_ADC_ConfigChannel+0x5f2>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002fda:	2320      	movs	r3, #32
 8002fdc:	e003      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe0:	fab3 f383 	clz	r3, r3
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	069b      	lsls	r3, r3, #26
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d109      	bne.n	800300e <HAL_ADC_ConfigChannel+0x612>
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	0e9b      	lsrs	r3, r3, #26
 8003000:	3301      	adds	r3, #1
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	2101      	movs	r1, #1
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	e017      	b.n	800303e <HAL_ADC_ConfigChannel+0x642>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	61fb      	str	r3, [r7, #28]
  return result;
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003026:	2320      	movs	r3, #32
 8003028:	e003      	b.n	8003032 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	fab3 f383 	clz	r3, r3
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	ea42 0103 	orr.w	r1, r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10d      	bne.n	800306a <HAL_ADC_ConfigChannel+0x66e>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	0e9b      	lsrs	r3, r3, #26
 8003054:	3301      	adds	r3, #1
 8003056:	f003 021f 	and.w	r2, r3, #31
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	3b1e      	subs	r3, #30
 8003062:	051b      	lsls	r3, r3, #20
 8003064:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003068:	e01e      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x6ac>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa93 f3a3 	rbit	r3, r3
 8003076:	613b      	str	r3, [r7, #16]
  return result;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003082:	2320      	movs	r3, #32
 8003084:	e006      	b.n	8003094 <HAL_ADC_ConfigChannel+0x698>
 8003086:	bf00      	nop
 8003088:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	3301      	adds	r3, #1
 8003096:	f003 021f 	and.w	r2, r3, #31
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	3b1e      	subs	r3, #30
 80030a2:	051b      	lsls	r3, r3, #20
 80030a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030a8:	430b      	orrs	r3, r1
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6892      	ldr	r2, [r2, #8]
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7ff f93e 	bl	8002330 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <HAL_ADC_ConfigChannel+0x7bc>)
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d071      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c0:	483e      	ldr	r0, [pc, #248]	; (80031bc <HAL_ADC_ConfigChannel+0x7c0>)
 80030c2:	f7ff f85d 	bl	8002180 <LL_ADC_GetCommonPathInternalCh>
 80030c6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a3c      	ldr	r2, [pc, #240]	; (80031c0 <HAL_ADC_ConfigChannel+0x7c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_ADC_ConfigChannel+0x6e2>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a3a      	ldr	r2, [pc, #232]	; (80031c4 <HAL_ADC_ConfigChannel+0x7c8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d127      	bne.n	800312e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d121      	bne.n	800312e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f2:	d157      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030fc:	4619      	mov	r1, r3
 80030fe:	482f      	ldr	r0, [pc, #188]	; (80031bc <HAL_ADC_ConfigChannel+0x7c0>)
 8003100:	f7ff f82b 	bl	800215a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003104:	4b30      	ldr	r3, [pc, #192]	; (80031c8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	099b      	lsrs	r3, r3, #6
 800310a:	4a30      	ldr	r2, [pc, #192]	; (80031cc <HAL_ADC_ConfigChannel+0x7d0>)
 800310c:	fba2 2303 	umull	r2, r3, r2, r3
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800311e:	e002      	b.n	8003126 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	3b01      	subs	r3, #1
 8003124:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f9      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800312c:	e03a      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a27      	ldr	r2, [pc, #156]	; (80031d0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d113      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x764>
 8003138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10d      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a22      	ldr	r2, [pc, #136]	; (80031d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02a      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800314e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	4619      	mov	r1, r3
 8003158:	4818      	ldr	r0, [pc, #96]	; (80031bc <HAL_ADC_ConfigChannel+0x7c0>)
 800315a:	f7fe fffe 	bl	800215a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800315e:	e021      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d11c      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800316a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800316e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d116      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a16      	ldr	r2, [pc, #88]	; (80031d4 <HAL_ADC_ConfigChannel+0x7d8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d011      	beq.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003188:	4619      	mov	r1, r3
 800318a:	480c      	ldr	r0, [pc, #48]	; (80031bc <HAL_ADC_ConfigChannel+0x7c0>)
 800318c:	f7fe ffe5 	bl	800215a <LL_ADC_SetCommonPathInternalCh>
 8003190:	e008      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	f043 0220 	orr.w	r2, r3, #32
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80031ac:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	37d8      	adds	r7, #216	; 0xd8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	80080000 	.word	0x80080000
 80031bc:	50000300 	.word	0x50000300
 80031c0:	c3210000 	.word	0xc3210000
 80031c4:	90c00010 	.word	0x90c00010
 80031c8:	20000010 	.word	0x20000010
 80031cc:	053e2d63 	.word	0x053e2d63
 80031d0:	c7520000 	.word	0xc7520000
 80031d4:	50000100 	.word	0x50000100
 80031d8:	cb840000 	.word	0xcb840000

080031dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff f965 	bl	80024b8 <LL_ADC_IsEnabled>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d14d      	bne.n	8003290 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <ADC_Enable+0xc0>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003206:	f043 0210 	orr.w	r2, r3, #16
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e039      	b.n	8003292 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f934 	bl	8002490 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003228:	f7fe ff78 	bl	800211c <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800322e:	e028      	b.n	8003282 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff f93f 	bl	80024b8 <LL_ADC_IsEnabled>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d104      	bne.n	800324a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff f923 	bl	8002490 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800324a:	f7fe ff67 	bl	800211c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d914      	bls.n	8003282 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d00d      	beq.n	8003282 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326a:	f043 0210 	orr.w	r2, r3, #16
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003276:	f043 0201 	orr.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d1cf      	bne.n	8003230 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	8000003f 	.word	0x8000003f

080032a0 <LL_ADC_IsEnabled>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <LL_ADC_IsEnabled+0x18>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <LL_ADC_IsEnabled+0x1a>
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0304 	and.w	r3, r3, #4
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d101      	bne.n	80032de <LL_ADC_REG_IsConversionOngoing+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032ec:	b590      	push	{r4, r7, lr}
 80032ee:	b0a1      	sub	sp, #132	; 0x84
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003306:	2302      	movs	r3, #2
 8003308:	e08b      	b.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003312:	2300      	movs	r3, #0
 8003314:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003316:	2300      	movs	r3, #0
 8003318:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003322:	d102      	bne.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003324:	4b41      	ldr	r3, [pc, #260]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	e001      	b.n	800332e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10b      	bne.n	800334c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e06a      	b.n	8003422 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ffb9 	bl	80032c6 <LL_ADC_REG_IsConversionOngoing>
 8003354:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ffb3 	bl	80032c6 <LL_ADC_REG_IsConversionOngoing>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d14c      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003368:	2b00      	cmp	r3, #0
 800336a:	d149      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800336c:	4b30      	ldr	r3, [pc, #192]	; (8003430 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800336e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d028      	beq.n	80033ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003378:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6859      	ldr	r1, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800338a:	035b      	lsls	r3, r3, #13
 800338c:	430b      	orrs	r3, r1
 800338e:	431a      	orrs	r2, r3
 8003390:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003392:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003394:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003398:	f7ff ff82 	bl	80032a0 <LL_ADC_IsEnabled>
 800339c:	4604      	mov	r4, r0
 800339e:	4823      	ldr	r0, [pc, #140]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033a0:	f7ff ff7e 	bl	80032a0 <LL_ADC_IsEnabled>
 80033a4:	4603      	mov	r3, r0
 80033a6:	4323      	orrs	r3, r4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d133      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033b4:	f023 030f 	bic.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	6892      	ldr	r2, [r2, #8]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	431a      	orrs	r2, r3
 80033c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033c6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033c8:	e024      	b.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033da:	f7ff ff61 	bl	80032a0 <LL_ADC_IsEnabled>
 80033de:	4604      	mov	r4, r0
 80033e0:	4812      	ldr	r0, [pc, #72]	; (800342c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80033e2:	f7ff ff5d 	bl	80032a0 <LL_ADC_IsEnabled>
 80033e6:	4603      	mov	r3, r0
 80033e8:	4323      	orrs	r3, r4
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d112      	bne.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033f6:	f023 030f 	bic.w	r3, r3, #15
 80033fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80033fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033fe:	e009      	b.n	8003414 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003412:	e000      	b.n	8003416 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800341e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003422:	4618      	mov	r0, r3
 8003424:	3784      	adds	r7, #132	; 0x84
 8003426:	46bd      	mov	sp, r7
 8003428:	bd90      	pop	{r4, r7, pc}
 800342a:	bf00      	nop
 800342c:	50000100 	.word	0x50000100
 8003430:	50000300 	.word	0x50000300

08003434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003444:	4b0c      	ldr	r3, [pc, #48]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003450:	4013      	ands	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800345c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <__NVIC_SetPriorityGrouping+0x44>)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	60d3      	str	r3, [r2, #12]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800347c:	b480      	push	{r7}
 800347e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003480:	4b04      	ldr	r3, [pc, #16]	; (8003494 <__NVIC_GetPriorityGrouping+0x18>)
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	0a1b      	lsrs	r3, r3, #8
 8003486:	f003 0307 	and.w	r3, r3, #7
}
 800348a:	4618      	mov	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	db0b      	blt.n	80034c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034aa:	79fb      	ldrb	r3, [r7, #7]
 80034ac:	f003 021f 	and.w	r2, r3, #31
 80034b0:	4907      	ldr	r1, [pc, #28]	; (80034d0 <__NVIC_EnableIRQ+0x38>)
 80034b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	2001      	movs	r0, #1
 80034ba:	fa00 f202 	lsl.w	r2, r0, r2
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	e000e100 	.word	0xe000e100

080034d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	6039      	str	r1, [r7, #0]
 80034de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	db0a      	blt.n	80034fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	490c      	ldr	r1, [pc, #48]	; (8003520 <__NVIC_SetPriority+0x4c>)
 80034ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f2:	0112      	lsls	r2, r2, #4
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	440b      	add	r3, r1
 80034f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034fc:	e00a      	b.n	8003514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4908      	ldr	r1, [pc, #32]	; (8003524 <__NVIC_SetPriority+0x50>)
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	3b04      	subs	r3, #4
 800350c:	0112      	lsls	r2, r2, #4
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	440b      	add	r3, r1
 8003512:	761a      	strb	r2, [r3, #24]
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100
 8003524:	e000ed00 	.word	0xe000ed00

08003528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003528:	b480      	push	{r7}
 800352a:	b089      	sub	sp, #36	; 0x24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	f1c3 0307 	rsb	r3, r3, #7
 8003542:	2b04      	cmp	r3, #4
 8003544:	bf28      	it	cs
 8003546:	2304      	movcs	r3, #4
 8003548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	3304      	adds	r3, #4
 800354e:	2b06      	cmp	r3, #6
 8003550:	d902      	bls.n	8003558 <NVIC_EncodePriority+0x30>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3b03      	subs	r3, #3
 8003556:	e000      	b.n	800355a <NVIC_EncodePriority+0x32>
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800355c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	401a      	ands	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	43d9      	mvns	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003580:	4313      	orrs	r3, r2
         );
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3b01      	subs	r3, #1
 800359c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035a0:	d301      	bcc.n	80035a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035a2:	2301      	movs	r3, #1
 80035a4:	e00f      	b.n	80035c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <SysTick_Config+0x40>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ae:	210f      	movs	r1, #15
 80035b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035b4:	f7ff ff8e 	bl	80034d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035b8:	4b05      	ldr	r3, [pc, #20]	; (80035d0 <SysTick_Config+0x40>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <SysTick_Config+0x40>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	e000e010 	.word	0xe000e010

080035d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ff29 	bl	8003434 <__NVIC_SetPriorityGrouping>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b086      	sub	sp, #24
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	4603      	mov	r3, r0
 80035f2:	60b9      	str	r1, [r7, #8]
 80035f4:	607a      	str	r2, [r7, #4]
 80035f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f8:	f7ff ff40 	bl	800347c <__NVIC_GetPriorityGrouping>
 80035fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	6978      	ldr	r0, [r7, #20]
 8003604:	f7ff ff90 	bl	8003528 <NVIC_EncodePriority>
 8003608:	4602      	mov	r2, r0
 800360a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff ff5f 	bl	80034d4 <__NVIC_SetPriority>
}
 8003616:	bf00      	nop
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	4603      	mov	r3, r0
 8003626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff ff33 	bl	8003498 <__NVIC_EnableIRQ>
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff ffa4 	bl	8003590 <SysTick_Config>
 8003648:	4603      	mov	r3, r0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
	...

08003654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003654:	b480      	push	{r7}
 8003656:	b087      	sub	sp, #28
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003662:	e15a      	b.n	800391a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	2101      	movs	r1, #1
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	fa01 f303 	lsl.w	r3, r1, r3
 8003670:	4013      	ands	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 814c 	beq.w	8003914 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b01      	cmp	r3, #1
 8003686:	d005      	beq.n	8003694 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003690:	2b02      	cmp	r3, #2
 8003692:	d130      	bne.n	80036f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	2203      	movs	r2, #3
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	4013      	ands	r3, r2
 80036aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036ca:	2201      	movs	r2, #1
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	f003 0201 	and.w	r2, r3, #1
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b03      	cmp	r3, #3
 8003700:	d017      	beq.n	8003732 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	4013      	ands	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	4313      	orrs	r3, r2
 800372a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d123      	bne.n	8003786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	08da      	lsrs	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3208      	adds	r2, #8
 8003746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	220f      	movs	r2, #15
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	691a      	ldr	r2, [r3, #16]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	08da      	lsrs	r2, r3, #3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3208      	adds	r2, #8
 8003780:	6939      	ldr	r1, [r7, #16]
 8003782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	2203      	movs	r2, #3
 8003792:	fa02 f303 	lsl.w	r3, r2, r3
 8003796:	43db      	mvns	r3, r3
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	4013      	ands	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 0203 	and.w	r2, r3, #3
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 80a6 	beq.w	8003914 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037c8:	4b5b      	ldr	r3, [pc, #364]	; (8003938 <HAL_GPIO_Init+0x2e4>)
 80037ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037cc:	4a5a      	ldr	r2, [pc, #360]	; (8003938 <HAL_GPIO_Init+0x2e4>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6613      	str	r3, [r2, #96]	; 0x60
 80037d4:	4b58      	ldr	r3, [pc, #352]	; (8003938 <HAL_GPIO_Init+0x2e4>)
 80037d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037e0:	4a56      	ldr	r2, [pc, #344]	; (800393c <HAL_GPIO_Init+0x2e8>)
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	3302      	adds	r3, #2
 80037e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800380a:	d01f      	beq.n	800384c <HAL_GPIO_Init+0x1f8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a4c      	ldr	r2, [pc, #304]	; (8003940 <HAL_GPIO_Init+0x2ec>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d019      	beq.n	8003848 <HAL_GPIO_Init+0x1f4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a4b      	ldr	r2, [pc, #300]	; (8003944 <HAL_GPIO_Init+0x2f0>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d013      	beq.n	8003844 <HAL_GPIO_Init+0x1f0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a4a      	ldr	r2, [pc, #296]	; (8003948 <HAL_GPIO_Init+0x2f4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00d      	beq.n	8003840 <HAL_GPIO_Init+0x1ec>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a49      	ldr	r2, [pc, #292]	; (800394c <HAL_GPIO_Init+0x2f8>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <HAL_GPIO_Init+0x1e8>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a48      	ldr	r2, [pc, #288]	; (8003950 <HAL_GPIO_Init+0x2fc>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_GPIO_Init+0x1e4>
 8003834:	2305      	movs	r3, #5
 8003836:	e00a      	b.n	800384e <HAL_GPIO_Init+0x1fa>
 8003838:	2306      	movs	r3, #6
 800383a:	e008      	b.n	800384e <HAL_GPIO_Init+0x1fa>
 800383c:	2304      	movs	r3, #4
 800383e:	e006      	b.n	800384e <HAL_GPIO_Init+0x1fa>
 8003840:	2303      	movs	r3, #3
 8003842:	e004      	b.n	800384e <HAL_GPIO_Init+0x1fa>
 8003844:	2302      	movs	r3, #2
 8003846:	e002      	b.n	800384e <HAL_GPIO_Init+0x1fa>
 8003848:	2301      	movs	r3, #1
 800384a:	e000      	b.n	800384e <HAL_GPIO_Init+0x1fa>
 800384c:	2300      	movs	r3, #0
 800384e:	697a      	ldr	r2, [r7, #20]
 8003850:	f002 0203 	and.w	r2, r2, #3
 8003854:	0092      	lsls	r2, r2, #2
 8003856:	4093      	lsls	r3, r2
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800385e:	4937      	ldr	r1, [pc, #220]	; (800393c <HAL_GPIO_Init+0x2e8>)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800386c:	4b39      	ldr	r3, [pc, #228]	; (8003954 <HAL_GPIO_Init+0x300>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	43db      	mvns	r3, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4013      	ands	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003890:	4a30      	ldr	r2, [pc, #192]	; (8003954 <HAL_GPIO_Init+0x300>)
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003896:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_GPIO_Init+0x300>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ba:	4a26      	ldr	r2, [pc, #152]	; (8003954 <HAL_GPIO_Init+0x300>)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80038c0:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_GPIO_Init+0x300>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80038e4:	4a1b      	ldr	r2, [pc, #108]	; (8003954 <HAL_GPIO_Init+0x300>)
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_GPIO_Init+0x300>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4013      	ands	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_GPIO_Init+0x300>)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	3301      	adds	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	f47f ae9d 	bne.w	8003664 <HAL_GPIO_Init+0x10>
  }
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40021000 	.word	0x40021000
 800393c:	40010000 	.word	0x40010000
 8003940:	48000400 	.word	0x48000400
 8003944:	48000800 	.word	0x48000800
 8003948:	48000c00 	.word	0x48000c00
 800394c:	48001000 	.word	0x48001000
 8003950:	48001400 	.word	0x48001400
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
 8003964:	4613      	mov	r3, r2
 8003966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003968:	787b      	ldrb	r3, [r7, #1]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003974:	e002      	b.n	800397c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	041a      	lsls	r2, r3, #16
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	43d9      	mvns	r1, r3
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	400b      	ands	r3, r1
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	619a      	str	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039be:	b08b      	sub	sp, #44	; 0x2c
 80039c0:	af06      	add	r7, sp, #24
 80039c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e0d7      	b.n	8003b7e <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f008 ffb2 	bl	800c94c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2203      	movs	r2, #3
 80039ec:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f004 fef8 	bl	80087ea <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039fa:	2300      	movs	r3, #0
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e04c      	b.n	8003a9a <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	4613      	mov	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	440b      	add	r3, r1
 8003a10:	3301      	adds	r3, #1
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	440b      	add	r3, r1
 8003a26:	7bfa      	ldrb	r2, [r7, #15]
 8003a28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	b298      	uxth	r0, r3
 8003a30:	6879      	ldr	r1, [r7, #4]
 8003a32:	4613      	mov	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3336      	adds	r3, #54	; 0x36
 8003a3e:	4602      	mov	r2, r0
 8003a40:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	4613      	mov	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	440b      	add	r3, r1
 8003a52:	3303      	adds	r3, #3
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a58:	7bfa      	ldrb	r2, [r7, #15]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	440b      	add	r3, r1
 8003a66:	3338      	adds	r3, #56	; 0x38
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	440b      	add	r3, r1
 8003a7a:	333c      	adds	r3, #60	; 0x3c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4413      	add	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3340      	adds	r3, #64	; 0x40
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a94:	7bfb      	ldrb	r3, [r7, #15]
 8003a96:	3301      	adds	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	7bfa      	ldrb	r2, [r7, #15]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d3ad      	bcc.n	8003a00 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
 8003aa8:	e044      	b.n	8003b34 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	440b      	add	r3, r1
 8003ae4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	6879      	ldr	r1, [r7, #4]
 8003af0:	4613      	mov	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4413      	add	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	440b      	add	r3, r1
 8003afa:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b02:	7bfa      	ldrb	r2, [r7, #15]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	440b      	add	r3, r1
 8003b26:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	3301      	adds	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
 8003b34:	7bfa      	ldrb	r2, [r7, #15]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d3b5      	bcc.n	8003aaa <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	687e      	ldr	r6, [r7, #4]
 8003b46:	466d      	mov	r5, sp
 8003b48:	f106 0410 	add.w	r4, r6, #16
 8003b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b50:	6823      	ldr	r3, [r4, #0]
 8003b52:	602b      	str	r3, [r5, #0]
 8003b54:	1d33      	adds	r3, r6, #4
 8003b56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b58:	6838      	ldr	r0, [r7, #0]
 8003b5a:	f004 fe61 	bl	8008820 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f001 fc29 	bl	80053ce <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_PCD_Start+0x16>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e012      	b.n	8003bc2 <HAL_PCD_Start+0x3c>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f004 fe07 	bl	80087bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f007 f820 	bl	800abf8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003bca:	b580      	push	{r7, lr}
 8003bcc:	b084      	sub	sp, #16
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f007 f825 	bl	800ac26 <USB_ReadInterrupts>
 8003bdc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb26 	bl	800423a <PCD_EP_ISR_Handler>

    return;
 8003bee:	e110      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d013      	beq.n	8003c22 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c0c:	b292      	uxth	r2, r2
 8003c0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f008 ff2b 	bl	800ca6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8fc 	bl	8003e18 <HAL_PCD_SetAddress>

    return;
 8003c20:	e0f7      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00c      	beq.n	8003c46 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c44:	e0e5      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00c      	beq.n	8003c6a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c62:	b292      	uxth	r2, r2
 8003c64:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c68:	e0d3      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d034      	beq.n	8003cde <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	b292      	uxth	r2, r2
 8003c88:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0208 	bic.w	r2, r2, #8
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f009 f8cd 	bl	800ce58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f008 ff0e 	bl	800cae0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003cdc:	e099      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d027      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0208 	orr.w	r2, r2, #8
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d12:	b292      	uxth	r2, r2
 8003d14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0204 	orr.w	r2, r2, #4
 8003d2a:	b292      	uxth	r2, r2
 8003d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f008 febb 	bl	800caac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003d36:	e06c      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d040      	beq.n	8003dc4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d54:	b292      	uxth	r2, r2
 8003d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d12b      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0204 	orr.w	r2, r2, #4
 8003d76:	b292      	uxth	r2, r2
 8003d78:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0208 	orr.w	r2, r2, #8
 8003d8e:	b292      	uxth	r2, r2
 8003d90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	089b      	lsrs	r3, r3, #2
 8003da8:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003db2:	2101      	movs	r1, #1
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f009 f84f 	bl	800ce58 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003dba:	e02a      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f008 fe75 	bl	800caac <HAL_PCD_SuspendCallback>
    return;
 8003dc2:	e026      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00f      	beq.n	8003dee <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003de0:	b292      	uxth	r2, r2
 8003de2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f008 fe33 	bl	800ca52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003dec:	e011      	b.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00c      	beq.n	8003e12 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e0a:	b292      	uxth	r2, r2
 8003e0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003e10:	bf00      	nop
  }
}
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	460b      	mov	r3, r1
 8003e22:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_PCD_SetAddress+0x1a>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	e013      	b.n	8003e5a <HAL_PCD_SetAddress+0x42>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2201      	movs	r2, #1
 8003e36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f006 fec0 	bl	800abd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	4608      	mov	r0, r1
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	461a      	mov	r2, r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	70fb      	strb	r3, [r7, #3]
 8003e74:	460b      	mov	r3, r1
 8003e76:	803b      	strh	r3, [r7, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	da0e      	bge.n	8003ea6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	705a      	strb	r2, [r3, #1]
 8003ea4:	e00e      	b.n	8003ec4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea6:	78fb      	ldrb	r3, [r7, #3]
 8003ea8:	f003 0207 	and.w	r2, r3, #7
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ed0:	883a      	ldrh	r2, [r7, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	78ba      	ldrb	r2, [r7, #2]
 8003eda:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003eee:	78bb      	ldrb	r3, [r7, #2]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d102      	bne.n	8003efa <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d101      	bne.n	8003f08 <HAL_PCD_EP_Open+0xa6>
 8003f04:	2302      	movs	r3, #2
 8003f06:	e00e      	b.n	8003f26 <HAL_PCD_EP_Open+0xc4>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68f9      	ldr	r1, [r7, #12]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f004 fca4 	bl	8008864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003f24:	7afb      	ldrb	r3, [r7, #11]
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}

08003f2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	da0e      	bge.n	8003f60 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f42:	78fb      	ldrb	r3, [r7, #3]
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4413      	add	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	705a      	strb	r2, [r3, #1]
 8003f5e:	e00e      	b.n	8003f7e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	f003 0207 	and.w	r2, r3, #7
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_PCD_EP_Close+0x6a>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e00e      	b.n	8003fb6 <HAL_PCD_EP_Close+0x88>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f004 fff0 	bl	8008f8c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b086      	sub	sp, #24
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	7afb      	ldrb	r3, [r7, #11]
 8003fd0:	f003 0207 	and.w	r2, r3, #7
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	683a      	ldr	r2, [r7, #0]
 8003ff0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	b2da      	uxtb	r2, r3
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800400a:	7afb      	ldrb	r3, [r7, #11]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6979      	ldr	r1, [r7, #20]
 800401a:	4618      	mov	r0, r3
 800401c:	f005 f9a3 	bl	8009366 <USB_EPStartXfer>
 8004020:	e005      	b.n	800402e <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6979      	ldr	r1, [r7, #20]
 8004028:	4618      	mov	r0, r3
 800402a:	f005 f99c 	bl	8009366 <USB_EPStartXfer>
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	460b      	mov	r3, r1
 8004042:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004044:	78fb      	ldrb	r3, [r7, #3]
 8004046:	f003 0207 	and.w	r2, r3, #7
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	440b      	add	r3, r1
 8004056:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800405a:	681b      	ldr	r3, [r3, #0]
}
 800405c:	4618      	mov	r0, r3
 800405e:	370c      	adds	r7, #12
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	607a      	str	r2, [r7, #4]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	460b      	mov	r3, r1
 8004076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004078:	7afb      	ldrb	r3, [r7, #11]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2200      	movs	r2, #0
 80040ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2201      	movs	r2, #1
 80040b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6979      	ldr	r1, [r7, #20]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 f948 	bl	8009366 <USB_EPStartXfer>
 80040d6:	e005      	b.n	80040e4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6979      	ldr	r1, [r7, #20]
 80040de:	4618      	mov	r0, r3
 80040e0:	f005 f941 	bl	8009366 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b084      	sub	sp, #16
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	460b      	mov	r3, r1
 80040f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040fa:	78fb      	ldrb	r3, [r7, #3]
 80040fc:	f003 0207 	and.w	r2, r3, #7
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	d901      	bls.n	800410c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e03e      	b.n	800418a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800410c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004110:	2b00      	cmp	r3, #0
 8004112:	da0e      	bge.n	8004132 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004114:	78fb      	ldrb	r3, [r7, #3]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2201      	movs	r2, #1
 800412e:	705a      	strb	r2, [r3, #1]
 8004130:	e00c      	b.n	800414c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004132:	78fa      	ldrb	r2, [r7, #3]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	4413      	add	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	b2da      	uxtb	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_PCD_EP_SetStall+0x7e>
 8004168:	2302      	movs	r3, #2
 800416a:	e00e      	b.n	800418a <HAL_PCD_EP_SetStall+0x9c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68f9      	ldr	r1, [r7, #12]
 800417a:	4618      	mov	r0, r3
 800417c:	f006 fc29 	bl	800a9d2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b084      	sub	sp, #16
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800419e:	78fb      	ldrb	r3, [r7, #3]
 80041a0:	f003 020f 	and.w	r2, r3, #15
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d901      	bls.n	80041b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e040      	b.n	8004232 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	da0e      	bge.n	80041d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	4413      	add	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2201      	movs	r2, #1
 80041d2:	705a      	strb	r2, [r3, #1]
 80041d4:	e00e      	b.n	80041f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041d6:	78fb      	ldrb	r3, [r7, #3]
 80041d8:	f003 0207 	and.w	r2, r3, #7
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	4413      	add	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	b2da      	uxtb	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_PCD_EP_ClrStall+0x82>
 8004210:	2302      	movs	r3, #2
 8004212:	e00e      	b.n	8004232 <HAL_PCD_EP_ClrStall+0xa0>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68f9      	ldr	r1, [r7, #12]
 8004222:	4618      	mov	r0, r3
 8004224:	f006 fc26 	bl	800aa74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b096      	sub	sp, #88	; 0x58
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004242:	e39c      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800424c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004250:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800425e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004262:	2b00      	cmp	r3, #0
 8004264:	f040 815e 	bne.w	8004524 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004268:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	d150      	bne.n	8004316 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004284:	81fb      	strh	r3, [r7, #14]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	89fb      	ldrh	r3, [r7, #14]
 800428c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004294:	b29b      	uxth	r3, r3
 8004296:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3328      	adds	r3, #40	; 0x28
 800429c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	6812      	ldr	r2, [r2, #0]
 80042b6:	4413      	add	r3, r2
 80042b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80042c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80042c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c8:	695a      	ldr	r2, [r3, #20]
 80042ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	441a      	add	r2, r3
 80042d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80042d4:	2100      	movs	r1, #0
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f008 fba1 	bl	800ca1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 834a 	beq.w	800497e <PCD_EP_ISR_Handler+0x744>
 80042ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8345 	bne.w	800497e <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004300:	b2da      	uxtb	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	b292      	uxth	r2, r2
 8004308:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004314:	e333      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800431c:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004328:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800432c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d032      	beq.n	800439a <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433c:	b29b      	uxth	r3, r3
 800433e:	461a      	mov	r2, r3
 8004340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	4413      	add	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	4413      	add	r3, r2
 800434e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800435a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6818      	ldr	r0, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800436a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800436c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800436e:	b29b      	uxth	r3, r3
 8004370:	f006 fcab 	bl	800acca <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29a      	uxth	r2, r3
 800437c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004380:	4013      	ands	r3, r2
 8004382:	823b      	strh	r3, [r7, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	8a3a      	ldrh	r2, [r7, #16]
 800438a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800438e:	b292      	uxth	r2, r2
 8004390:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f008 fb16 	bl	800c9c4 <HAL_PCD_SetupStageCallback>
 8004398:	e2f1      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800439a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f280 82ed 	bge.w	800497e <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043b0:	4013      	ands	r3, r2
 80043b2:	83fb      	strh	r3, [r7, #30]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	8bfa      	ldrh	r2, [r7, #30]
 80043ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80043be:	b292      	uxth	r2, r2
 80043c0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4413      	add	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6812      	ldr	r2, [r2, #0]
 80043da:	4413      	add	r3, r2
 80043dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043e0:	881b      	ldrh	r3, [r3, #0]
 80043e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80043ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d019      	beq.n	8004426 <PCD_EP_ISR_Handler+0x1ec>
 80043f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d015      	beq.n	8004426 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004400:	6959      	ldr	r1, [r3, #20]
 8004402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004404:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004408:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800440a:	b29b      	uxth	r3, r3
 800440c:	f006 fc5d 	bl	800acca <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004412:	695a      	ldr	r2, [r3, #20]
 8004414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	441a      	add	r2, r3
 800441a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f008 fae1 	bl	800c9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	b29b      	uxth	r3, r3
 800442e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004432:	2b00      	cmp	r3, #0
 8004434:	f040 82a3 	bne.w	800497e <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	61bb      	str	r3, [r7, #24]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004446:	b29b      	uxth	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4413      	add	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b3e      	cmp	r3, #62	; 0x3e
 800445e:	d918      	bls.n	8004492 <PCD_EP_ISR_Handler+0x258>
 8004460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	095b      	lsrs	r3, r3, #5
 8004466:	647b      	str	r3, [r7, #68]	; 0x44
 8004468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	f003 031f 	and.w	r3, r3, #31
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <PCD_EP_ISR_Handler+0x240>
 8004474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004476:	3b01      	subs	r3, #1
 8004478:	647b      	str	r3, [r7, #68]	; 0x44
 800447a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447c:	b29b      	uxth	r3, r3
 800447e:	029b      	lsls	r3, r3, #10
 8004480:	b29b      	uxth	r3, r3
 8004482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800448a:	b29a      	uxth	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	801a      	strh	r2, [r3, #0]
 8004490:	e029      	b.n	80044e6 <PCD_EP_ISR_Handler+0x2ac>
 8004492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d112      	bne.n	80044c0 <PCD_EP_ISR_Handler+0x286>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e012      	b.n	80044e6 <PCD_EP_ISR_Handler+0x2ac>
 80044c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	085b      	lsrs	r3, r3, #1
 80044c6:	647b      	str	r3, [r7, #68]	; 0x44
 80044c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <PCD_EP_ISR_Handler+0x2a0>
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d6:	3301      	adds	r3, #1
 80044d8:	647b      	str	r3, [r7, #68]	; 0x44
 80044da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044dc:	b29b      	uxth	r3, r3
 80044de:	029b      	lsls	r3, r3, #10
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	827b      	strh	r3, [r7, #18]
 80044f8:	8a7b      	ldrh	r3, [r7, #18]
 80044fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044fe:	827b      	strh	r3, [r7, #18]
 8004500:	8a7b      	ldrh	r3, [r7, #18]
 8004502:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004506:	827b      	strh	r3, [r7, #18]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	8a7b      	ldrh	r3, [r7, #18]
 800450e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004512:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451e:	b29b      	uxth	r3, r3
 8004520:	8013      	strh	r3, [r2, #0]
 8004522:	e22c      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	461a      	mov	r2, r3
 800452a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004538:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800453c:	2b00      	cmp	r3, #0
 800453e:	f280 80f6 	bge.w	800472e <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29a      	uxth	r2, r3
 8004554:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004558:	4013      	ands	r3, r2
 800455a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	461a      	mov	r2, r3
 8004564:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004574:	b292      	uxth	r2, r2
 8004576:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004578:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800457c:	4613      	mov	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	4413      	add	r3, r2
 800458c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800458e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004590:	7b1b      	ldrb	r3, [r3, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d123      	bne.n	80045de <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80045be:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 808e 	beq.w	80046e4 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ce:	6959      	ldr	r1, [r3, #20]
 80045d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d2:	88da      	ldrh	r2, [r3, #6]
 80045d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045d8:	f006 fb77 	bl	800acca <USB_ReadPMA>
 80045dc:	e082      	b.n	80046e4 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	78db      	ldrb	r3, [r3, #3]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d10a      	bne.n	80045fc <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80045e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045ea:	461a      	mov	r2, r3
 80045ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9d3 	bl	800499a <HAL_PCD_EP_DB_Receive>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045fa:	e073      	b.n	80046e4 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	461a      	mov	r2, r3
 8004602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004616:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800462c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004630:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004634:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004638:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800463c:	b29b      	uxth	r3, r3
 800463e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	461a      	mov	r2, r3
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d022      	beq.n	80046a0 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004662:	b29b      	uxth	r3, r3
 8004664:	461a      	mov	r2, r3
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4413      	add	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	4413      	add	r3, r2
 8004674:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004682:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004686:	2b00      	cmp	r3, #0
 8004688:	d02c      	beq.n	80046e4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004690:	6959      	ldr	r1, [r3, #20]
 8004692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004694:	891a      	ldrh	r2, [r3, #8]
 8004696:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800469a:	f006 fb16 	bl	800acca <USB_ReadPMA>
 800469e:	e021      	b.n	80046e4 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	461a      	mov	r2, r3
 80046ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	4413      	add	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	4413      	add	r3, r2
 80046ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80046c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d6:	6959      	ldr	r1, [r3, #20]
 80046d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046da:	895a      	ldrh	r2, [r3, #10]
 80046dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046e0:	f006 faf3 	bl	800acca <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80046e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046ec:	441a      	add	r2, r3
 80046ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046f4:	695a      	ldr	r2, [r3, #20]
 80046f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046fa:	441a      	add	r2, r3
 80046fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <PCD_EP_ISR_Handler+0x4da>
 8004708:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800470c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d206      	bcs.n	8004722 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f008 f964 	bl	800c9e8 <HAL_PCD_DataOutStageCallback>
 8004720:	e005      	b.n	800472e <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004728:	4618      	mov	r0, r3
 800472a:	f004 fe1c 	bl	8009366 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800472e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8121 	beq.w	800497e <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800473c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	00db      	lsls	r3, r3, #3
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	4413      	add	r3, r2
 800474e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	461a      	mov	r2, r3
 8004756:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	4413      	add	r3, r2
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b29b      	uxth	r3, r3
 8004762:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	441a      	add	r2, r3
 800477c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004788:	b29b      	uxth	r3, r3
 800478a:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800478c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478e:	78db      	ldrb	r3, [r3, #3]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f000 80a2 	beq.w	80048da <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8004796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004798:	2200      	movs	r2, #0
 800479a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800479c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800479e:	7b1b      	ldrb	r3, [r3, #12]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8093 	beq.w	80048cc <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80047aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d046      	beq.n	8004840 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d126      	bne.n	8004808 <PCD_EP_ISR_Handler+0x5ce>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	4413      	add	r3, r2
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
 80047d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	00da      	lsls	r2, r3, #3
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	4413      	add	r3, r2
 80047dc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047e0:	623b      	str	r3, [r7, #32]
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	881b      	ldrh	r3, [r3, #0]
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	801a      	strh	r2, [r3, #0]
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004800:	b29a      	uxth	r2, r3
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	e061      	b.n	80048cc <PCD_EP_ISR_Handler+0x692>
 8004808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d15d      	bne.n	80048cc <PCD_EP_ISR_Handler+0x692>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800481e:	b29b      	uxth	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004824:	4413      	add	r3, r2
 8004826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	00da      	lsls	r2, r3, #3
 800482e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004830:	4413      	add	r3, r2
 8004832:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004836:	62bb      	str	r3, [r7, #40]	; 0x28
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	2200      	movs	r2, #0
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	e045      	b.n	80048cc <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004848:	785b      	ldrb	r3, [r3, #1]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d126      	bne.n	800489c <PCD_EP_ISR_Handler+0x662>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800485c:	b29b      	uxth	r3, r3
 800485e:	461a      	mov	r2, r3
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	4413      	add	r3, r2
 8004864:	637b      	str	r3, [r7, #52]	; 0x34
 8004866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	00da      	lsls	r2, r3, #3
 800486c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486e:	4413      	add	r3, r2
 8004870:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004874:	633b      	str	r3, [r7, #48]	; 0x30
 8004876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004880:	b29a      	uxth	r2, r3
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	801a      	strh	r2, [r3, #0]
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004890:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004894:	b29a      	uxth	r2, r3
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	e017      	b.n	80048cc <PCD_EP_ISR_Handler+0x692>
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	785b      	ldrb	r3, [r3, #1]
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d113      	bne.n	80048cc <PCD_EP_ISR_Handler+0x692>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b2:	4413      	add	r3, r2
 80048b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	00da      	lsls	r2, r3, #3
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	4413      	add	r3, r2
 80048c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80048c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c8:	2200      	movs	r2, #0
 80048ca:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f008 f8a3 	bl	800ca1e <HAL_PCD_DataInStageCallback>
 80048d8:	e051      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80048da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d144      	bne.n	8004970 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	4413      	add	r3, r2
 8004900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800490e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004916:	429a      	cmp	r2, r3
 8004918:	d907      	bls.n	800492a <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800491a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004922:	1ad2      	subs	r2, r2, r3
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	619a      	str	r2, [r3, #24]
 8004928:	e002      	b.n	8004930 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800492a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492c:	2200      	movs	r2, #0
 800492e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f008 f86d 	bl	800ca1e <HAL_PCD_DataInStageCallback>
 8004944:	e01b      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	695a      	ldr	r2, [r3, #20]
 800494a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800494e:	441a      	add	r2, r3
 8004950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004952:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800495c:	441a      	add	r2, r3
 800495e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004960:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004968:	4618      	mov	r0, r3
 800496a:	f004 fcfc 	bl	8009366 <USB_EPStartXfer>
 800496e:	e006      	b.n	800497e <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004970:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004974:	461a      	mov	r2, r3
 8004976:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f917 	bl	8004bac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004986:	b29b      	uxth	r3, r3
 8004988:	b21b      	sxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	f6ff ac5a 	blt.w	8004244 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3758      	adds	r7, #88	; 0x58
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b088      	sub	sp, #32
 800499e:	af00      	add	r7, sp, #0
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049a8:	88fb      	ldrh	r3, [r7, #6]
 80049aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d07c      	beq.n	8004aac <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	461a      	mov	r2, r3
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	4413      	add	r3, r2
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	6812      	ldr	r2, [r2, #0]
 80049ca:	4413      	add	r3, r2
 80049cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049d6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	699a      	ldr	r2, [r3, #24]
 80049dc:	8b7b      	ldrh	r3, [r7, #26]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d306      	bcc.n	80049f0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	699a      	ldr	r2, [r3, #24]
 80049e6:	8b7b      	ldrh	r3, [r7, #26]
 80049e8:	1ad2      	subs	r2, r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	619a      	str	r2, [r3, #24]
 80049ee:	e002      	b.n	80049f6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2200      	movs	r2, #0
 80049f4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d123      	bne.n	8004a46 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a18:	833b      	strh	r3, [r7, #24]
 8004a1a:	8b3b      	ldrh	r3, [r7, #24]
 8004a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a20:	833b      	strh	r3, [r7, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	461a      	mov	r2, r3
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	441a      	add	r2, r3
 8004a30:	8b3b      	ldrh	r3, [r7, #24]
 8004a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d01f      	beq.n	8004a90 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	461a      	mov	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	82fb      	strh	r3, [r7, #22]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a88:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a90:	8b7b      	ldrh	r3, [r7, #26]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8085 	beq.w	8004ba2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6959      	ldr	r1, [r3, #20]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	891a      	ldrh	r2, [r3, #8]
 8004aa4:	8b7b      	ldrh	r3, [r7, #26]
 8004aa6:	f006 f910 	bl	800acca <USB_ReadPMA>
 8004aaa:	e07a      	b.n	8004ba2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	00db      	lsls	r3, r3, #3
 8004abe:	4413      	add	r3, r2
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ad0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	699a      	ldr	r2, [r3, #24]
 8004ad6:	8b7b      	ldrh	r3, [r7, #26]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d306      	bcc.n	8004aea <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	699a      	ldr	r2, [r3, #24]
 8004ae0:	8b7b      	ldrh	r3, [r7, #26]
 8004ae2:	1ad2      	subs	r2, r2, r3
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	619a      	str	r2, [r3, #24]
 8004ae8:	e002      	b.n	8004af0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2200      	movs	r2, #0
 8004aee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d123      	bne.n	8004b40 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	881b      	ldrh	r3, [r3, #0]
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b12:	83fb      	strh	r3, [r7, #30]
 8004b14:	8bfb      	ldrh	r3, [r7, #30]
 8004b16:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b1a:	83fb      	strh	r3, [r7, #30]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	8bfb      	ldrh	r3, [r7, #30]
 8004b2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004b40:	88fb      	ldrh	r3, [r7, #6]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11f      	bne.n	8004b8a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	4413      	add	r3, r2
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b64:	83bb      	strh	r3, [r7, #28]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8bbb      	ldrh	r3, [r7, #28]
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b8a:	8b7b      	ldrh	r3, [r7, #26]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6818      	ldr	r0, [r3, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6959      	ldr	r1, [r3, #20]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	895a      	ldrh	r2, [r3, #10]
 8004b9c:	8b7b      	ldrh	r3, [r7, #26]
 8004b9e:	f006 f894 	bl	800acca <USB_ReadPMA>
    }
  }

  return count;
 8004ba2:	8b7b      	ldrh	r3, [r7, #26]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3720      	adds	r7, #32
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b0a2      	sub	sp, #136	; 0x88
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 81c5 	beq.w	8004f50 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6812      	ldr	r2, [r2, #0]
 8004bde:	4413      	add	r3, r2
 8004be0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	699a      	ldr	r2, [r3, #24]
 8004bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d907      	bls.n	8004c0a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c02:	1ad2      	subs	r2, r2, r3
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	619a      	str	r2, [r3, #24]
 8004c08:	e002      	b.n	8004c10 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	699b      	ldr	r3, [r3, #24]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f040 80b9 	bne.w	8004d8c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	785b      	ldrb	r3, [r3, #1]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d126      	bne.n	8004c70 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	461a      	mov	r2, r3
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	4413      	add	r3, r2
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	00da      	lsls	r2, r3, #3
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	4413      	add	r3, r2
 8004c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	881b      	ldrh	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c58:	801a      	strh	r2, [r3, #0]
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	801a      	strh	r2, [r3, #0]
 8004c6e:	e01a      	b.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	785b      	ldrb	r3, [r3, #1]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d116      	bne.n	8004ca6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8c:	4413      	add	r3, r2
 8004c8e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	00da      	lsls	r2, r3, #3
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	4413      	add	r3, r2
 8004c9a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	785b      	ldrb	r3, [r3, #1]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d126      	bne.n	8004d02 <HAL_PCD_EP_DB_Transmit+0x156>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	61bb      	str	r3, [r7, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	4413      	add	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	00da      	lsls	r2, r3, #3
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	881b      	ldrh	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	801a      	strh	r2, [r3, #0]
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	881b      	ldrh	r3, [r3, #0]
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	801a      	strh	r2, [r3, #0]
 8004d00:	e017      	b.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	785b      	ldrb	r3, [r3, #1]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d113      	bne.n	8004d32 <HAL_PCD_EP_DB_Transmit+0x186>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	4413      	add	r3, r2
 8004d1a:	623b      	str	r3, [r7, #32]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	00da      	lsls	r2, r3, #3
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	4413      	add	r3, r2
 8004d26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	4619      	mov	r1, r3
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f007 fe70 	bl	800ca1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 82d2 	beq.w	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4413      	add	r3, r2
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d64:	827b      	strh	r3, [r7, #18]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	441a      	add	r2, r3
 8004d74:	8a7b      	ldrh	r3, [r7, #18]
 8004d76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	8013      	strh	r3, [r2, #0]
 8004d8a:	e2b0      	b.n	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d8c:	88fb      	ldrh	r3, [r7, #6]
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d021      	beq.n	8004dda <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	461a      	mov	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	441a      	add	r2, r3
 8004dc2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	f040 8284 	bne.w	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dee:	441a      	add	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004dfc:	441a      	add	r2, r3
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d309      	bcc.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	6a1a      	ldr	r2, [r3, #32]
 8004e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	621a      	str	r2, [r3, #32]
 8004e20:	e015      	b.n	8004e4e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e2e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004e38:	e009      	b.n	8004e4e <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d155      	bne.n	8004f02 <HAL_PCD_EP_DB_Transmit+0x356>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	461a      	mov	r2, r3
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	4413      	add	r3, r2
 8004e6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	00da      	lsls	r2, r3, #3
 8004e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e76:	4413      	add	r3, r2
 8004e78:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e80:	2b3e      	cmp	r3, #62	; 0x3e
 8004e82:	d916      	bls.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x306>
 8004e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d102      	bne.n	8004e9a <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e96:	3b01      	subs	r3, #1
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	029b      	lsls	r3, r3, #10
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	801a      	strh	r2, [r3, #0]
 8004eb0:	e043      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x38e>
 8004eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d112      	bne.n	8004ede <HAL_PCD_EP_DB_Transmit+0x332>
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eba:	881b      	ldrh	r3, [r3, #0]
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eca:	881b      	ldrh	r3, [r3, #0]
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	801a      	strh	r2, [r3, #0]
 8004edc:	e02d      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee0:	085b      	lsrs	r3, r3, #1
 8004ee2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d002      	beq.n	8004ef4 <HAL_PCD_EP_DB_Transmit+0x348>
 8004eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	029b      	lsls	r3, r3, #10
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004efe:	801a      	strh	r2, [r3, #0]
 8004f00:	e01b      	b.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	785b      	ldrb	r3, [r3, #1]
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d117      	bne.n	8004f3a <HAL_PCD_EP_DB_Transmit+0x38e>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f1e:	4413      	add	r3, r2
 8004f20:	643b      	str	r3, [r7, #64]	; 0x40
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	00da      	lsls	r2, r3, #3
 8004f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f38:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	6959      	ldr	r1, [r3, #20]
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	891a      	ldrh	r2, [r3, #8]
 8004f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f005 fe7c 	bl	800ac46 <USB_WritePMA>
 8004f4e:	e1ce      	b.n	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	699a      	ldr	r2, [r3, #24]
 8004f7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d307      	bcc.n	8004f94 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f8c:	1ad2      	subs	r2, r2, r3
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	619a      	str	r2, [r3, #24]
 8004f92:	e002      	b.n	8004f9a <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2200      	movs	r2, #0
 8004f98:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 80c4 	bne.w	800512c <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	785b      	ldrb	r3, [r3, #1]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d126      	bne.n	8004ffa <HAL_PCD_EP_DB_Transmit+0x44e>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc0:	4413      	add	r3, r2
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	00da      	lsls	r2, r3, #3
 8004fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fcc:	4413      	add	r3, r2
 8004fce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fd2:	667b      	str	r3, [r7, #100]	; 0x64
 8004fd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fe6:	881b      	ldrh	r3, [r3, #0]
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ff6:	801a      	strh	r2, [r3, #0]
 8004ff8:	e01a      	b.n	8005030 <HAL_PCD_EP_DB_Transmit+0x484>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	785b      	ldrb	r3, [r3, #1]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d116      	bne.n	8005030 <HAL_PCD_EP_DB_Transmit+0x484>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	673b      	str	r3, [r7, #112]	; 0x70
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005010:	b29b      	uxth	r3, r3
 8005012:	461a      	mov	r2, r3
 8005014:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005016:	4413      	add	r3, r2
 8005018:	673b      	str	r3, [r7, #112]	; 0x70
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	00da      	lsls	r2, r3, #3
 8005020:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005022:	4413      	add	r3, r2
 8005024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800502a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800502c:	2200      	movs	r2, #0
 800502e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	785b      	ldrb	r3, [r3, #1]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d12f      	bne.n	800509e <HAL_PCD_EP_DB_Transmit+0x4f2>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800504e:	b29b      	uxth	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005056:	4413      	add	r3, r2
 8005058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	00da      	lsls	r2, r3, #3
 8005062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005066:	4413      	add	r3, r2
 8005068:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800506c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005070:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005074:	881b      	ldrh	r3, [r3, #0]
 8005076:	b29b      	uxth	r3, r3
 8005078:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800507c:	b29a      	uxth	r2, r3
 800507e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	b29b      	uxth	r3, r3
 800508c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e017      	b.n	80050ce <HAL_PCD_EP_DB_Transmit+0x522>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	785b      	ldrb	r3, [r3, #1]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d113      	bne.n	80050ce <HAL_PCD_EP_DB_Transmit+0x522>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	461a      	mov	r2, r3
 80050b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b4:	4413      	add	r3, r2
 80050b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	00da      	lsls	r2, r3, #3
 80050be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050c0:	4413      	add	r3, r2
 80050c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80050c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80050c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ca:	2200      	movs	r2, #0
 80050cc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4619      	mov	r1, r3
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f007 fca2 	bl	800ca1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f040 8104 	bne.w	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	881b      	ldrh	r3, [r3, #0]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005100:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	441a      	add	r2, r3
 8005112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800511e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005126:	b29b      	uxth	r3, r3
 8005128:	8013      	strh	r3, [r2, #0]
 800512a:	e0e0      	b.n	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d121      	bne.n	800517a <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	881b      	ldrh	r3, [r3, #0]
 8005146:	b29b      	uxth	r3, r3
 8005148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005150:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	441a      	add	r2, r3
 8005162:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8005166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800516e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005176:	b29b      	uxth	r3, r3
 8005178:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 80b4 	bne.w	80052ee <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800518e:	441a      	add	r2, r3
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800519c:	441a      	add	r2, r3
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	6a1a      	ldr	r2, [r3, #32]
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d309      	bcc.n	80051c2 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6a1a      	ldr	r2, [r3, #32]
 80051b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	621a      	str	r2, [r3, #32]
 80051c0:	e015      	b.n	80051ee <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d107      	bne.n	80051da <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80051ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80051ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051d8:	e009      	b.n	80051ee <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2200      	movs	r2, #0
 80051e4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	663b      	str	r3, [r7, #96]	; 0x60
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	785b      	ldrb	r3, [r3, #1]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d155      	bne.n	80052a8 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	65bb      	str	r3, [r7, #88]	; 0x58
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520a:	b29b      	uxth	r3, r3
 800520c:	461a      	mov	r2, r3
 800520e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005210:	4413      	add	r3, r2
 8005212:	65bb      	str	r3, [r7, #88]	; 0x58
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	00da      	lsls	r2, r3, #3
 800521a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800521c:	4413      	add	r3, r2
 800521e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005222:	657b      	str	r3, [r7, #84]	; 0x54
 8005224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005226:	2b3e      	cmp	r3, #62	; 0x3e
 8005228:	d916      	bls.n	8005258 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800522a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522c:	095b      	lsrs	r3, r3, #5
 800522e:	677b      	str	r3, [r7, #116]	; 0x74
 8005230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005232:	f003 031f 	and.w	r3, r3, #31
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <HAL_PCD_EP_DB_Transmit+0x694>
 800523a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800523c:	3b01      	subs	r3, #1
 800523e:	677b      	str	r3, [r7, #116]	; 0x74
 8005240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005242:	b29b      	uxth	r3, r3
 8005244:	029b      	lsls	r3, r3, #10
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800524c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005250:	b29a      	uxth	r2, r3
 8005252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e040      	b.n	80052da <HAL_PCD_EP_DB_Transmit+0x72e>
 8005258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800525a:	2b00      	cmp	r3, #0
 800525c:	d112      	bne.n	8005284 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800525e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005268:	b29a      	uxth	r2, r3
 800526a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527c:	b29a      	uxth	r2, r3
 800527e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	e02a      	b.n	80052da <HAL_PCD_EP_DB_Transmit+0x72e>
 8005284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	677b      	str	r3, [r7, #116]	; 0x74
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d002      	beq.n	800529a <HAL_PCD_EP_DB_Transmit+0x6ee>
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	3301      	adds	r3, #1
 8005298:	677b      	str	r3, [r7, #116]	; 0x74
 800529a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800529c:	b29b      	uxth	r3, r3
 800529e:	029b      	lsls	r3, r3, #10
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052a4:	801a      	strh	r2, [r3, #0]
 80052a6:	e018      	b.n	80052da <HAL_PCD_EP_DB_Transmit+0x72e>
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	785b      	ldrb	r3, [r3, #1]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d114      	bne.n	80052da <HAL_PCD_EP_DB_Transmit+0x72e>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	461a      	mov	r2, r3
 80052bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052be:	4413      	add	r3, r2
 80052c0:	663b      	str	r3, [r7, #96]	; 0x60
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	00da      	lsls	r2, r3, #3
 80052c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052ca:	4413      	add	r3, r2
 80052cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	6959      	ldr	r1, [r3, #20]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	895a      	ldrh	r2, [r3, #10]
 80052e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f005 fcac 	bl	800ac46 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	4413      	add	r3, r2
 80052fc:	881b      	ldrh	r3, [r3, #0]
 80052fe:	b29b      	uxth	r3, r3
 8005300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005308:	823b      	strh	r3, [r7, #16]
 800530a:	8a3b      	ldrh	r3, [r7, #16]
 800530c:	f083 0310 	eor.w	r3, r3, #16
 8005310:	823b      	strh	r3, [r7, #16]
 8005312:	8a3b      	ldrh	r3, [r7, #16]
 8005314:	f083 0320 	eor.w	r3, r3, #32
 8005318:	823b      	strh	r3, [r7, #16]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	461a      	mov	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	441a      	add	r2, r3
 8005328:	8a3b      	ldrh	r3, [r7, #16]
 800532a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800533a:	b29b      	uxth	r3, r3
 800533c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3788      	adds	r7, #136	; 0x88
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	607b      	str	r3, [r7, #4]
 8005352:	460b      	mov	r3, r1
 8005354:	817b      	strh	r3, [r7, #10]
 8005356:	4613      	mov	r3, r2
 8005358:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800535a:	897b      	ldrh	r3, [r7, #10]
 800535c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005360:	b29b      	uxth	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00b      	beq.n	800537e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005366:	897b      	ldrh	r3, [r7, #10]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	4613      	mov	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	e009      	b.n	8005392 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800537e:	897a      	ldrh	r2, [r7, #10]
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005392:	893b      	ldrh	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2200      	movs	r2, #0
 800539c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	b29a      	uxth	r2, r3
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	80da      	strh	r2, [r3, #6]
 80053a6:	e00b      	b.n	80053c0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2201      	movs	r2, #1
 80053ac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005406:	b29b      	uxth	r3, r3
 8005408:	f043 0302 	orr.w	r3, r3, #2
 800540c:	b29a      	uxth	r2, r3
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
	...

08005424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d141      	bne.n	80054b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005432:	4b4b      	ldr	r3, [pc, #300]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800543a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800543e:	d131      	bne.n	80054a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005440:	4b47      	ldr	r3, [pc, #284]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005446:	4a46      	ldr	r2, [pc, #280]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800544c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005450:	4b43      	ldr	r3, [pc, #268]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005458:	4a41      	ldr	r2, [pc, #260]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800545e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005460:	4b40      	ldr	r3, [pc, #256]	; (8005564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2232      	movs	r2, #50	; 0x32
 8005466:	fb02 f303 	mul.w	r3, r2, r3
 800546a:	4a3f      	ldr	r2, [pc, #252]	; (8005568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	0c9b      	lsrs	r3, r3, #18
 8005472:	3301      	adds	r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005476:	e002      	b.n	800547e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	3b01      	subs	r3, #1
 800547c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800547e:	4b38      	ldr	r3, [pc, #224]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d102      	bne.n	8005492 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d1f2      	bne.n	8005478 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005492:	4b33      	ldr	r3, [pc, #204]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800549a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800549e:	d158      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e057      	b.n	8005554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054a4:	4b2e      	ldr	r3, [pc, #184]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054aa:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054b4:	e04d      	b.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d141      	bne.n	8005542 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054be:	4b28      	ldr	r3, [pc, #160]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ca:	d131      	bne.n	8005530 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054cc:	4b24      	ldr	r3, [pc, #144]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d2:	4a23      	ldr	r2, [pc, #140]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054e4:	4a1e      	ldr	r2, [pc, #120]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054ec:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2232      	movs	r2, #50	; 0x32
 80054f2:	fb02 f303 	mul.w	r3, r2, r3
 80054f6:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	0c9b      	lsrs	r3, r3, #18
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005502:	e002      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800550a:	4b15      	ldr	r3, [pc, #84]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005516:	d102      	bne.n	800551e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f2      	bne.n	8005504 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800551e:	4b10      	ldr	r3, [pc, #64]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552a:	d112      	bne.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e011      	b.n	8005554 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005532:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005536:	4a0a      	ldr	r2, [pc, #40]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005540:	e007      	b.n	8005552 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005542:	4b07      	ldr	r3, [pc, #28]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800554a:	4a05      	ldr	r2, [pc, #20]	; (8005560 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800554c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005550:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	40007000 	.word	0x40007000
 8005564:	20000010 	.word	0x20000010
 8005568:	431bde83 	.word	0x431bde83

0800556c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	4a04      	ldr	r2, [pc, #16]	; (8005588 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800557a:	6093      	str	r3, [r2, #8]
}
 800557c:	bf00      	nop
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr
 8005586:	bf00      	nop
 8005588:	40007000 	.word	0x40007000

0800558c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b088      	sub	sp, #32
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e306      	b.n	8005bac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d075      	beq.n	8005696 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055aa:	4b97      	ldr	r3, [pc, #604]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 030c 	and.w	r3, r3, #12
 80055b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055b4:	4b94      	ldr	r3, [pc, #592]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d102      	bne.n	80055ca <HAL_RCC_OscConfig+0x3e>
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d002      	beq.n	80055d0 <HAL_RCC_OscConfig+0x44>
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d10b      	bne.n	80055e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d0:	4b8d      	ldr	r3, [pc, #564]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d05b      	beq.n	8005694 <HAL_RCC_OscConfig+0x108>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d157      	bne.n	8005694 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e2e1      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f0:	d106      	bne.n	8005600 <HAL_RCC_OscConfig+0x74>
 80055f2:	4b85      	ldr	r3, [pc, #532]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a84      	ldr	r2, [pc, #528]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80055f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e01d      	b.n	800563c <HAL_RCC_OscConfig+0xb0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005608:	d10c      	bne.n	8005624 <HAL_RCC_OscConfig+0x98>
 800560a:	4b7f      	ldr	r3, [pc, #508]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a7e      	ldr	r2, [pc, #504]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b7c      	ldr	r3, [pc, #496]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7b      	ldr	r2, [pc, #492]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 800561c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	e00b      	b.n	800563c <HAL_RCC_OscConfig+0xb0>
 8005624:	4b78      	ldr	r3, [pc, #480]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a77      	ldr	r2, [pc, #476]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 800562a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800562e:	6013      	str	r3, [r2, #0]
 8005630:	4b75      	ldr	r3, [pc, #468]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a74      	ldr	r2, [pc, #464]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800563a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d013      	beq.n	800566c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005644:	f7fc fd6a 	bl	800211c <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800564a:	e008      	b.n	800565e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564c:	f7fc fd66 	bl	800211c <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	2b64      	cmp	r3, #100	; 0x64
 8005658:	d901      	bls.n	800565e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e2a6      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800565e:	4b6a      	ldr	r3, [pc, #424]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <HAL_RCC_OscConfig+0xc0>
 800566a:	e014      	b.n	8005696 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566c:	f7fc fd56 	bl	800211c <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005674:	f7fc fd52 	bl	800211c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	; 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e292      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005686:	4b60      	ldr	r3, [pc, #384]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1f0      	bne.n	8005674 <HAL_RCC_OscConfig+0xe8>
 8005692:	e000      	b.n	8005696 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d075      	beq.n	800578e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a2:	4b59      	ldr	r3, [pc, #356]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	f003 030c 	and.w	r3, r3, #12
 80056aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056ac:	4b56      	ldr	r3, [pc, #344]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	2b0c      	cmp	r3, #12
 80056ba:	d102      	bne.n	80056c2 <HAL_RCC_OscConfig+0x136>
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d002      	beq.n	80056c8 <HAL_RCC_OscConfig+0x13c>
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d11f      	bne.n	8005708 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056c8:	4b4f      	ldr	r3, [pc, #316]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_RCC_OscConfig+0x154>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e265      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e0:	4b49      	ldr	r3, [pc, #292]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	061b      	lsls	r3, r3, #24
 80056ee:	4946      	ldr	r1, [pc, #280]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056f4:	4b45      	ldr	r3, [pc, #276]	; (800580c <HAL_RCC_OscConfig+0x280>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fc fcc3 	bl	8002084 <HAL_InitTick>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d043      	beq.n	800578c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e251      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d023      	beq.n	8005758 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005710:	4b3d      	ldr	r3, [pc, #244]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a3c      	ldr	r2, [pc, #240]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800571a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571c:	f7fc fcfe 	bl	800211c <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005722:	e008      	b.n	8005736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005724:	f7fc fcfa 	bl	800211c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	2b02      	cmp	r3, #2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e23a      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005736:	4b34      	ldr	r3, [pc, #208]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0f0      	beq.n	8005724 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	061b      	lsls	r3, r3, #24
 8005750:	492d      	ldr	r1, [pc, #180]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005752:	4313      	orrs	r3, r2
 8005754:	604b      	str	r3, [r1, #4]
 8005756:	e01a      	b.n	800578e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005758:	4b2b      	ldr	r3, [pc, #172]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 800575e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fc fcda 	bl	800211c <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576c:	f7fc fcd6 	bl	800211c <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e216      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x1e0>
 800578a:	e000      	b.n	800578e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800578c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d041      	beq.n	800581e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01c      	beq.n	80057dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a2:	4b19      	ldr	r3, [pc, #100]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057a8:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80057aa:	f043 0301 	orr.w	r3, r3, #1
 80057ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b2:	f7fc fcb3 	bl	800211c <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ba:	f7fc fcaf 	bl	800211c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e1ef      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057cc:	4b0e      	ldr	r3, [pc, #56]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80057ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0ef      	beq.n	80057ba <HAL_RCC_OscConfig+0x22e>
 80057da:	e020      	b.n	800581e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057dc:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e2:	4a09      	ldr	r2, [pc, #36]	; (8005808 <HAL_RCC_OscConfig+0x27c>)
 80057e4:	f023 0301 	bic.w	r3, r3, #1
 80057e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ec:	f7fc fc96 	bl	800211c <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057f2:	e00d      	b.n	8005810 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f4:	f7fc fc92 	bl	800211c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d906      	bls.n	8005810 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e1d2      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
 8005806:	bf00      	nop
 8005808:	40021000 	.word	0x40021000
 800580c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005810:	4b8c      	ldr	r3, [pc, #560]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1ea      	bne.n	80057f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80a6 	beq.w	8005978 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582c:	2300      	movs	r3, #0
 800582e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005830:	4b84      	ldr	r3, [pc, #528]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <HAL_RCC_OscConfig+0x2b4>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <HAL_RCC_OscConfig+0x2b6>
 8005840:	2300      	movs	r3, #0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00d      	beq.n	8005862 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005846:	4b7f      	ldr	r3, [pc, #508]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584a:	4a7e      	ldr	r2, [pc, #504]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 800584c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005850:	6593      	str	r3, [r2, #88]	; 0x58
 8005852:	4b7c      	ldr	r3, [pc, #496]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800585e:	2301      	movs	r3, #1
 8005860:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005862:	4b79      	ldr	r3, [pc, #484]	; (8005a48 <HAL_RCC_OscConfig+0x4bc>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800586a:	2b00      	cmp	r3, #0
 800586c:	d118      	bne.n	80058a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800586e:	4b76      	ldr	r3, [pc, #472]	; (8005a48 <HAL_RCC_OscConfig+0x4bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a75      	ldr	r2, [pc, #468]	; (8005a48 <HAL_RCC_OscConfig+0x4bc>)
 8005874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800587a:	f7fc fc4f 	bl	800211c <HAL_GetTick>
 800587e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005880:	e008      	b.n	8005894 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005882:	f7fc fc4b 	bl	800211c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d901      	bls.n	8005894 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005890:	2303      	movs	r3, #3
 8005892:	e18b      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005894:	4b6c      	ldr	r3, [pc, #432]	; (8005a48 <HAL_RCC_OscConfig+0x4bc>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0f0      	beq.n	8005882 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d108      	bne.n	80058ba <HAL_RCC_OscConfig+0x32e>
 80058a8:	4b66      	ldr	r3, [pc, #408]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ae:	4a65      	ldr	r2, [pc, #404]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058b0:	f043 0301 	orr.w	r3, r3, #1
 80058b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058b8:	e024      	b.n	8005904 <HAL_RCC_OscConfig+0x378>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d110      	bne.n	80058e4 <HAL_RCC_OscConfig+0x358>
 80058c2:	4b60      	ldr	r3, [pc, #384]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	4a5e      	ldr	r2, [pc, #376]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058ca:	f043 0304 	orr.w	r3, r3, #4
 80058ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058d2:	4b5c      	ldr	r3, [pc, #368]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d8:	4a5a      	ldr	r2, [pc, #360]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058e2:	e00f      	b.n	8005904 <HAL_RCC_OscConfig+0x378>
 80058e4:	4b57      	ldr	r3, [pc, #348]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ea:	4a56      	ldr	r2, [pc, #344]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058f4:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fa:	4a52      	ldr	r2, [pc, #328]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d016      	beq.n	800593a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800590c:	f7fc fc06 	bl	800211c <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005912:	e00a      	b.n	800592a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fc fc02 	bl	800211c <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e140      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592a:	4b46      	ldr	r3, [pc, #280]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 800592c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0ed      	beq.n	8005914 <HAL_RCC_OscConfig+0x388>
 8005938:	e015      	b.n	8005966 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593a:	f7fc fbef 	bl	800211c <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005940:	e00a      	b.n	8005958 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005942:	f7fc fbeb 	bl	800211c <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e129      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005958:	4b3a      	ldr	r3, [pc, #232]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1ed      	bne.n	8005942 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005966:	7ffb      	ldrb	r3, [r7, #31]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d105      	bne.n	8005978 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800596c:	4b35      	ldr	r3, [pc, #212]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 800596e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005970:	4a34      	ldr	r2, [pc, #208]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005976:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0320 	and.w	r3, r3, #32
 8005980:	2b00      	cmp	r3, #0
 8005982:	d03c      	beq.n	80059fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01c      	beq.n	80059c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800598c:	4b2d      	ldr	r3, [pc, #180]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 800598e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005992:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005994:	f043 0301 	orr.w	r3, r3, #1
 8005998:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800599c:	f7fc fbbe 	bl	800211c <HAL_GetTick>
 80059a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059a2:	e008      	b.n	80059b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059a4:	f7fc fbba 	bl	800211c <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d901      	bls.n	80059b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0fa      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059b6:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80059b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ef      	beq.n	80059a4 <HAL_RCC_OscConfig+0x418>
 80059c4:	e01b      	b.n	80059fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059c6:	4b1f      	ldr	r3, [pc, #124]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80059c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d6:	f7fc fba1 	bl	800211c <HAL_GetTick>
 80059da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059de:	f7fc fb9d 	bl	800211c <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e0dd      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059f0:	4b14      	ldr	r3, [pc, #80]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 80059f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1ef      	bne.n	80059de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 80d1 	beq.w	8005baa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a08:	4b0e      	ldr	r3, [pc, #56]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 030c 	and.w	r3, r3, #12
 8005a10:	2b0c      	cmp	r3, #12
 8005a12:	f000 808b 	beq.w	8005b2c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d15e      	bne.n	8005adc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <HAL_RCC_OscConfig+0x4b8>)
 8005a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fc fb77 	bl	800211c <HAL_GetTick>
 8005a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a30:	e00c      	b.n	8005a4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a32:	f7fc fb73 	bl	800211c <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d905      	bls.n	8005a4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e0b3      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
 8005a44:	40021000 	.word	0x40021000
 8005a48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	4b59      	ldr	r3, [pc, #356]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1ec      	bne.n	8005a32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a58:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	4b56      	ldr	r3, [pc, #344]	; (8005bb8 <HAL_RCC_OscConfig+0x62c>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6a11      	ldr	r1, [r2, #32]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a7a:	0852      	lsrs	r2, r2, #1
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	0552      	lsls	r2, r2, #21
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a86:	0852      	lsrs	r2, r2, #1
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0652      	lsls	r2, r2, #25
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a92:	06d2      	lsls	r2, r2, #27
 8005a94:	430a      	orrs	r2, r1
 8005a96:	4947      	ldr	r1, [pc, #284]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a9c:	4b45      	ldr	r3, [pc, #276]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a44      	ldr	r2, [pc, #272]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a41      	ldr	r2, [pc, #260]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fc fb32 	bl	800211c <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fc fb2e 	bl	800211c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e06e      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	4b39      	ldr	r3, [pc, #228]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x530>
 8005ada:	e066      	b.n	8005baa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005adc:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ae8:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a31      	ldr	r2, [pc, #196]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005af4:	4b2f      	ldr	r3, [pc, #188]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a2e      	ldr	r2, [pc, #184]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005afa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fc fb0a 	bl	800211c <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b0a:	e008      	b.n	8005b1e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0c:	f7fc fb06 	bl	800211c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e046      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b1e:	4b25      	ldr	r3, [pc, #148]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1f0      	bne.n	8005b0c <HAL_RCC_OscConfig+0x580>
 8005b2a:	e03e      	b.n	8005baa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	69db      	ldr	r3, [r3, #28]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005b34:	2301      	movs	r3, #1
 8005b36:	e039      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_RCC_OscConfig+0x628>)
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f003 0203 	and.w	r2, r3, #3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d12c      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	3b01      	subs	r3, #1
 8005b58:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d123      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b68:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d11b      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b78:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d113      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d109      	bne.n	8005ba6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b9c:	085b      	lsrs	r3, r3, #1
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d001      	beq.n	8005baa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e000      	b.n	8005bac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3720      	adds	r7, #32
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	019f800c 	.word	0x019f800c

08005bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e11e      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bd4:	4b91      	ldr	r3, [pc, #580]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 030f 	and.w	r3, r3, #15
 8005bdc:	683a      	ldr	r2, [r7, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d910      	bls.n	8005c04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be2:	4b8e      	ldr	r3, [pc, #568]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 020f 	bic.w	r2, r3, #15
 8005bea:	498c      	ldr	r1, [pc, #560]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf2:	4b8a      	ldr	r3, [pc, #552]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e106      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d073      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d129      	bne.n	8005c6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c18:	4b81      	ldr	r3, [pc, #516]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e0f4      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c28:	f000 f99e 	bl	8005f68 <RCC_GetSysClockFreqFromPLLSource>
 8005c2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4a7c      	ldr	r2, [pc, #496]	; (8005e24 <HAL_RCC_ClockConfig+0x268>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d93f      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c36:	4b7a      	ldr	r3, [pc, #488]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d009      	beq.n	8005c56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d033      	beq.n	8005cb6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d12f      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c56:	4b72      	ldr	r3, [pc, #456]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5e:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c66:	2380      	movs	r3, #128	; 0x80
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e024      	b.n	8005cb6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d107      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c74:	4b6a      	ldr	r3, [pc, #424]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e0c6      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c84:	4b66      	ldr	r3, [pc, #408]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e0be      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c94:	f000 f8ce 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005c98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	4a61      	ldr	r2, [pc, #388]	; (8005e24 <HAL_RCC_ClockConfig+0x268>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d909      	bls.n	8005cb6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ca2:	4b5f      	ldr	r3, [pc, #380]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005caa:	4a5d      	ldr	r2, [pc, #372]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cb6:	4b5a      	ldr	r3, [pc, #360]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f023 0203 	bic.w	r2, r3, #3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	4957      	ldr	r1, [pc, #348]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc8:	f7fc fa28 	bl	800211c <HAL_GetTick>
 8005ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cce:	e00a      	b.n	8005ce6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd0:	f7fc fa24 	bl	800211c <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e095      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ce6:	4b4e      	ldr	r3, [pc, #312]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 020c 	and.w	r2, r3, #12
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d1eb      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d023      	beq.n	8005d4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d10:	4b43      	ldr	r3, [pc, #268]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a42      	ldr	r2, [pc, #264]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d28:	4b3d      	ldr	r3, [pc, #244]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d30:	4a3b      	ldr	r2, [pc, #236]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d38:	4b39      	ldr	r3, [pc, #228]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4936      	ldr	r1, [pc, #216]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
 8005d4a:	e008      	b.n	8005d5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	2b80      	cmp	r3, #128	; 0x80
 8005d50:	d105      	bne.n	8005d5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d52:	4b33      	ldr	r3, [pc, #204]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	4a32      	ldr	r2, [pc, #200]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005d58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d5e:	4b2f      	ldr	r3, [pc, #188]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 030f 	and.w	r3, r3, #15
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d21d      	bcs.n	8005da8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6c:	4b2b      	ldr	r3, [pc, #172]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f023 020f 	bic.w	r2, r3, #15
 8005d74:	4929      	ldr	r1, [pc, #164]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d7c:	f7fc f9ce 	bl	800211c <HAL_GetTick>
 8005d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d82:	e00a      	b.n	8005d9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d84:	f7fc f9ca 	bl	800211c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e03b      	b.n	8005e12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d9a:	4b20      	ldr	r3, [pc, #128]	; (8005e1c <HAL_RCC_ClockConfig+0x260>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d1ed      	bne.n	8005d84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005db4:	4b1a      	ldr	r3, [pc, #104]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	4917      	ldr	r1, [pc, #92]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0308 	and.w	r3, r3, #8
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d009      	beq.n	8005de6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dd2:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	490f      	ldr	r1, [pc, #60]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005de6:	f000 f825 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8005dea:	4602      	mov	r2, r0
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <HAL_RCC_ClockConfig+0x264>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	091b      	lsrs	r3, r3, #4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	490c      	ldr	r1, [pc, #48]	; (8005e28 <HAL_RCC_ClockConfig+0x26c>)
 8005df8:	5ccb      	ldrb	r3, [r1, r3]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8005e02:	4a0a      	ldr	r2, [pc, #40]	; (8005e2c <HAL_RCC_ClockConfig+0x270>)
 8005e04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x274>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7fc f93a 	bl	8002084 <HAL_InitTick>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40022000 	.word	0x40022000
 8005e20:	40021000 	.word	0x40021000
 8005e24:	04c4b400 	.word	0x04c4b400
 8005e28:	0800ed38 	.word	0x0800ed38
 8005e2c:	20000010 	.word	0x20000010
 8005e30:	20000014 	.word	0x20000014

08005e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b087      	sub	sp, #28
 8005e38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e3a:	4b2c      	ldr	r3, [pc, #176]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d102      	bne.n	8005e4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e46:	4b2a      	ldr	r3, [pc, #168]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e48:	613b      	str	r3, [r7, #16]
 8005e4a:	e047      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e4c:	4b27      	ldr	r3, [pc, #156]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	f003 030c 	and.w	r3, r3, #12
 8005e54:	2b08      	cmp	r3, #8
 8005e56:	d102      	bne.n	8005e5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e58:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	e03e      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 030c 	and.w	r3, r3, #12
 8005e66:	2b0c      	cmp	r3, #12
 8005e68:	d136      	bne.n	8005ed8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e6a:	4b20      	ldr	r3, [pc, #128]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0303 	and.w	r3, r3, #3
 8005e72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	091b      	lsrs	r3, r3, #4
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	3301      	adds	r3, #1
 8005e80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d10c      	bne.n	8005ea2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e88:	4a1a      	ldr	r2, [pc, #104]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e90:	4a16      	ldr	r2, [pc, #88]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e92:	68d2      	ldr	r2, [r2, #12]
 8005e94:	0a12      	lsrs	r2, r2, #8
 8005e96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	617b      	str	r3, [r7, #20]
      break;
 8005ea0:	e00c      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eaa:	4a10      	ldr	r2, [pc, #64]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eac:	68d2      	ldr	r2, [r2, #12]
 8005eae:	0a12      	lsrs	r2, r2, #8
 8005eb0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005eb4:	fb02 f303 	mul.w	r3, r2, r3
 8005eb8:	617b      	str	r3, [r7, #20]
      break;
 8005eba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ebc:	4b0b      	ldr	r3, [pc, #44]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	0e5b      	lsrs	r3, r3, #25
 8005ec2:	f003 0303 	and.w	r3, r3, #3
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	005b      	lsls	r3, r3, #1
 8005eca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ed4:	613b      	str	r3, [r7, #16]
 8005ed6:	e001      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005edc:	693b      	ldr	r3, [r7, #16]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	371c      	adds	r7, #28
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40021000 	.word	0x40021000
 8005ef0:	00f42400 	.word	0x00f42400
 8005ef4:	016e3600 	.word	0x016e3600

08005ef8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8005efe:	681b      	ldr	r3, [r3, #0]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000010 	.word	0x20000010

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005f14:	f7ff fff0 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b06      	ldr	r3, [pc, #24]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4904      	ldr	r1, [pc, #16]	; (8005f38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	f003 031f 	and.w	r3, r3, #31
 8005f2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	40021000 	.word	0x40021000
 8005f38:	0800ed48 	.word	0x0800ed48

08005f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005f40:	f7ff ffda 	bl	8005ef8 <HAL_RCC_GetHCLKFreq>
 8005f44:	4602      	mov	r2, r0
 8005f46:	4b06      	ldr	r3, [pc, #24]	; (8005f60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	0adb      	lsrs	r3, r3, #11
 8005f4c:	f003 0307 	and.w	r3, r3, #7
 8005f50:	4904      	ldr	r1, [pc, #16]	; (8005f64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f52:	5ccb      	ldrb	r3, [r1, r3]
 8005f54:	f003 031f 	and.w	r3, r3, #31
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40021000 	.word	0x40021000
 8005f64:	0800ed48 	.word	0x0800ed48

08005f68 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f78:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	091b      	lsrs	r3, r3, #4
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	3301      	adds	r3, #1
 8005f84:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	2b03      	cmp	r3, #3
 8005f8a:	d10c      	bne.n	8005fa6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f8c:	4a17      	ldr	r2, [pc, #92]	; (8005fec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	4a14      	ldr	r2, [pc, #80]	; (8005fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f96:	68d2      	ldr	r2, [r2, #12]
 8005f98:	0a12      	lsrs	r2, r2, #8
 8005f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f9e:	fb02 f303 	mul.w	r3, r2, r3
 8005fa2:	617b      	str	r3, [r7, #20]
    break;
 8005fa4:	e00c      	b.n	8005fc0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa6:	4a12      	ldr	r2, [pc, #72]	; (8005ff0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fae:	4a0e      	ldr	r2, [pc, #56]	; (8005fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fb0:	68d2      	ldr	r2, [r2, #12]
 8005fb2:	0a12      	lsrs	r2, r2, #8
 8005fb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fb8:	fb02 f303 	mul.w	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
    break;
 8005fbe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fc0:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	0e5b      	lsrs	r3, r3, #25
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	3301      	adds	r3, #1
 8005fcc:	005b      	lsls	r3, r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fda:	687b      	ldr	r3, [r7, #4]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	016e3600 	.word	0x016e3600
 8005ff0:	00f42400 	.word	0x00f42400

08005ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006000:	2300      	movs	r3, #0
 8006002:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8098 	beq.w	8006142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006012:	2300      	movs	r3, #0
 8006014:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006016:	4b43      	ldr	r3, [pc, #268]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d10d      	bne.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006022:	4b40      	ldr	r3, [pc, #256]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006026:	4a3f      	ldr	r2, [pc, #252]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602c:	6593      	str	r3, [r2, #88]	; 0x58
 800602e:	4b3d      	ldr	r3, [pc, #244]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006036:	60bb      	str	r3, [r7, #8]
 8006038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800603a:	2301      	movs	r3, #1
 800603c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800603e:	4b3a      	ldr	r3, [pc, #232]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a39      	ldr	r2, [pc, #228]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006048:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800604a:	f7fc f867 	bl	800211c <HAL_GetTick>
 800604e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006050:	e009      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006052:	f7fc f863 	bl	800211c <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	2b02      	cmp	r3, #2
 800605e:	d902      	bls.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	74fb      	strb	r3, [r7, #19]
        break;
 8006064:	e005      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006066:	4b30      	ldr	r3, [pc, #192]	; (8006128 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0ef      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006072:	7cfb      	ldrb	r3, [r7, #19]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d159      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006078:	4b2a      	ldr	r3, [pc, #168]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006082:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01e      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	429a      	cmp	r2, r3
 8006092:	d019      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006094:	4b23      	ldr	r3, [pc, #140]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060a0:	4b20      	ldr	r3, [pc, #128]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a6:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060b0:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060b6:	4a1b      	ldr	r2, [pc, #108]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f003 0301 	and.w	r3, r3, #1
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d016      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d2:	f7fc f823 	bl	800211c <HAL_GetTick>
 80060d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d8:	e00b      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060da:	f7fc f81f 	bl	800211c <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d902      	bls.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	74fb      	strb	r3, [r7, #19]
            break;
 80060f0:	e006      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f2:	4b0c      	ldr	r3, [pc, #48]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	f003 0302 	and.w	r3, r3, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d0ec      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006100:	7cfb      	ldrb	r3, [r7, #19]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10b      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006106:	4b07      	ldr	r3, [pc, #28]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006114:	4903      	ldr	r1, [pc, #12]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800611e:	7cfb      	ldrb	r3, [r7, #19]
 8006120:	74bb      	strb	r3, [r7, #18]
 8006122:	e005      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006124:	40021000 	.word	0x40021000
 8006128:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006130:	7c7b      	ldrb	r3, [r7, #17]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d105      	bne.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006136:	4ba6      	ldr	r3, [pc, #664]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	4aa5      	ldr	r2, [pc, #660]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800613c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006140:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b00      	cmp	r3, #0
 800614c:	d00a      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800614e:	4ba0      	ldr	r3, [pc, #640]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f023 0203 	bic.w	r2, r3, #3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	499c      	ldr	r1, [pc, #624]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00a      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006170:	4b97      	ldr	r3, [pc, #604]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006176:	f023 020c 	bic.w	r2, r3, #12
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	4994      	ldr	r1, [pc, #592]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0304 	and.w	r3, r3, #4
 800618e:	2b00      	cmp	r3, #0
 8006190:	d00a      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006192:	4b8f      	ldr	r3, [pc, #572]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	498b      	ldr	r1, [pc, #556]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061b4:	4b86      	ldr	r3, [pc, #536]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4983      	ldr	r1, [pc, #524]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061d6:	4b7e      	ldr	r3, [pc, #504]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	497a      	ldr	r1, [pc, #488]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061f8:	4b75      	ldr	r3, [pc, #468]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	4972      	ldr	r1, [pc, #456]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800621a:	4b6d      	ldr	r3, [pc, #436]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	4969      	ldr	r1, [pc, #420]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800623c:	4b64      	ldr	r3, [pc, #400]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800623e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006242:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	4961      	ldr	r1, [pc, #388]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624c:	4313      	orrs	r3, r2
 800624e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800625e:	4b5c      	ldr	r3, [pc, #368]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	4958      	ldr	r1, [pc, #352]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626e:	4313      	orrs	r3, r2
 8006270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800627c:	2b00      	cmp	r3, #0
 800627e:	d015      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006280:	4b53      	ldr	r3, [pc, #332]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628e:	4950      	ldr	r1, [pc, #320]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a0:	4b4b      	ldr	r3, [pc, #300]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a4a      	ldr	r2, [pc, #296]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d015      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062b8:	4b45      	ldr	r3, [pc, #276]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c6:	4942      	ldr	r1, [pc, #264]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062d6:	d105      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d8:	4b3d      	ldr	r3, [pc, #244]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a3c      	ldr	r2, [pc, #240]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062f0:	4b37      	ldr	r3, [pc, #220]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fe:	4934      	ldr	r1, [pc, #208]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800630a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006310:	4b2f      	ldr	r3, [pc, #188]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a2e      	ldr	r2, [pc, #184]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800631a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006328:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006336:	4926      	ldr	r1, [pc, #152]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a20      	ldr	r2, [pc, #128]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006360:	4b1b      	ldr	r3, [pc, #108]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	4918      	ldr	r1, [pc, #96]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006380:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a12      	ldr	r2, [pc, #72]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800638a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d015      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006398:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a6:	490a      	ldr	r1, [pc, #40]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063b6:	d105      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063b8:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a04      	ldr	r2, [pc, #16]	; (80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80063be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80063c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	40021000 	.word	0x40021000

080063d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d101      	bne.n	80063e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	e049      	b.n	800647a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f7fb fd0a 	bl	8001e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2202      	movs	r2, #2
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f000 fdb8 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2201      	movs	r2, #1
 800642c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2201      	movs	r2, #1
 8006444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3708      	adds	r7, #8
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
	...

08006484 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d001      	beq.n	800649c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e04a      	b.n	8006532 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2202      	movs	r2, #2
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a21      	ldr	r2, [pc, #132]	; (8006540 <HAL_TIM_Base_Start_IT+0xbc>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x6c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c6:	d013      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x6c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1d      	ldr	r2, [pc, #116]	; (8006544 <HAL_TIM_Base_Start_IT+0xc0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x6c>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_TIM_Base_Start_IT+0xc4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x6c>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1a      	ldr	r2, [pc, #104]	; (800654c <HAL_TIM_Base_Start_IT+0xc8>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x6c>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_TIM_Base_Start_IT+0xcc>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d115      	bne.n	800651c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689a      	ldr	r2, [r3, #8]
 80064f6:	4b17      	ldr	r3, [pc, #92]	; (8006554 <HAL_TIM_Base_Start_IT+0xd0>)
 80064f8:	4013      	ands	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2b06      	cmp	r3, #6
 8006500:	d015      	beq.n	800652e <HAL_TIM_Base_Start_IT+0xaa>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d011      	beq.n	800652e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800651a:	e008      	b.n	800652e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f042 0201 	orr.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	e000      	b.n	8006530 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40013400 	.word	0x40013400
 8006550:	40014000 	.word	0x40014000
 8006554:	00010007 	.word	0x00010007

08006558 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e049      	b.n	80065fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006570:	b2db      	uxtb	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d106      	bne.n	8006584 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f841 	bl	8006606 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f000 fcf6 	bl	8006f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2201      	movs	r2, #1
 80065c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800660e:	bf00      	nop
 8006610:	370c      	adds	r7, #12
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
	...

0800661c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d109      	bne.n	8006640 <HAL_TIM_PWM_Start+0x24>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006632:	b2db      	uxtb	r3, r3
 8006634:	2b01      	cmp	r3, #1
 8006636:	bf14      	ite	ne
 8006638:	2301      	movne	r3, #1
 800663a:	2300      	moveq	r3, #0
 800663c:	b2db      	uxtb	r3, r3
 800663e:	e03c      	b.n	80066ba <HAL_TIM_PWM_Start+0x9e>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b04      	cmp	r3, #4
 8006644:	d109      	bne.n	800665a <HAL_TIM_PWM_Start+0x3e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	bf14      	ite	ne
 8006652:	2301      	movne	r3, #1
 8006654:	2300      	moveq	r3, #0
 8006656:	b2db      	uxtb	r3, r3
 8006658:	e02f      	b.n	80066ba <HAL_TIM_PWM_Start+0x9e>
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d109      	bne.n	8006674 <HAL_TIM_PWM_Start+0x58>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	bf14      	ite	ne
 800666c:	2301      	movne	r3, #1
 800666e:	2300      	moveq	r3, #0
 8006670:	b2db      	uxtb	r3, r3
 8006672:	e022      	b.n	80066ba <HAL_TIM_PWM_Start+0x9e>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b0c      	cmp	r3, #12
 8006678:	d109      	bne.n	800668e <HAL_TIM_PWM_Start+0x72>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	bf14      	ite	ne
 8006686:	2301      	movne	r3, #1
 8006688:	2300      	moveq	r3, #0
 800668a:	b2db      	uxtb	r3, r3
 800668c:	e015      	b.n	80066ba <HAL_TIM_PWM_Start+0x9e>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2b10      	cmp	r3, #16
 8006692:	d109      	bne.n	80066a8 <HAL_TIM_PWM_Start+0x8c>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800669a:	b2db      	uxtb	r3, r3
 800669c:	2b01      	cmp	r3, #1
 800669e:	bf14      	ite	ne
 80066a0:	2301      	movne	r3, #1
 80066a2:	2300      	moveq	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	e008      	b.n	80066ba <HAL_TIM_PWM_Start+0x9e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e097      	b.n	80067f2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d104      	bne.n	80066d2 <HAL_TIM_PWM_Start+0xb6>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066d0:	e023      	b.n	800671a <HAL_TIM_PWM_Start+0xfe>
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b04      	cmp	r3, #4
 80066d6:	d104      	bne.n	80066e2 <HAL_TIM_PWM_Start+0xc6>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e0:	e01b      	b.n	800671a <HAL_TIM_PWM_Start+0xfe>
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b08      	cmp	r3, #8
 80066e6:	d104      	bne.n	80066f2 <HAL_TIM_PWM_Start+0xd6>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066f0:	e013      	b.n	800671a <HAL_TIM_PWM_Start+0xfe>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b0c      	cmp	r3, #12
 80066f6:	d104      	bne.n	8006702 <HAL_TIM_PWM_Start+0xe6>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2202      	movs	r2, #2
 80066fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006700:	e00b      	b.n	800671a <HAL_TIM_PWM_Start+0xfe>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b10      	cmp	r3, #16
 8006706:	d104      	bne.n	8006712 <HAL_TIM_PWM_Start+0xf6>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006710:	e003      	b.n	800671a <HAL_TIM_PWM_Start+0xfe>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f001 f852 	bl	80077cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a33      	ldr	r2, [pc, #204]	; (80067fc <HAL_TIM_PWM_Start+0x1e0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d013      	beq.n	800675a <HAL_TIM_PWM_Start+0x13e>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a32      	ldr	r2, [pc, #200]	; (8006800 <HAL_TIM_PWM_Start+0x1e4>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00e      	beq.n	800675a <HAL_TIM_PWM_Start+0x13e>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a30      	ldr	r2, [pc, #192]	; (8006804 <HAL_TIM_PWM_Start+0x1e8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d009      	beq.n	800675a <HAL_TIM_PWM_Start+0x13e>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a2f      	ldr	r2, [pc, #188]	; (8006808 <HAL_TIM_PWM_Start+0x1ec>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d004      	beq.n	800675a <HAL_TIM_PWM_Start+0x13e>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2d      	ldr	r2, [pc, #180]	; (800680c <HAL_TIM_PWM_Start+0x1f0>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d101      	bne.n	800675e <HAL_TIM_PWM_Start+0x142>
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <HAL_TIM_PWM_Start+0x144>
 800675e:	2300      	movs	r3, #0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d007      	beq.n	8006774 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006772:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a20      	ldr	r2, [pc, #128]	; (80067fc <HAL_TIM_PWM_Start+0x1e0>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d018      	beq.n	80067b0 <HAL_TIM_PWM_Start+0x194>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d013      	beq.n	80067b0 <HAL_TIM_PWM_Start+0x194>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <HAL_TIM_PWM_Start+0x1f4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00e      	beq.n	80067b0 <HAL_TIM_PWM_Start+0x194>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_TIM_PWM_Start+0x1f8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d009      	beq.n	80067b0 <HAL_TIM_PWM_Start+0x194>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a17      	ldr	r2, [pc, #92]	; (8006800 <HAL_TIM_PWM_Start+0x1e4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <HAL_TIM_PWM_Start+0x194>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a16      	ldr	r2, [pc, #88]	; (8006804 <HAL_TIM_PWM_Start+0x1e8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d115      	bne.n	80067dc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	4b18      	ldr	r3, [pc, #96]	; (8006818 <HAL_TIM_PWM_Start+0x1fc>)
 80067b8:	4013      	ands	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b06      	cmp	r3, #6
 80067c0:	d015      	beq.n	80067ee <HAL_TIM_PWM_Start+0x1d2>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067c8:	d011      	beq.n	80067ee <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067da:	e008      	b.n	80067ee <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f042 0201 	orr.w	r2, r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e000      	b.n	80067f0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	00010007 	.word	0x00010007

0800681c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b02      	cmp	r3, #2
 8006830:	d122      	bne.n	8006878 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b02      	cmp	r3, #2
 800683e:	d11b      	bne.n	8006878 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f06f 0202 	mvn.w	r2, #2
 8006848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	699b      	ldr	r3, [r3, #24]
 8006856:	f003 0303 	and.w	r3, r3, #3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb74 	bl	8006f4c <HAL_TIM_IC_CaptureCallback>
 8006864:	e005      	b.n	8006872 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fb66 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fb77 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b04      	cmp	r3, #4
 8006884:	d122      	bne.n	80068cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	f003 0304 	and.w	r3, r3, #4
 8006890:	2b04      	cmp	r3, #4
 8006892:	d11b      	bne.n	80068cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f06f 0204 	mvn.w	r2, #4
 800689c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d003      	beq.n	80068ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fb4a 	bl	8006f4c <HAL_TIM_IC_CaptureCallback>
 80068b8:	e005      	b.n	80068c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fb3c 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fb4d 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d122      	bne.n	8006920 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d11b      	bne.n	8006920 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f06f 0208 	mvn.w	r2, #8
 80068f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2204      	movs	r2, #4
 80068f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	69db      	ldr	r3, [r3, #28]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 fb20 	bl	8006f4c <HAL_TIM_IC_CaptureCallback>
 800690c:	e005      	b.n	800691a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fb12 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 fb23 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	f003 0310 	and.w	r3, r3, #16
 800692a:	2b10      	cmp	r3, #16
 800692c:	d122      	bne.n	8006974 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b10      	cmp	r3, #16
 800693a:	d11b      	bne.n	8006974 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f06f 0210 	mvn.w	r2, #16
 8006944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2208      	movs	r2, #8
 800694a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	69db      	ldr	r3, [r3, #28]
 8006952:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 faf6 	bl	8006f4c <HAL_TIM_IC_CaptureCallback>
 8006960:	e005      	b.n	800696e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 fae8 	bl	8006f38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 faf9 	bl	8006f60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b01      	cmp	r3, #1
 8006980:	d10e      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f003 0301 	and.w	r3, r3, #1
 800698c:	2b01      	cmp	r3, #1
 800698e:	d107      	bne.n	80069a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0201 	mvn.w	r2, #1
 8006998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7fb f8ee 	bl	8001b7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069aa:	2b80      	cmp	r3, #128	; 0x80
 80069ac:	d10e      	bne.n	80069cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b8:	2b80      	cmp	r3, #128	; 0x80
 80069ba:	d107      	bne.n	80069cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 f852 	bl	8007a70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691b      	ldr	r3, [r3, #16]
 80069d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069da:	d10e      	bne.n	80069fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069e6:	2b80      	cmp	r3, #128	; 0x80
 80069e8:	d107      	bne.n	80069fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 f845 	bl	8007a84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b40      	cmp	r3, #64	; 0x40
 8006a06:	d10e      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d107      	bne.n	8006a26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 faa7 	bl	8006f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d10e      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68db      	ldr	r3, [r3, #12]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b20      	cmp	r3, #32
 8006a40:	d107      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f06f 0220 	mvn.w	r2, #32
 8006a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f805 	bl	8007a5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a60:	d10f      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 f80b 	bl	8007a98 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a90:	d10f      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aa0:	d107      	bne.n	8006ab2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fffd 	bl	8007aac <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac0:	d10f      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006acc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad0:	d107      	bne.n	8006ae2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 ffef 	bl	8007ac0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006af0:	d10f      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006afc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006b00:	d107      	bne.n	8006b12 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 ffe1 	bl	8007ad4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
	...

08006b1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e0ff      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b14      	cmp	r3, #20
 8006b46:	f200 80f0 	bhi.w	8006d2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006b4a:	a201      	add	r2, pc, #4	; (adr r2, 8006b50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006ba5 	.word	0x08006ba5
 8006b54:	08006d2b 	.word	0x08006d2b
 8006b58:	08006d2b 	.word	0x08006d2b
 8006b5c:	08006d2b 	.word	0x08006d2b
 8006b60:	08006be5 	.word	0x08006be5
 8006b64:	08006d2b 	.word	0x08006d2b
 8006b68:	08006d2b 	.word	0x08006d2b
 8006b6c:	08006d2b 	.word	0x08006d2b
 8006b70:	08006c27 	.word	0x08006c27
 8006b74:	08006d2b 	.word	0x08006d2b
 8006b78:	08006d2b 	.word	0x08006d2b
 8006b7c:	08006d2b 	.word	0x08006d2b
 8006b80:	08006c67 	.word	0x08006c67
 8006b84:	08006d2b 	.word	0x08006d2b
 8006b88:	08006d2b 	.word	0x08006d2b
 8006b8c:	08006d2b 	.word	0x08006d2b
 8006b90:	08006ca9 	.word	0x08006ca9
 8006b94:	08006d2b 	.word	0x08006d2b
 8006b98:	08006d2b 	.word	0x08006d2b
 8006b9c:	08006d2b 	.word	0x08006d2b
 8006ba0:	08006ce9 	.word	0x08006ce9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68b9      	ldr	r1, [r7, #8]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fa7c 	bl	80070a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	699a      	ldr	r2, [r3, #24]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0208 	orr.w	r2, r2, #8
 8006bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699a      	ldr	r2, [r3, #24]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 0204 	bic.w	r2, r2, #4
 8006bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6999      	ldr	r1, [r3, #24]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691a      	ldr	r2, [r3, #16]
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	619a      	str	r2, [r3, #24]
      break;
 8006be2:	e0a5      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 faec 	bl	80071c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	699a      	ldr	r2, [r3, #24]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6999      	ldr	r1, [r3, #24]
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	021a      	lsls	r2, r3, #8
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	619a      	str	r2, [r3, #24]
      break;
 8006c24:	e084      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	68b9      	ldr	r1, [r7, #8]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 fb55 	bl	80072dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	69da      	ldr	r2, [r3, #28]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f042 0208 	orr.w	r2, r2, #8
 8006c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69da      	ldr	r2, [r3, #28]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 0204 	bic.w	r2, r2, #4
 8006c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	69d9      	ldr	r1, [r3, #28]
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	61da      	str	r2, [r3, #28]
      break;
 8006c64:	e064      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 fbbd 	bl	80073ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69da      	ldr	r2, [r3, #28]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69d9      	ldr	r1, [r3, #28]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	021a      	lsls	r2, r3, #8
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	61da      	str	r2, [r3, #28]
      break;
 8006ca6:	e043      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fc26 	bl	8007500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0204 	bic.w	r2, r2, #4
 8006cd2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ce6:	e023      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fc6a 	bl	80075c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006d28:	e002      	b.n	8006d30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop

08006d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIM_ConfigClockSource+0x1c>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e0de      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x1da>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006d7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a63      	ldr	r2, [pc, #396]	; (8006f28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	f000 80a9 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006da0:	4a61      	ldr	r2, [pc, #388]	; (8006f28 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f200 80ae 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006da8:	4a60      	ldr	r2, [pc, #384]	; (8006f2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	f000 80a1 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006db0:	4a5e      	ldr	r2, [pc, #376]	; (8006f2c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	f200 80a6 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006db8:	4a5d      	ldr	r2, [pc, #372]	; (8006f30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	f000 8099 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006dc0:	4a5b      	ldr	r2, [pc, #364]	; (8006f30 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	f200 809e 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006dc8:	4a5a      	ldr	r2, [pc, #360]	; (8006f34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	f000 8091 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006dd0:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <HAL_TIM_ConfigClockSource+0x1f0>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	f200 8096 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006dd8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ddc:	f000 8089 	beq.w	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006de0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006de4:	f200 808e 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dec:	d03e      	beq.n	8006e6c <HAL_TIM_ConfigClockSource+0x128>
 8006dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006df2:	f200 8087 	bhi.w	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dfa:	f000 8086 	beq.w	8006f0a <HAL_TIM_ConfigClockSource+0x1c6>
 8006dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e02:	d87f      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e04:	2b70      	cmp	r3, #112	; 0x70
 8006e06:	d01a      	beq.n	8006e3e <HAL_TIM_ConfigClockSource+0xfa>
 8006e08:	2b70      	cmp	r3, #112	; 0x70
 8006e0a:	d87b      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e0c:	2b60      	cmp	r3, #96	; 0x60
 8006e0e:	d050      	beq.n	8006eb2 <HAL_TIM_ConfigClockSource+0x16e>
 8006e10:	2b60      	cmp	r3, #96	; 0x60
 8006e12:	d877      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e14:	2b50      	cmp	r3, #80	; 0x50
 8006e16:	d03c      	beq.n	8006e92 <HAL_TIM_ConfigClockSource+0x14e>
 8006e18:	2b50      	cmp	r3, #80	; 0x50
 8006e1a:	d873      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e1c:	2b40      	cmp	r3, #64	; 0x40
 8006e1e:	d058      	beq.n	8006ed2 <HAL_TIM_ConfigClockSource+0x18e>
 8006e20:	2b40      	cmp	r3, #64	; 0x40
 8006e22:	d86f      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e24:	2b30      	cmp	r3, #48	; 0x30
 8006e26:	d064      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e28:	2b30      	cmp	r3, #48	; 0x30
 8006e2a:	d86b      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e2c:	2b20      	cmp	r3, #32
 8006e2e:	d060      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e30:	2b20      	cmp	r3, #32
 8006e32:	d867      	bhi.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d05c      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e38:	2b10      	cmp	r3, #16
 8006e3a:	d05a      	beq.n	8006ef2 <HAL_TIM_ConfigClockSource+0x1ae>
 8006e3c:	e062      	b.n	8006f04 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6818      	ldr	r0, [r3, #0]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	6899      	ldr	r1, [r3, #8]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f000 fc9d 	bl	800778c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	609a      	str	r2, [r3, #8]
      break;
 8006e6a:	e04f      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6818      	ldr	r0, [r3, #0]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	6899      	ldr	r1, [r3, #8]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f000 fc86 	bl	800778c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689a      	ldr	r2, [r3, #8]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e8e:	609a      	str	r2, [r3, #8]
      break;
 8006e90:	e03c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6859      	ldr	r1, [r3, #4]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	f000 fbf8 	bl	8007694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2150      	movs	r1, #80	; 0x50
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fc51 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006eb0:	e02c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6818      	ldr	r0, [r3, #0]
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	6859      	ldr	r1, [r3, #4]
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f000 fc17 	bl	80076f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2160      	movs	r1, #96	; 0x60
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fc41 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006ed0:	e01c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	f000 fbd8 	bl	8007694 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2140      	movs	r1, #64	; 0x40
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 fc31 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006ef0:	e00c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f000 fc28 	bl	8007752 <TIM_ITRx_SetConfig>
      break;
 8006f02:	e003      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e000      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8006f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	00100070 	.word	0x00100070
 8006f2c:	00100040 	.word	0x00100040
 8006f30:	00100030 	.word	0x00100030
 8006f34:	00100020 	.word	0x00100020

08006f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3c      	ldr	r2, [pc, #240]	; (800708c <TIM_Base_SetConfig+0x104>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00f      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fa6:	d00b      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a39      	ldr	r2, [pc, #228]	; (8007090 <TIM_Base_SetConfig+0x108>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d007      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a38      	ldr	r2, [pc, #224]	; (8007094 <TIM_Base_SetConfig+0x10c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d003      	beq.n	8006fc0 <TIM_Base_SetConfig+0x38>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	4a37      	ldr	r2, [pc, #220]	; (8007098 <TIM_Base_SetConfig+0x110>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a2d      	ldr	r2, [pc, #180]	; (800708c <TIM_Base_SetConfig+0x104>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d01b      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fe0:	d017      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2a      	ldr	r2, [pc, #168]	; (8007090 <TIM_Base_SetConfig+0x108>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a29      	ldr	r2, [pc, #164]	; (8007094 <TIM_Base_SetConfig+0x10c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00f      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a28      	ldr	r2, [pc, #160]	; (8007098 <TIM_Base_SetConfig+0x110>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d00b      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a27      	ldr	r2, [pc, #156]	; (800709c <TIM_Base_SetConfig+0x114>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d007      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a26      	ldr	r2, [pc, #152]	; (80070a0 <TIM_Base_SetConfig+0x118>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d003      	beq.n	8007012 <TIM_Base_SetConfig+0x8a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a25      	ldr	r2, [pc, #148]	; (80070a4 <TIM_Base_SetConfig+0x11c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d108      	bne.n	8007024 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689a      	ldr	r2, [r3, #8]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	4a10      	ldr	r2, [pc, #64]	; (800708c <TIM_Base_SetConfig+0x104>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d00f      	beq.n	8007070 <TIM_Base_SetConfig+0xe8>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a11      	ldr	r2, [pc, #68]	; (8007098 <TIM_Base_SetConfig+0x110>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00b      	beq.n	8007070 <TIM_Base_SetConfig+0xe8>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a10      	ldr	r2, [pc, #64]	; (800709c <TIM_Base_SetConfig+0x114>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d007      	beq.n	8007070 <TIM_Base_SetConfig+0xe8>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a0f      	ldr	r2, [pc, #60]	; (80070a0 <TIM_Base_SetConfig+0x118>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_Base_SetConfig+0xe8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a0e      	ldr	r2, [pc, #56]	; (80070a4 <TIM_Base_SetConfig+0x11c>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d103      	bne.n	8007078 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	615a      	str	r2, [r3, #20]
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40012c00 	.word	0x40012c00
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40013400 	.word	0x40013400
 800709c:	40014000 	.word	0x40014000
 80070a0:	40014400 	.word	0x40014400
 80070a4:	40014800 	.word	0x40014800

080070a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b087      	sub	sp, #28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a1b      	ldr	r3, [r3, #32]
 80070b6:	f023 0201 	bic.w	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0303 	bic.w	r3, r3, #3
 80070e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f023 0302 	bic.w	r3, r3, #2
 80070f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a2c      	ldr	r2, [pc, #176]	; (80071b4 <TIM_OC1_SetConfig+0x10c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d00f      	beq.n	8007128 <TIM_OC1_SetConfig+0x80>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a2b      	ldr	r2, [pc, #172]	; (80071b8 <TIM_OC1_SetConfig+0x110>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00b      	beq.n	8007128 <TIM_OC1_SetConfig+0x80>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <TIM_OC1_SetConfig+0x114>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d007      	beq.n	8007128 <TIM_OC1_SetConfig+0x80>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a29      	ldr	r2, [pc, #164]	; (80071c0 <TIM_OC1_SetConfig+0x118>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d003      	beq.n	8007128 <TIM_OC1_SetConfig+0x80>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a28      	ldr	r2, [pc, #160]	; (80071c4 <TIM_OC1_SetConfig+0x11c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d10c      	bne.n	8007142 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	f023 0308 	bic.w	r3, r3, #8
 800712e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 0304 	bic.w	r3, r3, #4
 8007140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a1b      	ldr	r2, [pc, #108]	; (80071b4 <TIM_OC1_SetConfig+0x10c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00f      	beq.n	800716a <TIM_OC1_SetConfig+0xc2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a1a      	ldr	r2, [pc, #104]	; (80071b8 <TIM_OC1_SetConfig+0x110>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_OC1_SetConfig+0xc2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a19      	ldr	r2, [pc, #100]	; (80071bc <TIM_OC1_SetConfig+0x114>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_OC1_SetConfig+0xc2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a18      	ldr	r2, [pc, #96]	; (80071c0 <TIM_OC1_SetConfig+0x118>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_OC1_SetConfig+0xc2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <TIM_OC1_SetConfig+0x11c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d111      	bne.n	800718e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	693a      	ldr	r2, [r7, #16]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68fa      	ldr	r2, [r7, #12]
 8007198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	621a      	str	r2, [r3, #32]
}
 80071a8:	bf00      	nop
 80071aa:	371c      	adds	r7, #28
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40013400 	.word	0x40013400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800

080071c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f023 0210 	bic.w	r2, r3, #16
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	699b      	ldr	r3, [r3, #24]
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0320 	bic.w	r3, r3, #32
 8007216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a28      	ldr	r2, [pc, #160]	; (80072c8 <TIM_OC2_SetConfig+0x100>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC2_SetConfig+0x6c>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a27      	ldr	r2, [pc, #156]	; (80072cc <TIM_OC2_SetConfig+0x104>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d10d      	bne.n	8007250 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800723a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800724e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a1d      	ldr	r2, [pc, #116]	; (80072c8 <TIM_OC2_SetConfig+0x100>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00f      	beq.n	8007278 <TIM_OC2_SetConfig+0xb0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a1c      	ldr	r2, [pc, #112]	; (80072cc <TIM_OC2_SetConfig+0x104>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d00b      	beq.n	8007278 <TIM_OC2_SetConfig+0xb0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <TIM_OC2_SetConfig+0x108>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d007      	beq.n	8007278 <TIM_OC2_SetConfig+0xb0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <TIM_OC2_SetConfig+0x10c>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d003      	beq.n	8007278 <TIM_OC2_SetConfig+0xb0>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <TIM_OC2_SetConfig+0x110>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d113      	bne.n	80072a0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800727e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007286:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	695b      	ldr	r3, [r3, #20]
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	621a      	str	r2, [r3, #32]
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40014000 	.word	0x40014000
 80072d4:	40014400 	.word	0x40014400
 80072d8:	40014800 	.word	0x40014800

080072dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072dc:	b480      	push	{r7}
 80072de:	b087      	sub	sp, #28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800730a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	4313      	orrs	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	021b      	lsls	r3, r3, #8
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a27      	ldr	r2, [pc, #156]	; (80073d8 <TIM_OC3_SetConfig+0xfc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_OC3_SetConfig+0x6a>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a26      	ldr	r2, [pc, #152]	; (80073dc <TIM_OC3_SetConfig+0x100>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d10d      	bne.n	8007362 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800734c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	021b      	lsls	r3, r3, #8
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	4313      	orrs	r3, r2
 8007358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1c      	ldr	r2, [pc, #112]	; (80073d8 <TIM_OC3_SetConfig+0xfc>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00f      	beq.n	800738a <TIM_OC3_SetConfig+0xae>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <TIM_OC3_SetConfig+0x100>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d00b      	beq.n	800738a <TIM_OC3_SetConfig+0xae>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1a      	ldr	r2, [pc, #104]	; (80073e0 <TIM_OC3_SetConfig+0x104>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d007      	beq.n	800738a <TIM_OC3_SetConfig+0xae>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a19      	ldr	r2, [pc, #100]	; (80073e4 <TIM_OC3_SetConfig+0x108>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d003      	beq.n	800738a <TIM_OC3_SetConfig+0xae>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a18      	ldr	r2, [pc, #96]	; (80073e8 <TIM_OC3_SetConfig+0x10c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d113      	bne.n	80073b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	40012c00 	.word	0x40012c00
 80073dc:	40013400 	.word	0x40013400
 80073e0:	40014000 	.word	0x40014000
 80073e4:	40014400 	.word	0x40014400
 80073e8:	40014800 	.word	0x40014800

080073ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a1b      	ldr	r3, [r3, #32]
 80073fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800741a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800741e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	021b      	lsls	r3, r3, #8
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4313      	orrs	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800743a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	031b      	lsls	r3, r3, #12
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a28      	ldr	r2, [pc, #160]	; (80074ec <TIM_OC4_SetConfig+0x100>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d003      	beq.n	8007458 <TIM_OC4_SetConfig+0x6c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a27      	ldr	r2, [pc, #156]	; (80074f0 <TIM_OC4_SetConfig+0x104>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d10d      	bne.n	8007474 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800745e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	031b      	lsls	r3, r3, #12
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	4313      	orrs	r3, r2
 800746a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007472:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a1d      	ldr	r2, [pc, #116]	; (80074ec <TIM_OC4_SetConfig+0x100>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d00f      	beq.n	800749c <TIM_OC4_SetConfig+0xb0>
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <TIM_OC4_SetConfig+0x104>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d00b      	beq.n	800749c <TIM_OC4_SetConfig+0xb0>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a1b      	ldr	r2, [pc, #108]	; (80074f4 <TIM_OC4_SetConfig+0x108>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d007      	beq.n	800749c <TIM_OC4_SetConfig+0xb0>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a1a      	ldr	r2, [pc, #104]	; (80074f8 <TIM_OC4_SetConfig+0x10c>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d003      	beq.n	800749c <TIM_OC4_SetConfig+0xb0>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a19      	ldr	r2, [pc, #100]	; (80074fc <TIM_OC4_SetConfig+0x110>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d113      	bne.n	80074c4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	695b      	ldr	r3, [r3, #20]
 80074b0:	019b      	lsls	r3, r3, #6
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	019b      	lsls	r3, r3, #6
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	371c      	adds	r7, #28
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40013400 	.word	0x40013400
 80074f4:	40014000 	.word	0x40014000
 80074f8:	40014400 	.word	0x40014400
 80074fc:	40014800 	.word	0x40014800

08007500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a17      	ldr	r2, [pc, #92]	; (80075b4 <TIM_OC5_SetConfig+0xb4>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00f      	beq.n	800757a <TIM_OC5_SetConfig+0x7a>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <TIM_OC5_SetConfig+0xb8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d00b      	beq.n	800757a <TIM_OC5_SetConfig+0x7a>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a15      	ldr	r2, [pc, #84]	; (80075bc <TIM_OC5_SetConfig+0xbc>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d007      	beq.n	800757a <TIM_OC5_SetConfig+0x7a>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a14      	ldr	r2, [pc, #80]	; (80075c0 <TIM_OC5_SetConfig+0xc0>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_OC5_SetConfig+0x7a>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a13      	ldr	r2, [pc, #76]	; (80075c4 <TIM_OC5_SetConfig+0xc4>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d109      	bne.n	800758e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007580:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	021b      	lsls	r3, r3, #8
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	4313      	orrs	r3, r2
 800758c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40013400 	.word	0x40013400
 80075bc:	40014000 	.word	0x40014000
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800

080075c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b087      	sub	sp, #28
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800760e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	051b      	lsls	r3, r3, #20
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a18      	ldr	r2, [pc, #96]	; (8007680 <TIM_OC6_SetConfig+0xb8>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d00f      	beq.n	8007644 <TIM_OC6_SetConfig+0x7c>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a17      	ldr	r2, [pc, #92]	; (8007684 <TIM_OC6_SetConfig+0xbc>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d00b      	beq.n	8007644 <TIM_OC6_SetConfig+0x7c>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a16      	ldr	r2, [pc, #88]	; (8007688 <TIM_OC6_SetConfig+0xc0>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d007      	beq.n	8007644 <TIM_OC6_SetConfig+0x7c>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	4a15      	ldr	r2, [pc, #84]	; (800768c <TIM_OC6_SetConfig+0xc4>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d003      	beq.n	8007644 <TIM_OC6_SetConfig+0x7c>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	4a14      	ldr	r2, [pc, #80]	; (8007690 <TIM_OC6_SetConfig+0xc8>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d109      	bne.n	8007658 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800764a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	695b      	ldr	r3, [r3, #20]
 8007650:	029b      	lsls	r3, r3, #10
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	4313      	orrs	r3, r2
 8007656:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	697a      	ldr	r2, [r7, #20]
 800765c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	40012c00 	.word	0x40012c00
 8007684:	40013400 	.word	0x40013400
 8007688:	40014000 	.word	0x40014000
 800768c:	40014400 	.word	0x40014400
 8007690:	40014800 	.word	0x40014800

08007694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007694:	b480      	push	{r7}
 8007696:	b087      	sub	sp, #28
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f023 0201 	bic.w	r2, r3, #1
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	699b      	ldr	r3, [r3, #24]
 80076b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	011b      	lsls	r3, r3, #4
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f023 030a 	bic.w	r3, r3, #10
 80076d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	693a      	ldr	r2, [r7, #16]
 80076de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr

080076f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076f2:	b480      	push	{r7}
 80076f4:	b087      	sub	sp, #28
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	60b9      	str	r1, [r7, #8]
 80076fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f023 0210 	bic.w	r2, r3, #16
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800771c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	031b      	lsls	r3, r3, #12
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800772e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	4313      	orrs	r3, r2
 8007738:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	621a      	str	r2, [r3, #32]
}
 8007746:	bf00      	nop
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	f043 0307 	orr.w	r3, r3, #7
 8007778:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	609a      	str	r2, [r3, #8]
}
 8007780:	bf00      	nop
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800778c:	b480      	push	{r7}
 800778e:	b087      	sub	sp, #28
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	021a      	lsls	r2, r3, #8
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	431a      	orrs	r2, r3
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	697a      	ldr	r2, [r7, #20]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	609a      	str	r2, [r3, #8]
}
 80077c0:	bf00      	nop
 80077c2:	371c      	adds	r7, #28
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b087      	sub	sp, #28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	f003 031f 	and.w	r3, r3, #31
 80077de:	2201      	movs	r2, #1
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	43db      	mvns	r3, r3
 80077ee:	401a      	ands	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a1a      	ldr	r2, [r3, #32]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f003 031f 	and.w	r3, r3, #31
 80077fe:	6879      	ldr	r1, [r7, #4]
 8007800:	fa01 f303 	lsl.w	r3, r1, r3
 8007804:	431a      	orrs	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007818:	b480      	push	{r7}
 800781a:	b085      	sub	sp, #20
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800782c:	2302      	movs	r3, #2
 800782e:	e065      	b.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2202      	movs	r2, #2
 800783c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d004      	beq.n	8007864 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2b      	ldr	r2, [pc, #172]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d108      	bne.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800786a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800787c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007880:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	4313      	orrs	r3, r2
 800788a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1b      	ldr	r2, [pc, #108]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d018      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a6:	d013      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a18      	ldr	r2, [pc, #96]	; (8007910 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00e      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a17      	ldr	r2, [pc, #92]	; (8007914 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a12      	ldr	r2, [pc, #72]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a13      	ldr	r2, [pc, #76]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10c      	bne.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40012c00 	.word	0x40012c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40014000 	.word	0x40014000

0800791c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007934:	2302      	movs	r3, #2
 8007936:	e087      	b.n	8007a48 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	68db      	ldr	r3, [r3, #12]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	4313      	orrs	r3, r2
 800795a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	4313      	orrs	r3, r2
 8007968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4313      	orrs	r3, r2
 8007976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	4313      	orrs	r3, r2
 8007984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	4313      	orrs	r3, r2
 80079a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	041b      	lsls	r3, r3, #16
 80079ae:	4313      	orrs	r3, r2
 80079b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a27      	ldr	r2, [pc, #156]	; (8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d004      	beq.n	80079c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a25      	ldr	r2, [pc, #148]	; (8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80079c2:	4293      	cmp	r3, r2
 80079c4:	d106      	bne.n	80079d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	4313      	orrs	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1e      	ldr	r2, [pc, #120]	; (8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d004      	beq.n	80079e8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a1d      	ldr	r2, [pc, #116]	; (8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d126      	bne.n	8007a36 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	051b      	lsls	r3, r3, #20
 80079f4:	4313      	orrs	r3, r2
 80079f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6a1b      	ldr	r3, [r3, #32]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a0e      	ldr	r2, [pc, #56]	; (8007a54 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d004      	beq.n	8007a28 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a0d      	ldr	r2, [pc, #52]	; (8007a58 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d106      	bne.n	8007a36 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	40012c00 	.word	0x40012c00
 8007a58:	40013400 	.word	0x40013400

08007a5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a64:	bf00      	nop
 8007a66:	370c      	adds	r7, #12
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr

08007a70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007af6:	2301      	movs	r3, #1
 8007af8:	e042      	b.n	8007b80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d106      	bne.n	8007b12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f7fa f929 	bl	8001d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2224      	movs	r2, #36	; 0x24
 8007b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8c2 	bl	8007cb4 <UART_SetConfig>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d101      	bne.n	8007b3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e022      	b.n	8007b80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fb82 	bl	800824c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689a      	ldr	r2, [r3, #8]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0201 	orr.w	r2, r2, #1
 8007b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fc09 	bl	8008390 <UART_CheckIdleState>
 8007b7e:	4603      	mov	r3, r0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08a      	sub	sp, #40	; 0x28
 8007b8c:	af02      	add	r7, sp, #8
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	f040 8083 	bne.w	8007caa <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <HAL_UART_Transmit+0x28>
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e07b      	b.n	8007cac <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d101      	bne.n	8007bc2 <HAL_UART_Transmit+0x3a>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e074      	b.n	8007cac <HAL_UART_Transmit+0x124>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2221      	movs	r2, #33	; 0x21
 8007bd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bda:	f7fa fa9f 	bl	800211c <HAL_GetTick>
 8007bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	88fa      	ldrh	r2, [r7, #6]
 8007be4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	689b      	ldr	r3, [r3, #8]
 8007bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bf8:	d108      	bne.n	8007c0c <HAL_UART_Transmit+0x84>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	e003      	b.n	8007c14 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2200      	movs	r2, #0
 8007c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007c1c:	e02c      	b.n	8007c78 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2200      	movs	r2, #0
 8007c26:	2180      	movs	r1, #128	; 0x80
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fbfc 	bl	8008426 <UART_WaitOnFlagUntilTimeout>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d001      	beq.n	8007c38 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e039      	b.n	8007cac <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10b      	bne.n	8007c56 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	3302      	adds	r3, #2
 8007c52:	61bb      	str	r3, [r7, #24]
 8007c54:	e007      	b.n	8007c66 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	3301      	adds	r3, #1
 8007c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	b29a      	uxth	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1cc      	bne.n	8007c1e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	2140      	movs	r1, #64	; 0x40
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fbc9 	bl	8008426 <UART_WaitOnFlagUntilTimeout>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e006      	b.n	8007cac <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	e000      	b.n	8007cac <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007caa:	2302      	movs	r3, #2
  }
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3720      	adds	r7, #32
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cb8:	b08c      	sub	sp, #48	; 0x30
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	689a      	ldr	r2, [r3, #8]
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	431a      	orrs	r2, r3
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	431a      	orrs	r2, r3
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	4bab      	ldr	r3, [pc, #684]	; (8007f90 <UART_SetConfig+0x2dc>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	6812      	ldr	r2, [r2, #0]
 8007cea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	68da      	ldr	r2, [r3, #12]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	430a      	orrs	r2, r1
 8007d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4aa0      	ldr	r2, [pc, #640]	; (8007f94 <UART_SetConfig+0x2e0>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d2a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d2e:	697a      	ldr	r2, [r7, #20]
 8007d30:	6812      	ldr	r2, [r2, #0]
 8007d32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d34:	430b      	orrs	r3, r1
 8007d36:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	f023 010f 	bic.w	r1, r3, #15
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	430a      	orrs	r2, r1
 8007d4c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a91      	ldr	r2, [pc, #580]	; (8007f98 <UART_SetConfig+0x2e4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d125      	bne.n	8007da4 <UART_SetConfig+0xf0>
 8007d58:	4b90      	ldr	r3, [pc, #576]	; (8007f9c <UART_SetConfig+0x2e8>)
 8007d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d81a      	bhi.n	8007d9c <UART_SetConfig+0xe8>
 8007d66:	a201      	add	r2, pc, #4	; (adr r2, 8007d6c <UART_SetConfig+0xb8>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d7d 	.word	0x08007d7d
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007d85 	.word	0x08007d85
 8007d78:	08007d95 	.word	0x08007d95
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d82:	e0d6      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007d84:	2302      	movs	r3, #2
 8007d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8a:	e0d2      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d92:	e0ce      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d9a:	e0ca      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007da2:	e0c6      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a7d      	ldr	r2, [pc, #500]	; (8007fa0 <UART_SetConfig+0x2ec>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d138      	bne.n	8007e20 <UART_SetConfig+0x16c>
 8007dae:	4b7b      	ldr	r3, [pc, #492]	; (8007f9c <UART_SetConfig+0x2e8>)
 8007db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007db4:	f003 030c 	and.w	r3, r3, #12
 8007db8:	2b0c      	cmp	r3, #12
 8007dba:	d82d      	bhi.n	8007e18 <UART_SetConfig+0x164>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <UART_SetConfig+0x110>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007df9 	.word	0x08007df9
 8007dc8:	08007e19 	.word	0x08007e19
 8007dcc:	08007e19 	.word	0x08007e19
 8007dd0:	08007e19 	.word	0x08007e19
 8007dd4:	08007e09 	.word	0x08007e09
 8007dd8:	08007e19 	.word	0x08007e19
 8007ddc:	08007e19 	.word	0x08007e19
 8007de0:	08007e19 	.word	0x08007e19
 8007de4:	08007e01 	.word	0x08007e01
 8007de8:	08007e19 	.word	0x08007e19
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e11 	.word	0x08007e11
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	e098      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e00:	2302      	movs	r3, #2
 8007e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e06:	e094      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e08:	2304      	movs	r3, #4
 8007e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0e:	e090      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e10:	2308      	movs	r3, #8
 8007e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e16:	e08c      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e18:	2310      	movs	r3, #16
 8007e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e1e:	e088      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a5f      	ldr	r2, [pc, #380]	; (8007fa4 <UART_SetConfig+0x2f0>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d125      	bne.n	8007e76 <UART_SetConfig+0x1c2>
 8007e2a:	4b5c      	ldr	r3, [pc, #368]	; (8007f9c <UART_SetConfig+0x2e8>)
 8007e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e34:	2b30      	cmp	r3, #48	; 0x30
 8007e36:	d016      	beq.n	8007e66 <UART_SetConfig+0x1b2>
 8007e38:	2b30      	cmp	r3, #48	; 0x30
 8007e3a:	d818      	bhi.n	8007e6e <UART_SetConfig+0x1ba>
 8007e3c:	2b20      	cmp	r3, #32
 8007e3e:	d00a      	beq.n	8007e56 <UART_SetConfig+0x1a2>
 8007e40:	2b20      	cmp	r3, #32
 8007e42:	d814      	bhi.n	8007e6e <UART_SetConfig+0x1ba>
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <UART_SetConfig+0x19a>
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d008      	beq.n	8007e5e <UART_SetConfig+0x1aa>
 8007e4c:	e00f      	b.n	8007e6e <UART_SetConfig+0x1ba>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e54:	e06d      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e56:	2302      	movs	r3, #2
 8007e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e5c:	e069      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e5e:	2304      	movs	r3, #4
 8007e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e64:	e065      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e66:	2308      	movs	r3, #8
 8007e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e6c:	e061      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e6e:	2310      	movs	r3, #16
 8007e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e74:	e05d      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a4b      	ldr	r2, [pc, #300]	; (8007fa8 <UART_SetConfig+0x2f4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d125      	bne.n	8007ecc <UART_SetConfig+0x218>
 8007e80:	4b46      	ldr	r3, [pc, #280]	; (8007f9c <UART_SetConfig+0x2e8>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e8a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e8c:	d016      	beq.n	8007ebc <UART_SetConfig+0x208>
 8007e8e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e90:	d818      	bhi.n	8007ec4 <UART_SetConfig+0x210>
 8007e92:	2b80      	cmp	r3, #128	; 0x80
 8007e94:	d00a      	beq.n	8007eac <UART_SetConfig+0x1f8>
 8007e96:	2b80      	cmp	r3, #128	; 0x80
 8007e98:	d814      	bhi.n	8007ec4 <UART_SetConfig+0x210>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d002      	beq.n	8007ea4 <UART_SetConfig+0x1f0>
 8007e9e:	2b40      	cmp	r3, #64	; 0x40
 8007ea0:	d008      	beq.n	8007eb4 <UART_SetConfig+0x200>
 8007ea2:	e00f      	b.n	8007ec4 <UART_SetConfig+0x210>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eaa:	e042      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007eac:	2302      	movs	r3, #2
 8007eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb2:	e03e      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007eb4:	2304      	movs	r3, #4
 8007eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eba:	e03a      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007ebc:	2308      	movs	r3, #8
 8007ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ec2:	e036      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007ec4:	2310      	movs	r3, #16
 8007ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eca:	e032      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a30      	ldr	r2, [pc, #192]	; (8007f94 <UART_SetConfig+0x2e0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d12a      	bne.n	8007f2c <UART_SetConfig+0x278>
 8007ed6:	4b31      	ldr	r3, [pc, #196]	; (8007f9c <UART_SetConfig+0x2e8>)
 8007ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007edc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ee4:	d01a      	beq.n	8007f1c <UART_SetConfig+0x268>
 8007ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007eea:	d81b      	bhi.n	8007f24 <UART_SetConfig+0x270>
 8007eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef0:	d00c      	beq.n	8007f0c <UART_SetConfig+0x258>
 8007ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef6:	d815      	bhi.n	8007f24 <UART_SetConfig+0x270>
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d003      	beq.n	8007f04 <UART_SetConfig+0x250>
 8007efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f00:	d008      	beq.n	8007f14 <UART_SetConfig+0x260>
 8007f02:	e00f      	b.n	8007f24 <UART_SetConfig+0x270>
 8007f04:	2300      	movs	r3, #0
 8007f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0a:	e012      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f12:	e00e      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007f14:	2304      	movs	r3, #4
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f1a:	e00a      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f22:	e006      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007f24:	2310      	movs	r3, #16
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f2a:	e002      	b.n	8007f32 <UART_SetConfig+0x27e>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a17      	ldr	r2, [pc, #92]	; (8007f94 <UART_SetConfig+0x2e0>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	f040 80a8 	bne.w	800808e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007f3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f42:	2b08      	cmp	r3, #8
 8007f44:	d834      	bhi.n	8007fb0 <UART_SetConfig+0x2fc>
 8007f46:	a201      	add	r2, pc, #4	; (adr r2, 8007f4c <UART_SetConfig+0x298>)
 8007f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4c:	08007f71 	.word	0x08007f71
 8007f50:	08007fb1 	.word	0x08007fb1
 8007f54:	08007f79 	.word	0x08007f79
 8007f58:	08007fb1 	.word	0x08007fb1
 8007f5c:	08007f7f 	.word	0x08007f7f
 8007f60:	08007fb1 	.word	0x08007fb1
 8007f64:	08007fb1 	.word	0x08007fb1
 8007f68:	08007fb1 	.word	0x08007fb1
 8007f6c:	08007f87 	.word	0x08007f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f70:	f7fd ffce 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 8007f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f76:	e021      	b.n	8007fbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f78:	4b0c      	ldr	r3, [pc, #48]	; (8007fac <UART_SetConfig+0x2f8>)
 8007f7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f7c:	e01e      	b.n	8007fbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f7e:	f7fd ff59 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 8007f82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f84:	e01a      	b.n	8007fbc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f8c:	e016      	b.n	8007fbc <UART_SetConfig+0x308>
 8007f8e:	bf00      	nop
 8007f90:	cfff69f3 	.word	0xcfff69f3
 8007f94:	40008000 	.word	0x40008000
 8007f98:	40013800 	.word	0x40013800
 8007f9c:	40021000 	.word	0x40021000
 8007fa0:	40004400 	.word	0x40004400
 8007fa4:	40004800 	.word	0x40004800
 8007fa8:	40004c00 	.word	0x40004c00
 8007fac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007fba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 812a 	beq.w	8008218 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	4a9e      	ldr	r2, [pc, #632]	; (8008244 <UART_SetConfig+0x590>)
 8007fca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	4613      	mov	r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4413      	add	r3, r2
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d305      	bcc.n	8007ff4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d903      	bls.n	8007ffc <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ffa:	e10d      	b.n	8008218 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	2200      	movs	r2, #0
 8008000:	60bb      	str	r3, [r7, #8]
 8008002:	60fa      	str	r2, [r7, #12]
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	4a8e      	ldr	r2, [pc, #568]	; (8008244 <UART_SetConfig+0x590>)
 800800a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800800e:	b29b      	uxth	r3, r3
 8008010:	2200      	movs	r2, #0
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	e9d7 2300 	ldrd	r2, r3, [r7]
 800801a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800801e:	f7f8 fe3b 	bl	8000c98 <__aeabi_uldivmod>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	4610      	mov	r0, r2
 8008028:	4619      	mov	r1, r3
 800802a:	f04f 0200 	mov.w	r2, #0
 800802e:	f04f 0300 	mov.w	r3, #0
 8008032:	020b      	lsls	r3, r1, #8
 8008034:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008038:	0202      	lsls	r2, r0, #8
 800803a:	6979      	ldr	r1, [r7, #20]
 800803c:	6849      	ldr	r1, [r1, #4]
 800803e:	0849      	lsrs	r1, r1, #1
 8008040:	2000      	movs	r0, #0
 8008042:	460c      	mov	r4, r1
 8008044:	4605      	mov	r5, r0
 8008046:	eb12 0804 	adds.w	r8, r2, r4
 800804a:	eb43 0905 	adc.w	r9, r3, r5
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	469a      	mov	sl, r3
 8008056:	4693      	mov	fp, r2
 8008058:	4652      	mov	r2, sl
 800805a:	465b      	mov	r3, fp
 800805c:	4640      	mov	r0, r8
 800805e:	4649      	mov	r1, r9
 8008060:	f7f8 fe1a 	bl	8000c98 <__aeabi_uldivmod>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4613      	mov	r3, r2
 800806a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800806c:	6a3b      	ldr	r3, [r7, #32]
 800806e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008072:	d308      	bcc.n	8008086 <UART_SetConfig+0x3d2>
 8008074:	6a3b      	ldr	r3, [r7, #32]
 8008076:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800807a:	d204      	bcs.n	8008086 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	6a3a      	ldr	r2, [r7, #32]
 8008082:	60da      	str	r2, [r3, #12]
 8008084:	e0c8      	b.n	8008218 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800808c:	e0c4      	b.n	8008218 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008096:	d167      	bne.n	8008168 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8008098:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800809c:	2b08      	cmp	r3, #8
 800809e:	d828      	bhi.n	80080f2 <UART_SetConfig+0x43e>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <UART_SetConfig+0x3f4>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080cd 	.word	0x080080cd
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080dd 	.word	0x080080dd
 80080b4:	080080f3 	.word	0x080080f3
 80080b8:	080080e3 	.word	0x080080e3
 80080bc:	080080f3 	.word	0x080080f3
 80080c0:	080080f3 	.word	0x080080f3
 80080c4:	080080f3 	.word	0x080080f3
 80080c8:	080080eb 	.word	0x080080eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80080cc:	f7fd ff20 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80080d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080d2:	e014      	b.n	80080fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80080d4:	f7fd ff32 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 80080d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080da:	e010      	b.n	80080fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80080dc:	4b5a      	ldr	r3, [pc, #360]	; (8008248 <UART_SetConfig+0x594>)
 80080de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080e0:	e00d      	b.n	80080fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80080e2:	f7fd fea7 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 80080e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80080e8:	e009      	b.n	80080fe <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080f0:	e005      	b.n	80080fe <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080f6:	2301      	movs	r3, #1
 80080f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	2b00      	cmp	r3, #0
 8008102:	f000 8089 	beq.w	8008218 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810a:	4a4e      	ldr	r2, [pc, #312]	; (8008244 <UART_SetConfig+0x590>)
 800810c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008110:	461a      	mov	r2, r3
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008114:	fbb3 f3f2 	udiv	r3, r3, r2
 8008118:	005a      	lsls	r2, r3, #1
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	441a      	add	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	fbb2 f3f3 	udiv	r3, r2, r3
 800812a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	2b0f      	cmp	r3, #15
 8008130:	d916      	bls.n	8008160 <UART_SetConfig+0x4ac>
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008138:	d212      	bcs.n	8008160 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	b29b      	uxth	r3, r3
 800813e:	f023 030f 	bic.w	r3, r3, #15
 8008142:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	085b      	lsrs	r3, r3, #1
 8008148:	b29b      	uxth	r3, r3
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	b29a      	uxth	r2, r3
 8008150:	8bfb      	ldrh	r3, [r7, #30]
 8008152:	4313      	orrs	r3, r2
 8008154:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	8bfa      	ldrh	r2, [r7, #30]
 800815c:	60da      	str	r2, [r3, #12]
 800815e:	e05b      	b.n	8008218 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008166:	e057      	b.n	8008218 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800816c:	2b08      	cmp	r3, #8
 800816e:	d828      	bhi.n	80081c2 <UART_SetConfig+0x50e>
 8008170:	a201      	add	r2, pc, #4	; (adr r2, 8008178 <UART_SetConfig+0x4c4>)
 8008172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008176:	bf00      	nop
 8008178:	0800819d 	.word	0x0800819d
 800817c:	080081a5 	.word	0x080081a5
 8008180:	080081ad 	.word	0x080081ad
 8008184:	080081c3 	.word	0x080081c3
 8008188:	080081b3 	.word	0x080081b3
 800818c:	080081c3 	.word	0x080081c3
 8008190:	080081c3 	.word	0x080081c3
 8008194:	080081c3 	.word	0x080081c3
 8008198:	080081bb 	.word	0x080081bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800819c:	f7fd feb8 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80081a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081a2:	e014      	b.n	80081ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081a4:	f7fd feca 	bl	8005f3c <HAL_RCC_GetPCLK2Freq>
 80081a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081aa:	e010      	b.n	80081ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ac:	4b26      	ldr	r3, [pc, #152]	; (8008248 <UART_SetConfig+0x594>)
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081b0:	e00d      	b.n	80081ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081b2:	f7fd fe3f 	bl	8005e34 <HAL_RCC_GetSysClockFreq>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081b8:	e009      	b.n	80081ce <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081c0:	e005      	b.n	80081ce <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081c6:	2301      	movs	r3, #1
 80081c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081cc:	bf00      	nop
    }

    if (pclk != 0U)
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d021      	beq.n	8008218 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	4a1a      	ldr	r2, [pc, #104]	; (8008244 <UART_SetConfig+0x590>)
 80081da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081de:	461a      	mov	r2, r3
 80081e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	441a      	add	r2, r3
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	685b      	ldr	r3, [r3, #4]
 80081f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f8:	6a3b      	ldr	r3, [r7, #32]
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	d909      	bls.n	8008212 <UART_SetConfig+0x55e>
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008204:	d205      	bcs.n	8008212 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008206:	6a3b      	ldr	r3, [r7, #32]
 8008208:	b29a      	uxth	r2, r3
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	60da      	str	r2, [r3, #12]
 8008210:	e002      	b.n	8008218 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	2201      	movs	r2, #1
 800821c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2201      	movs	r2, #1
 8008224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2200      	movs	r2, #0
 800822c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2200      	movs	r2, #0
 8008232:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008234:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008238:	4618      	mov	r0, r3
 800823a:	3730      	adds	r7, #48	; 0x30
 800823c:	46bd      	mov	sp, r7
 800823e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008242:	bf00      	nop
 8008244:	0800ed50 	.word	0x0800ed50
 8008248:	00f42400 	.word	0x00f42400

0800824c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008258:	f003 0301 	and.w	r3, r3, #1
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800827a:	f003 0302 	and.w	r3, r3, #2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	430a      	orrs	r2, r1
 8008296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f003 0304 	and.w	r3, r3, #4
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f003 0308 	and.w	r3, r3, #8
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0310 	and.w	r3, r3, #16
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	f003 0320 	and.w	r3, r3, #32
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01a      	beq.n	8008362 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800834a:	d10a      	bne.n	8008362 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	605a      	str	r2, [r3, #4]
  }
}
 8008384:	bf00      	nop
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af02      	add	r7, sp, #8
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083a0:	f7f9 febc 	bl	800211c <HAL_GetTick>
 80083a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b08      	cmp	r3, #8
 80083b2:	d10e      	bne.n	80083d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2200      	movs	r2, #0
 80083be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f82f 	bl	8008426 <UART_WaitOnFlagUntilTimeout>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e025      	b.n	800841e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 0304 	and.w	r3, r3, #4
 80083dc:	2b04      	cmp	r3, #4
 80083de:	d10e      	bne.n	80083fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f819 	bl	8008426 <UART_WaitOnFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e00f      	b.n	800841e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2220      	movs	r2, #32
 8008402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2220      	movs	r2, #32
 800840a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b09c      	sub	sp, #112	; 0x70
 800842a:	af00      	add	r7, sp, #0
 800842c:	60f8      	str	r0, [r7, #12]
 800842e:	60b9      	str	r1, [r7, #8]
 8008430:	603b      	str	r3, [r7, #0]
 8008432:	4613      	mov	r3, r2
 8008434:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008436:	e0a9      	b.n	800858c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008438:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800843a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800843e:	f000 80a5 	beq.w	800858c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008442:	f7f9 fe6b 	bl	800211c <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800844e:	429a      	cmp	r2, r3
 8008450:	d302      	bcc.n	8008458 <UART_WaitOnFlagUntilTimeout+0x32>
 8008452:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008454:	2b00      	cmp	r3, #0
 8008456:	d140      	bne.n	80084da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800845e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008460:	e853 3f00 	ldrex	r3, [r3]
 8008464:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008468:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800846c:	667b      	str	r3, [r7, #100]	; 0x64
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	461a      	mov	r2, r3
 8008474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008478:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800847c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800847e:	e841 2300 	strex	r3, r2, [r1]
 8008482:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1e6      	bne.n	8008458 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	3308      	adds	r3, #8
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	e853 3f00 	ldrex	r3, [r3]
 8008498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800849c:	f023 0301 	bic.w	r3, r3, #1
 80084a0:	663b      	str	r3, [r7, #96]	; 0x60
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3308      	adds	r3, #8
 80084a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80084ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b2:	e841 2300 	strex	r3, r2, [r1]
 80084b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1e5      	bne.n	800848a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e069      	b.n	80085ae <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0304 	and.w	r3, r3, #4
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d051      	beq.n	800858c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	69db      	ldr	r3, [r3, #28]
 80084ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f6:	d149      	bne.n	800858c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008500:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
 8008522:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	3308      	adds	r3, #8
 800853a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	e853 3f00 	ldrex	r3, [r3]
 8008542:	613b      	str	r3, [r7, #16]
   return(result);
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	f023 0301 	bic.w	r3, r3, #1
 800854a:	66bb      	str	r3, [r7, #104]	; 0x68
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008554:	623a      	str	r2, [r7, #32]
 8008556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008558:	69f9      	ldr	r1, [r7, #28]
 800855a:	6a3a      	ldr	r2, [r7, #32]
 800855c:	e841 2300 	strex	r3, r2, [r1]
 8008560:	61bb      	str	r3, [r7, #24]
   return(result);
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1e5      	bne.n	8008534 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2220      	movs	r2, #32
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2220      	movs	r2, #32
 8008574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2220      	movs	r2, #32
 800857c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008588:	2303      	movs	r3, #3
 800858a:	e010      	b.n	80085ae <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69da      	ldr	r2, [r3, #28]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	4013      	ands	r3, r2
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	429a      	cmp	r2, r3
 800859a:	bf0c      	ite	eq
 800859c:	2301      	moveq	r3, #1
 800859e:	2300      	movne	r3, #0
 80085a0:	b2db      	uxtb	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	79fb      	ldrb	r3, [r7, #7]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	f43f af46 	beq.w	8008438 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3770      	adds	r7, #112	; 0x70
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085b6:	b480      	push	{r7}
 80085b8:	b085      	sub	sp, #20
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d101      	bne.n	80085cc <HAL_UARTEx_DisableFifoMode+0x16>
 80085c8:	2302      	movs	r3, #2
 80085ca:	e027      	b.n	800861c <HAL_UARTEx_DisableFifoMode+0x66>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2224      	movs	r2, #36	; 0x24
 80085d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0201 	bic.w	r2, r2, #1
 80085f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80085fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2220      	movs	r2, #32
 800860e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
 8008630:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800863c:	2302      	movs	r3, #2
 800863e:	e02d      	b.n	800869c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2224      	movs	r2, #36	; 0x24
 800864c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0201 	bic.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f84f 	bl	8008720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d101      	bne.n	80086bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086b8:	2302      	movs	r3, #2
 80086ba:	e02d      	b.n	8008718 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2201      	movs	r2, #1
 80086c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2224      	movs	r2, #36	; 0x24
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f022 0201 	bic.w	r2, r2, #1
 80086e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	683a      	ldr	r2, [r7, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f811 	bl	8008720 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2220      	movs	r2, #32
 800870a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872c:	2b00      	cmp	r3, #0
 800872e:	d108      	bne.n	8008742 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008740:	e031      	b.n	80087a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008742:	2308      	movs	r3, #8
 8008744:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008746:	2308      	movs	r3, #8
 8008748:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	0e5b      	lsrs	r3, r3, #25
 8008752:	b2db      	uxtb	r3, r3
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	0f5b      	lsrs	r3, r3, #29
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800876a:	7bbb      	ldrb	r3, [r7, #14]
 800876c:	7b3a      	ldrb	r2, [r7, #12]
 800876e:	4911      	ldr	r1, [pc, #68]	; (80087b4 <UARTEx_SetNbDataToProcess+0x94>)
 8008770:	5c8a      	ldrb	r2, [r1, r2]
 8008772:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008776:	7b3a      	ldrb	r2, [r7, #12]
 8008778:	490f      	ldr	r1, [pc, #60]	; (80087b8 <UARTEx_SetNbDataToProcess+0x98>)
 800877a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800877c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008780:	b29a      	uxth	r2, r3
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008788:	7bfb      	ldrb	r3, [r7, #15]
 800878a:	7b7a      	ldrb	r2, [r7, #13]
 800878c:	4909      	ldr	r1, [pc, #36]	; (80087b4 <UARTEx_SetNbDataToProcess+0x94>)
 800878e:	5c8a      	ldrb	r2, [r1, r2]
 8008790:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008794:	7b7a      	ldrb	r2, [r7, #13]
 8008796:	4908      	ldr	r1, [pc, #32]	; (80087b8 <UARTEx_SetNbDataToProcess+0x98>)
 8008798:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800879a:	fb93 f3f2 	sdiv	r3, r3, r2
 800879e:	b29a      	uxth	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80087a6:	bf00      	nop
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	0800ed68 	.word	0x0800ed68
 80087b8:	0800ed70 	.word	0x0800ed70

080087bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087cc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80087d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087f2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80087f6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	b29b      	uxth	r3, r3
 8008804:	43db      	mvns	r3, r3
 8008806:	b29b      	uxth	r3, r3
 8008808:	4013      	ands	r3, r2
 800880a:	b29a      	uxth	r2, r3
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	3714      	adds	r7, #20
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008820:	b084      	sub	sp, #16
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	f107 0014 	add.w	r0, r7, #20
 800882e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	b004      	add	sp, #16
 8008860:	4770      	bx	lr
	...

08008864 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008864:	b480      	push	{r7}
 8008866:	b09d      	sub	sp, #116	; 0x74
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800886e:	2300      	movs	r3, #0
 8008870:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	4413      	add	r3, r2
 800887e:	881b      	ldrh	r3, [r3, #0]
 8008880:	b29b      	uxth	r3, r3
 8008882:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800888a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	78db      	ldrb	r3, [r3, #3]
 8008892:	2b03      	cmp	r3, #3
 8008894:	d81f      	bhi.n	80088d6 <USB_ActivateEndpoint+0x72>
 8008896:	a201      	add	r2, pc, #4	; (adr r2, 800889c <USB_ActivateEndpoint+0x38>)
 8008898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800889c:	080088ad 	.word	0x080088ad
 80088a0:	080088c9 	.word	0x080088c9
 80088a4:	080088df 	.word	0x080088df
 80088a8:	080088bb 	.word	0x080088bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80088ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80088b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80088b8:	e012      	b.n	80088e0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80088ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088be:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80088c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80088c6:	e00b      	b.n	80088e0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80088c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80088d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80088d4:	e004      	b.n	80088e0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80088dc:	e000      	b.n	80088e0 <USB_ActivateEndpoint+0x7c>
      break;
 80088de:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	009b      	lsls	r3, r3, #2
 80088e8:	441a      	add	r2, r3
 80088ea:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80088ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088fe:	b29b      	uxth	r3, r3
 8008900:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	4413      	add	r3, r2
 800890c:	881b      	ldrh	r3, [r3, #0]
 800890e:	b29b      	uxth	r3, r3
 8008910:	b21b      	sxth	r3, r3
 8008912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800891a:	b21a      	sxth	r2, r3
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	b21b      	sxth	r3, r3
 8008922:	4313      	orrs	r3, r2
 8008924:	b21b      	sxth	r3, r3
 8008926:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	441a      	add	r2, r3
 8008934:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008938:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800893c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008940:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008948:	b29b      	uxth	r3, r3
 800894a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	7b1b      	ldrb	r3, [r3, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f040 8149 	bne.w	8008be8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	785b      	ldrb	r3, [r3, #1]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8084 	beq.w	8008a68 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800896a:	b29b      	uxth	r3, r3
 800896c:	461a      	mov	r2, r3
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	4413      	add	r3, r2
 8008972:	61bb      	str	r3, [r7, #24]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	00da      	lsls	r2, r3, #3
 800897a:	69bb      	ldr	r3, [r7, #24]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008982:	617b      	str	r3, [r7, #20]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	88db      	ldrh	r3, [r3, #6]
 8008988:	085b      	lsrs	r3, r3, #1
 800898a:	b29b      	uxth	r3, r3
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	b29a      	uxth	r2, r3
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	4413      	add	r3, r2
 800899e:	881b      	ldrh	r3, [r3, #0]
 80089a0:	827b      	strh	r3, [r7, #18]
 80089a2:	8a7b      	ldrh	r3, [r7, #18]
 80089a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01b      	beq.n	80089e4 <USB_ActivateEndpoint+0x180>
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089c2:	823b      	strh	r3, [r7, #16]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	441a      	add	r2, r3
 80089ce:	8a3b      	ldrh	r3, [r7, #16]
 80089d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	78db      	ldrb	r3, [r3, #3]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d020      	beq.n	8008a2e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a02:	81bb      	strh	r3, [r7, #12]
 8008a04:	89bb      	ldrh	r3, [r7, #12]
 8008a06:	f083 0320 	eor.w	r3, r3, #32
 8008a0a:	81bb      	strh	r3, [r7, #12]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	89bb      	ldrh	r3, [r7, #12]
 8008a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8013      	strh	r3, [r2, #0]
 8008a2c:	e2a6      	b.n	8008f7c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4413      	add	r3, r2
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a44:	81fb      	strh	r3, [r7, #14]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	441a      	add	r2, r3
 8008a50:	89fb      	ldrh	r3, [r7, #14]
 8008a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	8013      	strh	r3, [r2, #0]
 8008a66:	e289      	b.n	8008f7c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	461a      	mov	r2, r3
 8008a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a78:	4413      	add	r3, r2
 8008a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	00da      	lsls	r2, r3, #3
 8008a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a84:	4413      	add	r3, r2
 8008a86:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	88db      	ldrh	r3, [r3, #6]
 8008a90:	085b      	lsrs	r3, r3, #1
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	005b      	lsls	r3, r3, #1
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008aa6:	b29b      	uxth	r3, r3
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	4413      	add	r3, r2
 8008aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	781b      	ldrb	r3, [r3, #0]
 8008ab4:	00da      	lsls	r2, r3, #3
 8008ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab8:	4413      	add	r3, r2
 8008aba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b3e      	cmp	r3, #62	; 0x3e
 8008ac6:	d918      	bls.n	8008afa <USB_ActivateEndpoint+0x296>
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	095b      	lsrs	r3, r3, #5
 8008ace:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f003 031f 	and.w	r3, r3, #31
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d102      	bne.n	8008ae2 <USB_ActivateEndpoint+0x27e>
 8008adc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ade:	3b01      	subs	r3, #1
 8008ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ae4:	b29b      	uxth	r3, r3
 8008ae6:	029b      	lsls	r3, r3, #10
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	801a      	strh	r2, [r3, #0]
 8008af8:	e029      	b.n	8008b4e <USB_ActivateEndpoint+0x2ea>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d112      	bne.n	8008b28 <USB_ActivateEndpoint+0x2c4>
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	801a      	strh	r2, [r3, #0]
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b24:	801a      	strh	r2, [r3, #0]
 8008b26:	e012      	b.n	8008b4e <USB_ActivateEndpoint+0x2ea>
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	691b      	ldr	r3, [r3, #16]
 8008b2c:	085b      	lsrs	r3, r3, #1
 8008b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	f003 0301 	and.w	r3, r3, #1
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <USB_ActivateEndpoint+0x2de>
 8008b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b3e:	3301      	adds	r3, #1
 8008b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	029b      	lsls	r3, r3, #10
 8008b48:	b29a      	uxth	r2, r3
 8008b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	881b      	ldrh	r3, [r3, #0]
 8008b5a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d01b      	beq.n	8008b9e <USB_ActivateEndpoint+0x33a>
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	009b      	lsls	r3, r3, #2
 8008b6e:	4413      	add	r3, r2
 8008b70:	881b      	ldrh	r3, [r3, #0]
 8008b72:	b29b      	uxth	r3, r3
 8008b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b7c:	843b      	strh	r3, [r7, #32]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	441a      	add	r2, r3
 8008b88:	8c3b      	ldrh	r3, [r7, #32]
 8008b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	b29b      	uxth	r3, r3
 8008bac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb4:	83fb      	strh	r3, [r7, #30]
 8008bb6:	8bfb      	ldrh	r3, [r7, #30]
 8008bb8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008bbc:	83fb      	strh	r3, [r7, #30]
 8008bbe:	8bfb      	ldrh	r3, [r7, #30]
 8008bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008bc4:	83fb      	strh	r3, [r7, #30]
 8008bc6:	687a      	ldr	r2, [r7, #4]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	441a      	add	r2, r3
 8008bd0:	8bfb      	ldrh	r3, [r7, #30]
 8008bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	8013      	strh	r3, [r2, #0]
 8008be6:	e1c9      	b.n	8008f7c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	78db      	ldrb	r3, [r3, #3]
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d11e      	bne.n	8008c2e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	881b      	ldrh	r3, [r3, #0]
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c06:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	441a      	add	r2, r3
 8008c14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008c18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c20:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	8013      	strh	r3, [r2, #0]
 8008c2c:	e01d      	b.n	8008c6a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	881b      	ldrh	r3, [r3, #0]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	441a      	add	r2, r3
 8008c52:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008c56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	461a      	mov	r2, r3
 8008c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c7a:	4413      	add	r3, r2
 8008c7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	00da      	lsls	r2, r3, #3
 8008c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	891b      	ldrh	r3, [r3, #8]
 8008c92:	085b      	lsrs	r3, r3, #1
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	005b      	lsls	r3, r3, #1
 8008c98:	b29a      	uxth	r2, r3
 8008c9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c9c:	801a      	strh	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	657b      	str	r3, [r7, #84]	; 0x54
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	461a      	mov	r2, r3
 8008cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cae:	4413      	add	r3, r2
 8008cb0:	657b      	str	r3, [r7, #84]	; 0x54
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	781b      	ldrb	r3, [r3, #0]
 8008cb6:	00da      	lsls	r2, r3, #3
 8008cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cba:	4413      	add	r3, r2
 8008cbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008cc0:	653b      	str	r3, [r7, #80]	; 0x50
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	895b      	ldrh	r3, [r3, #10]
 8008cc6:	085b      	lsrs	r3, r3, #1
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	785b      	ldrb	r3, [r3, #1]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f040 8093 	bne.w	8008e02 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	881b      	ldrh	r3, [r3, #0]
 8008ce8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008cec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d01b      	beq.n	8008d30 <USB_ActivateEndpoint+0x4cc>
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008d10:	687a      	ldr	r2, [r7, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	441a      	add	r2, r3
 8008d1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008d1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008d3e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01b      	beq.n	8008d80 <USB_ActivateEndpoint+0x51c>
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	4413      	add	r3, r2
 8008d52:	881b      	ldrh	r3, [r3, #0]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5e:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	781b      	ldrb	r3, [r3, #0]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	441a      	add	r2, r3
 8008d6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d78:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	781b      	ldrb	r3, [r3, #0]
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4413      	add	r3, r2
 8008d8a:	881b      	ldrh	r3, [r3, #0]
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d96:	873b      	strh	r3, [r7, #56]	; 0x38
 8008d98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008d9a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008d9e:	873b      	strh	r3, [r7, #56]	; 0x38
 8008da0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008da2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008da6:	873b      	strh	r3, [r7, #56]	; 0x38
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781b      	ldrb	r3, [r3, #0]
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	441a      	add	r2, r3
 8008db2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008db4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dde:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	8013      	strh	r3, [r2, #0]
 8008e00:	e0bc      	b.n	8008f7c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008e12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01d      	beq.n	8008e5a <USB_ActivateEndpoint+0x5f6>
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4413      	add	r3, r2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	441a      	add	r2, r3
 8008e42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008e46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	4413      	add	r3, r2
 8008e64:	881b      	ldrh	r3, [r3, #0]
 8008e66:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008e6a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d01d      	beq.n	8008eb2 <USB_ActivateEndpoint+0x64e>
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e8c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	441a      	add	r2, r3
 8008e9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ea6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	78db      	ldrb	r3, [r3, #3]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d024      	beq.n	8008f04 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008ed4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ed8:	f083 0320 	eor.w	r3, r3, #32
 8008edc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	441a      	add	r2, r3
 8008eea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	8013      	strh	r3, [r2, #0]
 8008f02:	e01d      	b.n	8008f40 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	441a      	add	r2, r3
 8008f28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008f2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	781b      	ldrb	r3, [r3, #0]
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	881b      	ldrh	r3, [r3, #0]
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f56:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	781b      	ldrb	r3, [r3, #0]
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	441a      	add	r2, r3
 8008f64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008f68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008f7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3774      	adds	r7, #116	; 0x74
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b08d      	sub	sp, #52	; 0x34
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	7b1b      	ldrb	r3, [r3, #12]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f040 808e 	bne.w	80090bc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	785b      	ldrb	r3, [r3, #1]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d044      	beq.n	8009032 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	781b      	ldrb	r3, [r3, #0]
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	81bb      	strh	r3, [r7, #12]
 8008fb6:	89bb      	ldrh	r3, [r7, #12]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d01b      	beq.n	8008ff8 <USB_DeactivateEndpoint+0x6c>
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd6:	817b      	strh	r3, [r7, #10]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	441a      	add	r2, r3
 8008fe2:	897b      	ldrh	r3, [r7, #10]
 8008fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	781b      	ldrb	r3, [r3, #0]
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	4413      	add	r3, r2
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800900a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900e:	813b      	strh	r3, [r7, #8]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	441a      	add	r2, r3
 800901a:	893b      	ldrh	r3, [r7, #8]
 800901c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800902c:	b29b      	uxth	r3, r3
 800902e:	8013      	strh	r3, [r2, #0]
 8009030:	e192      	b.n	8009358 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	881b      	ldrh	r3, [r3, #0]
 800903e:	827b      	strh	r3, [r7, #18]
 8009040:	8a7b      	ldrh	r3, [r7, #18]
 8009042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01b      	beq.n	8009082 <USB_DeactivateEndpoint+0xf6>
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29b      	uxth	r3, r3
 8009058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800905c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009060:	823b      	strh	r3, [r7, #16]
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	441a      	add	r2, r3
 800906c:	8a3b      	ldrh	r3, [r7, #16]
 800906e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009072:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800907a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907e:	b29b      	uxth	r3, r3
 8009080:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	881b      	ldrh	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009098:	81fb      	strh	r3, [r7, #14]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	441a      	add	r2, r3
 80090a4:	89fb      	ldrh	r3, [r7, #14]
 80090a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	8013      	strh	r3, [r2, #0]
 80090ba:	e14d      	b.n	8009358 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	785b      	ldrb	r3, [r3, #1]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f040 80a5 	bne.w	8009210 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	843b      	strh	r3, [r7, #32]
 80090d4:	8c3b      	ldrh	r3, [r7, #32]
 80090d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d01b      	beq.n	8009116 <USB_DeactivateEndpoint+0x18a>
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f4:	83fb      	strh	r3, [r7, #30]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	441a      	add	r2, r3
 8009100:	8bfb      	ldrh	r3, [r7, #30]
 8009102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800910a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800910e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009112:	b29b      	uxth	r3, r3
 8009114:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4413      	add	r3, r2
 8009120:	881b      	ldrh	r3, [r3, #0]
 8009122:	83bb      	strh	r3, [r7, #28]
 8009124:	8bbb      	ldrh	r3, [r7, #28]
 8009126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912a:	2b00      	cmp	r3, #0
 800912c:	d01b      	beq.n	8009166 <USB_DeactivateEndpoint+0x1da>
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009144:	837b      	strh	r3, [r7, #26]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	441a      	add	r2, r3
 8009150:	8b7b      	ldrh	r3, [r7, #26]
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800915e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917c:	833b      	strh	r3, [r7, #24]
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	441a      	add	r2, r3
 8009188:	8b3b      	ldrh	r3, [r7, #24]
 800918a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800918e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009196:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800919a:	b29b      	uxth	r3, r3
 800919c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	781b      	ldrb	r3, [r3, #0]
 80091a4:	009b      	lsls	r3, r3, #2
 80091a6:	4413      	add	r3, r2
 80091a8:	881b      	ldrh	r3, [r3, #0]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091b4:	82fb      	strh	r3, [r7, #22]
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	441a      	add	r2, r3
 80091c0:	8afb      	ldrh	r3, [r7, #22]
 80091c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	4413      	add	r3, r2
 80091e0:	881b      	ldrh	r3, [r3, #0]
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ec:	82bb      	strh	r3, [r7, #20]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	441a      	add	r2, r3
 80091f8:	8abb      	ldrh	r3, [r7, #20]
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]
 800920e:	e0a3      	b.n	8009358 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800921e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d01b      	beq.n	8009260 <USB_DeactivateEndpoint+0x2d4>
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	b29b      	uxth	r3, r3
 8009236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800923e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	441a      	add	r2, r3
 800924a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800924c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009250:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009254:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800925c:	b29b      	uxth	r3, r3
 800925e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009260:	687a      	ldr	r2, [r7, #4]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	881b      	ldrh	r3, [r3, #0]
 800926c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800926e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01b      	beq.n	80092b0 <USB_DeactivateEndpoint+0x324>
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	b29b      	uxth	r3, r3
 8009286:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800928a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800928e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	441a      	add	r2, r3
 800929a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800929c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	4413      	add	r3, r2
 80092ba:	881b      	ldrh	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	441a      	add	r2, r3
 80092d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	4413      	add	r3, r2
 80092f2:	881b      	ldrh	r3, [r3, #0]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092fe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	441a      	add	r2, r3
 800930a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800930c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800931c:	b29b      	uxth	r3, r3
 800931e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29b      	uxth	r3, r3
 800932e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009336:	847b      	strh	r3, [r7, #34]	; 0x22
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	441a      	add	r2, r3
 8009342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009354:	b29b      	uxth	r3, r3
 8009356:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3734      	adds	r7, #52	; 0x34
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr

08009366 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b0c2      	sub	sp, #264	; 0x108
 800936a:	af00      	add	r7, sp, #0
 800936c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009370:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009374:	6018      	str	r0, [r3, #0]
 8009376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800937a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	785b      	ldrb	r3, [r3, #1]
 800938c:	2b01      	cmp	r3, #1
 800938e:	f040 867b 	bne.w	800a088 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	699a      	ldr	r2, [r3, #24]
 800939e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d908      	bls.n	80093c0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80093ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	691b      	ldr	r3, [r3, #16]
 80093ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80093be:	e007      	b.n	80093d0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80093c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	699b      	ldr	r3, [r3, #24]
 80093cc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	7b1b      	ldrb	r3, [r3, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d13a      	bne.n	8009456 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6959      	ldr	r1, [r3, #20]
 80093ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	88da      	ldrh	r2, [r3, #6]
 80093f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009402:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009406:	6800      	ldr	r0, [r0, #0]
 8009408:	f001 fc1d 	bl	800ac46 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800940c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	613b      	str	r3, [r7, #16]
 8009418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009426:	b29b      	uxth	r3, r3
 8009428:	461a      	mov	r2, r3
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	4413      	add	r3, r2
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	00da      	lsls	r2, r3, #3
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4413      	add	r3, r2
 8009442:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009446:	60fb      	str	r3, [r7, #12]
 8009448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	f000 bde3 	b.w	800a01c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	78db      	ldrb	r3, [r3, #3]
 8009462:	2b02      	cmp	r3, #2
 8009464:	f040 843a 	bne.w	8009cdc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6a1a      	ldr	r2, [r3, #32]
 8009474:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009478:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	691b      	ldr	r3, [r3, #16]
 8009480:	429a      	cmp	r2, r3
 8009482:	f240 83b7 	bls.w	8009bf4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80094b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094b8:	681a      	ldr	r2, [r3, #0]
 80094ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	441a      	add	r2, r3
 80094ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80094ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80094da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094de:	b29b      	uxth	r3, r3
 80094e0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80094e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6a1a      	ldr	r2, [r3, #32]
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094f2:	1ad2      	subs	r2, r2, r3
 80094f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009504:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	b29b      	uxth	r3, r3
 800951e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009522:	2b00      	cmp	r3, #0
 8009524:	f000 81b3 	beq.w	800988e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800952c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	633b      	str	r3, [r7, #48]	; 0x30
 8009534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	785b      	ldrb	r3, [r3, #1]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d16d      	bne.n	8009620 <USB_EPStartXfer+0x2ba>
 8009544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009554:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800955e:	b29b      	uxth	r3, r3
 8009560:	461a      	mov	r2, r3
 8009562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009564:	4413      	add	r3, r2
 8009566:	62bb      	str	r3, [r7, #40]	; 0x28
 8009568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	00da      	lsls	r2, r3, #3
 8009576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009578:	4413      	add	r3, r2
 800957a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
 8009580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009584:	2b3e      	cmp	r3, #62	; 0x3e
 8009586:	d91c      	bls.n	80095c2 <USB_EPStartXfer+0x25c>
 8009588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800958c:	095b      	lsrs	r3, r3, #5
 800958e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009596:	f003 031f 	and.w	r3, r3, #31
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <USB_EPStartXfer+0x242>
 800959e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095a2:	3b01      	subs	r3, #1
 80095a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	029b      	lsls	r3, r3, #10
 80095b0:	b29b      	uxth	r3, r3
 80095b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	801a      	strh	r2, [r3, #0]
 80095c0:	e053      	b.n	800966a <USB_EPStartXfer+0x304>
 80095c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d112      	bne.n	80095f0 <USB_EPStartXfer+0x28a>
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	881b      	ldrh	r3, [r3, #0]
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	801a      	strh	r2, [r3, #0]
 80095da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095dc:	881b      	ldrh	r3, [r3, #0]
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	801a      	strh	r2, [r3, #0]
 80095ee:	e03c      	b.n	800966a <USB_EPStartXfer+0x304>
 80095f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f4:	085b      	lsrs	r3, r3, #1
 80095f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d004      	beq.n	8009610 <USB_EPStartXfer+0x2aa>
 8009606:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800960a:	3301      	adds	r3, #1
 800960c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009610:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009614:	b29b      	uxth	r3, r3
 8009616:	029b      	lsls	r3, r3, #10
 8009618:	b29a      	uxth	r2, r3
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	801a      	strh	r2, [r3, #0]
 800961e:	e024      	b.n	800966a <USB_EPStartXfer+0x304>
 8009620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	785b      	ldrb	r3, [r3, #1]
 800962c:	2b01      	cmp	r3, #1
 800962e:	d11c      	bne.n	800966a <USB_EPStartXfer+0x304>
 8009630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800963e:	b29b      	uxth	r3, r3
 8009640:	461a      	mov	r2, r3
 8009642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009644:	4413      	add	r3, r2
 8009646:	633b      	str	r3, [r7, #48]	; 0x30
 8009648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	00da      	lsls	r2, r3, #3
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	4413      	add	r3, r2
 800965a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800965e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009664:	b29a      	uxth	r2, r3
 8009666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800966a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800966e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	895b      	ldrh	r3, [r3, #10]
 8009676:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800967a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800967e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6959      	ldr	r1, [r3, #20]
 8009686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968a:	b29b      	uxth	r3, r3
 800968c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009690:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009694:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009698:	6800      	ldr	r0, [r0, #0]
 800969a:	f001 fad4 	bl	800ac46 <USB_WritePMA>
            ep->xfer_buff += len;
 800969e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	695a      	ldr	r2, [r3, #20]
 80096aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ae:	441a      	add	r2, r3
 80096b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80096bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6a1a      	ldr	r2, [r3, #32]
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d90f      	bls.n	80096f8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80096d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6a1a      	ldr	r2, [r3, #32]
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096e8:	1ad2      	subs	r2, r2, r3
 80096ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	621a      	str	r2, [r3, #32]
 80096f6:	e00e      	b.n	8009716 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80096f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6a1b      	ldr	r3, [r3, #32]
 8009704:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	2200      	movs	r2, #0
 8009714:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d16d      	bne.n	8009802 <USB_EPStartXfer+0x49c>
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	61bb      	str	r3, [r7, #24]
 8009732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009740:	b29b      	uxth	r3, r3
 8009742:	461a      	mov	r2, r3
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	4413      	add	r3, r2
 8009748:	61bb      	str	r3, [r7, #24]
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	00da      	lsls	r2, r3, #3
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	4413      	add	r3, r2
 800975c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009760:	617b      	str	r3, [r7, #20]
 8009762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009766:	2b3e      	cmp	r3, #62	; 0x3e
 8009768:	d91c      	bls.n	80097a4 <USB_EPStartXfer+0x43e>
 800976a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800976e:	095b      	lsrs	r3, r3, #5
 8009770:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009778:	f003 031f 	and.w	r3, r3, #31
 800977c:	2b00      	cmp	r3, #0
 800977e:	d104      	bne.n	800978a <USB_EPStartXfer+0x424>
 8009780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009784:	3b01      	subs	r3, #1
 8009786:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800978a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800978e:	b29b      	uxth	r3, r3
 8009790:	029b      	lsls	r3, r3, #10
 8009792:	b29b      	uxth	r3, r3
 8009794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800979c:	b29a      	uxth	r2, r3
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	801a      	strh	r2, [r3, #0]
 80097a2:	e059      	b.n	8009858 <USB_EPStartXfer+0x4f2>
 80097a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d112      	bne.n	80097d2 <USB_EPStartXfer+0x46c>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	881b      	ldrh	r3, [r3, #0]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	801a      	strh	r2, [r3, #0]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	881b      	ldrh	r3, [r3, #0]
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	801a      	strh	r2, [r3, #0]
 80097d0:	e042      	b.n	8009858 <USB_EPStartXfer+0x4f2>
 80097d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d6:	085b      	lsrs	r3, r3, #1
 80097d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e0:	f003 0301 	and.w	r3, r3, #1
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d004      	beq.n	80097f2 <USB_EPStartXfer+0x48c>
 80097e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097ec:	3301      	adds	r3, #1
 80097ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	029b      	lsls	r3, r3, #10
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	801a      	strh	r2, [r3, #0]
 8009800:	e02a      	b.n	8009858 <USB_EPStartXfer+0x4f2>
 8009802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d122      	bne.n	8009858 <USB_EPStartXfer+0x4f2>
 8009812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	623b      	str	r3, [r7, #32]
 800981e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800982c:	b29b      	uxth	r3, r3
 800982e:	461a      	mov	r2, r3
 8009830:	6a3b      	ldr	r3, [r7, #32]
 8009832:	4413      	add	r3, r2
 8009834:	623b      	str	r3, [r7, #32]
 8009836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	00da      	lsls	r2, r3, #3
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	4413      	add	r3, r2
 8009848:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800984c:	61fb      	str	r3, [r7, #28]
 800984e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009852:	b29a      	uxth	r2, r3
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800985c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	891b      	ldrh	r3, [r3, #8]
 8009864:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	6959      	ldr	r1, [r3, #20]
 8009874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009878:	b29b      	uxth	r3, r3
 800987a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800987e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009882:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009886:	6800      	ldr	r0, [r0, #0]
 8009888:	f001 f9dd 	bl	800ac46 <USB_WritePMA>
 800988c:	e3c6      	b.n	800a01c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800988e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	785b      	ldrb	r3, [r3, #1]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d16d      	bne.n	800997a <USB_EPStartXfer+0x614>
 800989e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80098aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	461a      	mov	r2, r3
 80098bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098be:	4413      	add	r3, r2
 80098c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	00da      	lsls	r2, r3, #3
 80098d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d2:	4413      	add	r3, r2
 80098d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098d8:	647b      	str	r3, [r7, #68]	; 0x44
 80098da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098de:	2b3e      	cmp	r3, #62	; 0x3e
 80098e0:	d91c      	bls.n	800991c <USB_EPStartXfer+0x5b6>
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098e6:	095b      	lsrs	r3, r3, #5
 80098e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f0:	f003 031f 	and.w	r3, r3, #31
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d104      	bne.n	8009902 <USB_EPStartXfer+0x59c>
 80098f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098fc:	3b01      	subs	r3, #1
 80098fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009906:	b29b      	uxth	r3, r3
 8009908:	029b      	lsls	r3, r3, #10
 800990a:	b29b      	uxth	r3, r3
 800990c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009914:	b29a      	uxth	r2, r3
 8009916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009918:	801a      	strh	r2, [r3, #0]
 800991a:	e059      	b.n	80099d0 <USB_EPStartXfer+0x66a>
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009920:	2b00      	cmp	r3, #0
 8009922:	d112      	bne.n	800994a <USB_EPStartXfer+0x5e4>
 8009924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800992e:	b29a      	uxth	r2, r3
 8009930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009932:	801a      	strh	r2, [r3, #0]
 8009934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009936:	881b      	ldrh	r3, [r3, #0]
 8009938:	b29b      	uxth	r3, r3
 800993a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800993e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009942:	b29a      	uxth	r2, r3
 8009944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009946:	801a      	strh	r2, [r3, #0]
 8009948:	e042      	b.n	80099d0 <USB_EPStartXfer+0x66a>
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994e:	085b      	lsrs	r3, r3, #1
 8009950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009958:	f003 0301 	and.w	r3, r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	d004      	beq.n	800996a <USB_EPStartXfer+0x604>
 8009960:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009964:	3301      	adds	r3, #1
 8009966:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800996a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800996e:	b29b      	uxth	r3, r3
 8009970:	029b      	lsls	r3, r3, #10
 8009972:	b29a      	uxth	r2, r3
 8009974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009976:	801a      	strh	r2, [r3, #0]
 8009978:	e02a      	b.n	80099d0 <USB_EPStartXfer+0x66a>
 800997a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	785b      	ldrb	r3, [r3, #1]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d122      	bne.n	80099d0 <USB_EPStartXfer+0x66a>
 800998a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	653b      	str	r3, [r7, #80]	; 0x50
 8009996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	461a      	mov	r2, r3
 80099a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099aa:	4413      	add	r3, r2
 80099ac:	653b      	str	r3, [r7, #80]	; 0x50
 80099ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	00da      	lsls	r2, r3, #3
 80099bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099be:	4413      	add	r3, r2
 80099c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80099c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	891b      	ldrh	r3, [r3, #8]
 80099dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6959      	ldr	r1, [r3, #20]
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80099f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80099fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80099fe:	6800      	ldr	r0, [r0, #0]
 8009a00:	f001 f921 	bl	800ac46 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	695a      	ldr	r2, [r3, #20]
 8009a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a14:	441a      	add	r2, r3
 8009a16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	6a1a      	ldr	r2, [r3, #32]
 8009a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	429a      	cmp	r2, r3
 8009a3c:	d90f      	bls.n	8009a5e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8009a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6a1a      	ldr	r2, [r3, #32]
 8009a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a4e:	1ad2      	subs	r2, r2, r3
 8009a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	621a      	str	r2, [r3, #32]
 8009a5c:	e00e      	b.n	8009a7c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6a1b      	ldr	r3, [r3, #32]
 8009a6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	643b      	str	r3, [r7, #64]	; 0x40
 8009a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	785b      	ldrb	r3, [r3, #1]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d16d      	bne.n	8009b74 <USB_EPStartXfer+0x80e>
 8009a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8009aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	4413      	add	r3, r2
 8009aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8009abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	00da      	lsls	r2, r3, #3
 8009aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009acc:	4413      	add	r3, r2
 8009ace:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8009ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8009ada:	d91c      	bls.n	8009b16 <USB_EPStartXfer+0x7b0>
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aea:	f003 031f 	and.w	r3, r3, #31
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <USB_EPStartXfer+0x796>
 8009af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009af6:	3b01      	subs	r3, #1
 8009af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	029b      	lsls	r3, r3, #10
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b12:	801a      	strh	r2, [r3, #0]
 8009b14:	e053      	b.n	8009bbe <USB_EPStartXfer+0x858>
 8009b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d112      	bne.n	8009b44 <USB_EPStartXfer+0x7de>
 8009b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b20:	881b      	ldrh	r3, [r3, #0]
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2c:	801a      	strh	r2, [r3, #0]
 8009b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	801a      	strh	r2, [r3, #0]
 8009b42:	e03c      	b.n	8009bbe <USB_EPStartXfer+0x858>
 8009b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b48:	085b      	lsrs	r3, r3, #1
 8009b4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b52:	f003 0301 	and.w	r3, r3, #1
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d004      	beq.n	8009b64 <USB_EPStartXfer+0x7fe>
 8009b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b5e:	3301      	adds	r3, #1
 8009b60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	029b      	lsls	r3, r3, #10
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b70:	801a      	strh	r2, [r3, #0]
 8009b72:	e024      	b.n	8009bbe <USB_EPStartXfer+0x858>
 8009b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	785b      	ldrb	r3, [r3, #1]
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d11c      	bne.n	8009bbe <USB_EPStartXfer+0x858>
 8009b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b98:	4413      	add	r3, r2
 8009b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8009b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	00da      	lsls	r2, r3, #3
 8009baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bac:	4413      	add	r3, r2
 8009bae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	895b      	ldrh	r3, [r3, #10]
 8009bca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6959      	ldr	r1, [r3, #20]
 8009bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009be4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009be8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009bec:	6800      	ldr	r0, [r0, #0]
 8009bee:	f001 f82a 	bl	800ac46 <USB_WritePMA>
 8009bf2:	e213      	b.n	800a01c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	4413      	add	r3, r2
 8009c1e:	881b      	ldrh	r3, [r3, #0]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009c2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	441a      	add	r2, r3
 8009c48:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c80:	4413      	add	r3, r2
 8009c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	00da      	lsls	r2, r3, #3
 8009c92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c94:	4413      	add	r3, r2
 8009c96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ca4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	891b      	ldrh	r3, [r3, #8]
 8009cb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	6959      	ldr	r1, [r3, #20]
 8009cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ccc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009cd0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cd4:	6800      	ldr	r0, [r0, #0]
 8009cd6:	f000 ffb6 	bl	800ac46 <USB_WritePMA>
 8009cda:	e19f      	b.n	800a01c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6a1a      	ldr	r2, [r3, #32]
 8009ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cec:	1ad2      	subs	r2, r2, r3
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009cfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 80bc 	beq.w	8009e9a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	673b      	str	r3, [r7, #112]	; 0x70
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d16d      	bne.n	8009e1a <USB_EPStartXfer+0xab4>
 8009d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d5e:	4413      	add	r3, r2
 8009d60:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	00da      	lsls	r2, r3, #3
 8009d70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d72:	4413      	add	r3, r2
 8009d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d78:	667b      	str	r3, [r7, #100]	; 0x64
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7e:	2b3e      	cmp	r3, #62	; 0x3e
 8009d80:	d91c      	bls.n	8009dbc <USB_EPStartXfer+0xa56>
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d86:	095b      	lsrs	r3, r3, #5
 8009d88:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d90:	f003 031f 	and.w	r3, r3, #31
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <USB_EPStartXfer+0xa3c>
 8009d98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009da2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	029b      	lsls	r3, r3, #10
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009db4:	b29a      	uxth	r2, r3
 8009db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009db8:	801a      	strh	r2, [r3, #0]
 8009dba:	e053      	b.n	8009e64 <USB_EPStartXfer+0xafe>
 8009dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d112      	bne.n	8009dea <USB_EPStartXfer+0xa84>
 8009dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd2:	801a      	strh	r2, [r3, #0]
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009dde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009de6:	801a      	strh	r2, [r3, #0]
 8009de8:	e03c      	b.n	8009e64 <USB_EPStartXfer+0xafe>
 8009dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dee:	085b      	lsrs	r3, r3, #1
 8009df0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d004      	beq.n	8009e0a <USB_EPStartXfer+0xaa4>
 8009e00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e04:	3301      	adds	r3, #1
 8009e06:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	029b      	lsls	r3, r3, #10
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e16:	801a      	strh	r2, [r3, #0]
 8009e18:	e024      	b.n	8009e64 <USB_EPStartXfer+0xafe>
 8009e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	785b      	ldrb	r3, [r3, #1]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d11c      	bne.n	8009e64 <USB_EPStartXfer+0xafe>
 8009e2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	461a      	mov	r2, r3
 8009e3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3e:	4413      	add	r3, r2
 8009e40:	673b      	str	r3, [r7, #112]	; 0x70
 8009e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	00da      	lsls	r2, r3, #3
 8009e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e52:	4413      	add	r3, r2
 8009e54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009e64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	895b      	ldrh	r3, [r3, #10]
 8009e70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	6959      	ldr	r1, [r3, #20]
 8009e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e92:	6800      	ldr	r0, [r0, #0]
 8009e94:	f000 fed7 	bl	800ac46 <USB_WritePMA>
 8009e98:	e0c0      	b.n	800a01c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	785b      	ldrb	r3, [r3, #1]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d16d      	bne.n	8009f86 <USB_EPStartXfer+0xc20>
 8009eaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009eca:	4413      	add	r3, r2
 8009ecc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009ece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	00da      	lsls	r2, r3, #3
 8009edc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009ede:	4413      	add	r3, r2
 8009ee0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009ee4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009ee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eea:	2b3e      	cmp	r3, #62	; 0x3e
 8009eec:	d91c      	bls.n	8009f28 <USB_EPStartXfer+0xbc2>
 8009eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ef2:	095b      	lsrs	r3, r3, #5
 8009ef4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efc:	f003 031f 	and.w	r3, r3, #31
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d104      	bne.n	8009f0e <USB_EPStartXfer+0xba8>
 8009f04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f0e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f12:	b29b      	uxth	r3, r3
 8009f14:	029b      	lsls	r3, r3, #10
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f24:	801a      	strh	r2, [r3, #0]
 8009f26:	e05f      	b.n	8009fe8 <USB_EPStartXfer+0xc82>
 8009f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d112      	bne.n	8009f56 <USB_EPStartXfer+0xbf0>
 8009f30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f3a:	b29a      	uxth	r2, r3
 8009f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f3e:	801a      	strh	r2, [r3, #0]
 8009f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f52:	801a      	strh	r2, [r3, #0]
 8009f54:	e048      	b.n	8009fe8 <USB_EPStartXfer+0xc82>
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5a:	085b      	lsrs	r3, r3, #1
 8009f5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d004      	beq.n	8009f76 <USB_EPStartXfer+0xc10>
 8009f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f70:	3301      	adds	r3, #1
 8009f72:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009f76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	029b      	lsls	r3, r3, #10
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f82:	801a      	strh	r2, [r3, #0]
 8009f84:	e030      	b.n	8009fe8 <USB_EPStartXfer+0xc82>
 8009f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	785b      	ldrb	r3, [r3, #1]
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d128      	bne.n	8009fe8 <USB_EPStartXfer+0xc82>
 8009f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fba:	4413      	add	r3, r2
 8009fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	00da      	lsls	r2, r3, #3
 8009fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fd8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe0:	b29a      	uxth	r2, r3
 8009fe2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009fe6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009fe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	891b      	ldrh	r3, [r3, #8]
 8009ff4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	6959      	ldr	r1, [r3, #20]
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a008:	b29b      	uxth	r3, r3
 800a00a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a00e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a012:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a016:	6800      	ldr	r0, [r0, #0]
 800a018:	f000 fe15 	bl	800ac46 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	4413      	add	r3, r2
 800a036:	881b      	ldrh	r3, [r3, #0]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a03e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a042:	817b      	strh	r3, [r7, #10]
 800a044:	897b      	ldrh	r3, [r7, #10]
 800a046:	f083 0310 	eor.w	r3, r3, #16
 800a04a:	817b      	strh	r3, [r7, #10]
 800a04c:	897b      	ldrh	r3, [r7, #10]
 800a04e:	f083 0320 	eor.w	r3, r3, #32
 800a052:	817b      	strh	r3, [r7, #10]
 800a054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a058:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	781b      	ldrb	r3, [r3, #0]
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	441a      	add	r2, r3
 800a06e:	897b      	ldrh	r3, [r7, #10]
 800a070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a078:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a080:	b29b      	uxth	r3, r3
 800a082:	8013      	strh	r3, [r2, #0]
 800a084:	f000 bc9f 	b.w	800a9c6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a088:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a08c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	7b1b      	ldrb	r3, [r3, #12]
 800a094:	2b00      	cmp	r3, #0
 800a096:	f040 80ae 	bne.w	800a1f6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699a      	ldr	r2, [r3, #24]
 800a0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d917      	bls.n	800a0e6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	699a      	ldr	r2, [r3, #24]
 800a0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0d6:	1ad2      	subs	r2, r2, r3
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	619a      	str	r2, [r3, #24]
 800a0e4:	e00e      	b.n	800a104 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	699b      	ldr	r3, [r3, #24]
 800a0f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a116:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a120:	b29b      	uxth	r3, r3
 800a122:	461a      	mov	r2, r3
 800a124:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a128:	4413      	add	r3, r2
 800a12a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a12e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	00da      	lsls	r2, r3, #3
 800a13c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a140:	4413      	add	r3, r2
 800a142:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a14e:	2b3e      	cmp	r3, #62	; 0x3e
 800a150:	d91d      	bls.n	800a18e <USB_EPStartXfer+0xe28>
 800a152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a156:	095b      	lsrs	r3, r3, #5
 800a158:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a160:	f003 031f 	and.w	r3, r3, #31
 800a164:	2b00      	cmp	r3, #0
 800a166:	d104      	bne.n	800a172 <USB_EPStartXfer+0xe0c>
 800a168:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a16c:	3b01      	subs	r3, #1
 800a16e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a172:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a176:	b29b      	uxth	r3, r3
 800a178:	029b      	lsls	r3, r3, #10
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a184:	b29a      	uxth	r2, r3
 800a186:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a18a:	801a      	strh	r2, [r3, #0]
 800a18c:	e3e1      	b.n	800a952 <USB_EPStartXfer+0x15ec>
 800a18e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a192:	2b00      	cmp	r3, #0
 800a194:	d116      	bne.n	800a1c4 <USB_EPStartXfer+0xe5e>
 800a196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a1a2:	b29a      	uxth	r2, r3
 800a1a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1a8:	801a      	strh	r2, [r3, #0]
 800a1aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1ae:	881b      	ldrh	r3, [r3, #0]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1c0:	801a      	strh	r2, [r3, #0]
 800a1c2:	e3c6      	b.n	800a952 <USB_EPStartXfer+0x15ec>
 800a1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1c8:	085b      	lsrs	r3, r3, #1
 800a1ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <USB_EPStartXfer+0xe7e>
 800a1da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1de:	3301      	adds	r3, #1
 800a1e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a1e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	029b      	lsls	r3, r3, #10
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a1f2:	801a      	strh	r2, [r3, #0]
 800a1f4:	e3ad      	b.n	800a952 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	2b02      	cmp	r3, #2
 800a204:	f040 8200 	bne.w	800a608 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a208:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	785b      	ldrb	r3, [r3, #1]
 800a214:	2b00      	cmp	r3, #0
 800a216:	f040 8091 	bne.w	800a33c <USB_EPStartXfer+0xfd6>
 800a21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a21e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a236:	b29b      	uxth	r3, r3
 800a238:	461a      	mov	r2, r3
 800a23a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a23e:	4413      	add	r3, r2
 800a240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	00da      	lsls	r2, r3, #3
 800a252:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a256:	4413      	add	r3, r2
 800a258:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a25c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	2b3e      	cmp	r3, #62	; 0x3e
 800a26e:	d925      	bls.n	800a2bc <USB_EPStartXfer+0xf56>
 800a270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	691b      	ldr	r3, [r3, #16]
 800a27c:	095b      	lsrs	r3, r3, #5
 800a27e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	691b      	ldr	r3, [r3, #16]
 800a28e:	f003 031f 	and.w	r3, r3, #31
 800a292:	2b00      	cmp	r3, #0
 800a294:	d104      	bne.n	800a2a0 <USB_EPStartXfer+0xf3a>
 800a296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29a:	3b01      	subs	r3, #1
 800a29c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a2a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	029b      	lsls	r3, r3, #10
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2b8:	801a      	strh	r2, [r3, #0]
 800a2ba:	e074      	b.n	800a3a6 <USB_EPStartXfer+0x1040>
 800a2bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d116      	bne.n	800a2fa <USB_EPStartXfer+0xf94>
 800a2cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2de:	801a      	strh	r2, [r3, #0]
 800a2e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2f0:	b29a      	uxth	r2, r3
 800a2f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2f6:	801a      	strh	r2, [r3, #0]
 800a2f8:	e055      	b.n	800a3a6 <USB_EPStartXfer+0x1040>
 800a2fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	691b      	ldr	r3, [r3, #16]
 800a306:	085b      	lsrs	r3, r3, #1
 800a308:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f003 0301 	and.w	r3, r3, #1
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d004      	beq.n	800a32a <USB_EPStartXfer+0xfc4>
 800a320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a324:	3301      	adds	r3, #1
 800a326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a32e:	b29b      	uxth	r3, r3
 800a330:	029b      	lsls	r3, r3, #10
 800a332:	b29a      	uxth	r2, r3
 800a334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a338:	801a      	strh	r2, [r3, #0]
 800a33a:	e034      	b.n	800a3a6 <USB_EPStartXfer+0x1040>
 800a33c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	785b      	ldrb	r3, [r3, #1]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d12c      	bne.n	800a3a6 <USB_EPStartXfer+0x1040>
 800a34c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a35a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a35e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a368:	b29b      	uxth	r3, r3
 800a36a:	461a      	mov	r2, r3
 800a36c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a370:	4413      	add	r3, r2
 800a372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a376:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	781b      	ldrb	r3, [r3, #0]
 800a382:	00da      	lsls	r2, r3, #3
 800a384:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a388:	4413      	add	r3, r2
 800a38a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a38e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	785b      	ldrb	r3, [r3, #1]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	f040 8091 	bne.w	800a4e8 <USB_EPStartXfer+0x1182>
 800a3c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	00da      	lsls	r2, r3, #3
 800a3fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a402:	4413      	add	r3, r2
 800a404:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691b      	ldr	r3, [r3, #16]
 800a418:	2b3e      	cmp	r3, #62	; 0x3e
 800a41a:	d925      	bls.n	800a468 <USB_EPStartXfer+0x1102>
 800a41c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	095b      	lsrs	r3, r3, #5
 800a42a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a42e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 031f 	and.w	r3, r3, #31
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d104      	bne.n	800a44c <USB_EPStartXfer+0x10e6>
 800a442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a446:	3b01      	subs	r3, #1
 800a448:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a44c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a450:	b29b      	uxth	r3, r3
 800a452:	029b      	lsls	r3, r3, #10
 800a454:	b29b      	uxth	r3, r3
 800a456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a45a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45e:	b29a      	uxth	r2, r3
 800a460:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a464:	801a      	strh	r2, [r3, #0]
 800a466:	e06d      	b.n	800a544 <USB_EPStartXfer+0x11de>
 800a468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a46c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	691b      	ldr	r3, [r3, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d116      	bne.n	800a4a6 <USB_EPStartXfer+0x1140>
 800a478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a484:	b29a      	uxth	r2, r3
 800a486:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a48a:	801a      	strh	r2, [r3, #0]
 800a48c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	b29b      	uxth	r3, r3
 800a494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4a2:	801a      	strh	r2, [r3, #0]
 800a4a4:	e04e      	b.n	800a544 <USB_EPStartXfer+0x11de>
 800a4a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <USB_EPStartXfer+0x1170>
 800a4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	029b      	lsls	r3, r3, #10
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4e4:	801a      	strh	r2, [r3, #0]
 800a4e6:	e02d      	b.n	800a544 <USB_EPStartXfer+0x11de>
 800a4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	785b      	ldrb	r3, [r3, #1]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d125      	bne.n	800a544 <USB_EPStartXfer+0x11de>
 800a4f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a506:	b29b      	uxth	r3, r3
 800a508:	461a      	mov	r2, r3
 800a50a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a50e:	4413      	add	r3, r2
 800a510:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	00da      	lsls	r2, r3, #3
 800a522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a526:	4413      	add	r3, r2
 800a528:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a52c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a542:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69db      	ldr	r3, [r3, #28]
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 81fe 	beq.w	800a952 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	4413      	add	r3, r2
 800a570:	881b      	ldrh	r3, [r3, #0]
 800a572:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a576:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a57a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <USB_EPStartXfer+0x1228>
 800a582:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d10d      	bne.n	800a5aa <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a58e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a596:	2b00      	cmp	r3, #0
 800a598:	f040 81db 	bne.w	800a952 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a59c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f040 81d4 	bne.w	800a952 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5b2:	681a      	ldr	r2, [r3, #0]
 800a5b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	781b      	ldrb	r3, [r3, #0]
 800a5c0:	009b      	lsls	r3, r3, #2
 800a5c2:	4413      	add	r3, r2
 800a5c4:	881b      	ldrh	r3, [r3, #0]
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a5cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5d0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	441a      	add	r2, r3
 800a5ee:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5fe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a602:	b29b      	uxth	r3, r3
 800a604:	8013      	strh	r3, [r2, #0]
 800a606:	e1a4      	b.n	800a952 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a608:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	78db      	ldrb	r3, [r3, #3]
 800a614:	2b01      	cmp	r3, #1
 800a616:	f040 819a 	bne.w	800a94e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a61a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	699a      	ldr	r2, [r3, #24]
 800a626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	d917      	bls.n	800a666 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800a636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	691b      	ldr	r3, [r3, #16]
 800a642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	699a      	ldr	r2, [r3, #24]
 800a652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a656:	1ad2      	subs	r2, r2, r3
 800a658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a65c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	619a      	str	r2, [r3, #24]
 800a664:	e00e      	b.n	800a684 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800a666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2200      	movs	r2, #0
 800a682:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	785b      	ldrb	r3, [r3, #1]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d178      	bne.n	800a786 <USB_EPStartXfer+0x1420>
 800a694:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a698:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a6be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	00da      	lsls	r2, r3, #3
 800a6cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a6d0:	4413      	add	r3, r2
 800a6d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a6d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6de:	2b3e      	cmp	r3, #62	; 0x3e
 800a6e0:	d91d      	bls.n	800a71e <USB_EPStartXfer+0x13b8>
 800a6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e6:	095b      	lsrs	r3, r3, #5
 800a6e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f0:	f003 031f 	and.w	r3, r3, #31
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d104      	bne.n	800a702 <USB_EPStartXfer+0x139c>
 800a6f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6fc:	3b01      	subs	r3, #1
 800a6fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a702:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a706:	b29b      	uxth	r3, r3
 800a708:	029b      	lsls	r3, r3, #10
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a714:	b29a      	uxth	r2, r3
 800a716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a71a:	801a      	strh	r2, [r3, #0]
 800a71c:	e064      	b.n	800a7e8 <USB_EPStartXfer+0x1482>
 800a71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a722:	2b00      	cmp	r3, #0
 800a724:	d116      	bne.n	800a754 <USB_EPStartXfer+0x13ee>
 800a726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29b      	uxth	r3, r3
 800a72e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a732:	b29a      	uxth	r2, r3
 800a734:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a738:	801a      	strh	r2, [r3, #0]
 800a73a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a73e:	881b      	ldrh	r3, [r3, #0]
 800a740:	b29b      	uxth	r3, r3
 800a742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a74a:	b29a      	uxth	r2, r3
 800a74c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a750:	801a      	strh	r2, [r3, #0]
 800a752:	e049      	b.n	800a7e8 <USB_EPStartXfer+0x1482>
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a758:	085b      	lsrs	r3, r3, #1
 800a75a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	d004      	beq.n	800a774 <USB_EPStartXfer+0x140e>
 800a76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a76e:	3301      	adds	r3, #1
 800a770:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a778:	b29b      	uxth	r3, r3
 800a77a:	029b      	lsls	r3, r3, #10
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a782:	801a      	strh	r2, [r3, #0]
 800a784:	e030      	b.n	800a7e8 <USB_EPStartXfer+0x1482>
 800a786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	785b      	ldrb	r3, [r3, #1]
 800a792:	2b01      	cmp	r3, #1
 800a794:	d128      	bne.n	800a7e8 <USB_EPStartXfer+0x1482>
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a7a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	00da      	lsls	r2, r3, #3
 800a7ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a7d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a7e6:	801a      	strh	r2, [r3, #0]
 800a7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	785b      	ldrb	r3, [r3, #1]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d178      	bne.n	800a8f8 <USB_EPStartXfer+0x1592>
 800a806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a80a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a814:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a818:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a822:	b29b      	uxth	r3, r3
 800a824:	461a      	mov	r2, r3
 800a826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a82a:	4413      	add	r3, r2
 800a82c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	00da      	lsls	r2, r3, #3
 800a83e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a842:	4413      	add	r3, r2
 800a844:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a848:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a84c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a850:	2b3e      	cmp	r3, #62	; 0x3e
 800a852:	d91d      	bls.n	800a890 <USB_EPStartXfer+0x152a>
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a858:	095b      	lsrs	r3, r3, #5
 800a85a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a862:	f003 031f 	and.w	r3, r3, #31
 800a866:	2b00      	cmp	r3, #0
 800a868:	d104      	bne.n	800a874 <USB_EPStartXfer+0x150e>
 800a86a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a86e:	3b01      	subs	r3, #1
 800a870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a878:	b29b      	uxth	r3, r3
 800a87a:	029b      	lsls	r3, r3, #10
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a886:	b29a      	uxth	r2, r3
 800a888:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a88c:	801a      	strh	r2, [r3, #0]
 800a88e:	e060      	b.n	800a952 <USB_EPStartXfer+0x15ec>
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a894:	2b00      	cmp	r3, #0
 800a896:	d116      	bne.n	800a8c6 <USB_EPStartXfer+0x1560>
 800a898:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a89c:	881b      	ldrh	r3, [r3, #0]
 800a89e:	b29b      	uxth	r3, r3
 800a8a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8aa:	801a      	strh	r2, [r3, #0]
 800a8ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8b0:	881b      	ldrh	r3, [r3, #0]
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8c2:	801a      	strh	r2, [r3, #0]
 800a8c4:	e045      	b.n	800a952 <USB_EPStartXfer+0x15ec>
 800a8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ca:	085b      	lsrs	r3, r3, #1
 800a8cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d004      	beq.n	800a8e6 <USB_EPStartXfer+0x1580>
 800a8dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	029b      	lsls	r3, r3, #10
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8f4:	801a      	strh	r2, [r3, #0]
 800a8f6:	e02c      	b.n	800a952 <USB_EPStartXfer+0x15ec>
 800a8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	785b      	ldrb	r3, [r3, #1]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d124      	bne.n	800a952 <USB_EPStartXfer+0x15ec>
 800a908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a916:	b29b      	uxth	r3, r3
 800a918:	461a      	mov	r2, r3
 800a91a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a91e:	4413      	add	r3, r2
 800a920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	00da      	lsls	r2, r3, #3
 800a932:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a936:	4413      	add	r3, r2
 800a938:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a93c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	b29a      	uxth	r2, r3
 800a946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a94a:	801a      	strh	r2, [r3, #0]
 800a94c:	e001      	b.n	800a952 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e03a      	b.n	800a9c8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	781b      	ldrb	r3, [r3, #0]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b29b      	uxth	r3, r3
 800a970:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a978:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a97c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a980:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a984:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a988:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a98c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a990:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a994:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a998:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a99c:	681a      	ldr	r2, [r3, #0]
 800a99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	781b      	ldrb	r3, [r3, #0]
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	441a      	add	r2, r3
 800a9ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a9b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9d2:	b480      	push	{r7}
 800a9d4:	b085      	sub	sp, #20
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	785b      	ldrb	r3, [r3, #1]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d020      	beq.n	800aa26 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	4413      	add	r3, r2
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9fa:	81bb      	strh	r3, [r7, #12]
 800a9fc:	89bb      	ldrh	r3, [r7, #12]
 800a9fe:	f083 0310 	eor.w	r3, r3, #16
 800aa02:	81bb      	strh	r3, [r7, #12]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	441a      	add	r2, r3
 800aa0e:	89bb      	ldrh	r3, [r7, #12]
 800aa10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	8013      	strh	r3, [r2, #0]
 800aa24:	e01f      	b.n	800aa66 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aa26:	687a      	ldr	r2, [r7, #4]
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	4413      	add	r3, r2
 800aa30:	881b      	ldrh	r3, [r3, #0]
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa3c:	81fb      	strh	r3, [r7, #14]
 800aa3e:	89fb      	ldrh	r3, [r7, #14]
 800aa40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa44:	81fb      	strh	r3, [r7, #14]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	441a      	add	r2, r3
 800aa50:	89fb      	ldrh	r3, [r7, #14]
 800aa52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa66:	2300      	movs	r3, #0
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3714      	adds	r7, #20
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa72:	4770      	bx	lr

0800aa74 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	7b1b      	ldrb	r3, [r3, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f040 809d 	bne.w	800abc2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	785b      	ldrb	r3, [r3, #1]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d04c      	beq.n	800ab2a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	823b      	strh	r3, [r7, #16]
 800aa9e:	8a3b      	ldrh	r3, [r7, #16]
 800aaa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d01b      	beq.n	800aae0 <USB_EPClearStall+0x6c>
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	009b      	lsls	r3, r3, #2
 800aab0:	4413      	add	r3, r2
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aabe:	81fb      	strh	r3, [r7, #14]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	441a      	add	r2, r3
 800aaca:	89fb      	ldrh	r3, [r7, #14]
 800aacc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aadc:	b29b      	uxth	r3, r3
 800aade:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	78db      	ldrb	r3, [r3, #3]
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d06c      	beq.n	800abc2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	009b      	lsls	r3, r3, #2
 800aaf0:	4413      	add	r3, r2
 800aaf2:	881b      	ldrh	r3, [r3, #0]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aafa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aafe:	81bb      	strh	r3, [r7, #12]
 800ab00:	89bb      	ldrh	r3, [r7, #12]
 800ab02:	f083 0320 	eor.w	r3, r3, #32
 800ab06:	81bb      	strh	r3, [r7, #12]
 800ab08:	687a      	ldr	r2, [r7, #4]
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	009b      	lsls	r3, r3, #2
 800ab10:	441a      	add	r2, r3
 800ab12:	89bb      	ldrh	r3, [r7, #12]
 800ab14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	8013      	strh	r3, [r2, #0]
 800ab28:	e04b      	b.n	800abc2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	82fb      	strh	r3, [r7, #22]
 800ab38:	8afb      	ldrh	r3, [r7, #22]
 800ab3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01b      	beq.n	800ab7a <USB_EPClearStall+0x106>
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab58:	82bb      	strh	r3, [r7, #20]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	441a      	add	r2, r3
 800ab64:	8abb      	ldrh	r3, [r7, #20]
 800ab66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	4413      	add	r3, r2
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab90:	827b      	strh	r3, [r7, #18]
 800ab92:	8a7b      	ldrh	r3, [r7, #18]
 800ab94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab98:	827b      	strh	r3, [r7, #18]
 800ab9a:	8a7b      	ldrh	r3, [r7, #18]
 800ab9c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aba0:	827b      	strh	r3, [r7, #18]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	441a      	add	r2, r3
 800abac:	8a7b      	ldrh	r3, [r7, #18]
 800abae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	371c      	adds	r7, #28
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr

0800abd0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800abdc:	78fb      	ldrb	r3, [r7, #3]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d103      	bne.n	800abea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2280      	movs	r2, #128	; 0x80
 800abe6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ac38:	68fb      	ldr	r3, [r7, #12]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3714      	adds	r7, #20
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac44:	4770      	bx	lr

0800ac46 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac46:	b480      	push	{r7}
 800ac48:	b08d      	sub	sp, #52	; 0x34
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	60f8      	str	r0, [r7, #12]
 800ac4e:	60b9      	str	r1, [r7, #8]
 800ac50:	4611      	mov	r1, r2
 800ac52:	461a      	mov	r2, r3
 800ac54:	460b      	mov	r3, r1
 800ac56:	80fb      	strh	r3, [r7, #6]
 800ac58:	4613      	mov	r3, r2
 800ac5a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac5c:	88bb      	ldrh	r3, [r7, #4]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	085b      	lsrs	r3, r3, #1
 800ac62:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac6c:	88fa      	ldrh	r2, [r7, #6]
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	4413      	add	r3, r2
 800ac72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac76:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ac7c:	e01b      	b.n	800acb6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	3301      	adds	r3, #1
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	461a      	mov	r2, r3
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800aca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca6:	3302      	adds	r3, #2
 800aca8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	3301      	adds	r3, #1
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	3b01      	subs	r3, #1
 800acb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800acb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d1e0      	bne.n	800ac7e <USB_WritePMA+0x38>
  }
}
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	3734      	adds	r7, #52	; 0x34
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800acca:	b480      	push	{r7}
 800accc:	b08b      	sub	sp, #44	; 0x2c
 800acce:	af00      	add	r7, sp, #0
 800acd0:	60f8      	str	r0, [r7, #12]
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	4611      	mov	r1, r2
 800acd6:	461a      	mov	r2, r3
 800acd8:	460b      	mov	r3, r1
 800acda:	80fb      	strh	r3, [r7, #6]
 800acdc:	4613      	mov	r3, r2
 800acde:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ace0:	88bb      	ldrh	r3, [r7, #4]
 800ace2:	085b      	lsrs	r3, r3, #1
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acf0:	88fa      	ldrh	r2, [r7, #6]
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acfa:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800acfc:	69bb      	ldr	r3, [r7, #24]
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
 800ad00:	e018      	b.n	800ad34 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	881b      	ldrh	r3, [r3, #0]
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	0a1b      	lsrs	r3, r3, #8
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ad28:	69fb      	ldr	r3, [r7, #28]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800ad2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad30:	3b01      	subs	r3, #1
 800ad32:	627b      	str	r3, [r7, #36]	; 0x24
 800ad34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d1e3      	bne.n	800ad02 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ad3a:	88bb      	ldrh	r3, [r7, #4]
 800ad3c:	f003 0301 	and.w	r3, r3, #1
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	701a      	strb	r2, [r3, #0]
  }
}
 800ad56:	bf00      	nop
 800ad58:	372c      	adds	r7, #44	; 0x2c
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	460b      	mov	r3, r1
 800ad6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad72:	f002 f8a7 	bl	800cec4 <USBD_static_malloc>
 800ad76:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d105      	bne.n	800ad8a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ad86:	2302      	movs	r3, #2
 800ad88:	e066      	b.n	800ae58 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	68fa      	ldr	r2, [r7, #12]
 800ad8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	7c1b      	ldrb	r3, [r3, #16]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d119      	bne.n	800adce <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad9e:	2202      	movs	r2, #2
 800ada0:	2181      	movs	r1, #129	; 0x81
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f001 ff33 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800adae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adb2:	2202      	movs	r2, #2
 800adb4:	2101      	movs	r1, #1
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f001 ff29 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2210      	movs	r2, #16
 800adc8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800adcc:	e016      	b.n	800adfc <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800adce:	2340      	movs	r3, #64	; 0x40
 800add0:	2202      	movs	r2, #2
 800add2:	2181      	movs	r1, #129	; 0x81
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 ff1a 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ade0:	2340      	movs	r3, #64	; 0x40
 800ade2:	2202      	movs	r2, #2
 800ade4:	2101      	movs	r1, #1
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f001 ff11 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2210      	movs	r2, #16
 800adf8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800adfc:	2308      	movs	r3, #8
 800adfe:	2203      	movs	r2, #3
 800ae00:	2182      	movs	r1, #130	; 0x82
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 ff03 	bl	800cc0e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	7c1b      	ldrb	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d109      	bne.n	800ae46 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f001 ffd5 	bl	800cdee <USBD_LL_PrepareReceive>
 800ae44:	e007      	b.n	800ae56 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae4c:	2340      	movs	r3, #64	; 0x40
 800ae4e:	2101      	movs	r1, #1
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f001 ffcc 	bl	800cdee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae6c:	2181      	movs	r1, #129	; 0x81
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 fef3 	bl	800cc5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae7a:	2101      	movs	r1, #1
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 feec 	bl	800cc5a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae8a:	2182      	movs	r1, #130	; 0x82
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 fee4 	bl	800cc5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d00e      	beq.n	800aeca <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aebc:	4618      	mov	r0, r3
 800aebe:	f002 f80f 	bl	800cee0 <USBD_static_free>
    pdev->pClassData = NULL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800aeca:	2300      	movs	r3, #0
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3708      	adds	r7, #8
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b086      	sub	sp, #24
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aee4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aee6:	2300      	movs	r3, #0
 800aee8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aeea:	2300      	movs	r3, #0
 800aeec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeee:	2300      	movs	r3, #0
 800aef0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d101      	bne.n	800aefc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800aef8:	2303      	movs	r3, #3
 800aefa:	e0af      	b.n	800b05c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af04:	2b00      	cmp	r3, #0
 800af06:	d03f      	beq.n	800af88 <USBD_CDC_Setup+0xb4>
 800af08:	2b20      	cmp	r3, #32
 800af0a:	f040 809f 	bne.w	800b04c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	88db      	ldrh	r3, [r3, #6]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d02e      	beq.n	800af74 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	b25b      	sxtb	r3, r3
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	da16      	bge.n	800af4e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800af2c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af2e:	683a      	ldr	r2, [r7, #0]
 800af30:	88d2      	ldrh	r2, [r2, #6]
 800af32:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	88db      	ldrh	r3, [r3, #6]
 800af38:	2b07      	cmp	r3, #7
 800af3a:	bf28      	it	cs
 800af3c:	2307      	movcs	r3, #7
 800af3e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	89fa      	ldrh	r2, [r7, #14]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 fa9f 	bl	800c48a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800af4c:	e085      	b.n	800b05a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	785a      	ldrb	r2, [r3, #1]
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	88db      	ldrh	r3, [r3, #6]
 800af5c:	b2da      	uxtb	r2, r3
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800af64:	6939      	ldr	r1, [r7, #16]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	88db      	ldrh	r3, [r3, #6]
 800af6a:	461a      	mov	r2, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 fab8 	bl	800c4e2 <USBD_CtlPrepareRx>
      break;
 800af72:	e072      	b.n	800b05a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	683a      	ldr	r2, [r7, #0]
 800af7e:	7850      	ldrb	r0, [r2, #1]
 800af80:	2200      	movs	r2, #0
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	4798      	blx	r3
      break;
 800af86:	e068      	b.n	800b05a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	785b      	ldrb	r3, [r3, #1]
 800af8c:	2b0b      	cmp	r3, #11
 800af8e:	d852      	bhi.n	800b036 <USBD_CDC_Setup+0x162>
 800af90:	a201      	add	r2, pc, #4	; (adr r2, 800af98 <USBD_CDC_Setup+0xc4>)
 800af92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af96:	bf00      	nop
 800af98:	0800afc9 	.word	0x0800afc9
 800af9c:	0800b045 	.word	0x0800b045
 800afa0:	0800b037 	.word	0x0800b037
 800afa4:	0800b037 	.word	0x0800b037
 800afa8:	0800b037 	.word	0x0800b037
 800afac:	0800b037 	.word	0x0800b037
 800afb0:	0800b037 	.word	0x0800b037
 800afb4:	0800b037 	.word	0x0800b037
 800afb8:	0800b037 	.word	0x0800b037
 800afbc:	0800b037 	.word	0x0800b037
 800afc0:	0800aff3 	.word	0x0800aff3
 800afc4:	0800b01d 	.word	0x0800b01d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b03      	cmp	r3, #3
 800afd2:	d107      	bne.n	800afe4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800afd4:	f107 030a 	add.w	r3, r7, #10
 800afd8:	2202      	movs	r2, #2
 800afda:	4619      	mov	r1, r3
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f001 fa54 	bl	800c48a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afe2:	e032      	b.n	800b04a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 f9de 	bl	800c3a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	75fb      	strb	r3, [r7, #23]
          break;
 800aff0:	e02b      	b.n	800b04a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff8:	b2db      	uxtb	r3, r3
 800affa:	2b03      	cmp	r3, #3
 800affc:	d107      	bne.n	800b00e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800affe:	f107 030d 	add.w	r3, r7, #13
 800b002:	2201      	movs	r2, #1
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f001 fa3f 	bl	800c48a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b00c:	e01d      	b.n	800b04a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b00e:	6839      	ldr	r1, [r7, #0]
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f001 f9c9 	bl	800c3a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b016:	2303      	movs	r3, #3
 800b018:	75fb      	strb	r3, [r7, #23]
          break;
 800b01a:	e016      	b.n	800b04a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b03      	cmp	r3, #3
 800b026:	d00f      	beq.n	800b048 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b028:	6839      	ldr	r1, [r7, #0]
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f001 f9bc 	bl	800c3a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800b030:	2303      	movs	r3, #3
 800b032:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b034:	e008      	b.n	800b048 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b036:	6839      	ldr	r1, [r7, #0]
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f001 f9b5 	bl	800c3a8 <USBD_CtlError>
          ret = USBD_FAIL;
 800b03e:	2303      	movs	r3, #3
 800b040:	75fb      	strb	r3, [r7, #23]
          break;
 800b042:	e002      	b.n	800b04a <USBD_CDC_Setup+0x176>
          break;
 800b044:	bf00      	nop
 800b046:	e008      	b.n	800b05a <USBD_CDC_Setup+0x186>
          break;
 800b048:	bf00      	nop
      }
      break;
 800b04a:	e006      	b.n	800b05a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	6878      	ldr	r0, [r7, #4]
 800b050:	f001 f9aa 	bl	800c3a8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b054:	2303      	movs	r3, #3
 800b056:	75fb      	strb	r3, [r7, #23]
      break;
 800b058:	bf00      	nop
  }

  return (uint8_t)ret;
 800b05a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3718      	adds	r7, #24
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b076:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b082:	2303      	movs	r3, #3
 800b084:	e04f      	b.n	800b126 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b08c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b08e:	78fa      	ldrb	r2, [r7, #3]
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	4613      	mov	r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	3318      	adds	r3, #24
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d029      	beq.n	800b0f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b0a4:	78fa      	ldrb	r2, [r7, #3]
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	3318      	adds	r3, #24
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	78f9      	ldrb	r1, [r7, #3]
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	460b      	mov	r3, r1
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	440b      	add	r3, r1
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	4403      	add	r3, r0
 800b0c4:	3338      	adds	r3, #56	; 0x38
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b0cc:	fb01 f303 	mul.w	r3, r1, r3
 800b0d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d110      	bne.n	800b0f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b0d6:	78fa      	ldrb	r2, [r7, #3]
 800b0d8:	6879      	ldr	r1, [r7, #4]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	4413      	add	r3, r2
 800b0e0:	009b      	lsls	r3, r3, #2
 800b0e2:	440b      	add	r3, r1
 800b0e4:	3318      	adds	r3, #24
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0ea:	78f9      	ldrb	r1, [r7, #3]
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 fe5b 	bl	800cdac <USBD_LL_Transmit>
 800b0f6:	e015      	b.n	800b124 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0f8:	68bb      	ldr	r3, [r7, #8]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d00b      	beq.n	800b124 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b11a:	68ba      	ldr	r2, [r7, #8]
 800b11c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b120:	78fa      	ldrb	r2, [r7, #3]
 800b122:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b140:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e015      	b.n	800b17c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b150:	78fb      	ldrb	r3, [r7, #3]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 fe6b 	bl	800ce30 <USBD_LL_GetRxDataSize>
 800b15a:	4602      	mov	r2, r0
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b170:	68fa      	ldr	r2, [r7, #12]
 800b172:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b176:	4611      	mov	r1, r2
 800b178:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b17a:	2300      	movs	r3, #0
}
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b192:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d101      	bne.n	800b19e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b19a:	2303      	movs	r3, #3
 800b19c:	e01b      	b.n	800b1d6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d015      	beq.n	800b1d4 <USBD_CDC_EP0_RxReady+0x50>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b1ae:	2bff      	cmp	r3, #255	; 0xff
 800b1b0:	d010      	beq.n	800b1d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1b8:	689b      	ldr	r3, [r3, #8]
 800b1ba:	68fa      	ldr	r2, [r7, #12]
 800b1bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b1c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b1c8:	b292      	uxth	r2, r2
 800b1ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	22ff      	movs	r2, #255	; 0xff
 800b1d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b1d4:	2300      	movs	r3, #0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2243      	movs	r2, #67	; 0x43
 800b1ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b1ee:	4b03      	ldr	r3, [pc, #12]	; (800b1fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr
 800b1fc:	200000a4 	.word	0x200000a4

0800b200 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2243      	movs	r2, #67	; 0x43
 800b20c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b20e:	4b03      	ldr	r3, [pc, #12]	; (800b21c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b210:	4618      	mov	r0, r3
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	20000060 	.word	0x20000060

0800b220 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2243      	movs	r2, #67	; 0x43
 800b22c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b22e:	4b03      	ldr	r3, [pc, #12]	; (800b23c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b230:	4618      	mov	r0, r3
 800b232:	370c      	adds	r7, #12
 800b234:	46bd      	mov	sp, r7
 800b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23a:	4770      	bx	lr
 800b23c:	200000e8 	.word	0x200000e8

0800b240 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	220a      	movs	r2, #10
 800b24c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b24e:	4b03      	ldr	r3, [pc, #12]	; (800b25c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr
 800b25c:	2000001c 	.word	0x2000001c

0800b260 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b270:	2303      	movs	r3, #3
 800b272:	e004      	b.n	800b27e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b27c:	2300      	movs	r3, #0
}
 800b27e:	4618      	mov	r0, r3
 800b280:	370c      	adds	r7, #12
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b28a:	b480      	push	{r7}
 800b28c:	b087      	sub	sp, #28
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b29c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e008      	b.n	800b2ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b2b8:	2300      	movs	r3, #0
}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr

0800b2c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2c6:	b480      	push	{r7}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b2de:	2303      	movs	r3, #3
 800b2e0:	e004      	b.n	800b2ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d101      	bne.n	800b316 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b312:	2303      	movs	r3, #3
 800b314:	e016      	b.n	800b344 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7c1b      	ldrb	r3, [r3, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b324:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b328:	2101      	movs	r1, #1
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 fd5f 	bl	800cdee <USBD_LL_PrepareReceive>
 800b330:	e007      	b.n	800b342 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b338:	2340      	movs	r3, #64	; 0x40
 800b33a:	2101      	movs	r1, #1
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f001 fd56 	bl	800cdee <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	4613      	mov	r3, r2
 800b358:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b360:	2303      	movs	r3, #3
 800b362:	e01f      	b.n	800b3a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d003      	beq.n	800b38a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	68ba      	ldr	r2, [r7, #8]
 800b386:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	79fa      	ldrb	r2, [r7, #7]
 800b396:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f001 fbbd 	bl	800cb18 <USBD_LL_Init>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b3a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3718      	adds	r7, #24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b3c0:	2303      	movs	r3, #3
 800b3c2:	e016      	b.n	800b3f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	683a      	ldr	r2, [r7, #0]
 800b3c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d00b      	beq.n	800b3f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e0:	f107 020e 	add.w	r2, r7, #14
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3710      	adds	r7, #16
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b082      	sub	sp, #8
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f001 fbe8 	bl	800cbd8 <USBD_LL_Start>
 800b408:	4603      	mov	r3, r0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3708      	adds	r7, #8
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd80      	pop	{r7, pc}

0800b412 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b412:	b480      	push	{r7}
 800b414:	b083      	sub	sp, #12
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b41a:	2300      	movs	r3, #0
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	460b      	mov	r3, r1
 800b432:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b434:	2303      	movs	r3, #3
 800b436:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d009      	beq.n	800b456 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	78fa      	ldrb	r2, [r7, #3]
 800b44c:	4611      	mov	r1, r2
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	4798      	blx	r3
 800b452:	4603      	mov	r3, r0
 800b454:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b082      	sub	sp, #8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	460b      	mov	r3, r1
 800b46a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b472:	2b00      	cmp	r3, #0
 800b474:	d007      	beq.n	800b486 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	78fa      	ldrb	r2, [r7, #3]
 800b480:	4611      	mov	r1, r2
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	4798      	blx	r3
  }

  return USBD_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 ff46 	bl	800c334 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b4b6:	461a      	mov	r2, r3
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4c4:	f003 031f 	and.w	r3, r3, #31
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d01a      	beq.n	800b502 <USBD_LL_SetupStage+0x72>
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d822      	bhi.n	800b516 <USBD_LL_SetupStage+0x86>
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <USBD_LL_SetupStage+0x4a>
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d00a      	beq.n	800b4ee <USBD_LL_SetupStage+0x5e>
 800b4d8:	e01d      	b.n	800b516 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 f9ee 	bl	800b8c4 <USBD_StdDevReq>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ec:	e020      	b.n	800b530 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f000 fa52 	bl	800b9a0 <USBD_StdItfReq>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73fb      	strb	r3, [r7, #15]
      break;
 800b500:	e016      	b.n	800b530 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b508:	4619      	mov	r1, r3
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fa91 	bl	800ba32 <USBD_StdEPReq>
 800b510:	4603      	mov	r3, r0
 800b512:	73fb      	strb	r3, [r7, #15]
      break;
 800b514:	e00c      	b.n	800b530 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b51c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b520:	b2db      	uxtb	r3, r3
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 fbb7 	bl	800cc98 <USBD_LL_StallEP>
 800b52a:	4603      	mov	r3, r0
 800b52c:	73fb      	strb	r3, [r7, #15]
      break;
 800b52e:	bf00      	nop
  }

  return ret;
 800b530:	7bfb      	ldrb	r3, [r7, #15]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3710      	adds	r7, #16
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b086      	sub	sp, #24
 800b53e:	af00      	add	r7, sp, #0
 800b540:	60f8      	str	r0, [r7, #12]
 800b542:	460b      	mov	r3, r1
 800b544:	607a      	str	r2, [r7, #4]
 800b546:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b548:	7afb      	ldrb	r3, [r7, #11]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d138      	bne.n	800b5c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b554:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b55c:	2b03      	cmp	r3, #3
 800b55e:	d14a      	bne.n	800b5f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d913      	bls.n	800b594 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	1ad2      	subs	r2, r2, r3
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	68da      	ldr	r2, [r3, #12]
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	4293      	cmp	r3, r2
 800b584:	bf28      	it	cs
 800b586:	4613      	movcs	r3, r2
 800b588:	461a      	mov	r2, r3
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 ffc5 	bl	800c51c <USBD_CtlContinueRx>
 800b592:	e030      	b.n	800b5f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	2b03      	cmp	r3, #3
 800b59e:	d10b      	bne.n	800b5b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5a6:	691b      	ldr	r3, [r3, #16]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d005      	beq.n	800b5b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f000 ffc0 	bl	800c53e <USBD_CtlSendStatus>
 800b5be:	e01a      	b.n	800b5f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b03      	cmp	r3, #3
 800b5ca:	d114      	bne.n	800b5f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d2:	699b      	ldr	r3, [r3, #24]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00e      	beq.n	800b5f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	7afa      	ldrb	r2, [r7, #11]
 800b5e2:	4611      	mov	r1, r2
 800b5e4:	68f8      	ldr	r0, [r7, #12]
 800b5e6:	4798      	blx	r3
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b5f2:	7dfb      	ldrb	r3, [r7, #23]
 800b5f4:	e000      	b.n	800b5f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3718      	adds	r7, #24
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	460b      	mov	r3, r1
 800b60a:	607a      	str	r2, [r7, #4]
 800b60c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b60e:	7afb      	ldrb	r3, [r7, #11]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d16b      	bne.n	800b6ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	3314      	adds	r3, #20
 800b618:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b620:	2b02      	cmp	r3, #2
 800b622:	d156      	bne.n	800b6d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	68db      	ldr	r3, [r3, #12]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d914      	bls.n	800b65a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	689a      	ldr	r2, [r3, #8]
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	1ad2      	subs	r2, r2, r3
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	461a      	mov	r2, r3
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 ff3a 	bl	800c4c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b64c:	2300      	movs	r3, #0
 800b64e:	2200      	movs	r2, #0
 800b650:	2100      	movs	r1, #0
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f001 fbcb 	bl	800cdee <USBD_LL_PrepareReceive>
 800b658:	e03b      	b.n	800b6d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	68da      	ldr	r2, [r3, #12]
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	429a      	cmp	r2, r3
 800b664:	d11c      	bne.n	800b6a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b666:	693b      	ldr	r3, [r7, #16]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b66e:	429a      	cmp	r2, r3
 800b670:	d316      	bcc.n	800b6a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d20f      	bcs.n	800b6a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b680:	2200      	movs	r2, #0
 800b682:	2100      	movs	r1, #0
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f000 ff1b 	bl	800c4c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2200      	movs	r2, #0
 800b68e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b692:	2300      	movs	r3, #0
 800b694:	2200      	movs	r2, #0
 800b696:	2100      	movs	r1, #0
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f001 fba8 	bl	800cdee <USBD_LL_PrepareReceive>
 800b69e:	e018      	b.n	800b6d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d10b      	bne.n	800b6c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d005      	beq.n	800b6c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6be:	68db      	ldr	r3, [r3, #12]
 800b6c0:	68f8      	ldr	r0, [r7, #12]
 800b6c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6c4:	2180      	movs	r1, #128	; 0x80
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f001 fae6 	bl	800cc98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f000 ff49 	bl	800c564 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d122      	bne.n	800b722 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b6dc:	68f8      	ldr	r0, [r7, #12]
 800b6de:	f7ff fe98 	bl	800b412 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6ea:	e01a      	b.n	800b722 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d114      	bne.n	800b722 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d00e      	beq.n	800b722 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b70a:	695b      	ldr	r3, [r3, #20]
 800b70c:	7afa      	ldrb	r2, [r7, #11]
 800b70e:	4611      	mov	r1, r2
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	4798      	blx	r3
 800b714:	4603      	mov	r3, r0
 800b716:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	e000      	b.n	800b724 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2200      	movs	r2, #0
 800b74e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d101      	bne.n	800b760 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e02f      	b.n	800b7c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b766:	2b00      	cmp	r3, #0
 800b768:	d00f      	beq.n	800b78a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d009      	beq.n	800b78a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	6852      	ldr	r2, [r2, #4]
 800b782:	b2d2      	uxtb	r2, r2
 800b784:	4611      	mov	r1, r2
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b78a:	2340      	movs	r3, #64	; 0x40
 800b78c:	2200      	movs	r2, #0
 800b78e:	2100      	movs	r1, #0
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f001 fa3c 	bl	800cc0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2240      	movs	r2, #64	; 0x40
 800b7a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b7a6:	2340      	movs	r3, #64	; 0x40
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2180      	movs	r1, #128	; 0x80
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f001 fa2e 	bl	800cc0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2240      	movs	r2, #64	; 0x40
 800b7bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	78fa      	ldrb	r2, [r7, #3]
 800b7d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b7da:	2300      	movs	r3, #0
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f6:	b2da      	uxtb	r2, r3
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2204      	movs	r2, #4
 800b802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b806:	2300      	movs	r3, #0
}
 800b808:	4618      	mov	r0, r3
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b822:	b2db      	uxtb	r3, r3
 800b824:	2b04      	cmp	r3, #4
 800b826:	d106      	bne.n	800b836 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b836:	2300      	movs	r3, #0
}
 800b838:	4618      	mov	r0, r3
 800b83a:	370c      	adds	r7, #12
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b856:	2303      	movs	r3, #3
 800b858:	e012      	b.n	800b880 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b03      	cmp	r3, #3
 800b864:	d10b      	bne.n	800b87e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d005      	beq.n	800b87e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	781b      	ldrb	r3, [r3, #0]
 800b898:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	3301      	adds	r3, #1
 800b89e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	781b      	ldrb	r3, [r3, #0]
 800b8a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b8a6:	8a3b      	ldrh	r3, [r7, #16]
 800b8a8:	021b      	lsls	r3, r3, #8
 800b8aa:	b21a      	sxth	r2, r3
 800b8ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b8b0:	4313      	orrs	r3, r2
 800b8b2:	b21b      	sxth	r3, r3
 800b8b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b8b6:	89fb      	ldrh	r3, [r7, #14]
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	371c      	adds	r7, #28
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b8da:	2b40      	cmp	r3, #64	; 0x40
 800b8dc:	d005      	beq.n	800b8ea <USBD_StdDevReq+0x26>
 800b8de:	2b40      	cmp	r3, #64	; 0x40
 800b8e0:	d853      	bhi.n	800b98a <USBD_StdDevReq+0xc6>
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00b      	beq.n	800b8fe <USBD_StdDevReq+0x3a>
 800b8e6:	2b20      	cmp	r3, #32
 800b8e8:	d14f      	bne.n	800b98a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	6839      	ldr	r1, [r7, #0]
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	4798      	blx	r3
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b8fc:	e04a      	b.n	800b994 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	785b      	ldrb	r3, [r3, #1]
 800b902:	2b09      	cmp	r3, #9
 800b904:	d83b      	bhi.n	800b97e <USBD_StdDevReq+0xba>
 800b906:	a201      	add	r2, pc, #4	; (adr r2, 800b90c <USBD_StdDevReq+0x48>)
 800b908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90c:	0800b961 	.word	0x0800b961
 800b910:	0800b975 	.word	0x0800b975
 800b914:	0800b97f 	.word	0x0800b97f
 800b918:	0800b96b 	.word	0x0800b96b
 800b91c:	0800b97f 	.word	0x0800b97f
 800b920:	0800b93f 	.word	0x0800b93f
 800b924:	0800b935 	.word	0x0800b935
 800b928:	0800b97f 	.word	0x0800b97f
 800b92c:	0800b957 	.word	0x0800b957
 800b930:	0800b949 	.word	0x0800b949
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b934:	6839      	ldr	r1, [r7, #0]
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f9de 	bl	800bcf8 <USBD_GetDescriptor>
          break;
 800b93c:	e024      	b.n	800b988 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f000 fb6d 	bl	800c020 <USBD_SetAddress>
          break;
 800b946:	e01f      	b.n	800b988 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b948:	6839      	ldr	r1, [r7, #0]
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fbac 	bl	800c0a8 <USBD_SetConfig>
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]
          break;
 800b954:	e018      	b.n	800b988 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b956:	6839      	ldr	r1, [r7, #0]
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 fc4b 	bl	800c1f4 <USBD_GetConfig>
          break;
 800b95e:	e013      	b.n	800b988 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b960:	6839      	ldr	r1, [r7, #0]
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fc7c 	bl	800c260 <USBD_GetStatus>
          break;
 800b968:	e00e      	b.n	800b988 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b96a:	6839      	ldr	r1, [r7, #0]
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 fcab 	bl	800c2c8 <USBD_SetFeature>
          break;
 800b972:	e009      	b.n	800b988 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b974:	6839      	ldr	r1, [r7, #0]
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fcba 	bl	800c2f0 <USBD_ClrFeature>
          break;
 800b97c:	e004      	b.n	800b988 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b97e:	6839      	ldr	r1, [r7, #0]
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f000 fd11 	bl	800c3a8 <USBD_CtlError>
          break;
 800b986:	bf00      	nop
      }
      break;
 800b988:	e004      	b.n	800b994 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 fd0b 	bl	800c3a8 <USBD_CtlError>
      break;
 800b992:	bf00      	nop
  }

  return ret;
 800b994:	7bfb      	ldrb	r3, [r7, #15]
}
 800b996:	4618      	mov	r0, r3
 800b998:	3710      	adds	r7, #16
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
 800b99e:	bf00      	nop

0800b9a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b9b6:	2b40      	cmp	r3, #64	; 0x40
 800b9b8:	d005      	beq.n	800b9c6 <USBD_StdItfReq+0x26>
 800b9ba:	2b40      	cmp	r3, #64	; 0x40
 800b9bc:	d82f      	bhi.n	800ba1e <USBD_StdItfReq+0x7e>
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d001      	beq.n	800b9c6 <USBD_StdItfReq+0x26>
 800b9c2:	2b20      	cmp	r3, #32
 800b9c4:	d12b      	bne.n	800ba1e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	2b02      	cmp	r3, #2
 800b9d2:	d81d      	bhi.n	800ba10 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	889b      	ldrh	r3, [r3, #4]
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d813      	bhi.n	800ba06 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	4798      	blx	r3
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	88db      	ldrh	r3, [r3, #6]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d110      	bne.n	800ba1a <USBD_StdItfReq+0x7a>
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10d      	bne.n	800ba1a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fd9d 	bl	800c53e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ba04:	e009      	b.n	800ba1a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fccd 	bl	800c3a8 <USBD_CtlError>
          break;
 800ba0e:	e004      	b.n	800ba1a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ba10:	6839      	ldr	r1, [r7, #0]
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fcc8 	bl	800c3a8 <USBD_CtlError>
          break;
 800ba18:	e000      	b.n	800ba1c <USBD_StdItfReq+0x7c>
          break;
 800ba1a:	bf00      	nop
      }
      break;
 800ba1c:	e004      	b.n	800ba28 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ba1e:	6839      	ldr	r1, [r7, #0]
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fcc1 	bl	800c3a8 <USBD_CtlError>
      break;
 800ba26:	bf00      	nop
  }

  return ret;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b084      	sub	sp, #16
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	889b      	ldrh	r3, [r3, #4]
 800ba44:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba4e:	2b40      	cmp	r3, #64	; 0x40
 800ba50:	d007      	beq.n	800ba62 <USBD_StdEPReq+0x30>
 800ba52:	2b40      	cmp	r3, #64	; 0x40
 800ba54:	f200 8145 	bhi.w	800bce2 <USBD_StdEPReq+0x2b0>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00c      	beq.n	800ba76 <USBD_StdEPReq+0x44>
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	f040 8140 	bne.w	800bce2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
      break;
 800ba74:	e13a      	b.n	800bcec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	2b03      	cmp	r3, #3
 800ba7c:	d007      	beq.n	800ba8e <USBD_StdEPReq+0x5c>
 800ba7e:	2b03      	cmp	r3, #3
 800ba80:	f300 8129 	bgt.w	800bcd6 <USBD_StdEPReq+0x2a4>
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d07f      	beq.n	800bb88 <USBD_StdEPReq+0x156>
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d03c      	beq.n	800bb06 <USBD_StdEPReq+0xd4>
 800ba8c:	e123      	b.n	800bcd6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d002      	beq.n	800baa0 <USBD_StdEPReq+0x6e>
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d016      	beq.n	800bacc <USBD_StdEPReq+0x9a>
 800ba9e:	e02c      	b.n	800bafa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00d      	beq.n	800bac2 <USBD_StdEPReq+0x90>
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b80      	cmp	r3, #128	; 0x80
 800baaa:	d00a      	beq.n	800bac2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 f8f1 	bl	800cc98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab6:	2180      	movs	r1, #128	; 0x80
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f001 f8ed 	bl	800cc98 <USBD_LL_StallEP>
 800babe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bac0:	e020      	b.n	800bb04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fc6f 	bl	800c3a8 <USBD_CtlError>
              break;
 800baca:	e01b      	b.n	800bb04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	885b      	ldrh	r3, [r3, #2]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10e      	bne.n	800baf2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <USBD_StdEPReq+0xc0>
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	2b80      	cmp	r3, #128	; 0x80
 800bade:	d008      	beq.n	800baf2 <USBD_StdEPReq+0xc0>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	88db      	ldrh	r3, [r3, #6]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d104      	bne.n	800baf2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 f8d3 	bl	800cc98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fd23 	bl	800c53e <USBD_CtlSendStatus>

              break;
 800baf8:	e004      	b.n	800bb04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fc53 	bl	800c3a8 <USBD_CtlError>
              break;
 800bb02:	bf00      	nop
          }
          break;
 800bb04:	e0ec      	b.n	800bce0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d002      	beq.n	800bb18 <USBD_StdEPReq+0xe6>
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d016      	beq.n	800bb44 <USBD_StdEPReq+0x112>
 800bb16:	e030      	b.n	800bb7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <USBD_StdEPReq+0x108>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b80      	cmp	r3, #128	; 0x80
 800bb22:	d00a      	beq.n	800bb3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f001 f8b5 	bl	800cc98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb2e:	2180      	movs	r1, #128	; 0x80
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 f8b1 	bl	800cc98 <USBD_LL_StallEP>
 800bb36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb38:	e025      	b.n	800bb86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fc33 	bl	800c3a8 <USBD_CtlError>
              break;
 800bb42:	e020      	b.n	800bb86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	885b      	ldrh	r3, [r3, #2]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d11b      	bne.n	800bb84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d004      	beq.n	800bb60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f001 f8bb 	bl	800ccd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fcec 	bl	800c53e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	6839      	ldr	r1, [r7, #0]
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	4798      	blx	r3
 800bb74:	4603      	mov	r3, r0
 800bb76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bb78:	e004      	b.n	800bb84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc13 	bl	800c3a8 <USBD_CtlError>
              break;
 800bb82:	e000      	b.n	800bb86 <USBD_StdEPReq+0x154>
              break;
 800bb84:	bf00      	nop
          }
          break;
 800bb86:	e0ab      	b.n	800bce0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d002      	beq.n	800bb9a <USBD_StdEPReq+0x168>
 800bb94:	2b03      	cmp	r3, #3
 800bb96:	d032      	beq.n	800bbfe <USBD_StdEPReq+0x1cc>
 800bb98:	e097      	b.n	800bcca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d007      	beq.n	800bbb0 <USBD_StdEPReq+0x17e>
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	2b80      	cmp	r3, #128	; 0x80
 800bba4:	d004      	beq.n	800bbb0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bba6:	6839      	ldr	r1, [r7, #0]
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 fbfd 	bl	800c3a8 <USBD_CtlError>
                break;
 800bbae:	e091      	b.n	800bcd4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	da0b      	bge.n	800bbd0 <USBD_StdEPReq+0x19e>
 800bbb8:	7bbb      	ldrb	r3, [r7, #14]
 800bbba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	3310      	adds	r3, #16
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	4413      	add	r3, r2
 800bbcc:	3304      	adds	r3, #4
 800bbce:	e00b      	b.n	800bbe8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2200      	movs	r2, #0
 800bbee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 fc47 	bl	800c48a <USBD_CtlSendData>
              break;
 800bbfc:	e06a      	b.n	800bcd4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bbfe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	da11      	bge.n	800bc2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	f003 020f 	and.w	r2, r3, #15
 800bc0c:	6879      	ldr	r1, [r7, #4]
 800bc0e:	4613      	mov	r3, r2
 800bc10:	009b      	lsls	r3, r3, #2
 800bc12:	4413      	add	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	440b      	add	r3, r1
 800bc18:	3324      	adds	r3, #36	; 0x24
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d117      	bne.n	800bc50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc20:	6839      	ldr	r1, [r7, #0]
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 fbc0 	bl	800c3a8 <USBD_CtlError>
                  break;
 800bc28:	e054      	b.n	800bcd4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc2a:	7bbb      	ldrb	r3, [r7, #14]
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d104      	bne.n	800bc50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc46:	6839      	ldr	r1, [r7, #0]
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fbad 	bl	800c3a8 <USBD_CtlError>
                  break;
 800bc4e:	e041      	b.n	800bcd4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	da0b      	bge.n	800bc70 <USBD_StdEPReq+0x23e>
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc5e:	4613      	mov	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	3310      	adds	r3, #16
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	3304      	adds	r3, #4
 800bc6e:	e00b      	b.n	800bc88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc70:	7bbb      	ldrb	r3, [r7, #14]
 800bc72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	4413      	add	r3, r2
 800bc86:	3304      	adds	r3, #4
 800bc88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <USBD_StdEPReq+0x264>
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	2b80      	cmp	r3, #128	; 0x80
 800bc94:	d103      	bne.n	800bc9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	601a      	str	r2, [r3, #0]
 800bc9c:	e00e      	b.n	800bcbc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc9e:	7bbb      	ldrb	r3, [r7, #14]
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f001 f836 	bl	800cd14 <USBD_LL_IsStallEP>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d003      	beq.n	800bcb6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	601a      	str	r2, [r3, #0]
 800bcb4:	e002      	b.n	800bcbc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	2202      	movs	r2, #2
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fbe1 	bl	800c48a <USBD_CtlSendData>
              break;
 800bcc8:	e004      	b.n	800bcd4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bcca:	6839      	ldr	r1, [r7, #0]
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fb6b 	bl	800c3a8 <USBD_CtlError>
              break;
 800bcd2:	bf00      	nop
          }
          break;
 800bcd4:	e004      	b.n	800bce0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bcd6:	6839      	ldr	r1, [r7, #0]
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f000 fb65 	bl	800c3a8 <USBD_CtlError>
          break;
 800bcde:	bf00      	nop
      }
      break;
 800bce0:	e004      	b.n	800bcec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bce2:	6839      	ldr	r1, [r7, #0]
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 fb5f 	bl	800c3a8 <USBD_CtlError>
      break;
 800bcea:	bf00      	nop
  }

  return ret;
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3710      	adds	r7, #16
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}
	...

0800bcf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd02:	2300      	movs	r3, #0
 800bd04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd06:	2300      	movs	r3, #0
 800bd08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	885b      	ldrh	r3, [r3, #2]
 800bd12:	0a1b      	lsrs	r3, r3, #8
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	3b01      	subs	r3, #1
 800bd18:	2b0e      	cmp	r3, #14
 800bd1a:	f200 8152 	bhi.w	800bfc2 <USBD_GetDescriptor+0x2ca>
 800bd1e:	a201      	add	r2, pc, #4	; (adr r2, 800bd24 <USBD_GetDescriptor+0x2c>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd95 	.word	0x0800bd95
 800bd28:	0800bdad 	.word	0x0800bdad
 800bd2c:	0800bded 	.word	0x0800bded
 800bd30:	0800bfc3 	.word	0x0800bfc3
 800bd34:	0800bfc3 	.word	0x0800bfc3
 800bd38:	0800bf63 	.word	0x0800bf63
 800bd3c:	0800bf8f 	.word	0x0800bf8f
 800bd40:	0800bfc3 	.word	0x0800bfc3
 800bd44:	0800bfc3 	.word	0x0800bfc3
 800bd48:	0800bfc3 	.word	0x0800bfc3
 800bd4c:	0800bfc3 	.word	0x0800bfc3
 800bd50:	0800bfc3 	.word	0x0800bfc3
 800bd54:	0800bfc3 	.word	0x0800bfc3
 800bd58:	0800bfc3 	.word	0x0800bfc3
 800bd5c:	0800bd61 	.word	0x0800bd61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd66:	69db      	ldr	r3, [r3, #28]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00b      	beq.n	800bd84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd72:	69db      	ldr	r3, [r3, #28]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	7c12      	ldrb	r2, [r2, #16]
 800bd78:	f107 0108 	add.w	r1, r7, #8
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd82:	e126      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd84:	6839      	ldr	r1, [r7, #0]
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f000 fb0e 	bl	800c3a8 <USBD_CtlError>
        err++;
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	72fb      	strb	r3, [r7, #11]
      break;
 800bd92:	e11e      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	7c12      	ldrb	r2, [r2, #16]
 800bda0:	f107 0108 	add.w	r1, r7, #8
 800bda4:	4610      	mov	r0, r2
 800bda6:	4798      	blx	r3
 800bda8:	60f8      	str	r0, [r7, #12]
      break;
 800bdaa:	e112      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	7c1b      	ldrb	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10d      	bne.n	800bdd0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbc:	f107 0208 	add.w	r2, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	2202      	movs	r2, #2
 800bdcc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdce:	e100      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd8:	f107 0208 	add.w	r2, r7, #8
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
 800bde0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	2202      	movs	r2, #2
 800bde8:	701a      	strb	r2, [r3, #0]
      break;
 800bdea:	e0f2      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	885b      	ldrh	r3, [r3, #2]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	f200 80ac 	bhi.w	800bf50 <USBD_GetDescriptor+0x258>
 800bdf8:	a201      	add	r2, pc, #4	; (adr r2, 800be00 <USBD_GetDescriptor+0x108>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800be19 	.word	0x0800be19
 800be04:	0800be4d 	.word	0x0800be4d
 800be08:	0800be81 	.word	0x0800be81
 800be0c:	0800beb5 	.word	0x0800beb5
 800be10:	0800bee9 	.word	0x0800bee9
 800be14:	0800bf1d 	.word	0x0800bf1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	7c12      	ldrb	r2, [r2, #16]
 800be30:	f107 0108 	add.w	r1, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be3a:	e091      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 fab2 	bl	800c3a8 <USBD_CtlError>
            err++;
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	3301      	adds	r3, #1
 800be48:	72fb      	strb	r3, [r7, #11]
          break;
 800be4a:	e089      	b.n	800bf60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e077      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa98 	bl	800c3a8 <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e06f      	b.n	800bf60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	7c12      	ldrb	r2, [r2, #16]
 800be98:	f107 0108 	add.w	r1, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bea2:	e05d      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fa7e 	bl	800c3a8 <USBD_CtlError>
            err++;
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	3301      	adds	r3, #1
 800beb0:	72fb      	strb	r3, [r7, #11]
          break;
 800beb2:	e055      	b.n	800bf60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	7c12      	ldrb	r2, [r2, #16]
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bed6:	e043      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa64 	bl	800c3a8 <USBD_CtlError>
            err++;
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	3301      	adds	r3, #1
 800bee4:	72fb      	strb	r3, [r7, #11]
          break;
 800bee6:	e03b      	b.n	800bf60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	7c12      	ldrb	r2, [r2, #16]
 800bf00:	f107 0108 	add.w	r1, r7, #8
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0a:	e029      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa4a 	bl	800c3a8 <USBD_CtlError>
            err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1a:	e021      	b.n	800bf60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	f107 0108 	add.w	r1, r7, #8
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf3e:	e00f      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa30 	bl	800c3a8 <USBD_CtlError>
            err++;
 800bf48:	7afb      	ldrb	r3, [r7, #11]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf4e:	e007      	b.n	800bf60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa28 	bl	800c3a8 <USBD_CtlError>
          err++;
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bf5e:	bf00      	nop
      }
      break;
 800bf60:	e037      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7c1b      	ldrb	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf72:	f107 0208 	add.w	r2, r7, #8
 800bf76:	4610      	mov	r0, r2
 800bf78:	4798      	blx	r3
 800bf7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf7c:	e029      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fa11 	bl	800c3a8 <USBD_CtlError>
        err++;
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf8c:	e021      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7c1b      	ldrb	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10d      	bne.n	800bfb2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9e:	f107 0208 	add.w	r2, r7, #8
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4798      	blx	r3
 800bfa6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	2207      	movs	r2, #7
 800bfae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfb0:	e00f      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 f9f7 	bl	800c3a8 <USBD_CtlError>
        err++;
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bfc0:	e007      	b.n	800bfd2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 f9ef 	bl	800c3a8 <USBD_CtlError>
      err++;
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	72fb      	strb	r3, [r7, #11]
      break;
 800bfd0:	bf00      	nop
  }

  if (err != 0U)
 800bfd2:	7afb      	ldrb	r3, [r7, #11]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11e      	bne.n	800c016 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	88db      	ldrh	r3, [r3, #6]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d016      	beq.n	800c00e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bfe0:	893b      	ldrh	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00e      	beq.n	800c004 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	88da      	ldrh	r2, [r3, #6]
 800bfea:	893b      	ldrh	r3, [r7, #8]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	bf28      	it	cs
 800bff0:	4613      	movcs	r3, r2
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bff6:	893b      	ldrh	r3, [r7, #8]
 800bff8:	461a      	mov	r2, r3
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fa44 	bl	800c48a <USBD_CtlSendData>
 800c002:	e009      	b.n	800c018 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f9ce 	bl	800c3a8 <USBD_CtlError>
 800c00c:	e004      	b.n	800c018 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fa95 	bl	800c53e <USBD_CtlSendStatus>
 800c014:	e000      	b.n	800c018 <USBD_GetDescriptor+0x320>
    return;
 800c016:	bf00      	nop
  }
}
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop

0800c020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	889b      	ldrh	r3, [r3, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d131      	bne.n	800c096 <USBD_SetAddress+0x76>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	88db      	ldrh	r3, [r3, #6]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d12d      	bne.n	800c096 <USBD_SetAddress+0x76>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	885b      	ldrh	r3, [r3, #2]
 800c03e:	2b7f      	cmp	r3, #127	; 0x7f
 800c040:	d829      	bhi.n	800c096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	885b      	ldrh	r3, [r3, #2]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c04c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b03      	cmp	r3, #3
 800c058:	d104      	bne.n	800c064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f9a3 	bl	800c3a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c062:	e01d      	b.n	800c0a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7bfa      	ldrb	r2, [r7, #15]
 800c068:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fe7c 	bl	800cd6e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa61 	bl	800c53e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2202      	movs	r2, #2
 800c086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08a:	e009      	b.n	800c0a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c094:	e004      	b.n	800c0a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f985 	bl	800c3a8 <USBD_CtlError>
  }
}
 800c09e:	bf00      	nop
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	885b      	ldrh	r3, [r3, #2]
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	4b4c      	ldr	r3, [pc, #304]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c0be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0c0:	4b4b      	ldr	r3, [pc, #300]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d905      	bls.n	800c0d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f96c 	bl	800c3a8 <USBD_CtlError>
    return USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e088      	b.n	800c1e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d002      	beq.n	800c0e6 <USBD_SetConfig+0x3e>
 800c0e0:	2b03      	cmp	r3, #3
 800c0e2:	d025      	beq.n	800c130 <USBD_SetConfig+0x88>
 800c0e4:	e071      	b.n	800c1ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0e6:	4b42      	ldr	r3, [pc, #264]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d01c      	beq.n	800c128 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c0ee:	4b40      	ldr	r3, [pc, #256]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0f8:	4b3d      	ldr	r3, [pc, #244]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff f992 	bl	800b428 <USBD_SetClassConfig>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d004      	beq.n	800c118 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f949 	bl	800c3a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c116:	e065      	b.n	800c1e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fa10 	bl	800c53e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2203      	movs	r2, #3
 800c122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c126:	e05d      	b.n	800c1e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c128:	6878      	ldr	r0, [r7, #4]
 800c12a:	f000 fa08 	bl	800c53e <USBD_CtlSendStatus>
      break;
 800c12e:	e059      	b.n	800c1e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c130:	4b2f      	ldr	r3, [pc, #188]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d112      	bne.n	800c15e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2202      	movs	r2, #2
 800c13c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c140:	4b2b      	ldr	r3, [pc, #172]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	461a      	mov	r2, r3
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c14a:	4b29      	ldr	r3, [pc, #164]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7ff f985 	bl	800b460 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f000 f9f1 	bl	800c53e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c15c:	e042      	b.n	800c1e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c15e:	4b24      	ldr	r3, [pc, #144]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	461a      	mov	r2, r3
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d02a      	beq.n	800c1c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	b2db      	uxtb	r3, r3
 800c172:	4619      	mov	r1, r3
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f7ff f973 	bl	800b460 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c17a:	4b1d      	ldr	r3, [pc, #116]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c184:	4b1a      	ldr	r3, [pc, #104]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff f94c 	bl	800b428 <USBD_SetClassConfig>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d00f      	beq.n	800c1ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c19a:	6839      	ldr	r1, [r7, #0]
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f000 f903 	bl	800c3a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f7ff f958 	bl	800b460 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2202      	movs	r2, #2
 800c1b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c1b8:	e014      	b.n	800c1e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f9bf 	bl	800c53e <USBD_CtlSendStatus>
      break;
 800c1c0:	e010      	b.n	800c1e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f9bb 	bl	800c53e <USBD_CtlSendStatus>
      break;
 800c1c8:	e00c      	b.n	800c1e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 f8eb 	bl	800c3a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1d2:	4b07      	ldr	r3, [pc, #28]	; (800c1f0 <USBD_SetConfig+0x148>)
 800c1d4:	781b      	ldrb	r3, [r3, #0]
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7ff f941 	bl	800b460 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c1e2:	bf00      	nop
  }

  return ret;
 800c1e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3710      	adds	r7, #16
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20000418 	.word	0x20000418

0800c1f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b082      	sub	sp, #8
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	88db      	ldrh	r3, [r3, #6]
 800c202:	2b01      	cmp	r3, #1
 800c204:	d004      	beq.n	800c210 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f000 f8cd 	bl	800c3a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c20e:	e023      	b.n	800c258 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b02      	cmp	r3, #2
 800c21a:	dc02      	bgt.n	800c222 <USBD_GetConfig+0x2e>
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dc03      	bgt.n	800c228 <USBD_GetConfig+0x34>
 800c220:	e015      	b.n	800c24e <USBD_GetConfig+0x5a>
 800c222:	2b03      	cmp	r3, #3
 800c224:	d00b      	beq.n	800c23e <USBD_GetConfig+0x4a>
 800c226:	e012      	b.n	800c24e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2200      	movs	r2, #0
 800c22c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	3308      	adds	r3, #8
 800c232:	2201      	movs	r2, #1
 800c234:	4619      	mov	r1, r3
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f927 	bl	800c48a <USBD_CtlSendData>
        break;
 800c23c:	e00c      	b.n	800c258 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	3304      	adds	r3, #4
 800c242:	2201      	movs	r2, #1
 800c244:	4619      	mov	r1, r3
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f91f 	bl	800c48a <USBD_CtlSendData>
        break;
 800c24c:	e004      	b.n	800c258 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c24e:	6839      	ldr	r1, [r7, #0]
 800c250:	6878      	ldr	r0, [r7, #4]
 800c252:	f000 f8a9 	bl	800c3a8 <USBD_CtlError>
        break;
 800c256:	bf00      	nop
}
 800c258:	bf00      	nop
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c270:	b2db      	uxtb	r3, r3
 800c272:	3b01      	subs	r3, #1
 800c274:	2b02      	cmp	r3, #2
 800c276:	d81e      	bhi.n	800c2b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	88db      	ldrh	r3, [r3, #6]
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d004      	beq.n	800c28a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c280:	6839      	ldr	r1, [r7, #0]
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f890 	bl	800c3a8 <USBD_CtlError>
        break;
 800c288:	e01a      	b.n	800c2c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c296:	2b00      	cmp	r3, #0
 800c298:	d005      	beq.n	800c2a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	f043 0202 	orr.w	r2, r3, #2
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	330c      	adds	r3, #12
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f8eb 	bl	800c48a <USBD_CtlSendData>
      break;
 800c2b4:	e004      	b.n	800c2c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 f875 	bl	800c3a8 <USBD_CtlError>
      break;
 800c2be:	bf00      	nop
  }
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	885b      	ldrh	r3, [r3, #2]
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d106      	bne.n	800c2e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2201      	movs	r2, #1
 800c2de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 f92b 	bl	800c53e <USBD_CtlSendStatus>
  }
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c300:	b2db      	uxtb	r3, r3
 800c302:	3b01      	subs	r3, #1
 800c304:	2b02      	cmp	r3, #2
 800c306:	d80b      	bhi.n	800c320 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	885b      	ldrh	r3, [r3, #2]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d10c      	bne.n	800c32a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2200      	movs	r2, #0
 800c314:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f910 	bl	800c53e <USBD_CtlSendStatus>
      }
      break;
 800c31e:	e004      	b.n	800c32a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c320:	6839      	ldr	r1, [r7, #0]
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f840 	bl	800c3a8 <USBD_CtlError>
      break;
 800c328:	e000      	b.n	800c32c <USBD_ClrFeature+0x3c>
      break;
 800c32a:	bf00      	nop
  }
}
 800c32c:	bf00      	nop
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	781a      	ldrb	r2, [r3, #0]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3301      	adds	r3, #1
 800c34e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	3301      	adds	r3, #1
 800c35c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c35e:	68f8      	ldr	r0, [r7, #12]
 800c360:	f7ff fa92 	bl	800b888 <SWAPBYTE>
 800c364:	4603      	mov	r3, r0
 800c366:	461a      	mov	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	3301      	adds	r3, #1
 800c370:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	3301      	adds	r3, #1
 800c376:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff fa85 	bl	800b888 <SWAPBYTE>
 800c37e:	4603      	mov	r3, r0
 800c380:	461a      	mov	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3301      	adds	r3, #1
 800c38a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	3301      	adds	r3, #1
 800c390:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f7ff fa78 	bl	800b888 <SWAPBYTE>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	80da      	strh	r2, [r3, #6]
}
 800c3a0:	bf00      	nop
 800c3a2:	3710      	adds	r7, #16
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3b2:	2180      	movs	r1, #128	; 0x80
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fc6f 	bl	800cc98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fc6b 	bl	800cc98 <USBD_LL_StallEP>
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}

0800c3ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3ca:	b580      	push	{r7, lr}
 800c3cc:	b086      	sub	sp, #24
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	60f8      	str	r0, [r7, #12]
 800c3d2:	60b9      	str	r1, [r7, #8]
 800c3d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d036      	beq.n	800c44e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c3e4:	6938      	ldr	r0, [r7, #16]
 800c3e6:	f000 f836 	bl	800c456 <USBD_GetLen>
 800c3ea:	4603      	mov	r3, r0
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	005b      	lsls	r3, r3, #1
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3f8:	7dfb      	ldrb	r3, [r7, #23]
 800c3fa:	68ba      	ldr	r2, [r7, #8]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	7812      	ldrb	r2, [r2, #0]
 800c402:	701a      	strb	r2, [r3, #0]
  idx++;
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	3301      	adds	r3, #1
 800c408:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	4413      	add	r3, r2
 800c410:	2203      	movs	r2, #3
 800c412:	701a      	strb	r2, [r3, #0]
  idx++;
 800c414:	7dfb      	ldrb	r3, [r7, #23]
 800c416:	3301      	adds	r3, #1
 800c418:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c41a:	e013      	b.n	800c444 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c41c:	7dfb      	ldrb	r3, [r7, #23]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	4413      	add	r3, r2
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	7812      	ldrb	r2, [r2, #0]
 800c426:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	3301      	adds	r3, #1
 800c42c:	613b      	str	r3, [r7, #16]
    idx++;
 800c42e:	7dfb      	ldrb	r3, [r7, #23]
 800c430:	3301      	adds	r3, #1
 800c432:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c434:	7dfb      	ldrb	r3, [r7, #23]
 800c436:	68ba      	ldr	r2, [r7, #8]
 800c438:	4413      	add	r3, r2
 800c43a:	2200      	movs	r2, #0
 800c43c:	701a      	strb	r2, [r3, #0]
    idx++;
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	3301      	adds	r3, #1
 800c442:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e7      	bne.n	800c41c <USBD_GetString+0x52>
 800c44c:	e000      	b.n	800c450 <USBD_GetString+0x86>
    return;
 800c44e:	bf00      	nop
  }
}
 800c450:	3718      	adds	r7, #24
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}

0800c456 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c456:	b480      	push	{r7}
 800c458:	b085      	sub	sp, #20
 800c45a:	af00      	add	r7, sp, #0
 800c45c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c466:	e005      	b.n	800c474 <USBD_GetLen+0x1e>
  {
    len++;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
 800c46a:	3301      	adds	r3, #1
 800c46c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	3301      	adds	r3, #1
 800c472:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d1f5      	bne.n	800c468 <USBD_GetLen+0x12>
  }

  return len;
 800c47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3714      	adds	r7, #20
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b084      	sub	sp, #16
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	2202      	movs	r2, #2
 800c49a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f000 fc7b 	bl	800cdac <USBD_LL_Transmit>

  return USBD_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	68ba      	ldr	r2, [r7, #8]
 800c4d0:	2100      	movs	r1, #0
 800c4d2:	68f8      	ldr	r0, [r7, #12]
 800c4d4:	f000 fc6a 	bl	800cdac <USBD_LL_Transmit>

  return USBD_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3710      	adds	r7, #16
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c4e2:	b580      	push	{r7, lr}
 800c4e4:	b084      	sub	sp, #16
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	60f8      	str	r0, [r7, #12]
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2203      	movs	r2, #3
 800c4f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	2100      	movs	r1, #0
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f000 fc6e 	bl	800cdee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	2100      	movs	r1, #0
 800c52e:	68f8      	ldr	r0, [r7, #12]
 800c530:	f000 fc5d 	bl	800cdee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}

0800c53e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c53e:	b580      	push	{r7, lr}
 800c540:	b082      	sub	sp, #8
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2204      	movs	r2, #4
 800c54a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c54e:	2300      	movs	r3, #0
 800c550:	2200      	movs	r2, #0
 800c552:	2100      	movs	r1, #0
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f000 fc29 	bl	800cdac <USBD_LL_Transmit>

  return USBD_OK;
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2205      	movs	r2, #5
 800c570:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c574:	2300      	movs	r3, #0
 800c576:	2200      	movs	r2, #0
 800c578:	2100      	movs	r1, #0
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fc37 	bl	800cdee <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c580:	2300      	movs	r3, #0
}
 800c582:	4618      	mov	r0, r3
 800c584:	3708      	adds	r7, #8
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
	...

0800c58c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c590:	2200      	movs	r2, #0
 800c592:	4912      	ldr	r1, [pc, #72]	; (800c5dc <MX_USB_Device_Init+0x50>)
 800c594:	4812      	ldr	r0, [pc, #72]	; (800c5e0 <MX_USB_Device_Init+0x54>)
 800c596:	f7fe fed9 	bl	800b34c <USBD_Init>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d001      	beq.n	800c5a4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c5a0:	f7f5 fb48 	bl	8001c34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c5a4:	490f      	ldr	r1, [pc, #60]	; (800c5e4 <MX_USB_Device_Init+0x58>)
 800c5a6:	480e      	ldr	r0, [pc, #56]	; (800c5e0 <MX_USB_Device_Init+0x54>)
 800c5a8:	f7fe ff00 	bl	800b3ac <USBD_RegisterClass>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c5b2:	f7f5 fb3f 	bl	8001c34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c5b6:	490c      	ldr	r1, [pc, #48]	; (800c5e8 <MX_USB_Device_Init+0x5c>)
 800c5b8:	4809      	ldr	r0, [pc, #36]	; (800c5e0 <MX_USB_Device_Init+0x54>)
 800c5ba:	f7fe fe51 	bl	800b260 <USBD_CDC_RegisterInterface>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d001      	beq.n	800c5c8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c5c4:	f7f5 fb36 	bl	8001c34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c5c8:	4805      	ldr	r0, [pc, #20]	; (800c5e0 <MX_USB_Device_Init+0x54>)
 800c5ca:	f7fe ff16 	bl	800b3fa <USBD_Start>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d001      	beq.n	800c5d8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c5d4:	f7f5 fb2e 	bl	8001c34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c5d8:	bf00      	nop
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	20000140 	.word	0x20000140
 800c5e0:	2000041c 	.word	0x2000041c
 800c5e4:	20000028 	.word	0x20000028
 800c5e8:	2000012c 	.word	0x2000012c

0800c5ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	4905      	ldr	r1, [pc, #20]	; (800c608 <CDC_Init_FS+0x1c>)
 800c5f4:	4805      	ldr	r0, [pc, #20]	; (800c60c <CDC_Init_FS+0x20>)
 800c5f6:	f7fe fe48 	bl	800b28a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5fa:	4905      	ldr	r1, [pc, #20]	; (800c610 <CDC_Init_FS+0x24>)
 800c5fc:	4803      	ldr	r0, [pc, #12]	; (800c60c <CDC_Init_FS+0x20>)
 800c5fe:	f7fe fe62 	bl	800b2c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c602:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c604:	4618      	mov	r0, r3
 800c606:	bd80      	pop	{r7, pc}
 800c608:	20000aec 	.word	0x20000aec
 800c60c:	2000041c 	.word	0x2000041c
 800c610:	200006ec 	.word	0x200006ec

0800c614 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c614:	b480      	push	{r7}
 800c616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c618:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c624:	b480      	push	{r7}
 800c626:	b083      	sub	sp, #12
 800c628:	af00      	add	r7, sp, #0
 800c62a:	4603      	mov	r3, r0
 800c62c:	6039      	str	r1, [r7, #0]
 800c62e:	71fb      	strb	r3, [r7, #7]
 800c630:	4613      	mov	r3, r2
 800c632:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c634:	79fb      	ldrb	r3, [r7, #7]
 800c636:	2b23      	cmp	r3, #35	; 0x23
 800c638:	d84a      	bhi.n	800c6d0 <CDC_Control_FS+0xac>
 800c63a:	a201      	add	r2, pc, #4	; (adr r2, 800c640 <CDC_Control_FS+0x1c>)
 800c63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c640:	0800c6d1 	.word	0x0800c6d1
 800c644:	0800c6d1 	.word	0x0800c6d1
 800c648:	0800c6d1 	.word	0x0800c6d1
 800c64c:	0800c6d1 	.word	0x0800c6d1
 800c650:	0800c6d1 	.word	0x0800c6d1
 800c654:	0800c6d1 	.word	0x0800c6d1
 800c658:	0800c6d1 	.word	0x0800c6d1
 800c65c:	0800c6d1 	.word	0x0800c6d1
 800c660:	0800c6d1 	.word	0x0800c6d1
 800c664:	0800c6d1 	.word	0x0800c6d1
 800c668:	0800c6d1 	.word	0x0800c6d1
 800c66c:	0800c6d1 	.word	0x0800c6d1
 800c670:	0800c6d1 	.word	0x0800c6d1
 800c674:	0800c6d1 	.word	0x0800c6d1
 800c678:	0800c6d1 	.word	0x0800c6d1
 800c67c:	0800c6d1 	.word	0x0800c6d1
 800c680:	0800c6d1 	.word	0x0800c6d1
 800c684:	0800c6d1 	.word	0x0800c6d1
 800c688:	0800c6d1 	.word	0x0800c6d1
 800c68c:	0800c6d1 	.word	0x0800c6d1
 800c690:	0800c6d1 	.word	0x0800c6d1
 800c694:	0800c6d1 	.word	0x0800c6d1
 800c698:	0800c6d1 	.word	0x0800c6d1
 800c69c:	0800c6d1 	.word	0x0800c6d1
 800c6a0:	0800c6d1 	.word	0x0800c6d1
 800c6a4:	0800c6d1 	.word	0x0800c6d1
 800c6a8:	0800c6d1 	.word	0x0800c6d1
 800c6ac:	0800c6d1 	.word	0x0800c6d1
 800c6b0:	0800c6d1 	.word	0x0800c6d1
 800c6b4:	0800c6d1 	.word	0x0800c6d1
 800c6b8:	0800c6d1 	.word	0x0800c6d1
 800c6bc:	0800c6d1 	.word	0x0800c6d1
 800c6c0:	0800c6d1 	.word	0x0800c6d1
 800c6c4:	0800c6d1 	.word	0x0800c6d1
 800c6c8:	0800c6d1 	.word	0x0800c6d1
 800c6cc:	0800c6d1 	.word	0x0800c6d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c6d0:	bf00      	nop
  }

  return (USBD_OK);
 800c6d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b082      	sub	sp, #8
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6ea:	6879      	ldr	r1, [r7, #4]
 800c6ec:	4805      	ldr	r0, [pc, #20]	; (800c704 <CDC_Receive_FS+0x24>)
 800c6ee:	f7fe fdea 	bl	800b2c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6f2:	4804      	ldr	r0, [pc, #16]	; (800c704 <CDC_Receive_FS+0x24>)
 800c6f4:	f7fe fe00 	bl	800b2f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c6f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3708      	adds	r7, #8
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bd80      	pop	{r7, pc}
 800c702:	bf00      	nop
 800c704:	2000041c 	.word	0x2000041c

0800c708 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c708:	b480      	push	{r7}
 800c70a:	b087      	sub	sp, #28
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	4613      	mov	r3, r2
 800c714:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c716:	2300      	movs	r3, #0
 800c718:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	371c      	adds	r7, #28
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
	...

0800c72c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	6039      	str	r1, [r7, #0]
 800c736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2212      	movs	r2, #18
 800c73c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c73e:	4b03      	ldr	r3, [pc, #12]	; (800c74c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c740:	4618      	mov	r0, r3
 800c742:	370c      	adds	r7, #12
 800c744:	46bd      	mov	sp, r7
 800c746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74a:	4770      	bx	lr
 800c74c:	20000160 	.word	0x20000160

0800c750 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
 800c756:	4603      	mov	r3, r0
 800c758:	6039      	str	r1, [r7, #0]
 800c75a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2204      	movs	r2, #4
 800c760:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c762:	4b03      	ldr	r3, [pc, #12]	; (800c770 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	20000174 	.word	0x20000174

0800c774 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	6039      	str	r1, [r7, #0]
 800c77e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c780:	79fb      	ldrb	r3, [r7, #7]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d105      	bne.n	800c792 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c786:	683a      	ldr	r2, [r7, #0]
 800c788:	4907      	ldr	r1, [pc, #28]	; (800c7a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c78a:	4808      	ldr	r0, [pc, #32]	; (800c7ac <USBD_CDC_ProductStrDescriptor+0x38>)
 800c78c:	f7ff fe1d 	bl	800c3ca <USBD_GetString>
 800c790:	e004      	b.n	800c79c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	4904      	ldr	r1, [pc, #16]	; (800c7a8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c796:	4805      	ldr	r0, [pc, #20]	; (800c7ac <USBD_CDC_ProductStrDescriptor+0x38>)
 800c798:	f7ff fe17 	bl	800c3ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800c79c:	4b02      	ldr	r3, [pc, #8]	; (800c7a8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20000eec 	.word	0x20000eec
 800c7ac:	0800ecf0 	.word	0x0800ecf0

0800c7b0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	6039      	str	r1, [r7, #0]
 800c7ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7bc:	683a      	ldr	r2, [r7, #0]
 800c7be:	4904      	ldr	r1, [pc, #16]	; (800c7d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c7c0:	4804      	ldr	r0, [pc, #16]	; (800c7d4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c7c2:	f7ff fe02 	bl	800c3ca <USBD_GetString>
  return USBD_StrDesc;
 800c7c6:	4b02      	ldr	r3, [pc, #8]	; (800c7d0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	3708      	adds	r7, #8
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	bd80      	pop	{r7, pc}
 800c7d0:	20000eec 	.word	0x20000eec
 800c7d4:	0800ed08 	.word	0x0800ed08

0800c7d8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	4603      	mov	r3, r0
 800c7e0:	6039      	str	r1, [r7, #0]
 800c7e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	221a      	movs	r2, #26
 800c7e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7ea:	f000 f843 	bl	800c874 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c7ee:	4b02      	ldr	r3, [pc, #8]	; (800c7f8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	20000178 	.word	0x20000178

0800c7fc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	4603      	mov	r3, r0
 800c804:	6039      	str	r1, [r7, #0]
 800c806:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c808:	79fb      	ldrb	r3, [r7, #7]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d105      	bne.n	800c81a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	4907      	ldr	r1, [pc, #28]	; (800c830 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c812:	4808      	ldr	r0, [pc, #32]	; (800c834 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c814:	f7ff fdd9 	bl	800c3ca <USBD_GetString>
 800c818:	e004      	b.n	800c824 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c81a:	683a      	ldr	r2, [r7, #0]
 800c81c:	4904      	ldr	r1, [pc, #16]	; (800c830 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c81e:	4805      	ldr	r0, [pc, #20]	; (800c834 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c820:	f7ff fdd3 	bl	800c3ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800c824:	4b02      	ldr	r3, [pc, #8]	; (800c830 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c826:	4618      	mov	r0, r3
 800c828:	3708      	adds	r7, #8
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}
 800c82e:	bf00      	nop
 800c830:	20000eec 	.word	0x20000eec
 800c834:	0800ed1c 	.word	0x0800ed1c

0800c838 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	4603      	mov	r3, r0
 800c840:	6039      	str	r1, [r7, #0]
 800c842:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c844:	79fb      	ldrb	r3, [r7, #7]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d105      	bne.n	800c856 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	4907      	ldr	r1, [pc, #28]	; (800c86c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c84e:	4808      	ldr	r0, [pc, #32]	; (800c870 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c850:	f7ff fdbb 	bl	800c3ca <USBD_GetString>
 800c854:	e004      	b.n	800c860 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	4904      	ldr	r1, [pc, #16]	; (800c86c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c85a:	4805      	ldr	r0, [pc, #20]	; (800c870 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c85c:	f7ff fdb5 	bl	800c3ca <USBD_GetString>
  }
  return USBD_StrDesc;
 800c860:	4b02      	ldr	r3, [pc, #8]	; (800c86c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c862:	4618      	mov	r0, r3
 800c864:	3708      	adds	r7, #8
 800c866:	46bd      	mov	sp, r7
 800c868:	bd80      	pop	{r7, pc}
 800c86a:	bf00      	nop
 800c86c:	20000eec 	.word	0x20000eec
 800c870:	0800ed28 	.word	0x0800ed28

0800c874 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c87a:	4b0f      	ldr	r3, [pc, #60]	; (800c8b8 <Get_SerialNum+0x44>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c880:	4b0e      	ldr	r3, [pc, #56]	; (800c8bc <Get_SerialNum+0x48>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c886:	4b0e      	ldr	r3, [pc, #56]	; (800c8c0 <Get_SerialNum+0x4c>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4413      	add	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d009      	beq.n	800c8ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c89a:	2208      	movs	r2, #8
 800c89c:	4909      	ldr	r1, [pc, #36]	; (800c8c4 <Get_SerialNum+0x50>)
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	f000 f814 	bl	800c8cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c8a4:	2204      	movs	r2, #4
 800c8a6:	4908      	ldr	r1, [pc, #32]	; (800c8c8 <Get_SerialNum+0x54>)
 800c8a8:	68b8      	ldr	r0, [r7, #8]
 800c8aa:	f000 f80f 	bl	800c8cc <IntToUnicode>
  }
}
 800c8ae:	bf00      	nop
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	1fff7590 	.word	0x1fff7590
 800c8bc:	1fff7594 	.word	0x1fff7594
 800c8c0:	1fff7598 	.word	0x1fff7598
 800c8c4:	2000017a 	.word	0x2000017a
 800c8c8:	2000018a 	.word	0x2000018a

0800c8cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	4613      	mov	r3, r2
 800c8d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8de:	2300      	movs	r3, #0
 800c8e0:	75fb      	strb	r3, [r7, #23]
 800c8e2:	e027      	b.n	800c934 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	0f1b      	lsrs	r3, r3, #28
 800c8e8:	2b09      	cmp	r3, #9
 800c8ea:	d80b      	bhi.n	800c904 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	0f1b      	lsrs	r3, r3, #28
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	005b      	lsls	r3, r3, #1
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	440b      	add	r3, r1
 800c8fc:	3230      	adds	r2, #48	; 0x30
 800c8fe:	b2d2      	uxtb	r2, r2
 800c900:	701a      	strb	r2, [r3, #0]
 800c902:	e00a      	b.n	800c91a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	0f1b      	lsrs	r3, r3, #28
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	7dfb      	ldrb	r3, [r7, #23]
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	4619      	mov	r1, r3
 800c910:	68bb      	ldr	r3, [r7, #8]
 800c912:	440b      	add	r3, r1
 800c914:	3237      	adds	r2, #55	; 0x37
 800c916:	b2d2      	uxtb	r2, r2
 800c918:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	011b      	lsls	r3, r3, #4
 800c91e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	3301      	adds	r3, #1
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	4413      	add	r3, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c92e:	7dfb      	ldrb	r3, [r7, #23]
 800c930:	3301      	adds	r3, #1
 800c932:	75fb      	strb	r3, [r7, #23]
 800c934:	7dfa      	ldrb	r2, [r7, #23]
 800c936:	79fb      	ldrb	r3, [r7, #7]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d3d3      	bcc.n	800c8e4 <IntToUnicode+0x18>
  }
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	371c      	adds	r7, #28
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
	...

0800c94c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b094      	sub	sp, #80	; 0x50
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c954:	f107 030c 	add.w	r3, r7, #12
 800c958:	2244      	movs	r2, #68	; 0x44
 800c95a:	2100      	movs	r1, #0
 800c95c:	4618      	mov	r0, r3
 800c95e:	f001 fd27 	bl	800e3b0 <memset>
  if(pcdHandle->Instance==USB)
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a15      	ldr	r2, [pc, #84]	; (800c9bc <HAL_PCD_MspInit+0x70>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d123      	bne.n	800c9b4 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c96c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c970:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800c972:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c976:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c978:	f107 030c 	add.w	r3, r7, #12
 800c97c:	4618      	mov	r0, r3
 800c97e:	f7f9 fb39 	bl	8005ff4 <HAL_RCCEx_PeriphCLKConfig>
 800c982:	4603      	mov	r3, r0
 800c984:	2b00      	cmp	r3, #0
 800c986:	d001      	beq.n	800c98c <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800c988:	f7f5 f954 	bl	8001c34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c98c:	4b0c      	ldr	r3, [pc, #48]	; (800c9c0 <HAL_PCD_MspInit+0x74>)
 800c98e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c990:	4a0b      	ldr	r2, [pc, #44]	; (800c9c0 <HAL_PCD_MspInit+0x74>)
 800c992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c996:	6593      	str	r3, [r2, #88]	; 0x58
 800c998:	4b09      	ldr	r3, [pc, #36]	; (800c9c0 <HAL_PCD_MspInit+0x74>)
 800c99a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c99c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9a0:	60bb      	str	r3, [r7, #8]
 800c9a2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	2100      	movs	r1, #0
 800c9a8:	2014      	movs	r0, #20
 800c9aa:	f7f6 fe1e 	bl	80035ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c9ae:	2014      	movs	r0, #20
 800c9b0:	f7f6 fe35 	bl	800361e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9b4:	bf00      	nop
 800c9b6:	3750      	adds	r7, #80	; 0x50
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}
 800c9bc:	40005c00 	.word	0x40005c00
 800c9c0:	40021000 	.word	0x40021000

0800c9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7fe fd58 	bl	800b490 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800c9fa:	78fa      	ldrb	r2, [r7, #3]
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	00db      	lsls	r3, r3, #3
 800ca06:	440b      	add	r3, r1
 800ca08:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	4619      	mov	r1, r3
 800ca12:	f7fe fd92 	bl	800b53a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ca16:	bf00      	nop
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b082      	sub	sp, #8
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800ca30:	78fa      	ldrb	r2, [r7, #3]
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	440b      	add	r3, r1
 800ca3e:	333c      	adds	r3, #60	; 0x3c
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	78fb      	ldrb	r3, [r7, #3]
 800ca44:	4619      	mov	r1, r3
 800ca46:	f7fe fddb 	bl	800b600 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b082      	sub	sp, #8
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fe feef 	bl	800b844 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b084      	sub	sp, #16
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca76:	2301      	movs	r3, #1
 800ca78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d001      	beq.n	800ca86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca82:	f7f5 f8d7 	bl	8001c34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ca8c:	7bfa      	ldrb	r2, [r7, #15]
 800ca8e:	4611      	mov	r1, r2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fe fe99 	bl	800b7c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fe45 	bl	800b72c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800caa2:	bf00      	nop
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fe94 	bl	800b7e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d005      	beq.n	800cad4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <HAL_PCD_SuspendCallback+0x30>)
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	4a03      	ldr	r2, [pc, #12]	; (800cadc <HAL_PCD_SuspendCallback+0x30>)
 800cace:	f043 0306 	orr.w	r3, r3, #6
 800cad2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cad4:	bf00      	nop
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	e000ed00 	.word	0xe000ed00

0800cae0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	699b      	ldr	r3, [r3, #24]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800caf0:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <HAL_PCD_ResumeCallback+0x34>)
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	4a07      	ldr	r2, [pc, #28]	; (800cb14 <HAL_PCD_ResumeCallback+0x34>)
 800caf6:	f023 0306 	bic.w	r3, r3, #6
 800cafa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cafc:	f000 f9fa 	bl	800cef4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fe84 	bl	800b814 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cb0c:	bf00      	nop
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	e000ed00 	.word	0xe000ed00

0800cb18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cb20:	4a2b      	ldr	r2, [pc, #172]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a29      	ldr	r2, [pc, #164]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cb30:	4b27      	ldr	r3, [pc, #156]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb32:	4a28      	ldr	r2, [pc, #160]	; (800cbd4 <USBD_LL_Init+0xbc>)
 800cb34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb36:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb38:	2208      	movs	r2, #8
 800cb3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb3c:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb3e:	2202      	movs	r2, #2
 800cb40:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb42:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb44:	2202      	movs	r2, #2
 800cb46:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cb48:	4b21      	ldr	r3, [pc, #132]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb4e:	4b20      	ldr	r3, [pc, #128]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb54:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb60:	481b      	ldr	r0, [pc, #108]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb62:	f7f6 ff2b 	bl	80039bc <HAL_PCD_Init>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cb6c:	f7f5 f862 	bl	8001c34 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb76:	2318      	movs	r3, #24
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	f7f8 fbe4 	bl	8005348 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb86:	2358      	movs	r3, #88	; 0x58
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2180      	movs	r1, #128	; 0x80
 800cb8c:	f7f8 fbdc 	bl	8005348 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb96:	23c0      	movs	r3, #192	; 0xc0
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2181      	movs	r1, #129	; 0x81
 800cb9c:	f7f8 fbd4 	bl	8005348 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cba6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2101      	movs	r1, #1
 800cbae:	f7f8 fbcb 	bl	8005348 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2182      	movs	r1, #130	; 0x82
 800cbc0:	f7f8 fbc2 	bl	8005348 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200010ec 	.word	0x200010ec
 800cbd4:	40005c00 	.word	0x40005c00

0800cbd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f6 ffc9 	bl	8003b86 <HAL_PCD_Start>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f980 	bl	800cf00 <USBD_Get_USB_Status>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	4608      	mov	r0, r1
 800cc18:	4611      	mov	r1, r2
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	70fb      	strb	r3, [r7, #3]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70bb      	strb	r3, [r7, #2]
 800cc24:	4613      	mov	r3, r2
 800cc26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc36:	78bb      	ldrb	r3, [r7, #2]
 800cc38:	883a      	ldrh	r2, [r7, #0]
 800cc3a:	78f9      	ldrb	r1, [r7, #3]
 800cc3c:	f7f7 f911 	bl	8003e62 <HAL_PCD_EP_Open>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 f95a 	bl	800cf00 <USBD_Get_USB_Status>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc74:	78fa      	ldrb	r2, [r7, #3]
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7f7 f958 	bl	8003f2e <HAL_PCD_EP_Close>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 f93b 	bl	800cf00 <USBD_Get_USB_Status>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f7 fa19 	bl	80040ee <HAL_PCD_EP_SetStall>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 f91c 	bl	800cf00 <USBD_Get_USB_Status>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b084      	sub	sp, #16
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccf0:	78fa      	ldrb	r2, [r7, #3]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f7 fa4c 	bl	8004192 <HAL_PCD_EP_ClrStall>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f8fd 	bl	800cf00 <USBD_Get_USB_Status>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	da0c      	bge.n	800cd4a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd30:	78fb      	ldrb	r3, [r7, #3]
 800cd32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	1c5a      	adds	r2, r3, #1
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	00db      	lsls	r3, r3, #3
 800cd42:	440b      	add	r3, r1
 800cd44:	3302      	adds	r3, #2
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	e00b      	b.n	800cd62 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd50:	68f9      	ldr	r1, [r7, #12]
 800cd52:	4613      	mov	r3, r2
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	00db      	lsls	r3, r3, #3
 800cd5a:	440b      	add	r3, r1
 800cd5c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800cd60:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd6e:	b580      	push	{r7, lr}
 800cd70:	b084      	sub	sp, #16
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	460b      	mov	r3, r1
 800cd78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd88:	78fa      	ldrb	r2, [r7, #3]
 800cd8a:	4611      	mov	r1, r2
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	f7f7 f843 	bl	8003e18 <HAL_PCD_SetAddress>
 800cd92:	4603      	mov	r3, r0
 800cd94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd96:	7bfb      	ldrb	r3, [r7, #15]
 800cd98:	4618      	mov	r0, r3
 800cd9a:	f000 f8b1 	bl	800cf00 <USBD_Get_USB_Status>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	607a      	str	r2, [r7, #4]
 800cdb6:	603b      	str	r3, [r7, #0]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cdca:	7af9      	ldrb	r1, [r7, #11]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	f7f7 f94a 	bl	8004068 <HAL_PCD_EP_Transmit>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd8:	7dfb      	ldrb	r3, [r7, #23]
 800cdda:	4618      	mov	r0, r3
 800cddc:	f000 f890 	bl	800cf00 <USBD_Get_USB_Status>
 800cde0:	4603      	mov	r3, r0
 800cde2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cde4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}

0800cdee <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b086      	sub	sp, #24
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	607a      	str	r2, [r7, #4]
 800cdf8:	603b      	str	r3, [r7, #0]
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce0c:	7af9      	ldrb	r1, [r7, #11]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	f7f7 f8d4 	bl	8003fbe <HAL_PCD_EP_Receive>
 800ce16:	4603      	mov	r3, r0
 800ce18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce1a:	7dfb      	ldrb	r3, [r7, #23]
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 f86f 	bl	800cf00 <USBD_Get_USB_Status>
 800ce22:	4603      	mov	r3, r0
 800ce24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce26:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3718      	adds	r7, #24
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce42:	78fa      	ldrb	r2, [r7, #3]
 800ce44:	4611      	mov	r1, r2
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7f7 f8f6 	bl	8004038 <HAL_PCD_EP_GetRxCount>
 800ce4c:	4603      	mov	r3, r0
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}
	...

0800ce58 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	460b      	mov	r3, r1
 800ce62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ce64:	78fb      	ldrb	r3, [r7, #3]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d002      	beq.n	800ce70 <HAL_PCDEx_LPM_Callback+0x18>
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d013      	beq.n	800ce96 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ce6e:	e023      	b.n	800ceb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	699b      	ldr	r3, [r3, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d007      	beq.n	800ce88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce78:	f000 f83c 	bl	800cef4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce7c:	4b10      	ldr	r3, [pc, #64]	; (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	4a0f      	ldr	r2, [pc, #60]	; (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ce82:	f023 0306 	bic.w	r3, r3, #6
 800ce86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7fe fcc0 	bl	800b814 <USBD_LL_Resume>
    break;
 800ce94:	e010      	b.n	800ceb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fca3 	bl	800b7e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	699b      	ldr	r3, [r3, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d005      	beq.n	800ceb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ceaa:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	4a04      	ldr	r2, [pc, #16]	; (800cec0 <HAL_PCDEx_LPM_Callback+0x68>)
 800ceb0:	f043 0306 	orr.w	r3, r3, #6
 800ceb4:	6113      	str	r3, [r2, #16]
    break;
 800ceb6:	bf00      	nop
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	e000ed00 	.word	0xe000ed00

0800cec4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cecc:	4b03      	ldr	r3, [pc, #12]	; (800cedc <USBD_static_malloc+0x18>)
}
 800cece:	4618      	mov	r0, r3
 800ced0:	370c      	adds	r7, #12
 800ced2:	46bd      	mov	sp, r7
 800ced4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	200013e0 	.word	0x200013e0

0800cee0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]

}
 800cee8:	bf00      	nop
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cef8:	f7f4 fb84 	bl	8001604 <SystemClock_Config>
}
 800cefc:	bf00      	nop
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	4603      	mov	r3, r0
 800cf08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	2b03      	cmp	r3, #3
 800cf12:	d817      	bhi.n	800cf44 <USBD_Get_USB_Status+0x44>
 800cf14:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <USBD_Get_USB_Status+0x1c>)
 800cf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1a:	bf00      	nop
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf33 	.word	0x0800cf33
 800cf24:	0800cf39 	.word	0x0800cf39
 800cf28:	0800cf3f 	.word	0x0800cf3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73fb      	strb	r3, [r7, #15]
    break;
 800cf30:	e00b      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf32:	2303      	movs	r3, #3
 800cf34:	73fb      	strb	r3, [r7, #15]
    break;
 800cf36:	e008      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3c:	e005      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf3e:	2303      	movs	r3, #3
 800cf40:	73fb      	strb	r3, [r7, #15]
    break;
 800cf42:	e002      	b.n	800cf4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf44:	2303      	movs	r3, #3
 800cf46:	73fb      	strb	r3, [r7, #15]
    break;
 800cf48:	bf00      	nop
  }
  return usb_status;
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <cos>:
 800cf58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cf5a:	ec53 2b10 	vmov	r2, r3, d0
 800cf5e:	4826      	ldr	r0, [pc, #152]	; (800cff8 <cos+0xa0>)
 800cf60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cf64:	4281      	cmp	r1, r0
 800cf66:	dc06      	bgt.n	800cf76 <cos+0x1e>
 800cf68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800cff0 <cos+0x98>
 800cf6c:	b005      	add	sp, #20
 800cf6e:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf72:	f000 bc0d 	b.w	800d790 <__kernel_cos>
 800cf76:	4821      	ldr	r0, [pc, #132]	; (800cffc <cos+0xa4>)
 800cf78:	4281      	cmp	r1, r0
 800cf7a:	dd09      	ble.n	800cf90 <cos+0x38>
 800cf7c:	ee10 0a10 	vmov	r0, s0
 800cf80:	4619      	mov	r1, r3
 800cf82:	f7f3 f9a9 	bl	80002d8 <__aeabi_dsub>
 800cf86:	ec41 0b10 	vmov	d0, r0, r1
 800cf8a:	b005      	add	sp, #20
 800cf8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800cf90:	4668      	mov	r0, sp
 800cf92:	f000 f9f1 	bl	800d378 <__ieee754_rem_pio2>
 800cf96:	f000 0003 	and.w	r0, r0, #3
 800cf9a:	2801      	cmp	r0, #1
 800cf9c:	d00b      	beq.n	800cfb6 <cos+0x5e>
 800cf9e:	2802      	cmp	r0, #2
 800cfa0:	d016      	beq.n	800cfd0 <cos+0x78>
 800cfa2:	b9e0      	cbnz	r0, 800cfde <cos+0x86>
 800cfa4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfa8:	ed9d 0b00 	vldr	d0, [sp]
 800cfac:	f000 fbf0 	bl	800d790 <__kernel_cos>
 800cfb0:	ec51 0b10 	vmov	r0, r1, d0
 800cfb4:	e7e7      	b.n	800cf86 <cos+0x2e>
 800cfb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfba:	ed9d 0b00 	vldr	d0, [sp]
 800cfbe:	f000 ffff 	bl	800dfc0 <__kernel_sin>
 800cfc2:	ec53 2b10 	vmov	r2, r3, d0
 800cfc6:	ee10 0a10 	vmov	r0, s0
 800cfca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800cfce:	e7da      	b.n	800cf86 <cos+0x2e>
 800cfd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfd4:	ed9d 0b00 	vldr	d0, [sp]
 800cfd8:	f000 fbda 	bl	800d790 <__kernel_cos>
 800cfdc:	e7f1      	b.n	800cfc2 <cos+0x6a>
 800cfde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cfe2:	ed9d 0b00 	vldr	d0, [sp]
 800cfe6:	2001      	movs	r0, #1
 800cfe8:	f000 ffea 	bl	800dfc0 <__kernel_sin>
 800cfec:	e7e0      	b.n	800cfb0 <cos+0x58>
 800cfee:	bf00      	nop
	...
 800cff8:	3fe921fb 	.word	0x3fe921fb
 800cffc:	7fefffff 	.word	0x7fefffff

0800d000 <sin>:
 800d000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d002:	ec53 2b10 	vmov	r2, r3, d0
 800d006:	4828      	ldr	r0, [pc, #160]	; (800d0a8 <sin+0xa8>)
 800d008:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d00c:	4281      	cmp	r1, r0
 800d00e:	dc07      	bgt.n	800d020 <sin+0x20>
 800d010:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800d0a0 <sin+0xa0>
 800d014:	2000      	movs	r0, #0
 800d016:	b005      	add	sp, #20
 800d018:	f85d eb04 	ldr.w	lr, [sp], #4
 800d01c:	f000 bfd0 	b.w	800dfc0 <__kernel_sin>
 800d020:	4822      	ldr	r0, [pc, #136]	; (800d0ac <sin+0xac>)
 800d022:	4281      	cmp	r1, r0
 800d024:	dd09      	ble.n	800d03a <sin+0x3a>
 800d026:	ee10 0a10 	vmov	r0, s0
 800d02a:	4619      	mov	r1, r3
 800d02c:	f7f3 f954 	bl	80002d8 <__aeabi_dsub>
 800d030:	ec41 0b10 	vmov	d0, r0, r1
 800d034:	b005      	add	sp, #20
 800d036:	f85d fb04 	ldr.w	pc, [sp], #4
 800d03a:	4668      	mov	r0, sp
 800d03c:	f000 f99c 	bl	800d378 <__ieee754_rem_pio2>
 800d040:	f000 0003 	and.w	r0, r0, #3
 800d044:	2801      	cmp	r0, #1
 800d046:	d00c      	beq.n	800d062 <sin+0x62>
 800d048:	2802      	cmp	r0, #2
 800d04a:	d011      	beq.n	800d070 <sin+0x70>
 800d04c:	b9f0      	cbnz	r0, 800d08c <sin+0x8c>
 800d04e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d052:	ed9d 0b00 	vldr	d0, [sp]
 800d056:	2001      	movs	r0, #1
 800d058:	f000 ffb2 	bl	800dfc0 <__kernel_sin>
 800d05c:	ec51 0b10 	vmov	r0, r1, d0
 800d060:	e7e6      	b.n	800d030 <sin+0x30>
 800d062:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d066:	ed9d 0b00 	vldr	d0, [sp]
 800d06a:	f000 fb91 	bl	800d790 <__kernel_cos>
 800d06e:	e7f5      	b.n	800d05c <sin+0x5c>
 800d070:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d074:	ed9d 0b00 	vldr	d0, [sp]
 800d078:	2001      	movs	r0, #1
 800d07a:	f000 ffa1 	bl	800dfc0 <__kernel_sin>
 800d07e:	ec53 2b10 	vmov	r2, r3, d0
 800d082:	ee10 0a10 	vmov	r0, s0
 800d086:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d08a:	e7d1      	b.n	800d030 <sin+0x30>
 800d08c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d090:	ed9d 0b00 	vldr	d0, [sp]
 800d094:	f000 fb7c 	bl	800d790 <__kernel_cos>
 800d098:	e7f1      	b.n	800d07e <sin+0x7e>
 800d09a:	bf00      	nop
 800d09c:	f3af 8000 	nop.w
	...
 800d0a8:	3fe921fb 	.word	0x3fe921fb
 800d0ac:	7fefffff 	.word	0x7fefffff

0800d0b0 <roundf>:
 800d0b0:	ee10 0a10 	vmov	r0, s0
 800d0b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d0b8:	3a7f      	subs	r2, #127	; 0x7f
 800d0ba:	2a16      	cmp	r2, #22
 800d0bc:	dc15      	bgt.n	800d0ea <roundf+0x3a>
 800d0be:	2a00      	cmp	r2, #0
 800d0c0:	da08      	bge.n	800d0d4 <roundf+0x24>
 800d0c2:	3201      	adds	r2, #1
 800d0c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d0c8:	d101      	bne.n	800d0ce <roundf+0x1e>
 800d0ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d0ce:	ee00 3a10 	vmov	s0, r3
 800d0d2:	4770      	bx	lr
 800d0d4:	4907      	ldr	r1, [pc, #28]	; (800d0f4 <roundf+0x44>)
 800d0d6:	4111      	asrs	r1, r2
 800d0d8:	4208      	tst	r0, r1
 800d0da:	d0fa      	beq.n	800d0d2 <roundf+0x22>
 800d0dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0e0:	4113      	asrs	r3, r2
 800d0e2:	4403      	add	r3, r0
 800d0e4:	ea23 0301 	bic.w	r3, r3, r1
 800d0e8:	e7f1      	b.n	800d0ce <roundf+0x1e>
 800d0ea:	2a80      	cmp	r2, #128	; 0x80
 800d0ec:	d1f1      	bne.n	800d0d2 <roundf+0x22>
 800d0ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d0f2:	4770      	bx	lr
 800d0f4:	007fffff 	.word	0x007fffff

0800d0f8 <fmod>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	ed2d 8b02 	vpush	{d8}
 800d0fe:	ec57 6b10 	vmov	r6, r7, d0
 800d102:	ec55 4b11 	vmov	r4, r5, d1
 800d106:	f000 f825 	bl	800d154 <__ieee754_fmod>
 800d10a:	4622      	mov	r2, r4
 800d10c:	462b      	mov	r3, r5
 800d10e:	4630      	mov	r0, r6
 800d110:	4639      	mov	r1, r7
 800d112:	eeb0 8a40 	vmov.f32	s16, s0
 800d116:	eef0 8a60 	vmov.f32	s17, s1
 800d11a:	f7f3 fd2f 	bl	8000b7c <__aeabi_dcmpun>
 800d11e:	b990      	cbnz	r0, 800d146 <fmod+0x4e>
 800d120:	2200      	movs	r2, #0
 800d122:	2300      	movs	r3, #0
 800d124:	4620      	mov	r0, r4
 800d126:	4629      	mov	r1, r5
 800d128:	f7f3 fcf6 	bl	8000b18 <__aeabi_dcmpeq>
 800d12c:	b158      	cbz	r0, 800d146 <fmod+0x4e>
 800d12e:	f001 f915 	bl	800e35c <__errno>
 800d132:	2321      	movs	r3, #33	; 0x21
 800d134:	6003      	str	r3, [r0, #0]
 800d136:	2200      	movs	r2, #0
 800d138:	2300      	movs	r3, #0
 800d13a:	4610      	mov	r0, r2
 800d13c:	4619      	mov	r1, r3
 800d13e:	f7f3 fbad 	bl	800089c <__aeabi_ddiv>
 800d142:	ec41 0b18 	vmov	d8, r0, r1
 800d146:	eeb0 0a48 	vmov.f32	s0, s16
 800d14a:	eef0 0a68 	vmov.f32	s1, s17
 800d14e:	ecbd 8b02 	vpop	{d8}
 800d152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d154 <__ieee754_fmod>:
 800d154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d158:	ec53 2b11 	vmov	r2, r3, d1
 800d15c:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800d160:	ea5e 0402 	orrs.w	r4, lr, r2
 800d164:	ec51 0b10 	vmov	r0, r1, d0
 800d168:	ee11 7a10 	vmov	r7, s2
 800d16c:	ee11 ca10 	vmov	ip, s2
 800d170:	461e      	mov	r6, r3
 800d172:	d00d      	beq.n	800d190 <__ieee754_fmod+0x3c>
 800d174:	4c7a      	ldr	r4, [pc, #488]	; (800d360 <__ieee754_fmod+0x20c>)
 800d176:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800d17a:	45a0      	cmp	r8, r4
 800d17c:	4689      	mov	r9, r1
 800d17e:	dc07      	bgt.n	800d190 <__ieee754_fmod+0x3c>
 800d180:	4254      	negs	r4, r2
 800d182:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800d36c <__ieee754_fmod+0x218>
 800d186:	4314      	orrs	r4, r2
 800d188:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800d18c:	455c      	cmp	r4, fp
 800d18e:	d909      	bls.n	800d1a4 <__ieee754_fmod+0x50>
 800d190:	f7f3 fa5a 	bl	8000648 <__aeabi_dmul>
 800d194:	4602      	mov	r2, r0
 800d196:	460b      	mov	r3, r1
 800d198:	f7f3 fb80 	bl	800089c <__aeabi_ddiv>
 800d19c:	ec41 0b10 	vmov	d0, r0, r1
 800d1a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a4:	45f0      	cmp	r8, lr
 800d1a6:	ee10 aa10 	vmov	sl, s0
 800d1aa:	ee10 4a10 	vmov	r4, s0
 800d1ae:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800d1b2:	dc09      	bgt.n	800d1c8 <__ieee754_fmod+0x74>
 800d1b4:	dbf2      	blt.n	800d19c <__ieee754_fmod+0x48>
 800d1b6:	4290      	cmp	r0, r2
 800d1b8:	d3f0      	bcc.n	800d19c <__ieee754_fmod+0x48>
 800d1ba:	d105      	bne.n	800d1c8 <__ieee754_fmod+0x74>
 800d1bc:	4b69      	ldr	r3, [pc, #420]	; (800d364 <__ieee754_fmod+0x210>)
 800d1be:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800d1c2:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d1c6:	e7e9      	b.n	800d19c <__ieee754_fmod+0x48>
 800d1c8:	ea19 0f0b 	tst.w	r9, fp
 800d1cc:	d14a      	bne.n	800d264 <__ieee754_fmod+0x110>
 800d1ce:	f1b8 0f00 	cmp.w	r8, #0
 800d1d2:	d13f      	bne.n	800d254 <__ieee754_fmod+0x100>
 800d1d4:	4964      	ldr	r1, [pc, #400]	; (800d368 <__ieee754_fmod+0x214>)
 800d1d6:	4653      	mov	r3, sl
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	dc38      	bgt.n	800d24e <__ieee754_fmod+0xfa>
 800d1dc:	4b63      	ldr	r3, [pc, #396]	; (800d36c <__ieee754_fmod+0x218>)
 800d1de:	4033      	ands	r3, r6
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d14f      	bne.n	800d284 <__ieee754_fmod+0x130>
 800d1e4:	f1be 0f00 	cmp.w	lr, #0
 800d1e8:	d144      	bne.n	800d274 <__ieee754_fmod+0x120>
 800d1ea:	4a5f      	ldr	r2, [pc, #380]	; (800d368 <__ieee754_fmod+0x214>)
 800d1ec:	463b      	mov	r3, r7
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	dc3d      	bgt.n	800d26e <__ieee754_fmod+0x11a>
 800d1f2:	4b5f      	ldr	r3, [pc, #380]	; (800d370 <__ieee754_fmod+0x21c>)
 800d1f4:	4299      	cmp	r1, r3
 800d1f6:	db4a      	blt.n	800d28e <__ieee754_fmod+0x13a>
 800d1f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d200:	485b      	ldr	r0, [pc, #364]	; (800d370 <__ieee754_fmod+0x21c>)
 800d202:	4282      	cmp	r2, r0
 800d204:	db57      	blt.n	800d2b6 <__ieee754_fmod+0x162>
 800d206:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d20a:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800d20e:	1a89      	subs	r1, r1, r2
 800d210:	1b98      	subs	r0, r3, r6
 800d212:	eba4 070c 	sub.w	r7, r4, ip
 800d216:	2900      	cmp	r1, #0
 800d218:	d164      	bne.n	800d2e4 <__ieee754_fmod+0x190>
 800d21a:	4564      	cmp	r4, ip
 800d21c:	bf38      	it	cc
 800d21e:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d222:	2800      	cmp	r0, #0
 800d224:	bfa4      	itt	ge
 800d226:	463c      	movge	r4, r7
 800d228:	4603      	movge	r3, r0
 800d22a:	ea53 0104 	orrs.w	r1, r3, r4
 800d22e:	d0c5      	beq.n	800d1bc <__ieee754_fmod+0x68>
 800d230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d234:	db6b      	blt.n	800d30e <__ieee754_fmod+0x1ba>
 800d236:	494e      	ldr	r1, [pc, #312]	; (800d370 <__ieee754_fmod+0x21c>)
 800d238:	428a      	cmp	r2, r1
 800d23a:	db6e      	blt.n	800d31a <__ieee754_fmod+0x1c6>
 800d23c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d240:	431d      	orrs	r5, r3
 800d242:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800d246:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800d24a:	4620      	mov	r0, r4
 800d24c:	e7a6      	b.n	800d19c <__ieee754_fmod+0x48>
 800d24e:	3901      	subs	r1, #1
 800d250:	005b      	lsls	r3, r3, #1
 800d252:	e7c1      	b.n	800d1d8 <__ieee754_fmod+0x84>
 800d254:	4946      	ldr	r1, [pc, #280]	; (800d370 <__ieee754_fmod+0x21c>)
 800d256:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	ddbe      	ble.n	800d1dc <__ieee754_fmod+0x88>
 800d25e:	3901      	subs	r1, #1
 800d260:	005b      	lsls	r3, r3, #1
 800d262:	e7fa      	b.n	800d25a <__ieee754_fmod+0x106>
 800d264:	ea4f 5128 	mov.w	r1, r8, asr #20
 800d268:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d26c:	e7b6      	b.n	800d1dc <__ieee754_fmod+0x88>
 800d26e:	3a01      	subs	r2, #1
 800d270:	005b      	lsls	r3, r3, #1
 800d272:	e7bc      	b.n	800d1ee <__ieee754_fmod+0x9a>
 800d274:	4a3e      	ldr	r2, [pc, #248]	; (800d370 <__ieee754_fmod+0x21c>)
 800d276:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	ddb9      	ble.n	800d1f2 <__ieee754_fmod+0x9e>
 800d27e:	3a01      	subs	r2, #1
 800d280:	005b      	lsls	r3, r3, #1
 800d282:	e7fa      	b.n	800d27a <__ieee754_fmod+0x126>
 800d284:	ea4f 522e 	mov.w	r2, lr, asr #20
 800d288:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800d28c:	e7b1      	b.n	800d1f2 <__ieee754_fmod+0x9e>
 800d28e:	1a5c      	subs	r4, r3, r1
 800d290:	2c1f      	cmp	r4, #31
 800d292:	dc0a      	bgt.n	800d2aa <__ieee754_fmod+0x156>
 800d294:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800d298:	fa08 f804 	lsl.w	r8, r8, r4
 800d29c:	fa2a f303 	lsr.w	r3, sl, r3
 800d2a0:	ea43 0308 	orr.w	r3, r3, r8
 800d2a4:	fa0a f404 	lsl.w	r4, sl, r4
 800d2a8:	e7aa      	b.n	800d200 <__ieee754_fmod+0xac>
 800d2aa:	4b32      	ldr	r3, [pc, #200]	; (800d374 <__ieee754_fmod+0x220>)
 800d2ac:	1a5b      	subs	r3, r3, r1
 800d2ae:	fa0a f303 	lsl.w	r3, sl, r3
 800d2b2:	2400      	movs	r4, #0
 800d2b4:	e7a4      	b.n	800d200 <__ieee754_fmod+0xac>
 800d2b6:	eba0 0c02 	sub.w	ip, r0, r2
 800d2ba:	f1bc 0f1f 	cmp.w	ip, #31
 800d2be:	dc0a      	bgt.n	800d2d6 <__ieee754_fmod+0x182>
 800d2c0:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800d2c4:	fa0e fe0c 	lsl.w	lr, lr, ip
 800d2c8:	fa27 f606 	lsr.w	r6, r7, r6
 800d2cc:	ea46 060e 	orr.w	r6, r6, lr
 800d2d0:	fa07 fc0c 	lsl.w	ip, r7, ip
 800d2d4:	e79b      	b.n	800d20e <__ieee754_fmod+0xba>
 800d2d6:	4e27      	ldr	r6, [pc, #156]	; (800d374 <__ieee754_fmod+0x220>)
 800d2d8:	1ab6      	subs	r6, r6, r2
 800d2da:	fa07 f606 	lsl.w	r6, r7, r6
 800d2de:	f04f 0c00 	mov.w	ip, #0
 800d2e2:	e794      	b.n	800d20e <__ieee754_fmod+0xba>
 800d2e4:	4564      	cmp	r4, ip
 800d2e6:	bf38      	it	cc
 800d2e8:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	da05      	bge.n	800d2fc <__ieee754_fmod+0x1a8>
 800d2f0:	0fe0      	lsrs	r0, r4, #31
 800d2f2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800d2f6:	0064      	lsls	r4, r4, #1
 800d2f8:	3901      	subs	r1, #1
 800d2fa:	e789      	b.n	800d210 <__ieee754_fmod+0xbc>
 800d2fc:	ea50 0307 	orrs.w	r3, r0, r7
 800d300:	f43f af5c 	beq.w	800d1bc <__ieee754_fmod+0x68>
 800d304:	0ffb      	lsrs	r3, r7, #31
 800d306:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800d30a:	007c      	lsls	r4, r7, #1
 800d30c:	e7f4      	b.n	800d2f8 <__ieee754_fmod+0x1a4>
 800d30e:	0fe1      	lsrs	r1, r4, #31
 800d310:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d314:	0064      	lsls	r4, r4, #1
 800d316:	3a01      	subs	r2, #1
 800d318:	e78a      	b.n	800d230 <__ieee754_fmod+0xdc>
 800d31a:	1a89      	subs	r1, r1, r2
 800d31c:	2914      	cmp	r1, #20
 800d31e:	dc0a      	bgt.n	800d336 <__ieee754_fmod+0x1e2>
 800d320:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d324:	fa03 f202 	lsl.w	r2, r3, r2
 800d328:	40cc      	lsrs	r4, r1
 800d32a:	4322      	orrs	r2, r4
 800d32c:	410b      	asrs	r3, r1
 800d32e:	ea43 0105 	orr.w	r1, r3, r5
 800d332:	4610      	mov	r0, r2
 800d334:	e732      	b.n	800d19c <__ieee754_fmod+0x48>
 800d336:	291f      	cmp	r1, #31
 800d338:	dc07      	bgt.n	800d34a <__ieee754_fmod+0x1f6>
 800d33a:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800d33e:	40cc      	lsrs	r4, r1
 800d340:	fa03 f202 	lsl.w	r2, r3, r2
 800d344:	4322      	orrs	r2, r4
 800d346:	462b      	mov	r3, r5
 800d348:	e7f1      	b.n	800d32e <__ieee754_fmod+0x1da>
 800d34a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800d34e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d352:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800d356:	32e2      	adds	r2, #226	; 0xe2
 800d358:	fa43 f202 	asr.w	r2, r3, r2
 800d35c:	e7f3      	b.n	800d346 <__ieee754_fmod+0x1f2>
 800d35e:	bf00      	nop
 800d360:	7fefffff 	.word	0x7fefffff
 800d364:	0800ed78 	.word	0x0800ed78
 800d368:	fffffbed 	.word	0xfffffbed
 800d36c:	7ff00000 	.word	0x7ff00000
 800d370:	fffffc02 	.word	0xfffffc02
 800d374:	fffffbe2 	.word	0xfffffbe2

0800d378 <__ieee754_rem_pio2>:
 800d378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	ed2d 8b02 	vpush	{d8}
 800d380:	ec55 4b10 	vmov	r4, r5, d0
 800d384:	4bca      	ldr	r3, [pc, #808]	; (800d6b0 <__ieee754_rem_pio2+0x338>)
 800d386:	b08b      	sub	sp, #44	; 0x2c
 800d388:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d38c:	4598      	cmp	r8, r3
 800d38e:	4682      	mov	sl, r0
 800d390:	9502      	str	r5, [sp, #8]
 800d392:	dc08      	bgt.n	800d3a6 <__ieee754_rem_pio2+0x2e>
 800d394:	2200      	movs	r2, #0
 800d396:	2300      	movs	r3, #0
 800d398:	ed80 0b00 	vstr	d0, [r0]
 800d39c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d3a0:	f04f 0b00 	mov.w	fp, #0
 800d3a4:	e028      	b.n	800d3f8 <__ieee754_rem_pio2+0x80>
 800d3a6:	4bc3      	ldr	r3, [pc, #780]	; (800d6b4 <__ieee754_rem_pio2+0x33c>)
 800d3a8:	4598      	cmp	r8, r3
 800d3aa:	dc78      	bgt.n	800d49e <__ieee754_rem_pio2+0x126>
 800d3ac:	9b02      	ldr	r3, [sp, #8]
 800d3ae:	4ec2      	ldr	r6, [pc, #776]	; (800d6b8 <__ieee754_rem_pio2+0x340>)
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	ee10 0a10 	vmov	r0, s0
 800d3b6:	a3b0      	add	r3, pc, #704	; (adr r3, 800d678 <__ieee754_rem_pio2+0x300>)
 800d3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3bc:	4629      	mov	r1, r5
 800d3be:	dd39      	ble.n	800d434 <__ieee754_rem_pio2+0xbc>
 800d3c0:	f7f2 ff8a 	bl	80002d8 <__aeabi_dsub>
 800d3c4:	45b0      	cmp	r8, r6
 800d3c6:	4604      	mov	r4, r0
 800d3c8:	460d      	mov	r5, r1
 800d3ca:	d01b      	beq.n	800d404 <__ieee754_rem_pio2+0x8c>
 800d3cc:	a3ac      	add	r3, pc, #688	; (adr r3, 800d680 <__ieee754_rem_pio2+0x308>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f2 ff81 	bl	80002d8 <__aeabi_dsub>
 800d3d6:	4602      	mov	r2, r0
 800d3d8:	460b      	mov	r3, r1
 800d3da:	e9ca 2300 	strd	r2, r3, [sl]
 800d3de:	4620      	mov	r0, r4
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	f7f2 ff79 	bl	80002d8 <__aeabi_dsub>
 800d3e6:	a3a6      	add	r3, pc, #664	; (adr r3, 800d680 <__ieee754_rem_pio2+0x308>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	f7f2 ff74 	bl	80002d8 <__aeabi_dsub>
 800d3f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d3f4:	f04f 0b01 	mov.w	fp, #1
 800d3f8:	4658      	mov	r0, fp
 800d3fa:	b00b      	add	sp, #44	; 0x2c
 800d3fc:	ecbd 8b02 	vpop	{d8}
 800d400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d404:	a3a0      	add	r3, pc, #640	; (adr r3, 800d688 <__ieee754_rem_pio2+0x310>)
 800d406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40a:	f7f2 ff65 	bl	80002d8 <__aeabi_dsub>
 800d40e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d690 <__ieee754_rem_pio2+0x318>)
 800d410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d414:	4604      	mov	r4, r0
 800d416:	460d      	mov	r5, r1
 800d418:	f7f2 ff5e 	bl	80002d8 <__aeabi_dsub>
 800d41c:	4602      	mov	r2, r0
 800d41e:	460b      	mov	r3, r1
 800d420:	e9ca 2300 	strd	r2, r3, [sl]
 800d424:	4620      	mov	r0, r4
 800d426:	4629      	mov	r1, r5
 800d428:	f7f2 ff56 	bl	80002d8 <__aeabi_dsub>
 800d42c:	a398      	add	r3, pc, #608	; (adr r3, 800d690 <__ieee754_rem_pio2+0x318>)
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	e7db      	b.n	800d3ec <__ieee754_rem_pio2+0x74>
 800d434:	f7f2 ff52 	bl	80002dc <__adddf3>
 800d438:	45b0      	cmp	r8, r6
 800d43a:	4604      	mov	r4, r0
 800d43c:	460d      	mov	r5, r1
 800d43e:	d016      	beq.n	800d46e <__ieee754_rem_pio2+0xf6>
 800d440:	a38f      	add	r3, pc, #572	; (adr r3, 800d680 <__ieee754_rem_pio2+0x308>)
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f2 ff49 	bl	80002dc <__adddf3>
 800d44a:	4602      	mov	r2, r0
 800d44c:	460b      	mov	r3, r1
 800d44e:	e9ca 2300 	strd	r2, r3, [sl]
 800d452:	4620      	mov	r0, r4
 800d454:	4629      	mov	r1, r5
 800d456:	f7f2 ff3f 	bl	80002d8 <__aeabi_dsub>
 800d45a:	a389      	add	r3, pc, #548	; (adr r3, 800d680 <__ieee754_rem_pio2+0x308>)
 800d45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d460:	f7f2 ff3c 	bl	80002dc <__adddf3>
 800d464:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800d468:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d46c:	e7c4      	b.n	800d3f8 <__ieee754_rem_pio2+0x80>
 800d46e:	a386      	add	r3, pc, #536	; (adr r3, 800d688 <__ieee754_rem_pio2+0x310>)
 800d470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d474:	f7f2 ff32 	bl	80002dc <__adddf3>
 800d478:	a385      	add	r3, pc, #532	; (adr r3, 800d690 <__ieee754_rem_pio2+0x318>)
 800d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47e:	4604      	mov	r4, r0
 800d480:	460d      	mov	r5, r1
 800d482:	f7f2 ff2b 	bl	80002dc <__adddf3>
 800d486:	4602      	mov	r2, r0
 800d488:	460b      	mov	r3, r1
 800d48a:	e9ca 2300 	strd	r2, r3, [sl]
 800d48e:	4620      	mov	r0, r4
 800d490:	4629      	mov	r1, r5
 800d492:	f7f2 ff21 	bl	80002d8 <__aeabi_dsub>
 800d496:	a37e      	add	r3, pc, #504	; (adr r3, 800d690 <__ieee754_rem_pio2+0x318>)
 800d498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49c:	e7e0      	b.n	800d460 <__ieee754_rem_pio2+0xe8>
 800d49e:	4b87      	ldr	r3, [pc, #540]	; (800d6bc <__ieee754_rem_pio2+0x344>)
 800d4a0:	4598      	cmp	r8, r3
 800d4a2:	f300 80d9 	bgt.w	800d658 <__ieee754_rem_pio2+0x2e0>
 800d4a6:	f000 fe49 	bl	800e13c <fabs>
 800d4aa:	ec55 4b10 	vmov	r4, r5, d0
 800d4ae:	ee10 0a10 	vmov	r0, s0
 800d4b2:	a379      	add	r3, pc, #484	; (adr r3, 800d698 <__ieee754_rem_pio2+0x320>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	4629      	mov	r1, r5
 800d4ba:	f7f3 f8c5 	bl	8000648 <__aeabi_dmul>
 800d4be:	4b80      	ldr	r3, [pc, #512]	; (800d6c0 <__ieee754_rem_pio2+0x348>)
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	f7f2 ff0b 	bl	80002dc <__adddf3>
 800d4c6:	f7f3 fb6f 	bl	8000ba8 <__aeabi_d2iz>
 800d4ca:	4683      	mov	fp, r0
 800d4cc:	f7f3 f852 	bl	8000574 <__aeabi_i2d>
 800d4d0:	4602      	mov	r2, r0
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	ec43 2b18 	vmov	d8, r2, r3
 800d4d8:	a367      	add	r3, pc, #412	; (adr r3, 800d678 <__ieee754_rem_pio2+0x300>)
 800d4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4de:	f7f3 f8b3 	bl	8000648 <__aeabi_dmul>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	460b      	mov	r3, r1
 800d4e6:	4620      	mov	r0, r4
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	f7f2 fef5 	bl	80002d8 <__aeabi_dsub>
 800d4ee:	a364      	add	r3, pc, #400	; (adr r3, 800d680 <__ieee754_rem_pio2+0x308>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	4606      	mov	r6, r0
 800d4f6:	460f      	mov	r7, r1
 800d4f8:	ec51 0b18 	vmov	r0, r1, d8
 800d4fc:	f7f3 f8a4 	bl	8000648 <__aeabi_dmul>
 800d500:	f1bb 0f1f 	cmp.w	fp, #31
 800d504:	4604      	mov	r4, r0
 800d506:	460d      	mov	r5, r1
 800d508:	dc0d      	bgt.n	800d526 <__ieee754_rem_pio2+0x1ae>
 800d50a:	4b6e      	ldr	r3, [pc, #440]	; (800d6c4 <__ieee754_rem_pio2+0x34c>)
 800d50c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800d510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d514:	4543      	cmp	r3, r8
 800d516:	d006      	beq.n	800d526 <__ieee754_rem_pio2+0x1ae>
 800d518:	4622      	mov	r2, r4
 800d51a:	462b      	mov	r3, r5
 800d51c:	4630      	mov	r0, r6
 800d51e:	4639      	mov	r1, r7
 800d520:	f7f2 feda 	bl	80002d8 <__aeabi_dsub>
 800d524:	e00f      	b.n	800d546 <__ieee754_rem_pio2+0x1ce>
 800d526:	462b      	mov	r3, r5
 800d528:	4622      	mov	r2, r4
 800d52a:	4630      	mov	r0, r6
 800d52c:	4639      	mov	r1, r7
 800d52e:	f7f2 fed3 	bl	80002d8 <__aeabi_dsub>
 800d532:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d536:	9303      	str	r3, [sp, #12]
 800d538:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d53c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d540:	f1b8 0f10 	cmp.w	r8, #16
 800d544:	dc02      	bgt.n	800d54c <__ieee754_rem_pio2+0x1d4>
 800d546:	e9ca 0100 	strd	r0, r1, [sl]
 800d54a:	e039      	b.n	800d5c0 <__ieee754_rem_pio2+0x248>
 800d54c:	a34e      	add	r3, pc, #312	; (adr r3, 800d688 <__ieee754_rem_pio2+0x310>)
 800d54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d552:	ec51 0b18 	vmov	r0, r1, d8
 800d556:	f7f3 f877 	bl	8000648 <__aeabi_dmul>
 800d55a:	4604      	mov	r4, r0
 800d55c:	460d      	mov	r5, r1
 800d55e:	4602      	mov	r2, r0
 800d560:	460b      	mov	r3, r1
 800d562:	4630      	mov	r0, r6
 800d564:	4639      	mov	r1, r7
 800d566:	f7f2 feb7 	bl	80002d8 <__aeabi_dsub>
 800d56a:	4602      	mov	r2, r0
 800d56c:	460b      	mov	r3, r1
 800d56e:	4680      	mov	r8, r0
 800d570:	4689      	mov	r9, r1
 800d572:	4630      	mov	r0, r6
 800d574:	4639      	mov	r1, r7
 800d576:	f7f2 feaf 	bl	80002d8 <__aeabi_dsub>
 800d57a:	4622      	mov	r2, r4
 800d57c:	462b      	mov	r3, r5
 800d57e:	f7f2 feab 	bl	80002d8 <__aeabi_dsub>
 800d582:	a343      	add	r3, pc, #268	; (adr r3, 800d690 <__ieee754_rem_pio2+0x318>)
 800d584:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d588:	4604      	mov	r4, r0
 800d58a:	460d      	mov	r5, r1
 800d58c:	ec51 0b18 	vmov	r0, r1, d8
 800d590:	f7f3 f85a 	bl	8000648 <__aeabi_dmul>
 800d594:	4622      	mov	r2, r4
 800d596:	462b      	mov	r3, r5
 800d598:	f7f2 fe9e 	bl	80002d8 <__aeabi_dsub>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	4640      	mov	r0, r8
 800d5a6:	4649      	mov	r1, r9
 800d5a8:	f7f2 fe96 	bl	80002d8 <__aeabi_dsub>
 800d5ac:	9a03      	ldr	r2, [sp, #12]
 800d5ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	2b31      	cmp	r3, #49	; 0x31
 800d5b6:	dc24      	bgt.n	800d602 <__ieee754_rem_pio2+0x28a>
 800d5b8:	e9ca 0100 	strd	r0, r1, [sl]
 800d5bc:	4646      	mov	r6, r8
 800d5be:	464f      	mov	r7, r9
 800d5c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	4642      	mov	r2, r8
 800d5c8:	464b      	mov	r3, r9
 800d5ca:	4639      	mov	r1, r7
 800d5cc:	f7f2 fe84 	bl	80002d8 <__aeabi_dsub>
 800d5d0:	462b      	mov	r3, r5
 800d5d2:	4622      	mov	r2, r4
 800d5d4:	f7f2 fe80 	bl	80002d8 <__aeabi_dsub>
 800d5d8:	9b02      	ldr	r3, [sp, #8]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d5e0:	f6bf af0a 	bge.w	800d3f8 <__ieee754_rem_pio2+0x80>
 800d5e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d5e8:	f8ca 3004 	str.w	r3, [sl, #4]
 800d5ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5f0:	f8ca 8000 	str.w	r8, [sl]
 800d5f4:	f8ca 0008 	str.w	r0, [sl, #8]
 800d5f8:	f8ca 300c 	str.w	r3, [sl, #12]
 800d5fc:	f1cb 0b00 	rsb	fp, fp, #0
 800d600:	e6fa      	b.n	800d3f8 <__ieee754_rem_pio2+0x80>
 800d602:	a327      	add	r3, pc, #156	; (adr r3, 800d6a0 <__ieee754_rem_pio2+0x328>)
 800d604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d608:	ec51 0b18 	vmov	r0, r1, d8
 800d60c:	f7f3 f81c 	bl	8000648 <__aeabi_dmul>
 800d610:	4604      	mov	r4, r0
 800d612:	460d      	mov	r5, r1
 800d614:	4602      	mov	r2, r0
 800d616:	460b      	mov	r3, r1
 800d618:	4640      	mov	r0, r8
 800d61a:	4649      	mov	r1, r9
 800d61c:	f7f2 fe5c 	bl	80002d8 <__aeabi_dsub>
 800d620:	4602      	mov	r2, r0
 800d622:	460b      	mov	r3, r1
 800d624:	4606      	mov	r6, r0
 800d626:	460f      	mov	r7, r1
 800d628:	4640      	mov	r0, r8
 800d62a:	4649      	mov	r1, r9
 800d62c:	f7f2 fe54 	bl	80002d8 <__aeabi_dsub>
 800d630:	4622      	mov	r2, r4
 800d632:	462b      	mov	r3, r5
 800d634:	f7f2 fe50 	bl	80002d8 <__aeabi_dsub>
 800d638:	a31b      	add	r3, pc, #108	; (adr r3, 800d6a8 <__ieee754_rem_pio2+0x330>)
 800d63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d63e:	4604      	mov	r4, r0
 800d640:	460d      	mov	r5, r1
 800d642:	ec51 0b18 	vmov	r0, r1, d8
 800d646:	f7f2 ffff 	bl	8000648 <__aeabi_dmul>
 800d64a:	4622      	mov	r2, r4
 800d64c:	462b      	mov	r3, r5
 800d64e:	f7f2 fe43 	bl	80002d8 <__aeabi_dsub>
 800d652:	4604      	mov	r4, r0
 800d654:	460d      	mov	r5, r1
 800d656:	e75f      	b.n	800d518 <__ieee754_rem_pio2+0x1a0>
 800d658:	4b1b      	ldr	r3, [pc, #108]	; (800d6c8 <__ieee754_rem_pio2+0x350>)
 800d65a:	4598      	cmp	r8, r3
 800d65c:	dd36      	ble.n	800d6cc <__ieee754_rem_pio2+0x354>
 800d65e:	ee10 2a10 	vmov	r2, s0
 800d662:	462b      	mov	r3, r5
 800d664:	4620      	mov	r0, r4
 800d666:	4629      	mov	r1, r5
 800d668:	f7f2 fe36 	bl	80002d8 <__aeabi_dsub>
 800d66c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d670:	e9ca 0100 	strd	r0, r1, [sl]
 800d674:	e694      	b.n	800d3a0 <__ieee754_rem_pio2+0x28>
 800d676:	bf00      	nop
 800d678:	54400000 	.word	0x54400000
 800d67c:	3ff921fb 	.word	0x3ff921fb
 800d680:	1a626331 	.word	0x1a626331
 800d684:	3dd0b461 	.word	0x3dd0b461
 800d688:	1a600000 	.word	0x1a600000
 800d68c:	3dd0b461 	.word	0x3dd0b461
 800d690:	2e037073 	.word	0x2e037073
 800d694:	3ba3198a 	.word	0x3ba3198a
 800d698:	6dc9c883 	.word	0x6dc9c883
 800d69c:	3fe45f30 	.word	0x3fe45f30
 800d6a0:	2e000000 	.word	0x2e000000
 800d6a4:	3ba3198a 	.word	0x3ba3198a
 800d6a8:	252049c1 	.word	0x252049c1
 800d6ac:	397b839a 	.word	0x397b839a
 800d6b0:	3fe921fb 	.word	0x3fe921fb
 800d6b4:	4002d97b 	.word	0x4002d97b
 800d6b8:	3ff921fb 	.word	0x3ff921fb
 800d6bc:	413921fb 	.word	0x413921fb
 800d6c0:	3fe00000 	.word	0x3fe00000
 800d6c4:	0800ed88 	.word	0x0800ed88
 800d6c8:	7fefffff 	.word	0x7fefffff
 800d6cc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d6d0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d6d4:	ee10 0a10 	vmov	r0, s0
 800d6d8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d6dc:	ee10 6a10 	vmov	r6, s0
 800d6e0:	460f      	mov	r7, r1
 800d6e2:	f7f3 fa61 	bl	8000ba8 <__aeabi_d2iz>
 800d6e6:	f7f2 ff45 	bl	8000574 <__aeabi_i2d>
 800d6ea:	4602      	mov	r2, r0
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	4639      	mov	r1, r7
 800d6f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d6f6:	f7f2 fdef 	bl	80002d8 <__aeabi_dsub>
 800d6fa:	4b23      	ldr	r3, [pc, #140]	; (800d788 <__ieee754_rem_pio2+0x410>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f7f2 ffa3 	bl	8000648 <__aeabi_dmul>
 800d702:	460f      	mov	r7, r1
 800d704:	4606      	mov	r6, r0
 800d706:	f7f3 fa4f 	bl	8000ba8 <__aeabi_d2iz>
 800d70a:	f7f2 ff33 	bl	8000574 <__aeabi_i2d>
 800d70e:	4602      	mov	r2, r0
 800d710:	460b      	mov	r3, r1
 800d712:	4630      	mov	r0, r6
 800d714:	4639      	mov	r1, r7
 800d716:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d71a:	f7f2 fddd 	bl	80002d8 <__aeabi_dsub>
 800d71e:	4b1a      	ldr	r3, [pc, #104]	; (800d788 <__ieee754_rem_pio2+0x410>)
 800d720:	2200      	movs	r2, #0
 800d722:	f7f2 ff91 	bl	8000648 <__aeabi_dmul>
 800d726:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d72a:	ad04      	add	r5, sp, #16
 800d72c:	f04f 0803 	mov.w	r8, #3
 800d730:	46a9      	mov	r9, r5
 800d732:	2600      	movs	r6, #0
 800d734:	2700      	movs	r7, #0
 800d736:	4632      	mov	r2, r6
 800d738:	463b      	mov	r3, r7
 800d73a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d73e:	46c3      	mov	fp, r8
 800d740:	3d08      	subs	r5, #8
 800d742:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d746:	f7f3 f9e7 	bl	8000b18 <__aeabi_dcmpeq>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	d1f3      	bne.n	800d736 <__ieee754_rem_pio2+0x3be>
 800d74e:	4b0f      	ldr	r3, [pc, #60]	; (800d78c <__ieee754_rem_pio2+0x414>)
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	2302      	movs	r3, #2
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	4622      	mov	r2, r4
 800d758:	465b      	mov	r3, fp
 800d75a:	4651      	mov	r1, sl
 800d75c:	4648      	mov	r0, r9
 800d75e:	f000 f8df 	bl	800d920 <__kernel_rem_pio2>
 800d762:	9b02      	ldr	r3, [sp, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	4683      	mov	fp, r0
 800d768:	f6bf ae46 	bge.w	800d3f8 <__ieee754_rem_pio2+0x80>
 800d76c:	e9da 2100 	ldrd	r2, r1, [sl]
 800d770:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d774:	e9ca 2300 	strd	r2, r3, [sl]
 800d778:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d77c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d780:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d784:	e73a      	b.n	800d5fc <__ieee754_rem_pio2+0x284>
 800d786:	bf00      	nop
 800d788:	41700000 	.word	0x41700000
 800d78c:	0800ee08 	.word	0x0800ee08

0800d790 <__kernel_cos>:
 800d790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	ec57 6b10 	vmov	r6, r7, d0
 800d798:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d79c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d7a0:	ed8d 1b00 	vstr	d1, [sp]
 800d7a4:	da07      	bge.n	800d7b6 <__kernel_cos+0x26>
 800d7a6:	ee10 0a10 	vmov	r0, s0
 800d7aa:	4639      	mov	r1, r7
 800d7ac:	f7f3 f9fc 	bl	8000ba8 <__aeabi_d2iz>
 800d7b0:	2800      	cmp	r0, #0
 800d7b2:	f000 8088 	beq.w	800d8c6 <__kernel_cos+0x136>
 800d7b6:	4632      	mov	r2, r6
 800d7b8:	463b      	mov	r3, r7
 800d7ba:	4630      	mov	r0, r6
 800d7bc:	4639      	mov	r1, r7
 800d7be:	f7f2 ff43 	bl	8000648 <__aeabi_dmul>
 800d7c2:	4b51      	ldr	r3, [pc, #324]	; (800d908 <__kernel_cos+0x178>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	460d      	mov	r5, r1
 800d7ca:	f7f2 ff3d 	bl	8000648 <__aeabi_dmul>
 800d7ce:	a340      	add	r3, pc, #256	; (adr r3, 800d8d0 <__kernel_cos+0x140>)
 800d7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d4:	4682      	mov	sl, r0
 800d7d6:	468b      	mov	fp, r1
 800d7d8:	4620      	mov	r0, r4
 800d7da:	4629      	mov	r1, r5
 800d7dc:	f7f2 ff34 	bl	8000648 <__aeabi_dmul>
 800d7e0:	a33d      	add	r3, pc, #244	; (adr r3, 800d8d8 <__kernel_cos+0x148>)
 800d7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e6:	f7f2 fd79 	bl	80002dc <__adddf3>
 800d7ea:	4622      	mov	r2, r4
 800d7ec:	462b      	mov	r3, r5
 800d7ee:	f7f2 ff2b 	bl	8000648 <__aeabi_dmul>
 800d7f2:	a33b      	add	r3, pc, #236	; (adr r3, 800d8e0 <__kernel_cos+0x150>)
 800d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f8:	f7f2 fd6e 	bl	80002d8 <__aeabi_dsub>
 800d7fc:	4622      	mov	r2, r4
 800d7fe:	462b      	mov	r3, r5
 800d800:	f7f2 ff22 	bl	8000648 <__aeabi_dmul>
 800d804:	a338      	add	r3, pc, #224	; (adr r3, 800d8e8 <__kernel_cos+0x158>)
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	f7f2 fd67 	bl	80002dc <__adddf3>
 800d80e:	4622      	mov	r2, r4
 800d810:	462b      	mov	r3, r5
 800d812:	f7f2 ff19 	bl	8000648 <__aeabi_dmul>
 800d816:	a336      	add	r3, pc, #216	; (adr r3, 800d8f0 <__kernel_cos+0x160>)
 800d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d81c:	f7f2 fd5c 	bl	80002d8 <__aeabi_dsub>
 800d820:	4622      	mov	r2, r4
 800d822:	462b      	mov	r3, r5
 800d824:	f7f2 ff10 	bl	8000648 <__aeabi_dmul>
 800d828:	a333      	add	r3, pc, #204	; (adr r3, 800d8f8 <__kernel_cos+0x168>)
 800d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82e:	f7f2 fd55 	bl	80002dc <__adddf3>
 800d832:	4622      	mov	r2, r4
 800d834:	462b      	mov	r3, r5
 800d836:	f7f2 ff07 	bl	8000648 <__aeabi_dmul>
 800d83a:	4622      	mov	r2, r4
 800d83c:	462b      	mov	r3, r5
 800d83e:	f7f2 ff03 	bl	8000648 <__aeabi_dmul>
 800d842:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d846:	4604      	mov	r4, r0
 800d848:	460d      	mov	r5, r1
 800d84a:	4630      	mov	r0, r6
 800d84c:	4639      	mov	r1, r7
 800d84e:	f7f2 fefb 	bl	8000648 <__aeabi_dmul>
 800d852:	460b      	mov	r3, r1
 800d854:	4602      	mov	r2, r0
 800d856:	4629      	mov	r1, r5
 800d858:	4620      	mov	r0, r4
 800d85a:	f7f2 fd3d 	bl	80002d8 <__aeabi_dsub>
 800d85e:	4b2b      	ldr	r3, [pc, #172]	; (800d90c <__kernel_cos+0x17c>)
 800d860:	4598      	cmp	r8, r3
 800d862:	4606      	mov	r6, r0
 800d864:	460f      	mov	r7, r1
 800d866:	dc10      	bgt.n	800d88a <__kernel_cos+0xfa>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4650      	mov	r0, sl
 800d86e:	4659      	mov	r1, fp
 800d870:	f7f2 fd32 	bl	80002d8 <__aeabi_dsub>
 800d874:	460b      	mov	r3, r1
 800d876:	4926      	ldr	r1, [pc, #152]	; (800d910 <__kernel_cos+0x180>)
 800d878:	4602      	mov	r2, r0
 800d87a:	2000      	movs	r0, #0
 800d87c:	f7f2 fd2c 	bl	80002d8 <__aeabi_dsub>
 800d880:	ec41 0b10 	vmov	d0, r0, r1
 800d884:	b003      	add	sp, #12
 800d886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d88a:	4b22      	ldr	r3, [pc, #136]	; (800d914 <__kernel_cos+0x184>)
 800d88c:	4920      	ldr	r1, [pc, #128]	; (800d910 <__kernel_cos+0x180>)
 800d88e:	4598      	cmp	r8, r3
 800d890:	bfcc      	ite	gt
 800d892:	4d21      	ldrgt	r5, [pc, #132]	; (800d918 <__kernel_cos+0x188>)
 800d894:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d898:	2400      	movs	r4, #0
 800d89a:	4622      	mov	r2, r4
 800d89c:	462b      	mov	r3, r5
 800d89e:	2000      	movs	r0, #0
 800d8a0:	f7f2 fd1a 	bl	80002d8 <__aeabi_dsub>
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	4680      	mov	r8, r0
 800d8a8:	4689      	mov	r9, r1
 800d8aa:	462b      	mov	r3, r5
 800d8ac:	4650      	mov	r0, sl
 800d8ae:	4659      	mov	r1, fp
 800d8b0:	f7f2 fd12 	bl	80002d8 <__aeabi_dsub>
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	f7f2 fd0e 	bl	80002d8 <__aeabi_dsub>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	4640      	mov	r0, r8
 800d8c2:	4649      	mov	r1, r9
 800d8c4:	e7da      	b.n	800d87c <__kernel_cos+0xec>
 800d8c6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d900 <__kernel_cos+0x170>
 800d8ca:	e7db      	b.n	800d884 <__kernel_cos+0xf4>
 800d8cc:	f3af 8000 	nop.w
 800d8d0:	be8838d4 	.word	0xbe8838d4
 800d8d4:	bda8fae9 	.word	0xbda8fae9
 800d8d8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d8dc:	3e21ee9e 	.word	0x3e21ee9e
 800d8e0:	809c52ad 	.word	0x809c52ad
 800d8e4:	3e927e4f 	.word	0x3e927e4f
 800d8e8:	19cb1590 	.word	0x19cb1590
 800d8ec:	3efa01a0 	.word	0x3efa01a0
 800d8f0:	16c15177 	.word	0x16c15177
 800d8f4:	3f56c16c 	.word	0x3f56c16c
 800d8f8:	5555554c 	.word	0x5555554c
 800d8fc:	3fa55555 	.word	0x3fa55555
 800d900:	00000000 	.word	0x00000000
 800d904:	3ff00000 	.word	0x3ff00000
 800d908:	3fe00000 	.word	0x3fe00000
 800d90c:	3fd33332 	.word	0x3fd33332
 800d910:	3ff00000 	.word	0x3ff00000
 800d914:	3fe90000 	.word	0x3fe90000
 800d918:	3fd20000 	.word	0x3fd20000
 800d91c:	00000000 	.word	0x00000000

0800d920 <__kernel_rem_pio2>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	ed2d 8b02 	vpush	{d8}
 800d928:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d92c:	f112 0f14 	cmn.w	r2, #20
 800d930:	9308      	str	r3, [sp, #32]
 800d932:	9101      	str	r1, [sp, #4]
 800d934:	4bc4      	ldr	r3, [pc, #784]	; (800dc48 <__kernel_rem_pio2+0x328>)
 800d936:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d938:	900b      	str	r0, [sp, #44]	; 0x2c
 800d93a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d93e:	9302      	str	r3, [sp, #8]
 800d940:	9b08      	ldr	r3, [sp, #32]
 800d942:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d946:	bfa8      	it	ge
 800d948:	1ed4      	subge	r4, r2, #3
 800d94a:	9306      	str	r3, [sp, #24]
 800d94c:	bfb2      	itee	lt
 800d94e:	2400      	movlt	r4, #0
 800d950:	2318      	movge	r3, #24
 800d952:	fb94 f4f3 	sdivge	r4, r4, r3
 800d956:	f06f 0317 	mvn.w	r3, #23
 800d95a:	fb04 3303 	mla	r3, r4, r3, r3
 800d95e:	eb03 0a02 	add.w	sl, r3, r2
 800d962:	9b02      	ldr	r3, [sp, #8]
 800d964:	9a06      	ldr	r2, [sp, #24]
 800d966:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800dc38 <__kernel_rem_pio2+0x318>
 800d96a:	eb03 0802 	add.w	r8, r3, r2
 800d96e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d970:	1aa7      	subs	r7, r4, r2
 800d972:	ae22      	add	r6, sp, #136	; 0x88
 800d974:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d978:	2500      	movs	r5, #0
 800d97a:	4545      	cmp	r5, r8
 800d97c:	dd13      	ble.n	800d9a6 <__kernel_rem_pio2+0x86>
 800d97e:	9b08      	ldr	r3, [sp, #32]
 800d980:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800dc38 <__kernel_rem_pio2+0x318>
 800d984:	aa22      	add	r2, sp, #136	; 0x88
 800d986:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d98a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d98e:	f04f 0800 	mov.w	r8, #0
 800d992:	9b02      	ldr	r3, [sp, #8]
 800d994:	4598      	cmp	r8, r3
 800d996:	dc2f      	bgt.n	800d9f8 <__kernel_rem_pio2+0xd8>
 800d998:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d99c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d9a0:	462f      	mov	r7, r5
 800d9a2:	2600      	movs	r6, #0
 800d9a4:	e01b      	b.n	800d9de <__kernel_rem_pio2+0xbe>
 800d9a6:	42ef      	cmn	r7, r5
 800d9a8:	d407      	bmi.n	800d9ba <__kernel_rem_pio2+0x9a>
 800d9aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d9ae:	f7f2 fde1 	bl	8000574 <__aeabi_i2d>
 800d9b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d9b6:	3501      	adds	r5, #1
 800d9b8:	e7df      	b.n	800d97a <__kernel_rem_pio2+0x5a>
 800d9ba:	ec51 0b18 	vmov	r0, r1, d8
 800d9be:	e7f8      	b.n	800d9b2 <__kernel_rem_pio2+0x92>
 800d9c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9c4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d9c8:	f7f2 fe3e 	bl	8000648 <__aeabi_dmul>
 800d9cc:	4602      	mov	r2, r0
 800d9ce:	460b      	mov	r3, r1
 800d9d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9d4:	f7f2 fc82 	bl	80002dc <__adddf3>
 800d9d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d9dc:	3601      	adds	r6, #1
 800d9de:	9b06      	ldr	r3, [sp, #24]
 800d9e0:	429e      	cmp	r6, r3
 800d9e2:	f1a7 0708 	sub.w	r7, r7, #8
 800d9e6:	ddeb      	ble.n	800d9c0 <__kernel_rem_pio2+0xa0>
 800d9e8:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d9ec:	f108 0801 	add.w	r8, r8, #1
 800d9f0:	ecab 7b02 	vstmia	fp!, {d7}
 800d9f4:	3508      	adds	r5, #8
 800d9f6:	e7cc      	b.n	800d992 <__kernel_rem_pio2+0x72>
 800d9f8:	9b02      	ldr	r3, [sp, #8]
 800d9fa:	aa0e      	add	r2, sp, #56	; 0x38
 800d9fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da00:	930d      	str	r3, [sp, #52]	; 0x34
 800da02:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800da04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800da08:	9c02      	ldr	r4, [sp, #8]
 800da0a:	930c      	str	r3, [sp, #48]	; 0x30
 800da0c:	00e3      	lsls	r3, r4, #3
 800da0e:	930a      	str	r3, [sp, #40]	; 0x28
 800da10:	ab9a      	add	r3, sp, #616	; 0x268
 800da12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800da16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800da1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800da1e:	ab72      	add	r3, sp, #456	; 0x1c8
 800da20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800da24:	46c3      	mov	fp, r8
 800da26:	46a1      	mov	r9, r4
 800da28:	f1b9 0f00 	cmp.w	r9, #0
 800da2c:	f1a5 0508 	sub.w	r5, r5, #8
 800da30:	dc77      	bgt.n	800db22 <__kernel_rem_pio2+0x202>
 800da32:	ec47 6b10 	vmov	d0, r6, r7
 800da36:	4650      	mov	r0, sl
 800da38:	f000 fc0a 	bl	800e250 <scalbn>
 800da3c:	ec57 6b10 	vmov	r6, r7, d0
 800da40:	2200      	movs	r2, #0
 800da42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800da46:	ee10 0a10 	vmov	r0, s0
 800da4a:	4639      	mov	r1, r7
 800da4c:	f7f2 fdfc 	bl	8000648 <__aeabi_dmul>
 800da50:	ec41 0b10 	vmov	d0, r0, r1
 800da54:	f000 fb7c 	bl	800e150 <floor>
 800da58:	4b7c      	ldr	r3, [pc, #496]	; (800dc4c <__kernel_rem_pio2+0x32c>)
 800da5a:	ec51 0b10 	vmov	r0, r1, d0
 800da5e:	2200      	movs	r2, #0
 800da60:	f7f2 fdf2 	bl	8000648 <__aeabi_dmul>
 800da64:	4602      	mov	r2, r0
 800da66:	460b      	mov	r3, r1
 800da68:	4630      	mov	r0, r6
 800da6a:	4639      	mov	r1, r7
 800da6c:	f7f2 fc34 	bl	80002d8 <__aeabi_dsub>
 800da70:	460f      	mov	r7, r1
 800da72:	4606      	mov	r6, r0
 800da74:	f7f3 f898 	bl	8000ba8 <__aeabi_d2iz>
 800da78:	9004      	str	r0, [sp, #16]
 800da7a:	f7f2 fd7b 	bl	8000574 <__aeabi_i2d>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	4630      	mov	r0, r6
 800da84:	4639      	mov	r1, r7
 800da86:	f7f2 fc27 	bl	80002d8 <__aeabi_dsub>
 800da8a:	f1ba 0f00 	cmp.w	sl, #0
 800da8e:	4606      	mov	r6, r0
 800da90:	460f      	mov	r7, r1
 800da92:	dd6d      	ble.n	800db70 <__kernel_rem_pio2+0x250>
 800da94:	1e62      	subs	r2, r4, #1
 800da96:	ab0e      	add	r3, sp, #56	; 0x38
 800da98:	9d04      	ldr	r5, [sp, #16]
 800da9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800da9e:	f1ca 0118 	rsb	r1, sl, #24
 800daa2:	fa40 f301 	asr.w	r3, r0, r1
 800daa6:	441d      	add	r5, r3
 800daa8:	408b      	lsls	r3, r1
 800daaa:	1ac0      	subs	r0, r0, r3
 800daac:	ab0e      	add	r3, sp, #56	; 0x38
 800daae:	9504      	str	r5, [sp, #16]
 800dab0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dab4:	f1ca 0317 	rsb	r3, sl, #23
 800dab8:	fa40 fb03 	asr.w	fp, r0, r3
 800dabc:	f1bb 0f00 	cmp.w	fp, #0
 800dac0:	dd65      	ble.n	800db8e <__kernel_rem_pio2+0x26e>
 800dac2:	9b04      	ldr	r3, [sp, #16]
 800dac4:	2200      	movs	r2, #0
 800dac6:	3301      	adds	r3, #1
 800dac8:	9304      	str	r3, [sp, #16]
 800daca:	4615      	mov	r5, r2
 800dacc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dad0:	4294      	cmp	r4, r2
 800dad2:	f300 809c 	bgt.w	800dc0e <__kernel_rem_pio2+0x2ee>
 800dad6:	f1ba 0f00 	cmp.w	sl, #0
 800dada:	dd07      	ble.n	800daec <__kernel_rem_pio2+0x1cc>
 800dadc:	f1ba 0f01 	cmp.w	sl, #1
 800dae0:	f000 80c0 	beq.w	800dc64 <__kernel_rem_pio2+0x344>
 800dae4:	f1ba 0f02 	cmp.w	sl, #2
 800dae8:	f000 80c6 	beq.w	800dc78 <__kernel_rem_pio2+0x358>
 800daec:	f1bb 0f02 	cmp.w	fp, #2
 800daf0:	d14d      	bne.n	800db8e <__kernel_rem_pio2+0x26e>
 800daf2:	4632      	mov	r2, r6
 800daf4:	463b      	mov	r3, r7
 800daf6:	4956      	ldr	r1, [pc, #344]	; (800dc50 <__kernel_rem_pio2+0x330>)
 800daf8:	2000      	movs	r0, #0
 800dafa:	f7f2 fbed 	bl	80002d8 <__aeabi_dsub>
 800dafe:	4606      	mov	r6, r0
 800db00:	460f      	mov	r7, r1
 800db02:	2d00      	cmp	r5, #0
 800db04:	d043      	beq.n	800db8e <__kernel_rem_pio2+0x26e>
 800db06:	4650      	mov	r0, sl
 800db08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800dc40 <__kernel_rem_pio2+0x320>
 800db0c:	f000 fba0 	bl	800e250 <scalbn>
 800db10:	4630      	mov	r0, r6
 800db12:	4639      	mov	r1, r7
 800db14:	ec53 2b10 	vmov	r2, r3, d0
 800db18:	f7f2 fbde 	bl	80002d8 <__aeabi_dsub>
 800db1c:	4606      	mov	r6, r0
 800db1e:	460f      	mov	r7, r1
 800db20:	e035      	b.n	800db8e <__kernel_rem_pio2+0x26e>
 800db22:	4b4c      	ldr	r3, [pc, #304]	; (800dc54 <__kernel_rem_pio2+0x334>)
 800db24:	2200      	movs	r2, #0
 800db26:	4630      	mov	r0, r6
 800db28:	4639      	mov	r1, r7
 800db2a:	f7f2 fd8d 	bl	8000648 <__aeabi_dmul>
 800db2e:	f7f3 f83b 	bl	8000ba8 <__aeabi_d2iz>
 800db32:	f7f2 fd1f 	bl	8000574 <__aeabi_i2d>
 800db36:	4602      	mov	r2, r0
 800db38:	460b      	mov	r3, r1
 800db3a:	ec43 2b18 	vmov	d8, r2, r3
 800db3e:	4b46      	ldr	r3, [pc, #280]	; (800dc58 <__kernel_rem_pio2+0x338>)
 800db40:	2200      	movs	r2, #0
 800db42:	f7f2 fd81 	bl	8000648 <__aeabi_dmul>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4630      	mov	r0, r6
 800db4c:	4639      	mov	r1, r7
 800db4e:	f7f2 fbc3 	bl	80002d8 <__aeabi_dsub>
 800db52:	f7f3 f829 	bl	8000ba8 <__aeabi_d2iz>
 800db56:	e9d5 2300 	ldrd	r2, r3, [r5]
 800db5a:	f84b 0b04 	str.w	r0, [fp], #4
 800db5e:	ec51 0b18 	vmov	r0, r1, d8
 800db62:	f7f2 fbbb 	bl	80002dc <__adddf3>
 800db66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800db6a:	4606      	mov	r6, r0
 800db6c:	460f      	mov	r7, r1
 800db6e:	e75b      	b.n	800da28 <__kernel_rem_pio2+0x108>
 800db70:	d106      	bne.n	800db80 <__kernel_rem_pio2+0x260>
 800db72:	1e63      	subs	r3, r4, #1
 800db74:	aa0e      	add	r2, sp, #56	; 0x38
 800db76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800db7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800db7e:	e79d      	b.n	800dabc <__kernel_rem_pio2+0x19c>
 800db80:	4b36      	ldr	r3, [pc, #216]	; (800dc5c <__kernel_rem_pio2+0x33c>)
 800db82:	2200      	movs	r2, #0
 800db84:	f7f2 ffe6 	bl	8000b54 <__aeabi_dcmpge>
 800db88:	2800      	cmp	r0, #0
 800db8a:	d13d      	bne.n	800dc08 <__kernel_rem_pio2+0x2e8>
 800db8c:	4683      	mov	fp, r0
 800db8e:	2200      	movs	r2, #0
 800db90:	2300      	movs	r3, #0
 800db92:	4630      	mov	r0, r6
 800db94:	4639      	mov	r1, r7
 800db96:	f7f2 ffbf 	bl	8000b18 <__aeabi_dcmpeq>
 800db9a:	2800      	cmp	r0, #0
 800db9c:	f000 80c0 	beq.w	800dd20 <__kernel_rem_pio2+0x400>
 800dba0:	1e65      	subs	r5, r4, #1
 800dba2:	462b      	mov	r3, r5
 800dba4:	2200      	movs	r2, #0
 800dba6:	9902      	ldr	r1, [sp, #8]
 800dba8:	428b      	cmp	r3, r1
 800dbaa:	da6c      	bge.n	800dc86 <__kernel_rem_pio2+0x366>
 800dbac:	2a00      	cmp	r2, #0
 800dbae:	f000 8089 	beq.w	800dcc4 <__kernel_rem_pio2+0x3a4>
 800dbb2:	ab0e      	add	r3, sp, #56	; 0x38
 800dbb4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dbb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	f000 80ad 	beq.w	800dd1c <__kernel_rem_pio2+0x3fc>
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800dc40 <__kernel_rem_pio2+0x320>
 800dbc8:	f000 fb42 	bl	800e250 <scalbn>
 800dbcc:	ab9a      	add	r3, sp, #616	; 0x268
 800dbce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800dbd2:	ec57 6b10 	vmov	r6, r7, d0
 800dbd6:	00ec      	lsls	r4, r5, #3
 800dbd8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800dbdc:	46aa      	mov	sl, r5
 800dbde:	f1ba 0f00 	cmp.w	sl, #0
 800dbe2:	f280 80d6 	bge.w	800dd92 <__kernel_rem_pio2+0x472>
 800dbe6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800dc38 <__kernel_rem_pio2+0x318>
 800dbea:	462e      	mov	r6, r5
 800dbec:	2e00      	cmp	r6, #0
 800dbee:	f2c0 8104 	blt.w	800ddfa <__kernel_rem_pio2+0x4da>
 800dbf2:	ab72      	add	r3, sp, #456	; 0x1c8
 800dbf4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800dbf8:	f8df a064 	ldr.w	sl, [pc, #100]	; 800dc60 <__kernel_rem_pio2+0x340>
 800dbfc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800dc00:	f04f 0800 	mov.w	r8, #0
 800dc04:	1baf      	subs	r7, r5, r6
 800dc06:	e0ea      	b.n	800ddde <__kernel_rem_pio2+0x4be>
 800dc08:	f04f 0b02 	mov.w	fp, #2
 800dc0c:	e759      	b.n	800dac2 <__kernel_rem_pio2+0x1a2>
 800dc0e:	f8d8 3000 	ldr.w	r3, [r8]
 800dc12:	b955      	cbnz	r5, 800dc2a <__kernel_rem_pio2+0x30a>
 800dc14:	b123      	cbz	r3, 800dc20 <__kernel_rem_pio2+0x300>
 800dc16:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dc1a:	f8c8 3000 	str.w	r3, [r8]
 800dc1e:	2301      	movs	r3, #1
 800dc20:	3201      	adds	r2, #1
 800dc22:	f108 0804 	add.w	r8, r8, #4
 800dc26:	461d      	mov	r5, r3
 800dc28:	e752      	b.n	800dad0 <__kernel_rem_pio2+0x1b0>
 800dc2a:	1acb      	subs	r3, r1, r3
 800dc2c:	f8c8 3000 	str.w	r3, [r8]
 800dc30:	462b      	mov	r3, r5
 800dc32:	e7f5      	b.n	800dc20 <__kernel_rem_pio2+0x300>
 800dc34:	f3af 8000 	nop.w
	...
 800dc44:	3ff00000 	.word	0x3ff00000
 800dc48:	0800ef50 	.word	0x0800ef50
 800dc4c:	40200000 	.word	0x40200000
 800dc50:	3ff00000 	.word	0x3ff00000
 800dc54:	3e700000 	.word	0x3e700000
 800dc58:	41700000 	.word	0x41700000
 800dc5c:	3fe00000 	.word	0x3fe00000
 800dc60:	0800ef10 	.word	0x0800ef10
 800dc64:	1e62      	subs	r2, r4, #1
 800dc66:	ab0e      	add	r3, sp, #56	; 0x38
 800dc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dc70:	a90e      	add	r1, sp, #56	; 0x38
 800dc72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dc76:	e739      	b.n	800daec <__kernel_rem_pio2+0x1cc>
 800dc78:	1e62      	subs	r2, r4, #1
 800dc7a:	ab0e      	add	r3, sp, #56	; 0x38
 800dc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc80:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dc84:	e7f4      	b.n	800dc70 <__kernel_rem_pio2+0x350>
 800dc86:	a90e      	add	r1, sp, #56	; 0x38
 800dc88:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dc8c:	3b01      	subs	r3, #1
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	e789      	b.n	800dba6 <__kernel_rem_pio2+0x286>
 800dc92:	3301      	adds	r3, #1
 800dc94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dc98:	2900      	cmp	r1, #0
 800dc9a:	d0fa      	beq.n	800dc92 <__kernel_rem_pio2+0x372>
 800dc9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc9e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800dca2:	446a      	add	r2, sp
 800dca4:	3a98      	subs	r2, #152	; 0x98
 800dca6:	920a      	str	r2, [sp, #40]	; 0x28
 800dca8:	9a08      	ldr	r2, [sp, #32]
 800dcaa:	18e3      	adds	r3, r4, r3
 800dcac:	18a5      	adds	r5, r4, r2
 800dcae:	aa22      	add	r2, sp, #136	; 0x88
 800dcb0:	f104 0801 	add.w	r8, r4, #1
 800dcb4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dcb8:	9304      	str	r3, [sp, #16]
 800dcba:	9b04      	ldr	r3, [sp, #16]
 800dcbc:	4543      	cmp	r3, r8
 800dcbe:	da04      	bge.n	800dcca <__kernel_rem_pio2+0x3aa>
 800dcc0:	461c      	mov	r4, r3
 800dcc2:	e6a3      	b.n	800da0c <__kernel_rem_pio2+0xec>
 800dcc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e7e4      	b.n	800dc94 <__kernel_rem_pio2+0x374>
 800dcca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dccc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dcd0:	f7f2 fc50 	bl	8000574 <__aeabi_i2d>
 800dcd4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dcd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcda:	46ab      	mov	fp, r5
 800dcdc:	461c      	mov	r4, r3
 800dcde:	f04f 0900 	mov.w	r9, #0
 800dce2:	2600      	movs	r6, #0
 800dce4:	2700      	movs	r7, #0
 800dce6:	9b06      	ldr	r3, [sp, #24]
 800dce8:	4599      	cmp	r9, r3
 800dcea:	dd06      	ble.n	800dcfa <__kernel_rem_pio2+0x3da>
 800dcec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcee:	e8e3 6702 	strd	r6, r7, [r3], #8
 800dcf2:	f108 0801 	add.w	r8, r8, #1
 800dcf6:	930a      	str	r3, [sp, #40]	; 0x28
 800dcf8:	e7df      	b.n	800dcba <__kernel_rem_pio2+0x39a>
 800dcfa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dcfe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dd02:	f7f2 fca1 	bl	8000648 <__aeabi_dmul>
 800dd06:	4602      	mov	r2, r0
 800dd08:	460b      	mov	r3, r1
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	4639      	mov	r1, r7
 800dd0e:	f7f2 fae5 	bl	80002dc <__adddf3>
 800dd12:	f109 0901 	add.w	r9, r9, #1
 800dd16:	4606      	mov	r6, r0
 800dd18:	460f      	mov	r7, r1
 800dd1a:	e7e4      	b.n	800dce6 <__kernel_rem_pio2+0x3c6>
 800dd1c:	3d01      	subs	r5, #1
 800dd1e:	e748      	b.n	800dbb2 <__kernel_rem_pio2+0x292>
 800dd20:	ec47 6b10 	vmov	d0, r6, r7
 800dd24:	f1ca 0000 	rsb	r0, sl, #0
 800dd28:	f000 fa92 	bl	800e250 <scalbn>
 800dd2c:	ec57 6b10 	vmov	r6, r7, d0
 800dd30:	4ba0      	ldr	r3, [pc, #640]	; (800dfb4 <__kernel_rem_pio2+0x694>)
 800dd32:	ee10 0a10 	vmov	r0, s0
 800dd36:	2200      	movs	r2, #0
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 ff0b 	bl	8000b54 <__aeabi_dcmpge>
 800dd3e:	b1f8      	cbz	r0, 800dd80 <__kernel_rem_pio2+0x460>
 800dd40:	4b9d      	ldr	r3, [pc, #628]	; (800dfb8 <__kernel_rem_pio2+0x698>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	4630      	mov	r0, r6
 800dd46:	4639      	mov	r1, r7
 800dd48:	f7f2 fc7e 	bl	8000648 <__aeabi_dmul>
 800dd4c:	f7f2 ff2c 	bl	8000ba8 <__aeabi_d2iz>
 800dd50:	4680      	mov	r8, r0
 800dd52:	f7f2 fc0f 	bl	8000574 <__aeabi_i2d>
 800dd56:	4b97      	ldr	r3, [pc, #604]	; (800dfb4 <__kernel_rem_pio2+0x694>)
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f7f2 fc75 	bl	8000648 <__aeabi_dmul>
 800dd5e:	460b      	mov	r3, r1
 800dd60:	4602      	mov	r2, r0
 800dd62:	4639      	mov	r1, r7
 800dd64:	4630      	mov	r0, r6
 800dd66:	f7f2 fab7 	bl	80002d8 <__aeabi_dsub>
 800dd6a:	f7f2 ff1d 	bl	8000ba8 <__aeabi_d2iz>
 800dd6e:	1c65      	adds	r5, r4, #1
 800dd70:	ab0e      	add	r3, sp, #56	; 0x38
 800dd72:	f10a 0a18 	add.w	sl, sl, #24
 800dd76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dd7a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dd7e:	e720      	b.n	800dbc2 <__kernel_rem_pio2+0x2a2>
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 ff10 	bl	8000ba8 <__aeabi_d2iz>
 800dd88:	ab0e      	add	r3, sp, #56	; 0x38
 800dd8a:	4625      	mov	r5, r4
 800dd8c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dd90:	e717      	b.n	800dbc2 <__kernel_rem_pio2+0x2a2>
 800dd92:	ab0e      	add	r3, sp, #56	; 0x38
 800dd94:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dd98:	f7f2 fbec 	bl	8000574 <__aeabi_i2d>
 800dd9c:	4632      	mov	r2, r6
 800dd9e:	463b      	mov	r3, r7
 800dda0:	f7f2 fc52 	bl	8000648 <__aeabi_dmul>
 800dda4:	4b84      	ldr	r3, [pc, #528]	; (800dfb8 <__kernel_rem_pio2+0x698>)
 800dda6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ddaa:	2200      	movs	r2, #0
 800ddac:	4630      	mov	r0, r6
 800ddae:	4639      	mov	r1, r7
 800ddb0:	f7f2 fc4a 	bl	8000648 <__aeabi_dmul>
 800ddb4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ddb8:	4606      	mov	r6, r0
 800ddba:	460f      	mov	r7, r1
 800ddbc:	e70f      	b.n	800dbde <__kernel_rem_pio2+0x2be>
 800ddbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ddc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ddc6:	f7f2 fc3f 	bl	8000648 <__aeabi_dmul>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	460b      	mov	r3, r1
 800ddce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ddd2:	f7f2 fa83 	bl	80002dc <__adddf3>
 800ddd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ddda:	f108 0801 	add.w	r8, r8, #1
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	4598      	cmp	r8, r3
 800dde2:	dc01      	bgt.n	800dde8 <__kernel_rem_pio2+0x4c8>
 800dde4:	45b8      	cmp	r8, r7
 800dde6:	ddea      	ble.n	800ddbe <__kernel_rem_pio2+0x49e>
 800dde8:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ddec:	ab4a      	add	r3, sp, #296	; 0x128
 800ddee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ddf2:	ed87 7b00 	vstr	d7, [r7]
 800ddf6:	3e01      	subs	r6, #1
 800ddf8:	e6f8      	b.n	800dbec <__kernel_rem_pio2+0x2cc>
 800ddfa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ddfc:	2b02      	cmp	r3, #2
 800ddfe:	dc0b      	bgt.n	800de18 <__kernel_rem_pio2+0x4f8>
 800de00:	2b00      	cmp	r3, #0
 800de02:	dc35      	bgt.n	800de70 <__kernel_rem_pio2+0x550>
 800de04:	d059      	beq.n	800deba <__kernel_rem_pio2+0x59a>
 800de06:	9b04      	ldr	r3, [sp, #16]
 800de08:	f003 0007 	and.w	r0, r3, #7
 800de0c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800de10:	ecbd 8b02 	vpop	{d8}
 800de14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de18:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800de1a:	2b03      	cmp	r3, #3
 800de1c:	d1f3      	bne.n	800de06 <__kernel_rem_pio2+0x4e6>
 800de1e:	ab4a      	add	r3, sp, #296	; 0x128
 800de20:	4423      	add	r3, r4
 800de22:	9306      	str	r3, [sp, #24]
 800de24:	461c      	mov	r4, r3
 800de26:	469a      	mov	sl, r3
 800de28:	9502      	str	r5, [sp, #8]
 800de2a:	9b02      	ldr	r3, [sp, #8]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f1aa 0a08 	sub.w	sl, sl, #8
 800de32:	dc6b      	bgt.n	800df0c <__kernel_rem_pio2+0x5ec>
 800de34:	46aa      	mov	sl, r5
 800de36:	f1ba 0f01 	cmp.w	sl, #1
 800de3a:	f1a4 0408 	sub.w	r4, r4, #8
 800de3e:	f300 8085 	bgt.w	800df4c <__kernel_rem_pio2+0x62c>
 800de42:	9c06      	ldr	r4, [sp, #24]
 800de44:	2000      	movs	r0, #0
 800de46:	3408      	adds	r4, #8
 800de48:	2100      	movs	r1, #0
 800de4a:	2d01      	cmp	r5, #1
 800de4c:	f300 809d 	bgt.w	800df8a <__kernel_rem_pio2+0x66a>
 800de50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800de54:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800de58:	f1bb 0f00 	cmp.w	fp, #0
 800de5c:	f040 809b 	bne.w	800df96 <__kernel_rem_pio2+0x676>
 800de60:	9b01      	ldr	r3, [sp, #4]
 800de62:	e9c3 5600 	strd	r5, r6, [r3]
 800de66:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800de6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800de6e:	e7ca      	b.n	800de06 <__kernel_rem_pio2+0x4e6>
 800de70:	3408      	adds	r4, #8
 800de72:	ab4a      	add	r3, sp, #296	; 0x128
 800de74:	441c      	add	r4, r3
 800de76:	462e      	mov	r6, r5
 800de78:	2000      	movs	r0, #0
 800de7a:	2100      	movs	r1, #0
 800de7c:	2e00      	cmp	r6, #0
 800de7e:	da36      	bge.n	800deee <__kernel_rem_pio2+0x5ce>
 800de80:	f1bb 0f00 	cmp.w	fp, #0
 800de84:	d039      	beq.n	800defa <__kernel_rem_pio2+0x5da>
 800de86:	4602      	mov	r2, r0
 800de88:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de8c:	9c01      	ldr	r4, [sp, #4]
 800de8e:	e9c4 2300 	strd	r2, r3, [r4]
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800de9a:	f7f2 fa1d 	bl	80002d8 <__aeabi_dsub>
 800de9e:	ae4c      	add	r6, sp, #304	; 0x130
 800dea0:	2401      	movs	r4, #1
 800dea2:	42a5      	cmp	r5, r4
 800dea4:	da2c      	bge.n	800df00 <__kernel_rem_pio2+0x5e0>
 800dea6:	f1bb 0f00 	cmp.w	fp, #0
 800deaa:	d002      	beq.n	800deb2 <__kernel_rem_pio2+0x592>
 800deac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800deb0:	4619      	mov	r1, r3
 800deb2:	9b01      	ldr	r3, [sp, #4]
 800deb4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800deb8:	e7a5      	b.n	800de06 <__kernel_rem_pio2+0x4e6>
 800deba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800debe:	eb0d 0403 	add.w	r4, sp, r3
 800dec2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dec6:	2000      	movs	r0, #0
 800dec8:	2100      	movs	r1, #0
 800deca:	2d00      	cmp	r5, #0
 800decc:	da09      	bge.n	800dee2 <__kernel_rem_pio2+0x5c2>
 800dece:	f1bb 0f00 	cmp.w	fp, #0
 800ded2:	d002      	beq.n	800deda <__kernel_rem_pio2+0x5ba>
 800ded4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ded8:	4619      	mov	r1, r3
 800deda:	9b01      	ldr	r3, [sp, #4]
 800dedc:	e9c3 0100 	strd	r0, r1, [r3]
 800dee0:	e791      	b.n	800de06 <__kernel_rem_pio2+0x4e6>
 800dee2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800dee6:	f7f2 f9f9 	bl	80002dc <__adddf3>
 800deea:	3d01      	subs	r5, #1
 800deec:	e7ed      	b.n	800deca <__kernel_rem_pio2+0x5aa>
 800deee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800def2:	f7f2 f9f3 	bl	80002dc <__adddf3>
 800def6:	3e01      	subs	r6, #1
 800def8:	e7c0      	b.n	800de7c <__kernel_rem_pio2+0x55c>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	e7c5      	b.n	800de8c <__kernel_rem_pio2+0x56c>
 800df00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800df04:	f7f2 f9ea 	bl	80002dc <__adddf3>
 800df08:	3401      	adds	r4, #1
 800df0a:	e7ca      	b.n	800dea2 <__kernel_rem_pio2+0x582>
 800df0c:	e9da 8900 	ldrd	r8, r9, [sl]
 800df10:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800df14:	9b02      	ldr	r3, [sp, #8]
 800df16:	3b01      	subs	r3, #1
 800df18:	9302      	str	r3, [sp, #8]
 800df1a:	4632      	mov	r2, r6
 800df1c:	463b      	mov	r3, r7
 800df1e:	4640      	mov	r0, r8
 800df20:	4649      	mov	r1, r9
 800df22:	f7f2 f9db 	bl	80002dc <__adddf3>
 800df26:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4640      	mov	r0, r8
 800df30:	4649      	mov	r1, r9
 800df32:	f7f2 f9d1 	bl	80002d8 <__aeabi_dsub>
 800df36:	4632      	mov	r2, r6
 800df38:	463b      	mov	r3, r7
 800df3a:	f7f2 f9cf 	bl	80002dc <__adddf3>
 800df3e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800df42:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df46:	ed8a 7b00 	vstr	d7, [sl]
 800df4a:	e76e      	b.n	800de2a <__kernel_rem_pio2+0x50a>
 800df4c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800df50:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800df54:	4640      	mov	r0, r8
 800df56:	4632      	mov	r2, r6
 800df58:	463b      	mov	r3, r7
 800df5a:	4649      	mov	r1, r9
 800df5c:	f7f2 f9be 	bl	80002dc <__adddf3>
 800df60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df64:	4602      	mov	r2, r0
 800df66:	460b      	mov	r3, r1
 800df68:	4640      	mov	r0, r8
 800df6a:	4649      	mov	r1, r9
 800df6c:	f7f2 f9b4 	bl	80002d8 <__aeabi_dsub>
 800df70:	4632      	mov	r2, r6
 800df72:	463b      	mov	r3, r7
 800df74:	f7f2 f9b2 	bl	80002dc <__adddf3>
 800df78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df7c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800df80:	ed84 7b00 	vstr	d7, [r4]
 800df84:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800df88:	e755      	b.n	800de36 <__kernel_rem_pio2+0x516>
 800df8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800df8e:	f7f2 f9a5 	bl	80002dc <__adddf3>
 800df92:	3d01      	subs	r5, #1
 800df94:	e759      	b.n	800de4a <__kernel_rem_pio2+0x52a>
 800df96:	9b01      	ldr	r3, [sp, #4]
 800df98:	9a01      	ldr	r2, [sp, #4]
 800df9a:	601d      	str	r5, [r3, #0]
 800df9c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dfa0:	605c      	str	r4, [r3, #4]
 800dfa2:	609f      	str	r7, [r3, #8]
 800dfa4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dfa8:	60d3      	str	r3, [r2, #12]
 800dfaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dfae:	6110      	str	r0, [r2, #16]
 800dfb0:	6153      	str	r3, [r2, #20]
 800dfb2:	e728      	b.n	800de06 <__kernel_rem_pio2+0x4e6>
 800dfb4:	41700000 	.word	0x41700000
 800dfb8:	3e700000 	.word	0x3e700000
 800dfbc:	00000000 	.word	0x00000000

0800dfc0 <__kernel_sin>:
 800dfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc4:	ed2d 8b04 	vpush	{d8-d9}
 800dfc8:	eeb0 8a41 	vmov.f32	s16, s2
 800dfcc:	eef0 8a61 	vmov.f32	s17, s3
 800dfd0:	ec55 4b10 	vmov	r4, r5, d0
 800dfd4:	b083      	sub	sp, #12
 800dfd6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800dfda:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dfde:	9001      	str	r0, [sp, #4]
 800dfe0:	da06      	bge.n	800dff0 <__kernel_sin+0x30>
 800dfe2:	ee10 0a10 	vmov	r0, s0
 800dfe6:	4629      	mov	r1, r5
 800dfe8:	f7f2 fdde 	bl	8000ba8 <__aeabi_d2iz>
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d051      	beq.n	800e094 <__kernel_sin+0xd4>
 800dff0:	4622      	mov	r2, r4
 800dff2:	462b      	mov	r3, r5
 800dff4:	4620      	mov	r0, r4
 800dff6:	4629      	mov	r1, r5
 800dff8:	f7f2 fb26 	bl	8000648 <__aeabi_dmul>
 800dffc:	4682      	mov	sl, r0
 800dffe:	468b      	mov	fp, r1
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	4620      	mov	r0, r4
 800e006:	4629      	mov	r1, r5
 800e008:	f7f2 fb1e 	bl	8000648 <__aeabi_dmul>
 800e00c:	a341      	add	r3, pc, #260	; (adr r3, 800e114 <__kernel_sin+0x154>)
 800e00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e012:	4680      	mov	r8, r0
 800e014:	4689      	mov	r9, r1
 800e016:	4650      	mov	r0, sl
 800e018:	4659      	mov	r1, fp
 800e01a:	f7f2 fb15 	bl	8000648 <__aeabi_dmul>
 800e01e:	a33f      	add	r3, pc, #252	; (adr r3, 800e11c <__kernel_sin+0x15c>)
 800e020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e024:	f7f2 f958 	bl	80002d8 <__aeabi_dsub>
 800e028:	4652      	mov	r2, sl
 800e02a:	465b      	mov	r3, fp
 800e02c:	f7f2 fb0c 	bl	8000648 <__aeabi_dmul>
 800e030:	a33c      	add	r3, pc, #240	; (adr r3, 800e124 <__kernel_sin+0x164>)
 800e032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e036:	f7f2 f951 	bl	80002dc <__adddf3>
 800e03a:	4652      	mov	r2, sl
 800e03c:	465b      	mov	r3, fp
 800e03e:	f7f2 fb03 	bl	8000648 <__aeabi_dmul>
 800e042:	a33a      	add	r3, pc, #232	; (adr r3, 800e12c <__kernel_sin+0x16c>)
 800e044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e048:	f7f2 f946 	bl	80002d8 <__aeabi_dsub>
 800e04c:	4652      	mov	r2, sl
 800e04e:	465b      	mov	r3, fp
 800e050:	f7f2 fafa 	bl	8000648 <__aeabi_dmul>
 800e054:	a337      	add	r3, pc, #220	; (adr r3, 800e134 <__kernel_sin+0x174>)
 800e056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05a:	f7f2 f93f 	bl	80002dc <__adddf3>
 800e05e:	9b01      	ldr	r3, [sp, #4]
 800e060:	4606      	mov	r6, r0
 800e062:	460f      	mov	r7, r1
 800e064:	b9eb      	cbnz	r3, 800e0a2 <__kernel_sin+0xe2>
 800e066:	4602      	mov	r2, r0
 800e068:	460b      	mov	r3, r1
 800e06a:	4650      	mov	r0, sl
 800e06c:	4659      	mov	r1, fp
 800e06e:	f7f2 faeb 	bl	8000648 <__aeabi_dmul>
 800e072:	a325      	add	r3, pc, #148	; (adr r3, 800e108 <__kernel_sin+0x148>)
 800e074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e078:	f7f2 f92e 	bl	80002d8 <__aeabi_dsub>
 800e07c:	4642      	mov	r2, r8
 800e07e:	464b      	mov	r3, r9
 800e080:	f7f2 fae2 	bl	8000648 <__aeabi_dmul>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	4620      	mov	r0, r4
 800e08a:	4629      	mov	r1, r5
 800e08c:	f7f2 f926 	bl	80002dc <__adddf3>
 800e090:	4604      	mov	r4, r0
 800e092:	460d      	mov	r5, r1
 800e094:	ec45 4b10 	vmov	d0, r4, r5
 800e098:	b003      	add	sp, #12
 800e09a:	ecbd 8b04 	vpop	{d8-d9}
 800e09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a2:	4b1b      	ldr	r3, [pc, #108]	; (800e110 <__kernel_sin+0x150>)
 800e0a4:	ec51 0b18 	vmov	r0, r1, d8
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	f7f2 facd 	bl	8000648 <__aeabi_dmul>
 800e0ae:	4632      	mov	r2, r6
 800e0b0:	ec41 0b19 	vmov	d9, r0, r1
 800e0b4:	463b      	mov	r3, r7
 800e0b6:	4640      	mov	r0, r8
 800e0b8:	4649      	mov	r1, r9
 800e0ba:	f7f2 fac5 	bl	8000648 <__aeabi_dmul>
 800e0be:	4602      	mov	r2, r0
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	ec51 0b19 	vmov	r0, r1, d9
 800e0c6:	f7f2 f907 	bl	80002d8 <__aeabi_dsub>
 800e0ca:	4652      	mov	r2, sl
 800e0cc:	465b      	mov	r3, fp
 800e0ce:	f7f2 fabb 	bl	8000648 <__aeabi_dmul>
 800e0d2:	ec53 2b18 	vmov	r2, r3, d8
 800e0d6:	f7f2 f8ff 	bl	80002d8 <__aeabi_dsub>
 800e0da:	a30b      	add	r3, pc, #44	; (adr r3, 800e108 <__kernel_sin+0x148>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	460f      	mov	r7, r1
 800e0e4:	4640      	mov	r0, r8
 800e0e6:	4649      	mov	r1, r9
 800e0e8:	f7f2 faae 	bl	8000648 <__aeabi_dmul>
 800e0ec:	4602      	mov	r2, r0
 800e0ee:	460b      	mov	r3, r1
 800e0f0:	4630      	mov	r0, r6
 800e0f2:	4639      	mov	r1, r7
 800e0f4:	f7f2 f8f2 	bl	80002dc <__adddf3>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	460b      	mov	r3, r1
 800e0fc:	4620      	mov	r0, r4
 800e0fe:	4629      	mov	r1, r5
 800e100:	f7f2 f8ea 	bl	80002d8 <__aeabi_dsub>
 800e104:	e7c4      	b.n	800e090 <__kernel_sin+0xd0>
 800e106:	bf00      	nop
 800e108:	55555549 	.word	0x55555549
 800e10c:	3fc55555 	.word	0x3fc55555
 800e110:	3fe00000 	.word	0x3fe00000
 800e114:	5acfd57c 	.word	0x5acfd57c
 800e118:	3de5d93a 	.word	0x3de5d93a
 800e11c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e120:	3e5ae5e6 	.word	0x3e5ae5e6
 800e124:	57b1fe7d 	.word	0x57b1fe7d
 800e128:	3ec71de3 	.word	0x3ec71de3
 800e12c:	19c161d5 	.word	0x19c161d5
 800e130:	3f2a01a0 	.word	0x3f2a01a0
 800e134:	1110f8a6 	.word	0x1110f8a6
 800e138:	3f811111 	.word	0x3f811111

0800e13c <fabs>:
 800e13c:	ec51 0b10 	vmov	r0, r1, d0
 800e140:	ee10 2a10 	vmov	r2, s0
 800e144:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e148:	ec43 2b10 	vmov	d0, r2, r3
 800e14c:	4770      	bx	lr
	...

0800e150 <floor>:
 800e150:	ec51 0b10 	vmov	r0, r1, d0
 800e154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e158:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e15c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e160:	2e13      	cmp	r6, #19
 800e162:	ee10 5a10 	vmov	r5, s0
 800e166:	ee10 8a10 	vmov	r8, s0
 800e16a:	460c      	mov	r4, r1
 800e16c:	dc32      	bgt.n	800e1d4 <floor+0x84>
 800e16e:	2e00      	cmp	r6, #0
 800e170:	da14      	bge.n	800e19c <floor+0x4c>
 800e172:	a333      	add	r3, pc, #204	; (adr r3, 800e240 <floor+0xf0>)
 800e174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e178:	f7f2 f8b0 	bl	80002dc <__adddf3>
 800e17c:	2200      	movs	r2, #0
 800e17e:	2300      	movs	r3, #0
 800e180:	f7f2 fcf2 	bl	8000b68 <__aeabi_dcmpgt>
 800e184:	b138      	cbz	r0, 800e196 <floor+0x46>
 800e186:	2c00      	cmp	r4, #0
 800e188:	da57      	bge.n	800e23a <floor+0xea>
 800e18a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e18e:	431d      	orrs	r5, r3
 800e190:	d001      	beq.n	800e196 <floor+0x46>
 800e192:	4c2d      	ldr	r4, [pc, #180]	; (800e248 <floor+0xf8>)
 800e194:	2500      	movs	r5, #0
 800e196:	4621      	mov	r1, r4
 800e198:	4628      	mov	r0, r5
 800e19a:	e025      	b.n	800e1e8 <floor+0x98>
 800e19c:	4f2b      	ldr	r7, [pc, #172]	; (800e24c <floor+0xfc>)
 800e19e:	4137      	asrs	r7, r6
 800e1a0:	ea01 0307 	and.w	r3, r1, r7
 800e1a4:	4303      	orrs	r3, r0
 800e1a6:	d01f      	beq.n	800e1e8 <floor+0x98>
 800e1a8:	a325      	add	r3, pc, #148	; (adr r3, 800e240 <floor+0xf0>)
 800e1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ae:	f7f2 f895 	bl	80002dc <__adddf3>
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	f7f2 fcd7 	bl	8000b68 <__aeabi_dcmpgt>
 800e1ba:	2800      	cmp	r0, #0
 800e1bc:	d0eb      	beq.n	800e196 <floor+0x46>
 800e1be:	2c00      	cmp	r4, #0
 800e1c0:	bfbe      	ittt	lt
 800e1c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e1c6:	fa43 f606 	asrlt.w	r6, r3, r6
 800e1ca:	19a4      	addlt	r4, r4, r6
 800e1cc:	ea24 0407 	bic.w	r4, r4, r7
 800e1d0:	2500      	movs	r5, #0
 800e1d2:	e7e0      	b.n	800e196 <floor+0x46>
 800e1d4:	2e33      	cmp	r6, #51	; 0x33
 800e1d6:	dd0b      	ble.n	800e1f0 <floor+0xa0>
 800e1d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e1dc:	d104      	bne.n	800e1e8 <floor+0x98>
 800e1de:	ee10 2a10 	vmov	r2, s0
 800e1e2:	460b      	mov	r3, r1
 800e1e4:	f7f2 f87a 	bl	80002dc <__adddf3>
 800e1e8:	ec41 0b10 	vmov	d0, r0, r1
 800e1ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e1f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e1f8:	fa23 f707 	lsr.w	r7, r3, r7
 800e1fc:	4207      	tst	r7, r0
 800e1fe:	d0f3      	beq.n	800e1e8 <floor+0x98>
 800e200:	a30f      	add	r3, pc, #60	; (adr r3, 800e240 <floor+0xf0>)
 800e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e206:	f7f2 f869 	bl	80002dc <__adddf3>
 800e20a:	2200      	movs	r2, #0
 800e20c:	2300      	movs	r3, #0
 800e20e:	f7f2 fcab 	bl	8000b68 <__aeabi_dcmpgt>
 800e212:	2800      	cmp	r0, #0
 800e214:	d0bf      	beq.n	800e196 <floor+0x46>
 800e216:	2c00      	cmp	r4, #0
 800e218:	da02      	bge.n	800e220 <floor+0xd0>
 800e21a:	2e14      	cmp	r6, #20
 800e21c:	d103      	bne.n	800e226 <floor+0xd6>
 800e21e:	3401      	adds	r4, #1
 800e220:	ea25 0507 	bic.w	r5, r5, r7
 800e224:	e7b7      	b.n	800e196 <floor+0x46>
 800e226:	2301      	movs	r3, #1
 800e228:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e22c:	fa03 f606 	lsl.w	r6, r3, r6
 800e230:	4435      	add	r5, r6
 800e232:	4545      	cmp	r5, r8
 800e234:	bf38      	it	cc
 800e236:	18e4      	addcc	r4, r4, r3
 800e238:	e7f2      	b.n	800e220 <floor+0xd0>
 800e23a:	2500      	movs	r5, #0
 800e23c:	462c      	mov	r4, r5
 800e23e:	e7aa      	b.n	800e196 <floor+0x46>
 800e240:	8800759c 	.word	0x8800759c
 800e244:	7e37e43c 	.word	0x7e37e43c
 800e248:	bff00000 	.word	0xbff00000
 800e24c:	000fffff 	.word	0x000fffff

0800e250 <scalbn>:
 800e250:	b570      	push	{r4, r5, r6, lr}
 800e252:	ec55 4b10 	vmov	r4, r5, d0
 800e256:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e25a:	4606      	mov	r6, r0
 800e25c:	462b      	mov	r3, r5
 800e25e:	b99a      	cbnz	r2, 800e288 <scalbn+0x38>
 800e260:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e264:	4323      	orrs	r3, r4
 800e266:	d036      	beq.n	800e2d6 <scalbn+0x86>
 800e268:	4b39      	ldr	r3, [pc, #228]	; (800e350 <scalbn+0x100>)
 800e26a:	4629      	mov	r1, r5
 800e26c:	ee10 0a10 	vmov	r0, s0
 800e270:	2200      	movs	r2, #0
 800e272:	f7f2 f9e9 	bl	8000648 <__aeabi_dmul>
 800e276:	4b37      	ldr	r3, [pc, #220]	; (800e354 <scalbn+0x104>)
 800e278:	429e      	cmp	r6, r3
 800e27a:	4604      	mov	r4, r0
 800e27c:	460d      	mov	r5, r1
 800e27e:	da10      	bge.n	800e2a2 <scalbn+0x52>
 800e280:	a32b      	add	r3, pc, #172	; (adr r3, 800e330 <scalbn+0xe0>)
 800e282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e286:	e03a      	b.n	800e2fe <scalbn+0xae>
 800e288:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e28c:	428a      	cmp	r2, r1
 800e28e:	d10c      	bne.n	800e2aa <scalbn+0x5a>
 800e290:	ee10 2a10 	vmov	r2, s0
 800e294:	4620      	mov	r0, r4
 800e296:	4629      	mov	r1, r5
 800e298:	f7f2 f820 	bl	80002dc <__adddf3>
 800e29c:	4604      	mov	r4, r0
 800e29e:	460d      	mov	r5, r1
 800e2a0:	e019      	b.n	800e2d6 <scalbn+0x86>
 800e2a2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	3a36      	subs	r2, #54	; 0x36
 800e2aa:	4432      	add	r2, r6
 800e2ac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e2b0:	428a      	cmp	r2, r1
 800e2b2:	dd08      	ble.n	800e2c6 <scalbn+0x76>
 800e2b4:	2d00      	cmp	r5, #0
 800e2b6:	a120      	add	r1, pc, #128	; (adr r1, 800e338 <scalbn+0xe8>)
 800e2b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2bc:	da1c      	bge.n	800e2f8 <scalbn+0xa8>
 800e2be:	a120      	add	r1, pc, #128	; (adr r1, 800e340 <scalbn+0xf0>)
 800e2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2c4:	e018      	b.n	800e2f8 <scalbn+0xa8>
 800e2c6:	2a00      	cmp	r2, #0
 800e2c8:	dd08      	ble.n	800e2dc <scalbn+0x8c>
 800e2ca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e2d6:	ec45 4b10 	vmov	d0, r4, r5
 800e2da:	bd70      	pop	{r4, r5, r6, pc}
 800e2dc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e2e0:	da19      	bge.n	800e316 <scalbn+0xc6>
 800e2e2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e2e6:	429e      	cmp	r6, r3
 800e2e8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e2ec:	dd0a      	ble.n	800e304 <scalbn+0xb4>
 800e2ee:	a112      	add	r1, pc, #72	; (adr r1, 800e338 <scalbn+0xe8>)
 800e2f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d1e2      	bne.n	800e2be <scalbn+0x6e>
 800e2f8:	a30f      	add	r3, pc, #60	; (adr r3, 800e338 <scalbn+0xe8>)
 800e2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2fe:	f7f2 f9a3 	bl	8000648 <__aeabi_dmul>
 800e302:	e7cb      	b.n	800e29c <scalbn+0x4c>
 800e304:	a10a      	add	r1, pc, #40	; (adr r1, 800e330 <scalbn+0xe0>)
 800e306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d0b8      	beq.n	800e280 <scalbn+0x30>
 800e30e:	a10e      	add	r1, pc, #56	; (adr r1, 800e348 <scalbn+0xf8>)
 800e310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e314:	e7b4      	b.n	800e280 <scalbn+0x30>
 800e316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e31a:	3236      	adds	r2, #54	; 0x36
 800e31c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e320:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e324:	4620      	mov	r0, r4
 800e326:	4b0c      	ldr	r3, [pc, #48]	; (800e358 <scalbn+0x108>)
 800e328:	2200      	movs	r2, #0
 800e32a:	e7e8      	b.n	800e2fe <scalbn+0xae>
 800e32c:	f3af 8000 	nop.w
 800e330:	c2f8f359 	.word	0xc2f8f359
 800e334:	01a56e1f 	.word	0x01a56e1f
 800e338:	8800759c 	.word	0x8800759c
 800e33c:	7e37e43c 	.word	0x7e37e43c
 800e340:	8800759c 	.word	0x8800759c
 800e344:	fe37e43c 	.word	0xfe37e43c
 800e348:	c2f8f359 	.word	0xc2f8f359
 800e34c:	81a56e1f 	.word	0x81a56e1f
 800e350:	43500000 	.word	0x43500000
 800e354:	ffff3cb0 	.word	0xffff3cb0
 800e358:	3c900000 	.word	0x3c900000

0800e35c <__errno>:
 800e35c:	4b01      	ldr	r3, [pc, #4]	; (800e364 <__errno+0x8>)
 800e35e:	6818      	ldr	r0, [r3, #0]
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20000194 	.word	0x20000194

0800e368 <__libc_init_array>:
 800e368:	b570      	push	{r4, r5, r6, lr}
 800e36a:	4d0d      	ldr	r5, [pc, #52]	; (800e3a0 <__libc_init_array+0x38>)
 800e36c:	4c0d      	ldr	r4, [pc, #52]	; (800e3a4 <__libc_init_array+0x3c>)
 800e36e:	1b64      	subs	r4, r4, r5
 800e370:	10a4      	asrs	r4, r4, #2
 800e372:	2600      	movs	r6, #0
 800e374:	42a6      	cmp	r6, r4
 800e376:	d109      	bne.n	800e38c <__libc_init_array+0x24>
 800e378:	4d0b      	ldr	r5, [pc, #44]	; (800e3a8 <__libc_init_array+0x40>)
 800e37a:	4c0c      	ldr	r4, [pc, #48]	; (800e3ac <__libc_init_array+0x44>)
 800e37c:	f000 fc8e 	bl	800ec9c <_init>
 800e380:	1b64      	subs	r4, r4, r5
 800e382:	10a4      	asrs	r4, r4, #2
 800e384:	2600      	movs	r6, #0
 800e386:	42a6      	cmp	r6, r4
 800e388:	d105      	bne.n	800e396 <__libc_init_array+0x2e>
 800e38a:	bd70      	pop	{r4, r5, r6, pc}
 800e38c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e390:	4798      	blx	r3
 800e392:	3601      	adds	r6, #1
 800e394:	e7ee      	b.n	800e374 <__libc_init_array+0xc>
 800e396:	f855 3b04 	ldr.w	r3, [r5], #4
 800e39a:	4798      	blx	r3
 800e39c:	3601      	adds	r6, #1
 800e39e:	e7f2      	b.n	800e386 <__libc_init_array+0x1e>
 800e3a0:	0800ef9c 	.word	0x0800ef9c
 800e3a4:	0800ef9c 	.word	0x0800ef9c
 800e3a8:	0800ef9c 	.word	0x0800ef9c
 800e3ac:	0800efa0 	.word	0x0800efa0

0800e3b0 <memset>:
 800e3b0:	4402      	add	r2, r0
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d100      	bne.n	800e3ba <memset+0xa>
 800e3b8:	4770      	bx	lr
 800e3ba:	f803 1b01 	strb.w	r1, [r3], #1
 800e3be:	e7f9      	b.n	800e3b4 <memset+0x4>

0800e3c0 <siprintf>:
 800e3c0:	b40e      	push	{r1, r2, r3}
 800e3c2:	b500      	push	{lr}
 800e3c4:	b09c      	sub	sp, #112	; 0x70
 800e3c6:	ab1d      	add	r3, sp, #116	; 0x74
 800e3c8:	9002      	str	r0, [sp, #8]
 800e3ca:	9006      	str	r0, [sp, #24]
 800e3cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e3d0:	4809      	ldr	r0, [pc, #36]	; (800e3f8 <siprintf+0x38>)
 800e3d2:	9107      	str	r1, [sp, #28]
 800e3d4:	9104      	str	r1, [sp, #16]
 800e3d6:	4909      	ldr	r1, [pc, #36]	; (800e3fc <siprintf+0x3c>)
 800e3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3dc:	9105      	str	r1, [sp, #20]
 800e3de:	6800      	ldr	r0, [r0, #0]
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	a902      	add	r1, sp, #8
 800e3e4:	f000 f868 	bl	800e4b8 <_svfiprintf_r>
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	701a      	strb	r2, [r3, #0]
 800e3ee:	b01c      	add	sp, #112	; 0x70
 800e3f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3f4:	b003      	add	sp, #12
 800e3f6:	4770      	bx	lr
 800e3f8:	20000194 	.word	0x20000194
 800e3fc:	ffff0208 	.word	0xffff0208

0800e400 <__ssputs_r>:
 800e400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e404:	688e      	ldr	r6, [r1, #8]
 800e406:	429e      	cmp	r6, r3
 800e408:	4682      	mov	sl, r0
 800e40a:	460c      	mov	r4, r1
 800e40c:	4690      	mov	r8, r2
 800e40e:	461f      	mov	r7, r3
 800e410:	d838      	bhi.n	800e484 <__ssputs_r+0x84>
 800e412:	898a      	ldrh	r2, [r1, #12]
 800e414:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e418:	d032      	beq.n	800e480 <__ssputs_r+0x80>
 800e41a:	6825      	ldr	r5, [r4, #0]
 800e41c:	6909      	ldr	r1, [r1, #16]
 800e41e:	eba5 0901 	sub.w	r9, r5, r1
 800e422:	6965      	ldr	r5, [r4, #20]
 800e424:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e428:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e42c:	3301      	adds	r3, #1
 800e42e:	444b      	add	r3, r9
 800e430:	106d      	asrs	r5, r5, #1
 800e432:	429d      	cmp	r5, r3
 800e434:	bf38      	it	cc
 800e436:	461d      	movcc	r5, r3
 800e438:	0553      	lsls	r3, r2, #21
 800e43a:	d531      	bpl.n	800e4a0 <__ssputs_r+0xa0>
 800e43c:	4629      	mov	r1, r5
 800e43e:	f000 fb63 	bl	800eb08 <_malloc_r>
 800e442:	4606      	mov	r6, r0
 800e444:	b950      	cbnz	r0, 800e45c <__ssputs_r+0x5c>
 800e446:	230c      	movs	r3, #12
 800e448:	f8ca 3000 	str.w	r3, [sl]
 800e44c:	89a3      	ldrh	r3, [r4, #12]
 800e44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e452:	81a3      	strh	r3, [r4, #12]
 800e454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e45c:	6921      	ldr	r1, [r4, #16]
 800e45e:	464a      	mov	r2, r9
 800e460:	f000 fabe 	bl	800e9e0 <memcpy>
 800e464:	89a3      	ldrh	r3, [r4, #12]
 800e466:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e46e:	81a3      	strh	r3, [r4, #12]
 800e470:	6126      	str	r6, [r4, #16]
 800e472:	6165      	str	r5, [r4, #20]
 800e474:	444e      	add	r6, r9
 800e476:	eba5 0509 	sub.w	r5, r5, r9
 800e47a:	6026      	str	r6, [r4, #0]
 800e47c:	60a5      	str	r5, [r4, #8]
 800e47e:	463e      	mov	r6, r7
 800e480:	42be      	cmp	r6, r7
 800e482:	d900      	bls.n	800e486 <__ssputs_r+0x86>
 800e484:	463e      	mov	r6, r7
 800e486:	6820      	ldr	r0, [r4, #0]
 800e488:	4632      	mov	r2, r6
 800e48a:	4641      	mov	r1, r8
 800e48c:	f000 fab6 	bl	800e9fc <memmove>
 800e490:	68a3      	ldr	r3, [r4, #8]
 800e492:	1b9b      	subs	r3, r3, r6
 800e494:	60a3      	str	r3, [r4, #8]
 800e496:	6823      	ldr	r3, [r4, #0]
 800e498:	4433      	add	r3, r6
 800e49a:	6023      	str	r3, [r4, #0]
 800e49c:	2000      	movs	r0, #0
 800e49e:	e7db      	b.n	800e458 <__ssputs_r+0x58>
 800e4a0:	462a      	mov	r2, r5
 800e4a2:	f000 fba5 	bl	800ebf0 <_realloc_r>
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	d1e1      	bne.n	800e470 <__ssputs_r+0x70>
 800e4ac:	6921      	ldr	r1, [r4, #16]
 800e4ae:	4650      	mov	r0, sl
 800e4b0:	f000 fabe 	bl	800ea30 <_free_r>
 800e4b4:	e7c7      	b.n	800e446 <__ssputs_r+0x46>
	...

0800e4b8 <_svfiprintf_r>:
 800e4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4bc:	4698      	mov	r8, r3
 800e4be:	898b      	ldrh	r3, [r1, #12]
 800e4c0:	061b      	lsls	r3, r3, #24
 800e4c2:	b09d      	sub	sp, #116	; 0x74
 800e4c4:	4607      	mov	r7, r0
 800e4c6:	460d      	mov	r5, r1
 800e4c8:	4614      	mov	r4, r2
 800e4ca:	d50e      	bpl.n	800e4ea <_svfiprintf_r+0x32>
 800e4cc:	690b      	ldr	r3, [r1, #16]
 800e4ce:	b963      	cbnz	r3, 800e4ea <_svfiprintf_r+0x32>
 800e4d0:	2140      	movs	r1, #64	; 0x40
 800e4d2:	f000 fb19 	bl	800eb08 <_malloc_r>
 800e4d6:	6028      	str	r0, [r5, #0]
 800e4d8:	6128      	str	r0, [r5, #16]
 800e4da:	b920      	cbnz	r0, 800e4e6 <_svfiprintf_r+0x2e>
 800e4dc:	230c      	movs	r3, #12
 800e4de:	603b      	str	r3, [r7, #0]
 800e4e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e4e4:	e0d1      	b.n	800e68a <_svfiprintf_r+0x1d2>
 800e4e6:	2340      	movs	r3, #64	; 0x40
 800e4e8:	616b      	str	r3, [r5, #20]
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ee:	2320      	movs	r3, #32
 800e4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4f8:	2330      	movs	r3, #48	; 0x30
 800e4fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e6a4 <_svfiprintf_r+0x1ec>
 800e4fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e502:	f04f 0901 	mov.w	r9, #1
 800e506:	4623      	mov	r3, r4
 800e508:	469a      	mov	sl, r3
 800e50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e50e:	b10a      	cbz	r2, 800e514 <_svfiprintf_r+0x5c>
 800e510:	2a25      	cmp	r2, #37	; 0x25
 800e512:	d1f9      	bne.n	800e508 <_svfiprintf_r+0x50>
 800e514:	ebba 0b04 	subs.w	fp, sl, r4
 800e518:	d00b      	beq.n	800e532 <_svfiprintf_r+0x7a>
 800e51a:	465b      	mov	r3, fp
 800e51c:	4622      	mov	r2, r4
 800e51e:	4629      	mov	r1, r5
 800e520:	4638      	mov	r0, r7
 800e522:	f7ff ff6d 	bl	800e400 <__ssputs_r>
 800e526:	3001      	adds	r0, #1
 800e528:	f000 80aa 	beq.w	800e680 <_svfiprintf_r+0x1c8>
 800e52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e52e:	445a      	add	r2, fp
 800e530:	9209      	str	r2, [sp, #36]	; 0x24
 800e532:	f89a 3000 	ldrb.w	r3, [sl]
 800e536:	2b00      	cmp	r3, #0
 800e538:	f000 80a2 	beq.w	800e680 <_svfiprintf_r+0x1c8>
 800e53c:	2300      	movs	r3, #0
 800e53e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e546:	f10a 0a01 	add.w	sl, sl, #1
 800e54a:	9304      	str	r3, [sp, #16]
 800e54c:	9307      	str	r3, [sp, #28]
 800e54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e552:	931a      	str	r3, [sp, #104]	; 0x68
 800e554:	4654      	mov	r4, sl
 800e556:	2205      	movs	r2, #5
 800e558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e55c:	4851      	ldr	r0, [pc, #324]	; (800e6a4 <_svfiprintf_r+0x1ec>)
 800e55e:	f7f1 fe67 	bl	8000230 <memchr>
 800e562:	9a04      	ldr	r2, [sp, #16]
 800e564:	b9d8      	cbnz	r0, 800e59e <_svfiprintf_r+0xe6>
 800e566:	06d0      	lsls	r0, r2, #27
 800e568:	bf44      	itt	mi
 800e56a:	2320      	movmi	r3, #32
 800e56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e570:	0711      	lsls	r1, r2, #28
 800e572:	bf44      	itt	mi
 800e574:	232b      	movmi	r3, #43	; 0x2b
 800e576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e57a:	f89a 3000 	ldrb.w	r3, [sl]
 800e57e:	2b2a      	cmp	r3, #42	; 0x2a
 800e580:	d015      	beq.n	800e5ae <_svfiprintf_r+0xf6>
 800e582:	9a07      	ldr	r2, [sp, #28]
 800e584:	4654      	mov	r4, sl
 800e586:	2000      	movs	r0, #0
 800e588:	f04f 0c0a 	mov.w	ip, #10
 800e58c:	4621      	mov	r1, r4
 800e58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e592:	3b30      	subs	r3, #48	; 0x30
 800e594:	2b09      	cmp	r3, #9
 800e596:	d94e      	bls.n	800e636 <_svfiprintf_r+0x17e>
 800e598:	b1b0      	cbz	r0, 800e5c8 <_svfiprintf_r+0x110>
 800e59a:	9207      	str	r2, [sp, #28]
 800e59c:	e014      	b.n	800e5c8 <_svfiprintf_r+0x110>
 800e59e:	eba0 0308 	sub.w	r3, r0, r8
 800e5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	46a2      	mov	sl, r4
 800e5ac:	e7d2      	b.n	800e554 <_svfiprintf_r+0x9c>
 800e5ae:	9b03      	ldr	r3, [sp, #12]
 800e5b0:	1d19      	adds	r1, r3, #4
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	9103      	str	r1, [sp, #12]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	bfbb      	ittet	lt
 800e5ba:	425b      	neglt	r3, r3
 800e5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800e5c0:	9307      	strge	r3, [sp, #28]
 800e5c2:	9307      	strlt	r3, [sp, #28]
 800e5c4:	bfb8      	it	lt
 800e5c6:	9204      	strlt	r2, [sp, #16]
 800e5c8:	7823      	ldrb	r3, [r4, #0]
 800e5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800e5cc:	d10c      	bne.n	800e5e8 <_svfiprintf_r+0x130>
 800e5ce:	7863      	ldrb	r3, [r4, #1]
 800e5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800e5d2:	d135      	bne.n	800e640 <_svfiprintf_r+0x188>
 800e5d4:	9b03      	ldr	r3, [sp, #12]
 800e5d6:	1d1a      	adds	r2, r3, #4
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	9203      	str	r2, [sp, #12]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	bfb8      	it	lt
 800e5e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e5e4:	3402      	adds	r4, #2
 800e5e6:	9305      	str	r3, [sp, #20]
 800e5e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e6b4 <_svfiprintf_r+0x1fc>
 800e5ec:	7821      	ldrb	r1, [r4, #0]
 800e5ee:	2203      	movs	r2, #3
 800e5f0:	4650      	mov	r0, sl
 800e5f2:	f7f1 fe1d 	bl	8000230 <memchr>
 800e5f6:	b140      	cbz	r0, 800e60a <_svfiprintf_r+0x152>
 800e5f8:	2340      	movs	r3, #64	; 0x40
 800e5fa:	eba0 000a 	sub.w	r0, r0, sl
 800e5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800e602:	9b04      	ldr	r3, [sp, #16]
 800e604:	4303      	orrs	r3, r0
 800e606:	3401      	adds	r4, #1
 800e608:	9304      	str	r3, [sp, #16]
 800e60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60e:	4826      	ldr	r0, [pc, #152]	; (800e6a8 <_svfiprintf_r+0x1f0>)
 800e610:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e614:	2206      	movs	r2, #6
 800e616:	f7f1 fe0b 	bl	8000230 <memchr>
 800e61a:	2800      	cmp	r0, #0
 800e61c:	d038      	beq.n	800e690 <_svfiprintf_r+0x1d8>
 800e61e:	4b23      	ldr	r3, [pc, #140]	; (800e6ac <_svfiprintf_r+0x1f4>)
 800e620:	bb1b      	cbnz	r3, 800e66a <_svfiprintf_r+0x1b2>
 800e622:	9b03      	ldr	r3, [sp, #12]
 800e624:	3307      	adds	r3, #7
 800e626:	f023 0307 	bic.w	r3, r3, #7
 800e62a:	3308      	adds	r3, #8
 800e62c:	9303      	str	r3, [sp, #12]
 800e62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e630:	4433      	add	r3, r6
 800e632:	9309      	str	r3, [sp, #36]	; 0x24
 800e634:	e767      	b.n	800e506 <_svfiprintf_r+0x4e>
 800e636:	fb0c 3202 	mla	r2, ip, r2, r3
 800e63a:	460c      	mov	r4, r1
 800e63c:	2001      	movs	r0, #1
 800e63e:	e7a5      	b.n	800e58c <_svfiprintf_r+0xd4>
 800e640:	2300      	movs	r3, #0
 800e642:	3401      	adds	r4, #1
 800e644:	9305      	str	r3, [sp, #20]
 800e646:	4619      	mov	r1, r3
 800e648:	f04f 0c0a 	mov.w	ip, #10
 800e64c:	4620      	mov	r0, r4
 800e64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e652:	3a30      	subs	r2, #48	; 0x30
 800e654:	2a09      	cmp	r2, #9
 800e656:	d903      	bls.n	800e660 <_svfiprintf_r+0x1a8>
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d0c5      	beq.n	800e5e8 <_svfiprintf_r+0x130>
 800e65c:	9105      	str	r1, [sp, #20]
 800e65e:	e7c3      	b.n	800e5e8 <_svfiprintf_r+0x130>
 800e660:	fb0c 2101 	mla	r1, ip, r1, r2
 800e664:	4604      	mov	r4, r0
 800e666:	2301      	movs	r3, #1
 800e668:	e7f0      	b.n	800e64c <_svfiprintf_r+0x194>
 800e66a:	ab03      	add	r3, sp, #12
 800e66c:	9300      	str	r3, [sp, #0]
 800e66e:	462a      	mov	r2, r5
 800e670:	4b0f      	ldr	r3, [pc, #60]	; (800e6b0 <_svfiprintf_r+0x1f8>)
 800e672:	a904      	add	r1, sp, #16
 800e674:	4638      	mov	r0, r7
 800e676:	f3af 8000 	nop.w
 800e67a:	1c42      	adds	r2, r0, #1
 800e67c:	4606      	mov	r6, r0
 800e67e:	d1d6      	bne.n	800e62e <_svfiprintf_r+0x176>
 800e680:	89ab      	ldrh	r3, [r5, #12]
 800e682:	065b      	lsls	r3, r3, #25
 800e684:	f53f af2c 	bmi.w	800e4e0 <_svfiprintf_r+0x28>
 800e688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e68a:	b01d      	add	sp, #116	; 0x74
 800e68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e690:	ab03      	add	r3, sp, #12
 800e692:	9300      	str	r3, [sp, #0]
 800e694:	462a      	mov	r2, r5
 800e696:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <_svfiprintf_r+0x1f8>)
 800e698:	a904      	add	r1, sp, #16
 800e69a:	4638      	mov	r0, r7
 800e69c:	f000 f87a 	bl	800e794 <_printf_i>
 800e6a0:	e7eb      	b.n	800e67a <_svfiprintf_r+0x1c2>
 800e6a2:	bf00      	nop
 800e6a4:	0800ef60 	.word	0x0800ef60
 800e6a8:	0800ef6a 	.word	0x0800ef6a
 800e6ac:	00000000 	.word	0x00000000
 800e6b0:	0800e401 	.word	0x0800e401
 800e6b4:	0800ef66 	.word	0x0800ef66

0800e6b8 <_printf_common>:
 800e6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6bc:	4616      	mov	r6, r2
 800e6be:	4699      	mov	r9, r3
 800e6c0:	688a      	ldr	r2, [r1, #8]
 800e6c2:	690b      	ldr	r3, [r1, #16]
 800e6c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	bfb8      	it	lt
 800e6cc:	4613      	movlt	r3, r2
 800e6ce:	6033      	str	r3, [r6, #0]
 800e6d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	b10a      	cbz	r2, 800e6de <_printf_common+0x26>
 800e6da:	3301      	adds	r3, #1
 800e6dc:	6033      	str	r3, [r6, #0]
 800e6de:	6823      	ldr	r3, [r4, #0]
 800e6e0:	0699      	lsls	r1, r3, #26
 800e6e2:	bf42      	ittt	mi
 800e6e4:	6833      	ldrmi	r3, [r6, #0]
 800e6e6:	3302      	addmi	r3, #2
 800e6e8:	6033      	strmi	r3, [r6, #0]
 800e6ea:	6825      	ldr	r5, [r4, #0]
 800e6ec:	f015 0506 	ands.w	r5, r5, #6
 800e6f0:	d106      	bne.n	800e700 <_printf_common+0x48>
 800e6f2:	f104 0a19 	add.w	sl, r4, #25
 800e6f6:	68e3      	ldr	r3, [r4, #12]
 800e6f8:	6832      	ldr	r2, [r6, #0]
 800e6fa:	1a9b      	subs	r3, r3, r2
 800e6fc:	42ab      	cmp	r3, r5
 800e6fe:	dc26      	bgt.n	800e74e <_printf_common+0x96>
 800e700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e704:	1e13      	subs	r3, r2, #0
 800e706:	6822      	ldr	r2, [r4, #0]
 800e708:	bf18      	it	ne
 800e70a:	2301      	movne	r3, #1
 800e70c:	0692      	lsls	r2, r2, #26
 800e70e:	d42b      	bmi.n	800e768 <_printf_common+0xb0>
 800e710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e714:	4649      	mov	r1, r9
 800e716:	4638      	mov	r0, r7
 800e718:	47c0      	blx	r8
 800e71a:	3001      	adds	r0, #1
 800e71c:	d01e      	beq.n	800e75c <_printf_common+0xa4>
 800e71e:	6823      	ldr	r3, [r4, #0]
 800e720:	68e5      	ldr	r5, [r4, #12]
 800e722:	6832      	ldr	r2, [r6, #0]
 800e724:	f003 0306 	and.w	r3, r3, #6
 800e728:	2b04      	cmp	r3, #4
 800e72a:	bf08      	it	eq
 800e72c:	1aad      	subeq	r5, r5, r2
 800e72e:	68a3      	ldr	r3, [r4, #8]
 800e730:	6922      	ldr	r2, [r4, #16]
 800e732:	bf0c      	ite	eq
 800e734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e738:	2500      	movne	r5, #0
 800e73a:	4293      	cmp	r3, r2
 800e73c:	bfc4      	itt	gt
 800e73e:	1a9b      	subgt	r3, r3, r2
 800e740:	18ed      	addgt	r5, r5, r3
 800e742:	2600      	movs	r6, #0
 800e744:	341a      	adds	r4, #26
 800e746:	42b5      	cmp	r5, r6
 800e748:	d11a      	bne.n	800e780 <_printf_common+0xc8>
 800e74a:	2000      	movs	r0, #0
 800e74c:	e008      	b.n	800e760 <_printf_common+0xa8>
 800e74e:	2301      	movs	r3, #1
 800e750:	4652      	mov	r2, sl
 800e752:	4649      	mov	r1, r9
 800e754:	4638      	mov	r0, r7
 800e756:	47c0      	blx	r8
 800e758:	3001      	adds	r0, #1
 800e75a:	d103      	bne.n	800e764 <_printf_common+0xac>
 800e75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e764:	3501      	adds	r5, #1
 800e766:	e7c6      	b.n	800e6f6 <_printf_common+0x3e>
 800e768:	18e1      	adds	r1, r4, r3
 800e76a:	1c5a      	adds	r2, r3, #1
 800e76c:	2030      	movs	r0, #48	; 0x30
 800e76e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e772:	4422      	add	r2, r4
 800e774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e77c:	3302      	adds	r3, #2
 800e77e:	e7c7      	b.n	800e710 <_printf_common+0x58>
 800e780:	2301      	movs	r3, #1
 800e782:	4622      	mov	r2, r4
 800e784:	4649      	mov	r1, r9
 800e786:	4638      	mov	r0, r7
 800e788:	47c0      	blx	r8
 800e78a:	3001      	adds	r0, #1
 800e78c:	d0e6      	beq.n	800e75c <_printf_common+0xa4>
 800e78e:	3601      	adds	r6, #1
 800e790:	e7d9      	b.n	800e746 <_printf_common+0x8e>
	...

0800e794 <_printf_i>:
 800e794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e798:	7e0f      	ldrb	r7, [r1, #24]
 800e79a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e79c:	2f78      	cmp	r7, #120	; 0x78
 800e79e:	4691      	mov	r9, r2
 800e7a0:	4680      	mov	r8, r0
 800e7a2:	460c      	mov	r4, r1
 800e7a4:	469a      	mov	sl, r3
 800e7a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e7aa:	d807      	bhi.n	800e7bc <_printf_i+0x28>
 800e7ac:	2f62      	cmp	r7, #98	; 0x62
 800e7ae:	d80a      	bhi.n	800e7c6 <_printf_i+0x32>
 800e7b0:	2f00      	cmp	r7, #0
 800e7b2:	f000 80d8 	beq.w	800e966 <_printf_i+0x1d2>
 800e7b6:	2f58      	cmp	r7, #88	; 0x58
 800e7b8:	f000 80a3 	beq.w	800e902 <_printf_i+0x16e>
 800e7bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e7c4:	e03a      	b.n	800e83c <_printf_i+0xa8>
 800e7c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e7ca:	2b15      	cmp	r3, #21
 800e7cc:	d8f6      	bhi.n	800e7bc <_printf_i+0x28>
 800e7ce:	a101      	add	r1, pc, #4	; (adr r1, 800e7d4 <_printf_i+0x40>)
 800e7d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7d4:	0800e82d 	.word	0x0800e82d
 800e7d8:	0800e841 	.word	0x0800e841
 800e7dc:	0800e7bd 	.word	0x0800e7bd
 800e7e0:	0800e7bd 	.word	0x0800e7bd
 800e7e4:	0800e7bd 	.word	0x0800e7bd
 800e7e8:	0800e7bd 	.word	0x0800e7bd
 800e7ec:	0800e841 	.word	0x0800e841
 800e7f0:	0800e7bd 	.word	0x0800e7bd
 800e7f4:	0800e7bd 	.word	0x0800e7bd
 800e7f8:	0800e7bd 	.word	0x0800e7bd
 800e7fc:	0800e7bd 	.word	0x0800e7bd
 800e800:	0800e94d 	.word	0x0800e94d
 800e804:	0800e871 	.word	0x0800e871
 800e808:	0800e92f 	.word	0x0800e92f
 800e80c:	0800e7bd 	.word	0x0800e7bd
 800e810:	0800e7bd 	.word	0x0800e7bd
 800e814:	0800e96f 	.word	0x0800e96f
 800e818:	0800e7bd 	.word	0x0800e7bd
 800e81c:	0800e871 	.word	0x0800e871
 800e820:	0800e7bd 	.word	0x0800e7bd
 800e824:	0800e7bd 	.word	0x0800e7bd
 800e828:	0800e937 	.word	0x0800e937
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	1d1a      	adds	r2, r3, #4
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	602a      	str	r2, [r5, #0]
 800e834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e83c:	2301      	movs	r3, #1
 800e83e:	e0a3      	b.n	800e988 <_printf_i+0x1f4>
 800e840:	6820      	ldr	r0, [r4, #0]
 800e842:	6829      	ldr	r1, [r5, #0]
 800e844:	0606      	lsls	r6, r0, #24
 800e846:	f101 0304 	add.w	r3, r1, #4
 800e84a:	d50a      	bpl.n	800e862 <_printf_i+0xce>
 800e84c:	680e      	ldr	r6, [r1, #0]
 800e84e:	602b      	str	r3, [r5, #0]
 800e850:	2e00      	cmp	r6, #0
 800e852:	da03      	bge.n	800e85c <_printf_i+0xc8>
 800e854:	232d      	movs	r3, #45	; 0x2d
 800e856:	4276      	negs	r6, r6
 800e858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e85c:	485e      	ldr	r0, [pc, #376]	; (800e9d8 <_printf_i+0x244>)
 800e85e:	230a      	movs	r3, #10
 800e860:	e019      	b.n	800e896 <_printf_i+0x102>
 800e862:	680e      	ldr	r6, [r1, #0]
 800e864:	602b      	str	r3, [r5, #0]
 800e866:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e86a:	bf18      	it	ne
 800e86c:	b236      	sxthne	r6, r6
 800e86e:	e7ef      	b.n	800e850 <_printf_i+0xbc>
 800e870:	682b      	ldr	r3, [r5, #0]
 800e872:	6820      	ldr	r0, [r4, #0]
 800e874:	1d19      	adds	r1, r3, #4
 800e876:	6029      	str	r1, [r5, #0]
 800e878:	0601      	lsls	r1, r0, #24
 800e87a:	d501      	bpl.n	800e880 <_printf_i+0xec>
 800e87c:	681e      	ldr	r6, [r3, #0]
 800e87e:	e002      	b.n	800e886 <_printf_i+0xf2>
 800e880:	0646      	lsls	r6, r0, #25
 800e882:	d5fb      	bpl.n	800e87c <_printf_i+0xe8>
 800e884:	881e      	ldrh	r6, [r3, #0]
 800e886:	4854      	ldr	r0, [pc, #336]	; (800e9d8 <_printf_i+0x244>)
 800e888:	2f6f      	cmp	r7, #111	; 0x6f
 800e88a:	bf0c      	ite	eq
 800e88c:	2308      	moveq	r3, #8
 800e88e:	230a      	movne	r3, #10
 800e890:	2100      	movs	r1, #0
 800e892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e896:	6865      	ldr	r5, [r4, #4]
 800e898:	60a5      	str	r5, [r4, #8]
 800e89a:	2d00      	cmp	r5, #0
 800e89c:	bfa2      	ittt	ge
 800e89e:	6821      	ldrge	r1, [r4, #0]
 800e8a0:	f021 0104 	bicge.w	r1, r1, #4
 800e8a4:	6021      	strge	r1, [r4, #0]
 800e8a6:	b90e      	cbnz	r6, 800e8ac <_printf_i+0x118>
 800e8a8:	2d00      	cmp	r5, #0
 800e8aa:	d04d      	beq.n	800e948 <_printf_i+0x1b4>
 800e8ac:	4615      	mov	r5, r2
 800e8ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800e8b2:	fb03 6711 	mls	r7, r3, r1, r6
 800e8b6:	5dc7      	ldrb	r7, [r0, r7]
 800e8b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e8bc:	4637      	mov	r7, r6
 800e8be:	42bb      	cmp	r3, r7
 800e8c0:	460e      	mov	r6, r1
 800e8c2:	d9f4      	bls.n	800e8ae <_printf_i+0x11a>
 800e8c4:	2b08      	cmp	r3, #8
 800e8c6:	d10b      	bne.n	800e8e0 <_printf_i+0x14c>
 800e8c8:	6823      	ldr	r3, [r4, #0]
 800e8ca:	07de      	lsls	r6, r3, #31
 800e8cc:	d508      	bpl.n	800e8e0 <_printf_i+0x14c>
 800e8ce:	6923      	ldr	r3, [r4, #16]
 800e8d0:	6861      	ldr	r1, [r4, #4]
 800e8d2:	4299      	cmp	r1, r3
 800e8d4:	bfde      	ittt	le
 800e8d6:	2330      	movle	r3, #48	; 0x30
 800e8d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e8e0:	1b52      	subs	r2, r2, r5
 800e8e2:	6122      	str	r2, [r4, #16]
 800e8e4:	f8cd a000 	str.w	sl, [sp]
 800e8e8:	464b      	mov	r3, r9
 800e8ea:	aa03      	add	r2, sp, #12
 800e8ec:	4621      	mov	r1, r4
 800e8ee:	4640      	mov	r0, r8
 800e8f0:	f7ff fee2 	bl	800e6b8 <_printf_common>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d14c      	bne.n	800e992 <_printf_i+0x1fe>
 800e8f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e8fc:	b004      	add	sp, #16
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	4835      	ldr	r0, [pc, #212]	; (800e9d8 <_printf_i+0x244>)
 800e904:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e908:	6829      	ldr	r1, [r5, #0]
 800e90a:	6823      	ldr	r3, [r4, #0]
 800e90c:	f851 6b04 	ldr.w	r6, [r1], #4
 800e910:	6029      	str	r1, [r5, #0]
 800e912:	061d      	lsls	r5, r3, #24
 800e914:	d514      	bpl.n	800e940 <_printf_i+0x1ac>
 800e916:	07df      	lsls	r7, r3, #31
 800e918:	bf44      	itt	mi
 800e91a:	f043 0320 	orrmi.w	r3, r3, #32
 800e91e:	6023      	strmi	r3, [r4, #0]
 800e920:	b91e      	cbnz	r6, 800e92a <_printf_i+0x196>
 800e922:	6823      	ldr	r3, [r4, #0]
 800e924:	f023 0320 	bic.w	r3, r3, #32
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	2310      	movs	r3, #16
 800e92c:	e7b0      	b.n	800e890 <_printf_i+0xfc>
 800e92e:	6823      	ldr	r3, [r4, #0]
 800e930:	f043 0320 	orr.w	r3, r3, #32
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	2378      	movs	r3, #120	; 0x78
 800e938:	4828      	ldr	r0, [pc, #160]	; (800e9dc <_printf_i+0x248>)
 800e93a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e93e:	e7e3      	b.n	800e908 <_printf_i+0x174>
 800e940:	0659      	lsls	r1, r3, #25
 800e942:	bf48      	it	mi
 800e944:	b2b6      	uxthmi	r6, r6
 800e946:	e7e6      	b.n	800e916 <_printf_i+0x182>
 800e948:	4615      	mov	r5, r2
 800e94a:	e7bb      	b.n	800e8c4 <_printf_i+0x130>
 800e94c:	682b      	ldr	r3, [r5, #0]
 800e94e:	6826      	ldr	r6, [r4, #0]
 800e950:	6961      	ldr	r1, [r4, #20]
 800e952:	1d18      	adds	r0, r3, #4
 800e954:	6028      	str	r0, [r5, #0]
 800e956:	0635      	lsls	r5, r6, #24
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	d501      	bpl.n	800e960 <_printf_i+0x1cc>
 800e95c:	6019      	str	r1, [r3, #0]
 800e95e:	e002      	b.n	800e966 <_printf_i+0x1d2>
 800e960:	0670      	lsls	r0, r6, #25
 800e962:	d5fb      	bpl.n	800e95c <_printf_i+0x1c8>
 800e964:	8019      	strh	r1, [r3, #0]
 800e966:	2300      	movs	r3, #0
 800e968:	6123      	str	r3, [r4, #16]
 800e96a:	4615      	mov	r5, r2
 800e96c:	e7ba      	b.n	800e8e4 <_printf_i+0x150>
 800e96e:	682b      	ldr	r3, [r5, #0]
 800e970:	1d1a      	adds	r2, r3, #4
 800e972:	602a      	str	r2, [r5, #0]
 800e974:	681d      	ldr	r5, [r3, #0]
 800e976:	6862      	ldr	r2, [r4, #4]
 800e978:	2100      	movs	r1, #0
 800e97a:	4628      	mov	r0, r5
 800e97c:	f7f1 fc58 	bl	8000230 <memchr>
 800e980:	b108      	cbz	r0, 800e986 <_printf_i+0x1f2>
 800e982:	1b40      	subs	r0, r0, r5
 800e984:	6060      	str	r0, [r4, #4]
 800e986:	6863      	ldr	r3, [r4, #4]
 800e988:	6123      	str	r3, [r4, #16]
 800e98a:	2300      	movs	r3, #0
 800e98c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e990:	e7a8      	b.n	800e8e4 <_printf_i+0x150>
 800e992:	6923      	ldr	r3, [r4, #16]
 800e994:	462a      	mov	r2, r5
 800e996:	4649      	mov	r1, r9
 800e998:	4640      	mov	r0, r8
 800e99a:	47d0      	blx	sl
 800e99c:	3001      	adds	r0, #1
 800e99e:	d0ab      	beq.n	800e8f8 <_printf_i+0x164>
 800e9a0:	6823      	ldr	r3, [r4, #0]
 800e9a2:	079b      	lsls	r3, r3, #30
 800e9a4:	d413      	bmi.n	800e9ce <_printf_i+0x23a>
 800e9a6:	68e0      	ldr	r0, [r4, #12]
 800e9a8:	9b03      	ldr	r3, [sp, #12]
 800e9aa:	4298      	cmp	r0, r3
 800e9ac:	bfb8      	it	lt
 800e9ae:	4618      	movlt	r0, r3
 800e9b0:	e7a4      	b.n	800e8fc <_printf_i+0x168>
 800e9b2:	2301      	movs	r3, #1
 800e9b4:	4632      	mov	r2, r6
 800e9b6:	4649      	mov	r1, r9
 800e9b8:	4640      	mov	r0, r8
 800e9ba:	47d0      	blx	sl
 800e9bc:	3001      	adds	r0, #1
 800e9be:	d09b      	beq.n	800e8f8 <_printf_i+0x164>
 800e9c0:	3501      	adds	r5, #1
 800e9c2:	68e3      	ldr	r3, [r4, #12]
 800e9c4:	9903      	ldr	r1, [sp, #12]
 800e9c6:	1a5b      	subs	r3, r3, r1
 800e9c8:	42ab      	cmp	r3, r5
 800e9ca:	dcf2      	bgt.n	800e9b2 <_printf_i+0x21e>
 800e9cc:	e7eb      	b.n	800e9a6 <_printf_i+0x212>
 800e9ce:	2500      	movs	r5, #0
 800e9d0:	f104 0619 	add.w	r6, r4, #25
 800e9d4:	e7f5      	b.n	800e9c2 <_printf_i+0x22e>
 800e9d6:	bf00      	nop
 800e9d8:	0800ef71 	.word	0x0800ef71
 800e9dc:	0800ef82 	.word	0x0800ef82

0800e9e0 <memcpy>:
 800e9e0:	440a      	add	r2, r1
 800e9e2:	4291      	cmp	r1, r2
 800e9e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e9e8:	d100      	bne.n	800e9ec <memcpy+0xc>
 800e9ea:	4770      	bx	lr
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9f6:	4291      	cmp	r1, r2
 800e9f8:	d1f9      	bne.n	800e9ee <memcpy+0xe>
 800e9fa:	bd10      	pop	{r4, pc}

0800e9fc <memmove>:
 800e9fc:	4288      	cmp	r0, r1
 800e9fe:	b510      	push	{r4, lr}
 800ea00:	eb01 0402 	add.w	r4, r1, r2
 800ea04:	d902      	bls.n	800ea0c <memmove+0x10>
 800ea06:	4284      	cmp	r4, r0
 800ea08:	4623      	mov	r3, r4
 800ea0a:	d807      	bhi.n	800ea1c <memmove+0x20>
 800ea0c:	1e43      	subs	r3, r0, #1
 800ea0e:	42a1      	cmp	r1, r4
 800ea10:	d008      	beq.n	800ea24 <memmove+0x28>
 800ea12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea1a:	e7f8      	b.n	800ea0e <memmove+0x12>
 800ea1c:	4402      	add	r2, r0
 800ea1e:	4601      	mov	r1, r0
 800ea20:	428a      	cmp	r2, r1
 800ea22:	d100      	bne.n	800ea26 <memmove+0x2a>
 800ea24:	bd10      	pop	{r4, pc}
 800ea26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea2e:	e7f7      	b.n	800ea20 <memmove+0x24>

0800ea30 <_free_r>:
 800ea30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea32:	2900      	cmp	r1, #0
 800ea34:	d044      	beq.n	800eac0 <_free_r+0x90>
 800ea36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea3a:	9001      	str	r0, [sp, #4]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ea42:	bfb8      	it	lt
 800ea44:	18e4      	addlt	r4, r4, r3
 800ea46:	f000 f913 	bl	800ec70 <__malloc_lock>
 800ea4a:	4a1e      	ldr	r2, [pc, #120]	; (800eac4 <_free_r+0x94>)
 800ea4c:	9801      	ldr	r0, [sp, #4]
 800ea4e:	6813      	ldr	r3, [r2, #0]
 800ea50:	b933      	cbnz	r3, 800ea60 <_free_r+0x30>
 800ea52:	6063      	str	r3, [r4, #4]
 800ea54:	6014      	str	r4, [r2, #0]
 800ea56:	b003      	add	sp, #12
 800ea58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea5c:	f000 b90e 	b.w	800ec7c <__malloc_unlock>
 800ea60:	42a3      	cmp	r3, r4
 800ea62:	d908      	bls.n	800ea76 <_free_r+0x46>
 800ea64:	6825      	ldr	r5, [r4, #0]
 800ea66:	1961      	adds	r1, r4, r5
 800ea68:	428b      	cmp	r3, r1
 800ea6a:	bf01      	itttt	eq
 800ea6c:	6819      	ldreq	r1, [r3, #0]
 800ea6e:	685b      	ldreq	r3, [r3, #4]
 800ea70:	1949      	addeq	r1, r1, r5
 800ea72:	6021      	streq	r1, [r4, #0]
 800ea74:	e7ed      	b.n	800ea52 <_free_r+0x22>
 800ea76:	461a      	mov	r2, r3
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	b10b      	cbz	r3, 800ea80 <_free_r+0x50>
 800ea7c:	42a3      	cmp	r3, r4
 800ea7e:	d9fa      	bls.n	800ea76 <_free_r+0x46>
 800ea80:	6811      	ldr	r1, [r2, #0]
 800ea82:	1855      	adds	r5, r2, r1
 800ea84:	42a5      	cmp	r5, r4
 800ea86:	d10b      	bne.n	800eaa0 <_free_r+0x70>
 800ea88:	6824      	ldr	r4, [r4, #0]
 800ea8a:	4421      	add	r1, r4
 800ea8c:	1854      	adds	r4, r2, r1
 800ea8e:	42a3      	cmp	r3, r4
 800ea90:	6011      	str	r1, [r2, #0]
 800ea92:	d1e0      	bne.n	800ea56 <_free_r+0x26>
 800ea94:	681c      	ldr	r4, [r3, #0]
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	6053      	str	r3, [r2, #4]
 800ea9a:	4421      	add	r1, r4
 800ea9c:	6011      	str	r1, [r2, #0]
 800ea9e:	e7da      	b.n	800ea56 <_free_r+0x26>
 800eaa0:	d902      	bls.n	800eaa8 <_free_r+0x78>
 800eaa2:	230c      	movs	r3, #12
 800eaa4:	6003      	str	r3, [r0, #0]
 800eaa6:	e7d6      	b.n	800ea56 <_free_r+0x26>
 800eaa8:	6825      	ldr	r5, [r4, #0]
 800eaaa:	1961      	adds	r1, r4, r5
 800eaac:	428b      	cmp	r3, r1
 800eaae:	bf04      	itt	eq
 800eab0:	6819      	ldreq	r1, [r3, #0]
 800eab2:	685b      	ldreq	r3, [r3, #4]
 800eab4:	6063      	str	r3, [r4, #4]
 800eab6:	bf04      	itt	eq
 800eab8:	1949      	addeq	r1, r1, r5
 800eaba:	6021      	streq	r1, [r4, #0]
 800eabc:	6054      	str	r4, [r2, #4]
 800eabe:	e7ca      	b.n	800ea56 <_free_r+0x26>
 800eac0:	b003      	add	sp, #12
 800eac2:	bd30      	pop	{r4, r5, pc}
 800eac4:	20001600 	.word	0x20001600

0800eac8 <sbrk_aligned>:
 800eac8:	b570      	push	{r4, r5, r6, lr}
 800eaca:	4e0e      	ldr	r6, [pc, #56]	; (800eb04 <sbrk_aligned+0x3c>)
 800eacc:	460c      	mov	r4, r1
 800eace:	6831      	ldr	r1, [r6, #0]
 800ead0:	4605      	mov	r5, r0
 800ead2:	b911      	cbnz	r1, 800eada <sbrk_aligned+0x12>
 800ead4:	f000 f8bc 	bl	800ec50 <_sbrk_r>
 800ead8:	6030      	str	r0, [r6, #0]
 800eada:	4621      	mov	r1, r4
 800eadc:	4628      	mov	r0, r5
 800eade:	f000 f8b7 	bl	800ec50 <_sbrk_r>
 800eae2:	1c43      	adds	r3, r0, #1
 800eae4:	d00a      	beq.n	800eafc <sbrk_aligned+0x34>
 800eae6:	1cc4      	adds	r4, r0, #3
 800eae8:	f024 0403 	bic.w	r4, r4, #3
 800eaec:	42a0      	cmp	r0, r4
 800eaee:	d007      	beq.n	800eb00 <sbrk_aligned+0x38>
 800eaf0:	1a21      	subs	r1, r4, r0
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	f000 f8ac 	bl	800ec50 <_sbrk_r>
 800eaf8:	3001      	adds	r0, #1
 800eafa:	d101      	bne.n	800eb00 <sbrk_aligned+0x38>
 800eafc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eb00:	4620      	mov	r0, r4
 800eb02:	bd70      	pop	{r4, r5, r6, pc}
 800eb04:	20001604 	.word	0x20001604

0800eb08 <_malloc_r>:
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	1ccd      	adds	r5, r1, #3
 800eb0e:	f025 0503 	bic.w	r5, r5, #3
 800eb12:	3508      	adds	r5, #8
 800eb14:	2d0c      	cmp	r5, #12
 800eb16:	bf38      	it	cc
 800eb18:	250c      	movcc	r5, #12
 800eb1a:	2d00      	cmp	r5, #0
 800eb1c:	4607      	mov	r7, r0
 800eb1e:	db01      	blt.n	800eb24 <_malloc_r+0x1c>
 800eb20:	42a9      	cmp	r1, r5
 800eb22:	d905      	bls.n	800eb30 <_malloc_r+0x28>
 800eb24:	230c      	movs	r3, #12
 800eb26:	603b      	str	r3, [r7, #0]
 800eb28:	2600      	movs	r6, #0
 800eb2a:	4630      	mov	r0, r6
 800eb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb30:	4e2e      	ldr	r6, [pc, #184]	; (800ebec <_malloc_r+0xe4>)
 800eb32:	f000 f89d 	bl	800ec70 <__malloc_lock>
 800eb36:	6833      	ldr	r3, [r6, #0]
 800eb38:	461c      	mov	r4, r3
 800eb3a:	bb34      	cbnz	r4, 800eb8a <_malloc_r+0x82>
 800eb3c:	4629      	mov	r1, r5
 800eb3e:	4638      	mov	r0, r7
 800eb40:	f7ff ffc2 	bl	800eac8 <sbrk_aligned>
 800eb44:	1c43      	adds	r3, r0, #1
 800eb46:	4604      	mov	r4, r0
 800eb48:	d14d      	bne.n	800ebe6 <_malloc_r+0xde>
 800eb4a:	6834      	ldr	r4, [r6, #0]
 800eb4c:	4626      	mov	r6, r4
 800eb4e:	2e00      	cmp	r6, #0
 800eb50:	d140      	bne.n	800ebd4 <_malloc_r+0xcc>
 800eb52:	6823      	ldr	r3, [r4, #0]
 800eb54:	4631      	mov	r1, r6
 800eb56:	4638      	mov	r0, r7
 800eb58:	eb04 0803 	add.w	r8, r4, r3
 800eb5c:	f000 f878 	bl	800ec50 <_sbrk_r>
 800eb60:	4580      	cmp	r8, r0
 800eb62:	d13a      	bne.n	800ebda <_malloc_r+0xd2>
 800eb64:	6821      	ldr	r1, [r4, #0]
 800eb66:	3503      	adds	r5, #3
 800eb68:	1a6d      	subs	r5, r5, r1
 800eb6a:	f025 0503 	bic.w	r5, r5, #3
 800eb6e:	3508      	adds	r5, #8
 800eb70:	2d0c      	cmp	r5, #12
 800eb72:	bf38      	it	cc
 800eb74:	250c      	movcc	r5, #12
 800eb76:	4629      	mov	r1, r5
 800eb78:	4638      	mov	r0, r7
 800eb7a:	f7ff ffa5 	bl	800eac8 <sbrk_aligned>
 800eb7e:	3001      	adds	r0, #1
 800eb80:	d02b      	beq.n	800ebda <_malloc_r+0xd2>
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	442b      	add	r3, r5
 800eb86:	6023      	str	r3, [r4, #0]
 800eb88:	e00e      	b.n	800eba8 <_malloc_r+0xa0>
 800eb8a:	6822      	ldr	r2, [r4, #0]
 800eb8c:	1b52      	subs	r2, r2, r5
 800eb8e:	d41e      	bmi.n	800ebce <_malloc_r+0xc6>
 800eb90:	2a0b      	cmp	r2, #11
 800eb92:	d916      	bls.n	800ebc2 <_malloc_r+0xba>
 800eb94:	1961      	adds	r1, r4, r5
 800eb96:	42a3      	cmp	r3, r4
 800eb98:	6025      	str	r5, [r4, #0]
 800eb9a:	bf18      	it	ne
 800eb9c:	6059      	strne	r1, [r3, #4]
 800eb9e:	6863      	ldr	r3, [r4, #4]
 800eba0:	bf08      	it	eq
 800eba2:	6031      	streq	r1, [r6, #0]
 800eba4:	5162      	str	r2, [r4, r5]
 800eba6:	604b      	str	r3, [r1, #4]
 800eba8:	4638      	mov	r0, r7
 800ebaa:	f104 060b 	add.w	r6, r4, #11
 800ebae:	f000 f865 	bl	800ec7c <__malloc_unlock>
 800ebb2:	f026 0607 	bic.w	r6, r6, #7
 800ebb6:	1d23      	adds	r3, r4, #4
 800ebb8:	1af2      	subs	r2, r6, r3
 800ebba:	d0b6      	beq.n	800eb2a <_malloc_r+0x22>
 800ebbc:	1b9b      	subs	r3, r3, r6
 800ebbe:	50a3      	str	r3, [r4, r2]
 800ebc0:	e7b3      	b.n	800eb2a <_malloc_r+0x22>
 800ebc2:	6862      	ldr	r2, [r4, #4]
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	bf0c      	ite	eq
 800ebc8:	6032      	streq	r2, [r6, #0]
 800ebca:	605a      	strne	r2, [r3, #4]
 800ebcc:	e7ec      	b.n	800eba8 <_malloc_r+0xa0>
 800ebce:	4623      	mov	r3, r4
 800ebd0:	6864      	ldr	r4, [r4, #4]
 800ebd2:	e7b2      	b.n	800eb3a <_malloc_r+0x32>
 800ebd4:	4634      	mov	r4, r6
 800ebd6:	6876      	ldr	r6, [r6, #4]
 800ebd8:	e7b9      	b.n	800eb4e <_malloc_r+0x46>
 800ebda:	230c      	movs	r3, #12
 800ebdc:	603b      	str	r3, [r7, #0]
 800ebde:	4638      	mov	r0, r7
 800ebe0:	f000 f84c 	bl	800ec7c <__malloc_unlock>
 800ebe4:	e7a1      	b.n	800eb2a <_malloc_r+0x22>
 800ebe6:	6025      	str	r5, [r4, #0]
 800ebe8:	e7de      	b.n	800eba8 <_malloc_r+0xa0>
 800ebea:	bf00      	nop
 800ebec:	20001600 	.word	0x20001600

0800ebf0 <_realloc_r>:
 800ebf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf4:	4680      	mov	r8, r0
 800ebf6:	4614      	mov	r4, r2
 800ebf8:	460e      	mov	r6, r1
 800ebfa:	b921      	cbnz	r1, 800ec06 <_realloc_r+0x16>
 800ebfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec00:	4611      	mov	r1, r2
 800ec02:	f7ff bf81 	b.w	800eb08 <_malloc_r>
 800ec06:	b92a      	cbnz	r2, 800ec14 <_realloc_r+0x24>
 800ec08:	f7ff ff12 	bl	800ea30 <_free_r>
 800ec0c:	4625      	mov	r5, r4
 800ec0e:	4628      	mov	r0, r5
 800ec10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec14:	f000 f838 	bl	800ec88 <_malloc_usable_size_r>
 800ec18:	4284      	cmp	r4, r0
 800ec1a:	4607      	mov	r7, r0
 800ec1c:	d802      	bhi.n	800ec24 <_realloc_r+0x34>
 800ec1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec22:	d812      	bhi.n	800ec4a <_realloc_r+0x5a>
 800ec24:	4621      	mov	r1, r4
 800ec26:	4640      	mov	r0, r8
 800ec28:	f7ff ff6e 	bl	800eb08 <_malloc_r>
 800ec2c:	4605      	mov	r5, r0
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	d0ed      	beq.n	800ec0e <_realloc_r+0x1e>
 800ec32:	42bc      	cmp	r4, r7
 800ec34:	4622      	mov	r2, r4
 800ec36:	4631      	mov	r1, r6
 800ec38:	bf28      	it	cs
 800ec3a:	463a      	movcs	r2, r7
 800ec3c:	f7ff fed0 	bl	800e9e0 <memcpy>
 800ec40:	4631      	mov	r1, r6
 800ec42:	4640      	mov	r0, r8
 800ec44:	f7ff fef4 	bl	800ea30 <_free_r>
 800ec48:	e7e1      	b.n	800ec0e <_realloc_r+0x1e>
 800ec4a:	4635      	mov	r5, r6
 800ec4c:	e7df      	b.n	800ec0e <_realloc_r+0x1e>
	...

0800ec50 <_sbrk_r>:
 800ec50:	b538      	push	{r3, r4, r5, lr}
 800ec52:	4d06      	ldr	r5, [pc, #24]	; (800ec6c <_sbrk_r+0x1c>)
 800ec54:	2300      	movs	r3, #0
 800ec56:	4604      	mov	r4, r0
 800ec58:	4608      	mov	r0, r1
 800ec5a:	602b      	str	r3, [r5, #0]
 800ec5c:	f7f3 f988 	bl	8001f70 <_sbrk>
 800ec60:	1c43      	adds	r3, r0, #1
 800ec62:	d102      	bne.n	800ec6a <_sbrk_r+0x1a>
 800ec64:	682b      	ldr	r3, [r5, #0]
 800ec66:	b103      	cbz	r3, 800ec6a <_sbrk_r+0x1a>
 800ec68:	6023      	str	r3, [r4, #0]
 800ec6a:	bd38      	pop	{r3, r4, r5, pc}
 800ec6c:	20001608 	.word	0x20001608

0800ec70 <__malloc_lock>:
 800ec70:	4801      	ldr	r0, [pc, #4]	; (800ec78 <__malloc_lock+0x8>)
 800ec72:	f000 b811 	b.w	800ec98 <__retarget_lock_acquire_recursive>
 800ec76:	bf00      	nop
 800ec78:	2000160c 	.word	0x2000160c

0800ec7c <__malloc_unlock>:
 800ec7c:	4801      	ldr	r0, [pc, #4]	; (800ec84 <__malloc_unlock+0x8>)
 800ec7e:	f000 b80c 	b.w	800ec9a <__retarget_lock_release_recursive>
 800ec82:	bf00      	nop
 800ec84:	2000160c 	.word	0x2000160c

0800ec88 <_malloc_usable_size_r>:
 800ec88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec8c:	1f18      	subs	r0, r3, #4
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	bfbc      	itt	lt
 800ec92:	580b      	ldrlt	r3, [r1, r0]
 800ec94:	18c0      	addlt	r0, r0, r3
 800ec96:	4770      	bx	lr

0800ec98 <__retarget_lock_acquire_recursive>:
 800ec98:	4770      	bx	lr

0800ec9a <__retarget_lock_release_recursive>:
 800ec9a:	4770      	bx	lr

0800ec9c <_init>:
 800ec9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec9e:	bf00      	nop
 800eca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eca2:	bc08      	pop	{r3}
 800eca4:	469e      	mov	lr, r3
 800eca6:	4770      	bx	lr

0800eca8 <_fini>:
 800eca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecaa:	bf00      	nop
 800ecac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecae:	bc08      	pop	{r3}
 800ecb0:	469e      	mov	lr, r3
 800ecb2:	4770      	bx	lr
