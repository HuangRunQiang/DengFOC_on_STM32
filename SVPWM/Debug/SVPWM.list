
SVPWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd4c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d0  0800de60  0800de60  0001de60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e130  0800e130  0002023c  2**0
                  CONTENTS
  4 .ARM          00000000  0800e130  0800e130  0002023c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e130  0800e130  0002023c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e130  0800e130  0001e130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e134  0800e134  0001e134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000023c  20000000  0800e138  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  20000240  0800e374  00020240  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001700  0800e374  00021700  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020265  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a26  00000000  00000000  000202a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d21  00000000  00000000  00035cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  000399f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f12  00000000  00000000  0003add8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bfd8  00000000  00000000  0003bcea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191e1  00000000  00000000  00057cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094837  00000000  00000000  00070ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cb4  00000000  00000000  001056dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0010b390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000240 	.word	0x20000240
 800012c:	00000000 	.word	0x00000000
 8000130:	0800de44 	.word	0x0800de44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000244 	.word	0x20000244
 800014c:	0800de44 	.word	0x0800de44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <spiCalcEvenParity>:
 *  Created on: Jun 8, 2023
 *      Author: hht
 */

#include "as5048a.h"
uint8_t spiCalcEvenParity(uint16_t value){
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++)
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	e00d      	b.n	8001140 <spiCalcEvenParity+0x30>
	{
		if (value & 0x1)
 8001124:	88fb      	ldrh	r3, [r7, #6]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <spiCalcEvenParity+0x24>
		{
			cnt++;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	3301      	adds	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
		}
		value >>= 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	085b      	lsrs	r3, r3, #1
 8001138:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++)
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3301      	adds	r3, #1
 800113e:	73bb      	strb	r3, [r7, #14]
 8001140:	7bbb      	ldrb	r3, [r7, #14]
 8001142:	2b0f      	cmp	r3, #15
 8001144:	d9ee      	bls.n	8001124 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <read>:

uint16_t read(SPI_HandleTypeDef* _spi, GPIO_TypeDef* _ps, uint16_t _cs,uint16_t registerAddress){
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af02      	add	r7, sp, #8
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	4611      	mov	r1, r2
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	80fb      	strh	r3, [r7, #6]
 800116a:	4613      	mov	r3, r2
 800116c:	80bb      	strh	r3, [r7, #4]

	uint8_t send_data[2];
	uint8_t recv_data[2];
//	uint16_t data2;
	uint16_t command = 0b0100000000000000; // PAR=0 R/W=R
 800116e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001172:	82fb      	strh	r3, [r7, #22]
	command = command | registerAddress;
 8001174:	8afa      	ldrh	r2, [r7, #22]
 8001176:	88bb      	ldrh	r3, [r7, #4]
 8001178:	4313      	orrs	r3, r2
 800117a:	82fb      	strh	r3, [r7, #22]

	//Add a parity bit on the the MSB
	command |= ((uint16_t)spiCalcEvenParity(command)<<15);
 800117c:	8afb      	ldrh	r3, [r7, #22]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffc6 	bl	8001110 <spiCalcEvenParity>
 8001184:	4603      	mov	r3, r0
 8001186:	03db      	lsls	r3, r3, #15
 8001188:	b21a      	sxth	r2, r3
 800118a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	82fb      	strh	r3, [r7, #22]

	//Split the command into two bytes
	send_data[1] = command & 0xFF;
 8001194:	8afb      	ldrh	r3, [r7, #22]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	757b      	strb	r3, [r7, #21]
	send_data[0] = ( command >> 8 ) & 0xFF;
 800119a:	8afb      	ldrh	r3, [r7, #22]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	753b      	strb	r3, [r7, #20]

	EN_SPI;
 80011a4:	88fb      	ldrh	r3, [r7, #6]
 80011a6:	2200      	movs	r2, #0
 80011a8:	4619      	mov	r1, r3
 80011aa:	68b8      	ldr	r0, [r7, #8]
 80011ac:	f002 fd6a 	bl	8003c84 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_spi, (uint8_t *)&send_data, 2, 0xFFFF);
 80011b0:	f107 0114 	add.w	r1, r7, #20
 80011b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b8:	2202      	movs	r2, #2
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f005 f8ee 	bl	800639c <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(_spi, (uint8_t *)&command, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 80011c0:	bf00      	nop
 80011c2:	68f8      	ldr	r0, [r7, #12]
 80011c4:	f005 fbdd 	bl	8006982 <HAL_SPI_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d1f9      	bne.n	80011c2 <read+0x6a>
	DIS_SPI;
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	2201      	movs	r2, #1
 80011d2:	4619      	mov	r1, r3
 80011d4:	68b8      	ldr	r0, [r7, #8]
 80011d6:	f002 fd55 	bl	8003c84 <HAL_GPIO_WritePin>
	send_data[0]=0x00;
 80011da:	2300      	movs	r3, #0
 80011dc:	753b      	strb	r3, [r7, #20]
	send_data[1]=0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	757b      	strb	r3, [r7, #21]
	EN_SPI;
 80011e2:	88fb      	ldrh	r3, [r7, #6]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4619      	mov	r1, r3
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f002 fd4b 	bl	8003c84 <HAL_GPIO_WritePin>
	 HAL_SPI_TransmitReceive(_spi,(uint8_t*)&send_data,(uint8_t*)&recv_data,2, 0xFFFF);
 80011ee:	f107 0210 	add.w	r2, r7, #16
 80011f2:	f107 0114 	add.w	r1, r7, #20
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2302      	movs	r3, #2
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f005 fa0f 	bl	8006622 <HAL_SPI_TransmitReceive>
//	HAL_SPI_Receive(_spi, (uint8_t *)&recv_data, 2, 0xFFFF);
//	HAL_SPI_Receive(_spi, (uint8_t *)&data2, 1, 0xFFFF);
	while (HAL_SPI_GetState(_spi) != HAL_SPI_STATE_READY) {}
 8001204:	bf00      	nop
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f005 fbbb 	bl	8006982 <HAL_SPI_GetState>
 800120c:	4603      	mov	r3, r0
 800120e:	2b01      	cmp	r3, #1
 8001210:	d1f9      	bne.n	8001206 <read+0xae>
	DIS_SPI;
 8001212:	88fb      	ldrh	r3, [r7, #6]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	68b8      	ldr	r0, [r7, #8]
 800121a:	f002 fd33 	bl	8003c84 <HAL_GPIO_WritePin>
//	} else {
//		errorFlag = 0;
//	}

	//Return the data, stripping the parity and error bits
	return (( ( recv_data[1] & 0xFF ) << 8 ) | ( recv_data[0] & 0xFF )) & ~0xC000;
 800121e:	7c7b      	ldrb	r3, [r7, #17]
 8001220:	021b      	lsls	r3, r3, #8
 8001222:	b21a      	sxth	r2, r3
 8001224:	7c3b      	ldrb	r3, [r7, #16]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001232:	b29b      	uxth	r3, r3
//	return data2 & ~0xC000;
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <ADC_Select_CH0>:
#include "main.h"



void ADC_Select_CH0 (ADC_HandleTypeDef hadc1)
{
 800123c:	b084      	sub	sp, #16
 800123e:	b580      	push	{r7, lr}
 8001240:	b084      	sub	sp, #16
 8001242:	af00      	add	r7, sp, #0
 8001244:	f107 0c18 	add.w	ip, r7, #24
 8001248:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ADC_ChannelConfTypeDef sConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 800125a:	2301      	movs	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 800125e:	2303      	movs	r3, #3
 8001260:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	f107 0018 	add.w	r0, r7, #24
 800126a:	f002 f8e5 	bl	8003438 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <ADC_Select_CH0+0x3c>
	  {
	    Error_Handler();
 8001274:	f000 ff1e 	bl	80020b4 <Error_Handler>
	  }
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001282:	b004      	add	sp, #16
 8001284:	4770      	bx	lr

08001286 <ADC_Select_CH1>:

void ADC_Select_CH1 (ADC_HandleTypeDef hadc1)
{
 8001286:	b084      	sub	sp, #16
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	f107 0c18 	add.w	ip, r7, #24
 8001292:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ADC_ChannelConfTypeDef sConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012a8:	2303      	movs	r3, #3
 80012aa:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	f107 0018 	add.w	r0, r7, #24
 80012b4:	f002 f8c0 	bl	8003438 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <ADC_Select_CH1+0x3c>
	  {
	    Error_Handler();
 80012be:	f000 fef9 	bl	80020b4 <Error_Handler>
	  }
}
 80012c2:	bf00      	nop
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012cc:	b004      	add	sp, #16
 80012ce:	4770      	bx	lr

080012d0 <ADC_Select_CH2>:

void ADC_Select_CH2 (ADC_HandleTypeDef hadc1)
{
 80012d0:	b084      	sub	sp, #16
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	f107 0c18 	add.w	ip, r7, #24
 80012dc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ADC_ChannelConfTypeDef sConfig = {0};
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_2;
 80012ea:	2302      	movs	r3, #2
 80012ec:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = 1;
 80012ee:	2301      	movs	r3, #1
 80012f0:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80012f2:	2303      	movs	r3, #3
 80012f4:	60fb      	str	r3, [r7, #12]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	f107 0018 	add.w	r0, r7, #24
 80012fe:	f002 f89b 	bl	8003438 <HAL_ADC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <ADC_Select_CH2+0x3c>
	  {
	    Error_Handler();
 8001308:	f000 fed4 	bl	80020b4 <Error_Handler>
	  }
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001316:	b004      	add	sp, #16
 8001318:	4770      	bx	lr

0800131a <read_ADC_voltage>:
void read_ADC_voltage(ADC_HandleTypeDef hadc1,uint16_t *ADC_VAL){
 800131a:	b084      	sub	sp, #16
 800131c:	b5b0      	push	{r4, r5, r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af08      	add	r7, sp, #32
 8001322:	f107 0410 	add.w	r4, r7, #16
 8001326:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ADC_Select_CH0(hadc1);
 800132a:	466d      	mov	r5, sp
 800132c:	f107 0420 	add.w	r4, r7, #32
 8001330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001334:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001338:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001342:	f7ff ff7b 	bl	800123c <ADC_Select_CH0>
	HAL_ADC_Start(&hadc1);
 8001346:	f107 0010 	add.w	r0, r7, #16
 800134a:	f001 fe89 	bl	8003060 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 800134e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001352:	f107 0010 	add.w	r0, r7, #16
 8001356:	f001 ff5d 	bl	8003214 <HAL_ADC_PollForConversion>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 800135a:	f107 0010 	add.w	r0, r7, #16
 800135e:	f002 f85f 	bl	8003420 <HAL_ADC_GetValue>
 8001362:	4603      	mov	r3, r0
 8001364:	b29a      	uxth	r2, r3
 8001366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001368:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 800136a:	f107 0010 	add.w	r0, r7, #16
 800136e:	f001 ff25 	bl	80031bc <HAL_ADC_Stop>

	ADC_Select_CH1(hadc1);
 8001372:	466d      	mov	r5, sp
 8001374:	f107 0420 	add.w	r4, r7, #32
 8001378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001380:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800138a:	f7ff ff7c 	bl	8001286 <ADC_Select_CH1>
	HAL_ADC_Start(&hadc1);
 800138e:	f107 0010 	add.w	r0, r7, #16
 8001392:	f001 fe65 	bl	8003060 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 8001396:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800139a:	f107 0010 	add.w	r0, r7, #16
 800139e:	f001 ff39 	bl	8003214 <HAL_ADC_PollForConversion>
	ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 80013a2:	f107 0010 	add.w	r0, r7, #16
 80013a6:	f002 f83b 	bl	8003420 <HAL_ADC_GetValue>
 80013aa:	4602      	mov	r2, r0
 80013ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013ae:	3302      	adds	r3, #2
 80013b0:	b292      	uxth	r2, r2
 80013b2:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80013b4:	f107 0010 	add.w	r0, r7, #16
 80013b8:	f001 ff00 	bl	80031bc <HAL_ADC_Stop>

	ADC_Select_CH2(hadc1);
 80013bc:	466d      	mov	r5, sp
 80013be:	f107 0420 	add.w	r4, r7, #32
 80013c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013d4:	f7ff ff7c 	bl	80012d0 <ADC_Select_CH2>
	HAL_ADC_Start(&hadc1);
 80013d8:	f107 0010 	add.w	r0, r7, #16
 80013dc:	f001 fe40 	bl	8003060 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1000);
 80013e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013e4:	f107 0010 	add.w	r0, r7, #16
 80013e8:	f001 ff14 	bl	8003214 <HAL_ADC_PollForConversion>
	ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 80013ec:	f107 0010 	add.w	r0, r7, #16
 80013f0:	f002 f816 	bl	8003420 <HAL_ADC_GetValue>
 80013f4:	4602      	mov	r2, r0
 80013f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013f8:	3304      	adds	r3, #4
 80013fa:	b292      	uxth	r2, r2
 80013fc:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 80013fe:	f107 0010 	add.w	r0, r7, #16
 8001402:	f001 fedb 	bl	80031bc <HAL_ADC_Stop>
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800140e:	b004      	add	sp, #16
 8001410:	4770      	bx	lr

08001412 <calibrateOffsets>:
void calibrateOffsets(ADC_HandleTypeDef hadc1,uint16_t *offset){
 8001412:	b084      	sub	sp, #16
 8001414:	b5b0      	push	{r4, r5, r7, lr}
 8001416:	b090      	sub	sp, #64	; 0x40
 8001418:	af0a      	add	r7, sp, #40	; 0x28
 800141a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800141e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	const int calibration_rounds = 1000;
 8001422:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001426:	60fb      	str	r3, [r7, #12]

	// 查找0电流时候的电压

	uint16_t cal_current[3];
	for (int i = 0; i < calibration_rounds; i++) {
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e038      	b.n	80014a0 <calibrateOffsets+0x8e>
		read_ADC_voltage(hadc1,cal_current);
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	9308      	str	r3, [sp, #32]
 8001432:	466d      	mov	r5, sp
 8001434:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001440:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	f7ff ff66 	bl	800131a <read_ADC_voltage>
		for (int j=0;j<3;j++){
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
 8001452:	e01c      	b.n	800148e <calibrateOffsets+0x7c>
			offset[j]=(offset[j]*i+cal_current[j])/(i+1);
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800145a:	4413      	add	r3, r2
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fb03 f202 	mul.w	r2, r3, r2
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	3318      	adds	r3, #24
 800146c:	443b      	add	r3, r7
 800146e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001472:	441a      	add	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	fb92 f1f3 	sdiv	r1, r2, r3
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001482:	4413      	add	r3, r2
 8001484:	b28a      	uxth	r2, r1
 8001486:	801a      	strh	r2, [r3, #0]
		for (int j=0;j<3;j++){
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	3301      	adds	r3, #1
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	2b02      	cmp	r3, #2
 8001492:	dddf      	ble.n	8001454 <calibrateOffsets+0x42>
		}
		HAL_Delay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f001 fce7 	bl	8002e68 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) {
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	dbc2      	blt.n	800142e <calibrateOffsets+0x1c>
	}
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80014b4:	b004      	add	sp, #16
 80014b6:	4770      	bx	lr

080014b8 <LowPassFilter_operator>:
 *
 *  Created on: Jun 18, 2023
 *      Author: hht
 */
#include "lowpass_filter.h"
float LowPassFilter_operator(float x, struct LowPassFilter* filter){
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b087      	sub	sp, #28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
	float dt=5E-3f;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <LowPassFilter_operator+0x70>)
 80014c4:	617b      	str	r3, [r7, #20]
	float alpha = filter->Tf/(filter->Tf + dt);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681c      	ldr	r4, [r3, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6979      	ldr	r1, [r7, #20]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb2f 	bl	8000b34 <__addsf3>
 80014d6:	4603      	mov	r3, r0
 80014d8:	4619      	mov	r1, r3
 80014da:	4620      	mov	r0, r4
 80014dc:	f7ff fce6 	bl	8000eac <__aeabi_fdiv>
 80014e0:	4603      	mov	r3, r0
 80014e2:	613b      	str	r3, [r7, #16]
	float y = alpha*filter->y_prev + (1.0f - alpha)*x;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	6939      	ldr	r1, [r7, #16]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fc2a 	bl	8000d44 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	461c      	mov	r4, r3
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80014fa:	f7ff fb19 	bl	8000b30 <__aeabi_fsub>
 80014fe:	4603      	mov	r3, r0
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fc1e 	bl	8000d44 <__aeabi_fmul>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff fb11 	bl	8000b34 <__addsf3>
 8001512:	4603      	mov	r3, r0
 8001514:	60fb      	str	r3, [r7, #12]
	filter->y_prev = y;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	605a      	str	r2, [r3, #4]
	return y;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	371c      	adds	r7, #28
 8001522:	46bd      	mov	sp, r7
 8001524:	bd90      	pop	{r4, r7, pc}
 8001526:	bf00      	nop
 8001528:	3ba3d70a 	.word	0x3ba3d70a
 800152c:	00000000 	.word	0x00000000

08001530 <cal_angular_vel>:
struct PIDController pid_controller = {.P=0.5,.I=0.1,.D=0.0,.output_ramp=100.0,.limit=6,.error_prev=0,.output_prev=0,.integral_prev=0};

struct PIDController pid_controller_current = {.P=1.0,.I=0.1,.D=0.0,.output_ramp=100.0,.limit=6,.error_prev=0,.output_prev=0,.integral_prev=0};


float cal_angular_vel(float angle_now){
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
    if (angle_prev < 0){
 8001538:	4b33      	ldr	r3, [pc, #204]	; (8001608 <cal_angular_vel+0xd8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fd9d 	bl	8001080 <__aeabi_fcmplt>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <cal_angular_vel+0x28>
    	angle_prev=angle_now;
 800154c:	4a2e      	ldr	r2, [pc, #184]	; (8001608 <cal_angular_vel+0xd8>)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6013      	str	r3, [r2, #0]
    	return 0;
 8001552:	f04f 0300 	mov.w	r3, #0
 8001556:	e047      	b.n	80015e8 <cal_angular_vel+0xb8>
    }
    float delta_angle=angle_now -angle_prev;
 8001558:	4b2b      	ldr	r3, [pc, #172]	; (8001608 <cal_angular_vel+0xd8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff fae6 	bl	8000b30 <__aeabi_fsub>
 8001564:	4603      	mov	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
    if (delta_angle >= 1.6*M_PI){
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f7fe ff5d 	bl	8000428 <__aeabi_f2d>
 800156e:	a320      	add	r3, pc, #128	; (adr r3, 80015f0 <cal_angular_vel+0xc0>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff fa36 	bl	80009e4 <__aeabi_dcmpge>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d00f      	beq.n	800159e <cal_angular_vel+0x6e>
    	delta_angle-=2*M_PI;
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f7fe ff52 	bl	8000428 <__aeabi_f2d>
 8001584:	a31c      	add	r3, pc, #112	; (adr r3, 80015f8 <cal_angular_vel+0xc8>)
 8001586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158a:	f7fe fded 	bl	8000168 <__aeabi_dsub>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4610      	mov	r0, r2
 8001594:	4619      	mov	r1, r3
 8001596:	f7ff fa77 	bl	8000a88 <__aeabi_d2f>
 800159a:	4603      	mov	r3, r0
 800159c:	60fb      	str	r3, [r7, #12]
    }
    if (delta_angle <= -1.6*M_PI){
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7fe ff42 	bl	8000428 <__aeabi_f2d>
 80015a4:	a316      	add	r3, pc, #88	; (adr r3, 8001600 <cal_angular_vel+0xd0>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff fa11 	bl	80009d0 <__aeabi_dcmple>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00f      	beq.n	80015d4 <cal_angular_vel+0xa4>
        	delta_angle+=2*M_PI;
 80015b4:	68f8      	ldr	r0, [r7, #12]
 80015b6:	f7fe ff37 	bl	8000428 <__aeabi_f2d>
 80015ba:	a30f      	add	r3, pc, #60	; (adr r3, 80015f8 <cal_angular_vel+0xc8>)
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	f7fe fdd4 	bl	800016c <__adddf3>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff fa5c 	bl	8000a88 <__aeabi_d2f>
 80015d0:	4603      	mov	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]
    }
    angle_prev=angle_now;
 80015d4:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <cal_angular_vel+0xd8>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6013      	str	r3, [r2, #0]
    return delta_angle/Ts;
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <cal_angular_vel+0xdc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f7ff fc63 	bl	8000eac <__aeabi_fdiv>
 80015e6:	4603      	mov	r3, r0


}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	769cf0e0 	.word	0x769cf0e0
 80015f4:	40141b2f 	.word	0x40141b2f
 80015f8:	54442d18 	.word	0x54442d18
 80015fc:	401921fb 	.word	0x401921fb
 8001600:	769cf0e0 	.word	0x769cf0e0
 8001604:	c0141b2f 	.word	0xc0141b2f
 8001608:	20000018 	.word	0x20000018
 800160c:	20000014 	.word	0x20000014

08001610 <cal_Iq>:
float cal_Iq(double* current_phase, float angle_el){
 8001610:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001614:	b084      	sub	sp, #16
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	6039      	str	r1, [r7, #0]
	 angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <cal_Iq+0x108>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6839      	ldr	r1, [r7, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fa86 	bl	8000b34 <__addsf3>
 8001628:	4603      	mov	r3, r0
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fd48 	bl	80020c0 <_normalizeAngle>
 8001630:	6038      	str	r0, [r7, #0]
	 float I_alpha=current_phase[0];
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa24 	bl	8000a88 <__aeabi_d2f>
 8001640:	4603      	mov	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]
	 float I_beta=_1_SQRT3*(2*current_phase[1]+current_phase[0]);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3308      	adds	r3, #8
 8001648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	f7fe fd8c 	bl	800016c <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001662:	f7fe fd83 	bl	800016c <__adddf3>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	a328      	add	r3, pc, #160	; (adr r3, 8001710 <cal_Iq+0x100>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ff30 	bl	80004d8 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4610      	mov	r0, r2
 800167e:	4619      	mov	r1, r3
 8001680:	f7ff fa02 	bl	8000a88 <__aeabi_d2f>
 8001684:	4603      	mov	r3, r0
 8001686:	60bb      	str	r3, [r7, #8]
//	 float Iq=-sin(angle_el)*I_alpha+cos(angle_el)*I_beta;
//	 float Id=cos(angle_el)*I_alpha+sin(angle_el)*I_beta;
	 return -sin(angle_el)*I_alpha+cos(angle_el)*I_beta;
 8001688:	6838      	ldr	r0, [r7, #0]
 800168a:	f7fe fecd 	bl	8000428 <__aeabi_f2d>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f00b facf 	bl	800cc38 <sin>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4614      	mov	r4, r2
 80016a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7fe febf 	bl	8000428 <__aeabi_f2d>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4620      	mov	r0, r4
 80016b0:	4629      	mov	r1, r5
 80016b2:	f7fe ff11 	bl	80004d8 <__aeabi_dmul>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4690      	mov	r8, r2
 80016bc:	4699      	mov	r9, r3
 80016be:	6838      	ldr	r0, [r7, #0]
 80016c0:	f7fe feb2 	bl	8000428 <__aeabi_f2d>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f00b fa6e 	bl	800cbac <cos>
 80016d0:	4604      	mov	r4, r0
 80016d2:	460d      	mov	r5, r1
 80016d4:	68b8      	ldr	r0, [r7, #8]
 80016d6:	f7fe fea7 	bl	8000428 <__aeabi_f2d>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe fef9 	bl	80004d8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4640      	mov	r0, r8
 80016ec:	4649      	mov	r1, r9
 80016ee:	f7fe fd3d 	bl	800016c <__adddf3>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff f9c5 	bl	8000a88 <__aeabi_d2f>
 80016fe:	4603      	mov	r3, r0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800170a:	bf00      	nop
 800170c:	f3af 8000 	nop.w
 8001710:	40000000 	.word	0x40000000
 8001714:	3fe279a7 	.word	0x3fe279a7
 8001718:	200003a8 	.word	0x200003a8
 800171c:	00000000 	.word	0x00000000

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001722:	b08d      	sub	sp, #52	; 0x34
 8001724:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001726:	f001 fb3d 	bl	8002da4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172a:	f000 f8cf 	bl	80018cc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800172e:	f000 fac3 	bl	8001cb8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001732:	f000 f985 	bl	8001a40 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001736:	f00a f89b 	bl	800b870 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 800173a:	f000 f9b9 	bl	8001ab0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800173e:	f000 fa6f 	bl	8001c20 <MX_TIM2_Init>
  MX_ADC1_Init();
 8001742:	f000 f921 	bl	8001988 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800174c:	4850      	ldr	r0, [pc, #320]	; (8001890 <main+0x170>)
 800174e:	f002 fa99 	bl	8003c84 <HAL_GPIO_WritePin>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001752:	2100      	movs	r1, #0
 8001754:	484f      	ldr	r0, [pc, #316]	; (8001894 <main+0x174>)
 8001756:	f005 fac1 	bl	8006cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800175a:	2104      	movs	r1, #4
 800175c:	484d      	ldr	r0, [pc, #308]	; (8001894 <main+0x174>)
 800175e:	f005 fabd 	bl	8006cdc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001762:	2108      	movs	r1, #8
 8001764:	484b      	ldr	r0, [pc, #300]	; (8001894 <main+0x174>)
 8001766:	f005 fab9 	bl	8006cdc <HAL_TIM_PWM_Start>
  calibrateOffsets(hadc1,&current_offset);
 800176a:	4e4b      	ldr	r6, [pc, #300]	; (8001898 <main+0x178>)
 800176c:	4b4b      	ldr	r3, [pc, #300]	; (800189c <main+0x17c>)
 800176e:	9308      	str	r3, [sp, #32]
 8001770:	466d      	mov	r5, sp
 8001772:	f106 0410 	add.w	r4, r6, #16
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800177e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001782:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001786:	f7ff fe44 	bl	8001412 <calibrateOffsets>
  setPhaseVoltage(3,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 800178a:	4b45      	ldr	r3, [pc, #276]	; (80018a0 <main+0x180>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4844      	ldr	r0, [pc, #272]	; (80018a4 <main+0x184>)
 8001792:	f000 fccd 	bl	8002130 <_electricalAngle>
 8001796:	4602      	mov	r2, r0
 8001798:	4b43      	ldr	r3, [pc, #268]	; (80018a8 <main+0x188>)
 800179a:	f04f 0100 	mov.w	r1, #0
 800179e:	4843      	ldr	r0, [pc, #268]	; (80018ac <main+0x18c>)
 80017a0:	f000 fe0e 	bl	80023c0 <setPhaseVoltage>
  HAL_Delay(3000);
 80017a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017a8:	f001 fb5e 	bl	8002e68 <HAL_Delay>
  uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 80017ac:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80017b0:	2201      	movs	r2, #1
 80017b2:	4937      	ldr	r1, [pc, #220]	; (8001890 <main+0x170>)
 80017b4:	483e      	ldr	r0, [pc, #248]	; (80018b0 <main+0x190>)
 80017b6:	f7ff fccf 	bl	8001158 <read>
 80017ba:	4603      	mov	r3, r0
 80017bc:	80fb      	strh	r3, [r7, #6]
  zero_electric_angle=_electricalAngle(M_PI*read_raw/MAX_ANGLE_VALUE,pole_pairs);
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fe1f 	bl	8000404 <__aeabi_i2d>
 80017c6:	a330      	add	r3, pc, #192	; (adr r3, 8001888 <main+0x168>)
 80017c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017cc:	f7fe fe84 	bl	80004d8 <__aeabi_dmul>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b35      	ldr	r3, [pc, #212]	; (80018b4 <main+0x194>)
 80017de:	f7fe ffa5 	bl	800072c <__aeabi_ddiv>
 80017e2:	4602      	mov	r2, r0
 80017e4:	460b      	mov	r3, r1
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f94d 	bl	8000a88 <__aeabi_d2f>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <main+0x180>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4610      	mov	r0, r2
 80017f8:	f000 fc9a 	bl	8002130 <_electricalAngle>
 80017fc:	4603      	mov	r3, r0
 80017fe:	4a2e      	ldr	r2, [pc, #184]	; (80018b8 <main+0x198>)
 8001800:	6013      	str	r3, [r2, #0]
  setPhaseVoltage(0,0,_electricalAngle(M_PI*1.5f,pole_pairs),TIM1);
 8001802:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <main+0x180>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4619      	mov	r1, r3
 8001808:	4826      	ldr	r0, [pc, #152]	; (80018a4 <main+0x184>)
 800180a:	f000 fc91 	bl	8002130 <_electricalAngle>
 800180e:	4602      	mov	r2, r0
 8001810:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <main+0x188>)
 8001812:	f04f 0100 	mov.w	r1, #0
 8001816:	f04f 0000 	mov.w	r0, #0
 800181a:	f000 fdd1 	bl	80023c0 <setPhaseVoltage>
  sprintf(data, "zero_electric_angle: %i \n", (int) floor(zero_electric_angle/M_PI*180));
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <main+0x198>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe00 	bl	8000428 <__aeabi_f2d>
 8001828:	a317      	add	r3, pc, #92	; (adr r3, 8001888 <main+0x168>)
 800182a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182e:	f7fe ff7d 	bl	800072c <__aeabi_ddiv>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 0200 	mov.w	r2, #0
 800183e:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <main+0x19c>)
 8001840:	f7fe fe4a 	bl	80004d8 <__aeabi_dmul>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f00b fa3c 	bl	800ccc8 <floor>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f8ee 	bl	8000a38 <__aeabi_d2iz>
 800185c:	4603      	mov	r3, r0
 800185e:	461a      	mov	r2, r3
 8001860:	4917      	ldr	r1, [pc, #92]	; (80018c0 <main+0x1a0>)
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <main+0x1a4>)
 8001864:	f00a fca4 	bl	800c1b0 <siprintf>
  CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8001868:	4816      	ldr	r0, [pc, #88]	; (80018c4 <main+0x1a4>)
 800186a:	f7fe fc71 	bl	8000150 <strlen>
 800186e:	4603      	mov	r3, r0
 8001870:	b29b      	uxth	r3, r3
 8001872:	4619      	mov	r1, r3
 8001874:	4813      	ldr	r0, [pc, #76]	; (80018c4 <main+0x1a4>)
 8001876:	f00a f8b9 	bl	800b9ec <CDC_Transmit_FS>
  HAL_TIM_Base_Start_IT(&htim2);
 800187a:	4813      	ldr	r0, [pc, #76]	; (80018c8 <main+0x1a8>)
 800187c:	f005 f984 	bl	8006b88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001880:	e7fe      	b.n	8001880 <main+0x160>
 8001882:	bf00      	nop
 8001884:	f3af 8000 	nop.w
 8001888:	54442d18 	.word	0x54442d18
 800188c:	400921fb 	.word	0x400921fb
 8001890:	40010c00 	.word	0x40010c00
 8001894:	200002e4 	.word	0x200002e4
 8001898:	2000025c 	.word	0x2000025c
 800189c:	200003b8 	.word	0x200003b8
 80018a0:	20000010 	.word	0x20000010
 80018a4:	4096cbe4 	.word	0x4096cbe4
 80018a8:	40012c00 	.word	0x40012c00
 80018ac:	40400000 	.word	0x40400000
 80018b0:	2000028c 	.word	0x2000028c
 80018b4:	40c00000 	.word	0x40c00000
 80018b8:	200003a8 	.word	0x200003a8
 80018bc:	40668000 	.word	0x40668000
 80018c0:	0800de60 	.word	0x0800de60
 80018c4:	20000374 	.word	0x20000374
 80018c8:	2000032c 	.word	0x2000032c

080018cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b094      	sub	sp, #80	; 0x50
 80018d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018d6:	2228      	movs	r2, #40	; 0x28
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f00a fc88 	bl	800c1f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001900:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190a:	2301      	movs	r3, #1
 800190c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190e:	2302      	movs	r3, #2
 8001910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001912:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001918:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800191c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001922:	4618      	mov	r0, r3
 8001924:	f003 ff4e 	bl	80057c4 <HAL_RCC_OscConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800192e:	f000 fbc1 	bl	80020b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001932:	230f      	movs	r3, #15
 8001934:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001942:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2102      	movs	r1, #2
 800194e:	4618      	mov	r0, r3
 8001950:	f004 f9ba 	bl	8005cc8 <HAL_RCC_ClockConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800195a:	f000 fbab 	bl	80020b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 800195e:	2312      	movs	r3, #18
 8001960:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001966:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001968:	2300      	movs	r3, #0
 800196a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4618      	mov	r0, r3
 8001970:	f004 fb24 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800197a:	f000 fb9b 	bl	80020b4 <Error_Handler>
  }
}
 800197e:	bf00      	nop
 8001980:	3750      	adds	r7, #80	; 0x50
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_ADC1_Init+0xb0>)
 800199a:	4a28      	ldr	r2, [pc, #160]	; (8001a3c <MX_ADC1_Init+0xb4>)
 800199c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019b4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80019b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019c2:	2203      	movs	r2, #3
 80019c4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c6:	481c      	ldr	r0, [pc, #112]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019c8:	f001 fa72 	bl	8002eb0 <HAL_ADC_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80019d2:	f000 fb6f 	bl	80020b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019da:	2301      	movs	r3, #1
 80019dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 80019de:	2303      	movs	r3, #3
 80019e0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	4619      	mov	r1, r3
 80019e6:	4814      	ldr	r0, [pc, #80]	; (8001a38 <MX_ADC1_Init+0xb0>)
 80019e8:	f001 fd26 	bl	8003438 <HAL_ADC_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019f2:	f000 fb5f 	bl	80020b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019fa:	2302      	movs	r3, #2
 80019fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_ADC1_Init+0xb0>)
 8001a04:	f001 fd18 	bl	8003438 <HAL_ADC_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001a0e:	f000 fb51 	bl	80020b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a16:	2303      	movs	r3, #3
 8001a18:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_ADC1_Init+0xb0>)
 8001a20:	f001 fd0a 	bl	8003438 <HAL_ADC_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001a2a:	f000 fb43 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	2000025c 	.word	0x2000025c
 8001a3c:	40012400 	.word	0x40012400

08001a40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a46:	4a19      	ldr	r2, [pc, #100]	; (8001aac <MX_SPI1_Init+0x6c>)
 8001a48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a58:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a66:	4b10      	ldr	r3, [pc, #64]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a76:	2220      	movs	r2, #32
 8001a78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a80:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a8e:	220a      	movs	r2, #10
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <MX_SPI1_Init+0x68>)
 8001a94:	f004 fbfe 	bl	8006294 <HAL_SPI_Init>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001a9e:	f000 fb09 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	2000028c 	.word	0x2000028c
 8001aac:	40013000 	.word	0x40013000

08001ab0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b096      	sub	sp, #88	; 0x58
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00a fb81 	bl	800c1f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aee:	4b4a      	ldr	r3, [pc, #296]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001af0:	4a4a      	ldr	r2, [pc, #296]	; (8001c1c <MX_TIM1_Init+0x16c>)
 8001af2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001af4:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b47      	ldr	r3, [pc, #284]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b02:	f640 125f 	movw	r2, #2399	; 0x95f
 8001b06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b0e:	4b42      	ldr	r3, [pc, #264]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b1a:	483f      	ldr	r0, [pc, #252]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b1c:	f004 ffe4 	bl	8006ae8 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b26:	f000 fac5 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b34:	4619      	mov	r1, r3
 8001b36:	4838      	ldr	r0, [pc, #224]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b38:	f005 fb3c 	bl	80071b4 <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b42:	f000 fab7 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b46:	4834      	ldr	r0, [pc, #208]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b48:	f005 f870 	bl	8006c2c <HAL_TIM_PWM_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b52:	f000 faaf 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b62:	4619      	mov	r1, r3
 8001b64:	482c      	ldr	r0, [pc, #176]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b66:	f005 feb5 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001b70:	f000 faa0 	bl	80020b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b74:	2360      	movs	r3, #96	; 0x60
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b94:	2200      	movs	r2, #0
 8001b96:	4619      	mov	r1, r3
 8001b98:	481f      	ldr	r0, [pc, #124]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001b9a:	f005 fa49 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001ba4:	f000 fa86 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bac:	2204      	movs	r2, #4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4819      	ldr	r0, [pc, #100]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001bb2:	f005 fa3d 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001bbc:	f000 fa7a 	bl	80020b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4813      	ldr	r0, [pc, #76]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001bca:	f005 fa31 	bl	8007030 <HAL_TIM_PWM_ConfigChannel>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001bd4:	f000 fa6e 	bl	80020b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4807      	ldr	r0, [pc, #28]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001bfc:	f005 fec8 	bl	8007990 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001c06:	f000 fa55 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c0a:	4803      	ldr	r0, [pc, #12]	; (8001c18 <MX_TIM1_Init+0x168>)
 8001c0c:	f000 fff8 	bl	8002c00 <HAL_TIM_MspPostInit>

}
 8001c10:	bf00      	nop
 8001c12:	3758      	adds	r7, #88	; 0x58
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	200002e4 	.word	0x200002e4
 8001c1c:	40012c00 	.word	0x40012c00

08001c20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c26:	f107 0308 	add.w	r3, r7, #8
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c34:	463b      	mov	r3, r7
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c46:	2259      	movs	r2, #89	; 0x59
 8001c48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000-1;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c52:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c64:	4813      	ldr	r0, [pc, #76]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c66:	f004 ff3f 	bl	8006ae8 <HAL_TIM_Base_Init>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001c70:	f000 fa20 	bl	80020b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c82:	f005 fa97 	bl	80071b4 <HAL_TIM_ConfigClockSource>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001c8c:	f000 fa12 	bl	80020b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c90:	2300      	movs	r3, #0
 8001c92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c98:	463b      	mov	r3, r7
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_TIM2_Init+0x94>)
 8001c9e:	f005 fe19 	bl	80078d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ca8:	f000 fa04 	bl	80020b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */

}
 8001cac:	bf00      	nop
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	2000032c 	.word	0x2000032c

08001cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b088      	sub	sp, #32
 8001cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbe:	f107 0310 	add.w	r3, r7, #16
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	605a      	str	r2, [r3, #4]
 8001cc8:	609a      	str	r2, [r3, #8]
 8001cca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001cd2:	f043 0310 	orr.w	r3, r3, #16
 8001cd6:	6193      	str	r3, [r2, #24]
 8001cd8:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	4a31      	ldr	r2, [pc, #196]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001cea:	f043 0320 	orr.w	r3, r3, #32
 8001cee:	6193      	str	r3, [r2, #24]
 8001cf0:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfc:	4b2c      	ldr	r3, [pc, #176]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	4a2b      	ldr	r2, [pc, #172]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6193      	str	r3, [r2, #24]
 8001d08:	4b29      	ldr	r3, [pc, #164]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a25      	ldr	r2, [pc, #148]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001d1a:	f043 0308 	orr.w	r3, r3, #8
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <MX_GPIO_Init+0xf8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d32:	4820      	ldr	r0, [pc, #128]	; (8001db4 <MX_GPIO_Init+0xfc>)
 8001d34:	f001 ffa6 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CSn_GPIO_Port, SPI1_CSn_Pin, GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	481e      	ldr	r0, [pc, #120]	; (8001db8 <MX_GPIO_Init+0x100>)
 8001d3e:	f001 ffa1 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Motor_Enable_GPIO_Port, Motor_Enable_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d48:	481b      	ldr	r0, [pc, #108]	; (8001db8 <MX_GPIO_Init+0x100>)
 8001d4a:	f001 ff9b 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0310 	add.w	r3, r7, #16
 8001d64:	4619      	mov	r1, r3
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <MX_GPIO_Init+0xfc>)
 8001d68:	f001 fe08 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CSn_Pin */
  GPIO_InitStruct.Pin = SPI1_CSn_Pin;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CSn_GPIO_Port, &GPIO_InitStruct);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	; (8001db8 <MX_GPIO_Init+0x100>)
 8001d84:	f001 fdfa 	bl	800397c <HAL_GPIO_Init>

  /*Configure GPIO pin : Motor_Enable_Pin */
  GPIO_InitStruct.Pin = Motor_Enable_Pin;
 8001d88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Motor_Enable_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0310 	add.w	r3, r7, #16
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_GPIO_Init+0x100>)
 8001da2:	f001 fdeb 	bl	800397c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001da6:	bf00      	nop
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	00000000 	.word	0x00000000

08001dc0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b097      	sub	sp, #92	; 0x5c
 8001dc4:	af0a      	add	r7, sp, #40	; 0x28
 8001dc6:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim2 )
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4aa5      	ldr	r2, [pc, #660]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	f040 8134 	bne.w	800203a <HAL_TIM_PeriodElapsedCallback+0x27a>
  {



    index1+=1;
 8001dd2:	4ba4      	ldr	r3, [pc, #656]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4aa2      	ldr	r2, [pc, #648]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001dda:	6013      	str	r3, [r2, #0]
    uint16_t read_raw=read(&hspi1, SPI1_CSn_GPIO_Port,SPI1_CSn_Pin,AS5048A_ANGLE);
 8001ddc:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001de0:	2201      	movs	r2, #1
 8001de2:	49a1      	ldr	r1, [pc, #644]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001de4:	48a1      	ldr	r0, [pc, #644]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001de6:	f7ff f9b7 	bl	8001158 <read>
 8001dea:	4603      	mov	r3, r0
 8001dec:	857b      	strh	r3, [r7, #42]	; 0x2a
    float angle_now=(float)read_raw /(float)MAX_ANGLE_VALUE *2*M_PI*dir;
 8001dee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7fe ff4f 	bl	8000c94 <__aeabi_ui2f>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f04f 418c 	mov.w	r1, #1174405120	; 0x46000000
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f855 	bl	8000eac <__aeabi_fdiv>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4619      	mov	r1, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fe94 	bl	8000b34 <__addsf3>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb0a 	bl	8000428 <__aeabi_f2d>
 8001e14:	a38c      	add	r3, pc, #560	; (adr r3, 8002048 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1a:	f7fe fb5d 	bl	80004d8 <__aeabi_dmul>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4614      	mov	r4, r2
 8001e24:	461d      	mov	r5, r3
 8001e26:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe faea 	bl	8000404 <__aeabi_i2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fb4e 	bl	80004d8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	f7fe fe20 	bl	8000a88 <__aeabi_d2f>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
//    sprintf(data, "angle_error : %i \n", (int) floor(angle_error/M_PI*180));
//       CDC_Transmit_FS((uint8_t*) data, strlen(data));
    //    open loop speed control
//        velocityOpenloop(5,5.5,TIM1);
//    closed loop speed control
    float angular_vel=cal_angular_vel(angle_now);
 8001e4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e4e:	f7ff fb6f 	bl	8001530 <cal_angular_vel>
 8001e52:	6238      	str	r0, [r7, #32]
    float filtered_vel=LowPassFilter_operator(angular_vel,&filter);
 8001e54:	4987      	ldr	r1, [pc, #540]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001e56:	6a38      	ldr	r0, [r7, #32]
 8001e58:	f7ff fb2e 	bl	80014b8 <LowPassFilter_operator>
 8001e5c:	61f8      	str	r0, [r7, #28]
    float velo_controller_out=PID_operator(target_vel-filtered_vel,&pid_controller);
 8001e5e:	4b86      	ldr	r3, [pc, #536]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69f9      	ldr	r1, [r7, #28]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fe63 	bl	8000b30 <__aeabi_fsub>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	4983      	ldr	r1, [pc, #524]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fd00 	bl	8002874 <PID_operator>
 8001e74:	61b8      	str	r0, [r7, #24]
    read_ADC_voltage(hadc1,ADC_VAL);
 8001e76:	4e82      	ldr	r6, [pc, #520]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001e78:	4b82      	ldr	r3, [pc, #520]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e7a:	9308      	str	r3, [sp, #32]
 8001e7c:	466d      	mov	r5, sp
 8001e7e:	f106 0410 	add.w	r4, r6, #16
 8001e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001e92:	f7ff fa42 	bl	800131a <read_ADC_voltage>
    for (int i=0;i<3;i++){
 8001e96:	2300      	movs	r3, #0
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e9a:	e034      	b.n	8001f06 <HAL_TIM_PeriodElapsedCallback+0x146>
       	current_phase[i] =(float)  ( ADC_VAL[i]-current_offset[i])/(float) adc_range*Vref/Rsense;
 8001e9c:	4a79      	ldr	r2, [pc, #484]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4a78      	ldr	r2, [pc, #480]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001eae:	1acb      	subs	r3, r1, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fef3 	bl	8000c9c <__aeabi_i2f>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe feed 	bl	8000c9c <__aeabi_i2f>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4620      	mov	r0, r4
 8001ec8:	f7fe fff0 	bl	8000eac <__aeabi_fdiv>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7fe faaa 	bl	8000428 <__aeabi_f2d>
 8001ed4:	a35e      	add	r3, pc, #376	; (adr r3, 8002050 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fafd 	bl	80004d8 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	a35c      	add	r3, pc, #368	; (adr r3, 8002058 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fc1e 	bl	800072c <__aeabi_ddiv>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4865      	ldr	r0, [pc, #404]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ef8:	00c9      	lsls	r1, r1, #3
 8001efa:	4401      	add	r1, r0
 8001efc:	e9c1 2300 	strd	r2, r3, [r1]
    for (int i=0;i<3;i++){
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f02:	3301      	adds	r3, #1
 8001f04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	ddc7      	ble.n	8001e9c <HAL_TIM_PeriodElapsedCallback+0xdc>
    }

    float Iq=cal_Iq(current_phase, _electricalAngle(angle_now, pole_pairs));
 8001f0c:	4b60      	ldr	r3, [pc, #384]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001f14:	f000 f90c 	bl	8002130 <_electricalAngle>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	485b      	ldr	r0, [pc, #364]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001f1e:	f7ff fb77 	bl	8001610 <cal_Iq>
 8001f22:	6178      	str	r0, [r7, #20]
    float filtered_Iq=LowPassFilter_operator(Iq,&filter_current);
 8001f24:	495b      	ldr	r1, [pc, #364]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7ff fac6 	bl	80014b8 <LowPassFilter_operator>
 8001f2c:	6138      	str	r0, [r7, #16]

    float current_controller_output=PID_operator(velo_controller_out-filtered_Iq,&pid_controller_current);
 8001f2e:	6939      	ldr	r1, [r7, #16]
 8001f30:	69b8      	ldr	r0, [r7, #24]
 8001f32:	f7fe fdfd 	bl	8000b30 <__aeabi_fsub>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4957      	ldr	r1, [pc, #348]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fc9a 	bl	8002874 <PID_operator>
 8001f40:	60f8      	str	r0, [r7, #12]

    setPhaseVoltage(_constrain(current_controller_output,-voltage_power_supply/2,voltage_power_supply/2),  0, _electricalAngle(angle_now, pole_pairs),TIM1);
 8001f42:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe ffac 	bl	8000eac <__aeabi_fdiv>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4619      	mov	r1, r3
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7ff f891 	bl	8001080 <__aeabi_fcmplt>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <HAL_TIM_PeriodElapsedCallback+0x1bc>
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f6c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe ff9b 	bl	8000eac <__aeabi_fdiv>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461c      	mov	r4, r3
 8001f7a:	e019      	b.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001f7c:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7fe ff91 	bl	8000eac <__aeabi_fdiv>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f7ff f894 	bl	80010bc <__aeabi_fcmpgt>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d009      	beq.n	8001fae <HAL_TIM_PeriodElapsedCallback+0x1ee>
 8001f9a:	4b40      	ldr	r3, [pc, #256]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe ff82 	bl	8000eac <__aeabi_fdiv>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	461c      	mov	r4, r3
 8001fac:	e000      	b.n	8001fb0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
 8001fae:	68fc      	ldr	r4, [r7, #12]
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001fb8:	f000 f8ba 	bl	8002130 <_electricalAngle>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	4620      	mov	r0, r4
 8001fc6:	f000 f9fb 	bl	80023c0 <setPhaseVoltage>
//    sprintf(data, "angle_now : %i \t angle_prev : %i \n", (int) floor(angle_now/M_PI*180), (int) floor(angle_prev/M_PI*180));
//    CDC_Transmit_FS((uint8_t*) data, strlen(data));
    sprintf(data, "angular_vel : %i \n", (int) floor(angular_vel/M_PI*180));
 8001fca:	6a38      	ldr	r0, [r7, #32]
 8001fcc:	f7fe fa2c 	bl	8000428 <__aeabi_f2d>
 8001fd0:	a31d      	add	r3, pc, #116	; (adr r3, 8002048 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fba9 	bl	800072c <__aeabi_ddiv>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 8001fe8:	f7fe fa76 	bl	80004d8 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f00a fe68 	bl	800ccc8 <floor>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fd1a 	bl	8000a38 <__aeabi_d2iz>
 8002004:	4603      	mov	r3, r0
 8002006:	461a      	mov	r2, r3
 8002008:	4927      	ldr	r1, [pc, #156]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800200a:	4828      	ldr	r0, [pc, #160]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800200c:	f00a f8d0 	bl	800c1b0 <siprintf>
    CDC_Transmit_FS((uint8_t*) data, strlen(data));
 8002010:	4826      	ldr	r0, [pc, #152]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002012:	f7fe f89d 	bl	8000150 <strlen>
 8002016:	4603      	mov	r3, r0
 8002018:	b29b      	uxth	r3, r3
 800201a:	4619      	mov	r1, r3
 800201c:	4823      	ldr	r0, [pc, #140]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800201e:	f009 fce5 	bl	800b9ec <CDC_Transmit_FS>
//        CDC_Transmit_FS((uint8_t*) data, strlen(data));




    if (index1 == 200){
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2bc8      	cmp	r3, #200	; 0xc8
 8002028:	d107      	bne.n	800203a <HAL_TIM_PeriodElapsedCallback+0x27a>
    	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800202a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800202e:	4820      	ldr	r0, [pc, #128]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002030:	f001 fe40 	bl	8003cb4 <HAL_GPIO_TogglePin>
    	index1=0;
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3734      	adds	r7, #52	; 0x34
 800203e:	46bd      	mov	sp, r7
 8002040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002042:	bf00      	nop
 8002044:	f3af 8000 	nop.w
 8002048:	54442d18 	.word	0x54442d18
 800204c:	400921fb 	.word	0x400921fb
 8002050:	66666666 	.word	0x66666666
 8002054:	400a6666 	.word	0x400a6666
 8002058:	51eb851f 	.word	0x51eb851f
 800205c:	3fd51eb8 	.word	0x3fd51eb8
 8002060:	2000032c 	.word	0x2000032c
 8002064:	200003ac 	.word	0x200003ac
 8002068:	40010c00 	.word	0x40010c00
 800206c:	2000028c 	.word	0x2000028c
 8002070:	2000000c 	.word	0x2000000c
 8002074:	20000020 	.word	0x20000020
 8002078:	2000001c 	.word	0x2000001c
 800207c:	20000030 	.word	0x20000030
 8002080:	2000025c 	.word	0x2000025c
 8002084:	200003b0 	.word	0x200003b0
 8002088:	200003b8 	.word	0x200003b8
 800208c:	200003c0 	.word	0x200003c0
 8002090:	20000010 	.word	0x20000010
 8002094:	20000028 	.word	0x20000028
 8002098:	20000050 	.word	0x20000050
 800209c:	20000004 	.word	0x20000004
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	40668000 	.word	0x40668000
 80020a8:	0800de7c 	.word	0x0800de7c
 80020ac:	20000374 	.word	0x20000374
 80020b0:	40011000 	.word	0x40011000

080020b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <_normalizeAngle>:
extern int dir;
extern float voltage_limit;
extern float voltage_power_supply;
extern int period;

float _normalizeAngle(float angle){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, 2*M_PI);   //取余运算可以用于归一化，列出特殊值例子算便知
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7fe f9ad 	bl	8000428 <__aeabi_f2d>
 80020ce:	a316      	add	r3, pc, #88	; (adr r3, 8002128 <_normalizeAngle+0x68>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f00a fd42 	bl	800cb5c <fmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f7fe fcd2 	bl	8000a88 <__aeabi_d2f>
 80020e4:	4603      	mov	r3, r0
 80020e6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + 2*M_PI);
 80020e8:	f04f 0100 	mov.w	r1, #0
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f7fe ffdb 	bl	80010a8 <__aeabi_fcmpge>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <_normalizeAngle+0x3c>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	e00e      	b.n	800211a <_normalizeAngle+0x5a>
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7fe f993 	bl	8000428 <__aeabi_f2d>
 8002102:	a309      	add	r3, pc, #36	; (adr r3, 8002128 <_normalizeAngle+0x68>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe f830 	bl	800016c <__adddf3>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	f7fe fcb8 	bl	8000a88 <__aeabi_d2f>
 8002118:	4603      	mov	r3, r0
  //可以将三目运算符视为 if-else 语句的简化形式。
  //fmod 函数的余数的符号与除数相同。因此，当 angle 的值为负数时，余数的符号将与 _2M_PI 的符号相反。
  //也就是说，如果 angle 的值小于 0 且 _2M_PI 的值为正数，则 fmod(angle, _2M_PI) 的余数将为负数。
  //例如，当 angle 的值为 -M_PI/2，_2M_PI 的值为 2M_PI 时，fmod(angle, _2M_PI) 将返回一个负数。
  //在这种情况下，可以通过将负数的余数加上 _2M_PI 来将角度归一化到 [0, 2M_PI] 的范围内，以确保角度的值始终为正数。
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	f3af 8000 	nop.w
 8002128:	54442d18 	.word	0x54442d18
 800212c:	401921fb 	.word	0x401921fb

08002130 <_electricalAngle>:

float _electricalAngle(float shaft_angle, int pole_pairs) {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  return _normalizeAngle(((float)(dir * pole_pairs)*shaft_angle)-zero_electric_angle);
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <_electricalAngle+0x48>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	fb02 f303 	mul.w	r3, r2, r3
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fda9 	bl	8000c9c <__aeabi_i2f>
 800214a:	4603      	mov	r3, r0
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdf8 	bl	8000d44 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <_electricalAngle+0x4c>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	4610      	mov	r0, r2
 8002160:	f7fe fce6 	bl	8000b30 <__aeabi_fsub>
 8002164:	4603      	mov	r3, r0
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ffaa 	bl	80020c0 <_normalizeAngle>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c
 800217c:	200003a8 	.word	0x200003a8

08002180 <setPwm>:





void setPwm(float Ua, float Ub, float Uc, TIM_TypeDef * TIM_BASE) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b088      	sub	sp, #32
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]

//	// 限制上限
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f7fe ff74 	bl	8001080 <__aeabi_fcmplt>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d002      	beq.n	80021a4 <setPwm+0x24>
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e00c      	b.n	80021be <setPwm+0x3e>
 80021a4:	4b83      	ldr	r3, [pc, #524]	; (80023b4 <setPwm+0x234>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4619      	mov	r1, r3
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7fe ff86 	bl	80010bc <__aeabi_fcmpgt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <setPwm+0x3c>
 80021b6:	4b7f      	ldr	r3, [pc, #508]	; (80023b4 <setPwm+0x234>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	e000      	b.n	80021be <setPwm+0x3e>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	60fb      	str	r3, [r7, #12]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 80021c0:	f04f 0100 	mov.w	r1, #0
 80021c4:	68b8      	ldr	r0, [r7, #8]
 80021c6:	f7fe ff5b 	bl	8001080 <__aeabi_fcmplt>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <setPwm+0x56>
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	e00c      	b.n	80021f0 <setPwm+0x70>
 80021d6:	4b77      	ldr	r3, [pc, #476]	; (80023b4 <setPwm+0x234>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	68b8      	ldr	r0, [r7, #8]
 80021de:	f7fe ff6d 	bl	80010bc <__aeabi_fcmpgt>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <setPwm+0x6e>
 80021e8:	4b72      	ldr	r3, [pc, #456]	; (80023b4 <setPwm+0x234>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	e000      	b.n	80021f0 <setPwm+0x70>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	60bb      	str	r3, [r7, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 80021f2:	f04f 0100 	mov.w	r1, #0
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe ff42 	bl	8001080 <__aeabi_fcmplt>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d002      	beq.n	8002208 <setPwm+0x88>
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e00c      	b.n	8002222 <setPwm+0xa2>
 8002208:	4b6a      	ldr	r3, [pc, #424]	; (80023b4 <setPwm+0x234>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe ff54 	bl	80010bc <__aeabi_fcmpgt>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <setPwm+0xa0>
 800221a:	4b66      	ldr	r3, [pc, #408]	; (80023b4 <setPwm+0x234>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	e000      	b.n	8002222 <setPwm+0xa2>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	607b      	str	r3, [r7, #4]
	// 计算占空比
	// 限制占空比从0到1
	float dc_a = _constrain(Ua / voltage_power_supply, 0.0f , 1.0f );
 8002224:	4b64      	ldr	r3, [pc, #400]	; (80023b8 <setPwm+0x238>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f7fe fe3e 	bl	8000eac <__aeabi_fdiv>
 8002230:	4603      	mov	r3, r0
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe ff22 	bl	8001080 <__aeabi_fcmplt>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d002      	beq.n	8002248 <setPwm+0xc8>
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	e018      	b.n	800227a <setPwm+0xfa>
 8002248:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <setPwm+0x238>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4619      	mov	r1, r3
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7fe fe2c 	bl	8000eac <__aeabi_fdiv>
 8002254:	4603      	mov	r3, r0
 8002256:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe ff2e 	bl	80010bc <__aeabi_fcmpgt>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <setPwm+0xec>
 8002266:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800226a:	e006      	b.n	800227a <setPwm+0xfa>
 800226c:	4b52      	ldr	r3, [pc, #328]	; (80023b8 <setPwm+0x238>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4619      	mov	r1, r3
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7fe fe1a 	bl	8000eac <__aeabi_fdiv>
 8002278:	4603      	mov	r3, r0
 800227a:	61fb      	str	r3, [r7, #28]
	float dc_b = _constrain(Ub / voltage_power_supply, 0.0f , 1.0f );
 800227c:	4b4e      	ldr	r3, [pc, #312]	; (80023b8 <setPwm+0x238>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	68b8      	ldr	r0, [r7, #8]
 8002284:	f7fe fe12 	bl	8000eac <__aeabi_fdiv>
 8002288:	4603      	mov	r3, r0
 800228a:	f04f 0100 	mov.w	r1, #0
 800228e:	4618      	mov	r0, r3
 8002290:	f7fe fef6 	bl	8001080 <__aeabi_fcmplt>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <setPwm+0x120>
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	e018      	b.n	80022d2 <setPwm+0x152>
 80022a0:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <setPwm+0x238>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4619      	mov	r1, r3
 80022a6:	68b8      	ldr	r0, [r7, #8]
 80022a8:	f7fe fe00 	bl	8000eac <__aeabi_fdiv>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe ff02 	bl	80010bc <__aeabi_fcmpgt>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <setPwm+0x144>
 80022be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80022c2:	e006      	b.n	80022d2 <setPwm+0x152>
 80022c4:	4b3c      	ldr	r3, [pc, #240]	; (80023b8 <setPwm+0x238>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4619      	mov	r1, r3
 80022ca:	68b8      	ldr	r0, [r7, #8]
 80022cc:	f7fe fdee 	bl	8000eac <__aeabi_fdiv>
 80022d0:	4603      	mov	r3, r0
 80022d2:	61bb      	str	r3, [r7, #24]
	float dc_c = _constrain(Uc / voltage_power_supply, 0.0f , 1.0f );
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <setPwm+0x238>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fde6 	bl	8000eac <__aeabi_fdiv>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f04f 0100 	mov.w	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe feca 	bl	8001080 <__aeabi_fcmplt>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <setPwm+0x178>
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e018      	b.n	800232a <setPwm+0x1aa>
 80022f8:	4b2f      	ldr	r3, [pc, #188]	; (80023b8 <setPwm+0x238>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fdd4 	bl	8000eac <__aeabi_fdiv>
 8002304:	4603      	mov	r3, r0
 8002306:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fed6 	bl	80010bc <__aeabi_fcmpgt>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <setPwm+0x19c>
 8002316:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800231a:	e006      	b.n	800232a <setPwm+0x1aa>
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <setPwm+0x238>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe fdc2 	bl	8000eac <__aeabi_fdiv>
 8002328:	4603      	mov	r3, r0
 800232a:	617b      	str	r3, [r7, #20]

	//写入PWM到PWM 0 1 2 通道
	TIM_BASE->CCR1 = (uint32_t) roundf(dc_a*period);
 800232c:	4b23      	ldr	r3, [pc, #140]	; (80023bc <setPwm+0x23c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7fe fcb3 	bl	8000c9c <__aeabi_i2f>
 8002336:	4603      	mov	r3, r0
 8002338:	69f9      	ldr	r1, [r7, #28]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fd02 	bl	8000d44 <__aeabi_fmul>
 8002340:	4603      	mov	r3, r0
 8002342:	4618      	mov	r0, r3
 8002344:	f00a fbe6 	bl	800cb14 <roundf>
 8002348:	4603      	mov	r3, r0
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fec0 	bl	80010d0 <__aeabi_f2uiz>
 8002350:	4602      	mov	r2, r0
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_BASE->CCR2 = (uint32_t) roundf(dc_b*period);
 8002356:	4b19      	ldr	r3, [pc, #100]	; (80023bc <setPwm+0x23c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fc9e 	bl	8000c9c <__aeabi_i2f>
 8002360:	4603      	mov	r3, r0
 8002362:	69b9      	ldr	r1, [r7, #24]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fced 	bl	8000d44 <__aeabi_fmul>
 800236a:	4603      	mov	r3, r0
 800236c:	4618      	mov	r0, r3
 800236e:	f00a fbd1 	bl	800cb14 <roundf>
 8002372:	4603      	mov	r3, r0
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe feab 	bl	80010d0 <__aeabi_f2uiz>
 800237a:	4602      	mov	r2, r0
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM_BASE->CCR3 = (uint32_t) roundf(dc_c*period);
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <setPwm+0x23c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fc89 	bl	8000c9c <__aeabi_i2f>
 800238a:	4603      	mov	r3, r0
 800238c:	6979      	ldr	r1, [r7, #20]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fcd8 	bl	8000d44 <__aeabi_fmul>
 8002394:	4603      	mov	r3, r0
 8002396:	4618      	mov	r0, r3
 8002398:	f00a fbbc 	bl	800cb14 <roundf>
 800239c:	4603      	mov	r3, r0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe fe96 	bl	80010d0 <__aeabi_f2uiz>
 80023a4:	4602      	mov	r2, r0
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80023aa:	bf00      	nop
 80023ac:	3720      	adds	r7, #32
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004
 80023bc:	20000008 	.word	0x20000008

080023c0 <setPhaseVoltage>:

void setPhaseVoltage(float Uq,float Ud, float angle_el, TIM_TypeDef * TIM_BASE) {
 80023c0:	b5b0      	push	{r4, r5, r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  angle_el = _normalizeAngle(angle_el + zero_electric_angle);
 80023ce:	4bc2      	ldr	r3, [pc, #776]	; (80026d8 <setPhaseVoltage+0x318>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fbad 	bl	8000b34 <__addsf3>
 80023da:	4603      	mov	r3, r0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe6f 	bl	80020c0 <_normalizeAngle>
 80023e2:	6078      	str	r0, [r7, #4]
  if (Uq <0 ){
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7fe fe49 	bl	8001080 <__aeabi_fcmplt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01e      	beq.n	8002432 <setPhaseVoltage+0x72>
	  angle_el+=M_PI;
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7fe f817 	bl	8000428 <__aeabi_f2d>
 80023fa:	a3b1      	add	r3, pc, #708	; (adr r3, 80026c0 <setPhaseVoltage+0x300>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fd feb4 	bl	800016c <__adddf3>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	4610      	mov	r0, r2
 800240a:	4619      	mov	r1, r3
 800240c:	f7fe fb3c 	bl	8000a88 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	607b      	str	r3, [r7, #4]
	  Uq=abs(Uq);
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f7fe f807 	bl	8000428 <__aeabi_f2d>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f009 fec1 	bl	800c1a8 <abs>
 8002426:	4603      	mov	r3, r0
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc37 	bl	8000c9c <__aeabi_i2f>
 800242e:	4603      	mov	r3, r0
 8002430:	60fb      	str	r3, [r7, #12]
  }
  angle_el =  _normalizeAngle (angle_el+M_PI/2);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fd fff8 	bl	8000428 <__aeabi_f2d>
 8002438:	a3a3      	add	r3, pc, #652	; (adr r3, 80026c8 <setPhaseVoltage+0x308>)
 800243a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243e:	f7fd fe95 	bl	800016c <__adddf3>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	f7fe fb1d 	bl	8000a88 <__aeabi_d2f>
 800244e:	4603      	mov	r3, r0
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fe35 	bl	80020c0 <_normalizeAngle>
 8002456:	6078      	str	r0, [r7, #4]
  int sector = floor(angle_el / M_PI*3) + 1;
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f7fd ffe5 	bl	8000428 <__aeabi_f2d>
 800245e:	a398      	add	r3, pc, #608	; (adr r3, 80026c0 <setPhaseVoltage+0x300>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe f962 	bl	800072c <__aeabi_ddiv>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	4610      	mov	r0, r2
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b99      	ldr	r3, [pc, #612]	; (80026dc <setPhaseVoltage+0x31c>)
 8002476:	f7fe f82f 	bl	80004d8 <__aeabi_dmul>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4610      	mov	r0, r2
 8002480:	4619      	mov	r1, r3
 8002482:	f00a fc21 	bl	800ccc8 <floor>
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	4b95      	ldr	r3, [pc, #596]	; (80026e0 <setPhaseVoltage+0x320>)
 800248c:	f7fd fe6e 	bl	800016c <__adddf3>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	f7fe face 	bl	8000a38 <__aeabi_d2iz>
 800249c:	4603      	mov	r3, r0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  // calculate the duty cycles
    float T1 = _SQRT3 * sin(sector * M_PI/3 - angle_el) * Uq / voltage_power_supply;
 80024a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024a2:	f7fd ffaf 	bl	8000404 <__aeabi_i2d>
 80024a6:	a386      	add	r3, pc, #536	; (adr r3, 80026c0 <setPhaseVoltage+0x300>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f814 	bl	80004d8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	4b87      	ldr	r3, [pc, #540]	; (80026dc <setPhaseVoltage+0x31c>)
 80024be:	f7fe f935 	bl	800072c <__aeabi_ddiv>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4614      	mov	r4, r2
 80024c8:	461d      	mov	r5, r3
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fd ffac 	bl	8000428 <__aeabi_f2d>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	4620      	mov	r0, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	f7fd fe46 	bl	8000168 <__aeabi_dsub>
 80024dc:	4602      	mov	r2, r0
 80024de:	460b      	mov	r3, r1
 80024e0:	4610      	mov	r0, r2
 80024e2:	4619      	mov	r1, r3
 80024e4:	f00a fba8 	bl	800cc38 <sin>
 80024e8:	a379      	add	r3, pc, #484	; (adr r3, 80026d0 <setPhaseVoltage+0x310>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fd fff3 	bl	80004d8 <__aeabi_dmul>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4614      	mov	r4, r2
 80024f8:	461d      	mov	r5, r3
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f7fd ff94 	bl	8000428 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4620      	mov	r0, r4
 8002506:	4629      	mov	r1, r5
 8002508:	f7fd ffe6 	bl	80004d8 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4614      	mov	r4, r2
 8002512:	461d      	mov	r5, r3
 8002514:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <setPhaseVoltage+0x324>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd ff85 	bl	8000428 <__aeabi_f2d>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4620      	mov	r0, r4
 8002524:	4629      	mov	r1, r5
 8002526:	f7fe f901 	bl	800072c <__aeabi_ddiv>
 800252a:	4602      	mov	r2, r0
 800252c:	460b      	mov	r3, r1
 800252e:	4610      	mov	r0, r2
 8002530:	4619      	mov	r1, r3
 8002532:	f7fe faa9 	bl	8000a88 <__aeabi_d2f>
 8002536:	4603      	mov	r3, r0
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    float T2 = _SQRT3 * sin(angle_el - (sector - 1.0) * M_PI/3) * Uq / voltage_power_supply;
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f7fd ff74 	bl	8000428 <__aeabi_f2d>
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002546:	f7fd ff5d 	bl	8000404 <__aeabi_i2d>
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	4b64      	ldr	r3, [pc, #400]	; (80026e0 <setPhaseVoltage+0x320>)
 8002550:	f7fd fe0a 	bl	8000168 <__aeabi_dsub>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	a358      	add	r3, pc, #352	; (adr r3, 80026c0 <setPhaseVoltage+0x300>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fd ffb9 	bl	80004d8 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b5a      	ldr	r3, [pc, #360]	; (80026dc <setPhaseVoltage+0x31c>)
 8002574:	f7fe f8da 	bl	800072c <__aeabi_ddiv>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4620      	mov	r0, r4
 800257e:	4629      	mov	r1, r5
 8002580:	f7fd fdf2 	bl	8000168 <__aeabi_dsub>
 8002584:	4602      	mov	r2, r0
 8002586:	460b      	mov	r3, r1
 8002588:	4610      	mov	r0, r2
 800258a:	4619      	mov	r1, r3
 800258c:	f00a fb54 	bl	800cc38 <sin>
 8002590:	a34f      	add	r3, pc, #316	; (adr r3, 80026d0 <setPhaseVoltage+0x310>)
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f7fd ff9f 	bl	80004d8 <__aeabi_dmul>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4614      	mov	r4, r2
 80025a0:	461d      	mov	r5, r3
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7fd ff40 	bl	8000428 <__aeabi_f2d>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4620      	mov	r0, r4
 80025ae:	4629      	mov	r1, r5
 80025b0:	f7fd ff92 	bl	80004d8 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4614      	mov	r4, r2
 80025ba:	461d      	mov	r5, r3
 80025bc:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <setPhaseVoltage+0x324>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff31 	bl	8000428 <__aeabi_f2d>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4620      	mov	r0, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	f7fe f8ad 	bl	800072c <__aeabi_ddiv>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	f7fe fa55 	bl	8000a88 <__aeabi_d2f>
 80025de:	4603      	mov	r3, r0
 80025e0:	623b      	str	r3, [r7, #32]
    float T0 = 1 - T1 - T2;
 80025e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025e4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80025e8:	f7fe faa2 	bl	8000b30 <__aeabi_fsub>
 80025ec:	4603      	mov	r3, r0
 80025ee:	6a39      	ldr	r1, [r7, #32]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fa9d 	bl	8000b30 <__aeabi_fsub>
 80025f6:	4603      	mov	r3, r0
 80025f8:	61fb      	str	r3, [r7, #28]


    float Ta, Tb, Tc;
      switch (sector)
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	3b01      	subs	r3, #1
 80025fe:	2b05      	cmp	r3, #5
 8002600:	f200 810a 	bhi.w	8002818 <setPhaseVoltage+0x458>
 8002604:	a201      	add	r2, pc, #4	; (adr r2, 800260c <setPhaseVoltage+0x24c>)
 8002606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260a:	bf00      	nop
 800260c:	08002625 	.word	0x08002625
 8002610:	08002671 	.word	0x08002671
 8002614:	080026e9 	.word	0x080026e9
 8002618:	08002735 	.word	0x08002735
 800261c:	08002781 	.word	0x08002781
 8002620:	080027cd 	.word	0x080027cd
      {
      case 1:
        Ta = T1 + T2 + T0 / 2;
 8002624:	6a39      	ldr	r1, [r7, #32]
 8002626:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002628:	f7fe fa84 	bl	8000b34 <__addsf3>
 800262c:	4603      	mov	r3, r0
 800262e:	461c      	mov	r4, r3
 8002630:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002634:	69f8      	ldr	r0, [r7, #28]
 8002636:	f7fe fc39 	bl	8000eac <__aeabi_fdiv>
 800263a:	4603      	mov	r3, r0
 800263c:	4619      	mov	r1, r3
 800263e:	4620      	mov	r0, r4
 8002640:	f7fe fa78 	bl	8000b34 <__addsf3>
 8002644:	4603      	mov	r3, r0
 8002646:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = T2 + T0 / 2;
 8002648:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800264c:	69f8      	ldr	r0, [r7, #28]
 800264e:	f7fe fc2d 	bl	8000eac <__aeabi_fdiv>
 8002652:	4603      	mov	r3, r0
 8002654:	4619      	mov	r1, r3
 8002656:	6a38      	ldr	r0, [r7, #32]
 8002658:	f7fe fa6c 	bl	8000b34 <__addsf3>
 800265c:	4603      	mov	r3, r0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = T0 / 2;
 8002660:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002664:	69f8      	ldr	r0, [r7, #28]
 8002666:	f7fe fc21 	bl	8000eac <__aeabi_fdiv>
 800266a:	4603      	mov	r3, r0
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800266e:	e0dc      	b.n	800282a <setPhaseVoltage+0x46a>
      case 2:
        Ta = T1 + T0 / 2;
 8002670:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002674:	69f8      	ldr	r0, [r7, #28]
 8002676:	f7fe fc19 	bl	8000eac <__aeabi_fdiv>
 800267a:	4603      	mov	r3, r0
 800267c:	4619      	mov	r1, r3
 800267e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002680:	f7fe fa58 	bl	8000b34 <__addsf3>
 8002684:	4603      	mov	r3, r0
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = T1 + T2 + T0 / 2;
 8002688:	6a39      	ldr	r1, [r7, #32]
 800268a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800268c:	f7fe fa52 	bl	8000b34 <__addsf3>
 8002690:	4603      	mov	r3, r0
 8002692:	461c      	mov	r4, r3
 8002694:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002698:	69f8      	ldr	r0, [r7, #28]
 800269a:	f7fe fc07 	bl	8000eac <__aeabi_fdiv>
 800269e:	4603      	mov	r3, r0
 80026a0:	4619      	mov	r1, r3
 80026a2:	4620      	mov	r0, r4
 80026a4:	f7fe fa46 	bl	8000b34 <__addsf3>
 80026a8:	4603      	mov	r3, r0
 80026aa:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = T0 / 2;
 80026ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026b0:	69f8      	ldr	r0, [r7, #28]
 80026b2:	f7fe fbfb 	bl	8000eac <__aeabi_fdiv>
 80026b6:	4603      	mov	r3, r0
 80026b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026ba:	e0b6      	b.n	800282a <setPhaseVoltage+0x46a>
 80026bc:	f3af 8000 	nop.w
 80026c0:	54442d18 	.word	0x54442d18
 80026c4:	400921fb 	.word	0x400921fb
 80026c8:	54442d18 	.word	0x54442d18
 80026cc:	3ff921fb 	.word	0x3ff921fb
 80026d0:	e0000000 	.word	0xe0000000
 80026d4:	3ffbb67a 	.word	0x3ffbb67a
 80026d8:	200003a8 	.word	0x200003a8
 80026dc:	40080000 	.word	0x40080000
 80026e0:	3ff00000 	.word	0x3ff00000
 80026e4:	20000004 	.word	0x20000004
      case 3:
        Ta = T0 / 2;
 80026e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026ec:	69f8      	ldr	r0, [r7, #28]
 80026ee:	f7fe fbdd 	bl	8000eac <__aeabi_fdiv>
 80026f2:	4603      	mov	r3, r0
 80026f4:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = T1 + T2 + T0 / 2;
 80026f6:	6a39      	ldr	r1, [r7, #32]
 80026f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026fa:	f7fe fa1b 	bl	8000b34 <__addsf3>
 80026fe:	4603      	mov	r3, r0
 8002700:	461c      	mov	r4, r3
 8002702:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002706:	69f8      	ldr	r0, [r7, #28]
 8002708:	f7fe fbd0 	bl	8000eac <__aeabi_fdiv>
 800270c:	4603      	mov	r3, r0
 800270e:	4619      	mov	r1, r3
 8002710:	4620      	mov	r0, r4
 8002712:	f7fe fa0f 	bl	8000b34 <__addsf3>
 8002716:	4603      	mov	r3, r0
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = T2 + T0 / 2;
 800271a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800271e:	69f8      	ldr	r0, [r7, #28]
 8002720:	f7fe fbc4 	bl	8000eac <__aeabi_fdiv>
 8002724:	4603      	mov	r3, r0
 8002726:	4619      	mov	r1, r3
 8002728:	6a38      	ldr	r0, [r7, #32]
 800272a:	f7fe fa03 	bl	8000b34 <__addsf3>
 800272e:	4603      	mov	r3, r0
 8002730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002732:	e07a      	b.n	800282a <setPhaseVoltage+0x46a>
      case 4:
        Ta = T0 / 2;
 8002734:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002738:	69f8      	ldr	r0, [r7, #28]
 800273a:	f7fe fbb7 	bl	8000eac <__aeabi_fdiv>
 800273e:	4603      	mov	r3, r0
 8002740:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = T1 + T0 / 2;
 8002742:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002746:	69f8      	ldr	r0, [r7, #28]
 8002748:	f7fe fbb0 	bl	8000eac <__aeabi_fdiv>
 800274c:	4603      	mov	r3, r0
 800274e:	4619      	mov	r1, r3
 8002750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002752:	f7fe f9ef 	bl	8000b34 <__addsf3>
 8002756:	4603      	mov	r3, r0
 8002758:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = T1 + T2 + T0 / 2;
 800275a:	6a39      	ldr	r1, [r7, #32]
 800275c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800275e:	f7fe f9e9 	bl	8000b34 <__addsf3>
 8002762:	4603      	mov	r3, r0
 8002764:	461c      	mov	r4, r3
 8002766:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800276a:	69f8      	ldr	r0, [r7, #28]
 800276c:	f7fe fb9e 	bl	8000eac <__aeabi_fdiv>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	4620      	mov	r0, r4
 8002776:	f7fe f9dd 	bl	8000b34 <__addsf3>
 800277a:	4603      	mov	r3, r0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800277e:	e054      	b.n	800282a <setPhaseVoltage+0x46a>
      case 5:
        Ta = T2 + T0 / 2;
 8002780:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002784:	69f8      	ldr	r0, [r7, #28]
 8002786:	f7fe fb91 	bl	8000eac <__aeabi_fdiv>
 800278a:	4603      	mov	r3, r0
 800278c:	4619      	mov	r1, r3
 800278e:	6a38      	ldr	r0, [r7, #32]
 8002790:	f7fe f9d0 	bl	8000b34 <__addsf3>
 8002794:	4603      	mov	r3, r0
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = T0 / 2;
 8002798:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800279c:	69f8      	ldr	r0, [r7, #28]
 800279e:	f7fe fb85 	bl	8000eac <__aeabi_fdiv>
 80027a2:	4603      	mov	r3, r0
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = T1 + T2 + T0 / 2;
 80027a6:	6a39      	ldr	r1, [r7, #32]
 80027a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027aa:	f7fe f9c3 	bl	8000b34 <__addsf3>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461c      	mov	r4, r3
 80027b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027b6:	69f8      	ldr	r0, [r7, #28]
 80027b8:	f7fe fb78 	bl	8000eac <__aeabi_fdiv>
 80027bc:	4603      	mov	r3, r0
 80027be:	4619      	mov	r1, r3
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7fe f9b7 	bl	8000b34 <__addsf3>
 80027c6:	4603      	mov	r3, r0
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027ca:	e02e      	b.n	800282a <setPhaseVoltage+0x46a>
      case 6:
        Ta = T1 + T2 + T0 / 2;
 80027cc:	6a39      	ldr	r1, [r7, #32]
 80027ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027d0:	f7fe f9b0 	bl	8000b34 <__addsf3>
 80027d4:	4603      	mov	r3, r0
 80027d6:	461c      	mov	r4, r3
 80027d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027dc:	69f8      	ldr	r0, [r7, #28]
 80027de:	f7fe fb65 	bl	8000eac <__aeabi_fdiv>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4619      	mov	r1, r3
 80027e6:	4620      	mov	r0, r4
 80027e8:	f7fe f9a4 	bl	8000b34 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = T0 / 2;
 80027f0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027f4:	69f8      	ldr	r0, [r7, #28]
 80027f6:	f7fe fb59 	bl	8000eac <__aeabi_fdiv>
 80027fa:	4603      	mov	r3, r0
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = T1 + T0 / 2;
 80027fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002802:	69f8      	ldr	r0, [r7, #28]
 8002804:	f7fe fb52 	bl	8000eac <__aeabi_fdiv>
 8002808:	4603      	mov	r3, r0
 800280a:	4619      	mov	r1, r3
 800280c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800280e:	f7fe f991 	bl	8000b34 <__addsf3>
 8002812:	4603      	mov	r3, r0
 8002814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002816:	e008      	b.n	800282a <setPhaseVoltage+0x46a>
      default:
        Ta = 0;
 8002818:	f04f 0300 	mov.w	r3, #0
 800281c:	637b      	str	r3, [r7, #52]	; 0x34
        Tb = 0;
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
        Tc = 0;
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
  // 克拉克逆变换
      float Ua = Ta * voltage_power_supply;
 800282a:	4b11      	ldr	r3, [pc, #68]	; (8002870 <setPhaseVoltage+0x4b0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002832:	f7fe fa87 	bl	8000d44 <__aeabi_fmul>
 8002836:	4603      	mov	r3, r0
 8002838:	61bb      	str	r3, [r7, #24]
       float Ub = Tb * voltage_power_supply;
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <setPhaseVoltage+0x4b0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4619      	mov	r1, r3
 8002840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002842:	f7fe fa7f 	bl	8000d44 <__aeabi_fmul>
 8002846:	4603      	mov	r3, r0
 8002848:	617b      	str	r3, [r7, #20]
       float Uc = Tc * voltage_power_supply;
 800284a:	4b09      	ldr	r3, [pc, #36]	; (8002870 <setPhaseVoltage+0x4b0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4619      	mov	r1, r3
 8002850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002852:	f7fe fa77 	bl	8000d44 <__aeabi_fmul>
 8002856:	4603      	mov	r3, r0
 8002858:	613b      	str	r3, [r7, #16]
  setPwm(Ua,Ub,Uc,TIM_BASE);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	6979      	ldr	r1, [r7, #20]
 8002860:	69b8      	ldr	r0, [r7, #24]
 8002862:	f7ff fc8d 	bl	8002180 <setPwm>
}
 8002866:	bf00      	nop
 8002868:	3738      	adds	r7, #56	; 0x38
 800286a:	46bd      	mov	sp, r7
 800286c:	bdb0      	pop	{r4, r5, r7, pc}
 800286e:	bf00      	nop
 8002870:	20000004 	.word	0x20000004

08002874 <PID_operator>:
 *      Author: hht
 */

#include "pid.h"
#include "motor_control.h"
float PID_operator(float error, struct PIDController* pid){
 8002874:	b5b0      	push	{r4, r5, r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
	float Ts = 5E-3f;
 800287e:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <PID_operator+0x1c8>)
 8002880:	61bb      	str	r3, [r7, #24]
	// P环

	float proportional = pid->P * error;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7fe fa5b 	bl	8000d44 <__aeabi_fmul>
 800288e:	4603      	mov	r3, r0
 8002890:	617b      	str	r3, [r7, #20]
	// Tustin 散点积分（I环）
	float integral = pid->integral_prev + pid->I*Ts*0.5f*(error + pid->error_prev);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	69dc      	ldr	r4, [r3, #28]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	69b9      	ldr	r1, [r7, #24]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fa51 	bl	8000d44 <__aeabi_fmul>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fe fa4b 	bl	8000d44 <__aeabi_fmul>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461d      	mov	r5, r3
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe f93b 	bl	8000b34 <__addsf3>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4628      	mov	r0, r5
 80028c4:	f7fe fa3e 	bl	8000d44 <__aeabi_fmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4619      	mov	r1, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7fe f931 	bl	8000b34 <__addsf3>
 80028d2:	4603      	mov	r3, r0
 80028d4:	613b      	str	r3, [r7, #16]
	integral = _constrain(integral, -pid->limit, pid->limit);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	691b      	ldr	r3, [r3, #16]
 80028da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028de:	4619      	mov	r1, r3
 80028e0:	6938      	ldr	r0, [r7, #16]
 80028e2:	f7fe fbcd 	bl	8001080 <__aeabi_fcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <PID_operator+0x82>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80028f4:	e00c      	b.n	8002910 <PID_operator+0x9c>
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	4619      	mov	r1, r3
 80028fc:	6938      	ldr	r0, [r7, #16]
 80028fe:	f7fe fbdd 	bl	80010bc <__aeabi_fcmpgt>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <PID_operator+0x9a>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	e000      	b.n	8002910 <PID_operator+0x9c>
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	613b      	str	r3, [r7, #16]
	// D环（微分环节）
	float derivative = pid->D*(error - pid->error_prev)/Ts;
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	689c      	ldr	r4, [r3, #8]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	4619      	mov	r1, r3
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe f907 	bl	8000b30 <__aeabi_fsub>
 8002922:	4603      	mov	r3, r0
 8002924:	4619      	mov	r1, r3
 8002926:	4620      	mov	r0, r4
 8002928:	f7fe fa0c 	bl	8000d44 <__aeabi_fmul>
 800292c:	4603      	mov	r3, r0
 800292e:	69b9      	ldr	r1, [r7, #24]
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe fabb 	bl	8000eac <__aeabi_fdiv>
 8002936:	4603      	mov	r3, r0
 8002938:	60fb      	str	r3, [r7, #12]

	// 将P,I,D三环的计算值加起来
	float output = proportional + integral + derivative;
 800293a:	6939      	ldr	r1, [r7, #16]
 800293c:	6978      	ldr	r0, [r7, #20]
 800293e:	f7fe f8f9 	bl	8000b34 <__addsf3>
 8002942:	4603      	mov	r3, r0
 8002944:	4619      	mov	r1, r3
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f7fe f8f4 	bl	8000b34 <__addsf3>
 800294c:	4603      	mov	r3, r0
 800294e:	61fb      	str	r3, [r7, #28]
	output = _constrain(output, -pid->limit, pid->limit);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8002958:	4619      	mov	r1, r3
 800295a:	69f8      	ldr	r0, [r7, #28]
 800295c:	f7fe fb90 	bl	8001080 <__aeabi_fcmplt>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d004      	beq.n	8002970 <PID_operator+0xfc>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800296e:	e00c      	b.n	800298a <PID_operator+0x116>
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	4619      	mov	r1, r3
 8002976:	69f8      	ldr	r0, [r7, #28]
 8002978:	f7fe fba0 	bl	80010bc <__aeabi_fcmpgt>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <PID_operator+0x114>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	e000      	b.n	800298a <PID_operator+0x116>
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	61fb      	str	r3, [r7, #28]

	if(pid->output_ramp > 0){
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f04f 0100 	mov.w	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f7fe fb91 	bl	80010bc <__aeabi_fcmpgt>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d03f      	beq.n	8002a20 <PID_operator+0x1ac>
		// 对PID的变化速率进行限制
		float output_rate = (output - pid->output_prev)/Ts;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	4619      	mov	r1, r3
 80029a6:	69f8      	ldr	r0, [r7, #28]
 80029a8:	f7fe f8c2 	bl	8000b30 <__aeabi_fsub>
 80029ac:	4603      	mov	r3, r0
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe fa7b 	bl	8000eac <__aeabi_fdiv>
 80029b6:	4603      	mov	r3, r0
 80029b8:	60bb      	str	r3, [r7, #8]
		if (output_rate > pid->output_ramp)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4619      	mov	r1, r3
 80029c0:	68b8      	ldr	r0, [r7, #8]
 80029c2:	f7fe fb7b 	bl	80010bc <__aeabi_fcmpgt>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00f      	beq.n	80029ec <PID_operator+0x178>
			output = pid->output_prev + pid->output_ramp*Ts;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	699c      	ldr	r4, [r3, #24]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f9b4 	bl	8000d44 <__aeabi_fmul>
 80029dc:	4603      	mov	r3, r0
 80029de:	4619      	mov	r1, r3
 80029e0:	4620      	mov	r0, r4
 80029e2:	f7fe f8a7 	bl	8000b34 <__addsf3>
 80029e6:	4603      	mov	r3, r0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e019      	b.n	8002a20 <PID_operator+0x1ac>
		else if (output_rate < -pid->output_ramp)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80029f4:	4619      	mov	r1, r3
 80029f6:	68b8      	ldr	r0, [r7, #8]
 80029f8:	f7fe fb42 	bl	8001080 <__aeabi_fcmplt>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <PID_operator+0x1ac>
			output = pid->output_prev - pid->output_ramp*Ts;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	699c      	ldr	r4, [r3, #24]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	69b9      	ldr	r1, [r7, #24]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe f999 	bl	8000d44 <__aeabi_fmul>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4619      	mov	r1, r3
 8002a16:	4620      	mov	r0, r4
 8002a18:	f7fe f88a 	bl	8000b30 <__aeabi_fsub>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	61fb      	str	r3, [r7, #28]
	}
	// 保存值（为了下一次循环）
	pid->integral_prev = integral;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	61da      	str	r2, [r3, #28]
	pid->output_prev = output;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	619a      	str	r2, [r3, #24]
	pid->error_prev = error;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	615a      	str	r2, [r3, #20]
//	pid->timestamp_prev = timestamp_now;
	return output;
 8002a32:	69fb      	ldr	r3, [r7, #28]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3720      	adds	r7, #32
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002a3c:	3ba3d70a 	.word	0x3ba3d70a

08002a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a46:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_MspInit+0x40>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_MspInit+0x40>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	6193      	str	r3, [r2, #24]
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_MspInit+0x40>)
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a5e:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <HAL_MspInit+0x40>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <HAL_MspInit+0x40>)
 8002a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a68:	61d3      	str	r3, [r2, #28]
 8002a6a:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <HAL_MspInit+0x40>)
 8002a6c:	69db      	ldr	r3, [r3, #28]
 8002a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a72:	603b      	str	r3, [r7, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000

08002a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0310 	add.w	r3, r7, #16
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a14      	ldr	r2, [pc, #80]	; (8002af0 <HAL_ADC_MspInit+0x6c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d121      	bne.n	8002ae8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_ADC_MspInit+0x70>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	4a12      	ldr	r2, [pc, #72]	; (8002af4 <HAL_ADC_MspInit+0x70>)
 8002aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aae:	6193      	str	r3, [r2, #24]
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_ADC_MspInit+0x70>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_ADC_MspInit+0x70>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a0c      	ldr	r2, [pc, #48]	; (8002af4 <HAL_ADC_MspInit+0x70>)
 8002ac2:	f043 0304 	orr.w	r3, r3, #4
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_ADC_MspInit+0x70>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002ad4:	2307      	movs	r3, #7
 8002ad6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_ADC_MspInit+0x74>)
 8002ae4:	f000 ff4a 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40012400 	.word	0x40012400
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40010800 	.word	0x40010800

08002afc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b088      	sub	sp, #32
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0310 	add.w	r3, r7, #16
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <HAL_SPI_MspInit+0x88>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d12f      	bne.n	8002b7c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b1c:	4b1a      	ldr	r3, [pc, #104]	; (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a19      	ldr	r2, [pc, #100]	; (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	4a13      	ldr	r2, [pc, #76]	; (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6193      	str	r3, [r2, #24]
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_SPI_MspInit+0x8c>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002b4c:	23a0      	movs	r3, #160	; 0xa0
 8002b4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b50:	2302      	movs	r3, #2
 8002b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b54:	2303      	movs	r3, #3
 8002b56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	480b      	ldr	r0, [pc, #44]	; (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b60:	f000 ff0c 	bl	800397c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b64:	2340      	movs	r3, #64	; 0x40
 8002b66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b70:	f107 0310 	add.w	r3, r7, #16
 8002b74:	4619      	mov	r1, r3
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <HAL_SPI_MspInit+0x90>)
 8002b78:	f000 ff00 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b7c:	bf00      	nop
 8002b7e:	3720      	adds	r7, #32
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40013000 	.word	0x40013000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	40010800 	.word	0x40010800

08002b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a16      	ldr	r2, [pc, #88]	; (8002bf8 <HAL_TIM_Base_MspInit+0x68>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10c      	bne.n	8002bbc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_TIM_Base_MspInit+0x6c>)
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	4a15      	ldr	r2, [pc, #84]	; (8002bfc <HAL_TIM_Base_MspInit+0x6c>)
 8002ba8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bac:	6193      	str	r3, [r2, #24]
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_TIM_Base_MspInit+0x6c>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002bba:	e018      	b.n	8002bee <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc4:	d113      	bne.n	8002bee <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002bc6:	4b0d      	ldr	r3, [pc, #52]	; (8002bfc <HAL_TIM_Base_MspInit+0x6c>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <HAL_TIM_Base_MspInit+0x6c>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	61d3      	str	r3, [r2, #28]
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_TIM_Base_MspInit+0x6c>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bde:	2200      	movs	r2, #0
 8002be0:	2100      	movs	r1, #0
 8002be2:	201c      	movs	r0, #28
 8002be4:	f000 fe93 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002be8:	201c      	movs	r0, #28
 8002bea:	f000 feac 	bl	8003946 <HAL_NVIC_EnableIRQ>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40012c00 	.word	0x40012c00
 8002bfc:	40021000 	.word	0x40021000

08002c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a10      	ldr	r2, [pc, #64]	; (8002c5c <HAL_TIM_MspPostInit+0x5c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d118      	bne.n	8002c52 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_TIM_MspPostInit+0x60>)
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4a0e      	ldr	r2, [pc, #56]	; (8002c60 <HAL_TIM_MspPostInit+0x60>)
 8002c26:	f043 0304 	orr.w	r3, r3, #4
 8002c2a:	6193      	str	r3, [r2, #24]
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_TIM_MspPostInit+0x60>)
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2302      	movs	r3, #2
 8002c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0310 	add.w	r3, r7, #16
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	; (8002c64 <HAL_TIM_MspPostInit+0x64>)
 8002c4e:	f000 fe95 	bl	800397c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40010800 	.word	0x40010800

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c6c:	e7fe      	b.n	8002c6c <NMI_Handler+0x4>

08002c6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c72:	e7fe      	b.n	8002c72 <HardFault_Handler+0x4>

08002c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c78:	e7fe      	b.n	8002c78 <MemManage_Handler+0x4>

08002c7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c7e:	e7fe      	b.n	8002c7e <BusFault_Handler+0x4>

08002c80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c84:	e7fe      	b.n	8002c84 <UsageFault_Handler+0x4>

08002c86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c86:	b480      	push	{r7}
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c92:	b480      	push	{r7}
 8002c94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c96:	bf00      	nop
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr

08002c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr

08002caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cae:	f000 f8bf 	bl	8002e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002cbc:	4802      	ldr	r0, [pc, #8]	; (8002cc8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002cbe:	f001 f937 	bl	8003f30 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200010a8 	.word	0x200010a8

08002ccc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cd0:	4802      	ldr	r0, [pc, #8]	; (8002cdc <TIM2_IRQHandler+0x10>)
 8002cd2:	f004 f8a5 	bl	8006e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	2000032c 	.word	0x2000032c

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f009 fa76 	bl	800c200 <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20005000 	.word	0x20005000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	200003d8 	.word	0x200003d8
 8002d48:	20001700 	.word	0x20001700

08002d4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d58:	f7ff fff8 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d5c:	480b      	ldr	r0, [pc, #44]	; (8002d8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d5e:	490c      	ldr	r1, [pc, #48]	; (8002d90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d60:	4a0c      	ldr	r2, [pc, #48]	; (8002d94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d64:	e002      	b.n	8002d6c <LoopCopyDataInit>

08002d66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d6a:	3304      	adds	r3, #4

08002d6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d70:	d3f9      	bcc.n	8002d66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d72:	4a09      	ldr	r2, [pc, #36]	; (8002d98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d74:	4c09      	ldr	r4, [pc, #36]	; (8002d9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d78:	e001      	b.n	8002d7e <LoopFillZerobss>

08002d7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d7c:	3204      	adds	r2, #4

08002d7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d80:	d3fb      	bcc.n	8002d7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d82:	f009 fa43 	bl	800c20c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d86:	f7fe fccb 	bl	8001720 <main>
  bx lr
 8002d8a:	4770      	bx	lr
  ldr r0, =_sdata
 8002d8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d90:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8002d94:	0800e138 	.word	0x0800e138
  ldr r2, =_sbss
 8002d98:	20000240 	.word	0x20000240
  ldr r4, =_ebss
 8002d9c:	20001700 	.word	0x20001700

08002da0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002da0:	e7fe      	b.n	8002da0 <ADC1_2_IRQHandler>
	...

08002da4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002da8:	4b08      	ldr	r3, [pc, #32]	; (8002dcc <HAL_Init+0x28>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a07      	ldr	r2, [pc, #28]	; (8002dcc <HAL_Init+0x28>)
 8002dae:	f043 0310 	orr.w	r3, r3, #16
 8002db2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 fd9f 	bl	80038f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dba:	200f      	movs	r0, #15
 8002dbc:	f000 f808 	bl	8002dd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dc0:	f7ff fe3e 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40022000 	.word	0x40022000

08002dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <HAL_InitTick+0x54>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_InitTick+0x58>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 fdb7 	bl	8003962 <HAL_SYSTICK_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00e      	b.n	8002e1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b0f      	cmp	r3, #15
 8002e02:	d80a      	bhi.n	8002e1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e04:	2200      	movs	r2, #0
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e0c:	f000 fd7f 	bl	800390e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e10:	4a06      	ldr	r2, [pc, #24]	; (8002e2c <HAL_InitTick+0x5c>)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
 8002e18:	e000      	b.n	8002e1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	20000070 	.word	0x20000070
 8002e28:	20000078 	.word	0x20000078
 8002e2c:	20000074 	.word	0x20000074

08002e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <HAL_IncTick+0x1c>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_IncTick+0x20>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4413      	add	r3, r2
 8002e40:	4a03      	ldr	r2, [pc, #12]	; (8002e50 <HAL_IncTick+0x20>)
 8002e42:	6013      	str	r3, [r2, #0]
}
 8002e44:	bf00      	nop
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	20000078 	.word	0x20000078
 8002e50:	200003dc 	.word	0x200003dc

08002e54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return uwTick;
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_GetTick+0x10>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	200003dc 	.word	0x200003dc

08002e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e70:	f7ff fff0 	bl	8002e54 <HAL_GetTick>
 8002e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e80:	d005      	beq.n	8002e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_Delay+0x44>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e8e:	bf00      	nop
 8002e90:	f7ff ffe0 	bl	8002e54 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d8f7      	bhi.n	8002e90 <HAL_Delay+0x28>
  {
  }
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000078 	.word	0x20000078

08002eb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0be      	b.n	8003050 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fdc8 	bl	8002a84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fbf1 	bl	80036dc <ADC_ConversionStop_Disable>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8099 	bne.w	800303e <HAL_ADC_Init+0x18e>
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8095 	bne.w	800303e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f1c:	f023 0302 	bic.w	r3, r3, #2
 8002f20:	f043 0202 	orr.w	r2, r3, #2
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f30:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7b1b      	ldrb	r3, [r3, #12]
 8002f36:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f38:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f48:	d003      	beq.n	8002f52 <HAL_ADC_Init+0xa2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d102      	bne.n	8002f58 <HAL_ADC_Init+0xa8>
 8002f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f56:	e000      	b.n	8002f5a <HAL_ADC_Init+0xaa>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7d1b      	ldrb	r3, [r3, #20]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d119      	bne.n	8002f9c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	7b1b      	ldrb	r3, [r3, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d109      	bne.n	8002f84 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	035a      	lsls	r2, r3, #13
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e00b      	b.n	8002f9c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	f043 0220 	orr.w	r2, r3, #32
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f94:	f043 0201 	orr.w	r2, r3, #1
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_ADC_Init+0x1a8>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fcc:	d003      	beq.n	8002fd6 <HAL_ADC_Init+0x126>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d104      	bne.n	8002fe0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	051b      	lsls	r3, r3, #20
 8002fde:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_ADC_Init+0x1ac>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d10b      	bne.n	800301c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f023 0303 	bic.w	r3, r3, #3
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800301a:	e018      	b.n	800304e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	f023 0312 	bic.w	r3, r3, #18
 8003024:	f043 0210 	orr.w	r2, r3, #16
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003030:	f043 0201 	orr.w	r2, r3, #1
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800303c:	e007      	b.n	800304e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	f043 0210 	orr.w	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800304e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3718      	adds	r7, #24
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	ffe1f7fd 	.word	0xffe1f7fd
 800305c:	ff1f0efe 	.word	0xff1f0efe

08003060 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_ADC_Start+0x1a>
 8003076:	2302      	movs	r3, #2
 8003078:	e098      	b.n	80031ac <HAL_ADC_Start+0x14c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fad0 	bl	8003628 <ADC_Enable>
 8003088:	4603      	mov	r3, r0
 800308a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8087 	bne.w	80031a2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800309c:	f023 0301 	bic.w	r3, r3, #1
 80030a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <HAL_ADC_Start+0x154>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d105      	bne.n	80030be <HAL_ADC_Start+0x5e>
 80030b2:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <HAL_ADC_Start+0x158>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d115      	bne.n	80030ea <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d026      	beq.n	8003126 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030e8:	e01d      	b.n	8003126 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a2f      	ldr	r2, [pc, #188]	; (80031b8 <HAL_ADC_Start+0x158>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_ADC_Start+0xaa>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2b      	ldr	r2, [pc, #172]	; (80031b4 <HAL_ADC_Start+0x154>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <HAL_ADC_Start+0xc6>
 800310a:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <HAL_ADC_Start+0x158>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800311e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d006      	beq.n	8003140 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	f023 0206 	bic.w	r2, r3, #6
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	62da      	str	r2, [r3, #44]	; 0x2c
 800313e:	e002      	b.n	8003146 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0202 	mvn.w	r2, #2
 8003156:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003162:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003166:	d113      	bne.n	8003190 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_ADC_Start+0x154>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d105      	bne.n	800317e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_ADC_Start+0x158>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800317a:	2b00      	cmp	r3, #0
 800317c:	d108      	bne.n	8003190 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800318c:	609a      	str	r2, [r3, #8]
 800318e:	e00c      	b.n	80031aa <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	e003      	b.n	80031aa <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40012800 	.word	0x40012800
 80031b8:	40012400 	.word	0x40012400

080031bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_ADC_Stop+0x1a>
 80031d2:	2302      	movs	r3, #2
 80031d4:	e01a      	b.n	800320c <HAL_ADC_Stop+0x50>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa7c 	bl	80036dc <ADC_ConversionStop_Disable>
 80031e4:	4603      	mov	r3, r0
 80031e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	f043 0201 	orr.w	r2, r3, #1
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800320a:	7bfb      	ldrb	r3, [r7, #15]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800322a:	f7ff fe13 	bl	8002e54 <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0d3      	b.n	80033fe <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d131      	bne.n	80032c8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d12a      	bne.n	80032c8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003272:	e021      	b.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800327a:	d01d      	beq.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_ADC_PollForConversion+0x7e>
 8003282:	f7ff fde7 	bl	8002e54 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	683a      	ldr	r2, [r7, #0]
 800328e:	429a      	cmp	r2, r3
 8003290:	d212      	bcs.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a4:	f043 0204 	orr.w	r2, r3, #4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e0a2      	b.n	80033fe <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d0d6      	beq.n	8003274 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80032c6:	e070      	b.n	80033aa <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_ADC_PollForConversion+0x1f4>)
 80032ca:	681c      	ldr	r4, [r3, #0]
 80032cc:	2002      	movs	r0, #2
 80032ce:	f002 ff2b 	bl	8006128 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d2:	4603      	mov	r3, r0
 80032d4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_ADC_PollForConversion+0x1f8>)
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_ADC_PollForConversion+0x104>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68d9      	ldr	r1, [r3, #12]
 80032ec:	4b48      	ldr	r3, [pc, #288]	; (8003410 <HAL_ADC_PollForConversion+0x1fc>)
 80032ee:	400b      	ands	r3, r1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d111      	bne.n	8003318 <HAL_ADC_PollForConversion+0x104>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_ADC_PollForConversion+0x200>)
 80032fc:	400b      	ands	r3, r1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d108      	bne.n	8003314 <HAL_ADC_PollForConversion+0x100>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68d9      	ldr	r1, [r3, #12]
 8003308:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_ADC_PollForConversion+0x204>)
 800330a:	400b      	ands	r3, r1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <HAL_ADC_PollForConversion+0x100>
 8003310:	2314      	movs	r3, #20
 8003312:	e020      	b.n	8003356 <HAL_ADC_PollForConversion+0x142>
 8003314:	2329      	movs	r3, #41	; 0x29
 8003316:	e01e      	b.n	8003356 <HAL_ADC_PollForConversion+0x142>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6919      	ldr	r1, [r3, #16]
 800331e:	4b3d      	ldr	r3, [pc, #244]	; (8003414 <HAL_ADC_PollForConversion+0x200>)
 8003320:	400b      	ands	r3, r1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d106      	bne.n	8003334 <HAL_ADC_PollForConversion+0x120>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68d9      	ldr	r1, [r3, #12]
 800332c:	4b3a      	ldr	r3, [pc, #232]	; (8003418 <HAL_ADC_PollForConversion+0x204>)
 800332e:	400b      	ands	r3, r1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_ADC_PollForConversion+0x13c>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6919      	ldr	r1, [r3, #16]
 800333a:	4b38      	ldr	r3, [pc, #224]	; (800341c <HAL_ADC_PollForConversion+0x208>)
 800333c:	400b      	ands	r3, r1
 800333e:	2b00      	cmp	r3, #0
 8003340:	d108      	bne.n	8003354 <HAL_ADC_PollForConversion+0x140>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68d9      	ldr	r1, [r3, #12]
 8003348:	4b34      	ldr	r3, [pc, #208]	; (800341c <HAL_ADC_PollForConversion+0x208>)
 800334a:	400b      	ands	r3, r1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_ADC_PollForConversion+0x140>
 8003350:	2354      	movs	r3, #84	; 0x54
 8003352:	e000      	b.n	8003356 <HAL_ADC_PollForConversion+0x142>
 8003354:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800335c:	e021      	b.n	80033a2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003364:	d01a      	beq.n	800339c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_ADC_PollForConversion+0x168>
 800336c:	f7ff fd72 	bl	8002e54 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d20f      	bcs.n	800339c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d90b      	bls.n	800339c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003388:	f043 0204 	orr.w	r2, r3, #4
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e030      	b.n	80033fe <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d8d9      	bhi.n	800335e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0212 	mvn.w	r2, #18
 80033b2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80033ca:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80033ce:	d115      	bne.n	80033fc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f4:	f043 0201 	orr.w	r2, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd90      	pop	{r4, r7, pc}
 8003406:	bf00      	nop
 8003408:	20000070 	.word	0x20000070
 800340c:	24924924 	.word	0x24924924
 8003410:	00924924 	.word	0x00924924
 8003414:	12492492 	.word	0x12492492
 8003418:	00492492 	.word	0x00492492
 800341c:	00249249 	.word	0x00249249

08003420 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800342e:	4618      	mov	r0, r3
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	bc80      	pop	{r7}
 8003436:	4770      	bx	lr

08003438 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003450:	2b01      	cmp	r3, #1
 8003452:	d101      	bne.n	8003458 <HAL_ADC_ConfigChannel+0x20>
 8003454:	2302      	movs	r3, #2
 8003456:	e0dc      	b.n	8003612 <HAL_ADC_ConfigChannel+0x1da>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b06      	cmp	r3, #6
 8003466:	d81c      	bhi.n	80034a2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	3b05      	subs	r3, #5
 800347a:	221f      	movs	r2, #31
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	4019      	ands	r1, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	3b05      	subs	r3, #5
 8003494:	fa00 f203 	lsl.w	r2, r0, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	635a      	str	r2, [r3, #52]	; 0x34
 80034a0:	e03c      	b.n	800351c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d81c      	bhi.n	80034e4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	3b23      	subs	r3, #35	; 0x23
 80034bc:	221f      	movs	r2, #31
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	4019      	ands	r1, r3
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	3b23      	subs	r3, #35	; 0x23
 80034d6:	fa00 f203 	lsl.w	r2, r0, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
 80034e2:	e01b      	b.n	800351c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	3b41      	subs	r3, #65	; 0x41
 80034f6:	221f      	movs	r2, #31
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4019      	ands	r1, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685a      	ldr	r2, [r3, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	3b41      	subs	r3, #65	; 0x41
 8003510:	fa00 f203 	lsl.w	r2, r0, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b09      	cmp	r3, #9
 8003522:	d91c      	bls.n	800355e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68d9      	ldr	r1, [r3, #12]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	3b1e      	subs	r3, #30
 8003536:	2207      	movs	r2, #7
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	4019      	ands	r1, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6898      	ldr	r0, [r3, #8]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4613      	mov	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4413      	add	r3, r2
 800354e:	3b1e      	subs	r3, #30
 8003550:	fa00 f203 	lsl.w	r2, r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	60da      	str	r2, [r3, #12]
 800355c:	e019      	b.n	8003592 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6919      	ldr	r1, [r3, #16]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	2207      	movs	r2, #7
 8003570:	fa02 f303 	lsl.w	r3, r2, r3
 8003574:	43db      	mvns	r3, r3
 8003576:	4019      	ands	r1, r3
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6898      	ldr	r0, [r3, #8]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	4413      	add	r3, r2
 8003586:	fa00 f203 	lsl.w	r2, r0, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b10      	cmp	r3, #16
 8003598:	d003      	beq.n	80035a2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800359e:	2b11      	cmp	r3, #17
 80035a0:	d132      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_ADC_ConfigChannel+0x1e4>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d125      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d126      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80035c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d11a      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_ADC_ConfigChannel+0x1e8>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a13      	ldr	r2, [pc, #76]	; (8003624 <HAL_ADC_ConfigChannel+0x1ec>)
 80035d8:	fba2 2303 	umull	r2, r3, r2, r3
 80035dc:	0c9a      	lsrs	r2, r3, #18
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x1b2>
 80035f6:	e007      	b.n	8003608 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003610:	7bfb      	ldrb	r3, [r7, #15]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	bc80      	pop	{r7}
 800361a:	4770      	bx	lr
 800361c:	40012400 	.word	0x40012400
 8003620:	20000070 	.word	0x20000070
 8003624:	431bde83 	.word	0x431bde83

08003628 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d040      	beq.n	80036c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003656:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <ADC_Enable+0xac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <ADC_Enable+0xb0>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	0c9b      	lsrs	r3, r3, #18
 8003662:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003664:	e002      	b.n	800366c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	3b01      	subs	r3, #1
 800366a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f9      	bne.n	8003666 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003672:	f7ff fbef 	bl	8002e54 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003678:	e01f      	b.n	80036ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800367a:	f7ff fbeb 	bl	8002e54 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d918      	bls.n	80036ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d011      	beq.n	80036ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e007      	b.n	80036ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d1d8      	bne.n	800367a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000070 	.word	0x20000070
 80036d8:	431bde83 	.word	0x431bde83

080036dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d12e      	bne.n	8003754 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003706:	f7ff fba5 	bl	8002e54 <HAL_GetTick>
 800370a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800370c:	e01b      	b.n	8003746 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800370e:	f7ff fba1 	bl	8002e54 <HAL_GetTick>
 8003712:	4602      	mov	r2, r0
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	2b02      	cmp	r3, #2
 800371a:	d914      	bls.n	8003746 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10d      	bne.n	8003746 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	f043 0210 	orr.w	r2, r3, #16
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	f043 0201 	orr.w	r2, r3, #1
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e007      	b.n	8003756 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b01      	cmp	r3, #1
 8003752:	d0dc      	beq.n	800370e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003770:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800377c:	4013      	ands	r3, r2
 800377e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800378c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <__NVIC_SetPriorityGrouping+0x44>)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	60d3      	str	r3, [r2, #12]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	bc80      	pop	{r7}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <__NVIC_GetPriorityGrouping+0x18>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	f003 0307 	and.w	r3, r3, #7
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	4603      	mov	r3, r0
 80037cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	db0b      	blt.n	80037ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d6:	79fb      	ldrb	r3, [r7, #7]
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4906      	ldr	r1, [pc, #24]	; (80037f8 <__NVIC_EnableIRQ+0x34>)
 80037de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	2001      	movs	r0, #1
 80037e6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037ee:	bf00      	nop
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	; (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	; 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr

080038b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038c4:	d301      	bcc.n	80038ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038c6:	2301      	movs	r3, #1
 80038c8:	e00f      	b.n	80038ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ca:	4a0a      	ldr	r2, [pc, #40]	; (80038f4 <SysTick_Config+0x40>)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d2:	210f      	movs	r1, #15
 80038d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038d8:	f7ff ff90 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <SysTick_Config+0x40>)
 80038de:	2200      	movs	r2, #0
 80038e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e2:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <SysTick_Config+0x40>)
 80038e4:	2207      	movs	r2, #7
 80038e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	e000e010 	.word	0xe000e010

080038f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ff2d 	bl	8003760 <__NVIC_SetPriorityGrouping>
}
 8003906:	bf00      	nop
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003920:	f7ff ff42 	bl	80037a8 <__NVIC_GetPriorityGrouping>
 8003924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	6978      	ldr	r0, [r7, #20]
 800392c:	f7ff ff90 	bl	8003850 <NVIC_EncodePriority>
 8003930:	4602      	mov	r2, r0
 8003932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003936:	4611      	mov	r1, r2
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff5f 	bl	80037fc <__NVIC_SetPriority>
}
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff ff35 	bl	80037c4 <__NVIC_EnableIRQ>
}
 800395a:	bf00      	nop
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b082      	sub	sp, #8
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff ffa2 	bl	80038b4 <SysTick_Config>
 8003970:	4603      	mov	r3, r0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800397c:	b480      	push	{r7}
 800397e:	b08b      	sub	sp, #44	; 0x2c
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
 8003984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003986:	2300      	movs	r3, #0
 8003988:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800398e:	e169      	b.n	8003c64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003990:	2201      	movs	r2, #1
 8003992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	4013      	ands	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	f040 8158 	bne.w	8003c5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	4a9a      	ldr	r2, [pc, #616]	; (8003c1c <HAL_GPIO_Init+0x2a0>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d05e      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039b8:	4a98      	ldr	r2, [pc, #608]	; (8003c1c <HAL_GPIO_Init+0x2a0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d875      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039be:	4a98      	ldr	r2, [pc, #608]	; (8003c20 <HAL_GPIO_Init+0x2a4>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d058      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039c4:	4a96      	ldr	r2, [pc, #600]	; (8003c20 <HAL_GPIO_Init+0x2a4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d86f      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039ca:	4a96      	ldr	r2, [pc, #600]	; (8003c24 <HAL_GPIO_Init+0x2a8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d052      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039d0:	4a94      	ldr	r2, [pc, #592]	; (8003c24 <HAL_GPIO_Init+0x2a8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d869      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039d6:	4a94      	ldr	r2, [pc, #592]	; (8003c28 <HAL_GPIO_Init+0x2ac>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d04c      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039dc:	4a92      	ldr	r2, [pc, #584]	; (8003c28 <HAL_GPIO_Init+0x2ac>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d863      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039e2:	4a92      	ldr	r2, [pc, #584]	; (8003c2c <HAL_GPIO_Init+0x2b0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d046      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
 80039e8:	4a90      	ldr	r2, [pc, #576]	; (8003c2c <HAL_GPIO_Init+0x2b0>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d85d      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039ee:	2b12      	cmp	r3, #18
 80039f0:	d82a      	bhi.n	8003a48 <HAL_GPIO_Init+0xcc>
 80039f2:	2b12      	cmp	r3, #18
 80039f4:	d859      	bhi.n	8003aaa <HAL_GPIO_Init+0x12e>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_GPIO_Init+0x80>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a77 	.word	0x08003a77
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a63 	.word	0x08003a63
 8003a08:	08003aa5 	.word	0x08003aa5
 8003a0c:	08003aab 	.word	0x08003aab
 8003a10:	08003aab 	.word	0x08003aab
 8003a14:	08003aab 	.word	0x08003aab
 8003a18:	08003aab 	.word	0x08003aab
 8003a1c:	08003aab 	.word	0x08003aab
 8003a20:	08003aab 	.word	0x08003aab
 8003a24:	08003aab 	.word	0x08003aab
 8003a28:	08003aab 	.word	0x08003aab
 8003a2c:	08003aab 	.word	0x08003aab
 8003a30:	08003aab 	.word	0x08003aab
 8003a34:	08003aab 	.word	0x08003aab
 8003a38:	08003aab 	.word	0x08003aab
 8003a3c:	08003aab 	.word	0x08003aab
 8003a40:	08003a59 	.word	0x08003a59
 8003a44:	08003a6d 	.word	0x08003a6d
 8003a48:	4a79      	ldr	r2, [pc, #484]	; (8003c30 <HAL_GPIO_Init+0x2b4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d013      	beq.n	8003a76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a4e:	e02c      	b.n	8003aaa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	623b      	str	r3, [r7, #32]
          break;
 8003a56:	e029      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	623b      	str	r3, [r7, #32]
          break;
 8003a60:	e024      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	3308      	adds	r3, #8
 8003a68:	623b      	str	r3, [r7, #32]
          break;
 8003a6a:	e01f      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	330c      	adds	r3, #12
 8003a72:	623b      	str	r3, [r7, #32]
          break;
 8003a74:	e01a      	b.n	8003aac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d102      	bne.n	8003a84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a7e:	2304      	movs	r3, #4
 8003a80:	623b      	str	r3, [r7, #32]
          break;
 8003a82:	e013      	b.n	8003aac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	611a      	str	r2, [r3, #16]
          break;
 8003a96:	e009      	b.n	8003aac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	615a      	str	r2, [r3, #20]
          break;
 8003aa2:	e003      	b.n	8003aac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	623b      	str	r3, [r7, #32]
          break;
 8003aa8:	e000      	b.n	8003aac <HAL_GPIO_Init+0x130>
          break;
 8003aaa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d801      	bhi.n	8003ab6 <HAL_GPIO_Init+0x13a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	e001      	b.n	8003aba <HAL_GPIO_Init+0x13e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2bff      	cmp	r3, #255	; 0xff
 8003ac0:	d802      	bhi.n	8003ac8 <HAL_GPIO_Init+0x14c>
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	e002      	b.n	8003ace <HAL_GPIO_Init+0x152>
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aca:	3b08      	subs	r3, #8
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	210f      	movs	r1, #15
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8003adc:	43db      	mvns	r3, r3
 8003ade:	401a      	ands	r2, r3
 8003ae0:	6a39      	ldr	r1, [r7, #32]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80b1 	beq.w	8003c5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003afc:	4b4d      	ldr	r3, [pc, #308]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	4a4c      	ldr	r2, [pc, #304]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	6193      	str	r3, [r2, #24]
 8003b08:	4b4a      	ldr	r3, [pc, #296]	; (8003c34 <HAL_GPIO_Init+0x2b8>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b14:	4a48      	ldr	r2, [pc, #288]	; (8003c38 <HAL_GPIO_Init+0x2bc>)
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	089b      	lsrs	r3, r3, #2
 8003b1a:	3302      	adds	r3, #2
 8003b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	220f      	movs	r2, #15
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a40      	ldr	r2, [pc, #256]	; (8003c3c <HAL_GPIO_Init+0x2c0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_GPIO_Init+0x1ec>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3f      	ldr	r2, [pc, #252]	; (8003c40 <HAL_GPIO_Init+0x2c4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00d      	beq.n	8003b64 <HAL_GPIO_Init+0x1e8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a3e      	ldr	r2, [pc, #248]	; (8003c44 <HAL_GPIO_Init+0x2c8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <HAL_GPIO_Init+0x1e4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a3d      	ldr	r2, [pc, #244]	; (8003c48 <HAL_GPIO_Init+0x2cc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_GPIO_Init+0x1e0>
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e006      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b5c:	2304      	movs	r3, #4
 8003b5e:	e004      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e002      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_GPIO_Init+0x1ee>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	f002 0203 	and.w	r2, r2, #3
 8003b70:	0092      	lsls	r2, r2, #2
 8003b72:	4093      	lsls	r3, r2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b7a:	492f      	ldr	r1, [pc, #188]	; (8003c38 <HAL_GPIO_Init+0x2bc>)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	089b      	lsrs	r3, r3, #2
 8003b80:	3302      	adds	r3, #2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d006      	beq.n	8003ba2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	492c      	ldr	r1, [pc, #176]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]
 8003ba0:	e006      	b.n	8003bb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ba2:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	4928      	ldr	r1, [pc, #160]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d006      	beq.n	8003bca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bbc:	4b23      	ldr	r3, [pc, #140]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	4922      	ldr	r1, [pc, #136]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60cb      	str	r3, [r1, #12]
 8003bc8:	e006      	b.n	8003bd8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	491e      	ldr	r1, [pc, #120]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d006      	beq.n	8003bf2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003be6:	685a      	ldr	r2, [r3, #4]
 8003be8:	4918      	ldr	r1, [pc, #96]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
 8003bf0:	e006      	b.n	8003c00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bf2:	4b16      	ldr	r3, [pc, #88]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	4914      	ldr	r1, [pc, #80]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d021      	beq.n	8003c50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c0c:	4b0f      	ldr	r3, [pc, #60]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	490e      	ldr	r1, [pc, #56]	; (8003c4c <HAL_GPIO_Init+0x2d0>)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	600b      	str	r3, [r1, #0]
 8003c18:	e021      	b.n	8003c5e <HAL_GPIO_Init+0x2e2>
 8003c1a:	bf00      	nop
 8003c1c:	10320000 	.word	0x10320000
 8003c20:	10310000 	.word	0x10310000
 8003c24:	10220000 	.word	0x10220000
 8003c28:	10210000 	.word	0x10210000
 8003c2c:	10120000 	.word	0x10120000
 8003c30:	10110000 	.word	0x10110000
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40010000 	.word	0x40010000
 8003c3c:	40010800 	.word	0x40010800
 8003c40:	40010c00 	.word	0x40010c00
 8003c44:	40011000 	.word	0x40011000
 8003c48:	40011400 	.word	0x40011400
 8003c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	43db      	mvns	r3, r3
 8003c58:	4909      	ldr	r1, [pc, #36]	; (8003c80 <HAL_GPIO_Init+0x304>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	3301      	adds	r3, #1
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f47f ae8e 	bne.w	8003990 <HAL_GPIO_Init+0x14>
  }
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	372c      	adds	r7, #44	; 0x2c
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ca0:	e003      	b.n	8003caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	041a      	lsls	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	611a      	str	r2, [r3, #16]
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	041a      	lsls	r2, r3, #16
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	43d9      	mvns	r1, r3
 8003cd2:	887b      	ldrh	r3, [r7, #2]
 8003cd4:	400b      	ands	r3, r1
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]
}
 8003cdc:	bf00      	nop
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr

08003ce6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ce6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ce8:	b08b      	sub	sp, #44	; 0x2c
 8003cea:	af06      	add	r7, sp, #24
 8003cec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e0f1      	b.n	8003edc <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f007 ffa1 	bl	800bc54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f003 febf 	bl	8007aa2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	603b      	str	r3, [r7, #0]
 8003d2a:	687e      	ldr	r6, [r7, #4]
 8003d2c:	466d      	mov	r5, sp
 8003d2e:	f106 0410 	add.w	r4, r6, #16
 8003d32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	602b      	str	r3, [r5, #0]
 8003d3a:	1d33      	adds	r3, r6, #4
 8003d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d3e:	6838      	ldr	r0, [r7, #0]
 8003d40:	f003 fe89 	bl	8007a56 <USB_CoreInit>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2202      	movs	r2, #2
 8003d4e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0c2      	b.n	8003edc <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f003 feba 	bl	8007ad6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]
 8003d66:	e040      	b.n	8003dea <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	440b      	add	r3, r1
 8003d78:	3301      	adds	r3, #1
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	1c5a      	adds	r2, r3, #1
 8003d84:	4613      	mov	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	00db      	lsls	r3, r3, #3
 8003d8c:	440b      	add	r3, r1
 8003d8e:	7bfa      	ldrb	r2, [r7, #15]
 8003d90:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	440b      	add	r3, r1
 8003da2:	3303      	adds	r3, #3
 8003da4:	2200      	movs	r2, #0
 8003da6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003da8:	7bfa      	ldrb	r2, [r7, #15]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	440b      	add	r3, r1
 8003db6:	3338      	adds	r3, #56	; 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	333c      	adds	r3, #60	; 0x3c
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	3340      	adds	r3, #64	; 0x40
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	3301      	adds	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
 8003dea:	7bfa      	ldrb	r2, [r7, #15]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3b9      	bcc.n	8003d68 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
 8003df8:	e044      	b.n	8003e84 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dfa:	7bfa      	ldrb	r2, [r7, #15]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	440b      	add	r3, r1
 8003e08:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	440b      	add	r3, r1
 8003e1e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	00db      	lsls	r3, r3, #3
 8003e32:	440b      	add	r3, r1
 8003e34:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e38:	2200      	movs	r2, #0
 8003e3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e3c:	7bfa      	ldrb	r2, [r7, #15]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	4413      	add	r3, r2
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	440b      	add	r3, r1
 8003e4a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e52:	7bfa      	ldrb	r2, [r7, #15]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	440b      	add	r3, r1
 8003e60:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e68:	7bfa      	ldrb	r2, [r7, #15]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	3301      	adds	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	7bfa      	ldrb	r2, [r7, #15]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d3b5      	bcc.n	8003dfa <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	687e      	ldr	r6, [r7, #4]
 8003e96:	466d      	mov	r5, sp
 8003e98:	f106 0410 	add.w	r4, r6, #16
 8003e9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ea0:	6823      	ldr	r3, [r4, #0]
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	1d33      	adds	r3, r6, #4
 8003ea6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ea8:	6838      	ldr	r0, [r7, #0]
 8003eaa:	f003 fe20 	bl	8007aee <USB_DevInit>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e00d      	b.n	8003edc <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f006 f8a2 	bl	800a01e <USB_DevDisconnect>

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_PCD_Start+0x16>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e016      	b.n	8003f28 <HAL_PCD_Start+0x44>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f003 fdb5 	bl	8007a76 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f008 f913 	bl	800c13a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f006 f876 	bl	800a00a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3708      	adds	r7, #8
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b088      	sub	sp, #32
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f006 f878 	bl	800a032 <USB_ReadInterrupts>
 8003f42:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fb1b 	bl	800458a <PCD_EP_ISR_Handler>

    return;
 8003f54:	e119      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f72:	b292      	uxth	r2, r2
 8003f74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f007 fee6 	bl	800bd4a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f7e:	2100      	movs	r1, #0
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f905 	bl	8004190 <HAL_PCD_SetAddress>

    return;
 8003f86:	e100      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00c      	beq.n	8003fac <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003fa4:	b292      	uxth	r2, r2
 8003fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003faa:	e0ee      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00c      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003fce:	e0dc      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d027      	beq.n	800402a <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0204 	bic.w	r2, r2, #4
 8003fec:	b292      	uxth	r2, r2
 8003fee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0208 	bic.w	r2, r2, #8
 8004004:	b292      	uxth	r2, r2
 8004006:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f007 fed6 	bl	800bdbc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004018:	b29a      	uxth	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004022:	b292      	uxth	r2, r2
 8004024:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004028:	e0af      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8083 	beq.w	800413c <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004036:	2300      	movs	r3, #0
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e010      	b.n	800405e <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	7ffb      	ldrb	r3, [r7, #31]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	8812      	ldrh	r2, [r2, #0]
 800404c:	b292      	uxth	r2, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	3320      	adds	r3, #32
 8004052:	443b      	add	r3, r7
 8004054:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004058:	7ffb      	ldrb	r3, [r7, #31]
 800405a:	3301      	adds	r3, #1
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b07      	cmp	r3, #7
 8004062:	d9eb      	bls.n	800403c <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800406c:	b29a      	uxth	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	b292      	uxth	r2, r2
 8004078:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0201 	bic.w	r2, r2, #1
 800408e:	b292      	uxth	r2, r2
 8004090:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004094:	bf00      	nop
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d0f6      	beq.n	8004096 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ba:	b292      	uxth	r2, r2
 80040bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80040c0:	2300      	movs	r3, #0
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e00f      	b.n	80040e6 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80040c6:	7ffb      	ldrb	r3, [r7, #31]
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	4611      	mov	r1, r2
 80040ce:	7ffa      	ldrb	r2, [r7, #31]
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	440a      	add	r2, r1
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	3320      	adds	r3, #32
 80040d8:	443b      	add	r3, r7
 80040da:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80040de:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80040e0:	7ffb      	ldrb	r3, [r7, #31]
 80040e2:	3301      	adds	r3, #1
 80040e4:	77fb      	strb	r3, [r7, #31]
 80040e6:	7ffb      	ldrb	r3, [r7, #31]
 80040e8:	2b07      	cmp	r3, #7
 80040ea:	d9ec      	bls.n	80040c6 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0208 	orr.w	r2, r2, #8
 80040fe:	b292      	uxth	r2, r2
 8004100:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800410c:	b29a      	uxth	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004116:	b292      	uxth	r2, r2
 8004118:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004124:	b29a      	uxth	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0204 	orr.w	r2, r2, #4
 800412e:	b292      	uxth	r2, r2
 8004130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f007 fe27 	bl	800bd88 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800413a:	e026      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00f      	beq.n	8004166 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800414e:	b29a      	uxth	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004158:	b292      	uxth	r2, r2
 800415a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f007 fde5 	bl	800bd2e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004164:	e011      	b.n	800418a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00c      	beq.n	800418a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004182:	b292      	uxth	r2, r2
 8004184:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004188:	bf00      	nop
  }
}
 800418a:	3720      	adds	r7, #32
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d101      	bne.n	80041aa <HAL_PCD_SetAddress+0x1a>
 80041a6:	2302      	movs	r3, #2
 80041a8:	e013      	b.n	80041d2 <HAL_PCD_SetAddress+0x42>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	78fa      	ldrb	r2, [r7, #3]
 80041b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	78fa      	ldrb	r2, [r7, #3]
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f005 ff0e 	bl	8009fe4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80041da:	b580      	push	{r7, lr}
 80041dc:	b084      	sub	sp, #16
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	4608      	mov	r0, r1
 80041e4:	4611      	mov	r1, r2
 80041e6:	461a      	mov	r2, r3
 80041e8:	4603      	mov	r3, r0
 80041ea:	70fb      	strb	r3, [r7, #3]
 80041ec:	460b      	mov	r3, r1
 80041ee:	803b      	strh	r3, [r7, #0]
 80041f0:	4613      	mov	r3, r2
 80041f2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041f4:	2300      	movs	r3, #0
 80041f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da0e      	bge.n	800421e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2201      	movs	r2, #1
 800421a:	705a      	strb	r2, [r3, #1]
 800421c:	e00e      	b.n	800423c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 0207 	and.w	r2, r3, #7
 8004224:	4613      	mov	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004248:	883a      	ldrh	r2, [r7, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	78ba      	ldrb	r2, [r7, #2]
 8004252:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004254:	78bb      	ldrb	r3, [r7, #2]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d102      	bne.n	8004260 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004266:	2b01      	cmp	r3, #1
 8004268:	d101      	bne.n	800426e <HAL_PCD_EP_Open+0x94>
 800426a:	2302      	movs	r3, #2
 800426c:	e00e      	b.n	800428c <HAL_PCD_EP_Open+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	4618      	mov	r0, r3
 800427e:	f003 fc57 	bl	8007b30 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800428a:	7afb      	ldrb	r3, [r7, #11]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	460b      	mov	r3, r1
 800429e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80042a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da0e      	bge.n	80042c6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	4413      	add	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	705a      	strb	r2, [r3, #1]
 80042c4:	e00e      	b.n	80042e4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042c6:	78fb      	ldrb	r3, [r7, #3]
 80042c8:	f003 0207 	and.w	r2, r3, #7
 80042cc:	4613      	mov	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4413      	add	r3, r2
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e4:	78fb      	ldrb	r3, [r7, #3]
 80042e6:	f003 0307 	and.w	r3, r3, #7
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_PCD_EP_Close+0x6a>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e00e      	b.n	800431c <HAL_PCD_EP_Close+0x88>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68f9      	ldr	r1, [r7, #12]
 800430c:	4618      	mov	r0, r3
 800430e:	f003 ffcf 	bl	80082b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	460b      	mov	r3, r1
 8004332:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004334:	7afb      	ldrb	r3, [r7, #11]
 8004336:	f003 0207 	and.w	r2, r3, #7
 800433a:	4613      	mov	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	683a      	ldr	r2, [r7, #0]
 8004356:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	2200      	movs	r2, #0
 800435c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	2200      	movs	r2, #0
 8004362:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	b2da      	uxtb	r2, r3
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	4618      	mov	r0, r3
 8004378:	f004 f986 	bl	8008688 <USB_EPStartXfer>

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 0207 	and.w	r2, r3, #7
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	440b      	add	r3, r1
 80043a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80043a8:	681b      	ldr	r3, [r3, #0]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	603b      	str	r3, [r7, #0]
 80043c0:	460b      	mov	r3, r1
 80043c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c4:	7afb      	ldrb	r3, [r7, #11]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	2201      	movs	r2, #1
 80043fe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004400:	7afb      	ldrb	r3, [r7, #11]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	b2da      	uxtb	r2, r3
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6979      	ldr	r1, [r7, #20]
 8004412:	4618      	mov	r0, r3
 8004414:	f004 f938 	bl	8008688 <USB_EPStartXfer>

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
 800442a:	460b      	mov	r3, r1
 800442c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 0207 	and.w	r2, r3, #7
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	429a      	cmp	r2, r3
 800443a:	d901      	bls.n	8004440 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04c      	b.n	80044da <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004440:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004444:	2b00      	cmp	r3, #0
 8004446:	da0e      	bge.n	8004466 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	705a      	strb	r2, [r3, #1]
 8004464:	e00c      	b.n	8004480 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	4413      	add	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	b2da      	uxtb	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004498:	2b01      	cmp	r3, #1
 800449a:	d101      	bne.n	80044a0 <HAL_PCD_EP_SetStall+0x7e>
 800449c:	2302      	movs	r3, #2
 800449e:	e01c      	b.n	80044da <HAL_PCD_EP_SetStall+0xb8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68f9      	ldr	r1, [r7, #12]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f005 fc9b 	bl	8009dea <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d108      	bne.n	80044d0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80044c8:	4619      	mov	r1, r3
 80044ca:	4610      	mov	r0, r2
 80044cc:	f005 fdc0 	bl	800a050 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3710      	adds	r7, #16
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	460b      	mov	r3, r1
 80044ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d901      	bls.n	8004500 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e040      	b.n	8004582 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004504:	2b00      	cmp	r3, #0
 8004506:	da0e      	bge.n	8004526 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	4413      	add	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	705a      	strb	r2, [r3, #1]
 8004524:	e00e      	b.n	8004544 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004526:	78fb      	ldrb	r3, [r7, #3]
 8004528:	f003 0207 	and.w	r2, r3, #7
 800452c:	4613      	mov	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4413      	add	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800454a:	78fb      	ldrb	r3, [r7, #3]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_PCD_EP_ClrStall+0x82>
 8004560:	2302      	movs	r3, #2
 8004562:	e00e      	b.n	8004582 <HAL_PCD_EP_ClrStall+0xa0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68f9      	ldr	r1, [r7, #12]
 8004572:	4618      	mov	r0, r3
 8004574:	f005 fc89 	bl	8009e8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b096      	sub	sp, #88	; 0x58
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004592:	e3bf      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800459c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80045a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80045ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f040 8179 	bne.w	80048aa <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80045b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d152      	bne.n	800466a <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80045d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045d4:	81fb      	strh	r3, [r7, #14]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	89fb      	ldrh	r3, [r7, #14]
 80045dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3328      	adds	r3, #40	; 0x28
 80045ec:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	461a      	mov	r2, r3
 80045fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	3302      	adds	r3, #2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6812      	ldr	r2, [r2, #0]
 800460a:	4413      	add	r3, r2
 800460c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004618:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	441a      	add	r2, r3
 8004624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004626:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f007 fb65 	bl	800bcfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 836b 	beq.w	8004d14 <PCD_EP_ISR_Handler+0x78a>
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8366 	bne.w	8004d14 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004654:	b2da      	uxtb	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	b292      	uxth	r2, r2
 800465c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004668:	e354      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004670:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800467c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004684:	2b00      	cmp	r3, #0
 8004686:	d034      	beq.n	80046f2 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004690:	b29b      	uxth	r3, r3
 8004692:	461a      	mov	r2, r3
 8004694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4413      	add	r3, r2
 800469c:	3306      	adds	r3, #6
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80046b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b2:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80046be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c0:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80046c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c4:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	f005 fd12 	bl	800a0f0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	881b      	ldrh	r3, [r3, #0]
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80046d8:	4013      	ands	r3, r2
 80046da:	823b      	strh	r3, [r7, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	8a3a      	ldrh	r2, [r7, #16]
 80046e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046e6:	b292      	uxth	r2, r2
 80046e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f007 fad8 	bl	800bca0 <HAL_PCD_SetupStageCallback>
 80046f0:	e310      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80046f2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f280 830c 	bge.w	8004d14 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	881b      	ldrh	r3, [r3, #0]
 8004702:	b29a      	uxth	r2, r3
 8004704:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004708:	4013      	ands	r3, r2
 800470a:	83fb      	strh	r3, [r7, #30]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	8bfa      	ldrh	r2, [r7, #30]
 8004712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004716:	b292      	uxth	r2, r2
 8004718:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004722:	b29b      	uxth	r3, r3
 8004724:	461a      	mov	r2, r3
 8004726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	3306      	adds	r3, #6
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004744:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d019      	beq.n	8004782 <PCD_EP_ISR_Handler+0x1f8>
 800474e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d015      	beq.n	8004782 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800475c:	6959      	ldr	r1, [r3, #20]
 800475e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004760:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004764:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004766:	b29b      	uxth	r3, r3
 8004768:	f005 fcc2 	bl	800a0f0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800476c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	441a      	add	r2, r3
 8004776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004778:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800477a:	2100      	movs	r1, #0
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f007 faa1 	bl	800bcc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800478c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004794:	2b00      	cmp	r3, #0
 8004796:	f040 82bd 	bne.w	8004d14 <PCD_EP_ISR_Handler+0x78a>
 800479a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800479e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80047a6:	f000 82b5 	beq.w	8004d14 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	461a      	mov	r2, r3
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	4413      	add	r3, r2
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	801a      	strh	r2, [r3, #0]
 80047da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b3e      	cmp	r3, #62	; 0x3e
 80047e0:	d91d      	bls.n	800481e <PCD_EP_ISR_Handler+0x294>
 80047e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d102      	bne.n	80047fc <PCD_EP_ISR_Handler+0x272>
 80047f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f8:	3b01      	subs	r3, #1
 80047fa:	647b      	str	r3, [r7, #68]	; 0x44
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	b29a      	uxth	r2, r3
 8004802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004804:	b29b      	uxth	r3, r3
 8004806:	029b      	lsls	r3, r3, #10
 8004808:	b29b      	uxth	r3, r3
 800480a:	4313      	orrs	r3, r2
 800480c:	b29b      	uxth	r3, r3
 800480e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004816:	b29a      	uxth	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	801a      	strh	r2, [r3, #0]
 800481c:	e026      	b.n	800486c <PCD_EP_ISR_Handler+0x2e2>
 800481e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <PCD_EP_ISR_Handler+0x2b2>
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	b29b      	uxth	r3, r3
 800482c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004834:	b29a      	uxth	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e017      	b.n	800486c <PCD_EP_ISR_Handler+0x2e2>
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	691b      	ldr	r3, [r3, #16]
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	647b      	str	r3, [r7, #68]	; 0x44
 8004844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	d002      	beq.n	8004856 <PCD_EP_ISR_Handler+0x2cc>
 8004850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004852:	3301      	adds	r3, #1
 8004854:	647b      	str	r3, [r7, #68]	; 0x44
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29a      	uxth	r2, r3
 800485c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800485e:	b29b      	uxth	r3, r3
 8004860:	029b      	lsls	r3, r3, #10
 8004862:	b29b      	uxth	r3, r3
 8004864:	4313      	orrs	r3, r2
 8004866:	b29a      	uxth	r2, r3
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	b29b      	uxth	r3, r3
 8004874:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800487c:	827b      	strh	r3, [r7, #18]
 800487e:	8a7b      	ldrh	r3, [r7, #18]
 8004880:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004884:	827b      	strh	r3, [r7, #18]
 8004886:	8a7b      	ldrh	r3, [r7, #18]
 8004888:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800488c:	827b      	strh	r3, [r7, #18]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	8a7b      	ldrh	r3, [r7, #18]
 8004894:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004898:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	8013      	strh	r3, [r2, #0]
 80048a8:	e234      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4413      	add	r3, r2
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048be:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f280 80fc 	bge.w	8004ac0 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	881b      	ldrh	r3, [r3, #0]
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048de:	4013      	ands	r3, r2
 80048e0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80048f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048fa:	b292      	uxth	r2, r2
 80048fc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80048fe:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	4413      	add	r3, r2
 8004912:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004916:	7b1b      	ldrb	r3, [r3, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d125      	bne.n	8004968 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004924:	b29b      	uxth	r3, r3
 8004926:	461a      	mov	r2, r3
 8004928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	3306      	adds	r3, #6
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6812      	ldr	r2, [r2, #0]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004944:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004948:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8092 	beq.w	8004a76 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6818      	ldr	r0, [r3, #0]
 8004956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004958:	6959      	ldr	r1, [r3, #20]
 800495a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495c:	88da      	ldrh	r2, [r3, #6]
 800495e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004962:	f005 fbc5 	bl	800a0f0 <USB_ReadPMA>
 8004966:	e086      	b.n	8004a76 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800496a:	78db      	ldrb	r3, [r3, #3]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d10a      	bne.n	8004986 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004974:	461a      	mov	r2, r3
 8004976:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f9d9 	bl	8004d30 <HAL_PCD_EP_DB_Receive>
 800497e:	4603      	mov	r3, r0
 8004980:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004984:	e077      	b.n	8004a76 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	441a      	add	r2, r3
 80049b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80049b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d024      	beq.n	8004a2e <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	461a      	mov	r2, r3
 80049f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	4413      	add	r3, r2
 80049f8:	3302      	adds	r3, #2
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a06:	881b      	ldrh	r3, [r3, #0]
 8004a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004a10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d02e      	beq.n	8004a76 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1e:	6959      	ldr	r1, [r3, #20]
 8004a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a22:	891a      	ldrh	r2, [r3, #8]
 8004a24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a28:	f005 fb62 	bl	800a0f0 <USB_ReadPMA>
 8004a2c:	e023      	b.n	8004a76 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	461a      	mov	r2, r3
 8004a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4413      	add	r3, r2
 8004a42:	3306      	adds	r3, #6
 8004a44:	005b      	lsls	r3, r3, #1
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a50:	881b      	ldrh	r3, [r3, #0]
 8004a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004a5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d009      	beq.n	8004a76 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6818      	ldr	r0, [r3, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a68:	6959      	ldr	r1, [r3, #20]
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	895a      	ldrh	r2, [r3, #10]
 8004a6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a72:	f005 fb3d 	bl	800a0f0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a7e:	441a      	add	r2, r3
 8004a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a82:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a86:	695a      	ldr	r2, [r3, #20]
 8004a88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004a8c:	441a      	add	r2, r3
 8004a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a90:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <PCD_EP_ISR_Handler+0x51c>
 8004a9a:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d206      	bcs.n	8004ab4 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f007 f909 	bl	800bcc4 <HAL_PCD_DataOutStageCallback>
 8004ab2:	e005      	b.n	8004ac0 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aba:	4618      	mov	r0, r3
 8004abc:	f003 fde4 	bl	8008688 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004ac0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 8123 	beq.w	8004d14 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ace:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	4413      	add	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	4413      	add	r3, r2
 8004ae0:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004afc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b20:	78db      	ldrb	r3, [r3, #3]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	f040 80a2 	bne.w	8004c6c <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8004b28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004b2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b30:	7b1b      	ldrb	r3, [r3, #12]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 8093 	beq.w	8004c5e <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d046      	beq.n	8004bd2 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b46:	785b      	ldrb	r3, [r3, #1]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d126      	bne.n	8004b9a <PCD_EP_ISR_Handler+0x610>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	627b      	str	r3, [r7, #36]	; 0x24
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b60:	4413      	add	r3, r2
 8004b62:	627b      	str	r3, [r7, #36]	; 0x24
 8004b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	011a      	lsls	r2, r3, #4
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	801a      	strh	r2, [r3, #0]
 8004b98:	e061      	b.n	8004c5e <PCD_EP_ISR_Handler+0x6d4>
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9c:	785b      	ldrb	r3, [r3, #1]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d15d      	bne.n	8004c5e <PCD_EP_ISR_Handler+0x6d4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb6:	4413      	add	r3, r2
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	011a      	lsls	r2, r3, #4
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004bc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	2200      	movs	r2, #0
 8004bce:	801a      	strh	r2, [r3, #0]
 8004bd0:	e045      	b.n	8004c5e <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d126      	bne.n	8004c2e <PCD_EP_ISR_Handler+0x6a4>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	637b      	str	r3, [r7, #52]	; 0x34
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	4413      	add	r3, r2
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	011a      	lsls	r2, r3, #4
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	4413      	add	r3, r2
 8004c02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c06:	633b      	str	r3, [r7, #48]	; 0x30
 8004c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0a:	881b      	ldrh	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	881b      	ldrh	r3, [r3, #0]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2a:	801a      	strh	r2, [r3, #0]
 8004c2c:	e017      	b.n	8004c5e <PCD_EP_ISR_Handler+0x6d4>
 8004c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c30:	785b      	ldrb	r3, [r3, #1]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d113      	bne.n	8004c5e <PCD_EP_ISR_Handler+0x6d4>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c44:	4413      	add	r3, r2
 8004c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	011a      	lsls	r2, r3, #4
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	4619      	mov	r1, r3
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f007 f848 	bl	800bcfa <HAL_PCD_DataInStageCallback>
 8004c6a:	e053      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004c6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d146      	bne.n	8004d06 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3302      	adds	r3, #2
 8004c8e:	005b      	lsls	r3, r3, #1
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9a:	881b      	ldrh	r3, [r3, #0]
 8004c9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ca0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca6:	699a      	ldr	r2, [r3, #24]
 8004ca8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d907      	bls.n	8004cc0 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb2:	699a      	ldr	r2, [r3, #24]
 8004cb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cb8:	1ad2      	subs	r2, r2, r3
 8004cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbc:	619a      	str	r2, [r3, #24]
 8004cbe:	e002      	b.n	8004cc6 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004cc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f007 f810 	bl	800bcfa <HAL_PCD_DataInStageCallback>
 8004cda:	e01b      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cde:	695a      	ldr	r2, [r3, #20]
 8004ce0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ce4:	441a      	add	r2, r3
 8004ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce8:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004cea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cf2:	441a      	add	r2, r3
 8004cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf6:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f003 fcc2 	bl	8008688 <USB_EPStartXfer>
 8004d04:	e006      	b.n	8004d14 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004d06:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 f91b 	bl	8004f4a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f6ff ac37 	blt.w	8004594 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3758      	adds	r7, #88	; 0x58
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d3e:	88fb      	ldrh	r3, [r7, #6]
 8004d40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d07e      	beq.n	8004e46 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3302      	adds	r3, #2
 8004d5e:	005b      	lsls	r3, r3, #1
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	6812      	ldr	r2, [r2, #0]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d6a:	881b      	ldrh	r3, [r3, #0]
 8004d6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d70:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	8b7b      	ldrh	r3, [r7, #26]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d306      	bcc.n	8004d8a <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	8b7b      	ldrh	r3, [r7, #26]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	619a      	str	r2, [r3, #24]
 8004d88:	e002      	b.n	8004d90 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d123      	bne.n	8004de0 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db2:	833b      	strh	r3, [r7, #24]
 8004db4:	8b3b      	ldrh	r3, [r7, #24]
 8004db6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dba:	833b      	strh	r3, [r7, #24]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	8b3b      	ldrh	r3, [r7, #24]
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004de0:	88fb      	ldrh	r3, [r7, #6]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01f      	beq.n	8004e2a <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	881b      	ldrh	r3, [r3, #0]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e04:	82fb      	strh	r3, [r7, #22]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	441a      	add	r2, r3
 8004e14:	8afb      	ldrh	r3, [r7, #22]
 8004e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004e2a:	8b7b      	ldrh	r3, [r7, #26]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 8087 	beq.w	8004f40 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6959      	ldr	r1, [r3, #20]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	891a      	ldrh	r2, [r3, #8]
 8004e3e:	8b7b      	ldrh	r3, [r7, #26]
 8004e40:	f005 f956 	bl	800a0f0 <USB_ReadPMA>
 8004e44:	e07c      	b.n	8004f40 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	461a      	mov	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	00db      	lsls	r3, r3, #3
 8004e58:	4413      	add	r3, r2
 8004e5a:	3306      	adds	r3, #6
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	6812      	ldr	r2, [r2, #0]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e68:	881b      	ldrh	r3, [r3, #0]
 8004e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	8b7b      	ldrh	r3, [r7, #26]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d306      	bcc.n	8004e88 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	8b7b      	ldrh	r3, [r7, #26]
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	619a      	str	r2, [r3, #24]
 8004e86:	e002      	b.n	8004e8e <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d123      	bne.n	8004ede <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	83fb      	strh	r3, [r7, #30]
 8004eb2:	8bfb      	ldrh	r3, [r7, #30]
 8004eb4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eb8:	83fb      	strh	r3, [r7, #30]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	441a      	add	r2, r3
 8004ec8:	8bfb      	ldrh	r3, [r7, #30]
 8004eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11f      	bne.n	8004f28 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	461a      	mov	r2, r3
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f02:	83bb      	strh	r3, [r7, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	8bbb      	ldrh	r3, [r7, #28]
 8004f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004f28:	8b7b      	ldrh	r3, [r7, #26]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d008      	beq.n	8004f40 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6818      	ldr	r0, [r3, #0]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6959      	ldr	r1, [r3, #20]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	895a      	ldrh	r2, [r3, #10]
 8004f3a:	8b7b      	ldrh	r3, [r7, #26]
 8004f3c:	f005 f8d8 	bl	800a0f0 <USB_ReadPMA>
    }
  }

  return count;
 8004f40:	8b7b      	ldrh	r3, [r7, #26]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b0a4      	sub	sp, #144	; 0x90
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f58:	88fb      	ldrh	r3, [r7, #6]
 8004f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 81dd 	beq.w	800531e <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	4413      	add	r3, r2
 8004f78:	3302      	adds	r3, #2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	4413      	add	r3, r2
 8004f82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f86:	881b      	ldrh	r3, [r3, #0]
 8004f88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f8c:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d907      	bls.n	8004fac <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004fa4:	1ad2      	subs	r2, r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	619a      	str	r2, [r3, #24]
 8004faa:	e002      	b.n	8004fb2 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f040 80b9 	bne.w	800512e <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	785b      	ldrb	r3, [r3, #1]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d126      	bne.n	8005012 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd8:	4413      	add	r3, r2
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	011a      	lsls	r2, r3, #4
 8004fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	881b      	ldrh	r3, [r3, #0]
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ff6:	b29a      	uxth	r2, r3
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	801a      	strh	r2, [r3, #0]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800500a:	b29a      	uxth	r2, r3
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	801a      	strh	r2, [r3, #0]
 8005010:	e01a      	b.n	8005048 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d116      	bne.n	8005048 <HAL_PCD_EP_DB_Transmit+0xfe>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	637b      	str	r3, [r7, #52]	; 0x34
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005028:	b29b      	uxth	r3, r3
 800502a:	461a      	mov	r2, r3
 800502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800502e:	4413      	add	r3, r2
 8005030:	637b      	str	r3, [r7, #52]	; 0x34
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	011a      	lsls	r2, r3, #4
 8005038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800503a:	4413      	add	r3, r2
 800503c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005040:	633b      	str	r3, [r7, #48]	; 0x30
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2200      	movs	r2, #0
 8005046:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	785b      	ldrb	r3, [r3, #1]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d126      	bne.n	80050a4 <HAL_PCD_EP_DB_Transmit+0x15a>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005064:	b29b      	uxth	r3, r3
 8005066:	461a      	mov	r2, r3
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	61fb      	str	r3, [r7, #28]
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	011a      	lsls	r2, r3, #4
 8005074:	69fb      	ldr	r3, [r7, #28]
 8005076:	4413      	add	r3, r2
 8005078:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005088:	b29a      	uxth	r2, r3
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	801a      	strh	r2, [r3, #0]
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800509c:	b29a      	uxth	r2, r3
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	e017      	b.n	80050d4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	785b      	ldrb	r3, [r3, #1]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d113      	bne.n	80050d4 <HAL_PCD_EP_DB_Transmit+0x18a>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	4413      	add	r3, r2
 80050bc:	627b      	str	r3, [r7, #36]	; 0x24
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	011a      	lsls	r2, r3, #4
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	4413      	add	r3, r2
 80050c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050cc:	623b      	str	r3, [r7, #32]
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	2200      	movs	r2, #0
 80050d2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f006 fe0d 	bl	800bcfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80050e0:	88fb      	ldrh	r3, [r7, #6]
 80050e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 82fc 	beq.w	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	82fb      	strh	r3, [r7, #22]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	441a      	add	r2, r3
 8005116:	8afb      	ldrh	r3, [r7, #22]
 8005118:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800511c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005128:	b29b      	uxth	r3, r3
 800512a:	8013      	strh	r3, [r2, #0]
 800512c:	e2da      	b.n	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800512e:	88fb      	ldrh	r3, [r7, #6]
 8005130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d021      	beq.n	800517c <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	881b      	ldrh	r3, [r3, #0]
 8005148:	b29b      	uxth	r3, r3
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005152:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	461a      	mov	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	441a      	add	r2, r3
 8005164:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800516c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	b29b      	uxth	r3, r3
 800517a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005182:	2b01      	cmp	r3, #1
 8005184:	f040 82ae 	bne.w	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005190:	441a      	add	r2, r3
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800519e:	441a      	add	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6a1a      	ldr	r2, [r3, #32]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d30b      	bcc.n	80051c8 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051c0:	1ad2      	subs	r2, r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	621a      	str	r2, [r3, #32]
 80051c6:	e017      	b.n	80051f8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d108      	bne.n	80051e2 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80051d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80051d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80051e0:	e00a      	b.n	80051f8 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	785b      	ldrb	r3, [r3, #1]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d165      	bne.n	80052cc <HAL_PCD_EP_DB_Transmit+0x382>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800520e:	b29b      	uxth	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005214:	4413      	add	r3, r2
 8005216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	011a      	lsls	r2, r3, #4
 800521e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005220:	4413      	add	r3, r2
 8005222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005226:	63bb      	str	r3, [r7, #56]	; 0x38
 8005228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522a:	881b      	ldrh	r3, [r3, #0]
 800522c:	b29b      	uxth	r3, r3
 800522e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005232:	b29a      	uxth	r2, r3
 8005234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005236:	801a      	strh	r2, [r3, #0]
 8005238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800523c:	2b3e      	cmp	r3, #62	; 0x3e
 800523e:	d91d      	bls.n	800527c <HAL_PCD_EP_DB_Transmit+0x332>
 8005240:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	64bb      	str	r3, [r7, #72]	; 0x48
 8005248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800524c:	f003 031f 	and.w	r3, r3, #31
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_PCD_EP_DB_Transmit+0x310>
 8005254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005256:	3b01      	subs	r3, #1
 8005258:	64bb      	str	r3, [r7, #72]	; 0x48
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	b29a      	uxth	r2, r3
 8005260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005262:	b29b      	uxth	r3, r3
 8005264:	029b      	lsls	r3, r3, #10
 8005266:	b29b      	uxth	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b29b      	uxth	r3, r3
 800526c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005270:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005274:	b29a      	uxth	r2, r3
 8005276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005278:	801a      	strh	r2, [r3, #0]
 800527a:	e044      	b.n	8005306 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800527c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <HAL_PCD_EP_DB_Transmit+0x350>
 8005284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005292:	b29a      	uxth	r2, r3
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	801a      	strh	r2, [r3, #0]
 8005298:	e035      	b.n	8005306 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800529a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d002      	beq.n	80052b4 <HAL_PCD_EP_DB_Transmit+0x36a>
 80052ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052b0:	3301      	adds	r3, #1
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b29a      	uxth	r2, r3
 80052ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052bc:	b29b      	uxth	r3, r3
 80052be:	029b      	lsls	r3, r3, #10
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	801a      	strh	r2, [r3, #0]
 80052ca:	e01c      	b.n	8005306 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	785b      	ldrb	r3, [r3, #1]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d118      	bne.n	8005306 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	461a      	mov	r2, r3
 80052e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e8:	4413      	add	r3, r2
 80052ea:	647b      	str	r3, [r7, #68]	; 0x44
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	011a      	lsls	r2, r3, #4
 80052f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052f4:	4413      	add	r3, r2
 80052f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052fa:	643b      	str	r3, [r7, #64]	; 0x40
 80052fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005300:	b29a      	uxth	r2, r3
 8005302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005304:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6959      	ldr	r1, [r3, #20]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	891a      	ldrh	r2, [r3, #8]
 8005312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005316:	b29b      	uxth	r3, r3
 8005318:	f004 fea5 	bl	800a066 <USB_WritePMA>
 800531c:	e1e2      	b.n	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	3306      	adds	r3, #6
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	4413      	add	r3, r2
 800533c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005346:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005352:	429a      	cmp	r2, r3
 8005354:	d307      	bcc.n	8005366 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800535e:	1ad2      	subs	r2, r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	619a      	str	r2, [r3, #24]
 8005364:	e002      	b.n	800536c <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2200      	movs	r2, #0
 800536a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	2b00      	cmp	r3, #0
 8005372:	f040 80c0 	bne.w	80054f6 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d126      	bne.n	80053cc <HAL_PCD_EP_DB_Transmit+0x482>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800538c:	b29b      	uxth	r3, r3
 800538e:	461a      	mov	r2, r3
 8005390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005392:	4413      	add	r3, r2
 8005394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	011a      	lsls	r2, r3, #4
 800539c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800539e:	4413      	add	r3, r2
 80053a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80053a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b4:	801a      	strh	r2, [r3, #0]
 80053b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c8:	801a      	strh	r2, [r3, #0]
 80053ca:	e01a      	b.n	8005402 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d116      	bne.n	8005402 <HAL_PCD_EP_DB_Transmit+0x4b8>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	667b      	str	r3, [r7, #100]	; 0x64
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	461a      	mov	r2, r3
 80053e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053e8:	4413      	add	r3, r2
 80053ea:	667b      	str	r3, [r7, #100]	; 0x64
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	011a      	lsls	r2, r3, #4
 80053f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053f4:	4413      	add	r3, r2
 80053f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053fa:	663b      	str	r3, [r7, #96]	; 0x60
 80053fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053fe:	2200      	movs	r2, #0
 8005400:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	677b      	str	r3, [r7, #116]	; 0x74
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d12b      	bne.n	8005468 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800541e:	b29b      	uxth	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005424:	4413      	add	r3, r2
 8005426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	011a      	lsls	r2, r3, #4
 800542e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005430:	4413      	add	r3, r2
 8005432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800543a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29b      	uxth	r3, r3
 8005442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005446:	b29a      	uxth	r2, r3
 8005448:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800544c:	801a      	strh	r2, [r3, #0]
 800544e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29b      	uxth	r3, r3
 8005456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800545a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545e:	b29a      	uxth	r2, r3
 8005460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	e017      	b.n	8005498 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	785b      	ldrb	r3, [r3, #1]
 800546c:	2b01      	cmp	r3, #1
 800546e:	d113      	bne.n	8005498 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800547e:	4413      	add	r3, r2
 8005480:	677b      	str	r3, [r7, #116]	; 0x74
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	011a      	lsls	r2, r3, #4
 8005488:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800548a:	4413      	add	r3, r2
 800548c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005490:	673b      	str	r3, [r7, #112]	; 0x70
 8005492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005494:	2200      	movs	r2, #0
 8005496:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f006 fc2b 	bl	800bcfa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054a4:	88fb      	ldrh	r3, [r7, #6]
 80054a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f040 811a 	bne.w	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	881b      	ldrh	r3, [r3, #0]
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ca:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	461a      	mov	r2, r3
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	441a      	add	r2, r3
 80054dc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80054e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	8013      	strh	r3, [r2, #0]
 80054f4:	e0f6      	b.n	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d121      	bne.n	8005544 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800551a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	441a      	add	r2, r3
 800552c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005530:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005534:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	b29b      	uxth	r3, r3
 8005542:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800554a:	2b01      	cmp	r3, #1
 800554c:	f040 80ca 	bne.w	80056e4 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	695a      	ldr	r2, [r3, #20]
 8005554:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005558:	441a      	add	r2, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	69da      	ldr	r2, [r3, #28]
 8005562:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005566:	441a      	add	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	429a      	cmp	r2, r3
 8005576:	d30b      	bcc.n	8005590 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	6a1a      	ldr	r2, [r3, #32]
 8005584:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005588:	1ad2      	subs	r2, r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	621a      	str	r2, [r3, #32]
 800558e:	e017      	b.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d108      	bne.n	80055aa <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005598:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800559c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055a8:	e00a      	b.n	80055c0 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2200      	movs	r2, #0
 80055b6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	657b      	str	r3, [r7, #84]	; 0x54
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	785b      	ldrb	r3, [r3, #1]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d165      	bne.n	800569a <HAL_PCD_EP_DB_Transmit+0x750>
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055dc:	b29b      	uxth	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e2:	4413      	add	r3, r2
 80055e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	011a      	lsls	r2, r3, #4
 80055ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ee:	4413      	add	r3, r2
 80055f0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80055f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005600:	b29a      	uxth	r2, r3
 8005602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800560a:	2b3e      	cmp	r3, #62	; 0x3e
 800560c:	d91d      	bls.n	800564a <HAL_PCD_EP_DB_Transmit+0x700>
 800560e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	66bb      	str	r3, [r7, #104]	; 0x68
 8005616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	2b00      	cmp	r3, #0
 8005620:	d102      	bne.n	8005628 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005624:	3b01      	subs	r3, #1
 8005626:	66bb      	str	r3, [r7, #104]	; 0x68
 8005628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800562a:	881b      	ldrh	r3, [r3, #0]
 800562c:	b29a      	uxth	r2, r3
 800562e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005630:	b29b      	uxth	r3, r3
 8005632:	029b      	lsls	r3, r3, #10
 8005634:	b29b      	uxth	r3, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	b29b      	uxth	r3, r3
 800563a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800563e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005642:	b29a      	uxth	r2, r3
 8005644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005646:	801a      	strh	r2, [r3, #0]
 8005648:	e041      	b.n	80056ce <HAL_PCD_EP_DB_Transmit+0x784>
 800564a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800564e:	2b00      	cmp	r3, #0
 8005650:	d10a      	bne.n	8005668 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29b      	uxth	r3, r3
 8005658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005660:	b29a      	uxth	r2, r3
 8005662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005664:	801a      	strh	r2, [r3, #0]
 8005666:	e032      	b.n	80056ce <HAL_PCD_EP_DB_Transmit+0x784>
 8005668:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_PCD_EP_DB_Transmit+0x738>
 800567c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800567e:	3301      	adds	r3, #1
 8005680:	66bb      	str	r3, [r7, #104]	; 0x68
 8005682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005684:	881b      	ldrh	r3, [r3, #0]
 8005686:	b29a      	uxth	r2, r3
 8005688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800568a:	b29b      	uxth	r3, r3
 800568c:	029b      	lsls	r3, r3, #10
 800568e:	b29b      	uxth	r3, r3
 8005690:	4313      	orrs	r3, r2
 8005692:	b29a      	uxth	r2, r3
 8005694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	e019      	b.n	80056ce <HAL_PCD_EP_DB_Transmit+0x784>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d115      	bne.n	80056ce <HAL_PCD_EP_DB_Transmit+0x784>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	461a      	mov	r2, r3
 80056ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b0:	4413      	add	r3, r2
 80056b2:	657b      	str	r3, [r7, #84]	; 0x54
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	011a      	lsls	r2, r3, #4
 80056ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056bc:	4413      	add	r3, r2
 80056be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80056c2:	653b      	str	r3, [r7, #80]	; 0x50
 80056c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056cc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6959      	ldr	r1, [r3, #20]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	895a      	ldrh	r2, [r3, #10]
 80056da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80056de:	b29b      	uxth	r3, r3
 80056e0:	f004 fcc1 	bl	800a066 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	461a      	mov	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	881b      	ldrh	r3, [r3, #0]
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056fe:	82bb      	strh	r3, [r7, #20]
 8005700:	8abb      	ldrh	r3, [r7, #20]
 8005702:	f083 0310 	eor.w	r3, r3, #16
 8005706:	82bb      	strh	r3, [r7, #20]
 8005708:	8abb      	ldrh	r3, [r7, #20]
 800570a:	f083 0320 	eor.w	r3, r3, #32
 800570e:	82bb      	strh	r3, [r7, #20]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	441a      	add	r2, r3
 800571e:	8abb      	ldrh	r3, [r7, #20]
 8005720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800572c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005730:	b29b      	uxth	r3, r3
 8005732:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3790      	adds	r7, #144	; 0x90
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	607b      	str	r3, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	817b      	strh	r3, [r7, #10]
 800574c:	4613      	mov	r3, r2
 800574e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005750:	897b      	ldrh	r3, [r7, #10]
 8005752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800575c:	897b      	ldrh	r3, [r7, #10]
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e009      	b.n	8005788 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005774:	897a      	ldrh	r2, [r7, #10]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4413      	add	r3, r2
 8005786:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005788:	893b      	ldrh	r3, [r7, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d107      	bne.n	800579e <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	b29a      	uxth	r2, r3
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	80da      	strh	r2, [r3, #6]
 800579c:	e00b      	b.n	80057b6 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2201      	movs	r2, #1
 80057a2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	0c1b      	lsrs	r3, r3, #16
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	371c      	adds	r7, #28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bc80      	pop	{r7}
 80057c0:	4770      	bx	lr
	...

080057c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e272      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 8087 	beq.w	80058f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057e4:	4b92      	ldr	r3, [pc, #584]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	f003 030c 	and.w	r3, r3, #12
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d00c      	beq.n	800580a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80057f0:	4b8f      	ldr	r3, [pc, #572]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b08      	cmp	r3, #8
 80057fa:	d112      	bne.n	8005822 <HAL_RCC_OscConfig+0x5e>
 80057fc:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005808:	d10b      	bne.n	8005822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800580a:	4b89      	ldr	r3, [pc, #548]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005812:	2b00      	cmp	r3, #0
 8005814:	d06c      	beq.n	80058f0 <HAL_RCC_OscConfig+0x12c>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d168      	bne.n	80058f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e24c      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d106      	bne.n	800583a <HAL_RCC_OscConfig+0x76>
 800582c:	4b80      	ldr	r3, [pc, #512]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7f      	ldr	r2, [pc, #508]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	e02e      	b.n	8005898 <HAL_RCC_OscConfig+0xd4>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10c      	bne.n	800585c <HAL_RCC_OscConfig+0x98>
 8005842:	4b7b      	ldr	r3, [pc, #492]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a7a      	ldr	r2, [pc, #488]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	4b78      	ldr	r3, [pc, #480]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a77      	ldr	r2, [pc, #476]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	e01d      	b.n	8005898 <HAL_RCC_OscConfig+0xd4>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005864:	d10c      	bne.n	8005880 <HAL_RCC_OscConfig+0xbc>
 8005866:	4b72      	ldr	r3, [pc, #456]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a71      	ldr	r2, [pc, #452]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800586c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4b6f      	ldr	r3, [pc, #444]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a6e      	ldr	r2, [pc, #440]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800587c:	6013      	str	r3, [r2, #0]
 800587e:	e00b      	b.n	8005898 <HAL_RCC_OscConfig+0xd4>
 8005880:	4b6b      	ldr	r3, [pc, #428]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a6a      	ldr	r2, [pc, #424]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4b68      	ldr	r3, [pc, #416]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a67      	ldr	r2, [pc, #412]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005896:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d013      	beq.n	80058c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fd fad8 	bl	8002e54 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058a8:	f7fd fad4 	bl	8002e54 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e200      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ba:	4b5d      	ldr	r3, [pc, #372]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCC_OscConfig+0xe4>
 80058c6:	e014      	b.n	80058f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c8:	f7fd fac4 	bl	8002e54 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058d0:	f7fd fac0 	bl	8002e54 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b64      	cmp	r3, #100	; 0x64
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e1ec      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058e2:	4b53      	ldr	r3, [pc, #332]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1f0      	bne.n	80058d0 <HAL_RCC_OscConfig+0x10c>
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d063      	beq.n	80059c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058fe:	4b4c      	ldr	r3, [pc, #304]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f003 030c 	and.w	r3, r3, #12
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800590a:	4b49      	ldr	r3, [pc, #292]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	f003 030c 	and.w	r3, r3, #12
 8005912:	2b08      	cmp	r3, #8
 8005914:	d11c      	bne.n	8005950 <HAL_RCC_OscConfig+0x18c>
 8005916:	4b46      	ldr	r3, [pc, #280]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d116      	bne.n	8005950 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005922:	4b43      	ldr	r3, [pc, #268]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d005      	beq.n	800593a <HAL_RCC_OscConfig+0x176>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e1c0      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	4b3d      	ldr	r3, [pc, #244]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	00db      	lsls	r3, r3, #3
 8005948:	4939      	ldr	r1, [pc, #228]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800594a:	4313      	orrs	r3, r2
 800594c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800594e:	e03a      	b.n	80059c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d020      	beq.n	800599a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005958:	4b36      	ldr	r3, [pc, #216]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800595a:	2201      	movs	r2, #1
 800595c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800595e:	f7fd fa79 	bl	8002e54 <HAL_GetTick>
 8005962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005964:	e008      	b.n	8005978 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005966:	f7fd fa75 	bl	8002e54 <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d901      	bls.n	8005978 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005974:	2303      	movs	r3, #3
 8005976:	e1a1      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005978:	4b2d      	ldr	r3, [pc, #180]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0f0      	beq.n	8005966 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005984:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	00db      	lsls	r3, r3, #3
 8005992:	4927      	ldr	r1, [pc, #156]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	600b      	str	r3, [r1, #0]
 8005998:	e015      	b.n	80059c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800599a:	4b26      	ldr	r3, [pc, #152]	; (8005a34 <HAL_RCC_OscConfig+0x270>)
 800599c:	2200      	movs	r2, #0
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a0:	f7fd fa58 	bl	8002e54 <HAL_GetTick>
 80059a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a6:	e008      	b.n	80059ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80059a8:	f7fd fa54 	bl	8002e54 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d901      	bls.n	80059ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e180      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1f0      	bne.n	80059a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d03a      	beq.n	8005a48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d019      	beq.n	8005a0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059da:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <HAL_RCC_OscConfig+0x274>)
 80059dc:	2201      	movs	r2, #1
 80059de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059e0:	f7fd fa38 	bl	8002e54 <HAL_GetTick>
 80059e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e6:	e008      	b.n	80059fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e8:	f7fd fa34 	bl	8002e54 <HAL_GetTick>
 80059ec:	4602      	mov	r2, r0
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1ad3      	subs	r3, r2, r3
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e160      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059fa:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <HAL_RCC_OscConfig+0x26c>)
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0f0      	beq.n	80059e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005a06:	2001      	movs	r0, #1
 8005a08:	f000 faba 	bl	8005f80 <RCC_Delay>
 8005a0c:	e01c      	b.n	8005a48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <HAL_RCC_OscConfig+0x274>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a14:	f7fd fa1e 	bl	8002e54 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a1a:	e00f      	b.n	8005a3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a1c:	f7fd fa1a 	bl	8002e54 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d908      	bls.n	8005a3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e146      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
 8005a2e:	bf00      	nop
 8005a30:	40021000 	.word	0x40021000
 8005a34:	42420000 	.word	0x42420000
 8005a38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a3c:	4b92      	ldr	r3, [pc, #584]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e9      	bne.n	8005a1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 80a6 	beq.w	8005ba2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a56:	2300      	movs	r3, #0
 8005a58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a5a:	4b8b      	ldr	r3, [pc, #556]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a66:	4b88      	ldr	r3, [pc, #544]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	4a87      	ldr	r2, [pc, #540]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a70:	61d3      	str	r3, [r2, #28]
 8005a72:	4b85      	ldr	r3, [pc, #532]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a82:	4b82      	ldr	r3, [pc, #520]	; (8005c8c <HAL_RCC_OscConfig+0x4c8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d118      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a8e:	4b7f      	ldr	r3, [pc, #508]	; (8005c8c <HAL_RCC_OscConfig+0x4c8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7e      	ldr	r2, [pc, #504]	; (8005c8c <HAL_RCC_OscConfig+0x4c8>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a9a:	f7fd f9db 	bl	8002e54 <HAL_GetTick>
 8005a9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa0:	e008      	b.n	8005ab4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa2:	f7fd f9d7 	bl	8002e54 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b64      	cmp	r3, #100	; 0x64
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e103      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	4b75      	ldr	r3, [pc, #468]	; (8005c8c <HAL_RCC_OscConfig+0x4c8>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0f0      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x312>
 8005ac8:	4b6f      	ldr	r3, [pc, #444]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	4a6e      	ldr	r2, [pc, #440]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6213      	str	r3, [r2, #32]
 8005ad4:	e02d      	b.n	8005b32 <HAL_RCC_OscConfig+0x36e>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0x334>
 8005ade:	4b6a      	ldr	r3, [pc, #424]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	4a69      	ldr	r2, [pc, #420]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	6213      	str	r3, [r2, #32]
 8005aea:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	4a66      	ldr	r2, [pc, #408]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005af0:	f023 0304 	bic.w	r3, r3, #4
 8005af4:	6213      	str	r3, [r2, #32]
 8005af6:	e01c      	b.n	8005b32 <HAL_RCC_OscConfig+0x36e>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b05      	cmp	r3, #5
 8005afe:	d10c      	bne.n	8005b1a <HAL_RCC_OscConfig+0x356>
 8005b00:	4b61      	ldr	r3, [pc, #388]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	4a60      	ldr	r2, [pc, #384]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b06:	f043 0304 	orr.w	r3, r3, #4
 8005b0a:	6213      	str	r3, [r2, #32]
 8005b0c:	4b5e      	ldr	r3, [pc, #376]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b0e:	6a1b      	ldr	r3, [r3, #32]
 8005b10:	4a5d      	ldr	r2, [pc, #372]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6213      	str	r3, [r2, #32]
 8005b18:	e00b      	b.n	8005b32 <HAL_RCC_OscConfig+0x36e>
 8005b1a:	4b5b      	ldr	r3, [pc, #364]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	4a5a      	ldr	r2, [pc, #360]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b20:	f023 0301 	bic.w	r3, r3, #1
 8005b24:	6213      	str	r3, [r2, #32]
 8005b26:	4b58      	ldr	r3, [pc, #352]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	4a57      	ldr	r2, [pc, #348]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b2c:	f023 0304 	bic.w	r3, r3, #4
 8005b30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d015      	beq.n	8005b66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b3a:	f7fd f98b 	bl	8002e54 <HAL_GetTick>
 8005b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b40:	e00a      	b.n	8005b58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b42:	f7fd f987 	bl	8002e54 <HAL_GetTick>
 8005b46:	4602      	mov	r2, r0
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d901      	bls.n	8005b58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	e0b1      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b58:	4b4b      	ldr	r3, [pc, #300]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	f003 0302 	and.w	r3, r3, #2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d0ee      	beq.n	8005b42 <HAL_RCC_OscConfig+0x37e>
 8005b64:	e014      	b.n	8005b90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b66:	f7fd f975 	bl	8002e54 <HAL_GetTick>
 8005b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b6c:	e00a      	b.n	8005b84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6e:	f7fd f971 	bl	8002e54 <HAL_GetTick>
 8005b72:	4602      	mov	r2, r0
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	1ad3      	subs	r3, r2, r3
 8005b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e09b      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b84:	4b40      	ldr	r3, [pc, #256]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1ee      	bne.n	8005b6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b90:	7dfb      	ldrb	r3, [r7, #23]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d105      	bne.n	8005ba2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b96:	4b3c      	ldr	r3, [pc, #240]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	4a3b      	ldr	r2, [pc, #236]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8087 	beq.w	8005cba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005bac:	4b36      	ldr	r3, [pc, #216]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 030c 	and.w	r3, r3, #12
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d061      	beq.n	8005c7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	2b02      	cmp	r3, #2
 8005bbe:	d146      	bne.n	8005c4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc0:	4b33      	ldr	r3, [pc, #204]	; (8005c90 <HAL_RCC_OscConfig+0x4cc>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bc6:	f7fd f945 	bl	8002e54 <HAL_GetTick>
 8005bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bce:	f7fd f941 	bl	8002e54 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e06d      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005be0:	4b29      	ldr	r3, [pc, #164]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bf4:	d108      	bne.n	8005c08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bf6:	4b24      	ldr	r3, [pc, #144]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	4921      	ldr	r1, [pc, #132]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c08:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a19      	ldr	r1, [r3, #32]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c18:	430b      	orrs	r3, r1
 8005c1a:	491b      	ldr	r1, [pc, #108]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <HAL_RCC_OscConfig+0x4cc>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c26:	f7fd f915 	bl	8002e54 <HAL_GetTick>
 8005c2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c2c:	e008      	b.n	8005c40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2e:	f7fd f911 	bl	8002e54 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d901      	bls.n	8005c40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005c3c:	2303      	movs	r3, #3
 8005c3e:	e03d      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005c40:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d0f0      	beq.n	8005c2e <HAL_RCC_OscConfig+0x46a>
 8005c4c:	e035      	b.n	8005cba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c4e:	4b10      	ldr	r3, [pc, #64]	; (8005c90 <HAL_RCC_OscConfig+0x4cc>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c54:	f7fd f8fe 	bl	8002e54 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c5c:	f7fd f8fa 	bl	8002e54 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e026      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c6e:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <HAL_RCC_OscConfig+0x4c4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x498>
 8005c7a:	e01e      	b.n	8005cba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d107      	bne.n	8005c94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e019      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
 8005c88:	40021000 	.word	0x40021000
 8005c8c:	40007000 	.word	0x40007000
 8005c90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c94:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_RCC_OscConfig+0x500>)
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6a1b      	ldr	r3, [r3, #32]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d106      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d001      	beq.n	8005cba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e0d0      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cdc:	4b6a      	ldr	r3, [pc, #424]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d910      	bls.n	8005d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cea:	4b67      	ldr	r3, [pc, #412]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f023 0207 	bic.w	r2, r3, #7
 8005cf2:	4965      	ldr	r1, [pc, #404]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfa:	4b63      	ldr	r3, [pc, #396]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0307 	and.w	r3, r3, #7
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d001      	beq.n	8005d0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e0b8      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d020      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d24:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	4a58      	ldr	r2, [pc, #352]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d3c:	4b53      	ldr	r3, [pc, #332]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	4a52      	ldr	r2, [pc, #328]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d42:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005d46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d48:	4b50      	ldr	r3, [pc, #320]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	494d      	ldr	r1, [pc, #308]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d040      	beq.n	8005de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d107      	bne.n	8005d7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	4b47      	ldr	r3, [pc, #284]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d115      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e07f      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d107      	bne.n	8005d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d86:	4b41      	ldr	r3, [pc, #260]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e073      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d96:	4b3d      	ldr	r3, [pc, #244]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e06b      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005da6:	4b39      	ldr	r3, [pc, #228]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f023 0203 	bic.w	r2, r3, #3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	4936      	ldr	r1, [pc, #216]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005db8:	f7fd f84c 	bl	8002e54 <HAL_GetTick>
 8005dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dc0:	f7fd f848 	bl	8002e54 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e053      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dd6:	4b2d      	ldr	r3, [pc, #180]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	f003 020c 	and.w	r2, r3, #12
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d1eb      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de8:	4b27      	ldr	r3, [pc, #156]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d210      	bcs.n	8005e18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005df6:	4b24      	ldr	r3, [pc, #144]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f023 0207 	bic.w	r2, r3, #7
 8005dfe:	4922      	ldr	r1, [pc, #136]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e06:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCC_ClockConfig+0x1c0>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e032      	b.n	8005e7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e24:	4b19      	ldr	r3, [pc, #100]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	4916      	ldr	r1, [pc, #88]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	490e      	ldr	r1, [pc, #56]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e56:	f000 f821 	bl	8005e9c <HAL_RCC_GetSysClockFreq>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	4b0b      	ldr	r3, [pc, #44]	; (8005e8c <HAL_RCC_ClockConfig+0x1c4>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	490a      	ldr	r1, [pc, #40]	; (8005e90 <HAL_RCC_ClockConfig+0x1c8>)
 8005e68:	5ccb      	ldrb	r3, [r1, r3]
 8005e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <HAL_RCC_ClockConfig+0x1cc>)
 8005e70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e72:	4b09      	ldr	r3, [pc, #36]	; (8005e98 <HAL_RCC_ClockConfig+0x1d0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7fc ffaa 	bl	8002dd0 <HAL_InitTick>

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	40022000 	.word	0x40022000
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	0800ded4 	.word	0x0800ded4
 8005e94:	20000070 	.word	0x20000070
 8005e98:	20000074 	.word	0x20000074

08005e9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005eb6:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d002      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x30>
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d003      	beq.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x36>
 8005eca:	e027      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005ece:	613b      	str	r3, [r7, #16]
      break;
 8005ed0:	e027      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	0c9b      	lsrs	r3, r3, #18
 8005ed6:	f003 030f 	and.w	r3, r3, #15
 8005eda:	4a17      	ldr	r2, [pc, #92]	; (8005f38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005edc:	5cd3      	ldrb	r3, [r2, r3]
 8005ede:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d010      	beq.n	8005f0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005eea:	4b11      	ldr	r3, [pc, #68]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x94>)
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	0c5b      	lsrs	r3, r3, #17
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a0d      	ldr	r2, [pc, #52]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005efe:	fb03 f202 	mul.w	r2, r3, r2
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f08:	617b      	str	r3, [r7, #20]
 8005f0a:	e004      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a0c      	ldr	r2, [pc, #48]	; (8005f40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005f10:	fb02 f303 	mul.w	r3, r2, r3
 8005f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	613b      	str	r3, [r7, #16]
      break;
 8005f1a:	e002      	b.n	8005f22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005f1c:	4b05      	ldr	r3, [pc, #20]	; (8005f34 <HAL_RCC_GetSysClockFreq+0x98>)
 8005f1e:	613b      	str	r3, [r7, #16]
      break;
 8005f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f22:	693b      	ldr	r3, [r7, #16]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	40021000 	.word	0x40021000
 8005f34:	007a1200 	.word	0x007a1200
 8005f38:	0800deec 	.word	0x0800deec
 8005f3c:	0800defc 	.word	0x0800defc
 8005f40:	003d0900 	.word	0x003d0900

08005f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f44:	b480      	push	{r7}
 8005f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <HAL_RCC_GetHCLKFreq+0x10>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bc80      	pop	{r7}
 8005f52:	4770      	bx	lr
 8005f54:	20000070 	.word	0x20000070

08005f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f5c:	f7ff fff2 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8005f60:	4602      	mov	r2, r0
 8005f62:	4b05      	ldr	r3, [pc, #20]	; (8005f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	0adb      	lsrs	r3, r3, #11
 8005f68:	f003 0307 	and.w	r3, r3, #7
 8005f6c:	4903      	ldr	r1, [pc, #12]	; (8005f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f6e:	5ccb      	ldrb	r3, [r1, r3]
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	0800dee4 	.word	0x0800dee4

08005f80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f88:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <RCC_Delay+0x34>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a0a      	ldr	r2, [pc, #40]	; (8005fb8 <RCC_Delay+0x38>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	0a5b      	lsrs	r3, r3, #9
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f9c:	bf00      	nop
  }
  while (Delay --);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	1e5a      	subs	r2, r3, #1
 8005fa2:	60fa      	str	r2, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f9      	bne.n	8005f9c <RCC_Delay+0x1c>
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	20000070 	.word	0x20000070
 8005fb8:	10624dd3 	.word	0x10624dd3

08005fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d07d      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fdc:	4b4f      	ldr	r3, [pc, #316]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fde:	69db      	ldr	r3, [r3, #28]
 8005fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10d      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fe8:	4b4c      	ldr	r3, [pc, #304]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	4a4b      	ldr	r2, [pc, #300]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff2:	61d3      	str	r3, [r2, #28]
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006000:	2301      	movs	r3, #1
 8006002:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d118      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006010:	4b43      	ldr	r3, [pc, #268]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a42      	ldr	r2, [pc, #264]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800601c:	f7fc ff1a 	bl	8002e54 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006022:	e008      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006024:	f7fc ff16 	bl	8002e54 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b64      	cmp	r3, #100	; 0x64
 8006030:	d901      	bls.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e06d      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006036:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0f0      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006042:	4b36      	ldr	r3, [pc, #216]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d02e      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	429a      	cmp	r2, r3
 800605e:	d027      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006060:	4b2e      	ldr	r3, [pc, #184]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006068:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800606a:	4b2e      	ldr	r3, [pc, #184]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006070:	4b2c      	ldr	r3, [pc, #176]	; (8006124 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d014      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fc fee5 	bl	8002e54 <HAL_GetTick>
 800608a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800608c:	e00a      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608e:	f7fc fee1 	bl	8002e54 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	f241 3288 	movw	r2, #5000	; 0x1388
 800609c:	4293      	cmp	r3, r2
 800609e:	d901      	bls.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80060a0:	2303      	movs	r3, #3
 80060a2:	e036      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060a4:	4b1d      	ldr	r3, [pc, #116]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ee      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b0:	4b1a      	ldr	r3, [pc, #104]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	4917      	ldr	r1, [pc, #92]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060be:	4313      	orrs	r3, r2
 80060c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060c2:	7dfb      	ldrb	r3, [r7, #23]
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d105      	bne.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060c8:	4b14      	ldr	r3, [pc, #80]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	4a13      	ldr	r2, [pc, #76]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0302 	and.w	r3, r3, #2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d008      	beq.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060e0:	4b0e      	ldr	r3, [pc, #56]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	490b      	ldr	r1, [pc, #44]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0310 	and.w	r3, r3, #16
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d008      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060fe:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	4904      	ldr	r1, [pc, #16]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40021000 	.word	0x40021000
 8006120:	40007000 	.word	0x40007000
 8006124:	42420440 	.word	0x42420440

08006128 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
 8006138:	2300      	movs	r3, #0
 800613a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b10      	cmp	r3, #16
 8006148:	d00a      	beq.n	8006160 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2b10      	cmp	r3, #16
 800614e:	f200 808a 	bhi.w	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d045      	beq.n	80061e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d075      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800615e:	e082      	b.n	8006266 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8006160:	4b46      	ldr	r3, [pc, #280]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006166:	4b45      	ldr	r3, [pc, #276]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d07b      	beq.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	0c9b      	lsrs	r3, r3, #18
 8006176:	f003 030f 	and.w	r3, r3, #15
 800617a:	4a41      	ldr	r2, [pc, #260]	; (8006280 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800617c:	5cd3      	ldrb	r3, [r2, r3]
 800617e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d015      	beq.n	80061b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800618a:	4b3c      	ldr	r3, [pc, #240]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	0c5b      	lsrs	r3, r3, #17
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	4a3b      	ldr	r2, [pc, #236]	; (8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8006196:	5cd3      	ldrb	r3, [r2, r3]
 8006198:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00d      	beq.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80061a4:	4a38      	ldr	r2, [pc, #224]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e004      	b.n	80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4a34      	ldr	r2, [pc, #208]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80061ba:	fb02 f303 	mul.w	r3, r2, r3
 80061be:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061c0:	4b2e      	ldr	r3, [pc, #184]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061cc:	d102      	bne.n	80061d4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	61bb      	str	r3, [r7, #24]
      break;
 80061d2:	e04a      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4a2d      	ldr	r2, [pc, #180]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80061da:	fba2 2303 	umull	r2, r3, r2, r3
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	61bb      	str	r3, [r7, #24]
      break;
 80061e2:	e042      	b.n	800626a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f4:	d108      	bne.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006204:	61bb      	str	r3, [r7, #24]
 8006206:	e01f      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006212:	d109      	bne.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006214:	4b19      	ldr	r3, [pc, #100]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d003      	beq.n	8006228 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006220:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006224:	61bb      	str	r3, [r7, #24]
 8006226:	e00f      	b.n	8006248 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800622e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006232:	d11c      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006234:	4b11      	ldr	r3, [pc, #68]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800623c:	2b00      	cmp	r3, #0
 800623e:	d016      	beq.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006240:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006244:	61bb      	str	r3, [r7, #24]
      break;
 8006246:	e012      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006248:	e011      	b.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800624a:	f7ff fe85 	bl	8005f58 <HAL_RCC_GetPCLK2Freq>
 800624e:	4602      	mov	r2, r0
 8006250:	4b0a      	ldr	r3, [pc, #40]	; (800627c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	0b9b      	lsrs	r3, r3, #14
 8006256:	f003 0303 	and.w	r3, r3, #3
 800625a:	3301      	adds	r3, #1
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006262:	61bb      	str	r3, [r7, #24]
      break;
 8006264:	e004      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006266:	bf00      	nop
 8006268:	e002      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800626a:	bf00      	nop
 800626c:	e000      	b.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800626e:	bf00      	nop
    }
  }
  return (frequency);
 8006270:	69bb      	ldr	r3, [r7, #24]
}
 8006272:	4618      	mov	r0, r3
 8006274:	3720      	adds	r7, #32
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000
 8006280:	0800df00 	.word	0x0800df00
 8006284:	0800df10 	.word	0x0800df10
 8006288:	007a1200 	.word	0x007a1200
 800628c:	003d0900 	.word	0x003d0900
 8006290:	aaaaaaab 	.word	0xaaaaaaab

08006294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e076      	b.n	8006394 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d108      	bne.n	80062c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062b6:	d009      	beq.n	80062cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	61da      	str	r2, [r3, #28]
 80062be:	e005      	b.n	80062cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fc fc08 	bl	8002afc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2202      	movs	r2, #2
 80062f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006302:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800631e:	431a      	orrs	r2, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	431a      	orrs	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	431a      	orrs	r2, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800633c:	431a      	orrs	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006346:	431a      	orrs	r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	ea42 0103 	orr.w	r1, r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	430a      	orrs	r2, r1
 8006362:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	0c1a      	lsrs	r2, r3, #16
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f002 0204 	and.w	r2, r2, #4
 8006372:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006382:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b088      	sub	sp, #32
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_SPI_Transmit+0x22>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e12d      	b.n	800661a <HAL_SPI_Transmit+0x27e>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063c6:	f7fc fd45 	bl	8002e54 <HAL_GetTick>
 80063ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80063cc:	88fb      	ldrh	r3, [r7, #6]
 80063ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d002      	beq.n	80063e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80063dc:	2302      	movs	r3, #2
 80063de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063e0:	e116      	b.n	8006610 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_SPI_Transmit+0x52>
 80063e8:	88fb      	ldrh	r3, [r7, #6]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80063f2:	e10d      	b.n	8006610 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2203      	movs	r2, #3
 80063f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	88fa      	ldrh	r2, [r7, #6]
 8006412:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2200      	movs	r2, #0
 8006430:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643a:	d10f      	bne.n	800645c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800645a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b40      	cmp	r3, #64	; 0x40
 8006468:	d007      	beq.n	800647a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006478:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006482:	d14f      	bne.n	8006524 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_SPI_Transmit+0xf6>
 800648c:	8afb      	ldrh	r3, [r7, #22]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d142      	bne.n	8006518 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	1c9a      	adds	r2, r3, #2
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b29a      	uxth	r2, r3
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80064b6:	e02f      	b.n	8006518 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d112      	bne.n	80064ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ca:	881a      	ldrh	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064d6:	1c9a      	adds	r2, r3, #2
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80064ea:	e015      	b.n	8006518 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ec:	f7fc fcb2 	bl	8002e54 <HAL_GetTick>
 80064f0:	4602      	mov	r2, r0
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	1ad3      	subs	r3, r2, r3
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d803      	bhi.n	8006504 <HAL_SPI_Transmit+0x168>
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006502:	d102      	bne.n	800650a <HAL_SPI_Transmit+0x16e>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8006516:	e07b      	b.n	8006610 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651c:	b29b      	uxth	r3, r3
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1ca      	bne.n	80064b8 <HAL_SPI_Transmit+0x11c>
 8006522:	e050      	b.n	80065c6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <HAL_SPI_Transmit+0x196>
 800652c:	8afb      	ldrh	r3, [r7, #22]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d144      	bne.n	80065bc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	330c      	adds	r3, #12
 800653c:	7812      	ldrb	r2, [r2, #0]
 800653e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006544:	1c5a      	adds	r2, r3, #1
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654e:	b29b      	uxth	r3, r3
 8006550:	3b01      	subs	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006558:	e030      	b.n	80065bc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0302 	and.w	r3, r3, #2
 8006564:	2b02      	cmp	r3, #2
 8006566:	d113      	bne.n	8006590 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	7812      	ldrb	r2, [r2, #0]
 8006574:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29a      	uxth	r2, r3
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	86da      	strh	r2, [r3, #54]	; 0x36
 800658e:	e015      	b.n	80065bc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006590:	f7fc fc60 	bl	8002e54 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d803      	bhi.n	80065a8 <HAL_SPI_Transmit+0x20c>
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065a6:	d102      	bne.n	80065ae <HAL_SPI_Transmit+0x212>
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80065ba:	e029      	b.n	8006610 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1c9      	bne.n	800655a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fa6e 	bl	8006aac <SPI_EndRxTxTransaction>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10a      	bne.n	80065fa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	77fb      	strb	r3, [r7, #31]
 8006606:	e003      	b.n	8006610 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006618:	7ffb      	ldrb	r3, [r7, #31]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3720      	adds	r7, #32
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b08c      	sub	sp, #48	; 0x30
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
 800662e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006630:	2301      	movs	r3, #1
 8006632:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006640:	2b01      	cmp	r3, #1
 8006642:	d101      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x26>
 8006644:	2302      	movs	r3, #2
 8006646:	e198      	b.n	800697a <HAL_SPI_TransmitReceive+0x358>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006650:	f7fc fc00 	bl	8002e54 <HAL_GetTick>
 8006654:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800665c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006666:	887b      	ldrh	r3, [r7, #2]
 8006668:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800666a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800666e:	2b01      	cmp	r3, #1
 8006670:	d00f      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x70>
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006678:	d107      	bne.n	800668a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d103      	bne.n	800668a <HAL_SPI_TransmitReceive+0x68>
 8006682:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006686:	2b04      	cmp	r3, #4
 8006688:	d003      	beq.n	8006692 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800668a:	2302      	movs	r3, #2
 800668c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006690:	e16d      	b.n	800696e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x82>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_SPI_TransmitReceive+0x82>
 800669e:	887b      	ldrh	r3, [r7, #2]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d103      	bne.n	80066ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80066aa:	e160      	b.n	800696e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b04      	cmp	r3, #4
 80066b6:	d003      	beq.n	80066c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2205      	movs	r2, #5
 80066bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	887a      	ldrh	r2, [r7, #2]
 80066d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	887a      	ldrh	r2, [r7, #2]
 80066d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	887a      	ldrh	r2, [r7, #2]
 80066e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	887a      	ldrh	r2, [r7, #2]
 80066e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d007      	beq.n	8006714 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800671c:	d17c      	bne.n	8006818 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_TransmitReceive+0x10a>
 8006726:	8b7b      	ldrh	r3, [r7, #26]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d16a      	bne.n	8006802 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006730:	881a      	ldrh	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	1c9a      	adds	r2, r3, #2
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006750:	e057      	b.n	8006802 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f003 0302 	and.w	r3, r3, #2
 800675c:	2b02      	cmp	r3, #2
 800675e:	d11b      	bne.n	8006798 <HAL_SPI_TransmitReceive+0x176>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d016      	beq.n	8006798 <HAL_SPI_TransmitReceive+0x176>
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	2b01      	cmp	r3, #1
 800676e:	d113      	bne.n	8006798 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006774:	881a      	ldrh	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	1c9a      	adds	r2, r3, #2
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006794:	2300      	movs	r3, #0
 8006796:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d119      	bne.n	80067da <HAL_SPI_TransmitReceive+0x1b8>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d014      	beq.n	80067da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ba:	b292      	uxth	r2, r2
 80067bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	3b01      	subs	r3, #1
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80067d6:	2301      	movs	r3, #1
 80067d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80067da:	f7fc fb3b 	bl	8002e54 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d80b      	bhi.n	8006802 <HAL_SPI_TransmitReceive+0x1e0>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067f0:	d007      	beq.n	8006802 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006800:	e0b5      	b.n	800696e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006806:	b29b      	uxth	r3, r3
 8006808:	2b00      	cmp	r3, #0
 800680a:	d1a2      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x130>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d19d      	bne.n	8006752 <HAL_SPI_TransmitReceive+0x130>
 8006816:	e080      	b.n	800691a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x204>
 8006820:	8b7b      	ldrh	r3, [r7, #26]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d16f      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	7812      	ldrb	r2, [r2, #0]
 8006832:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006842:	b29b      	uxth	r3, r3
 8006844:	3b01      	subs	r3, #1
 8006846:	b29a      	uxth	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800684c:	e05b      	b.n	8006906 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b02      	cmp	r3, #2
 800685a:	d11c      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x274>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006860:	b29b      	uxth	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d017      	beq.n	8006896 <HAL_SPI_TransmitReceive+0x274>
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2b01      	cmp	r3, #1
 800686a:	d114      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	7812      	ldrb	r2, [r2, #0]
 8006878:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	1c5a      	adds	r2, r3, #1
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006888:	b29b      	uxth	r3, r3
 800688a:	3b01      	subs	r3, #1
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d119      	bne.n	80068d8 <HAL_SPI_TransmitReceive+0x2b6>
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d014      	beq.n	80068d8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	3b01      	subs	r3, #1
 80068ce:	b29a      	uxth	r2, r3
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80068d4:	2301      	movs	r3, #1
 80068d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80068d8:	f7fc fabc 	bl	8002e54 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d803      	bhi.n	80068f0 <HAL_SPI_TransmitReceive+0x2ce>
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ee:	d102      	bne.n	80068f6 <HAL_SPI_TransmitReceive+0x2d4>
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8006904:	e033      	b.n	800696e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800690a:	b29b      	uxth	r3, r3
 800690c:	2b00      	cmp	r3, #0
 800690e:	d19e      	bne.n	800684e <HAL_SPI_TransmitReceive+0x22c>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006914:	b29b      	uxth	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d199      	bne.n	800684e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800691a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800691c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f8c4 	bl	8006aac <SPI_EndRxTxTransaction>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d006      	beq.n	8006938 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006936:	e01a      	b.n	800696e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006940:	2300      	movs	r3, #0
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	617b      	str	r3, [r7, #20]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695a:	2b00      	cmp	r3, #0
 800695c:	d003      	beq.n	8006966 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006964:	e003      	b.n	800696e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800697a:	4618      	mov	r0, r3
 800697c:	3730      	adds	r7, #48	; 0x30
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8006982:	b480      	push	{r7}
 8006984:	b083      	sub	sp, #12
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006990:	b2db      	uxtb	r3, r3
}
 8006992:	4618      	mov	r0, r3
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	bc80      	pop	{r7}
 800699a:	4770      	bx	lr

0800699c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	603b      	str	r3, [r7, #0]
 80069a8:	4613      	mov	r3, r2
 80069aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069ac:	f7fc fa52 	bl	8002e54 <HAL_GetTick>
 80069b0:	4602      	mov	r2, r0
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	1a9b      	subs	r3, r3, r2
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	4413      	add	r3, r2
 80069ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069bc:	f7fc fa4a 	bl	8002e54 <HAL_GetTick>
 80069c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069c2:	4b39      	ldr	r3, [pc, #228]	; (8006aa8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	015b      	lsls	r3, r3, #5
 80069c8:	0d1b      	lsrs	r3, r3, #20
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	fb02 f303 	mul.w	r3, r2, r3
 80069d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d2:	e054      	b.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069da:	d050      	beq.n	8006a7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069dc:	f7fc fa3a 	bl	8002e54 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	69fa      	ldr	r2, [r7, #28]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d902      	bls.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d13d      	bne.n	8006a6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a0a:	d111      	bne.n	8006a30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a14:	d004      	beq.n	8006a20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a1e:	d107      	bne.n	8006a30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a38:	d10f      	bne.n	8006a5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e017      	b.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	4013      	ands	r3, r2
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	bf0c      	ite	eq
 8006a8e:	2301      	moveq	r3, #1
 8006a90:	2300      	movne	r3, #0
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	461a      	mov	r2, r3
 8006a96:	79fb      	ldrb	r3, [r7, #7]
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d19b      	bne.n	80069d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3720      	adds	r7, #32
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000070 	.word	0x20000070

08006aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af02      	add	r7, sp, #8
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2180      	movs	r1, #128	; 0x80
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff ff6a 	bl	800699c <SPI_WaitFlagStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e000      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e041      	b.n	8006b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fc f83e 	bl	8002b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 fc30 	bl	800738c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d001      	beq.n	8006ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e03a      	b.n	8006c16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a18      	ldr	r2, [pc, #96]	; (8006c20 <HAL_TIM_Base_Start_IT+0x98>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d00e      	beq.n	8006be0 <HAL_TIM_Base_Start_IT+0x58>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bca:	d009      	beq.n	8006be0 <HAL_TIM_Base_Start_IT+0x58>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a14      	ldr	r2, [pc, #80]	; (8006c24 <HAL_TIM_Base_Start_IT+0x9c>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d004      	beq.n	8006be0 <HAL_TIM_Base_Start_IT+0x58>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a13      	ldr	r2, [pc, #76]	; (8006c28 <HAL_TIM_Base_Start_IT+0xa0>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d111      	bne.n	8006c04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0307 	and.w	r3, r3, #7
 8006bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2b06      	cmp	r3, #6
 8006bf0:	d010      	beq.n	8006c14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0201 	orr.w	r2, r2, #1
 8006c00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c02:	e007      	b.n	8006c14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f042 0201 	orr.w	r2, r2, #1
 8006c12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40000400 	.word	0x40000400
 8006c28:	40000800 	.word	0x40000800

08006c2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e041      	b.n	8006cc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d106      	bne.n	8006c58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f839 	bl	8006cca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3304      	adds	r3, #4
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4610      	mov	r0, r2
 8006c6c:	f000 fb8e 	bl	800738c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3708      	adds	r7, #8
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc80      	pop	{r7}
 8006cda:	4770      	bx	lr

08006cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d109      	bne.n	8006d00 <HAL_TIM_PWM_Start+0x24>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	bf14      	ite	ne
 8006cf8:	2301      	movne	r3, #1
 8006cfa:	2300      	moveq	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e022      	b.n	8006d46 <HAL_TIM_PWM_Start+0x6a>
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d109      	bne.n	8006d1a <HAL_TIM_PWM_Start+0x3e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	bf14      	ite	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	2300      	moveq	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	e015      	b.n	8006d46 <HAL_TIM_PWM_Start+0x6a>
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d109      	bne.n	8006d34 <HAL_TIM_PWM_Start+0x58>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	bf14      	ite	ne
 8006d2c:	2301      	movne	r3, #1
 8006d2e:	2300      	moveq	r3, #0
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	e008      	b.n	8006d46 <HAL_TIM_PWM_Start+0x6a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	bf14      	ite	ne
 8006d40:	2301      	movne	r3, #1
 8006d42:	2300      	moveq	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e05e      	b.n	8006e0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d104      	bne.n	8006d5e <HAL_TIM_PWM_Start+0x82>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2202      	movs	r2, #2
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d5c:	e013      	b.n	8006d86 <HAL_TIM_PWM_Start+0xaa>
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	d104      	bne.n	8006d6e <HAL_TIM_PWM_Start+0x92>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2202      	movs	r2, #2
 8006d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d6c:	e00b      	b.n	8006d86 <HAL_TIM_PWM_Start+0xaa>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b08      	cmp	r3, #8
 8006d72:	d104      	bne.n	8006d7e <HAL_TIM_PWM_Start+0xa2>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d7c:	e003      	b.n	8006d86 <HAL_TIM_PWM_Start+0xaa>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	6839      	ldr	r1, [r7, #0]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fd7c 	bl	800788c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1e      	ldr	r2, [pc, #120]	; (8006e14 <HAL_TIM_PWM_Start+0x138>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d107      	bne.n	8006dae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <HAL_TIM_PWM_Start+0x138>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_TIM_PWM_Start+0xfa>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIM_PWM_Start+0xfa>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a14      	ldr	r2, [pc, #80]	; (8006e18 <HAL_TIM_PWM_Start+0x13c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_TIM_PWM_Start+0xfa>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a12      	ldr	r2, [pc, #72]	; (8006e1c <HAL_TIM_PWM_Start+0x140>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d111      	bne.n	8006dfa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	f003 0307 	and.w	r3, r3, #7
 8006de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b06      	cmp	r3, #6
 8006de6:	d010      	beq.n	8006e0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f042 0201 	orr.w	r2, r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df8:	e007      	b.n	8006e0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f042 0201 	orr.w	r2, r2, #1
 8006e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40000400 	.word	0x40000400
 8006e1c:	40000800 	.word	0x40000800

08006e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d122      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d11b      	bne.n	8006e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0202 	mvn.w	r2, #2
 8006e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 fa76 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006e68:	e005      	b.n	8006e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fa69 	bl	8007342 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa78 	bl	8007366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d122      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d11b      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0204 	mvn.w	r2, #4
 8006ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa4c 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006ebc:	e005      	b.n	8006eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa3f 	bl	8007342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa4e 	bl	8007366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0308 	and.w	r3, r3, #8
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	d122      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d11b      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0208 	mvn.w	r2, #8
 8006ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2204      	movs	r2, #4
 8006efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	f003 0303 	and.w	r3, r3, #3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa22 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006f10:	e005      	b.n	8006f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa15 	bl	8007342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa24 	bl	8007366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d122      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0310 	and.w	r3, r3, #16
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d11b      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0210 	mvn.w	r2, #16
 8006f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9f8 	bl	8007354 <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 f9eb 	bl	8007342 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9fa 	bl	8007366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d10e      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b01      	cmp	r3, #1
 8006f92:	d107      	bne.n	8006fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0201 	mvn.w	r2, #1
 8006f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7fa ff0e 	bl	8001dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d10e      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fbc:	2b80      	cmp	r3, #128	; 0x80
 8006fbe:	d107      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 fd3a 	bl	8007a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fda:	2b40      	cmp	r3, #64	; 0x40
 8006fdc:	d10e      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d107      	bne.n	8006ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f9be 	bl	8007378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691b      	ldr	r3, [r3, #16]
 8007002:	f003 0320 	and.w	r3, r3, #32
 8007006:	2b20      	cmp	r3, #32
 8007008:	d10e      	bne.n	8007028 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68db      	ldr	r3, [r3, #12]
 8007010:	f003 0320 	and.w	r3, r3, #32
 8007014:	2b20      	cmp	r3, #32
 8007016:	d107      	bne.n	8007028 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f06f 0220 	mvn.w	r2, #32
 8007020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fd05 	bl	8007a32 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007028:	bf00      	nop
 800702a:	3708      	adds	r7, #8
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800703c:	2300      	movs	r3, #0
 800703e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007046:	2b01      	cmp	r3, #1
 8007048:	d101      	bne.n	800704e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800704a:	2302      	movs	r3, #2
 800704c:	e0ae      	b.n	80071ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b0c      	cmp	r3, #12
 800705a:	f200 809f 	bhi.w	800719c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800705e:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007064:	08007099 	.word	0x08007099
 8007068:	0800719d 	.word	0x0800719d
 800706c:	0800719d 	.word	0x0800719d
 8007070:	0800719d 	.word	0x0800719d
 8007074:	080070d9 	.word	0x080070d9
 8007078:	0800719d 	.word	0x0800719d
 800707c:	0800719d 	.word	0x0800719d
 8007080:	0800719d 	.word	0x0800719d
 8007084:	0800711b 	.word	0x0800711b
 8007088:	0800719d 	.word	0x0800719d
 800708c:	0800719d 	.word	0x0800719d
 8007090:	0800719d 	.word	0x0800719d
 8007094:	0800715b 	.word	0x0800715b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f9d6 	bl	8007450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699a      	ldr	r2, [r3, #24]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0208 	orr.w	r2, r2, #8
 80070b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0204 	bic.w	r2, r2, #4
 80070c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6999      	ldr	r1, [r3, #24]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	619a      	str	r2, [r3, #24]
      break;
 80070d6:	e064      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68b9      	ldr	r1, [r7, #8]
 80070de:	4618      	mov	r0, r3
 80070e0:	f000 fa1c 	bl	800751c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	699a      	ldr	r2, [r3, #24]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80070f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6999      	ldr	r1, [r3, #24]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	021a      	lsls	r2, r3, #8
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	619a      	str	r2, [r3, #24]
      break;
 8007118:	e043      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68b9      	ldr	r1, [r7, #8]
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fa65 	bl	80075f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f042 0208 	orr.w	r2, r2, #8
 8007134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0204 	bic.w	r2, r2, #4
 8007144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69d9      	ldr	r1, [r3, #28]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	430a      	orrs	r2, r1
 8007156:	61da      	str	r2, [r3, #28]
      break;
 8007158:	e023      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68b9      	ldr	r1, [r7, #8]
 8007160:	4618      	mov	r0, r3
 8007162:	f000 faaf 	bl	80076c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	69da      	ldr	r2, [r3, #28]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69d9      	ldr	r1, [r3, #28]
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	021a      	lsls	r2, r3, #8
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	430a      	orrs	r2, r1
 8007198:	61da      	str	r2, [r3, #28]
      break;
 800719a:	e002      	b.n	80071a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	75fb      	strb	r3, [r7, #23]
      break;
 80071a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3718      	adds	r7, #24
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_TIM_ConfigClockSource+0x1c>
 80071cc:	2302      	movs	r3, #2
 80071ce:	e0b4      	b.n	800733a <HAL_TIM_ConfigClockSource+0x186>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007208:	d03e      	beq.n	8007288 <HAL_TIM_ConfigClockSource+0xd4>
 800720a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800720e:	f200 8087 	bhi.w	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007216:	f000 8086 	beq.w	8007326 <HAL_TIM_ConfigClockSource+0x172>
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721e:	d87f      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007220:	2b70      	cmp	r3, #112	; 0x70
 8007222:	d01a      	beq.n	800725a <HAL_TIM_ConfigClockSource+0xa6>
 8007224:	2b70      	cmp	r3, #112	; 0x70
 8007226:	d87b      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007228:	2b60      	cmp	r3, #96	; 0x60
 800722a:	d050      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x11a>
 800722c:	2b60      	cmp	r3, #96	; 0x60
 800722e:	d877      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007230:	2b50      	cmp	r3, #80	; 0x50
 8007232:	d03c      	beq.n	80072ae <HAL_TIM_ConfigClockSource+0xfa>
 8007234:	2b50      	cmp	r3, #80	; 0x50
 8007236:	d873      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007238:	2b40      	cmp	r3, #64	; 0x40
 800723a:	d058      	beq.n	80072ee <HAL_TIM_ConfigClockSource+0x13a>
 800723c:	2b40      	cmp	r3, #64	; 0x40
 800723e:	d86f      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007240:	2b30      	cmp	r3, #48	; 0x30
 8007242:	d064      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x15a>
 8007244:	2b30      	cmp	r3, #48	; 0x30
 8007246:	d86b      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007248:	2b20      	cmp	r3, #32
 800724a:	d060      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x15a>
 800724c:	2b20      	cmp	r3, #32
 800724e:	d867      	bhi.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d05c      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x15a>
 8007254:	2b10      	cmp	r3, #16
 8007256:	d05a      	beq.n	800730e <HAL_TIM_ConfigClockSource+0x15a>
 8007258:	e062      	b.n	8007320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800726a:	f000 faf0 	bl	800784e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800727c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	609a      	str	r2, [r3, #8]
      break;
 8007286:	e04f      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007298:	f000 fad9 	bl	800784e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689a      	ldr	r2, [r3, #8]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072aa:	609a      	str	r2, [r3, #8]
      break;
 80072ac:	e03c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ba:	461a      	mov	r2, r3
 80072bc:	f000 fa50 	bl	8007760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2150      	movs	r1, #80	; 0x50
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 faa7 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 80072cc:	e02c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072da:	461a      	mov	r2, r3
 80072dc:	f000 fa6e 	bl	80077bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2160      	movs	r1, #96	; 0x60
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fa97 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 80072ec:	e01c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072fa:	461a      	mov	r2, r3
 80072fc:	f000 fa30 	bl	8007760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2140      	movs	r1, #64	; 0x40
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fa87 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 800730c:	e00c      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4619      	mov	r1, r3
 8007318:	4610      	mov	r0, r2
 800731a:	f000 fa7e 	bl	800781a <TIM_ITRx_SetConfig>
      break;
 800731e:	e003      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	73fb      	strb	r3, [r7, #15]
      break;
 8007324:	e000      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr

08007354 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	bc80      	pop	{r7}
 8007376:	4770      	bx	lr

08007378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	bc80      	pop	{r7}
 8007388:	4770      	bx	lr
	...

0800738c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a29      	ldr	r2, [pc, #164]	; (8007444 <TIM_Base_SetConfig+0xb8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d00b      	beq.n	80073bc <TIM_Base_SetConfig+0x30>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073aa:	d007      	beq.n	80073bc <TIM_Base_SetConfig+0x30>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a26      	ldr	r2, [pc, #152]	; (8007448 <TIM_Base_SetConfig+0xbc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d003      	beq.n	80073bc <TIM_Base_SetConfig+0x30>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a25      	ldr	r2, [pc, #148]	; (800744c <TIM_Base_SetConfig+0xc0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d108      	bne.n	80073ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a1c      	ldr	r2, [pc, #112]	; (8007444 <TIM_Base_SetConfig+0xb8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00b      	beq.n	80073ee <TIM_Base_SetConfig+0x62>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073dc:	d007      	beq.n	80073ee <TIM_Base_SetConfig+0x62>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a19      	ldr	r2, [pc, #100]	; (8007448 <TIM_Base_SetConfig+0xbc>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d003      	beq.n	80073ee <TIM_Base_SetConfig+0x62>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a18      	ldr	r2, [pc, #96]	; (800744c <TIM_Base_SetConfig+0xc0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d108      	bne.n	8007400 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	695b      	ldr	r3, [r3, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <TIM_Base_SetConfig+0xb8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d103      	bne.n	8007434 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	615a      	str	r2, [r3, #20]
}
 800743a:	bf00      	nop
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	bc80      	pop	{r7}
 8007442:	4770      	bx	lr
 8007444:	40012c00 	.word	0x40012c00
 8007448:	40000400 	.word	0x40000400
 800744c:	40000800 	.word	0x40000800

08007450 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	f023 0201 	bic.w	r2, r3, #1
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0303 	bic.w	r3, r3, #3
 8007486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	4313      	orrs	r3, r2
 8007490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f023 0302 	bic.w	r3, r3, #2
 8007498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a1c      	ldr	r2, [pc, #112]	; (8007518 <TIM_OC1_SetConfig+0xc8>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d10c      	bne.n	80074c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	f023 0308 	bic.w	r3, r3, #8
 80074b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	697a      	ldr	r2, [r7, #20]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f023 0304 	bic.w	r3, r3, #4
 80074c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a13      	ldr	r2, [pc, #76]	; (8007518 <TIM_OC1_SetConfig+0xc8>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d111      	bne.n	80074f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	693a      	ldr	r2, [r7, #16]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	697a      	ldr	r2, [r7, #20]
 800750a:	621a      	str	r2, [r3, #32]
}
 800750c:	bf00      	nop
 800750e:	371c      	adds	r7, #28
 8007510:	46bd      	mov	sp, r7
 8007512:	bc80      	pop	{r7}
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	40012c00 	.word	0x40012c00

0800751c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800751c:	b480      	push	{r7}
 800751e:	b087      	sub	sp, #28
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a1b      	ldr	r3, [r3, #32]
 800752a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6a1b      	ldr	r3, [r3, #32]
 8007530:	f023 0210 	bic.w	r2, r3, #16
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800754a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	021b      	lsls	r3, r3, #8
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	4313      	orrs	r3, r2
 800755e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	f023 0320 	bic.w	r3, r3, #32
 8007566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	011b      	lsls	r3, r3, #4
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	4a1d      	ldr	r2, [pc, #116]	; (80075ec <TIM_OC2_SetConfig+0xd0>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d10d      	bne.n	8007598 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a14      	ldr	r2, [pc, #80]	; (80075ec <TIM_OC2_SetConfig+0xd0>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d113      	bne.n	80075c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80075a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	693a      	ldr	r2, [r7, #16]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	685a      	ldr	r2, [r3, #4]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	697a      	ldr	r2, [r7, #20]
 80075e0:	621a      	str	r2, [r3, #32]
}
 80075e2:	bf00      	nop
 80075e4:	371c      	adds	r7, #28
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bc80      	pop	{r7}
 80075ea:	4770      	bx	lr
 80075ec:	40012c00 	.word	0x40012c00

080075f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b087      	sub	sp, #28
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6a1b      	ldr	r3, [r3, #32]
 8007604:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	021b      	lsls	r3, r3, #8
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	4313      	orrs	r3, r2
 8007644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <TIM_OC3_SetConfig+0xd0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d10d      	bne.n	800766a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	4313      	orrs	r3, r2
 8007660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a14      	ldr	r2, [pc, #80]	; (80076c0 <TIM_OC3_SetConfig+0xd0>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d113      	bne.n	800769a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	695b      	ldr	r3, [r3, #20]
 8007686:	011b      	lsls	r3, r3, #4
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	011b      	lsls	r3, r3, #4
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	4313      	orrs	r3, r2
 8007698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	621a      	str	r2, [r3, #32]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40012c00 	.word	0x40012c00

080076c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b087      	sub	sp, #28
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	021b      	lsls	r3, r3, #8
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800770e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	031b      	lsls	r3, r3, #12
 8007716:	693a      	ldr	r2, [r7, #16]
 8007718:	4313      	orrs	r3, r2
 800771a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a0f      	ldr	r2, [pc, #60]	; (800775c <TIM_OC4_SetConfig+0x98>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d109      	bne.n	8007738 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800772a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	019b      	lsls	r3, r3, #6
 8007732:	697a      	ldr	r2, [r7, #20]
 8007734:	4313      	orrs	r3, r2
 8007736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	68fa      	ldr	r2, [r7, #12]
 8007742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685a      	ldr	r2, [r3, #4]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	693a      	ldr	r2, [r7, #16]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	bc80      	pop	{r7}
 800775a:	4770      	bx	lr
 800775c:	40012c00 	.word	0x40012c00

08007760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	f023 0201 	bic.w	r2, r3, #1
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800778a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	011b      	lsls	r3, r3, #4
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f023 030a 	bic.w	r3, r3, #10
 800779c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	621a      	str	r2, [r3, #32]
}
 80077b2:	bf00      	nop
 80077b4:	371c      	adds	r7, #28
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bc80      	pop	{r7}
 80077ba:	4770      	bx	lr

080077bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	f023 0210 	bic.w	r2, r3, #16
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	031b      	lsls	r3, r3, #12
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077f8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	697a      	ldr	r2, [r7, #20]
 8007800:	4313      	orrs	r3, r2
 8007802:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	693a      	ldr	r2, [r7, #16]
 8007808:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	621a      	str	r2, [r3, #32]
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr

0800781a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007832:	683a      	ldr	r2, [r7, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	4313      	orrs	r3, r2
 8007838:	f043 0307 	orr.w	r3, r3, #7
 800783c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	609a      	str	r2, [r3, #8]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	bc80      	pop	{r7}
 800784c:	4770      	bx	lr

0800784e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800784e:	b480      	push	{r7}
 8007850:	b087      	sub	sp, #28
 8007852:	af00      	add	r7, sp, #0
 8007854:	60f8      	str	r0, [r7, #12]
 8007856:	60b9      	str	r1, [r7, #8]
 8007858:	607a      	str	r2, [r7, #4]
 800785a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007868:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	021a      	lsls	r2, r3, #8
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	431a      	orrs	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	4313      	orrs	r3, r2
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	4313      	orrs	r3, r2
 800787a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	609a      	str	r2, [r3, #8]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	bc80      	pop	{r7}
 800788a:	4770      	bx	lr

0800788c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 031f 	and.w	r3, r3, #31
 800789e:	2201      	movs	r2, #1
 80078a0:	fa02 f303 	lsl.w	r3, r2, r3
 80078a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1a      	ldr	r2, [r3, #32]
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	43db      	mvns	r3, r3
 80078ae:	401a      	ands	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	431a      	orrs	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bc80      	pop	{r7}
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e046      	b.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2202      	movs	r2, #2
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a16      	ldr	r2, [pc, #88]	; (8007984 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007938:	d009      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a12      	ldr	r2, [pc, #72]	; (8007988 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a10      	ldr	r2, [pc, #64]	; (800798c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d10c      	bne.n	8007968 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4313      	orrs	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr
 8007984:	40012c00 	.word	0x40012c00
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800

08007990 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007990:	b480      	push	{r7}
 8007992:	b085      	sub	sp, #20
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800799a:	2300      	movs	r3, #0
 800799c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079a8:	2302      	movs	r3, #2
 80079aa:	e03d      	b.n	8007a28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	695b      	ldr	r3, [r3, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	69db      	ldr	r3, [r3, #28]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3714      	adds	r7, #20
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bc80      	pop	{r7}
 8007a42:	4770      	bx	lr

08007a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bc80      	pop	{r7}
 8007a54:	4770      	bx	lr

08007a56 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007a56:	b084      	sub	sp, #16
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	f107 0014 	add.w	r0, r7, #20
 8007a64:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bc80      	pop	{r7}
 8007a72:	b004      	add	sp, #16
 8007a74:	4770      	bx	lr

08007a76 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b085      	sub	sp, #20
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007a86:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007a8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007aaa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007aae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	43db      	mvns	r3, r3
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3714      	adds	r7, #20
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr

08007ad6 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	370c      	adds	r7, #12
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bc80      	pop	{r7}
 8007aec:	4770      	bx	lr

08007aee <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007aee:	b084      	sub	sp, #16
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	f107 0014 	add.w	r0, r7, #20
 8007afc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	b004      	add	sp, #16
 8007b2c:	4770      	bx	lr
	...

08007b30 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b09d      	sub	sp, #116	; 0x74
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	4413      	add	r3, r2
 8007b4a:	881b      	ldrh	r3, [r3, #0]
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b56:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	78db      	ldrb	r3, [r3, #3]
 8007b5e:	2b03      	cmp	r3, #3
 8007b60:	d81f      	bhi.n	8007ba2 <USB_ActivateEndpoint+0x72>
 8007b62:	a201      	add	r2, pc, #4	; (adr r2, 8007b68 <USB_ActivateEndpoint+0x38>)
 8007b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b68:	08007b79 	.word	0x08007b79
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007bab 	.word	0x08007bab
 8007b74:	08007b87 	.word	0x08007b87
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007b78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b80:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007b84:	e012      	b.n	8007bac <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007b86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b8a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007b8e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007b92:	e00b      	b.n	8007bac <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007b94:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007b98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b9c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007ba0:	e004      	b.n	8007bac <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007ba8:	e000      	b.n	8007bac <USB_ActivateEndpoint+0x7c>
      break;
 8007baa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	441a      	add	r2, r3
 8007bb6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	4313      	orrs	r3, r2
 8007bee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	441a      	add	r2, r3
 8007bfc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007c00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	7b1b      	ldrb	r3, [r3, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 8178 	bne.w	8007f0e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	785b      	ldrb	r3, [r3, #1]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 8084 	beq.w	8007d30 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	61bb      	str	r3, [r7, #24]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	4413      	add	r3, r2
 8007c3a:	61bb      	str	r3, [r7, #24]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	011a      	lsls	r2, r3, #4
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	88db      	ldrh	r3, [r3, #6]
 8007c50:	085b      	lsrs	r3, r3, #1
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	881b      	ldrh	r3, [r3, #0]
 8007c68:	827b      	strh	r3, [r7, #18]
 8007c6a:	8a7b      	ldrh	r3, [r7, #18]
 8007c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d01b      	beq.n	8007cac <USB_ActivateEndpoint+0x17c>
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	4413      	add	r3, r2
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c8a:	823b      	strh	r3, [r7, #16]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	441a      	add	r2, r3
 8007c96:	8a3b      	ldrh	r3, [r7, #16]
 8007c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ca4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	78db      	ldrb	r3, [r3, #3]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d020      	beq.n	8007cf6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	781b      	ldrb	r3, [r3, #0]
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4413      	add	r3, r2
 8007cbe:	881b      	ldrh	r3, [r3, #0]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cca:	81bb      	strh	r3, [r7, #12]
 8007ccc:	89bb      	ldrh	r3, [r7, #12]
 8007cce:	f083 0320 	eor.w	r3, r3, #32
 8007cd2:	81bb      	strh	r3, [r7, #12]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	441a      	add	r2, r3
 8007cde:	89bb      	ldrh	r3, [r7, #12]
 8007ce0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ce4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ce8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	8013      	strh	r3, [r2, #0]
 8007cf4:	e2d5      	b.n	80082a2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	881b      	ldrh	r3, [r3, #0]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d0c:	81fb      	strh	r3, [r7, #14]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	441a      	add	r2, r3
 8007d18:	89fb      	ldrh	r3, [r7, #14]
 8007d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	8013      	strh	r3, [r2, #0]
 8007d2e:	e2b8      	b.n	80082a2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	633b      	str	r3, [r7, #48]	; 0x30
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d40:	4413      	add	r3, r2
 8007d42:	633b      	str	r3, [r7, #48]	; 0x30
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	011a      	lsls	r2, r3, #4
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	085b      	lsrs	r3, r3, #1
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	4413      	add	r3, r2
 8007d76:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	011a      	lsls	r2, r3, #4
 8007d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d80:	4413      	add	r3, r2
 8007d82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	881b      	ldrh	r3, [r3, #0]
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	801a      	strh	r2, [r3, #0]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	2b3e      	cmp	r3, #62	; 0x3e
 8007d9e:	d91d      	bls.n	8007ddc <USB_ActivateEndpoint+0x2ac>
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	095b      	lsrs	r3, r3, #5
 8007da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d102      	bne.n	8007dba <USB_ActivateEndpoint+0x28a>
 8007db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007db6:	3b01      	subs	r3, #1
 8007db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	029b      	lsls	r3, r3, #10
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dd4:	b29a      	uxth	r2, r3
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd8:	801a      	strh	r2, [r3, #0]
 8007dda:	e026      	b.n	8007e2a <USB_ActivateEndpoint+0x2fa>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d10a      	bne.n	8007dfa <USB_ActivateEndpoint+0x2ca>
 8007de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de6:	881b      	ldrh	r3, [r3, #0]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	e017      	b.n	8007e2a <USB_ActivateEndpoint+0x2fa>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	691b      	ldr	r3, [r3, #16]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <USB_ActivateEndpoint+0x2e4>
 8007e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e10:	3301      	adds	r3, #1
 8007e12:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	881b      	ldrh	r3, [r3, #0]
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	029b      	lsls	r3, r3, #10
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	4313      	orrs	r3, r2
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	881b      	ldrh	r3, [r3, #0]
 8007e36:	847b      	strh	r3, [r7, #34]	; 0x22
 8007e38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d01b      	beq.n	8007e7a <USB_ActivateEndpoint+0x34a>
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	881b      	ldrh	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e58:	843b      	strh	r3, [r7, #32]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	441a      	add	r2, r3
 8007e64:	8c3b      	ldrh	r3, [r7, #32]
 8007e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d124      	bne.n	8007ecc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e98:	83bb      	strh	r3, [r7, #28]
 8007e9a:	8bbb      	ldrh	r3, [r7, #28]
 8007e9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ea0:	83bb      	strh	r3, [r7, #28]
 8007ea2:	8bbb      	ldrh	r3, [r7, #28]
 8007ea4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007ea8:	83bb      	strh	r3, [r7, #28]
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	441a      	add	r2, r3
 8007eb4:	8bbb      	ldrh	r3, [r7, #28]
 8007eb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	8013      	strh	r3, [r2, #0]
 8007eca:	e1ea      	b.n	80082a2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee2:	83fb      	strh	r3, [r7, #30]
 8007ee4:	8bfb      	ldrh	r3, [r7, #30]
 8007ee6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007eea:	83fb      	strh	r3, [r7, #30]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	441a      	add	r2, r3
 8007ef6:	8bfb      	ldrh	r3, [r7, #30]
 8007ef8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	8013      	strh	r3, [r2, #0]
 8007f0c:	e1c9      	b.n	80082a2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	78db      	ldrb	r3, [r3, #3]
 8007f12:	2b02      	cmp	r3, #2
 8007f14:	d11e      	bne.n	8007f54 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	441a      	add	r2, r3
 8007f3a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	8013      	strh	r3, [r2, #0]
 8007f52:	e01d      	b.n	8007f90 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	881b      	ldrh	r3, [r3, #0]
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f6a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	441a      	add	r2, r3
 8007f78:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fa0:	4413      	add	r3, r2
 8007fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	011a      	lsls	r2, r3, #4
 8007faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007fb2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	891b      	ldrh	r3, [r3, #8]
 8007fb8:	085b      	lsrs	r3, r3, #1
 8007fba:	b29b      	uxth	r3, r3
 8007fbc:	005b      	lsls	r3, r3, #1
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007fc2:	801a      	strh	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	657b      	str	r3, [r7, #84]	; 0x54
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fd4:	4413      	add	r3, r2
 8007fd6:	657b      	str	r3, [r7, #84]	; 0x54
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	011a      	lsls	r2, r3, #4
 8007fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007fe6:	653b      	str	r3, [r7, #80]	; 0x50
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	895b      	ldrh	r3, [r3, #10]
 8007fec:	085b      	lsrs	r3, r3, #1
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ff6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	785b      	ldrb	r3, [r3, #1]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f040 8093 	bne.w	8008128 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008002:	687a      	ldr	r2, [r7, #4]
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	881b      	ldrh	r3, [r3, #0]
 800800e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008012:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d01b      	beq.n	8008056 <USB_ActivateEndpoint+0x526>
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	b29b      	uxth	r3, r3
 800802c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008034:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	441a      	add	r2, r3
 8008040:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800804a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800804e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008052:	b29b      	uxth	r3, r3
 8008054:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	4413      	add	r3, r2
 8008060:	881b      	ldrh	r3, [r3, #0]
 8008062:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008064:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01b      	beq.n	80080a6 <USB_ActivateEndpoint+0x576>
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008084:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80080be:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80080c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80080c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80080cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	441a      	add	r2, r3
 80080d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80080da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	009b      	lsls	r3, r3, #2
 80080f6:	4413      	add	r3, r2
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008104:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	441a      	add	r2, r3
 8008110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008112:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008116:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800811e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008122:	b29b      	uxth	r3, r3
 8008124:	8013      	strh	r3, [r2, #0]
 8008126:	e0bc      	b.n	80082a2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	781b      	ldrb	r3, [r3, #0]
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	4413      	add	r3, r2
 8008132:	881b      	ldrh	r3, [r3, #0]
 8008134:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008138:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800813c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d01d      	beq.n	8008180 <USB_ActivateEndpoint+0x650>
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	881b      	ldrh	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	441a      	add	r2, r3
 8008168:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800816c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008170:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800817c:	b29b      	uxth	r3, r3
 800817e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008190:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01d      	beq.n	80081d8 <USB_ActivateEndpoint+0x6a8>
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80081c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	78db      	ldrb	r3, [r3, #3]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	d024      	beq.n	800822a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081f6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80081fa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80081fe:	f083 0320 	eor.w	r3, r3, #32
 8008202:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	441a      	add	r2, r3
 8008210:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008214:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008218:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800821c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008224:	b29b      	uxth	r3, r3
 8008226:	8013      	strh	r3, [r2, #0]
 8008228:	e01d      	b.n	8008266 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	4413      	add	r3, r2
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b29b      	uxth	r3, r3
 8008238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800823c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008240:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	441a      	add	r2, r3
 800824e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800825a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800825e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008262:	b29b      	uxth	r3, r3
 8008264:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	781b      	ldrb	r3, [r3, #0]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	441a      	add	r2, r3
 800828a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800828e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800829e:	b29b      	uxth	r3, r3
 80082a0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80082a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3774      	adds	r7, #116	; 0x74
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bc80      	pop	{r7}
 80082ae:	4770      	bx	lr

080082b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b08d      	sub	sp, #52	; 0x34
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	7b1b      	ldrb	r3, [r3, #12]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f040 808e 	bne.w	80083e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d044      	beq.n	8008356 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	81bb      	strh	r3, [r7, #12]
 80082da:	89bb      	ldrh	r3, [r7, #12]
 80082dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01b      	beq.n	800831c <USB_DeactivateEndpoint+0x6c>
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fa:	817b      	strh	r3, [r7, #10]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	441a      	add	r2, r3
 8008306:	897b      	ldrh	r3, [r7, #10]
 8008308:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800830c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008310:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008314:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008318:	b29b      	uxth	r3, r3
 800831a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	009b      	lsls	r3, r3, #2
 8008324:	4413      	add	r3, r2
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800832e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008332:	813b      	strh	r3, [r7, #8]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	441a      	add	r2, r3
 800833e:	893b      	ldrh	r3, [r7, #8]
 8008340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800834c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008350:	b29b      	uxth	r3, r3
 8008352:	8013      	strh	r3, [r2, #0]
 8008354:	e192      	b.n	800867c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4413      	add	r3, r2
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	827b      	strh	r3, [r7, #18]
 8008364:	8a7b      	ldrh	r3, [r7, #18]
 8008366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01b      	beq.n	80083a6 <USB_DeactivateEndpoint+0xf6>
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	881b      	ldrh	r3, [r3, #0]
 800837a:	b29b      	uxth	r3, r3
 800837c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008384:	823b      	strh	r3, [r7, #16]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	441a      	add	r2, r3
 8008390:	8a3b      	ldrh	r3, [r7, #16]
 8008392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800839a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800839e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	881b      	ldrh	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083bc:	81fb      	strh	r3, [r7, #14]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	441a      	add	r2, r3
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083da:	b29b      	uxth	r3, r3
 80083dc:	8013      	strh	r3, [r2, #0]
 80083de:	e14d      	b.n	800867c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f040 80a5 	bne.w	8008534 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	4413      	add	r3, r2
 80083f4:	881b      	ldrh	r3, [r3, #0]
 80083f6:	843b      	strh	r3, [r7, #32]
 80083f8:	8c3b      	ldrh	r3, [r7, #32]
 80083fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01b      	beq.n	800843a <USB_DeactivateEndpoint+0x18a>
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	881b      	ldrh	r3, [r3, #0]
 800840e:	b29b      	uxth	r3, r3
 8008410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008418:	83fb      	strh	r3, [r7, #30]
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	441a      	add	r2, r3
 8008424:	8bfb      	ldrh	r3, [r7, #30]
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	83bb      	strh	r3, [r7, #28]
 8008448:	8bbb      	ldrh	r3, [r7, #28]
 800844a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01b      	beq.n	800848a <USB_DeactivateEndpoint+0x1da>
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008468:	837b      	strh	r3, [r7, #26]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	441a      	add	r2, r3
 8008474:	8b7b      	ldrh	r3, [r7, #26]
 8008476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800847a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800847e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008482:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008486:	b29b      	uxth	r3, r3
 8008488:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a0:	833b      	strh	r3, [r7, #24]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	441a      	add	r2, r3
 80084ac:	8b3b      	ldrh	r3, [r7, #24]
 80084ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084be:	b29b      	uxth	r3, r3
 80084c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	881b      	ldrh	r3, [r3, #0]
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d8:	82fb      	strh	r3, [r7, #22]
 80084da:	687a      	ldr	r2, [r7, #4]
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	441a      	add	r2, r3
 80084e4:	8afb      	ldrh	r3, [r7, #22]
 80084e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	4413      	add	r3, r2
 8008504:	881b      	ldrh	r3, [r3, #0]
 8008506:	b29b      	uxth	r3, r3
 8008508:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800850c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008510:	82bb      	strh	r3, [r7, #20]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	441a      	add	r2, r3
 800851c:	8abb      	ldrh	r3, [r7, #20]
 800851e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	b29b      	uxth	r3, r3
 8008530:	8013      	strh	r3, [r2, #0]
 8008532:	e0a3      	b.n	800867c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008542:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01b      	beq.n	8008584 <USB_DeactivateEndpoint+0x2d4>
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	881b      	ldrh	r3, [r3, #0]
 8008558:	b29b      	uxth	r3, r3
 800855a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800855e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008562:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	441a      	add	r2, r3
 800856e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008570:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008574:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800857c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008580:	b29b      	uxth	r3, r3
 8008582:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01b      	beq.n	80085d4 <USB_DeactivateEndpoint+0x324>
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	853b      	strh	r3, [r7, #40]	; 0x28
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	441a      	add	r2, r3
 80085be:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80085c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4413      	add	r3, r2
 80085de:	881b      	ldrh	r3, [r3, #0]
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	441a      	add	r2, r3
 80085f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008600:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008608:	b29b      	uxth	r3, r3
 800860a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4413      	add	r3, r2
 8008616:	881b      	ldrh	r3, [r3, #0]
 8008618:	b29b      	uxth	r3, r3
 800861a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800861e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008622:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	441a      	add	r2, r3
 800862e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008640:	b29b      	uxth	r3, r3
 8008642:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865a:	847b      	strh	r3, [r7, #34]	; 0x22
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	441a      	add	r2, r3
 8008666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800866c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008678:	b29b      	uxth	r3, r3
 800867a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800867c:	2300      	movs	r3, #0
}
 800867e:	4618      	mov	r0, r3
 8008680:	3734      	adds	r7, #52	; 0x34
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b0c2      	sub	sp, #264	; 0x108
 800868c:	af00      	add	r7, sp, #0
 800868e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008696:	6018      	str	r0, [r3, #0]
 8008698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	f040 86b7 	bne.w	8009422 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80086b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	699a      	ldr	r2, [r3, #24]
 80086c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d908      	bls.n	80086e2 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80086d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	691b      	ldr	r3, [r3, #16]
 80086dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80086e0:	e007      	b.n	80086f2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80086e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80086f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	7b1b      	ldrb	r3, [r3, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d13a      	bne.n	8008778 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6959      	ldr	r1, [r3, #20]
 800870e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	88da      	ldrh	r2, [r3, #6]
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871e:	b29b      	uxth	r3, r3
 8008720:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008724:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008728:	6800      	ldr	r0, [r0, #0]
 800872a:	f001 fc9c 	bl	800a066 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800872e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008732:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	613b      	str	r3, [r7, #16]
 800873a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008748:	b29b      	uxth	r3, r3
 800874a:	461a      	mov	r2, r3
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4413      	add	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
 8008752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	011a      	lsls	r2, r3, #4
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008768:	60fb      	str	r3, [r7, #12]
 800876a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800876e:	b29a      	uxth	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	801a      	strh	r2, [r3, #0]
 8008774:	f000 be1f 	b.w	80093b6 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	78db      	ldrb	r3, [r3, #3]
 8008784:	2b02      	cmp	r3, #2
 8008786:	f040 8462 	bne.w	800904e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800878a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6a1a      	ldr	r2, [r3, #32]
 8008796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	f240 83df 	bls.w	8008f66 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	4413      	add	r3, r2
 80087c2:	881b      	ldrh	r3, [r3, #0]
 80087c4:	b29b      	uxth	r3, r3
 80087c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ce:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80087d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	441a      	add	r2, r3
 80087ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80087f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80087fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008800:	b29b      	uxth	r3, r3
 8008802:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	6a1a      	ldr	r2, [r3, #32]
 8008810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008814:	1ad2      	subs	r2, r2, r3
 8008816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b29b      	uxth	r3, r3
 8008840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008844:	2b00      	cmp	r3, #0
 8008846:	f000 81c7 	beq.w	8008bd8 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	633b      	str	r3, [r7, #48]	; 0x30
 8008856:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800885a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	785b      	ldrb	r3, [r3, #1]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d177      	bne.n	8008956 <USB_EPStartXfer+0x2ce>
 8008866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	62bb      	str	r3, [r7, #40]	; 0x28
 8008872:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008876:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008880:	b29b      	uxth	r3, r3
 8008882:	461a      	mov	r2, r3
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	4413      	add	r3, r2
 8008888:	62bb      	str	r3, [r7, #40]	; 0x28
 800888a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800888e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	011a      	lsls	r2, r3, #4
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	4413      	add	r3, r2
 800889c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24
 80088a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088ac:	b29a      	uxth	r2, r3
 80088ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b0:	801a      	strh	r2, [r3, #0]
 80088b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088b6:	2b3e      	cmp	r3, #62	; 0x3e
 80088b8:	d921      	bls.n	80088fe <USB_EPStartXfer+0x276>
 80088ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088be:	095b      	lsrs	r3, r3, #5
 80088c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c8:	f003 031f 	and.w	r3, r3, #31
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d104      	bne.n	80088da <USB_EPStartXfer+0x252>
 80088d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088d4:	3b01      	subs	r3, #1
 80088d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80088da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	b29a      	uxth	r2, r3
 80088e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	029b      	lsls	r3, r3, #10
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	e050      	b.n	80089a0 <USB_EPStartXfer+0x318>
 80088fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <USB_EPStartXfer+0x294>
 8008906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	b29b      	uxth	r3, r3
 800890c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008914:	b29a      	uxth	r2, r3
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	801a      	strh	r2, [r3, #0]
 800891a:	e041      	b.n	80089a0 <USB_EPStartXfer+0x318>
 800891c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008920:	085b      	lsrs	r3, r3, #1
 8008922:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	d004      	beq.n	800893c <USB_EPStartXfer+0x2b4>
 8008932:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008936:	3301      	adds	r3, #1
 8008938:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893e:	881b      	ldrh	r3, [r3, #0]
 8008940:	b29a      	uxth	r2, r3
 8008942:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008946:	b29b      	uxth	r3, r3
 8008948:	029b      	lsls	r3, r3, #10
 800894a:	b29b      	uxth	r3, r3
 800894c:	4313      	orrs	r3, r2
 800894e:	b29a      	uxth	r2, r3
 8008950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	e024      	b.n	80089a0 <USB_EPStartXfer+0x318>
 8008956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d11c      	bne.n	80089a0 <USB_EPStartXfer+0x318>
 8008966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800896a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008974:	b29b      	uxth	r3, r3
 8008976:	461a      	mov	r2, r3
 8008978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897a:	4413      	add	r3, r2
 800897c:	633b      	str	r3, [r7, #48]	; 0x30
 800897e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	011a      	lsls	r2, r3, #4
 800898c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800898e:	4413      	add	r3, r2
 8008990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008994:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800899a:	b29a      	uxth	r2, r3
 800899c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80089a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	895b      	ldrh	r3, [r3, #10]
 80089ac:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	6959      	ldr	r1, [r3, #20]
 80089bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c0:	b29b      	uxth	r3, r3
 80089c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089c6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80089ca:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80089ce:	6800      	ldr	r0, [r0, #0]
 80089d0:	f001 fb49 	bl	800a066 <USB_WritePMA>
            ep->xfer_buff += len;
 80089d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	695a      	ldr	r2, [r3, #20]
 80089e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e4:	441a      	add	r2, r3
 80089e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80089f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6a1a      	ldr	r2, [r3, #32]
 80089fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d90f      	bls.n	8008a2e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6a1a      	ldr	r2, [r3, #32]
 8008a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a1e:	1ad2      	subs	r2, r2, r3
 8008a20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	621a      	str	r2, [r3, #32]
 8008a2c:	e00e      	b.n	8008a4c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a1b      	ldr	r3, [r3, #32]
 8008a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	785b      	ldrb	r3, [r3, #1]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d177      	bne.n	8008b4c <USB_EPStartXfer+0x4c4>
 8008a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a76:	b29b      	uxth	r3, r3
 8008a78:	461a      	mov	r2, r3
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	4413      	add	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	011a      	lsls	r2, r3, #4
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	4413      	add	r3, r2
 8008a92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a96:	617b      	str	r3, [r7, #20]
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aa2:	b29a      	uxth	r2, r3
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	2b3e      	cmp	r3, #62	; 0x3e
 8008aae:	d921      	bls.n	8008af4 <USB_EPStartXfer+0x46c>
 8008ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ab4:	095b      	lsrs	r3, r3, #5
 8008ab6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d104      	bne.n	8008ad0 <USB_EPStartXfer+0x448>
 8008ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008aca:	3b01      	subs	r3, #1
 8008acc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	029b      	lsls	r3, r3, #10
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ae8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aec:	b29a      	uxth	r2, r3
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	e056      	b.n	8008ba2 <USB_EPStartXfer+0x51a>
 8008af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <USB_EPStartXfer+0x48a>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	801a      	strh	r2, [r3, #0]
 8008b10:	e047      	b.n	8008ba2 <USB_EPStartXfer+0x51a>
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b16:	085b      	lsrs	r3, r3, #1
 8008b18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <USB_EPStartXfer+0x4aa>
 8008b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	881b      	ldrh	r3, [r3, #0]
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b3c:	b29b      	uxth	r3, r3
 8008b3e:	029b      	lsls	r3, r3, #10
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	4313      	orrs	r3, r2
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	801a      	strh	r2, [r3, #0]
 8008b4a:	e02a      	b.n	8008ba2 <USB_EPStartXfer+0x51a>
 8008b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	785b      	ldrb	r3, [r3, #1]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d122      	bne.n	8008ba2 <USB_EPStartXfer+0x51a>
 8008b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	623b      	str	r3, [r7, #32]
 8008b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	4413      	add	r3, r2
 8008b7e:	623b      	str	r3, [r7, #32]
 8008b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	011a      	lsls	r2, r3, #4
 8008b8e:	6a3b      	ldr	r3, [r7, #32]
 8008b90:	4413      	add	r3, r2
 8008b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b96:	61fb      	str	r3, [r7, #28]
 8008b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	891b      	ldrh	r3, [r3, #8]
 8008bae:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008bb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6959      	ldr	r1, [r3, #20]
 8008bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008bc8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bcc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bd0:	6800      	ldr	r0, [r0, #0]
 8008bd2:	f001 fa48 	bl	800a066 <USB_WritePMA>
 8008bd6:	e3ee      	b.n	80093b6 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	785b      	ldrb	r3, [r3, #1]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d177      	bne.n	8008cd8 <USB_EPStartXfer+0x650>
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	461a      	mov	r2, r3
 8008c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c08:	4413      	add	r3, r2
 8008c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	011a      	lsls	r2, r3, #4
 8008c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c22:	647b      	str	r3, [r7, #68]	; 0x44
 8008c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c26:	881b      	ldrh	r3, [r3, #0]
 8008c28:	b29b      	uxth	r3, r3
 8008c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c32:	801a      	strh	r2, [r3, #0]
 8008c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c38:	2b3e      	cmp	r3, #62	; 0x3e
 8008c3a:	d921      	bls.n	8008c80 <USB_EPStartXfer+0x5f8>
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c40:	095b      	lsrs	r3, r3, #5
 8008c42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d104      	bne.n	8008c5c <USB_EPStartXfer+0x5d4>
 8008c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c56:	3b01      	subs	r3, #1
 8008c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c5e:	881b      	ldrh	r3, [r3, #0]
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	029b      	lsls	r3, r3, #10
 8008c6a:	b29b      	uxth	r3, r3
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7c:	801a      	strh	r2, [r3, #0]
 8008c7e:	e056      	b.n	8008d2e <USB_EPStartXfer+0x6a6>
 8008c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d10a      	bne.n	8008c9e <USB_EPStartXfer+0x616>
 8008c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c8a:	881b      	ldrh	r3, [r3, #0]
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e047      	b.n	8008d2e <USB_EPStartXfer+0x6a6>
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca2:	085b      	lsrs	r3, r3, #1
 8008ca4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d004      	beq.n	8008cbe <USB_EPStartXfer+0x636>
 8008cb4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cb8:	3301      	adds	r3, #1
 8008cba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	029b      	lsls	r3, r3, #10
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cd4:	801a      	strh	r2, [r3, #0]
 8008cd6:	e02a      	b.n	8008d2e <USB_EPStartXfer+0x6a6>
 8008cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	785b      	ldrb	r3, [r3, #1]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d122      	bne.n	8008d2e <USB_EPStartXfer+0x6a6>
 8008ce8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8008cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d08:	4413      	add	r3, r2
 8008d0a:	653b      	str	r3, [r7, #80]	; 0x50
 8008d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	011a      	lsls	r2, r3, #4
 8008d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1c:	4413      	add	r3, r2
 8008d1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d2c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	891b      	ldrh	r3, [r3, #8]
 8008d3a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	6959      	ldr	r1, [r3, #20]
 8008d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d54:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d58:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d5c:	6800      	ldr	r0, [r0, #0]
 8008d5e:	f001 f982 	bl	800a066 <USB_WritePMA>
            ep->xfer_buff += len;
 8008d62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	695a      	ldr	r2, [r3, #20]
 8008d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d72:	441a      	add	r2, r3
 8008d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	6a1a      	ldr	r2, [r3, #32]
 8008d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	691b      	ldr	r3, [r3, #16]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d90f      	bls.n	8008dbc <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	6a1a      	ldr	r2, [r3, #32]
 8008da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dac:	1ad2      	subs	r2, r2, r3
 8008dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	621a      	str	r2, [r3, #32]
 8008dba:	e00e      	b.n	8008dda <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
 8008dc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	643b      	str	r3, [r7, #64]	; 0x40
 8008de6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d177      	bne.n	8008ee6 <USB_EPStartXfer+0x85e>
 8008df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	461a      	mov	r2, r3
 8008e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e16:	4413      	add	r3, r2
 8008e18:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	011a      	lsls	r2, r3, #4
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e30:	637b      	str	r3, [r7, #52]	; 0x34
 8008e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	801a      	strh	r2, [r3, #0]
 8008e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e46:	2b3e      	cmp	r3, #62	; 0x3e
 8008e48:	d921      	bls.n	8008e8e <USB_EPStartXfer+0x806>
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e58:	f003 031f 	and.w	r3, r3, #31
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d104      	bne.n	8008e6a <USB_EPStartXfer+0x7e2>
 8008e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e64:	3b01      	subs	r3, #1
 8008e66:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	881b      	ldrh	r3, [r3, #0]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	029b      	lsls	r3, r3, #10
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e86:	b29a      	uxth	r2, r3
 8008e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e8a:	801a      	strh	r2, [r3, #0]
 8008e8c:	e050      	b.n	8008f30 <USB_EPStartXfer+0x8a8>
 8008e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10a      	bne.n	8008eac <USB_EPStartXfer+0x824>
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ea4:	b29a      	uxth	r2, r3
 8008ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea8:	801a      	strh	r2, [r3, #0]
 8008eaa:	e041      	b.n	8008f30 <USB_EPStartXfer+0x8a8>
 8008eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb0:	085b      	lsrs	r3, r3, #1
 8008eb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <USB_EPStartXfer+0x844>
 8008ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ece:	881b      	ldrh	r3, [r3, #0]
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	029b      	lsls	r3, r3, #10
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	4313      	orrs	r3, r2
 8008ede:	b29a      	uxth	r2, r3
 8008ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee2:	801a      	strh	r2, [r3, #0]
 8008ee4:	e024      	b.n	8008f30 <USB_EPStartXfer+0x8a8>
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	785b      	ldrb	r3, [r3, #1]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d11c      	bne.n	8008f30 <USB_EPStartXfer+0x8a8>
 8008ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	461a      	mov	r2, r3
 8008f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f0a:	4413      	add	r3, r2
 8008f0c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	011a      	lsls	r2, r3, #4
 8008f1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f1e:	4413      	add	r3, r2
 8008f20:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	895b      	ldrh	r3, [r3, #10]
 8008f3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6959      	ldr	r1, [r3, #20]
 8008f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f5e:	6800      	ldr	r0, [r0, #0]
 8008f60:	f001 f881 	bl	800a066 <USB_WritePMA>
 8008f64:	e227      	b.n	80093b6 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	881b      	ldrh	r3, [r3, #0]
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008f98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008fbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fce:	b29b      	uxth	r3, r3
 8008fd0:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	461a      	mov	r2, r3
 8008ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ff2:	4413      	add	r3, r2
 8008ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	011a      	lsls	r2, r3, #4
 8009004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009006:	4413      	add	r3, r2
 8009008:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800900c:	65bb      	str	r3, [r7, #88]	; 0x58
 800900e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009012:	b29a      	uxth	r2, r3
 8009014:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009016:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800901c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	891b      	ldrh	r3, [r3, #8]
 8009024:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6959      	ldr	r1, [r3, #20]
 8009034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009038:	b29b      	uxth	r3, r3
 800903a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800903e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009042:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009046:	6800      	ldr	r0, [r0, #0]
 8009048:	f001 f80d 	bl	800a066 <USB_WritePMA>
 800904c:	e1b3      	b.n	80093b6 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800904e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6a1a      	ldr	r2, [r3, #32]
 800905a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905e:	1ad2      	subs	r2, r2, r3
 8009060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800906c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009070:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800907a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	781b      	ldrb	r3, [r3, #0]
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	881b      	ldrh	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80c6 	beq.w	8009220 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009098:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	673b      	str	r3, [r7, #112]	; 0x70
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d177      	bne.n	80091a0 <USB_EPStartXfer+0xb18>
 80090b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80090bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	461a      	mov	r2, r3
 80090ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090d0:	4413      	add	r3, r2
 80090d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80090d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	781b      	ldrb	r3, [r3, #0]
 80090e0:	011a      	lsls	r2, r3, #4
 80090e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090e4:	4413      	add	r3, r2
 80090e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80090ea:	667b      	str	r3, [r7, #100]	; 0x64
 80090ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ee:	881b      	ldrh	r3, [r3, #0]
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090f6:	b29a      	uxth	r2, r3
 80090f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090fa:	801a      	strh	r2, [r3, #0]
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009100:	2b3e      	cmp	r3, #62	; 0x3e
 8009102:	d921      	bls.n	8009148 <USB_EPStartXfer+0xac0>
 8009104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800910e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009112:	f003 031f 	and.w	r3, r3, #31
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <USB_EPStartXfer+0xa9c>
 800911a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800911e:	3b01      	subs	r3, #1
 8009120:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009126:	881b      	ldrh	r3, [r3, #0]
 8009128:	b29a      	uxth	r2, r3
 800912a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800912e:	b29b      	uxth	r3, r3
 8009130:	029b      	lsls	r3, r3, #10
 8009132:	b29b      	uxth	r3, r3
 8009134:	4313      	orrs	r3, r2
 8009136:	b29b      	uxth	r3, r3
 8009138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009140:	b29a      	uxth	r2, r3
 8009142:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009144:	801a      	strh	r2, [r3, #0]
 8009146:	e050      	b.n	80091ea <USB_EPStartXfer+0xb62>
 8009148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <USB_EPStartXfer+0xade>
 8009150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009152:	881b      	ldrh	r3, [r3, #0]
 8009154:	b29b      	uxth	r3, r3
 8009156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800915a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800915e:	b29a      	uxth	r2, r3
 8009160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009162:	801a      	strh	r2, [r3, #0]
 8009164:	e041      	b.n	80091ea <USB_EPStartXfer+0xb62>
 8009166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916a:	085b      	lsrs	r3, r3, #1
 800916c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009174:	f003 0301 	and.w	r3, r3, #1
 8009178:	2b00      	cmp	r3, #0
 800917a:	d004      	beq.n	8009186 <USB_EPStartXfer+0xafe>
 800917c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009180:	3301      	adds	r3, #1
 8009182:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29a      	uxth	r2, r3
 800918c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009190:	b29b      	uxth	r3, r3
 8009192:	029b      	lsls	r3, r3, #10
 8009194:	b29b      	uxth	r3, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	b29a      	uxth	r2, r3
 800919a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800919c:	801a      	strh	r2, [r3, #0]
 800919e:	e024      	b.n	80091ea <USB_EPStartXfer+0xb62>
 80091a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d11c      	bne.n	80091ea <USB_EPStartXfer+0xb62>
 80091b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091c4:	4413      	add	r3, r2
 80091c6:	673b      	str	r3, [r7, #112]	; 0x70
 80091c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	011a      	lsls	r2, r3, #4
 80091d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80091d8:	4413      	add	r3, r2
 80091da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80091de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80091e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e4:	b29a      	uxth	r2, r3
 80091e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091e8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80091ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	895b      	ldrh	r3, [r3, #10]
 80091f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800920a:	b29b      	uxth	r3, r3
 800920c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009210:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009214:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009218:	6800      	ldr	r0, [r0, #0]
 800921a:	f000 ff24 	bl	800a066 <USB_WritePMA>
 800921e:	e0ca      	b.n	80093b6 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d177      	bne.n	8009320 <USB_EPStartXfer+0xc98>
 8009230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800923c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800924a:	b29b      	uxth	r3, r3
 800924c:	461a      	mov	r2, r3
 800924e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009250:	4413      	add	r3, r2
 8009252:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	011a      	lsls	r2, r3, #4
 8009262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009264:	4413      	add	r3, r2
 8009266:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800926a:	67bb      	str	r3, [r7, #120]	; 0x78
 800926c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	b29b      	uxth	r3, r3
 8009272:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009276:	b29a      	uxth	r2, r3
 8009278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800927a:	801a      	strh	r2, [r3, #0]
 800927c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009280:	2b3e      	cmp	r3, #62	; 0x3e
 8009282:	d921      	bls.n	80092c8 <USB_EPStartXfer+0xc40>
 8009284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009288:	095b      	lsrs	r3, r3, #5
 800928a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800928e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009292:	f003 031f 	and.w	r3, r3, #31
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <USB_EPStartXfer+0xc1c>
 800929a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800929e:	3b01      	subs	r3, #1
 80092a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80092a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092a6:	881b      	ldrh	r3, [r3, #0]
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	029b      	lsls	r3, r3, #10
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	4313      	orrs	r3, r2
 80092b6:	b29b      	uxth	r3, r3
 80092b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092c0:	b29a      	uxth	r2, r3
 80092c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092c4:	801a      	strh	r2, [r3, #0]
 80092c6:	e05c      	b.n	8009382 <USB_EPStartXfer+0xcfa>
 80092c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d10a      	bne.n	80092e6 <USB_EPStartXfer+0xc5e>
 80092d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092de:	b29a      	uxth	r2, r3
 80092e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	e04d      	b.n	8009382 <USB_EPStartXfer+0xcfa>
 80092e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80092f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d004      	beq.n	8009306 <USB_EPStartXfer+0xc7e>
 80092fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009300:	3301      	adds	r3, #1
 8009302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29a      	uxth	r2, r3
 800930c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009310:	b29b      	uxth	r3, r3
 8009312:	029b      	lsls	r3, r3, #10
 8009314:	b29b      	uxth	r3, r3
 8009316:	4313      	orrs	r3, r2
 8009318:	b29a      	uxth	r2, r3
 800931a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800931c:	801a      	strh	r2, [r3, #0]
 800931e:	e030      	b.n	8009382 <USB_EPStartXfer+0xcfa>
 8009320:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009324:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d128      	bne.n	8009382 <USB_EPStartXfer+0xcfa>
 8009330:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009334:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800933e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800934c:	b29b      	uxth	r3, r3
 800934e:	461a      	mov	r2, r3
 8009350:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009354:	4413      	add	r3, r2
 8009356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	011a      	lsls	r2, r3, #4
 8009368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800936c:	4413      	add	r3, r2
 800936e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009380:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	891b      	ldrh	r3, [r3, #8]
 800938e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6959      	ldr	r1, [r3, #20]
 800939e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093b0:	6800      	ldr	r0, [r0, #0]
 80093b2:	f000 fe58 	bl	800a066 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80093b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	b29b      	uxth	r3, r3
 80093d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093dc:	817b      	strh	r3, [r7, #10]
 80093de:	897b      	ldrh	r3, [r7, #10]
 80093e0:	f083 0310 	eor.w	r3, r3, #16
 80093e4:	817b      	strh	r3, [r7, #10]
 80093e6:	897b      	ldrh	r3, [r7, #10]
 80093e8:	f083 0320 	eor.w	r3, r3, #32
 80093ec:	817b      	strh	r3, [r7, #10]
 80093ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	441a      	add	r2, r3
 8009408:	897b      	ldrh	r3, [r7, #10]
 800940a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800940e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800941a:	b29b      	uxth	r3, r3
 800941c:	8013      	strh	r3, [r2, #0]
 800941e:	f000 bcde 	b.w	8009dde <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009422:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009426:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	7b1b      	ldrb	r3, [r3, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	f040 80bb 	bne.w	80095aa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	699a      	ldr	r2, [r3, #24]
 8009440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	429a      	cmp	r2, r3
 800944e:	d917      	bls.n	8009480 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	699a      	ldr	r2, [r3, #24]
 800946c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009470:	1ad2      	subs	r2, r2, r3
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	619a      	str	r2, [r3, #24]
 800947e:	e00e      	b.n	800949e <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2200      	movs	r2, #0
 800949c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	461a      	mov	r2, r3
 80094be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094c2:	4413      	add	r3, r2
 80094c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	011a      	lsls	r2, r3, #4
 80094d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80094da:	4413      	add	r3, r2
 80094dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80094e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80094e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80094f6:	801a      	strh	r2, [r3, #0]
 80094f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094fc:	2b3e      	cmp	r3, #62	; 0x3e
 80094fe:	d924      	bls.n	800954a <USB_EPStartXfer+0xec2>
 8009500:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800950a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800950e:	f003 031f 	and.w	r3, r3, #31
 8009512:	2b00      	cmp	r3, #0
 8009514:	d104      	bne.n	8009520 <USB_EPStartXfer+0xe98>
 8009516:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800951a:	3b01      	subs	r3, #1
 800951c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	b29a      	uxth	r2, r3
 8009528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800952c:	b29b      	uxth	r3, r3
 800952e:	029b      	lsls	r3, r3, #10
 8009530:	b29b      	uxth	r3, r3
 8009532:	4313      	orrs	r3, r2
 8009534:	b29b      	uxth	r3, r3
 8009536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800953e:	b29a      	uxth	r2, r3
 8009540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	f000 bc10 	b.w	8009d6a <USB_EPStartXfer+0x16e2>
 800954a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10c      	bne.n	800956c <USB_EPStartXfer+0xee4>
 8009552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009556:	881b      	ldrh	r3, [r3, #0]
 8009558:	b29b      	uxth	r3, r3
 800955a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800955e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009562:	b29a      	uxth	r2, r3
 8009564:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009568:	801a      	strh	r2, [r3, #0]
 800956a:	e3fe      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
 800956c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009570:	085b      	lsrs	r3, r3, #1
 8009572:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009576:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <USB_EPStartXfer+0xf04>
 8009582:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009586:	3301      	adds	r3, #1
 8009588:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800958c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009590:	881b      	ldrh	r3, [r3, #0]
 8009592:	b29a      	uxth	r2, r3
 8009594:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009598:	b29b      	uxth	r3, r3
 800959a:	029b      	lsls	r3, r3, #10
 800959c:	b29b      	uxth	r3, r3
 800959e:	4313      	orrs	r3, r2
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e3df      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80095aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	78db      	ldrb	r3, [r3, #3]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	f040 8218 	bne.w	80099ec <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80095bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	785b      	ldrb	r3, [r3, #1]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	f040 809d 	bne.w	8009708 <USB_EPStartXfer+0x1080>
 80095ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095f2:	4413      	add	r3, r2
 80095f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80095f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	011a      	lsls	r2, r3, #4
 8009606:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800960a:	4413      	add	r3, r2
 800960c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	b29b      	uxth	r3, r3
 800961c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009620:	b29a      	uxth	r2, r3
 8009622:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009626:	801a      	strh	r2, [r3, #0]
 8009628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b3e      	cmp	r3, #62	; 0x3e
 8009636:	d92b      	bls.n	8009690 <USB_EPStartXfer+0x1008>
 8009638:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	095b      	lsrs	r3, r3, #5
 8009646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800964a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691b      	ldr	r3, [r3, #16]
 8009656:	f003 031f 	and.w	r3, r3, #31
 800965a:	2b00      	cmp	r3, #0
 800965c:	d104      	bne.n	8009668 <USB_EPStartXfer+0xfe0>
 800965e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009662:	3b01      	subs	r3, #1
 8009664:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009668:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800966c:	881b      	ldrh	r3, [r3, #0]
 800966e:	b29a      	uxth	r2, r3
 8009670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009674:	b29b      	uxth	r3, r3
 8009676:	029b      	lsls	r3, r3, #10
 8009678:	b29b      	uxth	r3, r3
 800967a:	4313      	orrs	r3, r2
 800967c:	b29b      	uxth	r3, r3
 800967e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009686:	b29a      	uxth	r2, r3
 8009688:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800968c:	801a      	strh	r2, [r3, #0]
 800968e:	e070      	b.n	8009772 <USB_EPStartXfer+0x10ea>
 8009690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10c      	bne.n	80096ba <USB_EPStartXfer+0x1032>
 80096a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096a4:	881b      	ldrh	r3, [r3, #0]
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096b0:	b29a      	uxth	r2, r3
 80096b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	e05b      	b.n	8009772 <USB_EPStartXfer+0x10ea>
 80096ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	085b      	lsrs	r3, r3, #1
 80096c8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	691b      	ldr	r3, [r3, #16]
 80096d8:	f003 0301 	and.w	r3, r3, #1
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d004      	beq.n	80096ea <USB_EPStartXfer+0x1062>
 80096e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e4:	3301      	adds	r3, #1
 80096e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80096ee:	881b      	ldrh	r3, [r3, #0]
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	029b      	lsls	r3, r3, #10
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	4313      	orrs	r3, r2
 80096fe:	b29a      	uxth	r2, r3
 8009700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009704:	801a      	strh	r2, [r3, #0]
 8009706:	e034      	b.n	8009772 <USB_EPStartXfer+0x10ea>
 8009708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	785b      	ldrb	r3, [r3, #1]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d12c      	bne.n	8009772 <USB_EPStartXfer+0x10ea>
 8009718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009734:	b29b      	uxth	r3, r3
 8009736:	461a      	mov	r2, r3
 8009738:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800973c:	4413      	add	r3, r2
 800973e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	011a      	lsls	r2, r3, #4
 8009750:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009754:	4413      	add	r3, r2
 8009756:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800975a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800975e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	b29a      	uxth	r2, r3
 800976c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009770:	801a      	strh	r2, [r3, #0]
 8009772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	785b      	ldrb	r3, [r3, #1]
 800978c:	2b00      	cmp	r3, #0
 800978e:	f040 809d 	bne.w	80098cc <USB_EPStartXfer+0x1244>
 8009792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097b6:	4413      	add	r3, r2
 80097b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	011a      	lsls	r2, r3, #4
 80097ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80097ce:	4413      	add	r3, r2
 80097d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80097d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	2b3e      	cmp	r3, #62	; 0x3e
 80097fa:	d92b      	bls.n	8009854 <USB_EPStartXfer+0x11cc>
 80097fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	095b      	lsrs	r3, r3, #5
 800980a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800980e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	691b      	ldr	r3, [r3, #16]
 800981a:	f003 031f 	and.w	r3, r3, #31
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <USB_EPStartXfer+0x11a4>
 8009822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009826:	3b01      	subs	r3, #1
 8009828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800982c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009830:	881b      	ldrh	r3, [r3, #0]
 8009832:	b29a      	uxth	r2, r3
 8009834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009838:	b29b      	uxth	r3, r3
 800983a:	029b      	lsls	r3, r3, #10
 800983c:	b29b      	uxth	r3, r3
 800983e:	4313      	orrs	r3, r2
 8009840:	b29b      	uxth	r3, r3
 8009842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800984a:	b29a      	uxth	r2, r3
 800984c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009850:	801a      	strh	r2, [r3, #0]
 8009852:	e069      	b.n	8009928 <USB_EPStartXfer+0x12a0>
 8009854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	691b      	ldr	r3, [r3, #16]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10c      	bne.n	800987e <USB_EPStartXfer+0x11f6>
 8009864:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009870:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009874:	b29a      	uxth	r2, r3
 8009876:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800987a:	801a      	strh	r2, [r3, #0]
 800987c:	e054      	b.n	8009928 <USB_EPStartXfer+0x12a0>
 800987e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009882:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	085b      	lsrs	r3, r3, #1
 800988c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691b      	ldr	r3, [r3, #16]
 800989c:	f003 0301 	and.w	r3, r3, #1
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d004      	beq.n	80098ae <USB_EPStartXfer+0x1226>
 80098a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a8:	3301      	adds	r3, #1
 80098aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	029b      	lsls	r3, r3, #10
 80098be:	b29b      	uxth	r3, r3
 80098c0:	4313      	orrs	r3, r2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098c8:	801a      	strh	r2, [r3, #0]
 80098ca:	e02d      	b.n	8009928 <USB_EPStartXfer+0x12a0>
 80098cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	785b      	ldrb	r3, [r3, #1]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d125      	bne.n	8009928 <USB_EPStartXfer+0x12a0>
 80098dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	461a      	mov	r2, r3
 80098ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80098f2:	4413      	add	r3, r2
 80098f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80098f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	011a      	lsls	r2, r3, #4
 8009906:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800990a:	4413      	add	r3, r2
 800990c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009910:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	691b      	ldr	r3, [r3, #16]
 8009920:	b29a      	uxth	r2, r3
 8009922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009926:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	2b00      	cmp	r3, #0
 8009936:	f000 8218 	beq.w	8009d6a <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800993a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009948:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800995a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800995e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d005      	beq.n	8009972 <USB_EPStartXfer+0x12ea>
 8009966:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800996a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d10d      	bne.n	800998e <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009972:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800997a:	2b00      	cmp	r3, #0
 800997c:	f040 81f5 	bne.w	8009d6a <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009980:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009988:	2b00      	cmp	r3, #0
 800998a:	f040 81ee 	bne.w	8009d6a <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800998e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009992:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	881b      	ldrh	r3, [r3, #0]
 80099aa:	b29b      	uxth	r3, r3
 80099ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b4:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80099b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	441a      	add	r2, r3
 80099d2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80099d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	8013      	strh	r3, [r2, #0]
 80099ea:	e1be      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80099ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	78db      	ldrb	r3, [r3, #3]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	f040 81b4 	bne.w	8009d66 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80099fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699a      	ldr	r2, [r3, #24]
 8009a0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d917      	bls.n	8009a4a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	699a      	ldr	r2, [r3, #24]
 8009a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	619a      	str	r2, [r3, #24]
 8009a48:	e00e      	b.n	8009a68 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2200      	movs	r2, #0
 8009a66:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f040 8085 	bne.w	8009b84 <USB_EPStartXfer+0x14fc>
 8009a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	461a      	mov	r2, r3
 8009a9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	011a      	lsls	r2, r3, #4
 8009ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009ad2:	801a      	strh	r2, [r3, #0]
 8009ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ad8:	2b3e      	cmp	r3, #62	; 0x3e
 8009ada:	d923      	bls.n	8009b24 <USB_EPStartXfer+0x149c>
 8009adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aea:	f003 031f 	and.w	r3, r3, #31
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d104      	bne.n	8009afc <USB_EPStartXfer+0x1474>
 8009af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009af6:	3b01      	subs	r3, #1
 8009af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009afc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b00:	881b      	ldrh	r3, [r3, #0]
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	029b      	lsls	r3, r3, #10
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b20:	801a      	strh	r2, [r3, #0]
 8009b22:	e060      	b.n	8009be6 <USB_EPStartXfer+0x155e>
 8009b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10c      	bne.n	8009b46 <USB_EPStartXfer+0x14be>
 8009b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b30:	881b      	ldrh	r3, [r3, #0]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b42:	801a      	strh	r2, [r3, #0]
 8009b44:	e04f      	b.n	8009be6 <USB_EPStartXfer+0x155e>
 8009b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b4a:	085b      	lsrs	r3, r3, #1
 8009b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d004      	beq.n	8009b66 <USB_EPStartXfer+0x14de>
 8009b5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b60:	3301      	adds	r3, #1
 8009b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b6a:	881b      	ldrh	r3, [r3, #0]
 8009b6c:	b29a      	uxth	r2, r3
 8009b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	029b      	lsls	r3, r3, #10
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b80:	801a      	strh	r2, [r3, #0]
 8009b82:	e030      	b.n	8009be6 <USB_EPStartXfer+0x155e>
 8009b84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d128      	bne.n	8009be6 <USB_EPStartXfer+0x155e>
 8009b94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bb8:	4413      	add	r3, r2
 8009bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009bbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	011a      	lsls	r2, r3, #4
 8009bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009be4:	801a      	strh	r2, [r3, #0]
 8009be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	f040 8085 	bne.w	8009d10 <USB_EPStartXfer+0x1688>
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	461a      	mov	r2, r3
 8009c26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c2a:	4413      	add	r3, r2
 8009c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	011a      	lsls	r2, r3, #4
 8009c3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009c42:	4413      	add	r3, r2
 8009c44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c50:	881b      	ldrh	r3, [r3, #0]
 8009c52:	b29b      	uxth	r3, r3
 8009c54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c5e:	801a      	strh	r2, [r3, #0]
 8009c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c64:	2b3e      	cmp	r3, #62	; 0x3e
 8009c66:	d923      	bls.n	8009cb0 <USB_EPStartXfer+0x1628>
 8009c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c6c:	095b      	lsrs	r3, r3, #5
 8009c6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c76:	f003 031f 	and.w	r3, r3, #31
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d104      	bne.n	8009c88 <USB_EPStartXfer+0x1600>
 8009c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c82:	3b01      	subs	r3, #1
 8009c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009c88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	029b      	lsls	r3, r3, #10
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ca2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cac:	801a      	strh	r2, [r3, #0]
 8009cae:	e05c      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10c      	bne.n	8009cd2 <USB_EPStartXfer+0x164a>
 8009cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cce:	801a      	strh	r2, [r3, #0]
 8009cd0:	e04b      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
 8009cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd6:	085b      	lsrs	r3, r3, #1
 8009cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce0:	f003 0301 	and.w	r3, r3, #1
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d004      	beq.n	8009cf2 <USB_EPStartXfer+0x166a>
 8009ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cec:	3301      	adds	r3, #1
 8009cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009cf6:	881b      	ldrh	r3, [r3, #0]
 8009cf8:	b29a      	uxth	r2, r3
 8009cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	029b      	lsls	r3, r3, #10
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	4313      	orrs	r3, r2
 8009d06:	b29a      	uxth	r2, r3
 8009d08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009d0c:	801a      	strh	r2, [r3, #0]
 8009d0e:	e02c      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
 8009d10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	785b      	ldrb	r3, [r3, #1]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d124      	bne.n	8009d6a <USB_EPStartXfer+0x16e2>
 8009d20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	461a      	mov	r2, r3
 8009d32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d36:	4413      	add	r3, r2
 8009d38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	011a      	lsls	r2, r3, #4
 8009d4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009d4e:	4413      	add	r3, r2
 8009d50:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009d62:	801a      	strh	r2, [r3, #0]
 8009d64:	e001      	b.n	8009d6a <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e03a      	b.n	8009de0 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	781b      	ldrb	r3, [r3, #0]
 8009d80:	009b      	lsls	r3, r3, #2
 8009d82:	4413      	add	r3, r2
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009d94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009d98:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009d9c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009da0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009da4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009da8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	441a      	add	r2, r3
 8009dc6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}

08009dea <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b085      	sub	sp, #20
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d020      	beq.n	8009e3e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e12:	81bb      	strh	r3, [r7, #12]
 8009e14:	89bb      	ldrh	r3, [r7, #12]
 8009e16:	f083 0310 	eor.w	r3, r3, #16
 8009e1a:	81bb      	strh	r3, [r7, #12]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	441a      	add	r2, r3
 8009e26:	89bb      	ldrh	r3, [r7, #12]
 8009e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	8013      	strh	r3, [r2, #0]
 8009e3c:	e01f      	b.n	8009e7e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e54:	81fb      	strh	r3, [r7, #14]
 8009e56:	89fb      	ldrh	r3, [r7, #14]
 8009e58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e5c:	81fb      	strh	r3, [r7, #14]
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	441a      	add	r2, r3
 8009e68:	89fb      	ldrh	r3, [r7, #14]
 8009e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3714      	adds	r7, #20
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bc80      	pop	{r7}
 8009e88:	4770      	bx	lr

08009e8a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b087      	sub	sp, #28
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	7b1b      	ldrb	r3, [r3, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	f040 809d 	bne.w	8009fd8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d04c      	beq.n	8009f40 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	823b      	strh	r3, [r7, #16]
 8009eb4:	8a3b      	ldrh	r3, [r7, #16]
 8009eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d01b      	beq.n	8009ef6 <USB_EPClearStall+0x6c>
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	4413      	add	r3, r2
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	b29b      	uxth	r3, r3
 8009ecc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ed4:	81fb      	strh	r3, [r7, #14]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	009b      	lsls	r3, r3, #2
 8009ede:	441a      	add	r2, r3
 8009ee0:	89fb      	ldrh	r3, [r7, #14]
 8009ee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	78db      	ldrb	r3, [r3, #3]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d06c      	beq.n	8009fd8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4413      	add	r3, r2
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f14:	81bb      	strh	r3, [r7, #12]
 8009f16:	89bb      	ldrh	r3, [r7, #12]
 8009f18:	f083 0320 	eor.w	r3, r3, #32
 8009f1c:	81bb      	strh	r3, [r7, #12]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	441a      	add	r2, r3
 8009f28:	89bb      	ldrh	r3, [r7, #12]
 8009f2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f3a:	b29b      	uxth	r3, r3
 8009f3c:	8013      	strh	r3, [r2, #0]
 8009f3e:	e04b      	b.n	8009fd8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	4413      	add	r3, r2
 8009f4a:	881b      	ldrh	r3, [r3, #0]
 8009f4c:	82fb      	strh	r3, [r7, #22]
 8009f4e:	8afb      	ldrh	r3, [r7, #22]
 8009f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01b      	beq.n	8009f90 <USB_EPClearStall+0x106>
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6e:	82bb      	strh	r3, [r7, #20]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	009b      	lsls	r3, r3, #2
 8009f78:	441a      	add	r2, r3
 8009f7a:	8abb      	ldrh	r3, [r7, #20]
 8009f7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	4413      	add	r3, r2
 8009f9a:	881b      	ldrh	r3, [r3, #0]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa6:	827b      	strh	r3, [r7, #18]
 8009fa8:	8a7b      	ldrh	r3, [r7, #18]
 8009faa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009fae:	827b      	strh	r3, [r7, #18]
 8009fb0:	8a7b      	ldrh	r3, [r7, #18]
 8009fb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009fb6:	827b      	strh	r3, [r7, #18]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	441a      	add	r2, r3
 8009fc2:	8a7b      	ldrh	r3, [r7, #18]
 8009fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	371c      	adds	r7, #28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bc80      	pop	{r7}
 8009fe2:	4770      	bx	lr

08009fe4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b083      	sub	sp, #12
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d103      	bne.n	8009ffe <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2280      	movs	r2, #128	; 0x80
 8009ffa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	bc80      	pop	{r7}
 800a008:	4770      	bx	lr

0800a00a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	bc80      	pop	{r7}
 800a01c:	4770      	bx	lr

0800a01e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a01e:	b480      	push	{r7}
 800a020:	b083      	sub	sp, #12
 800a022:	af00      	add	r7, sp, #0
 800a024:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	370c      	adds	r7, #12
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bc80      	pop	{r7}
 800a030:	4770      	bx	lr

0800a032 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a040:	b29b      	uxth	r3, r3
 800a042:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a044:	68fb      	ldr	r3, [r7, #12]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bc80      	pop	{r7}
 800a04e:	4770      	bx	lr

0800a050 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	bc80      	pop	{r7}
 800a064:	4770      	bx	lr

0800a066 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a066:	b480      	push	{r7}
 800a068:	b08b      	sub	sp, #44	; 0x2c
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	60f8      	str	r0, [r7, #12]
 800a06e:	60b9      	str	r1, [r7, #8]
 800a070:	4611      	mov	r1, r2
 800a072:	461a      	mov	r2, r3
 800a074:	460b      	mov	r3, r1
 800a076:	80fb      	strh	r3, [r7, #6]
 800a078:	4613      	mov	r3, r2
 800a07a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a07c:	88bb      	ldrh	r3, [r7, #4]
 800a07e:	3301      	adds	r3, #1
 800a080:	085b      	lsrs	r3, r3, #1
 800a082:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a08c:	88fb      	ldrh	r3, [r7, #6]
 800a08e:	005a      	lsls	r2, r3, #1
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	4413      	add	r3, r2
 800a094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a098:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
 800a09e:	e01e      	b.n	800a0de <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	781b      	ldrb	r3, [r3, #0]
 800a0ac:	021b      	lsls	r3, r3, #8
 800a0ae:	b21a      	sxth	r2, r3
 800a0b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	b21b      	sxth	r3, r3
 800a0b8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a0ba:	6a3b      	ldr	r3, [r7, #32]
 800a0bc:	8a7a      	ldrh	r2, [r7, #18]
 800a0be:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	3302      	adds	r3, #2
 800a0c4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	3302      	adds	r3, #2
 800a0ca:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1dd      	bne.n	800a0a0 <USB_WritePMA+0x3a>
  }
}
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	372c      	adds	r7, #44	; 0x2c
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bc80      	pop	{r7}
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b08b      	sub	sp, #44	; 0x2c
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	60f8      	str	r0, [r7, #12]
 800a0f8:	60b9      	str	r1, [r7, #8]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	460b      	mov	r3, r1
 800a100:	80fb      	strh	r3, [r7, #6]
 800a102:	4613      	mov	r3, r2
 800a104:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a106:	88bb      	ldrh	r3, [r7, #4]
 800a108:	085b      	lsrs	r3, r3, #1
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	005a      	lsls	r2, r3, #1
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	4413      	add	r3, r2
 800a11e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a122:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a124:	69bb      	ldr	r3, [r7, #24]
 800a126:	627b      	str	r3, [r7, #36]	; 0x24
 800a128:	e01b      	b.n	800a162 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	3302      	adds	r3, #2
 800a136:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	b2da      	uxtb	r2, r3
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	3301      	adds	r3, #1
 800a144:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	0a1b      	lsrs	r3, r3, #8
 800a14a:	b2da      	uxtb	r2, r3
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a150:	69fb      	ldr	r3, [r7, #28]
 800a152:	3301      	adds	r3, #1
 800a154:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	3302      	adds	r3, #2
 800a15a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15e:	3b01      	subs	r3, #1
 800a160:	627b      	str	r3, [r7, #36]	; 0x24
 800a162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e0      	bne.n	800a12a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a168:	88bb      	ldrh	r3, [r7, #4]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	b29b      	uxth	r3, r3
 800a170:	2b00      	cmp	r3, #0
 800a172:	d007      	beq.n	800a184 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a174:	6a3b      	ldr	r3, [r7, #32]
 800a176:	881b      	ldrh	r3, [r3, #0]
 800a178:	b29b      	uxth	r3, r3
 800a17a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	b2da      	uxtb	r2, r3
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	701a      	strb	r2, [r3, #0]
  }
}
 800a184:	bf00      	nop
 800a186:	372c      	adds	r7, #44	; 0x2c
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr

0800a18e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a18e:	b580      	push	{r7, lr}
 800a190:	b084      	sub	sp, #16
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
 800a196:	460b      	mov	r3, r1
 800a198:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	7c1b      	ldrb	r3, [r3, #16]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d115      	bne.n	800a1d2 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	2181      	movs	r1, #129	; 0x81
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f001 fe87 	bl	800bec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a1be:	2202      	movs	r2, #2
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f001 fe7d 	bl	800bec2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800a1d0:	e012      	b.n	800a1f8 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a1d2:	2340      	movs	r3, #64	; 0x40
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	2181      	movs	r1, #129	; 0x81
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 fe72 	bl	800bec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a1e4:	2340      	movs	r3, #64	; 0x40
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f001 fe69 	bl	800bec2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1f8:	2308      	movs	r3, #8
 800a1fa:	2203      	movs	r2, #3
 800a1fc:	2182      	movs	r1, #130	; 0x82
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f001 fe5f 	bl	800bec2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a20a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a20e:	f001 ff7f 	bl	800c110 <USBD_static_malloc>
 800a212:	4602      	mov	r2, r0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a220:	2b00      	cmp	r3, #0
 800a222:	d102      	bne.n	800a22a <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800a224:	2301      	movs	r3, #1
 800a226:	73fb      	strb	r3, [r7, #15]
 800a228:	e026      	b.n	800a278 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a230:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	2200      	movs	r2, #0
 800a248:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	7c1b      	ldrb	r3, [r3, #16]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d109      	bne.n	800a268 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a25a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a25e:	2101      	movs	r1, #1
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 ff1f 	bl	800c0a4 <USBD_LL_PrepareReceive>
 800a266:	e007      	b.n	800a278 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a26e:	2340      	movs	r3, #64	; 0x40
 800a270:	2101      	movs	r1, #1
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 ff16 	bl	800c0a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a278:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3710      	adds	r7, #16
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
 800a28a:	460b      	mov	r3, r1
 800a28c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a292:	2181      	movs	r1, #129	; 0x81
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 fe3a 	bl	800bf0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fe33 	bl	800bf0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a2b0:	2182      	movs	r1, #130	; 0x82
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 fe2b 	bl	800bf0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00e      	beq.n	800a2e6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 ff25 	bl	800c128 <USBD_static_free>
    pdev->pClassData = NULL;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3710      	adds	r7, #16
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
 800a2f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a300:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a30a:	2300      	movs	r3, #0
 800a30c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a316:	2b00      	cmp	r3, #0
 800a318:	d039      	beq.n	800a38e <USBD_CDC_Setup+0x9e>
 800a31a:	2b20      	cmp	r3, #32
 800a31c:	d17f      	bne.n	800a41e <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d029      	beq.n	800a37a <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	b25b      	sxtb	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	da11      	bge.n	800a354 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	683a      	ldr	r2, [r7, #0]
 800a33a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a33c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a33e:	683a      	ldr	r2, [r7, #0]
 800a340:	88d2      	ldrh	r2, [r2, #6]
 800a342:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a344:	6939      	ldr	r1, [r7, #16]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	88db      	ldrh	r3, [r3, #6]
 800a34a:	461a      	mov	r2, r3
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 fa0a 	bl	800b766 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a352:	e06b      	b.n	800a42c <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	785a      	ldrb	r2, [r3, #1]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	88db      	ldrh	r3, [r3, #6]
 800a362:	b2da      	uxtb	r2, r3
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a36a:	6939      	ldr	r1, [r7, #16]
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	88db      	ldrh	r3, [r3, #6]
 800a370:	461a      	mov	r2, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f001 fa25 	bl	800b7c2 <USBD_CtlPrepareRx>
      break;
 800a378:	e058      	b.n	800a42c <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	7850      	ldrb	r0, [r2, #1]
 800a386:	2200      	movs	r2, #0
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	4798      	blx	r3
      break;
 800a38c:	e04e      	b.n	800a42c <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b0b      	cmp	r3, #11
 800a394:	d02e      	beq.n	800a3f4 <USBD_CDC_Setup+0x104>
 800a396:	2b0b      	cmp	r3, #11
 800a398:	dc38      	bgt.n	800a40c <USBD_CDC_Setup+0x11c>
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <USBD_CDC_Setup+0xb4>
 800a39e:	2b0a      	cmp	r3, #10
 800a3a0:	d014      	beq.n	800a3cc <USBD_CDC_Setup+0xdc>
 800a3a2:	e033      	b.n	800a40c <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3aa:	2b03      	cmp	r3, #3
 800a3ac:	d107      	bne.n	800a3be <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a3ae:	f107 030c 	add.w	r3, r7, #12
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f001 f9d5 	bl	800b766 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3bc:	e02e      	b.n	800a41c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a3be:	6839      	ldr	r1, [r7, #0]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f001 f966 	bl	800b692 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3c6:	2302      	movs	r3, #2
 800a3c8:	75fb      	strb	r3, [r7, #23]
          break;
 800a3ca:	e027      	b.n	800a41c <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d107      	bne.n	800a3e6 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a3d6:	f107 030f 	add.w	r3, r7, #15
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f001 f9c1 	bl	800b766 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a3e4:	e01a      	b.n	800a41c <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a3e6:	6839      	ldr	r1, [r7, #0]
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f001 f952 	bl	800b692 <USBD_CtlError>
            ret = USBD_FAIL;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3f2:	e013      	b.n	800a41c <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d00d      	beq.n	800a41a <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a3fe:	6839      	ldr	r1, [r7, #0]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f001 f946 	bl	800b692 <USBD_CtlError>
            ret = USBD_FAIL;
 800a406:	2302      	movs	r3, #2
 800a408:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a40a:	e006      	b.n	800a41a <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a40c:	6839      	ldr	r1, [r7, #0]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 f93f 	bl	800b692 <USBD_CtlError>
          ret = USBD_FAIL;
 800a414:	2302      	movs	r3, #2
 800a416:	75fb      	strb	r3, [r7, #23]
          break;
 800a418:	e000      	b.n	800a41c <USBD_CDC_Setup+0x12c>
          break;
 800a41a:	bf00      	nop
      }
      break;
 800a41c:	e006      	b.n	800a42c <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a41e:	6839      	ldr	r1, [r7, #0]
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 f936 	bl	800b692 <USBD_CtlError>
      ret = USBD_FAIL;
 800a426:	2302      	movs	r3, #2
 800a428:	75fb      	strb	r3, [r7, #23]
      break;
 800a42a:	bf00      	nop
  }

  return ret;
 800a42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}

0800a436 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a436:	b580      	push	{r7, lr}
 800a438:	b084      	sub	sp, #16
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	460b      	mov	r3, r1
 800a440:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a448:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a450:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d03a      	beq.n	800a4d2 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	6879      	ldr	r1, [r7, #4]
 800a460:	4613      	mov	r3, r2
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	4413      	add	r3, r2
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	440b      	add	r3, r1
 800a46a:	331c      	adds	r3, #28
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d029      	beq.n	800a4c6 <USBD_CDC_DataIn+0x90>
 800a472:	78fa      	ldrb	r2, [r7, #3]
 800a474:	6879      	ldr	r1, [r7, #4]
 800a476:	4613      	mov	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	4413      	add	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	440b      	add	r3, r1
 800a480:	331c      	adds	r3, #28
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	78f9      	ldrb	r1, [r7, #3]
 800a486:	68b8      	ldr	r0, [r7, #8]
 800a488:	460b      	mov	r3, r1
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	440b      	add	r3, r1
 800a48e:	00db      	lsls	r3, r3, #3
 800a490:	4403      	add	r3, r0
 800a492:	3338      	adds	r3, #56	; 0x38
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	fbb2 f1f3 	udiv	r1, r2, r3
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d110      	bne.n	800a4c6 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a4a4:	78fa      	ldrb	r2, [r7, #3]
 800a4a6:	6879      	ldr	r1, [r7, #4]
 800a4a8:	4613      	mov	r3, r2
 800a4aa:	009b      	lsls	r3, r3, #2
 800a4ac:	4413      	add	r3, r2
 800a4ae:	009b      	lsls	r3, r3, #2
 800a4b0:	440b      	add	r3, r1
 800a4b2:	331c      	adds	r3, #28
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a4b8:	78f9      	ldrb	r1, [r7, #3]
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2200      	movs	r2, #0
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f001 fdcd 	bl	800c05e <USBD_LL_Transmit>
 800a4c4:	e003      	b.n	800a4ce <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	e000      	b.n	800a4d4 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a4d2:	2302      	movs	r3, #2
  }
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3710      	adds	r7, #16
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a4f0:	78fb      	ldrb	r3, [r7, #3]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f001 fdf8 	bl	800c0ea <USBD_LL_GetRxDataSize>
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00d      	beq.n	800a528 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a520:	4611      	mov	r1, r2
 800a522:	4798      	blx	r3

    return USBD_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	e000      	b.n	800a52a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a528:	2302      	movs	r3, #2
  }
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a540:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d015      	beq.n	800a578 <USBD_CDC_EP0_RxReady+0x46>
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a552:	2bff      	cmp	r3, #255	; 0xff
 800a554:	d010      	beq.n	800a578 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a564:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a56c:	b292      	uxth	r2, r2
 800a56e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	22ff      	movs	r2, #255	; 0xff
 800a574:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
	...

0800a584 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2243      	movs	r2, #67	; 0x43
 800a590:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a592:	4b03      	ldr	r3, [pc, #12]	; (800a5a0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a594:	4618      	mov	r0, r3
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	bc80      	pop	{r7}
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000104 	.word	0x20000104

0800a5a4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2243      	movs	r2, #67	; 0x43
 800a5b0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a5b2:	4b03      	ldr	r3, [pc, #12]	; (800a5c0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	370c      	adds	r7, #12
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bc80      	pop	{r7}
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	200000c0 	.word	0x200000c0

0800a5c4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b083      	sub	sp, #12
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2243      	movs	r2, #67	; 0x43
 800a5d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a5d2:	4b03      	ldr	r3, [pc, #12]	; (800a5e0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	370c      	adds	r7, #12
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bc80      	pop	{r7}
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000148 	.word	0x20000148

0800a5e4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	220a      	movs	r2, #10
 800a5f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a5f2:	4b03      	ldr	r3, [pc, #12]	; (800a600 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bc80      	pop	{r7}
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	2000007c 	.word	0x2000007c

0800a604 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a60e:	2302      	movs	r3, #2
 800a610:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	683a      	ldr	r2, [r7, #0]
 800a61c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a624:	7bfb      	ldrb	r3, [r7, #15]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr

0800a630 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a630:	b480      	push	{r7}
 800a632:	b087      	sub	sp, #28
 800a634:	af00      	add	r7, sp, #0
 800a636:	60f8      	str	r0, [r7, #12]
 800a638:	60b9      	str	r1, [r7, #8]
 800a63a:	4613      	mov	r3, r2
 800a63c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a644:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a64e:	88fa      	ldrh	r2, [r7, #6]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	371c      	adds	r7, #28
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bc80      	pop	{r7}
 800a660:	4770      	bx	lr

0800a662 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a662:	b480      	push	{r7}
 800a664:	b085      	sub	sp, #20
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a672:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	683a      	ldr	r2, [r7, #0]
 800a678:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3714      	adds	r7, #20
 800a682:	46bd      	mov	sp, r7
 800a684:	bc80      	pop	{r7}
 800a686:	4770      	bx	lr

0800a688 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a696:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d01c      	beq.n	800a6dc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d115      	bne.n	800a6d8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a6ca:	b29b      	uxth	r3, r3
 800a6cc:	2181      	movs	r1, #129	; 0x81
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 fcc5 	bl	800c05e <USBD_LL_Transmit>

      return USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e002      	b.n	800a6de <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e000      	b.n	800a6de <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800a6dc:	2302      	movs	r3, #2
  }
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3710      	adds	r7, #16
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6f4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d017      	beq.n	800a730 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	7c1b      	ldrb	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d109      	bne.n	800a71c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a70e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a712:	2101      	movs	r1, #1
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f001 fcc5 	bl	800c0a4 <USBD_LL_PrepareReceive>
 800a71a:	e007      	b.n	800a72c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a722:	2340      	movs	r3, #64	; 0x40
 800a724:	2101      	movs	r1, #1
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f001 fcbc 	bl	800c0a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a72c:	2300      	movs	r3, #0
 800a72e:	e000      	b.n	800a732 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a730:	2302      	movs	r3, #2
  }
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a73a:	b580      	push	{r7, lr}
 800a73c:	b084      	sub	sp, #16
 800a73e:	af00      	add	r7, sp, #0
 800a740:	60f8      	str	r0, [r7, #12]
 800a742:	60b9      	str	r1, [r7, #8]
 800a744:	4613      	mov	r3, r2
 800a746:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a74e:	2302      	movs	r3, #2
 800a750:	e01a      	b.n	800a788 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d003      	beq.n	800a764 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	79fa      	ldrb	r2, [r7, #7]
 800a77e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f001 fb29 	bl	800bdd8 <USBD_LL_Init>

  return USBD_OK;
 800a786:	2300      	movs	r3, #0
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d006      	beq.n	800a7b2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	73fb      	strb	r3, [r7, #15]
 800a7b0:	e001      	b.n	800a7b6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a7b2:	2302      	movs	r3, #2
 800a7b4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a7b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bc80      	pop	{r7}
 800a7c0:	4770      	bx	lr

0800a7c2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f001 fb5e 	bl	800be8c <USBD_LL_Start>

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3708      	adds	r7, #8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a7da:	b480      	push	{r7}
 800a7dc:	b083      	sub	sp, #12
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7e2:	2300      	movs	r3, #0
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bc80      	pop	{r7}
 800a7ec:	4770      	bx	lr

0800a7ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00c      	beq.n	800a822 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	78fa      	ldrb	r2, [r7, #3]
 800a812:	4611      	mov	r1, r2
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	4798      	blx	r3
 800a818:	4603      	mov	r3, r0
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a822:	7bfb      	ldrb	r3, [r7, #15]
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b082      	sub	sp, #8
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	78fa      	ldrb	r2, [r7, #3]
 800a842:	4611      	mov	r1, r2
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	4798      	blx	r3

  return USBD_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b082      	sub	sp, #8
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
 800a85a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	4618      	mov	r0, r3
 800a866:	f000 fed8 	bl	800b61a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2201      	movs	r2, #1
 800a86e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a878:	461a      	mov	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a886:	f003 031f 	and.w	r3, r3, #31
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d016      	beq.n	800a8bc <USBD_LL_SetupStage+0x6a>
 800a88e:	2b02      	cmp	r3, #2
 800a890:	d81c      	bhi.n	800a8cc <USBD_LL_SetupStage+0x7a>
 800a892:	2b00      	cmp	r3, #0
 800a894:	d002      	beq.n	800a89c <USBD_LL_SetupStage+0x4a>
 800a896:	2b01      	cmp	r3, #1
 800a898:	d008      	beq.n	800a8ac <USBD_LL_SetupStage+0x5a>
 800a89a:	e017      	b.n	800a8cc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f9cb 	bl	800ac40 <USBD_StdDevReq>
      break;
 800a8aa:	e01a      	b.n	800a8e2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fa2d 	bl	800ad14 <USBD_StdItfReq>
      break;
 800a8ba:	e012      	b.n	800a8e2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fa6d 	bl	800ada4 <USBD_StdEPReq>
      break;
 800a8ca:	e00a      	b.n	800a8e2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a8d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	4619      	mov	r1, r3
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f001 fb36 	bl	800bf4c <USBD_LL_StallEP>
      break;
 800a8e0:	bf00      	nop
  }

  return USBD_OK;
 800a8e2:	2300      	movs	r3, #0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a8fa:	7afb      	ldrb	r3, [r7, #11]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d14b      	bne.n	800a998 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a906:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a90e:	2b03      	cmp	r3, #3
 800a910:	d134      	bne.n	800a97c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	68da      	ldr	r2, [r3, #12]
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d919      	bls.n	800a952 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	68da      	ldr	r2, [r3, #12]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	1ad2      	subs	r2, r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a934:	429a      	cmp	r2, r3
 800a936:	d203      	bcs.n	800a940 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	e002      	b.n	800a946 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a944:	b29b      	uxth	r3, r3
 800a946:	461a      	mov	r2, r3
 800a948:	6879      	ldr	r1, [r7, #4]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 ff57 	bl	800b7fe <USBD_CtlContinueRx>
 800a950:	e038      	b.n	800a9c4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a958:	691b      	ldr	r3, [r3, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d00a      	beq.n	800a974 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a964:	2b03      	cmp	r3, #3
 800a966:	d105      	bne.n	800a974 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a974:	68f8      	ldr	r0, [r7, #12]
 800a976:	f000 ff54 	bl	800b822 <USBD_CtlSendStatus>
 800a97a:	e023      	b.n	800a9c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a982:	2b05      	cmp	r3, #5
 800a984:	d11e      	bne.n	800a9c4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2200      	movs	r2, #0
 800a98a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a98e:	2100      	movs	r1, #0
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f001 fadb 	bl	800bf4c <USBD_LL_StallEP>
 800a996:	e015      	b.n	800a9c4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00d      	beq.n	800a9c0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a9aa:	2b03      	cmp	r3, #3
 800a9ac:	d108      	bne.n	800a9c0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b4:	699b      	ldr	r3, [r3, #24]
 800a9b6:	7afa      	ldrb	r2, [r7, #11]
 800a9b8:	4611      	mov	r1, r2
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	4798      	blx	r3
 800a9be:	e001      	b.n	800a9c4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a9c0:	2302      	movs	r3, #2
 800a9c2:	e000      	b.n	800a9c6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	460b      	mov	r3, r1
 800a9d8:	607a      	str	r2, [r7, #4]
 800a9da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d17f      	bne.n	800aae2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	3314      	adds	r3, #20
 800a9e6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d15c      	bne.n	800aaac <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	68da      	ldr	r2, [r3, #12]
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	691b      	ldr	r3, [r3, #16]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d915      	bls.n	800aa2a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	68da      	ldr	r2, [r3, #12]
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	1ad2      	subs	r2, r2, r3
 800aa08:	697b      	ldr	r3, [r7, #20]
 800aa0a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	68db      	ldr	r3, [r3, #12]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	461a      	mov	r2, r3
 800aa14:	6879      	ldr	r1, [r7, #4]
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f000 fec1 	bl	800b79e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	2200      	movs	r2, #0
 800aa20:	2100      	movs	r1, #0
 800aa22:	68f8      	ldr	r0, [r7, #12]
 800aa24:	f001 fb3e 	bl	800c0a4 <USBD_LL_PrepareReceive>
 800aa28:	e04e      	b.n	800aac8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	6912      	ldr	r2, [r2, #16]
 800aa32:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa36:	fb01 f202 	mul.w	r2, r1, r2
 800aa3a:	1a9b      	subs	r3, r3, r2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d11c      	bne.n	800aa7a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	689a      	ldr	r2, [r3, #8]
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	d316      	bcc.n	800aa7a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	689a      	ldr	r2, [r3, #8]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d20f      	bcs.n	800aa7a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f000 fe9d 	bl	800b79e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f001 fb16 	bl	800c0a4 <USBD_LL_PrepareReceive>
 800aa78:	e026      	b.n	800aac8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d105      	bne.n	800aa9c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800aa9c:	2180      	movs	r1, #128	; 0x80
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f001 fa54 	bl	800bf4c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 fecf 	bl	800b848 <USBD_CtlReceiveStatus>
 800aaaa:	e00d      	b.n	800aac8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aab2:	2b04      	cmp	r3, #4
 800aab4:	d004      	beq.n	800aac0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800aac0:	2180      	movs	r1, #128	; 0x80
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f001 fa42 	bl	800bf4c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d11d      	bne.n	800ab0e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff fe81 	bl	800a7da <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2200      	movs	r2, #0
 800aadc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800aae0:	e015      	b.n	800ab0e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d00d      	beq.n	800ab0a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800aaf4:	2b03      	cmp	r3, #3
 800aaf6:	d108      	bne.n	800ab0a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	7afa      	ldrb	r2, [r7, #11]
 800ab02:	4611      	mov	r1, r2
 800ab04:	68f8      	ldr	r0, [r7, #12]
 800ab06:	4798      	blx	r3
 800ab08:	e001      	b.n	800ab0e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	e000      	b.n	800ab10 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab20:	2340      	movs	r3, #64	; 0x40
 800ab22:	2200      	movs	r2, #0
 800ab24:	2100      	movs	r1, #0
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f001 f9cb 	bl	800bec2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2240      	movs	r2, #64	; 0x40
 800ab38:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ab3c:	2340      	movs	r3, #64	; 0x40
 800ab3e:	2200      	movs	r2, #0
 800ab40:	2180      	movs	r1, #128	; 0x80
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f001 f9bd 	bl	800bec2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2201      	movs	r2, #1
 800ab4c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2240      	movs	r2, #64	; 0x40
 800ab52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d009      	beq.n	800ab90 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	6852      	ldr	r2, [r2, #4]
 800ab88:	b2d2      	uxtb	r2, r2
 800ab8a:	4611      	mov	r1, r2
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	4798      	blx	r3
  }

  return USBD_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b083      	sub	sp, #12
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	460b      	mov	r3, r1
 800aba4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	78fa      	ldrb	r2, [r7, #3]
 800abaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	370c      	adds	r7, #12
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2204      	movs	r2, #4
 800abd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800abd4:	2300      	movs	r3, #0
}
 800abd6:	4618      	mov	r0, r3
 800abd8:	370c      	adds	r7, #12
 800abda:	46bd      	mov	sp, r7
 800abdc:	bc80      	pop	{r7}
 800abde:	4770      	bx	lr

0800abe0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d105      	bne.n	800abfe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr

0800ac0a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ac0a:	b580      	push	{r7, lr}
 800ac0c:	b082      	sub	sp, #8
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac18:	2b03      	cmp	r3, #3
 800ac1a:	d10b      	bne.n	800ac34 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac22:	69db      	ldr	r3, [r3, #28]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac2e:	69db      	ldr	r3, [r3, #28]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
	...

0800ac40 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac56:	2b40      	cmp	r3, #64	; 0x40
 800ac58:	d005      	beq.n	800ac66 <USBD_StdDevReq+0x26>
 800ac5a:	2b40      	cmp	r3, #64	; 0x40
 800ac5c:	d84f      	bhi.n	800acfe <USBD_StdDevReq+0xbe>
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <USBD_StdDevReq+0x36>
 800ac62:	2b20      	cmp	r3, #32
 800ac64:	d14b      	bne.n	800acfe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	6839      	ldr	r1, [r7, #0]
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	4798      	blx	r3
      break;
 800ac74:	e048      	b.n	800ad08 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	785b      	ldrb	r3, [r3, #1]
 800ac7a:	2b09      	cmp	r3, #9
 800ac7c:	d839      	bhi.n	800acf2 <USBD_StdDevReq+0xb2>
 800ac7e:	a201      	add	r2, pc, #4	; (adr r2, 800ac84 <USBD_StdDevReq+0x44>)
 800ac80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac84:	0800acd5 	.word	0x0800acd5
 800ac88:	0800ace9 	.word	0x0800ace9
 800ac8c:	0800acf3 	.word	0x0800acf3
 800ac90:	0800acdf 	.word	0x0800acdf
 800ac94:	0800acf3 	.word	0x0800acf3
 800ac98:	0800acb7 	.word	0x0800acb7
 800ac9c:	0800acad 	.word	0x0800acad
 800aca0:	0800acf3 	.word	0x0800acf3
 800aca4:	0800accb 	.word	0x0800accb
 800aca8:	0800acc1 	.word	0x0800acc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800acac:	6839      	ldr	r1, [r7, #0]
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f9dc 	bl	800b06c <USBD_GetDescriptor>
          break;
 800acb4:	e022      	b.n	800acfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fb3f 	bl	800b33c <USBD_SetAddress>
          break;
 800acbe:	e01d      	b.n	800acfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fb7e 	bl	800b3c4 <USBD_SetConfig>
          break;
 800acc8:	e018      	b.n	800acfc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 fc07 	bl	800b4e0 <USBD_GetConfig>
          break;
 800acd2:	e013      	b.n	800acfc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800acd4:	6839      	ldr	r1, [r7, #0]
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f000 fc37 	bl	800b54a <USBD_GetStatus>
          break;
 800acdc:	e00e      	b.n	800acfc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc65 	bl	800b5b0 <USBD_SetFeature>
          break;
 800ace6:	e009      	b.n	800acfc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ace8:	6839      	ldr	r1, [r7, #0]
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fc74 	bl	800b5d8 <USBD_ClrFeature>
          break;
 800acf0:	e004      	b.n	800acfc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800acf2:	6839      	ldr	r1, [r7, #0]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 fccc 	bl	800b692 <USBD_CtlError>
          break;
 800acfa:	bf00      	nop
      }
      break;
 800acfc:	e004      	b.n	800ad08 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800acfe:	6839      	ldr	r1, [r7, #0]
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fcc6 	bl	800b692 <USBD_CtlError>
      break;
 800ad06:	bf00      	nop
  }

  return ret;
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop

0800ad14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
 800ad1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad2a:	2b40      	cmp	r3, #64	; 0x40
 800ad2c:	d005      	beq.n	800ad3a <USBD_StdItfReq+0x26>
 800ad2e:	2b40      	cmp	r3, #64	; 0x40
 800ad30:	d82e      	bhi.n	800ad90 <USBD_StdItfReq+0x7c>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <USBD_StdItfReq+0x26>
 800ad36:	2b20      	cmp	r3, #32
 800ad38:	d12a      	bne.n	800ad90 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad40:	3b01      	subs	r3, #1
 800ad42:	2b02      	cmp	r3, #2
 800ad44:	d81d      	bhi.n	800ad82 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	889b      	ldrh	r3, [r3, #4]
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b01      	cmp	r3, #1
 800ad4e:	d813      	bhi.n	800ad78 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	6839      	ldr	r1, [r7, #0]
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	4798      	blx	r3
 800ad5e:	4603      	mov	r3, r0
 800ad60:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	88db      	ldrh	r3, [r3, #6]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d110      	bne.n	800ad8c <USBD_StdItfReq+0x78>
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10d      	bne.n	800ad8c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 fd56 	bl	800b822 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad76:	e009      	b.n	800ad8c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800ad78:	6839      	ldr	r1, [r7, #0]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 fc89 	bl	800b692 <USBD_CtlError>
          break;
 800ad80:	e004      	b.n	800ad8c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800ad82:	6839      	ldr	r1, [r7, #0]
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 fc84 	bl	800b692 <USBD_CtlError>
          break;
 800ad8a:	e000      	b.n	800ad8e <USBD_StdItfReq+0x7a>
          break;
 800ad8c:	bf00      	nop
      }
      break;
 800ad8e:	e004      	b.n	800ad9a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fc7d 	bl	800b692 <USBD_CtlError>
      break;
 800ad98:	bf00      	nop
  }

  return USBD_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	3710      	adds	r7, #16
 800ada0:	46bd      	mov	sp, r7
 800ada2:	bd80      	pop	{r7, pc}

0800ada4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	889b      	ldrh	r3, [r3, #4]
 800adb6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adc0:	2b40      	cmp	r3, #64	; 0x40
 800adc2:	d007      	beq.n	800add4 <USBD_StdEPReq+0x30>
 800adc4:	2b40      	cmp	r3, #64	; 0x40
 800adc6:	f200 8146 	bhi.w	800b056 <USBD_StdEPReq+0x2b2>
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00a      	beq.n	800ade4 <USBD_StdEPReq+0x40>
 800adce:	2b20      	cmp	r3, #32
 800add0:	f040 8141 	bne.w	800b056 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	6839      	ldr	r1, [r7, #0]
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	4798      	blx	r3
      break;
 800ade2:	e13d      	b.n	800b060 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800adec:	2b20      	cmp	r3, #32
 800adee:	d10a      	bne.n	800ae06 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	6839      	ldr	r1, [r7, #0]
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	4798      	blx	r3
 800adfe:	4603      	mov	r3, r0
 800ae00:	73fb      	strb	r3, [r7, #15]

        return ret;
 800ae02:	7bfb      	ldrb	r3, [r7, #15]
 800ae04:	e12d      	b.n	800b062 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	785b      	ldrb	r3, [r3, #1]
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d007      	beq.n	800ae1e <USBD_StdEPReq+0x7a>
 800ae0e:	2b03      	cmp	r3, #3
 800ae10:	f300 811b 	bgt.w	800b04a <USBD_StdEPReq+0x2a6>
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d072      	beq.n	800aefe <USBD_StdEPReq+0x15a>
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d03a      	beq.n	800ae92 <USBD_StdEPReq+0xee>
 800ae1c:	e115      	b.n	800b04a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae24:	2b02      	cmp	r3, #2
 800ae26:	d002      	beq.n	800ae2e <USBD_StdEPReq+0x8a>
 800ae28:	2b03      	cmp	r3, #3
 800ae2a:	d015      	beq.n	800ae58 <USBD_StdEPReq+0xb4>
 800ae2c:	e02b      	b.n	800ae86 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae2e:	7bbb      	ldrb	r3, [r7, #14]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00c      	beq.n	800ae4e <USBD_StdEPReq+0xaa>
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	2b80      	cmp	r3, #128	; 0x80
 800ae38:	d009      	beq.n	800ae4e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f001 f884 	bl	800bf4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ae44:	2180      	movs	r1, #128	; 0x80
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 f880 	bl	800bf4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae4c:	e020      	b.n	800ae90 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 fc1e 	bl	800b692 <USBD_CtlError>
              break;
 800ae56:	e01b      	b.n	800ae90 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	885b      	ldrh	r3, [r3, #2]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d10e      	bne.n	800ae7e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00b      	beq.n	800ae7e <USBD_StdEPReq+0xda>
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b80      	cmp	r3, #128	; 0x80
 800ae6a:	d008      	beq.n	800ae7e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	88db      	ldrh	r3, [r3, #6]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d104      	bne.n	800ae7e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f001 f867 	bl	800bf4c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fccf 	bl	800b822 <USBD_CtlSendStatus>

              break;
 800ae84:	e004      	b.n	800ae90 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ae86:	6839      	ldr	r1, [r7, #0]
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fc02 	bl	800b692 <USBD_CtlError>
              break;
 800ae8e:	bf00      	nop
          }
          break;
 800ae90:	e0e0      	b.n	800b054 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d002      	beq.n	800aea2 <USBD_StdEPReq+0xfe>
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d015      	beq.n	800aecc <USBD_StdEPReq+0x128>
 800aea0:	e026      	b.n	800aef0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aea2:	7bbb      	ldrb	r3, [r7, #14]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00c      	beq.n	800aec2 <USBD_StdEPReq+0x11e>
 800aea8:	7bbb      	ldrb	r3, [r7, #14]
 800aeaa:	2b80      	cmp	r3, #128	; 0x80
 800aeac:	d009      	beq.n	800aec2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f001 f84a 	bl	800bf4c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aeb8:	2180      	movs	r1, #128	; 0x80
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f001 f846 	bl	800bf4c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aec0:	e01c      	b.n	800aefc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800aec2:	6839      	ldr	r1, [r7, #0]
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 fbe4 	bl	800b692 <USBD_CtlError>
              break;
 800aeca:	e017      	b.n	800aefc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	885b      	ldrh	r3, [r3, #2]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d112      	bne.n	800aefa <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aed4:	7bbb      	ldrb	r3, [r7, #14]
 800aed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d004      	beq.n	800aee8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800aede:	7bbb      	ldrb	r3, [r7, #14]
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f001 f851 	bl	800bf8a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fc9a 	bl	800b822 <USBD_CtlSendStatus>
              }
              break;
 800aeee:	e004      	b.n	800aefa <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800aef0:	6839      	ldr	r1, [r7, #0]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 fbcd 	bl	800b692 <USBD_CtlError>
              break;
 800aef8:	e000      	b.n	800aefc <USBD_StdEPReq+0x158>
              break;
 800aefa:	bf00      	nop
          }
          break;
 800aefc:	e0aa      	b.n	800b054 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af04:	2b02      	cmp	r3, #2
 800af06:	d002      	beq.n	800af0e <USBD_StdEPReq+0x16a>
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d032      	beq.n	800af72 <USBD_StdEPReq+0x1ce>
 800af0c:	e097      	b.n	800b03e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d007      	beq.n	800af24 <USBD_StdEPReq+0x180>
 800af14:	7bbb      	ldrb	r3, [r7, #14]
 800af16:	2b80      	cmp	r3, #128	; 0x80
 800af18:	d004      	beq.n	800af24 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800af1a:	6839      	ldr	r1, [r7, #0]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 fbb8 	bl	800b692 <USBD_CtlError>
                break;
 800af22:	e091      	b.n	800b048 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	da0b      	bge.n	800af44 <USBD_StdEPReq+0x1a0>
 800af2c:	7bbb      	ldrb	r3, [r7, #14]
 800af2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af32:	4613      	mov	r3, r2
 800af34:	009b      	lsls	r3, r3, #2
 800af36:	4413      	add	r3, r2
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	3310      	adds	r3, #16
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	4413      	add	r3, r2
 800af40:	3304      	adds	r3, #4
 800af42:	e00b      	b.n	800af5c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af56:	687a      	ldr	r2, [r7, #4]
 800af58:	4413      	add	r3, r2
 800af5a:	3304      	adds	r3, #4
 800af5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2200      	movs	r2, #0
 800af62:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2202      	movs	r2, #2
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fbfb 	bl	800b766 <USBD_CtlSendData>
              break;
 800af70:	e06a      	b.n	800b048 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af76:	2b00      	cmp	r3, #0
 800af78:	da11      	bge.n	800af9e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af7a:	7bbb      	ldrb	r3, [r7, #14]
 800af7c:	f003 020f 	and.w	r2, r3, #15
 800af80:	6879      	ldr	r1, [r7, #4]
 800af82:	4613      	mov	r3, r2
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	4413      	add	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	440b      	add	r3, r1
 800af8c:	3318      	adds	r3, #24
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d117      	bne.n	800afc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800af94:	6839      	ldr	r1, [r7, #0]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fb7b 	bl	800b692 <USBD_CtlError>
                  break;
 800af9c:	e054      	b.n	800b048 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af9e:	7bbb      	ldrb	r3, [r7, #14]
 800afa0:	f003 020f 	and.w	r2, r3, #15
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	4613      	mov	r3, r2
 800afa8:	009b      	lsls	r3, r3, #2
 800afaa:	4413      	add	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	440b      	add	r3, r1
 800afb0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d104      	bne.n	800afc4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fb68 	bl	800b692 <USBD_CtlError>
                  break;
 800afc2:	e041      	b.n	800b048 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	da0b      	bge.n	800afe4 <USBD_StdEPReq+0x240>
 800afcc:	7bbb      	ldrb	r3, [r7, #14]
 800afce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800afd2:	4613      	mov	r3, r2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	3310      	adds	r3, #16
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	4413      	add	r3, r2
 800afe0:	3304      	adds	r3, #4
 800afe2:	e00b      	b.n	800affc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afe4:	7bbb      	ldrb	r3, [r7, #14]
 800afe6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afea:	4613      	mov	r3, r2
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	4413      	add	r3, r2
 800affa:	3304      	adds	r3, #4
 800affc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800affe:	7bbb      	ldrb	r3, [r7, #14]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <USBD_StdEPReq+0x266>
 800b004:	7bbb      	ldrb	r3, [r7, #14]
 800b006:	2b80      	cmp	r3, #128	; 0x80
 800b008:	d103      	bne.n	800b012 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	2200      	movs	r2, #0
 800b00e:	601a      	str	r2, [r3, #0]
 800b010:	e00e      	b.n	800b030 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b012:	7bbb      	ldrb	r3, [r7, #14]
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 ffd6 	bl	800bfc8 <USBD_LL_IsStallEP>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d003      	beq.n	800b02a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2201      	movs	r2, #1
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	e002      	b.n	800b030 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800b02a:	68bb      	ldr	r3, [r7, #8]
 800b02c:	2200      	movs	r2, #0
 800b02e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	2202      	movs	r2, #2
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fb95 	bl	800b766 <USBD_CtlSendData>
              break;
 800b03c:	e004      	b.n	800b048 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 fb26 	bl	800b692 <USBD_CtlError>
              break;
 800b046:	bf00      	nop
          }
          break;
 800b048:	e004      	b.n	800b054 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800b04a:	6839      	ldr	r1, [r7, #0]
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f000 fb20 	bl	800b692 <USBD_CtlError>
          break;
 800b052:	bf00      	nop
      }
      break;
 800b054:	e004      	b.n	800b060 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 fb1a 	bl	800b692 <USBD_CtlError>
      break;
 800b05e:	bf00      	nop
  }

  return ret;
 800b060:	7bfb      	ldrb	r3, [r7, #15]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
	...

0800b06c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b076:	2300      	movs	r3, #0
 800b078:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b07a:	2300      	movs	r3, #0
 800b07c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b07e:	2300      	movs	r3, #0
 800b080:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	885b      	ldrh	r3, [r3, #2]
 800b086:	0a1b      	lsrs	r3, r3, #8
 800b088:	b29b      	uxth	r3, r3
 800b08a:	3b01      	subs	r3, #1
 800b08c:	2b06      	cmp	r3, #6
 800b08e:	f200 8128 	bhi.w	800b2e2 <USBD_GetDescriptor+0x276>
 800b092:	a201      	add	r2, pc, #4	; (adr r2, 800b098 <USBD_GetDescriptor+0x2c>)
 800b094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b098:	0800b0b5 	.word	0x0800b0b5
 800b09c:	0800b0cd 	.word	0x0800b0cd
 800b0a0:	0800b10d 	.word	0x0800b10d
 800b0a4:	0800b2e3 	.word	0x0800b2e3
 800b0a8:	0800b2e3 	.word	0x0800b2e3
 800b0ac:	0800b283 	.word	0x0800b283
 800b0b0:	0800b2af 	.word	0x0800b2af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	7c12      	ldrb	r2, [r2, #16]
 800b0c0:	f107 0108 	add.w	r1, r7, #8
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	4798      	blx	r3
 800b0c8:	60f8      	str	r0, [r7, #12]
      break;
 800b0ca:	e112      	b.n	800b2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	7c1b      	ldrb	r3, [r3, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10d      	bne.n	800b0f0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0dc:	f107 0208 	add.w	r2, r7, #8
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	4798      	blx	r3
 800b0e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	2202      	movs	r2, #2
 800b0ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0ee:	e100      	b.n	800b2f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	f107 0208 	add.w	r2, r7, #8
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
 800b100:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3301      	adds	r3, #1
 800b106:	2202      	movs	r2, #2
 800b108:	701a      	strb	r2, [r3, #0]
      break;
 800b10a:	e0f2      	b.n	800b2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	885b      	ldrh	r3, [r3, #2]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	2b05      	cmp	r3, #5
 800b114:	f200 80ac 	bhi.w	800b270 <USBD_GetDescriptor+0x204>
 800b118:	a201      	add	r2, pc, #4	; (adr r2, 800b120 <USBD_GetDescriptor+0xb4>)
 800b11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b11e:	bf00      	nop
 800b120:	0800b139 	.word	0x0800b139
 800b124:	0800b16d 	.word	0x0800b16d
 800b128:	0800b1a1 	.word	0x0800b1a1
 800b12c:	0800b1d5 	.word	0x0800b1d5
 800b130:	0800b209 	.word	0x0800b209
 800b134:	0800b23d 	.word	0x0800b23d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d00b      	beq.n	800b15c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	7c12      	ldrb	r2, [r2, #16]
 800b150:	f107 0108 	add.w	r1, r7, #8
 800b154:	4610      	mov	r0, r2
 800b156:	4798      	blx	r3
 800b158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b15a:	e091      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fa97 	bl	800b692 <USBD_CtlError>
            err++;
 800b164:	7afb      	ldrb	r3, [r7, #11]
 800b166:	3301      	adds	r3, #1
 800b168:	72fb      	strb	r3, [r7, #11]
          break;
 800b16a:	e089      	b.n	800b280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d00b      	beq.n	800b190 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b17e:	689b      	ldr	r3, [r3, #8]
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	7c12      	ldrb	r2, [r2, #16]
 800b184:	f107 0108 	add.w	r1, r7, #8
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
 800b18c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b18e:	e077      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b190:	6839      	ldr	r1, [r7, #0]
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 fa7d 	bl	800b692 <USBD_CtlError>
            err++;
 800b198:	7afb      	ldrb	r3, [r7, #11]
 800b19a:	3301      	adds	r3, #1
 800b19c:	72fb      	strb	r3, [r7, #11]
          break;
 800b19e:	e06f      	b.n	800b280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d00b      	beq.n	800b1c4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	7c12      	ldrb	r2, [r2, #16]
 800b1b8:	f107 0108 	add.w	r1, r7, #8
 800b1bc:	4610      	mov	r0, r2
 800b1be:	4798      	blx	r3
 800b1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1c2:	e05d      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1c4:	6839      	ldr	r1, [r7, #0]
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f000 fa63 	bl	800b692 <USBD_CtlError>
            err++;
 800b1cc:	7afb      	ldrb	r3, [r7, #11]
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1d2:	e055      	b.n	800b280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00b      	beq.n	800b1f8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b1e6:	691b      	ldr	r3, [r3, #16]
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	7c12      	ldrb	r2, [r2, #16]
 800b1ec:	f107 0108 	add.w	r1, r7, #8
 800b1f0:	4610      	mov	r0, r2
 800b1f2:	4798      	blx	r3
 800b1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1f6:	e043      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fa49 	bl	800b692 <USBD_CtlError>
            err++;
 800b200:	7afb      	ldrb	r3, [r7, #11]
 800b202:	3301      	adds	r3, #1
 800b204:	72fb      	strb	r3, [r7, #11]
          break;
 800b206:	e03b      	b.n	800b280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b20e:	695b      	ldr	r3, [r3, #20]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00b      	beq.n	800b22c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b21a:	695b      	ldr	r3, [r3, #20]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	7c12      	ldrb	r2, [r2, #16]
 800b220:	f107 0108 	add.w	r1, r7, #8
 800b224:	4610      	mov	r0, r2
 800b226:	4798      	blx	r3
 800b228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b22a:	e029      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b22c:	6839      	ldr	r1, [r7, #0]
 800b22e:	6878      	ldr	r0, [r7, #4]
 800b230:	f000 fa2f 	bl	800b692 <USBD_CtlError>
            err++;
 800b234:	7afb      	ldrb	r3, [r7, #11]
 800b236:	3301      	adds	r3, #1
 800b238:	72fb      	strb	r3, [r7, #11]
          break;
 800b23a:	e021      	b.n	800b280 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b242:	699b      	ldr	r3, [r3, #24]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00b      	beq.n	800b260 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	7c12      	ldrb	r2, [r2, #16]
 800b254:	f107 0108 	add.w	r1, r7, #8
 800b258:	4610      	mov	r0, r2
 800b25a:	4798      	blx	r3
 800b25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b25e:	e00f      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa15 	bl	800b692 <USBD_CtlError>
            err++;
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	3301      	adds	r3, #1
 800b26c:	72fb      	strb	r3, [r7, #11]
          break;
 800b26e:	e007      	b.n	800b280 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fa0d 	bl	800b692 <USBD_CtlError>
          err++;
 800b278:	7afb      	ldrb	r3, [r7, #11]
 800b27a:	3301      	adds	r3, #1
 800b27c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800b27e:	e038      	b.n	800b2f2 <USBD_GetDescriptor+0x286>
 800b280:	e037      	b.n	800b2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7c1b      	ldrb	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d109      	bne.n	800b29e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b292:	f107 0208 	add.w	r2, r7, #8
 800b296:	4610      	mov	r0, r2
 800b298:	4798      	blx	r3
 800b29a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b29c:	e029      	b.n	800b2f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b29e:	6839      	ldr	r1, [r7, #0]
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f000 f9f6 	bl	800b692 <USBD_CtlError>
        err++;
 800b2a6:	7afb      	ldrb	r3, [r7, #11]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	72fb      	strb	r3, [r7, #11]
      break;
 800b2ac:	e021      	b.n	800b2f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7c1b      	ldrb	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10d      	bne.n	800b2d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2be:	f107 0208 	add.w	r2, r7, #8
 800b2c2:	4610      	mov	r0, r2
 800b2c4:	4798      	blx	r3
 800b2c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	2207      	movs	r2, #7
 800b2ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2d0:	e00f      	b.n	800b2f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f9dc 	bl	800b692 <USBD_CtlError>
        err++;
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	72fb      	strb	r3, [r7, #11]
      break;
 800b2e0:	e007      	b.n	800b2f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f9d4 	bl	800b692 <USBD_CtlError>
      err++;
 800b2ea:	7afb      	ldrb	r3, [r7, #11]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	72fb      	strb	r3, [r7, #11]
      break;
 800b2f0:	bf00      	nop
  }

  if (err != 0U)
 800b2f2:	7afb      	ldrb	r3, [r7, #11]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11c      	bne.n	800b332 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b2f8:	893b      	ldrh	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d011      	beq.n	800b322 <USBD_GetDescriptor+0x2b6>
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	88db      	ldrh	r3, [r3, #6]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d00d      	beq.n	800b322 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	88da      	ldrh	r2, [r3, #6]
 800b30a:	893b      	ldrh	r3, [r7, #8]
 800b30c:	4293      	cmp	r3, r2
 800b30e:	bf28      	it	cs
 800b310:	4613      	movcs	r3, r2
 800b312:	b29b      	uxth	r3, r3
 800b314:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b316:	893b      	ldrh	r3, [r7, #8]
 800b318:	461a      	mov	r2, r3
 800b31a:	68f9      	ldr	r1, [r7, #12]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fa22 	bl	800b766 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	88db      	ldrh	r3, [r3, #6]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d104      	bne.n	800b334 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 fa79 	bl	800b822 <USBD_CtlSendStatus>
 800b330:	e000      	b.n	800b334 <USBD_GetDescriptor+0x2c8>
    return;
 800b332:	bf00      	nop
    }
  }
}
 800b334:	3710      	adds	r7, #16
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
 800b33a:	bf00      	nop

0800b33c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	889b      	ldrh	r3, [r3, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d130      	bne.n	800b3b0 <USBD_SetAddress+0x74>
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	88db      	ldrh	r3, [r3, #6]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d12c      	bne.n	800b3b0 <USBD_SetAddress+0x74>
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	885b      	ldrh	r3, [r3, #2]
 800b35a:	2b7f      	cmp	r3, #127	; 0x7f
 800b35c:	d828      	bhi.n	800b3b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	885b      	ldrh	r3, [r3, #2]
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b368:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b370:	2b03      	cmp	r3, #3
 800b372:	d104      	bne.n	800b37e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b374:	6839      	ldr	r1, [r7, #0]
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 f98b 	bl	800b692 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b37c:	e01d      	b.n	800b3ba <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	7bfa      	ldrb	r2, [r7, #15]
 800b382:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b386:	7bfb      	ldrb	r3, [r7, #15]
 800b388:	4619      	mov	r1, r3
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fe48 	bl	800c020 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b390:	6878      	ldr	r0, [r7, #4]
 800b392:	f000 fa46 	bl	800b822 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b396:	7bfb      	ldrb	r3, [r7, #15]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d004      	beq.n	800b3a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2202      	movs	r2, #2
 800b3a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a4:	e009      	b.n	800b3ba <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ae:	e004      	b.n	800b3ba <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 f96d 	bl	800b692 <USBD_CtlError>
  }
}
 800b3b8:	bf00      	nop
 800b3ba:	bf00      	nop
 800b3bc:	3710      	adds	r7, #16
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd80      	pop	{r7, pc}
	...

0800b3c4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	b2da      	uxtb	r2, r3
 800b3d4:	4b41      	ldr	r3, [pc, #260]	; (800b4dc <USBD_SetConfig+0x118>)
 800b3d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3d8:	4b40      	ldr	r3, [pc, #256]	; (800b4dc <USBD_SetConfig+0x118>)
 800b3da:	781b      	ldrb	r3, [r3, #0]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d904      	bls.n	800b3ea <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b3e0:	6839      	ldr	r1, [r7, #0]
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f000 f955 	bl	800b692 <USBD_CtlError>
 800b3e8:	e075      	b.n	800b4d6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	d002      	beq.n	800b3fa <USBD_SetConfig+0x36>
 800b3f4:	2b03      	cmp	r3, #3
 800b3f6:	d023      	beq.n	800b440 <USBD_SetConfig+0x7c>
 800b3f8:	e062      	b.n	800b4c0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b3fa:	4b38      	ldr	r3, [pc, #224]	; (800b4dc <USBD_SetConfig+0x118>)
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d01a      	beq.n	800b438 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b402:	4b36      	ldr	r3, [pc, #216]	; (800b4dc <USBD_SetConfig+0x118>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2203      	movs	r2, #3
 800b410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b414:	4b31      	ldr	r3, [pc, #196]	; (800b4dc <USBD_SetConfig+0x118>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7ff f9e7 	bl	800a7ee <USBD_SetClassConfig>
 800b420:	4603      	mov	r3, r0
 800b422:	2b02      	cmp	r3, #2
 800b424:	d104      	bne.n	800b430 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b426:	6839      	ldr	r1, [r7, #0]
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f932 	bl	800b692 <USBD_CtlError>
            return;
 800b42e:	e052      	b.n	800b4d6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f9f6 	bl	800b822 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b436:	e04e      	b.n	800b4d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 f9f2 	bl	800b822 <USBD_CtlSendStatus>
        break;
 800b43e:	e04a      	b.n	800b4d6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b440:	4b26      	ldr	r3, [pc, #152]	; (800b4dc <USBD_SetConfig+0x118>)
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d112      	bne.n	800b46e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b450:	4b22      	ldr	r3, [pc, #136]	; (800b4dc <USBD_SetConfig+0x118>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	461a      	mov	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b45a:	4b20      	ldr	r3, [pc, #128]	; (800b4dc <USBD_SetConfig+0x118>)
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f7ff f9e3 	bl	800a82c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f000 f9db 	bl	800b822 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b46c:	e033      	b.n	800b4d6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b46e:	4b1b      	ldr	r3, [pc, #108]	; (800b4dc <USBD_SetConfig+0x118>)
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	461a      	mov	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	429a      	cmp	r2, r3
 800b47a:	d01d      	beq.n	800b4b8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	b2db      	uxtb	r3, r3
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff f9d1 	bl	800a82c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b48a:	4b14      	ldr	r3, [pc, #80]	; (800b4dc <USBD_SetConfig+0x118>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	461a      	mov	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b494:	4b11      	ldr	r3, [pc, #68]	; (800b4dc <USBD_SetConfig+0x118>)
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	4619      	mov	r1, r3
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f7ff f9a7 	bl	800a7ee <USBD_SetClassConfig>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d104      	bne.n	800b4b0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b4a6:	6839      	ldr	r1, [r7, #0]
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f000 f8f2 	bl	800b692 <USBD_CtlError>
            return;
 800b4ae:	e012      	b.n	800b4d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f000 f9b6 	bl	800b822 <USBD_CtlSendStatus>
        break;
 800b4b6:	e00e      	b.n	800b4d6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f000 f9b2 	bl	800b822 <USBD_CtlSendStatus>
        break;
 800b4be:	e00a      	b.n	800b4d6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b4c0:	6839      	ldr	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f8e5 	bl	800b692 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b4c8:	4b04      	ldr	r3, [pc, #16]	; (800b4dc <USBD_SetConfig+0x118>)
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7ff f9ac 	bl	800a82c <USBD_ClrClassConfig>
        break;
 800b4d4:	bf00      	nop
    }
  }
}
 800b4d6:	3708      	adds	r7, #8
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	200003e0 	.word	0x200003e0

0800b4e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	88db      	ldrh	r3, [r3, #6]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d004      	beq.n	800b4fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4f2:	6839      	ldr	r1, [r7, #0]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 f8cc 	bl	800b692 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4fa:	e022      	b.n	800b542 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b502:	2b02      	cmp	r3, #2
 800b504:	dc02      	bgt.n	800b50c <USBD_GetConfig+0x2c>
 800b506:	2b00      	cmp	r3, #0
 800b508:	dc03      	bgt.n	800b512 <USBD_GetConfig+0x32>
 800b50a:	e015      	b.n	800b538 <USBD_GetConfig+0x58>
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d00b      	beq.n	800b528 <USBD_GetConfig+0x48>
 800b510:	e012      	b.n	800b538 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2200      	movs	r2, #0
 800b516:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	3308      	adds	r3, #8
 800b51c:	2201      	movs	r2, #1
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f920 	bl	800b766 <USBD_CtlSendData>
        break;
 800b526:	e00c      	b.n	800b542 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3304      	adds	r3, #4
 800b52c:	2201      	movs	r2, #1
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f918 	bl	800b766 <USBD_CtlSendData>
        break;
 800b536:	e004      	b.n	800b542 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f8a9 	bl	800b692 <USBD_CtlError>
        break;
 800b540:	bf00      	nop
}
 800b542:	bf00      	nop
 800b544:	3708      	adds	r7, #8
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}

0800b54a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b54a:	b580      	push	{r7, lr}
 800b54c:	b082      	sub	sp, #8
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
 800b552:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b55a:	3b01      	subs	r3, #1
 800b55c:	2b02      	cmp	r3, #2
 800b55e:	d81e      	bhi.n	800b59e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	88db      	ldrh	r3, [r3, #6]
 800b564:	2b02      	cmp	r3, #2
 800b566:	d004      	beq.n	800b572 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 f891 	bl	800b692 <USBD_CtlError>
        break;
 800b570:	e01a      	b.n	800b5a8 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f043 0202 	orr.w	r2, r3, #2
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	330c      	adds	r3, #12
 800b592:	2202      	movs	r2, #2
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f8e5 	bl	800b766 <USBD_CtlSendData>
      break;
 800b59c:	e004      	b.n	800b5a8 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f876 	bl	800b692 <USBD_CtlError>
      break;
 800b5a6:	bf00      	nop
  }
}
 800b5a8:	bf00      	nop
 800b5aa:	3708      	adds	r7, #8
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	885b      	ldrh	r3, [r3, #2]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d106      	bne.n	800b5d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f929 	bl	800b822 <USBD_CtlSendStatus>
  }
}
 800b5d0:	bf00      	nop
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d80b      	bhi.n	800b606 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	885b      	ldrh	r3, [r3, #2]
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10c      	bne.n	800b610 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f90f 	bl	800b822 <USBD_CtlSendStatus>
      }
      break;
 800b604:	e004      	b.n	800b610 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b606:	6839      	ldr	r1, [r7, #0]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	f000 f842 	bl	800b692 <USBD_CtlError>
      break;
 800b60e:	e000      	b.n	800b612 <USBD_ClrFeature+0x3a>
      break;
 800b610:	bf00      	nop
  }
}
 800b612:	bf00      	nop
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	781a      	ldrb	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	785a      	ldrb	r2, [r3, #1]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	3302      	adds	r3, #2
 800b638:	781b      	ldrb	r3, [r3, #0]
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	3303      	adds	r3, #3
 800b640:	781b      	ldrb	r3, [r3, #0]
 800b642:	b29b      	uxth	r3, r3
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	b29b      	uxth	r3, r3
 800b648:	4413      	add	r3, r2
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	3304      	adds	r3, #4
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	b29a      	uxth	r2, r3
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	3305      	adds	r3, #5
 800b65c:	781b      	ldrb	r3, [r3, #0]
 800b65e:	b29b      	uxth	r3, r3
 800b660:	021b      	lsls	r3, r3, #8
 800b662:	b29b      	uxth	r3, r3
 800b664:	4413      	add	r3, r2
 800b666:	b29a      	uxth	r2, r3
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	3306      	adds	r3, #6
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b29a      	uxth	r2, r3
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	3307      	adds	r3, #7
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	021b      	lsls	r3, r3, #8
 800b67e:	b29b      	uxth	r3, r3
 800b680:	4413      	add	r3, r2
 800b682:	b29a      	uxth	r2, r3
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	80da      	strh	r2, [r3, #6]

}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc80      	pop	{r7}
 800b690:	4770      	bx	lr

0800b692 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b69c:	2180      	movs	r1, #128	; 0x80
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fc54 	bl	800bf4c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 fc50 	bl	800bf4c <USBD_LL_StallEP>
}
 800b6ac:	bf00      	nop
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d032      	beq.n	800b730 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 f834 	bl	800b738 <USBD_GetLen>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	b29a      	uxth	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
 800b6e0:	1c5a      	adds	r2, r3, #1
 800b6e2:	75fa      	strb	r2, [r7, #23]
 800b6e4:	461a      	mov	r2, r3
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	4413      	add	r3, r2
 800b6ea:	687a      	ldr	r2, [r7, #4]
 800b6ec:	7812      	ldrb	r2, [r2, #0]
 800b6ee:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b6f0:	7dfb      	ldrb	r3, [r7, #23]
 800b6f2:	1c5a      	adds	r2, r3, #1
 800b6f4:	75fa      	strb	r2, [r7, #23]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b700:	e012      	b.n	800b728 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	1c5a      	adds	r2, r3, #1
 800b706:	60fa      	str	r2, [r7, #12]
 800b708:	7dfa      	ldrb	r2, [r7, #23]
 800b70a:	1c51      	adds	r1, r2, #1
 800b70c:	75f9      	strb	r1, [r7, #23]
 800b70e:	4611      	mov	r1, r2
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	440a      	add	r2, r1
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b718:	7dfb      	ldrb	r3, [r7, #23]
 800b71a:	1c5a      	adds	r2, r3, #1
 800b71c:	75fa      	strb	r2, [r7, #23]
 800b71e:	461a      	mov	r2, r3
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4413      	add	r3, r2
 800b724:	2200      	movs	r2, #0
 800b726:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e8      	bne.n	800b702 <USBD_GetString+0x4e>
    }
  }
}
 800b730:	bf00      	nop
 800b732:	3718      	adds	r7, #24
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b740:	2300      	movs	r3, #0
 800b742:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b744:	e005      	b.n	800b752 <USBD_GetLen+0x1a>
  {
    len++;
 800b746:	7bfb      	ldrb	r3, [r7, #15]
 800b748:	3301      	adds	r3, #1
 800b74a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3301      	adds	r3, #1
 800b750:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1f5      	bne.n	800b746 <USBD_GetLen+0xe>
  }

  return len;
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3714      	adds	r7, #20
 800b760:	46bd      	mov	sp, r7
 800b762:	bc80      	pop	{r7}
 800b764:	4770      	bx	lr

0800b766 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b766:	b580      	push	{r7, lr}
 800b768:	b084      	sub	sp, #16
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	4613      	mov	r3, r2
 800b772:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2202      	movs	r2, #2
 800b778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b77c:	88fa      	ldrh	r2, [r7, #6]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b782:	88fa      	ldrh	r2, [r7, #6]
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b788:	88fb      	ldrh	r3, [r7, #6]
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	2100      	movs	r1, #0
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f000 fc65 	bl	800c05e <USBD_LL_Transmit>

  return USBD_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3710      	adds	r7, #16
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}

0800b79e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b79e:	b580      	push	{r7, lr}
 800b7a0:	b084      	sub	sp, #16
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	60f8      	str	r0, [r7, #12]
 800b7a6:	60b9      	str	r1, [r7, #8]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b7ac:	88fb      	ldrh	r3, [r7, #6]
 800b7ae:	68ba      	ldr	r2, [r7, #8]
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fc53 	bl	800c05e <USBD_LL_Transmit>

  return USBD_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b7c2:	b580      	push	{r7, lr}
 800b7c4:	b084      	sub	sp, #16
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	60f8      	str	r0, [r7, #12]
 800b7ca:	60b9      	str	r1, [r7, #8]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	2203      	movs	r2, #3
 800b7d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7d8:	88fa      	ldrh	r2, [r7, #6]
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b7e0:	88fa      	ldrh	r2, [r7, #6]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7e8:	88fb      	ldrh	r3, [r7, #6]
 800b7ea:	68ba      	ldr	r2, [r7, #8]
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 fc58 	bl	800c0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	60f8      	str	r0, [r7, #12]
 800b806:	60b9      	str	r1, [r7, #8]
 800b808:	4613      	mov	r3, r2
 800b80a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b80c:	88fb      	ldrh	r3, [r7, #6]
 800b80e:	68ba      	ldr	r2, [r7, #8]
 800b810:	2100      	movs	r1, #0
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 fc46 	bl	800c0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b082      	sub	sp, #8
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2204      	movs	r2, #4
 800b82e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b832:	2300      	movs	r3, #0
 800b834:	2200      	movs	r2, #0
 800b836:	2100      	movs	r1, #0
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 fc10 	bl	800c05e <USBD_LL_Transmit>

  return USBD_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b082      	sub	sp, #8
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2205      	movs	r2, #5
 800b854:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b858:	2300      	movs	r3, #0
 800b85a:	2200      	movs	r2, #0
 800b85c:	2100      	movs	r1, #0
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f000 fc20 	bl	800c0a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3708      	adds	r7, #8
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b874:	2200      	movs	r2, #0
 800b876:	4912      	ldr	r1, [pc, #72]	; (800b8c0 <MX_USB_DEVICE_Init+0x50>)
 800b878:	4812      	ldr	r0, [pc, #72]	; (800b8c4 <MX_USB_DEVICE_Init+0x54>)
 800b87a:	f7fe ff5e 	bl	800a73a <USBD_Init>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	d001      	beq.n	800b888 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b884:	f7f6 fc16 	bl	80020b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b888:	490f      	ldr	r1, [pc, #60]	; (800b8c8 <MX_USB_DEVICE_Init+0x58>)
 800b88a:	480e      	ldr	r0, [pc, #56]	; (800b8c4 <MX_USB_DEVICE_Init+0x54>)
 800b88c:	f7fe ff80 	bl	800a790 <USBD_RegisterClass>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b896:	f7f6 fc0d 	bl	80020b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b89a:	490c      	ldr	r1, [pc, #48]	; (800b8cc <MX_USB_DEVICE_Init+0x5c>)
 800b89c:	4809      	ldr	r0, [pc, #36]	; (800b8c4 <MX_USB_DEVICE_Init+0x54>)
 800b89e:	f7fe feb1 	bl	800a604 <USBD_CDC_RegisterInterface>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d001      	beq.n	800b8ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b8a8:	f7f6 fc04 	bl	80020b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b8ac:	4805      	ldr	r0, [pc, #20]	; (800b8c4 <MX_USB_DEVICE_Init+0x54>)
 800b8ae:	f7fe ff88 	bl	800a7c2 <USBD_Start>
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d001      	beq.n	800b8bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b8b8:	f7f6 fbfc 	bl	80020b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b8bc:	bf00      	nop
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	2000019c 	.word	0x2000019c
 800b8c4:	200003e4 	.word	0x200003e4
 800b8c8:	20000088 	.word	0x20000088
 800b8cc:	2000018c 	.word	0x2000018c

0800b8d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	4905      	ldr	r1, [pc, #20]	; (800b8ec <CDC_Init_FS+0x1c>)
 800b8d8:	4805      	ldr	r0, [pc, #20]	; (800b8f0 <CDC_Init_FS+0x20>)
 800b8da:	f7fe fea9 	bl	800a630 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b8de:	4905      	ldr	r1, [pc, #20]	; (800b8f4 <CDC_Init_FS+0x24>)
 800b8e0:	4803      	ldr	r0, [pc, #12]	; (800b8f0 <CDC_Init_FS+0x20>)
 800b8e2:	f7fe febe 	bl	800a662 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b8e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	20000aa8 	.word	0x20000aa8
 800b8f0:	200003e4 	.word	0x200003e4
 800b8f4:	200006a8 	.word	0x200006a8

0800b8f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b8fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	46bd      	mov	sp, r7
 800b902:	bc80      	pop	{r7}
 800b904:	4770      	bx	lr
	...

0800b908 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	4603      	mov	r3, r0
 800b910:	6039      	str	r1, [r7, #0]
 800b912:	71fb      	strb	r3, [r7, #7]
 800b914:	4613      	mov	r3, r2
 800b916:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b918:	79fb      	ldrb	r3, [r7, #7]
 800b91a:	2b23      	cmp	r3, #35	; 0x23
 800b91c:	d84a      	bhi.n	800b9b4 <CDC_Control_FS+0xac>
 800b91e:	a201      	add	r2, pc, #4	; (adr r2, 800b924 <CDC_Control_FS+0x1c>)
 800b920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b924:	0800b9b5 	.word	0x0800b9b5
 800b928:	0800b9b5 	.word	0x0800b9b5
 800b92c:	0800b9b5 	.word	0x0800b9b5
 800b930:	0800b9b5 	.word	0x0800b9b5
 800b934:	0800b9b5 	.word	0x0800b9b5
 800b938:	0800b9b5 	.word	0x0800b9b5
 800b93c:	0800b9b5 	.word	0x0800b9b5
 800b940:	0800b9b5 	.word	0x0800b9b5
 800b944:	0800b9b5 	.word	0x0800b9b5
 800b948:	0800b9b5 	.word	0x0800b9b5
 800b94c:	0800b9b5 	.word	0x0800b9b5
 800b950:	0800b9b5 	.word	0x0800b9b5
 800b954:	0800b9b5 	.word	0x0800b9b5
 800b958:	0800b9b5 	.word	0x0800b9b5
 800b95c:	0800b9b5 	.word	0x0800b9b5
 800b960:	0800b9b5 	.word	0x0800b9b5
 800b964:	0800b9b5 	.word	0x0800b9b5
 800b968:	0800b9b5 	.word	0x0800b9b5
 800b96c:	0800b9b5 	.word	0x0800b9b5
 800b970:	0800b9b5 	.word	0x0800b9b5
 800b974:	0800b9b5 	.word	0x0800b9b5
 800b978:	0800b9b5 	.word	0x0800b9b5
 800b97c:	0800b9b5 	.word	0x0800b9b5
 800b980:	0800b9b5 	.word	0x0800b9b5
 800b984:	0800b9b5 	.word	0x0800b9b5
 800b988:	0800b9b5 	.word	0x0800b9b5
 800b98c:	0800b9b5 	.word	0x0800b9b5
 800b990:	0800b9b5 	.word	0x0800b9b5
 800b994:	0800b9b5 	.word	0x0800b9b5
 800b998:	0800b9b5 	.word	0x0800b9b5
 800b99c:	0800b9b5 	.word	0x0800b9b5
 800b9a0:	0800b9b5 	.word	0x0800b9b5
 800b9a4:	0800b9b5 	.word	0x0800b9b5
 800b9a8:	0800b9b5 	.word	0x0800b9b5
 800b9ac:	0800b9b5 	.word	0x0800b9b5
 800b9b0:	0800b9b5 	.word	0x0800b9b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b9b4:	bf00      	nop
  }

  return (USBD_OK);
 800b9b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bc80      	pop	{r7}
 800b9c0:	4770      	bx	lr
 800b9c2:	bf00      	nop

0800b9c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b9ce:	6879      	ldr	r1, [r7, #4]
 800b9d0:	4805      	ldr	r0, [pc, #20]	; (800b9e8 <CDC_Receive_FS+0x24>)
 800b9d2:	f7fe fe46 	bl	800a662 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b9d6:	4804      	ldr	r0, [pc, #16]	; (800b9e8 <CDC_Receive_FS+0x24>)
 800b9d8:	f7fe fe85 	bl	800a6e6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b9dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	200003e4 	.word	0x200003e4

0800b9ec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b9fc:	4b0d      	ldr	r3, [pc, #52]	; (800ba34 <CDC_Transmit_FS+0x48>)
 800b9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e00b      	b.n	800ba2a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba12:	887b      	ldrh	r3, [r7, #2]
 800ba14:	461a      	mov	r2, r3
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	4806      	ldr	r0, [pc, #24]	; (800ba34 <CDC_Transmit_FS+0x48>)
 800ba1a:	f7fe fe09 	bl	800a630 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ba1e:	4805      	ldr	r0, [pc, #20]	; (800ba34 <CDC_Transmit_FS+0x48>)
 800ba20:	f7fe fe32 	bl	800a688 <USBD_CDC_TransmitPacket>
 800ba24:	4603      	mov	r3, r0
 800ba26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ba28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200003e4 	.word	0x200003e4

0800ba38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	6039      	str	r1, [r7, #0]
 800ba42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	2212      	movs	r2, #18
 800ba48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ba4a:	4b03      	ldr	r3, [pc, #12]	; (800ba58 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr
 800ba56:	bf00      	nop
 800ba58:	200001b8 	.word	0x200001b8

0800ba5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	6039      	str	r1, [r7, #0]
 800ba66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2204      	movs	r2, #4
 800ba6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ba6e:	4b03      	ldr	r3, [pc, #12]	; (800ba7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bc80      	pop	{r7}
 800ba78:	4770      	bx	lr
 800ba7a:	bf00      	nop
 800ba7c:	200001cc 	.word	0x200001cc

0800ba80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	4603      	mov	r3, r0
 800ba88:	6039      	str	r1, [r7, #0]
 800ba8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba8c:	79fb      	ldrb	r3, [r7, #7]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d105      	bne.n	800ba9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba92:	683a      	ldr	r2, [r7, #0]
 800ba94:	4907      	ldr	r1, [pc, #28]	; (800bab4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba96:	4808      	ldr	r0, [pc, #32]	; (800bab8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba98:	f7ff fe0c 	bl	800b6b4 <USBD_GetString>
 800ba9c:	e004      	b.n	800baa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba9e:	683a      	ldr	r2, [r7, #0]
 800baa0:	4904      	ldr	r1, [pc, #16]	; (800bab4 <USBD_FS_ProductStrDescriptor+0x34>)
 800baa2:	4805      	ldr	r0, [pc, #20]	; (800bab8 <USBD_FS_ProductStrDescriptor+0x38>)
 800baa4:	f7ff fe06 	bl	800b6b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800baa8:	4b02      	ldr	r3, [pc, #8]	; (800bab4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3708      	adds	r7, #8
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	20000ea8 	.word	0x20000ea8
 800bab8:	0800de90 	.word	0x0800de90

0800babc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	4603      	mov	r3, r0
 800bac4:	6039      	str	r1, [r7, #0]
 800bac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	4904      	ldr	r1, [pc, #16]	; (800badc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bacc:	4804      	ldr	r0, [pc, #16]	; (800bae0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bace:	f7ff fdf1 	bl	800b6b4 <USBD_GetString>
  return USBD_StrDesc;
 800bad2:	4b02      	ldr	r3, [pc, #8]	; (800badc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	20000ea8 	.word	0x20000ea8
 800bae0:	0800dea4 	.word	0x0800dea4

0800bae4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	4603      	mov	r3, r0
 800baec:	6039      	str	r1, [r7, #0]
 800baee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	221a      	movs	r2, #26
 800baf4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800baf6:	f000 f843 	bl	800bb80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bafa:	4b02      	ldr	r3, [pc, #8]	; (800bb04 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	200001d0 	.word	0x200001d0

0800bb08 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b082      	sub	sp, #8
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	4603      	mov	r3, r0
 800bb10:	6039      	str	r1, [r7, #0]
 800bb12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d105      	bne.n	800bb26 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb1a:	683a      	ldr	r2, [r7, #0]
 800bb1c:	4907      	ldr	r1, [pc, #28]	; (800bb3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb1e:	4808      	ldr	r0, [pc, #32]	; (800bb40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb20:	f7ff fdc8 	bl	800b6b4 <USBD_GetString>
 800bb24:	e004      	b.n	800bb30 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	4904      	ldr	r1, [pc, #16]	; (800bb3c <USBD_FS_ConfigStrDescriptor+0x34>)
 800bb2a:	4805      	ldr	r0, [pc, #20]	; (800bb40 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bb2c:	f7ff fdc2 	bl	800b6b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb30:	4b02      	ldr	r3, [pc, #8]	; (800bb3c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20000ea8 	.word	0x20000ea8
 800bb40:	0800deb8 	.word	0x0800deb8

0800bb44 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb50:	79fb      	ldrb	r3, [r7, #7]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d105      	bne.n	800bb62 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb56:	683a      	ldr	r2, [r7, #0]
 800bb58:	4907      	ldr	r1, [pc, #28]	; (800bb78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb5a:	4808      	ldr	r0, [pc, #32]	; (800bb7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb5c:	f7ff fdaa 	bl	800b6b4 <USBD_GetString>
 800bb60:	e004      	b.n	800bb6c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bb62:	683a      	ldr	r2, [r7, #0]
 800bb64:	4904      	ldr	r1, [pc, #16]	; (800bb78 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bb66:	4805      	ldr	r0, [pc, #20]	; (800bb7c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bb68:	f7ff fda4 	bl	800b6b4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb6c:	4b02      	ldr	r3, [pc, #8]	; (800bb78 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000ea8 	.word	0x20000ea8
 800bb7c:	0800dec4 	.word	0x0800dec4

0800bb80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb86:	4b0f      	ldr	r3, [pc, #60]	; (800bbc4 <Get_SerialNum+0x44>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb8c:	4b0e      	ldr	r3, [pc, #56]	; (800bbc8 <Get_SerialNum+0x48>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb92:	4b0e      	ldr	r3, [pc, #56]	; (800bbcc <Get_SerialNum+0x4c>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb98:	68fa      	ldr	r2, [r7, #12]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d009      	beq.n	800bbba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bba6:	2208      	movs	r2, #8
 800bba8:	4909      	ldr	r1, [pc, #36]	; (800bbd0 <Get_SerialNum+0x50>)
 800bbaa:	68f8      	ldr	r0, [r7, #12]
 800bbac:	f000 f814 	bl	800bbd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bbb0:	2204      	movs	r2, #4
 800bbb2:	4908      	ldr	r1, [pc, #32]	; (800bbd4 <Get_SerialNum+0x54>)
 800bbb4:	68b8      	ldr	r0, [r7, #8]
 800bbb6:	f000 f80f 	bl	800bbd8 <IntToUnicode>
  }
}
 800bbba:	bf00      	nop
 800bbbc:	3710      	adds	r7, #16
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	1ffff7e8 	.word	0x1ffff7e8
 800bbc8:	1ffff7ec 	.word	0x1ffff7ec
 800bbcc:	1ffff7f0 	.word	0x1ffff7f0
 800bbd0:	200001d2 	.word	0x200001d2
 800bbd4:	200001e2 	.word	0x200001e2

0800bbd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b087      	sub	sp, #28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bbea:	2300      	movs	r3, #0
 800bbec:	75fb      	strb	r3, [r7, #23]
 800bbee:	e027      	b.n	800bc40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	0f1b      	lsrs	r3, r3, #28
 800bbf4:	2b09      	cmp	r3, #9
 800bbf6:	d80b      	bhi.n	800bc10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	0f1b      	lsrs	r3, r3, #28
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	005b      	lsls	r3, r3, #1
 800bc02:	4619      	mov	r1, r3
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	440b      	add	r3, r1
 800bc08:	3230      	adds	r2, #48	; 0x30
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	e00a      	b.n	800bc26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	0f1b      	lsrs	r3, r3, #28
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	7dfb      	ldrb	r3, [r7, #23]
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	440b      	add	r3, r1
 800bc20:	3237      	adds	r2, #55	; 0x37
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	011b      	lsls	r3, r3, #4
 800bc2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bc2c:	7dfb      	ldrb	r3, [r7, #23]
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	3301      	adds	r3, #1
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	4413      	add	r3, r2
 800bc36:	2200      	movs	r2, #0
 800bc38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bc3a:	7dfb      	ldrb	r3, [r7, #23]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	75fb      	strb	r3, [r7, #23]
 800bc40:	7dfa      	ldrb	r2, [r7, #23]
 800bc42:	79fb      	ldrb	r3, [r7, #7]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d3d3      	bcc.n	800bbf0 <IntToUnicode+0x18>
  }
}
 800bc48:	bf00      	nop
 800bc4a:	bf00      	nop
 800bc4c:	371c      	adds	r7, #28
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bc80      	pop	{r7}
 800bc52:	4770      	bx	lr

0800bc54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a0d      	ldr	r2, [pc, #52]	; (800bc98 <HAL_PCD_MspInit+0x44>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d113      	bne.n	800bc8e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bc66:	4b0d      	ldr	r3, [pc, #52]	; (800bc9c <HAL_PCD_MspInit+0x48>)
 800bc68:	69db      	ldr	r3, [r3, #28]
 800bc6a:	4a0c      	ldr	r2, [pc, #48]	; (800bc9c <HAL_PCD_MspInit+0x48>)
 800bc6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc70:	61d3      	str	r3, [r2, #28]
 800bc72:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <HAL_PCD_MspInit+0x48>)
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bc7a:	60fb      	str	r3, [r7, #12]
 800bc7c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	2014      	movs	r0, #20
 800bc84:	f7f7 fe43 	bl	800390e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800bc88:	2014      	movs	r0, #20
 800bc8a:	f7f7 fe5c 	bl	8003946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800bc8e:	bf00      	nop
 800bc90:	3710      	adds	r7, #16
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	40005c00 	.word	0x40005c00
 800bc9c:	40021000 	.word	0x40021000

0800bca0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	4610      	mov	r0, r2
 800bcb8:	f7fe fdcb 	bl	800a852 <USBD_LL_SetupStage>
}
 800bcbc:	bf00      	nop
 800bcbe:	3708      	adds	r7, #8
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b082      	sub	sp, #8
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	460b      	mov	r3, r1
 800bcce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800bcd6:	78fa      	ldrb	r2, [r7, #3]
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	4613      	mov	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	440b      	add	r3, r1
 800bce4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800bce8:	681a      	ldr	r2, [r3, #0]
 800bcea:	78fb      	ldrb	r3, [r7, #3]
 800bcec:	4619      	mov	r1, r3
 800bcee:	f7fe fdfd 	bl	800a8ec <USBD_LL_DataOutStage>
}
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800bd0c:	78fa      	ldrb	r2, [r7, #3]
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	4613      	mov	r3, r2
 800bd12:	009b      	lsls	r3, r3, #2
 800bd14:	4413      	add	r3, r2
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	440b      	add	r3, r1
 800bd1a:	333c      	adds	r3, #60	; 0x3c
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	78fb      	ldrb	r3, [r7, #3]
 800bd20:	4619      	mov	r1, r3
 800bd22:	f7fe fe54 	bl	800a9ce <USBD_LL_DataInStage>
}
 800bd26:	bf00      	nop
 800bd28:	3708      	adds	r7, #8
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b082      	sub	sp, #8
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7fe ff64 	bl	800ac0a <USBD_LL_SOF>
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}

0800bd4a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd52:	2301      	movs	r3, #1
 800bd54:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	689b      	ldr	r3, [r3, #8]
 800bd5a:	2b02      	cmp	r3, #2
 800bd5c:	d001      	beq.n	800bd62 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bd5e:	f7f6 f9a9 	bl	80020b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800bd68:	7bfa      	ldrb	r2, [r7, #15]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fe ff14 	bl	800ab9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f7fe fecd 	bl	800ab18 <USBD_LL_Reset>
}
 800bd7e:	bf00      	nop
 800bd80:	3710      	adds	r7, #16
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
	...

0800bd88 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe ff0e 	bl	800abb8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d005      	beq.n	800bdb0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bda4:	4b04      	ldr	r3, [pc, #16]	; (800bdb8 <HAL_PCD_SuspendCallback+0x30>)
 800bda6:	691b      	ldr	r3, [r3, #16]
 800bda8:	4a03      	ldr	r2, [pc, #12]	; (800bdb8 <HAL_PCD_SuspendCallback+0x30>)
 800bdaa:	f043 0306 	orr.w	r3, r3, #6
 800bdae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	e000ed00 	.word	0xe000ed00

0800bdbc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b082      	sub	sp, #8
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fe ff08 	bl	800abe0 <USBD_LL_Resume>
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}

0800bdd8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800bde0:	4a28      	ldr	r2, [pc, #160]	; (800be84 <USBD_LL_Init+0xac>)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a26      	ldr	r2, [pc, #152]	; (800be84 <USBD_LL_Init+0xac>)
 800bdec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800bdf0:	4b24      	ldr	r3, [pc, #144]	; (800be84 <USBD_LL_Init+0xac>)
 800bdf2:	4a25      	ldr	r2, [pc, #148]	; (800be88 <USBD_LL_Init+0xb0>)
 800bdf4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bdf6:	4b23      	ldr	r3, [pc, #140]	; (800be84 <USBD_LL_Init+0xac>)
 800bdf8:	2208      	movs	r2, #8
 800bdfa:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bdfc:	4b21      	ldr	r3, [pc, #132]	; (800be84 <USBD_LL_Init+0xac>)
 800bdfe:	2202      	movs	r2, #2
 800be00:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800be02:	4b20      	ldr	r3, [pc, #128]	; (800be84 <USBD_LL_Init+0xac>)
 800be04:	2200      	movs	r2, #0
 800be06:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800be08:	4b1e      	ldr	r3, [pc, #120]	; (800be84 <USBD_LL_Init+0xac>)
 800be0a:	2200      	movs	r2, #0
 800be0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800be0e:	4b1d      	ldr	r3, [pc, #116]	; (800be84 <USBD_LL_Init+0xac>)
 800be10:	2200      	movs	r2, #0
 800be12:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800be14:	481b      	ldr	r0, [pc, #108]	; (800be84 <USBD_LL_Init+0xac>)
 800be16:	f7f7 ff66 	bl	8003ce6 <HAL_PCD_Init>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800be20:	f7f6 f948 	bl	80020b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be2a:	2318      	movs	r3, #24
 800be2c:	2200      	movs	r2, #0
 800be2e:	2100      	movs	r1, #0
 800be30:	f7f9 fc85 	bl	800573e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be3a:	2358      	movs	r3, #88	; 0x58
 800be3c:	2200      	movs	r2, #0
 800be3e:	2180      	movs	r1, #128	; 0x80
 800be40:	f7f9 fc7d 	bl	800573e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be4a:	23c0      	movs	r3, #192	; 0xc0
 800be4c:	2200      	movs	r2, #0
 800be4e:	2181      	movs	r1, #129	; 0x81
 800be50:	f7f9 fc75 	bl	800573e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be5a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800be5e:	2200      	movs	r2, #0
 800be60:	2101      	movs	r1, #1
 800be62:	f7f9 fc6c 	bl	800573e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800be6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be70:	2200      	movs	r2, #0
 800be72:	2182      	movs	r1, #130	; 0x82
 800be74:	f7f9 fc63 	bl	800573e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200010a8 	.word	0x200010a8
 800be88:	40005c00 	.word	0x40005c00

0800be8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be94:	2300      	movs	r3, #0
 800be96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bea2:	4618      	mov	r0, r3
 800bea4:	f7f8 f81e 	bl	8003ee4 <HAL_PCD_Start>
 800bea8:	4603      	mov	r3, r0
 800beaa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 f94e 	bl	800c150 <USBD_Get_USB_Status>
 800beb4:	4603      	mov	r3, r0
 800beb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beb8:	7bbb      	ldrb	r3, [r7, #14]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3710      	adds	r7, #16
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b084      	sub	sp, #16
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	4608      	mov	r0, r1
 800becc:	4611      	mov	r1, r2
 800bece:	461a      	mov	r2, r3
 800bed0:	4603      	mov	r3, r0
 800bed2:	70fb      	strb	r3, [r7, #3]
 800bed4:	460b      	mov	r3, r1
 800bed6:	70bb      	strb	r3, [r7, #2]
 800bed8:	4613      	mov	r3, r2
 800beda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bedc:	2300      	movs	r3, #0
 800bede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bee0:	2300      	movs	r3, #0
 800bee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800beea:	78bb      	ldrb	r3, [r7, #2]
 800beec:	883a      	ldrh	r2, [r7, #0]
 800beee:	78f9      	ldrb	r1, [r7, #3]
 800bef0:	f7f8 f973 	bl	80041da <HAL_PCD_EP_Open>
 800bef4:	4603      	mov	r3, r0
 800bef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bef8:	7bfb      	ldrb	r3, [r7, #15]
 800befa:	4618      	mov	r0, r3
 800befc:	f000 f928 	bl	800c150 <USBD_Get_USB_Status>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf04:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3710      	adds	r7, #16
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b084      	sub	sp, #16
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
 800bf16:	460b      	mov	r3, r1
 800bf18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf28:	78fa      	ldrb	r2, [r7, #3]
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7f8 f9b1 	bl	8004294 <HAL_PCD_EP_Close>
 800bf32:	4603      	mov	r3, r0
 800bf34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf36:	7bfb      	ldrb	r3, [r7, #15]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f000 f909 	bl	800c150 <USBD_Get_USB_Status>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf42:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3710      	adds	r7, #16
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}

0800bf4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	460b      	mov	r3, r1
 800bf56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bf66:	78fa      	ldrb	r2, [r7, #3]
 800bf68:	4611      	mov	r1, r2
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7f8 fa59 	bl	8004422 <HAL_PCD_EP_SetStall>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 f8ea 	bl	800c150 <USBD_Get_USB_Status>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf80:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3710      	adds	r7, #16
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	460b      	mov	r3, r1
 800bf94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfa4:	78fa      	ldrb	r2, [r7, #3]
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7f8 fa9a 	bl	80044e2 <HAL_PCD_EP_ClrStall>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfb2:	7bfb      	ldrb	r3, [r7, #15]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 f8cb 	bl	800c150 <USBD_Get_USB_Status>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3710      	adds	r7, #16
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}

0800bfc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	460b      	mov	r3, r1
 800bfd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfda:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bfdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	da0c      	bge.n	800bffe <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bfe4:	78fb      	ldrb	r3, [r7, #3]
 800bfe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfea:	68f9      	ldr	r1, [r7, #12]
 800bfec:	1c5a      	adds	r2, r3, #1
 800bfee:	4613      	mov	r3, r2
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	00db      	lsls	r3, r3, #3
 800bff6:	440b      	add	r3, r1
 800bff8:	3302      	adds	r3, #2
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	e00b      	b.n	800c016 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c004:	68f9      	ldr	r1, [r7, #12]
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	440b      	add	r3, r1
 800c010:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800c014:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c016:	4618      	mov	r0, r3
 800c018:	3714      	adds	r7, #20
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bc80      	pop	{r7}
 800c01e:	4770      	bx	lr

0800c020 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	460b      	mov	r3, r1
 800c02a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c030:	2300      	movs	r3, #0
 800c032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c03a:	78fa      	ldrb	r2, [r7, #3]
 800c03c:	4611      	mov	r1, r2
 800c03e:	4618      	mov	r0, r3
 800c040:	f7f8 f8a6 	bl	8004190 <HAL_PCD_SetAddress>
 800c044:	4603      	mov	r3, r0
 800c046:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c048:	7bfb      	ldrb	r3, [r7, #15]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f880 	bl	800c150 <USBD_Get_USB_Status>
 800c050:	4603      	mov	r3, r0
 800c052:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c054:	7bbb      	ldrb	r3, [r7, #14]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b086      	sub	sp, #24
 800c062:	af00      	add	r7, sp, #0
 800c064:	60f8      	str	r0, [r7, #12]
 800c066:	607a      	str	r2, [r7, #4]
 800c068:	461a      	mov	r2, r3
 800c06a:	460b      	mov	r3, r1
 800c06c:	72fb      	strb	r3, [r7, #11]
 800c06e:	4613      	mov	r3, r2
 800c070:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c072:	2300      	movs	r3, #0
 800c074:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c080:	893b      	ldrh	r3, [r7, #8]
 800c082:	7af9      	ldrb	r1, [r7, #11]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	f7f8 f995 	bl	80043b4 <HAL_PCD_EP_Transmit>
 800c08a:	4603      	mov	r3, r0
 800c08c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c08e:	7dfb      	ldrb	r3, [r7, #23]
 800c090:	4618      	mov	r0, r3
 800c092:	f000 f85d 	bl	800c150 <USBD_Get_USB_Status>
 800c096:	4603      	mov	r3, r0
 800c098:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c09a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	607a      	str	r2, [r7, #4]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	72fb      	strb	r3, [r7, #11]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800c0c6:	893b      	ldrh	r3, [r7, #8]
 800c0c8:	7af9      	ldrb	r1, [r7, #11]
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	f7f8 f92a 	bl	8004324 <HAL_PCD_EP_Receive>
 800c0d0:	4603      	mov	r3, r0
 800c0d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0d4:	7dfb      	ldrb	r3, [r7, #23]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f000 f83a 	bl	800c150 <USBD_Get_USB_Status>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c0e0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3718      	adds	r7, #24
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b082      	sub	sp, #8
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c0fc:	78fa      	ldrb	r2, [r7, #3]
 800c0fe:	4611      	mov	r1, r2
 800c100:	4618      	mov	r0, r3
 800c102:	f7f8 f940 	bl	8004386 <HAL_PCD_EP_GetRxCount>
 800c106:	4603      	mov	r3, r0
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3708      	adds	r7, #8
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c118:	4b02      	ldr	r3, [pc, #8]	; (800c124 <USBD_static_malloc+0x14>)
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	370c      	adds	r7, #12
 800c11e:	46bd      	mov	sp, r7
 800c120:	bc80      	pop	{r7}
 800c122:	4770      	bx	lr
 800c124:	20001398 	.word	0x20001398

0800c128 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]

}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	bc80      	pop	{r7}
 800c138:	4770      	bx	lr

0800c13a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13a:	b480      	push	{r7}
 800c13c:	b083      	sub	sp, #12
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	460b      	mov	r3, r1
 800c144:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800c146:	bf00      	nop
 800c148:	370c      	adds	r7, #12
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bc80      	pop	{r7}
 800c14e:	4770      	bx	lr

0800c150 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	4603      	mov	r3, r0
 800c158:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c15a:	2300      	movs	r3, #0
 800c15c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c15e:	79fb      	ldrb	r3, [r7, #7]
 800c160:	2b03      	cmp	r3, #3
 800c162:	d817      	bhi.n	800c194 <USBD_Get_USB_Status+0x44>
 800c164:	a201      	add	r2, pc, #4	; (adr r2, 800c16c <USBD_Get_USB_Status+0x1c>)
 800c166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c16a:	bf00      	nop
 800c16c:	0800c17d 	.word	0x0800c17d
 800c170:	0800c183 	.word	0x0800c183
 800c174:	0800c189 	.word	0x0800c189
 800c178:	0800c18f 	.word	0x0800c18f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73fb      	strb	r3, [r7, #15]
    break;
 800c180:	e00b      	b.n	800c19a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c182:	2302      	movs	r3, #2
 800c184:	73fb      	strb	r3, [r7, #15]
    break;
 800c186:	e008      	b.n	800c19a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c188:	2301      	movs	r3, #1
 800c18a:	73fb      	strb	r3, [r7, #15]
    break;
 800c18c:	e005      	b.n	800c19a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c18e:	2302      	movs	r3, #2
 800c190:	73fb      	strb	r3, [r7, #15]
    break;
 800c192:	e002      	b.n	800c19a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c194:	2302      	movs	r3, #2
 800c196:	73fb      	strb	r3, [r7, #15]
    break;
 800c198:	bf00      	nop
  }
  return usb_status;
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bc80      	pop	{r7}
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop

0800c1a8 <abs>:
 800c1a8:	2800      	cmp	r0, #0
 800c1aa:	bfb8      	it	lt
 800c1ac:	4240      	neglt	r0, r0
 800c1ae:	4770      	bx	lr

0800c1b0 <siprintf>:
 800c1b0:	b40e      	push	{r1, r2, r3}
 800c1b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1b6:	b500      	push	{lr}
 800c1b8:	b09c      	sub	sp, #112	; 0x70
 800c1ba:	ab1d      	add	r3, sp, #116	; 0x74
 800c1bc:	9002      	str	r0, [sp, #8]
 800c1be:	9006      	str	r0, [sp, #24]
 800c1c0:	9107      	str	r1, [sp, #28]
 800c1c2:	9104      	str	r1, [sp, #16]
 800c1c4:	4808      	ldr	r0, [pc, #32]	; (800c1e8 <siprintf+0x38>)
 800c1c6:	4909      	ldr	r1, [pc, #36]	; (800c1ec <siprintf+0x3c>)
 800c1c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1cc:	9105      	str	r1, [sp, #20]
 800c1ce:	6800      	ldr	r0, [r0, #0]
 800c1d0:	a902      	add	r1, sp, #8
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	f000 f89a 	bl	800c30c <_svfiprintf_r>
 800c1d8:	2200      	movs	r2, #0
 800c1da:	9b02      	ldr	r3, [sp, #8]
 800c1dc:	701a      	strb	r2, [r3, #0]
 800c1de:	b01c      	add	sp, #112	; 0x70
 800c1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e4:	b003      	add	sp, #12
 800c1e6:	4770      	bx	lr
 800c1e8:	20000238 	.word	0x20000238
 800c1ec:	ffff0208 	.word	0xffff0208

0800c1f0 <memset>:
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	4402      	add	r2, r0
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d100      	bne.n	800c1fa <memset+0xa>
 800c1f8:	4770      	bx	lr
 800c1fa:	f803 1b01 	strb.w	r1, [r3], #1
 800c1fe:	e7f9      	b.n	800c1f4 <memset+0x4>

0800c200 <__errno>:
 800c200:	4b01      	ldr	r3, [pc, #4]	; (800c208 <__errno+0x8>)
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	20000238 	.word	0x20000238

0800c20c <__libc_init_array>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	2600      	movs	r6, #0
 800c210:	4d0c      	ldr	r5, [pc, #48]	; (800c244 <__libc_init_array+0x38>)
 800c212:	4c0d      	ldr	r4, [pc, #52]	; (800c248 <__libc_init_array+0x3c>)
 800c214:	1b64      	subs	r4, r4, r5
 800c216:	10a4      	asrs	r4, r4, #2
 800c218:	42a6      	cmp	r6, r4
 800c21a:	d109      	bne.n	800c230 <__libc_init_array+0x24>
 800c21c:	f001 fe12 	bl	800de44 <_init>
 800c220:	2600      	movs	r6, #0
 800c222:	4d0a      	ldr	r5, [pc, #40]	; (800c24c <__libc_init_array+0x40>)
 800c224:	4c0a      	ldr	r4, [pc, #40]	; (800c250 <__libc_init_array+0x44>)
 800c226:	1b64      	subs	r4, r4, r5
 800c228:	10a4      	asrs	r4, r4, #2
 800c22a:	42a6      	cmp	r6, r4
 800c22c:	d105      	bne.n	800c23a <__libc_init_array+0x2e>
 800c22e:	bd70      	pop	{r4, r5, r6, pc}
 800c230:	f855 3b04 	ldr.w	r3, [r5], #4
 800c234:	4798      	blx	r3
 800c236:	3601      	adds	r6, #1
 800c238:	e7ee      	b.n	800c218 <__libc_init_array+0xc>
 800c23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c23e:	4798      	blx	r3
 800c240:	3601      	adds	r6, #1
 800c242:	e7f2      	b.n	800c22a <__libc_init_array+0x1e>
 800c244:	0800e130 	.word	0x0800e130
 800c248:	0800e130 	.word	0x0800e130
 800c24c:	0800e130 	.word	0x0800e130
 800c250:	0800e134 	.word	0x0800e134

0800c254 <__retarget_lock_acquire_recursive>:
 800c254:	4770      	bx	lr

0800c256 <__retarget_lock_release_recursive>:
 800c256:	4770      	bx	lr

0800c258 <__ssputs_r>:
 800c258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c25c:	461f      	mov	r7, r3
 800c25e:	688e      	ldr	r6, [r1, #8]
 800c260:	4682      	mov	sl, r0
 800c262:	42be      	cmp	r6, r7
 800c264:	460c      	mov	r4, r1
 800c266:	4690      	mov	r8, r2
 800c268:	680b      	ldr	r3, [r1, #0]
 800c26a:	d82c      	bhi.n	800c2c6 <__ssputs_r+0x6e>
 800c26c:	898a      	ldrh	r2, [r1, #12]
 800c26e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c272:	d026      	beq.n	800c2c2 <__ssputs_r+0x6a>
 800c274:	6965      	ldr	r5, [r4, #20]
 800c276:	6909      	ldr	r1, [r1, #16]
 800c278:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c27c:	eba3 0901 	sub.w	r9, r3, r1
 800c280:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c284:	1c7b      	adds	r3, r7, #1
 800c286:	444b      	add	r3, r9
 800c288:	106d      	asrs	r5, r5, #1
 800c28a:	429d      	cmp	r5, r3
 800c28c:	bf38      	it	cc
 800c28e:	461d      	movcc	r5, r3
 800c290:	0553      	lsls	r3, r2, #21
 800c292:	d527      	bpl.n	800c2e4 <__ssputs_r+0x8c>
 800c294:	4629      	mov	r1, r5
 800c296:	f000 f957 	bl	800c548 <_malloc_r>
 800c29a:	4606      	mov	r6, r0
 800c29c:	b360      	cbz	r0, 800c2f8 <__ssputs_r+0xa0>
 800c29e:	464a      	mov	r2, r9
 800c2a0:	6921      	ldr	r1, [r4, #16]
 800c2a2:	f000 fbd9 	bl	800ca58 <memcpy>
 800c2a6:	89a3      	ldrh	r3, [r4, #12]
 800c2a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c2ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2b0:	81a3      	strh	r3, [r4, #12]
 800c2b2:	6126      	str	r6, [r4, #16]
 800c2b4:	444e      	add	r6, r9
 800c2b6:	6026      	str	r6, [r4, #0]
 800c2b8:	463e      	mov	r6, r7
 800c2ba:	6165      	str	r5, [r4, #20]
 800c2bc:	eba5 0509 	sub.w	r5, r5, r9
 800c2c0:	60a5      	str	r5, [r4, #8]
 800c2c2:	42be      	cmp	r6, r7
 800c2c4:	d900      	bls.n	800c2c8 <__ssputs_r+0x70>
 800c2c6:	463e      	mov	r6, r7
 800c2c8:	4632      	mov	r2, r6
 800c2ca:	4641      	mov	r1, r8
 800c2cc:	6820      	ldr	r0, [r4, #0]
 800c2ce:	f000 fb8a 	bl	800c9e6 <memmove>
 800c2d2:	2000      	movs	r0, #0
 800c2d4:	68a3      	ldr	r3, [r4, #8]
 800c2d6:	1b9b      	subs	r3, r3, r6
 800c2d8:	60a3      	str	r3, [r4, #8]
 800c2da:	6823      	ldr	r3, [r4, #0]
 800c2dc:	4433      	add	r3, r6
 800c2de:	6023      	str	r3, [r4, #0]
 800c2e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2e4:	462a      	mov	r2, r5
 800c2e6:	f000 fb4f 	bl	800c988 <_realloc_r>
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d1e0      	bne.n	800c2b2 <__ssputs_r+0x5a>
 800c2f0:	4650      	mov	r0, sl
 800c2f2:	6921      	ldr	r1, [r4, #16]
 800c2f4:	f000 fbbe 	bl	800ca74 <_free_r>
 800c2f8:	230c      	movs	r3, #12
 800c2fa:	f8ca 3000 	str.w	r3, [sl]
 800c2fe:	89a3      	ldrh	r3, [r4, #12]
 800c300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c308:	81a3      	strh	r3, [r4, #12]
 800c30a:	e7e9      	b.n	800c2e0 <__ssputs_r+0x88>

0800c30c <_svfiprintf_r>:
 800c30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c310:	4698      	mov	r8, r3
 800c312:	898b      	ldrh	r3, [r1, #12]
 800c314:	4607      	mov	r7, r0
 800c316:	061b      	lsls	r3, r3, #24
 800c318:	460d      	mov	r5, r1
 800c31a:	4614      	mov	r4, r2
 800c31c:	b09d      	sub	sp, #116	; 0x74
 800c31e:	d50e      	bpl.n	800c33e <_svfiprintf_r+0x32>
 800c320:	690b      	ldr	r3, [r1, #16]
 800c322:	b963      	cbnz	r3, 800c33e <_svfiprintf_r+0x32>
 800c324:	2140      	movs	r1, #64	; 0x40
 800c326:	f000 f90f 	bl	800c548 <_malloc_r>
 800c32a:	6028      	str	r0, [r5, #0]
 800c32c:	6128      	str	r0, [r5, #16]
 800c32e:	b920      	cbnz	r0, 800c33a <_svfiprintf_r+0x2e>
 800c330:	230c      	movs	r3, #12
 800c332:	603b      	str	r3, [r7, #0]
 800c334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c338:	e0d0      	b.n	800c4dc <_svfiprintf_r+0x1d0>
 800c33a:	2340      	movs	r3, #64	; 0x40
 800c33c:	616b      	str	r3, [r5, #20]
 800c33e:	2300      	movs	r3, #0
 800c340:	9309      	str	r3, [sp, #36]	; 0x24
 800c342:	2320      	movs	r3, #32
 800c344:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c348:	2330      	movs	r3, #48	; 0x30
 800c34a:	f04f 0901 	mov.w	r9, #1
 800c34e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c352:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c4f4 <_svfiprintf_r+0x1e8>
 800c356:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c35a:	4623      	mov	r3, r4
 800c35c:	469a      	mov	sl, r3
 800c35e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c362:	b10a      	cbz	r2, 800c368 <_svfiprintf_r+0x5c>
 800c364:	2a25      	cmp	r2, #37	; 0x25
 800c366:	d1f9      	bne.n	800c35c <_svfiprintf_r+0x50>
 800c368:	ebba 0b04 	subs.w	fp, sl, r4
 800c36c:	d00b      	beq.n	800c386 <_svfiprintf_r+0x7a>
 800c36e:	465b      	mov	r3, fp
 800c370:	4622      	mov	r2, r4
 800c372:	4629      	mov	r1, r5
 800c374:	4638      	mov	r0, r7
 800c376:	f7ff ff6f 	bl	800c258 <__ssputs_r>
 800c37a:	3001      	adds	r0, #1
 800c37c:	f000 80a9 	beq.w	800c4d2 <_svfiprintf_r+0x1c6>
 800c380:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c382:	445a      	add	r2, fp
 800c384:	9209      	str	r2, [sp, #36]	; 0x24
 800c386:	f89a 3000 	ldrb.w	r3, [sl]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f000 80a1 	beq.w	800c4d2 <_svfiprintf_r+0x1c6>
 800c390:	2300      	movs	r3, #0
 800c392:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c39a:	f10a 0a01 	add.w	sl, sl, #1
 800c39e:	9304      	str	r3, [sp, #16]
 800c3a0:	9307      	str	r3, [sp, #28]
 800c3a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c3a6:	931a      	str	r3, [sp, #104]	; 0x68
 800c3a8:	4654      	mov	r4, sl
 800c3aa:	2205      	movs	r2, #5
 800c3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b0:	4850      	ldr	r0, [pc, #320]	; (800c4f4 <_svfiprintf_r+0x1e8>)
 800c3b2:	f000 fb43 	bl	800ca3c <memchr>
 800c3b6:	9a04      	ldr	r2, [sp, #16]
 800c3b8:	b9d8      	cbnz	r0, 800c3f2 <_svfiprintf_r+0xe6>
 800c3ba:	06d0      	lsls	r0, r2, #27
 800c3bc:	bf44      	itt	mi
 800c3be:	2320      	movmi	r3, #32
 800c3c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3c4:	0711      	lsls	r1, r2, #28
 800c3c6:	bf44      	itt	mi
 800c3c8:	232b      	movmi	r3, #43	; 0x2b
 800c3ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d4:	d015      	beq.n	800c402 <_svfiprintf_r+0xf6>
 800c3d6:	4654      	mov	r4, sl
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f04f 0c0a 	mov.w	ip, #10
 800c3de:	9a07      	ldr	r2, [sp, #28]
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c3e6:	3b30      	subs	r3, #48	; 0x30
 800c3e8:	2b09      	cmp	r3, #9
 800c3ea:	d94d      	bls.n	800c488 <_svfiprintf_r+0x17c>
 800c3ec:	b1b0      	cbz	r0, 800c41c <_svfiprintf_r+0x110>
 800c3ee:	9207      	str	r2, [sp, #28]
 800c3f0:	e014      	b.n	800c41c <_svfiprintf_r+0x110>
 800c3f2:	eba0 0308 	sub.w	r3, r0, r8
 800c3f6:	fa09 f303 	lsl.w	r3, r9, r3
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	46a2      	mov	sl, r4
 800c3fe:	9304      	str	r3, [sp, #16]
 800c400:	e7d2      	b.n	800c3a8 <_svfiprintf_r+0x9c>
 800c402:	9b03      	ldr	r3, [sp, #12]
 800c404:	1d19      	adds	r1, r3, #4
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	9103      	str	r1, [sp, #12]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	bfbb      	ittet	lt
 800c40e:	425b      	neglt	r3, r3
 800c410:	f042 0202 	orrlt.w	r2, r2, #2
 800c414:	9307      	strge	r3, [sp, #28]
 800c416:	9307      	strlt	r3, [sp, #28]
 800c418:	bfb8      	it	lt
 800c41a:	9204      	strlt	r2, [sp, #16]
 800c41c:	7823      	ldrb	r3, [r4, #0]
 800c41e:	2b2e      	cmp	r3, #46	; 0x2e
 800c420:	d10c      	bne.n	800c43c <_svfiprintf_r+0x130>
 800c422:	7863      	ldrb	r3, [r4, #1]
 800c424:	2b2a      	cmp	r3, #42	; 0x2a
 800c426:	d134      	bne.n	800c492 <_svfiprintf_r+0x186>
 800c428:	9b03      	ldr	r3, [sp, #12]
 800c42a:	3402      	adds	r4, #2
 800c42c:	1d1a      	adds	r2, r3, #4
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	9203      	str	r2, [sp, #12]
 800c432:	2b00      	cmp	r3, #0
 800c434:	bfb8      	it	lt
 800c436:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c43a:	9305      	str	r3, [sp, #20]
 800c43c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c4f8 <_svfiprintf_r+0x1ec>
 800c440:	2203      	movs	r2, #3
 800c442:	4650      	mov	r0, sl
 800c444:	7821      	ldrb	r1, [r4, #0]
 800c446:	f000 faf9 	bl	800ca3c <memchr>
 800c44a:	b138      	cbz	r0, 800c45c <_svfiprintf_r+0x150>
 800c44c:	2240      	movs	r2, #64	; 0x40
 800c44e:	9b04      	ldr	r3, [sp, #16]
 800c450:	eba0 000a 	sub.w	r0, r0, sl
 800c454:	4082      	lsls	r2, r0
 800c456:	4313      	orrs	r3, r2
 800c458:	3401      	adds	r4, #1
 800c45a:	9304      	str	r3, [sp, #16]
 800c45c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c460:	2206      	movs	r2, #6
 800c462:	4826      	ldr	r0, [pc, #152]	; (800c4fc <_svfiprintf_r+0x1f0>)
 800c464:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c468:	f000 fae8 	bl	800ca3c <memchr>
 800c46c:	2800      	cmp	r0, #0
 800c46e:	d038      	beq.n	800c4e2 <_svfiprintf_r+0x1d6>
 800c470:	4b23      	ldr	r3, [pc, #140]	; (800c500 <_svfiprintf_r+0x1f4>)
 800c472:	bb1b      	cbnz	r3, 800c4bc <_svfiprintf_r+0x1b0>
 800c474:	9b03      	ldr	r3, [sp, #12]
 800c476:	3307      	adds	r3, #7
 800c478:	f023 0307 	bic.w	r3, r3, #7
 800c47c:	3308      	adds	r3, #8
 800c47e:	9303      	str	r3, [sp, #12]
 800c480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c482:	4433      	add	r3, r6
 800c484:	9309      	str	r3, [sp, #36]	; 0x24
 800c486:	e768      	b.n	800c35a <_svfiprintf_r+0x4e>
 800c488:	460c      	mov	r4, r1
 800c48a:	2001      	movs	r0, #1
 800c48c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c490:	e7a6      	b.n	800c3e0 <_svfiprintf_r+0xd4>
 800c492:	2300      	movs	r3, #0
 800c494:	f04f 0c0a 	mov.w	ip, #10
 800c498:	4619      	mov	r1, r3
 800c49a:	3401      	adds	r4, #1
 800c49c:	9305      	str	r3, [sp, #20]
 800c49e:	4620      	mov	r0, r4
 800c4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4a4:	3a30      	subs	r2, #48	; 0x30
 800c4a6:	2a09      	cmp	r2, #9
 800c4a8:	d903      	bls.n	800c4b2 <_svfiprintf_r+0x1a6>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0c6      	beq.n	800c43c <_svfiprintf_r+0x130>
 800c4ae:	9105      	str	r1, [sp, #20]
 800c4b0:	e7c4      	b.n	800c43c <_svfiprintf_r+0x130>
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4ba:	e7f0      	b.n	800c49e <_svfiprintf_r+0x192>
 800c4bc:	ab03      	add	r3, sp, #12
 800c4be:	9300      	str	r3, [sp, #0]
 800c4c0:	462a      	mov	r2, r5
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	4b0f      	ldr	r3, [pc, #60]	; (800c504 <_svfiprintf_r+0x1f8>)
 800c4c6:	a904      	add	r1, sp, #16
 800c4c8:	f3af 8000 	nop.w
 800c4cc:	1c42      	adds	r2, r0, #1
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	d1d6      	bne.n	800c480 <_svfiprintf_r+0x174>
 800c4d2:	89ab      	ldrh	r3, [r5, #12]
 800c4d4:	065b      	lsls	r3, r3, #25
 800c4d6:	f53f af2d 	bmi.w	800c334 <_svfiprintf_r+0x28>
 800c4da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c4dc:	b01d      	add	sp, #116	; 0x74
 800c4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4e2:	ab03      	add	r3, sp, #12
 800c4e4:	9300      	str	r3, [sp, #0]
 800c4e6:	462a      	mov	r2, r5
 800c4e8:	4638      	mov	r0, r7
 800c4ea:	4b06      	ldr	r3, [pc, #24]	; (800c504 <_svfiprintf_r+0x1f8>)
 800c4ec:	a904      	add	r1, sp, #16
 800c4ee:	f000 f91d 	bl	800c72c <_printf_i>
 800c4f2:	e7eb      	b.n	800c4cc <_svfiprintf_r+0x1c0>
 800c4f4:	0800df12 	.word	0x0800df12
 800c4f8:	0800df18 	.word	0x0800df18
 800c4fc:	0800df1c 	.word	0x0800df1c
 800c500:	00000000 	.word	0x00000000
 800c504:	0800c259 	.word	0x0800c259

0800c508 <sbrk_aligned>:
 800c508:	b570      	push	{r4, r5, r6, lr}
 800c50a:	4e0e      	ldr	r6, [pc, #56]	; (800c544 <sbrk_aligned+0x3c>)
 800c50c:	460c      	mov	r4, r1
 800c50e:	6831      	ldr	r1, [r6, #0]
 800c510:	4605      	mov	r5, r0
 800c512:	b911      	cbnz	r1, 800c51a <sbrk_aligned+0x12>
 800c514:	f000 fa82 	bl	800ca1c <_sbrk_r>
 800c518:	6030      	str	r0, [r6, #0]
 800c51a:	4621      	mov	r1, r4
 800c51c:	4628      	mov	r0, r5
 800c51e:	f000 fa7d 	bl	800ca1c <_sbrk_r>
 800c522:	1c43      	adds	r3, r0, #1
 800c524:	d00a      	beq.n	800c53c <sbrk_aligned+0x34>
 800c526:	1cc4      	adds	r4, r0, #3
 800c528:	f024 0403 	bic.w	r4, r4, #3
 800c52c:	42a0      	cmp	r0, r4
 800c52e:	d007      	beq.n	800c540 <sbrk_aligned+0x38>
 800c530:	1a21      	subs	r1, r4, r0
 800c532:	4628      	mov	r0, r5
 800c534:	f000 fa72 	bl	800ca1c <_sbrk_r>
 800c538:	3001      	adds	r0, #1
 800c53a:	d101      	bne.n	800c540 <sbrk_aligned+0x38>
 800c53c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c540:	4620      	mov	r0, r4
 800c542:	bd70      	pop	{r4, r5, r6, pc}
 800c544:	200016f8 	.word	0x200016f8

0800c548 <_malloc_r>:
 800c548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c54c:	1ccd      	adds	r5, r1, #3
 800c54e:	f025 0503 	bic.w	r5, r5, #3
 800c552:	3508      	adds	r5, #8
 800c554:	2d0c      	cmp	r5, #12
 800c556:	bf38      	it	cc
 800c558:	250c      	movcc	r5, #12
 800c55a:	2d00      	cmp	r5, #0
 800c55c:	4607      	mov	r7, r0
 800c55e:	db01      	blt.n	800c564 <_malloc_r+0x1c>
 800c560:	42a9      	cmp	r1, r5
 800c562:	d905      	bls.n	800c570 <_malloc_r+0x28>
 800c564:	230c      	movs	r3, #12
 800c566:	2600      	movs	r6, #0
 800c568:	603b      	str	r3, [r7, #0]
 800c56a:	4630      	mov	r0, r6
 800c56c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c570:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c644 <_malloc_r+0xfc>
 800c574:	f000 f9fc 	bl	800c970 <__malloc_lock>
 800c578:	f8d8 3000 	ldr.w	r3, [r8]
 800c57c:	461c      	mov	r4, r3
 800c57e:	bb5c      	cbnz	r4, 800c5d8 <_malloc_r+0x90>
 800c580:	4629      	mov	r1, r5
 800c582:	4638      	mov	r0, r7
 800c584:	f7ff ffc0 	bl	800c508 <sbrk_aligned>
 800c588:	1c43      	adds	r3, r0, #1
 800c58a:	4604      	mov	r4, r0
 800c58c:	d155      	bne.n	800c63a <_malloc_r+0xf2>
 800c58e:	f8d8 4000 	ldr.w	r4, [r8]
 800c592:	4626      	mov	r6, r4
 800c594:	2e00      	cmp	r6, #0
 800c596:	d145      	bne.n	800c624 <_malloc_r+0xdc>
 800c598:	2c00      	cmp	r4, #0
 800c59a:	d048      	beq.n	800c62e <_malloc_r+0xe6>
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	4631      	mov	r1, r6
 800c5a0:	4638      	mov	r0, r7
 800c5a2:	eb04 0903 	add.w	r9, r4, r3
 800c5a6:	f000 fa39 	bl	800ca1c <_sbrk_r>
 800c5aa:	4581      	cmp	r9, r0
 800c5ac:	d13f      	bne.n	800c62e <_malloc_r+0xe6>
 800c5ae:	6821      	ldr	r1, [r4, #0]
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	1a6d      	subs	r5, r5, r1
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	f7ff ffa7 	bl	800c508 <sbrk_aligned>
 800c5ba:	3001      	adds	r0, #1
 800c5bc:	d037      	beq.n	800c62e <_malloc_r+0xe6>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	442b      	add	r3, r5
 800c5c2:	6023      	str	r3, [r4, #0]
 800c5c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d038      	beq.n	800c63e <_malloc_r+0xf6>
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	42a2      	cmp	r2, r4
 800c5d0:	d12b      	bne.n	800c62a <_malloc_r+0xe2>
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	e00f      	b.n	800c5f8 <_malloc_r+0xb0>
 800c5d8:	6822      	ldr	r2, [r4, #0]
 800c5da:	1b52      	subs	r2, r2, r5
 800c5dc:	d41f      	bmi.n	800c61e <_malloc_r+0xd6>
 800c5de:	2a0b      	cmp	r2, #11
 800c5e0:	d917      	bls.n	800c612 <_malloc_r+0xca>
 800c5e2:	1961      	adds	r1, r4, r5
 800c5e4:	42a3      	cmp	r3, r4
 800c5e6:	6025      	str	r5, [r4, #0]
 800c5e8:	bf18      	it	ne
 800c5ea:	6059      	strne	r1, [r3, #4]
 800c5ec:	6863      	ldr	r3, [r4, #4]
 800c5ee:	bf08      	it	eq
 800c5f0:	f8c8 1000 	streq.w	r1, [r8]
 800c5f4:	5162      	str	r2, [r4, r5]
 800c5f6:	604b      	str	r3, [r1, #4]
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	f104 060b 	add.w	r6, r4, #11
 800c5fe:	f000 f9bd 	bl	800c97c <__malloc_unlock>
 800c602:	f026 0607 	bic.w	r6, r6, #7
 800c606:	1d23      	adds	r3, r4, #4
 800c608:	1af2      	subs	r2, r6, r3
 800c60a:	d0ae      	beq.n	800c56a <_malloc_r+0x22>
 800c60c:	1b9b      	subs	r3, r3, r6
 800c60e:	50a3      	str	r3, [r4, r2]
 800c610:	e7ab      	b.n	800c56a <_malloc_r+0x22>
 800c612:	42a3      	cmp	r3, r4
 800c614:	6862      	ldr	r2, [r4, #4]
 800c616:	d1dd      	bne.n	800c5d4 <_malloc_r+0x8c>
 800c618:	f8c8 2000 	str.w	r2, [r8]
 800c61c:	e7ec      	b.n	800c5f8 <_malloc_r+0xb0>
 800c61e:	4623      	mov	r3, r4
 800c620:	6864      	ldr	r4, [r4, #4]
 800c622:	e7ac      	b.n	800c57e <_malloc_r+0x36>
 800c624:	4634      	mov	r4, r6
 800c626:	6876      	ldr	r6, [r6, #4]
 800c628:	e7b4      	b.n	800c594 <_malloc_r+0x4c>
 800c62a:	4613      	mov	r3, r2
 800c62c:	e7cc      	b.n	800c5c8 <_malloc_r+0x80>
 800c62e:	230c      	movs	r3, #12
 800c630:	4638      	mov	r0, r7
 800c632:	603b      	str	r3, [r7, #0]
 800c634:	f000 f9a2 	bl	800c97c <__malloc_unlock>
 800c638:	e797      	b.n	800c56a <_malloc_r+0x22>
 800c63a:	6025      	str	r5, [r4, #0]
 800c63c:	e7dc      	b.n	800c5f8 <_malloc_r+0xb0>
 800c63e:	605b      	str	r3, [r3, #4]
 800c640:	deff      	udf	#255	; 0xff
 800c642:	bf00      	nop
 800c644:	200016f4 	.word	0x200016f4

0800c648 <_printf_common>:
 800c648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c64c:	4616      	mov	r6, r2
 800c64e:	4699      	mov	r9, r3
 800c650:	688a      	ldr	r2, [r1, #8]
 800c652:	690b      	ldr	r3, [r1, #16]
 800c654:	4607      	mov	r7, r0
 800c656:	4293      	cmp	r3, r2
 800c658:	bfb8      	it	lt
 800c65a:	4613      	movlt	r3, r2
 800c65c:	6033      	str	r3, [r6, #0]
 800c65e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c662:	460c      	mov	r4, r1
 800c664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c668:	b10a      	cbz	r2, 800c66e <_printf_common+0x26>
 800c66a:	3301      	adds	r3, #1
 800c66c:	6033      	str	r3, [r6, #0]
 800c66e:	6823      	ldr	r3, [r4, #0]
 800c670:	0699      	lsls	r1, r3, #26
 800c672:	bf42      	ittt	mi
 800c674:	6833      	ldrmi	r3, [r6, #0]
 800c676:	3302      	addmi	r3, #2
 800c678:	6033      	strmi	r3, [r6, #0]
 800c67a:	6825      	ldr	r5, [r4, #0]
 800c67c:	f015 0506 	ands.w	r5, r5, #6
 800c680:	d106      	bne.n	800c690 <_printf_common+0x48>
 800c682:	f104 0a19 	add.w	sl, r4, #25
 800c686:	68e3      	ldr	r3, [r4, #12]
 800c688:	6832      	ldr	r2, [r6, #0]
 800c68a:	1a9b      	subs	r3, r3, r2
 800c68c:	42ab      	cmp	r3, r5
 800c68e:	dc2b      	bgt.n	800c6e8 <_printf_common+0xa0>
 800c690:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c694:	1e13      	subs	r3, r2, #0
 800c696:	6822      	ldr	r2, [r4, #0]
 800c698:	bf18      	it	ne
 800c69a:	2301      	movne	r3, #1
 800c69c:	0692      	lsls	r2, r2, #26
 800c69e:	d430      	bmi.n	800c702 <_printf_common+0xba>
 800c6a0:	4649      	mov	r1, r9
 800c6a2:	4638      	mov	r0, r7
 800c6a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c6a8:	47c0      	blx	r8
 800c6aa:	3001      	adds	r0, #1
 800c6ac:	d023      	beq.n	800c6f6 <_printf_common+0xae>
 800c6ae:	6823      	ldr	r3, [r4, #0]
 800c6b0:	6922      	ldr	r2, [r4, #16]
 800c6b2:	f003 0306 	and.w	r3, r3, #6
 800c6b6:	2b04      	cmp	r3, #4
 800c6b8:	bf14      	ite	ne
 800c6ba:	2500      	movne	r5, #0
 800c6bc:	6833      	ldreq	r3, [r6, #0]
 800c6be:	f04f 0600 	mov.w	r6, #0
 800c6c2:	bf08      	it	eq
 800c6c4:	68e5      	ldreq	r5, [r4, #12]
 800c6c6:	f104 041a 	add.w	r4, r4, #26
 800c6ca:	bf08      	it	eq
 800c6cc:	1aed      	subeq	r5, r5, r3
 800c6ce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c6d2:	bf08      	it	eq
 800c6d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	bfc4      	itt	gt
 800c6dc:	1a9b      	subgt	r3, r3, r2
 800c6de:	18ed      	addgt	r5, r5, r3
 800c6e0:	42b5      	cmp	r5, r6
 800c6e2:	d11a      	bne.n	800c71a <_printf_common+0xd2>
 800c6e4:	2000      	movs	r0, #0
 800c6e6:	e008      	b.n	800c6fa <_printf_common+0xb2>
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	4652      	mov	r2, sl
 800c6ec:	4649      	mov	r1, r9
 800c6ee:	4638      	mov	r0, r7
 800c6f0:	47c0      	blx	r8
 800c6f2:	3001      	adds	r0, #1
 800c6f4:	d103      	bne.n	800c6fe <_printf_common+0xb6>
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6fe:	3501      	adds	r5, #1
 800c700:	e7c1      	b.n	800c686 <_printf_common+0x3e>
 800c702:	2030      	movs	r0, #48	; 0x30
 800c704:	18e1      	adds	r1, r4, r3
 800c706:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c70a:	1c5a      	adds	r2, r3, #1
 800c70c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c710:	4422      	add	r2, r4
 800c712:	3302      	adds	r3, #2
 800c714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c718:	e7c2      	b.n	800c6a0 <_printf_common+0x58>
 800c71a:	2301      	movs	r3, #1
 800c71c:	4622      	mov	r2, r4
 800c71e:	4649      	mov	r1, r9
 800c720:	4638      	mov	r0, r7
 800c722:	47c0      	blx	r8
 800c724:	3001      	adds	r0, #1
 800c726:	d0e6      	beq.n	800c6f6 <_printf_common+0xae>
 800c728:	3601      	adds	r6, #1
 800c72a:	e7d9      	b.n	800c6e0 <_printf_common+0x98>

0800c72c <_printf_i>:
 800c72c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c730:	7e0f      	ldrb	r7, [r1, #24]
 800c732:	4691      	mov	r9, r2
 800c734:	2f78      	cmp	r7, #120	; 0x78
 800c736:	4680      	mov	r8, r0
 800c738:	460c      	mov	r4, r1
 800c73a:	469a      	mov	sl, r3
 800c73c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c73e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c742:	d807      	bhi.n	800c754 <_printf_i+0x28>
 800c744:	2f62      	cmp	r7, #98	; 0x62
 800c746:	d80a      	bhi.n	800c75e <_printf_i+0x32>
 800c748:	2f00      	cmp	r7, #0
 800c74a:	f000 80d5 	beq.w	800c8f8 <_printf_i+0x1cc>
 800c74e:	2f58      	cmp	r7, #88	; 0x58
 800c750:	f000 80c1 	beq.w	800c8d6 <_printf_i+0x1aa>
 800c754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c758:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c75c:	e03a      	b.n	800c7d4 <_printf_i+0xa8>
 800c75e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c762:	2b15      	cmp	r3, #21
 800c764:	d8f6      	bhi.n	800c754 <_printf_i+0x28>
 800c766:	a101      	add	r1, pc, #4	; (adr r1, 800c76c <_printf_i+0x40>)
 800c768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c76c:	0800c7c5 	.word	0x0800c7c5
 800c770:	0800c7d9 	.word	0x0800c7d9
 800c774:	0800c755 	.word	0x0800c755
 800c778:	0800c755 	.word	0x0800c755
 800c77c:	0800c755 	.word	0x0800c755
 800c780:	0800c755 	.word	0x0800c755
 800c784:	0800c7d9 	.word	0x0800c7d9
 800c788:	0800c755 	.word	0x0800c755
 800c78c:	0800c755 	.word	0x0800c755
 800c790:	0800c755 	.word	0x0800c755
 800c794:	0800c755 	.word	0x0800c755
 800c798:	0800c8df 	.word	0x0800c8df
 800c79c:	0800c805 	.word	0x0800c805
 800c7a0:	0800c899 	.word	0x0800c899
 800c7a4:	0800c755 	.word	0x0800c755
 800c7a8:	0800c755 	.word	0x0800c755
 800c7ac:	0800c901 	.word	0x0800c901
 800c7b0:	0800c755 	.word	0x0800c755
 800c7b4:	0800c805 	.word	0x0800c805
 800c7b8:	0800c755 	.word	0x0800c755
 800c7bc:	0800c755 	.word	0x0800c755
 800c7c0:	0800c8a1 	.word	0x0800c8a1
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	1d1a      	adds	r2, r3, #4
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	602a      	str	r2, [r5, #0]
 800c7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	e0a0      	b.n	800c91a <_printf_i+0x1ee>
 800c7d8:	6820      	ldr	r0, [r4, #0]
 800c7da:	682b      	ldr	r3, [r5, #0]
 800c7dc:	0607      	lsls	r7, r0, #24
 800c7de:	f103 0104 	add.w	r1, r3, #4
 800c7e2:	6029      	str	r1, [r5, #0]
 800c7e4:	d501      	bpl.n	800c7ea <_printf_i+0xbe>
 800c7e6:	681e      	ldr	r6, [r3, #0]
 800c7e8:	e003      	b.n	800c7f2 <_printf_i+0xc6>
 800c7ea:	0646      	lsls	r6, r0, #25
 800c7ec:	d5fb      	bpl.n	800c7e6 <_printf_i+0xba>
 800c7ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c7f2:	2e00      	cmp	r6, #0
 800c7f4:	da03      	bge.n	800c7fe <_printf_i+0xd2>
 800c7f6:	232d      	movs	r3, #45	; 0x2d
 800c7f8:	4276      	negs	r6, r6
 800c7fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7fe:	230a      	movs	r3, #10
 800c800:	4859      	ldr	r0, [pc, #356]	; (800c968 <_printf_i+0x23c>)
 800c802:	e012      	b.n	800c82a <_printf_i+0xfe>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	6820      	ldr	r0, [r4, #0]
 800c808:	1d19      	adds	r1, r3, #4
 800c80a:	6029      	str	r1, [r5, #0]
 800c80c:	0605      	lsls	r5, r0, #24
 800c80e:	d501      	bpl.n	800c814 <_printf_i+0xe8>
 800c810:	681e      	ldr	r6, [r3, #0]
 800c812:	e002      	b.n	800c81a <_printf_i+0xee>
 800c814:	0641      	lsls	r1, r0, #25
 800c816:	d5fb      	bpl.n	800c810 <_printf_i+0xe4>
 800c818:	881e      	ldrh	r6, [r3, #0]
 800c81a:	2f6f      	cmp	r7, #111	; 0x6f
 800c81c:	bf0c      	ite	eq
 800c81e:	2308      	moveq	r3, #8
 800c820:	230a      	movne	r3, #10
 800c822:	4851      	ldr	r0, [pc, #324]	; (800c968 <_printf_i+0x23c>)
 800c824:	2100      	movs	r1, #0
 800c826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c82a:	6865      	ldr	r5, [r4, #4]
 800c82c:	2d00      	cmp	r5, #0
 800c82e:	bfa8      	it	ge
 800c830:	6821      	ldrge	r1, [r4, #0]
 800c832:	60a5      	str	r5, [r4, #8]
 800c834:	bfa4      	itt	ge
 800c836:	f021 0104 	bicge.w	r1, r1, #4
 800c83a:	6021      	strge	r1, [r4, #0]
 800c83c:	b90e      	cbnz	r6, 800c842 <_printf_i+0x116>
 800c83e:	2d00      	cmp	r5, #0
 800c840:	d04b      	beq.n	800c8da <_printf_i+0x1ae>
 800c842:	4615      	mov	r5, r2
 800c844:	fbb6 f1f3 	udiv	r1, r6, r3
 800c848:	fb03 6711 	mls	r7, r3, r1, r6
 800c84c:	5dc7      	ldrb	r7, [r0, r7]
 800c84e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c852:	4637      	mov	r7, r6
 800c854:	42bb      	cmp	r3, r7
 800c856:	460e      	mov	r6, r1
 800c858:	d9f4      	bls.n	800c844 <_printf_i+0x118>
 800c85a:	2b08      	cmp	r3, #8
 800c85c:	d10b      	bne.n	800c876 <_printf_i+0x14a>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	07de      	lsls	r6, r3, #31
 800c862:	d508      	bpl.n	800c876 <_printf_i+0x14a>
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	6861      	ldr	r1, [r4, #4]
 800c868:	4299      	cmp	r1, r3
 800c86a:	bfde      	ittt	le
 800c86c:	2330      	movle	r3, #48	; 0x30
 800c86e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c872:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c876:	1b52      	subs	r2, r2, r5
 800c878:	6122      	str	r2, [r4, #16]
 800c87a:	464b      	mov	r3, r9
 800c87c:	4621      	mov	r1, r4
 800c87e:	4640      	mov	r0, r8
 800c880:	f8cd a000 	str.w	sl, [sp]
 800c884:	aa03      	add	r2, sp, #12
 800c886:	f7ff fedf 	bl	800c648 <_printf_common>
 800c88a:	3001      	adds	r0, #1
 800c88c:	d14a      	bne.n	800c924 <_printf_i+0x1f8>
 800c88e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c892:	b004      	add	sp, #16
 800c894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	f043 0320 	orr.w	r3, r3, #32
 800c89e:	6023      	str	r3, [r4, #0]
 800c8a0:	2778      	movs	r7, #120	; 0x78
 800c8a2:	4832      	ldr	r0, [pc, #200]	; (800c96c <_printf_i+0x240>)
 800c8a4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c8a8:	6823      	ldr	r3, [r4, #0]
 800c8aa:	6829      	ldr	r1, [r5, #0]
 800c8ac:	061f      	lsls	r7, r3, #24
 800c8ae:	f851 6b04 	ldr.w	r6, [r1], #4
 800c8b2:	d402      	bmi.n	800c8ba <_printf_i+0x18e>
 800c8b4:	065f      	lsls	r7, r3, #25
 800c8b6:	bf48      	it	mi
 800c8b8:	b2b6      	uxthmi	r6, r6
 800c8ba:	07df      	lsls	r7, r3, #31
 800c8bc:	bf48      	it	mi
 800c8be:	f043 0320 	orrmi.w	r3, r3, #32
 800c8c2:	6029      	str	r1, [r5, #0]
 800c8c4:	bf48      	it	mi
 800c8c6:	6023      	strmi	r3, [r4, #0]
 800c8c8:	b91e      	cbnz	r6, 800c8d2 <_printf_i+0x1a6>
 800c8ca:	6823      	ldr	r3, [r4, #0]
 800c8cc:	f023 0320 	bic.w	r3, r3, #32
 800c8d0:	6023      	str	r3, [r4, #0]
 800c8d2:	2310      	movs	r3, #16
 800c8d4:	e7a6      	b.n	800c824 <_printf_i+0xf8>
 800c8d6:	4824      	ldr	r0, [pc, #144]	; (800c968 <_printf_i+0x23c>)
 800c8d8:	e7e4      	b.n	800c8a4 <_printf_i+0x178>
 800c8da:	4615      	mov	r5, r2
 800c8dc:	e7bd      	b.n	800c85a <_printf_i+0x12e>
 800c8de:	682b      	ldr	r3, [r5, #0]
 800c8e0:	6826      	ldr	r6, [r4, #0]
 800c8e2:	1d18      	adds	r0, r3, #4
 800c8e4:	6961      	ldr	r1, [r4, #20]
 800c8e6:	6028      	str	r0, [r5, #0]
 800c8e8:	0635      	lsls	r5, r6, #24
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	d501      	bpl.n	800c8f2 <_printf_i+0x1c6>
 800c8ee:	6019      	str	r1, [r3, #0]
 800c8f0:	e002      	b.n	800c8f8 <_printf_i+0x1cc>
 800c8f2:	0670      	lsls	r0, r6, #25
 800c8f4:	d5fb      	bpl.n	800c8ee <_printf_i+0x1c2>
 800c8f6:	8019      	strh	r1, [r3, #0]
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	4615      	mov	r5, r2
 800c8fc:	6123      	str	r3, [r4, #16]
 800c8fe:	e7bc      	b.n	800c87a <_printf_i+0x14e>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	2100      	movs	r1, #0
 800c904:	1d1a      	adds	r2, r3, #4
 800c906:	602a      	str	r2, [r5, #0]
 800c908:	681d      	ldr	r5, [r3, #0]
 800c90a:	6862      	ldr	r2, [r4, #4]
 800c90c:	4628      	mov	r0, r5
 800c90e:	f000 f895 	bl	800ca3c <memchr>
 800c912:	b108      	cbz	r0, 800c918 <_printf_i+0x1ec>
 800c914:	1b40      	subs	r0, r0, r5
 800c916:	6060      	str	r0, [r4, #4]
 800c918:	6863      	ldr	r3, [r4, #4]
 800c91a:	6123      	str	r3, [r4, #16]
 800c91c:	2300      	movs	r3, #0
 800c91e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c922:	e7aa      	b.n	800c87a <_printf_i+0x14e>
 800c924:	462a      	mov	r2, r5
 800c926:	4649      	mov	r1, r9
 800c928:	4640      	mov	r0, r8
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	47d0      	blx	sl
 800c92e:	3001      	adds	r0, #1
 800c930:	d0ad      	beq.n	800c88e <_printf_i+0x162>
 800c932:	6823      	ldr	r3, [r4, #0]
 800c934:	079b      	lsls	r3, r3, #30
 800c936:	d413      	bmi.n	800c960 <_printf_i+0x234>
 800c938:	68e0      	ldr	r0, [r4, #12]
 800c93a:	9b03      	ldr	r3, [sp, #12]
 800c93c:	4298      	cmp	r0, r3
 800c93e:	bfb8      	it	lt
 800c940:	4618      	movlt	r0, r3
 800c942:	e7a6      	b.n	800c892 <_printf_i+0x166>
 800c944:	2301      	movs	r3, #1
 800c946:	4632      	mov	r2, r6
 800c948:	4649      	mov	r1, r9
 800c94a:	4640      	mov	r0, r8
 800c94c:	47d0      	blx	sl
 800c94e:	3001      	adds	r0, #1
 800c950:	d09d      	beq.n	800c88e <_printf_i+0x162>
 800c952:	3501      	adds	r5, #1
 800c954:	68e3      	ldr	r3, [r4, #12]
 800c956:	9903      	ldr	r1, [sp, #12]
 800c958:	1a5b      	subs	r3, r3, r1
 800c95a:	42ab      	cmp	r3, r5
 800c95c:	dcf2      	bgt.n	800c944 <_printf_i+0x218>
 800c95e:	e7eb      	b.n	800c938 <_printf_i+0x20c>
 800c960:	2500      	movs	r5, #0
 800c962:	f104 0619 	add.w	r6, r4, #25
 800c966:	e7f5      	b.n	800c954 <_printf_i+0x228>
 800c968:	0800df23 	.word	0x0800df23
 800c96c:	0800df34 	.word	0x0800df34

0800c970 <__malloc_lock>:
 800c970:	4801      	ldr	r0, [pc, #4]	; (800c978 <__malloc_lock+0x8>)
 800c972:	f7ff bc6f 	b.w	800c254 <__retarget_lock_acquire_recursive>
 800c976:	bf00      	nop
 800c978:	200016f0 	.word	0x200016f0

0800c97c <__malloc_unlock>:
 800c97c:	4801      	ldr	r0, [pc, #4]	; (800c984 <__malloc_unlock+0x8>)
 800c97e:	f7ff bc6a 	b.w	800c256 <__retarget_lock_release_recursive>
 800c982:	bf00      	nop
 800c984:	200016f0 	.word	0x200016f0

0800c988 <_realloc_r>:
 800c988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c98c:	4680      	mov	r8, r0
 800c98e:	4614      	mov	r4, r2
 800c990:	460e      	mov	r6, r1
 800c992:	b921      	cbnz	r1, 800c99e <_realloc_r+0x16>
 800c994:	4611      	mov	r1, r2
 800c996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c99a:	f7ff bdd5 	b.w	800c548 <_malloc_r>
 800c99e:	b92a      	cbnz	r2, 800c9ac <_realloc_r+0x24>
 800c9a0:	f000 f868 	bl	800ca74 <_free_r>
 800c9a4:	4625      	mov	r5, r4
 800c9a6:	4628      	mov	r0, r5
 800c9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9ac:	f000 f8aa 	bl	800cb04 <_malloc_usable_size_r>
 800c9b0:	4284      	cmp	r4, r0
 800c9b2:	4607      	mov	r7, r0
 800c9b4:	d802      	bhi.n	800c9bc <_realloc_r+0x34>
 800c9b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c9ba:	d812      	bhi.n	800c9e2 <_realloc_r+0x5a>
 800c9bc:	4621      	mov	r1, r4
 800c9be:	4640      	mov	r0, r8
 800c9c0:	f7ff fdc2 	bl	800c548 <_malloc_r>
 800c9c4:	4605      	mov	r5, r0
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0ed      	beq.n	800c9a6 <_realloc_r+0x1e>
 800c9ca:	42bc      	cmp	r4, r7
 800c9cc:	4622      	mov	r2, r4
 800c9ce:	4631      	mov	r1, r6
 800c9d0:	bf28      	it	cs
 800c9d2:	463a      	movcs	r2, r7
 800c9d4:	f000 f840 	bl	800ca58 <memcpy>
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4640      	mov	r0, r8
 800c9dc:	f000 f84a 	bl	800ca74 <_free_r>
 800c9e0:	e7e1      	b.n	800c9a6 <_realloc_r+0x1e>
 800c9e2:	4635      	mov	r5, r6
 800c9e4:	e7df      	b.n	800c9a6 <_realloc_r+0x1e>

0800c9e6 <memmove>:
 800c9e6:	4288      	cmp	r0, r1
 800c9e8:	b510      	push	{r4, lr}
 800c9ea:	eb01 0402 	add.w	r4, r1, r2
 800c9ee:	d902      	bls.n	800c9f6 <memmove+0x10>
 800c9f0:	4284      	cmp	r4, r0
 800c9f2:	4623      	mov	r3, r4
 800c9f4:	d807      	bhi.n	800ca06 <memmove+0x20>
 800c9f6:	1e43      	subs	r3, r0, #1
 800c9f8:	42a1      	cmp	r1, r4
 800c9fa:	d008      	beq.n	800ca0e <memmove+0x28>
 800c9fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ca00:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ca04:	e7f8      	b.n	800c9f8 <memmove+0x12>
 800ca06:	4601      	mov	r1, r0
 800ca08:	4402      	add	r2, r0
 800ca0a:	428a      	cmp	r2, r1
 800ca0c:	d100      	bne.n	800ca10 <memmove+0x2a>
 800ca0e:	bd10      	pop	{r4, pc}
 800ca10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ca14:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ca18:	e7f7      	b.n	800ca0a <memmove+0x24>
	...

0800ca1c <_sbrk_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	2300      	movs	r3, #0
 800ca20:	4d05      	ldr	r5, [pc, #20]	; (800ca38 <_sbrk_r+0x1c>)
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	602b      	str	r3, [r5, #0]
 800ca28:	f7f6 f95a 	bl	8002ce0 <_sbrk>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_sbrk_r+0x1a>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_sbrk_r+0x1a>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	200016fc 	.word	0x200016fc

0800ca3c <memchr>:
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	b510      	push	{r4, lr}
 800ca40:	b2c9      	uxtb	r1, r1
 800ca42:	4402      	add	r2, r0
 800ca44:	4293      	cmp	r3, r2
 800ca46:	4618      	mov	r0, r3
 800ca48:	d101      	bne.n	800ca4e <memchr+0x12>
 800ca4a:	2000      	movs	r0, #0
 800ca4c:	e003      	b.n	800ca56 <memchr+0x1a>
 800ca4e:	7804      	ldrb	r4, [r0, #0]
 800ca50:	3301      	adds	r3, #1
 800ca52:	428c      	cmp	r4, r1
 800ca54:	d1f6      	bne.n	800ca44 <memchr+0x8>
 800ca56:	bd10      	pop	{r4, pc}

0800ca58 <memcpy>:
 800ca58:	440a      	add	r2, r1
 800ca5a:	4291      	cmp	r1, r2
 800ca5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ca60:	d100      	bne.n	800ca64 <memcpy+0xc>
 800ca62:	4770      	bx	lr
 800ca64:	b510      	push	{r4, lr}
 800ca66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca6a:	4291      	cmp	r1, r2
 800ca6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca70:	d1f9      	bne.n	800ca66 <memcpy+0xe>
 800ca72:	bd10      	pop	{r4, pc}

0800ca74 <_free_r>:
 800ca74:	b538      	push	{r3, r4, r5, lr}
 800ca76:	4605      	mov	r5, r0
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	d040      	beq.n	800cafe <_free_r+0x8a>
 800ca7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca80:	1f0c      	subs	r4, r1, #4
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	bfb8      	it	lt
 800ca86:	18e4      	addlt	r4, r4, r3
 800ca88:	f7ff ff72 	bl	800c970 <__malloc_lock>
 800ca8c:	4a1c      	ldr	r2, [pc, #112]	; (800cb00 <_free_r+0x8c>)
 800ca8e:	6813      	ldr	r3, [r2, #0]
 800ca90:	b933      	cbnz	r3, 800caa0 <_free_r+0x2c>
 800ca92:	6063      	str	r3, [r4, #4]
 800ca94:	6014      	str	r4, [r2, #0]
 800ca96:	4628      	mov	r0, r5
 800ca98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ca9c:	f7ff bf6e 	b.w	800c97c <__malloc_unlock>
 800caa0:	42a3      	cmp	r3, r4
 800caa2:	d908      	bls.n	800cab6 <_free_r+0x42>
 800caa4:	6820      	ldr	r0, [r4, #0]
 800caa6:	1821      	adds	r1, r4, r0
 800caa8:	428b      	cmp	r3, r1
 800caaa:	bf01      	itttt	eq
 800caac:	6819      	ldreq	r1, [r3, #0]
 800caae:	685b      	ldreq	r3, [r3, #4]
 800cab0:	1809      	addeq	r1, r1, r0
 800cab2:	6021      	streq	r1, [r4, #0]
 800cab4:	e7ed      	b.n	800ca92 <_free_r+0x1e>
 800cab6:	461a      	mov	r2, r3
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	b10b      	cbz	r3, 800cac0 <_free_r+0x4c>
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	d9fa      	bls.n	800cab6 <_free_r+0x42>
 800cac0:	6811      	ldr	r1, [r2, #0]
 800cac2:	1850      	adds	r0, r2, r1
 800cac4:	42a0      	cmp	r0, r4
 800cac6:	d10b      	bne.n	800cae0 <_free_r+0x6c>
 800cac8:	6820      	ldr	r0, [r4, #0]
 800caca:	4401      	add	r1, r0
 800cacc:	1850      	adds	r0, r2, r1
 800cace:	4283      	cmp	r3, r0
 800cad0:	6011      	str	r1, [r2, #0]
 800cad2:	d1e0      	bne.n	800ca96 <_free_r+0x22>
 800cad4:	6818      	ldr	r0, [r3, #0]
 800cad6:	685b      	ldr	r3, [r3, #4]
 800cad8:	4408      	add	r0, r1
 800cada:	6010      	str	r0, [r2, #0]
 800cadc:	6053      	str	r3, [r2, #4]
 800cade:	e7da      	b.n	800ca96 <_free_r+0x22>
 800cae0:	d902      	bls.n	800cae8 <_free_r+0x74>
 800cae2:	230c      	movs	r3, #12
 800cae4:	602b      	str	r3, [r5, #0]
 800cae6:	e7d6      	b.n	800ca96 <_free_r+0x22>
 800cae8:	6820      	ldr	r0, [r4, #0]
 800caea:	1821      	adds	r1, r4, r0
 800caec:	428b      	cmp	r3, r1
 800caee:	bf01      	itttt	eq
 800caf0:	6819      	ldreq	r1, [r3, #0]
 800caf2:	685b      	ldreq	r3, [r3, #4]
 800caf4:	1809      	addeq	r1, r1, r0
 800caf6:	6021      	streq	r1, [r4, #0]
 800caf8:	6063      	str	r3, [r4, #4]
 800cafa:	6054      	str	r4, [r2, #4]
 800cafc:	e7cb      	b.n	800ca96 <_free_r+0x22>
 800cafe:	bd38      	pop	{r3, r4, r5, pc}
 800cb00:	200016f4 	.word	0x200016f4

0800cb04 <_malloc_usable_size_r>:
 800cb04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb08:	1f18      	subs	r0, r3, #4
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	bfbc      	itt	lt
 800cb0e:	580b      	ldrlt	r3, [r1, r0]
 800cb10:	18c0      	addlt	r0, r0, r3
 800cb12:	4770      	bx	lr

0800cb14 <roundf>:
 800cb14:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800cb18:	3b7f      	subs	r3, #127	; 0x7f
 800cb1a:	2b16      	cmp	r3, #22
 800cb1c:	4601      	mov	r1, r0
 800cb1e:	b510      	push	{r4, lr}
 800cb20:	dc14      	bgt.n	800cb4c <roundf+0x38>
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	da07      	bge.n	800cb36 <roundf+0x22>
 800cb26:	3301      	adds	r3, #1
 800cb28:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800cb2c:	d101      	bne.n	800cb32 <roundf+0x1e>
 800cb2e:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800cb32:	4608      	mov	r0, r1
 800cb34:	bd10      	pop	{r4, pc}
 800cb36:	4a08      	ldr	r2, [pc, #32]	; (800cb58 <roundf+0x44>)
 800cb38:	411a      	asrs	r2, r3
 800cb3a:	4210      	tst	r0, r2
 800cb3c:	d0f9      	beq.n	800cb32 <roundf+0x1e>
 800cb3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cb42:	4119      	asrs	r1, r3
 800cb44:	4401      	add	r1, r0
 800cb46:	ea21 0102 	bic.w	r1, r1, r2
 800cb4a:	e7f2      	b.n	800cb32 <roundf+0x1e>
 800cb4c:	2b80      	cmp	r3, #128	; 0x80
 800cb4e:	d1f0      	bne.n	800cb32 <roundf+0x1e>
 800cb50:	f7f3 fff0 	bl	8000b34 <__addsf3>
 800cb54:	4601      	mov	r1, r0
 800cb56:	e7ec      	b.n	800cb32 <roundf+0x1e>
 800cb58:	007fffff 	.word	0x007fffff

0800cb5c <fmod>:
 800cb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	4680      	mov	r8, r0
 800cb62:	4689      	mov	r9, r1
 800cb64:	4616      	mov	r6, r2
 800cb66:	461f      	mov	r7, r3
 800cb68:	f000 f92e 	bl	800cdc8 <__ieee754_fmod>
 800cb6c:	4632      	mov	r2, r6
 800cb6e:	4604      	mov	r4, r0
 800cb70:	460d      	mov	r5, r1
 800cb72:	463b      	mov	r3, r7
 800cb74:	4640      	mov	r0, r8
 800cb76:	4649      	mov	r1, r9
 800cb78:	f7f3 ff48 	bl	8000a0c <__aeabi_dcmpun>
 800cb7c:	b990      	cbnz	r0, 800cba4 <fmod+0x48>
 800cb7e:	2200      	movs	r2, #0
 800cb80:	2300      	movs	r3, #0
 800cb82:	4630      	mov	r0, r6
 800cb84:	4639      	mov	r1, r7
 800cb86:	f7f3 ff0f 	bl	80009a8 <__aeabi_dcmpeq>
 800cb8a:	b158      	cbz	r0, 800cba4 <fmod+0x48>
 800cb8c:	f7ff fb38 	bl	800c200 <__errno>
 800cb90:	2321      	movs	r3, #33	; 0x21
 800cb92:	2200      	movs	r2, #0
 800cb94:	6003      	str	r3, [r0, #0]
 800cb96:	2300      	movs	r3, #0
 800cb98:	4610      	mov	r0, r2
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	f7f3 fdc6 	bl	800072c <__aeabi_ddiv>
 800cba0:	4604      	mov	r4, r0
 800cba2:	460d      	mov	r5, r1
 800cba4:	4620      	mov	r0, r4
 800cba6:	4629      	mov	r1, r5
 800cba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cbac <cos>:
 800cbac:	b530      	push	{r4, r5, lr}
 800cbae:	4a20      	ldr	r2, [pc, #128]	; (800cc30 <cos+0x84>)
 800cbb0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	dc06      	bgt.n	800cbc8 <cos+0x1c>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	b007      	add	sp, #28
 800cbc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbc4:	f000 bf48 	b.w	800da58 <__kernel_cos>
 800cbc8:	4a1a      	ldr	r2, [pc, #104]	; (800cc34 <cos+0x88>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	dd05      	ble.n	800cbda <cos+0x2e>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	f7f3 fac9 	bl	8000168 <__aeabi_dsub>
 800cbd6:	b007      	add	sp, #28
 800cbd8:	bd30      	pop	{r4, r5, pc}
 800cbda:	aa02      	add	r2, sp, #8
 800cbdc:	f000 fa08 	bl	800cff0 <__ieee754_rem_pio2>
 800cbe0:	f000 0003 	and.w	r0, r0, #3
 800cbe4:	2801      	cmp	r0, #1
 800cbe6:	d009      	beq.n	800cbfc <cos+0x50>
 800cbe8:	2802      	cmp	r0, #2
 800cbea:	d011      	beq.n	800cc10 <cos+0x64>
 800cbec:	b9b8      	cbnz	r0, 800cc1e <cos+0x72>
 800cbee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf6:	f000 ff2f 	bl	800da58 <__kernel_cos>
 800cbfa:	e7ec      	b.n	800cbd6 <cos+0x2a>
 800cbfc:	9000      	str	r0, [sp, #0]
 800cbfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc06:	f000 ffe7 	bl	800dbd8 <__kernel_sin>
 800cc0a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cc0e:	e7e2      	b.n	800cbd6 <cos+0x2a>
 800cc10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc18:	f000 ff1e 	bl	800da58 <__kernel_cos>
 800cc1c:	e7f5      	b.n	800cc0a <cos+0x5e>
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc2a:	f000 ffd5 	bl	800dbd8 <__kernel_sin>
 800cc2e:	e7d2      	b.n	800cbd6 <cos+0x2a>
 800cc30:	3fe921fb 	.word	0x3fe921fb
 800cc34:	7fefffff 	.word	0x7fefffff

0800cc38 <sin>:
 800cc38:	b530      	push	{r4, r5, lr}
 800cc3a:	4a20      	ldr	r2, [pc, #128]	; (800ccbc <sin+0x84>)
 800cc3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc40:	4293      	cmp	r3, r2
 800cc42:	b087      	sub	sp, #28
 800cc44:	dc06      	bgt.n	800cc54 <sin+0x1c>
 800cc46:	2300      	movs	r3, #0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	9300      	str	r3, [sp, #0]
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	f000 ffc3 	bl	800dbd8 <__kernel_sin>
 800cc52:	e006      	b.n	800cc62 <sin+0x2a>
 800cc54:	4a1a      	ldr	r2, [pc, #104]	; (800ccc0 <sin+0x88>)
 800cc56:	4293      	cmp	r3, r2
 800cc58:	dd05      	ble.n	800cc66 <sin+0x2e>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	f7f3 fa83 	bl	8000168 <__aeabi_dsub>
 800cc62:	b007      	add	sp, #28
 800cc64:	bd30      	pop	{r4, r5, pc}
 800cc66:	aa02      	add	r2, sp, #8
 800cc68:	f000 f9c2 	bl	800cff0 <__ieee754_rem_pio2>
 800cc6c:	f000 0003 	and.w	r0, r0, #3
 800cc70:	2801      	cmp	r0, #1
 800cc72:	d009      	beq.n	800cc88 <sin+0x50>
 800cc74:	2802      	cmp	r0, #2
 800cc76:	d00e      	beq.n	800cc96 <sin+0x5e>
 800cc78:	b9c0      	cbnz	r0, 800ccac <sin+0x74>
 800cc7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc7e:	2301      	movs	r3, #1
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc86:	e7e2      	b.n	800cc4e <sin+0x16>
 800cc88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cc8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc90:	f000 fee2 	bl	800da58 <__kernel_cos>
 800cc94:	e7e5      	b.n	800cc62 <sin+0x2a>
 800cc96:	2301      	movs	r3, #1
 800cc98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cca2:	f000 ff99 	bl	800dbd8 <__kernel_sin>
 800cca6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ccaa:	e7da      	b.n	800cc62 <sin+0x2a>
 800ccac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccb4:	f000 fed0 	bl	800da58 <__kernel_cos>
 800ccb8:	e7f5      	b.n	800cca6 <sin+0x6e>
 800ccba:	bf00      	nop
 800ccbc:	3fe921fb 	.word	0x3fe921fb
 800ccc0:	7fefffff 	.word	0x7fefffff
 800ccc4:	00000000 	.word	0x00000000

0800ccc8 <floor>:
 800ccc8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ccd0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800ccd4:	2e13      	cmp	r6, #19
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	4607      	mov	r7, r0
 800ccda:	460c      	mov	r4, r1
 800ccdc:	4605      	mov	r5, r0
 800ccde:	dc32      	bgt.n	800cd46 <floor+0x7e>
 800cce0:	2e00      	cmp	r6, #0
 800cce2:	da14      	bge.n	800cd0e <floor+0x46>
 800cce4:	a334      	add	r3, pc, #208	; (adr r3, 800cdb8 <floor+0xf0>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	f7f3 fa3f 	bl	800016c <__adddf3>
 800ccee:	2200      	movs	r2, #0
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	f7f3 fe81 	bl	80009f8 <__aeabi_dcmpgt>
 800ccf6:	b138      	cbz	r0, 800cd08 <floor+0x40>
 800ccf8:	2c00      	cmp	r4, #0
 800ccfa:	da56      	bge.n	800cdaa <floor+0xe2>
 800ccfc:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800cd00:	4325      	orrs	r5, r4
 800cd02:	d055      	beq.n	800cdb0 <floor+0xe8>
 800cd04:	2500      	movs	r5, #0
 800cd06:	4c2e      	ldr	r4, [pc, #184]	; (800cdc0 <floor+0xf8>)
 800cd08:	4623      	mov	r3, r4
 800cd0a:	462f      	mov	r7, r5
 800cd0c:	e025      	b.n	800cd5a <floor+0x92>
 800cd0e:	4a2d      	ldr	r2, [pc, #180]	; (800cdc4 <floor+0xfc>)
 800cd10:	fa42 f806 	asr.w	r8, r2, r6
 800cd14:	ea01 0208 	and.w	r2, r1, r8
 800cd18:	4302      	orrs	r2, r0
 800cd1a:	d01e      	beq.n	800cd5a <floor+0x92>
 800cd1c:	a326      	add	r3, pc, #152	; (adr r3, 800cdb8 <floor+0xf0>)
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	f7f3 fa23 	bl	800016c <__adddf3>
 800cd26:	2200      	movs	r2, #0
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f7f3 fe65 	bl	80009f8 <__aeabi_dcmpgt>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	d0ea      	beq.n	800cd08 <floor+0x40>
 800cd32:	2c00      	cmp	r4, #0
 800cd34:	bfbe      	ittt	lt
 800cd36:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800cd3a:	4133      	asrlt	r3, r6
 800cd3c:	18e4      	addlt	r4, r4, r3
 800cd3e:	2500      	movs	r5, #0
 800cd40:	ea24 0408 	bic.w	r4, r4, r8
 800cd44:	e7e0      	b.n	800cd08 <floor+0x40>
 800cd46:	2e33      	cmp	r6, #51	; 0x33
 800cd48:	dd0b      	ble.n	800cd62 <floor+0x9a>
 800cd4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800cd4e:	d104      	bne.n	800cd5a <floor+0x92>
 800cd50:	4602      	mov	r2, r0
 800cd52:	f7f3 fa0b 	bl	800016c <__adddf3>
 800cd56:	4607      	mov	r7, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4638      	mov	r0, r7
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd62:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800cd66:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800cd6a:	fa28 f802 	lsr.w	r8, r8, r2
 800cd6e:	ea10 0f08 	tst.w	r0, r8
 800cd72:	d0f2      	beq.n	800cd5a <floor+0x92>
 800cd74:	a310      	add	r3, pc, #64	; (adr r3, 800cdb8 <floor+0xf0>)
 800cd76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7a:	f7f3 f9f7 	bl	800016c <__adddf3>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	2300      	movs	r3, #0
 800cd82:	f7f3 fe39 	bl	80009f8 <__aeabi_dcmpgt>
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0be      	beq.n	800cd08 <floor+0x40>
 800cd8a:	2c00      	cmp	r4, #0
 800cd8c:	da0a      	bge.n	800cda4 <floor+0xdc>
 800cd8e:	2e14      	cmp	r6, #20
 800cd90:	d101      	bne.n	800cd96 <floor+0xce>
 800cd92:	3401      	adds	r4, #1
 800cd94:	e006      	b.n	800cda4 <floor+0xdc>
 800cd96:	2301      	movs	r3, #1
 800cd98:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd9c:	40b3      	lsls	r3, r6
 800cd9e:	441d      	add	r5, r3
 800cda0:	42af      	cmp	r7, r5
 800cda2:	d8f6      	bhi.n	800cd92 <floor+0xca>
 800cda4:	ea25 0508 	bic.w	r5, r5, r8
 800cda8:	e7ae      	b.n	800cd08 <floor+0x40>
 800cdaa:	2500      	movs	r5, #0
 800cdac:	462c      	mov	r4, r5
 800cdae:	e7ab      	b.n	800cd08 <floor+0x40>
 800cdb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cdb4:	e7a8      	b.n	800cd08 <floor+0x40>
 800cdb6:	bf00      	nop
 800cdb8:	8800759c 	.word	0x8800759c
 800cdbc:	7e37e43c 	.word	0x7e37e43c
 800cdc0:	bff00000 	.word	0xbff00000
 800cdc4:	000fffff 	.word	0x000fffff

0800cdc8 <__ieee754_fmod>:
 800cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdcc:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800cdd0:	4684      	mov	ip, r0
 800cdd2:	461d      	mov	r5, r3
 800cdd4:	4608      	mov	r0, r1
 800cdd6:	4619      	mov	r1, r3
 800cdd8:	ea57 0302 	orrs.w	r3, r7, r2
 800cddc:	4614      	mov	r4, r2
 800cdde:	4616      	mov	r6, r2
 800cde0:	4696      	mov	lr, r2
 800cde2:	d00c      	beq.n	800cdfe <__ieee754_fmod+0x36>
 800cde4:	4b7b      	ldr	r3, [pc, #492]	; (800cfd4 <__ieee754_fmod+0x20c>)
 800cde6:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
 800cdea:	4599      	cmp	r9, r3
 800cdec:	4682      	mov	sl, r0
 800cdee:	dc06      	bgt.n	800cdfe <__ieee754_fmod+0x36>
 800cdf0:	4253      	negs	r3, r2
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	4a78      	ldr	r2, [pc, #480]	; (800cfd8 <__ieee754_fmod+0x210>)
 800cdf6:	ea47 73d3 	orr.w	r3, r7, r3, lsr #31
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d90d      	bls.n	800ce1a <__ieee754_fmod+0x52>
 800cdfe:	4605      	mov	r5, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	4622      	mov	r2, r4
 800ce04:	4660      	mov	r0, ip
 800ce06:	4629      	mov	r1, r5
 800ce08:	f7f3 fb66 	bl	80004d8 <__aeabi_dmul>
 800ce0c:	4602      	mov	r2, r0
 800ce0e:	460b      	mov	r3, r1
 800ce10:	f7f3 fc8c 	bl	800072c <__aeabi_ddiv>
 800ce14:	4684      	mov	ip, r0
 800ce16:	4608      	mov	r0, r1
 800ce18:	e00e      	b.n	800ce38 <__ieee754_fmod+0x70>
 800ce1a:	45b9      	cmp	r9, r7
 800ce1c:	46e0      	mov	r8, ip
 800ce1e:	4661      	mov	r1, ip
 800ce20:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 800ce24:	dc0d      	bgt.n	800ce42 <__ieee754_fmod+0x7a>
 800ce26:	db07      	blt.n	800ce38 <__ieee754_fmod+0x70>
 800ce28:	45b4      	cmp	ip, r6
 800ce2a:	d305      	bcc.n	800ce38 <__ieee754_fmod+0x70>
 800ce2c:	d109      	bne.n	800ce42 <__ieee754_fmod+0x7a>
 800ce2e:	4b6b      	ldr	r3, [pc, #428]	; (800cfdc <__ieee754_fmod+0x214>)
 800ce30:	eb03 7314 	add.w	r3, r3, r4, lsr #28
 800ce34:	e9d3 c000 	ldrd	ip, r0, [r3]
 800ce38:	4603      	mov	r3, r0
 800ce3a:	4660      	mov	r0, ip
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce42:	4a65      	ldr	r2, [pc, #404]	; (800cfd8 <__ieee754_fmod+0x210>)
 800ce44:	ea1a 0f02 	tst.w	sl, r2
 800ce48:	d149      	bne.n	800cede <__ieee754_fmod+0x116>
 800ce4a:	f1b9 0f00 	cmp.w	r9, #0
 800ce4e:	d13e      	bne.n	800cece <__ieee754_fmod+0x106>
 800ce50:	4643      	mov	r3, r8
 800ce52:	4863      	ldr	r0, [pc, #396]	; (800cfe0 <__ieee754_fmod+0x218>)
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dc37      	bgt.n	800cec8 <__ieee754_fmod+0x100>
 800ce58:	4215      	tst	r5, r2
 800ce5a:	d14f      	bne.n	800cefc <__ieee754_fmod+0x134>
 800ce5c:	2f00      	cmp	r7, #0
 800ce5e:	d146      	bne.n	800ceee <__ieee754_fmod+0x126>
 800ce60:	4633      	mov	r3, r6
 800ce62:	4a5f      	ldr	r2, [pc, #380]	; (800cfe0 <__ieee754_fmod+0x218>)
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	dc3f      	bgt.n	800cee8 <__ieee754_fmod+0x120>
 800ce68:	4b5e      	ldr	r3, [pc, #376]	; (800cfe4 <__ieee754_fmod+0x21c>)
 800ce6a:	4298      	cmp	r0, r3
 800ce6c:	db4a      	blt.n	800cf04 <__ieee754_fmod+0x13c>
 800ce6e:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ce72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce76:	f8df c16c 	ldr.w	ip, [pc, #364]	; 800cfe4 <__ieee754_fmod+0x21c>
 800ce7a:	4562      	cmp	r2, ip
 800ce7c:	db57      	blt.n	800cf2e <__ieee754_fmod+0x166>
 800ce7e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ce82:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 800ce86:	1a80      	subs	r0, r0, r2
 800ce88:	1b5e      	subs	r6, r3, r5
 800ce8a:	eba1 070e 	sub.w	r7, r1, lr
 800ce8e:	2800      	cmp	r0, #0
 800ce90:	d163      	bne.n	800cf5a <__ieee754_fmod+0x192>
 800ce92:	4571      	cmp	r1, lr
 800ce94:	bf38      	it	cc
 800ce96:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800ce9a:	2e00      	cmp	r6, #0
 800ce9c:	bfa4      	itt	ge
 800ce9e:	4639      	movge	r1, r7
 800cea0:	4633      	movge	r3, r6
 800cea2:	ea53 0001 	orrs.w	r0, r3, r1
 800cea6:	d0c2      	beq.n	800ce2e <__ieee754_fmod+0x66>
 800cea8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceac:	db6a      	blt.n	800cf84 <__ieee754_fmod+0x1bc>
 800ceae:	484d      	ldr	r0, [pc, #308]	; (800cfe4 <__ieee754_fmod+0x21c>)
 800ceb0:	4282      	cmp	r2, r0
 800ceb2:	db6d      	blt.n	800cf90 <__ieee754_fmod+0x1c8>
 800ceb4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ceb8:	4323      	orrs	r3, r4
 800ceba:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800cebe:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cec2:	468c      	mov	ip, r1
 800cec4:	4628      	mov	r0, r5
 800cec6:	e7b7      	b.n	800ce38 <__ieee754_fmod+0x70>
 800cec8:	3801      	subs	r0, #1
 800ceca:	005b      	lsls	r3, r3, #1
 800cecc:	e7c2      	b.n	800ce54 <__ieee754_fmod+0x8c>
 800cece:	4845      	ldr	r0, [pc, #276]	; (800cfe4 <__ieee754_fmod+0x21c>)
 800ced0:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	ddbf      	ble.n	800ce58 <__ieee754_fmod+0x90>
 800ced8:	3801      	subs	r0, #1
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	e7fa      	b.n	800ced4 <__ieee754_fmod+0x10c>
 800cede:	ea4f 5029 	mov.w	r0, r9, asr #20
 800cee2:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800cee6:	e7b7      	b.n	800ce58 <__ieee754_fmod+0x90>
 800cee8:	3a01      	subs	r2, #1
 800ceea:	005b      	lsls	r3, r3, #1
 800ceec:	e7ba      	b.n	800ce64 <__ieee754_fmod+0x9c>
 800ceee:	4a3d      	ldr	r2, [pc, #244]	; (800cfe4 <__ieee754_fmod+0x21c>)
 800cef0:	02fb      	lsls	r3, r7, #11
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	ddb8      	ble.n	800ce68 <__ieee754_fmod+0xa0>
 800cef6:	3a01      	subs	r2, #1
 800cef8:	005b      	lsls	r3, r3, #1
 800cefa:	e7fa      	b.n	800cef2 <__ieee754_fmod+0x12a>
 800cefc:	153a      	asrs	r2, r7, #20
 800cefe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cf02:	e7b1      	b.n	800ce68 <__ieee754_fmod+0xa0>
 800cf04:	eba3 0c00 	sub.w	ip, r3, r0
 800cf08:	f1bc 0f1f 	cmp.w	ip, #31
 800cf0c:	dc09      	bgt.n	800cf22 <__ieee754_fmod+0x15a>
 800cf0e:	f200 431e 	addw	r3, r0, #1054	; 0x41e
 800cf12:	fa09 f10c 	lsl.w	r1, r9, ip
 800cf16:	fa28 f303 	lsr.w	r3, r8, r3
 800cf1a:	430b      	orrs	r3, r1
 800cf1c:	fa08 f10c 	lsl.w	r1, r8, ip
 800cf20:	e7a9      	b.n	800ce76 <__ieee754_fmod+0xae>
 800cf22:	4b31      	ldr	r3, [pc, #196]	; (800cfe8 <__ieee754_fmod+0x220>)
 800cf24:	2100      	movs	r1, #0
 800cf26:	1a1b      	subs	r3, r3, r0
 800cf28:	fa08 f303 	lsl.w	r3, r8, r3
 800cf2c:	e7a3      	b.n	800ce76 <__ieee754_fmod+0xae>
 800cf2e:	ebac 0c02 	sub.w	ip, ip, r2
 800cf32:	f1bc 0f1f 	cmp.w	ip, #31
 800cf36:	dc09      	bgt.n	800cf4c <__ieee754_fmod+0x184>
 800cf38:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 800cf3c:	fa07 f70c 	lsl.w	r7, r7, ip
 800cf40:	fa26 f505 	lsr.w	r5, r6, r5
 800cf44:	433d      	orrs	r5, r7
 800cf46:	fa06 fe0c 	lsl.w	lr, r6, ip
 800cf4a:	e79c      	b.n	800ce86 <__ieee754_fmod+0xbe>
 800cf4c:	4d26      	ldr	r5, [pc, #152]	; (800cfe8 <__ieee754_fmod+0x220>)
 800cf4e:	f04f 0e00 	mov.w	lr, #0
 800cf52:	1aad      	subs	r5, r5, r2
 800cf54:	fa06 f505 	lsl.w	r5, r6, r5
 800cf58:	e795      	b.n	800ce86 <__ieee754_fmod+0xbe>
 800cf5a:	4571      	cmp	r1, lr
 800cf5c:	bf38      	it	cc
 800cf5e:	f106 36ff 	addcc.w	r6, r6, #4294967295	; 0xffffffff
 800cf62:	2e00      	cmp	r6, #0
 800cf64:	da05      	bge.n	800cf72 <__ieee754_fmod+0x1aa>
 800cf66:	0fce      	lsrs	r6, r1, #31
 800cf68:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800cf6c:	0049      	lsls	r1, r1, #1
 800cf6e:	3801      	subs	r0, #1
 800cf70:	e78a      	b.n	800ce88 <__ieee754_fmod+0xc0>
 800cf72:	ea56 0307 	orrs.w	r3, r6, r7
 800cf76:	f43f af5a 	beq.w	800ce2e <__ieee754_fmod+0x66>
 800cf7a:	0ffb      	lsrs	r3, r7, #31
 800cf7c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 800cf80:	0079      	lsls	r1, r7, #1
 800cf82:	e7f4      	b.n	800cf6e <__ieee754_fmod+0x1a6>
 800cf84:	0fc8      	lsrs	r0, r1, #31
 800cf86:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800cf8a:	0049      	lsls	r1, r1, #1
 800cf8c:	3a01      	subs	r2, #1
 800cf8e:	e78b      	b.n	800cea8 <__ieee754_fmod+0xe0>
 800cf90:	1a80      	subs	r0, r0, r2
 800cf92:	2814      	cmp	r0, #20
 800cf94:	dc0a      	bgt.n	800cfac <__ieee754_fmod+0x1e4>
 800cf96:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cf9a:	fa03 f202 	lsl.w	r2, r3, r2
 800cf9e:	40c1      	lsrs	r1, r0
 800cfa0:	430a      	orrs	r2, r1
 800cfa2:	4103      	asrs	r3, r0
 800cfa4:	4610      	mov	r0, r2
 800cfa6:	ea43 0104 	orr.w	r1, r3, r4
 800cfaa:	e733      	b.n	800ce14 <__ieee754_fmod+0x4c>
 800cfac:	281f      	cmp	r0, #31
 800cfae:	dc07      	bgt.n	800cfc0 <__ieee754_fmod+0x1f8>
 800cfb0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800cfb4:	40c1      	lsrs	r1, r0
 800cfb6:	fa03 f202 	lsl.w	r2, r3, r2
 800cfba:	430a      	orrs	r2, r1
 800cfbc:	4623      	mov	r3, r4
 800cfbe:	e7f1      	b.n	800cfa4 <__ieee754_fmod+0x1dc>
 800cfc0:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800cfc4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cfc8:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800cfcc:	32e2      	adds	r2, #226	; 0xe2
 800cfce:	fa43 f202 	asr.w	r2, r3, r2
 800cfd2:	e7f3      	b.n	800cfbc <__ieee754_fmod+0x1f4>
 800cfd4:	7fefffff 	.word	0x7fefffff
 800cfd8:	7ff00000 	.word	0x7ff00000
 800cfdc:	0800df48 	.word	0x0800df48
 800cfe0:	fffffbed 	.word	0xfffffbed
 800cfe4:	fffffc02 	.word	0xfffffc02
 800cfe8:	fffffbe2 	.word	0xfffffbe2
 800cfec:	00000000 	.word	0x00000000

0800cff0 <__ieee754_rem_pio2>:
 800cff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff4:	4614      	mov	r4, r2
 800cff6:	4ac2      	ldr	r2, [pc, #776]	; (800d300 <__ieee754_rem_pio2+0x310>)
 800cff8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800cffc:	b08d      	sub	sp, #52	; 0x34
 800cffe:	4592      	cmp	sl, r2
 800d000:	9104      	str	r1, [sp, #16]
 800d002:	dc07      	bgt.n	800d014 <__ieee754_rem_pio2+0x24>
 800d004:	2200      	movs	r2, #0
 800d006:	2300      	movs	r3, #0
 800d008:	e9c4 0100 	strd	r0, r1, [r4]
 800d00c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d010:	2500      	movs	r5, #0
 800d012:	e024      	b.n	800d05e <__ieee754_rem_pio2+0x6e>
 800d014:	4abb      	ldr	r2, [pc, #748]	; (800d304 <__ieee754_rem_pio2+0x314>)
 800d016:	4592      	cmp	sl, r2
 800d018:	dc72      	bgt.n	800d100 <__ieee754_rem_pio2+0x110>
 800d01a:	9b04      	ldr	r3, [sp, #16]
 800d01c:	4dba      	ldr	r5, [pc, #744]	; (800d308 <__ieee754_rem_pio2+0x318>)
 800d01e:	2b00      	cmp	r3, #0
 800d020:	a3a9      	add	r3, pc, #676	; (adr r3, 800d2c8 <__ieee754_rem_pio2+0x2d8>)
 800d022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d026:	dd36      	ble.n	800d096 <__ieee754_rem_pio2+0xa6>
 800d028:	f7f3 f89e 	bl	8000168 <__aeabi_dsub>
 800d02c:	45aa      	cmp	sl, r5
 800d02e:	4606      	mov	r6, r0
 800d030:	460f      	mov	r7, r1
 800d032:	d018      	beq.n	800d066 <__ieee754_rem_pio2+0x76>
 800d034:	a3a6      	add	r3, pc, #664	; (adr r3, 800d2d0 <__ieee754_rem_pio2+0x2e0>)
 800d036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d03a:	f7f3 f895 	bl	8000168 <__aeabi_dsub>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	4630      	mov	r0, r6
 800d044:	e9c4 2300 	strd	r2, r3, [r4]
 800d048:	4639      	mov	r1, r7
 800d04a:	f7f3 f88d 	bl	8000168 <__aeabi_dsub>
 800d04e:	a3a0      	add	r3, pc, #640	; (adr r3, 800d2d0 <__ieee754_rem_pio2+0x2e0>)
 800d050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d054:	f7f3 f888 	bl	8000168 <__aeabi_dsub>
 800d058:	2501      	movs	r5, #1
 800d05a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d05e:	4628      	mov	r0, r5
 800d060:	b00d      	add	sp, #52	; 0x34
 800d062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d066:	a39c      	add	r3, pc, #624	; (adr r3, 800d2d8 <__ieee754_rem_pio2+0x2e8>)
 800d068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06c:	f7f3 f87c 	bl	8000168 <__aeabi_dsub>
 800d070:	a39b      	add	r3, pc, #620	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x2f0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	4606      	mov	r6, r0
 800d078:	460f      	mov	r7, r1
 800d07a:	f7f3 f875 	bl	8000168 <__aeabi_dsub>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	4630      	mov	r0, r6
 800d084:	e9c4 2300 	strd	r2, r3, [r4]
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 f86d 	bl	8000168 <__aeabi_dsub>
 800d08e:	a394      	add	r3, pc, #592	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x2f0>)
 800d090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d094:	e7de      	b.n	800d054 <__ieee754_rem_pio2+0x64>
 800d096:	f7f3 f869 	bl	800016c <__adddf3>
 800d09a:	45aa      	cmp	sl, r5
 800d09c:	4606      	mov	r6, r0
 800d09e:	460f      	mov	r7, r1
 800d0a0:	d016      	beq.n	800d0d0 <__ieee754_rem_pio2+0xe0>
 800d0a2:	a38b      	add	r3, pc, #556	; (adr r3, 800d2d0 <__ieee754_rem_pio2+0x2e0>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 f860 	bl	800016c <__adddf3>
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	e9c4 2300 	strd	r2, r3, [r4]
 800d0b6:	4639      	mov	r1, r7
 800d0b8:	f7f3 f856 	bl	8000168 <__aeabi_dsub>
 800d0bc:	a384      	add	r3, pc, #528	; (adr r3, 800d2d0 <__ieee754_rem_pio2+0x2e0>)
 800d0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c2:	f7f3 f853 	bl	800016c <__adddf3>
 800d0c6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d0ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d0ce:	e7c6      	b.n	800d05e <__ieee754_rem_pio2+0x6e>
 800d0d0:	a381      	add	r3, pc, #516	; (adr r3, 800d2d8 <__ieee754_rem_pio2+0x2e8>)
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	f7f3 f849 	bl	800016c <__adddf3>
 800d0da:	a381      	add	r3, pc, #516	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x2f0>)
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	4606      	mov	r6, r0
 800d0e2:	460f      	mov	r7, r1
 800d0e4:	f7f3 f842 	bl	800016c <__adddf3>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
 800d0ec:	4630      	mov	r0, r6
 800d0ee:	e9c4 2300 	strd	r2, r3, [r4]
 800d0f2:	4639      	mov	r1, r7
 800d0f4:	f7f3 f838 	bl	8000168 <__aeabi_dsub>
 800d0f8:	a379      	add	r3, pc, #484	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x2f0>)
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	e7e0      	b.n	800d0c2 <__ieee754_rem_pio2+0xd2>
 800d100:	4a82      	ldr	r2, [pc, #520]	; (800d30c <__ieee754_rem_pio2+0x31c>)
 800d102:	4592      	cmp	sl, r2
 800d104:	f300 80d4 	bgt.w	800d2b0 <__ieee754_rem_pio2+0x2c0>
 800d108:	f000 fe1c 	bl	800dd44 <fabs>
 800d10c:	a376      	add	r3, pc, #472	; (adr r3, 800d2e8 <__ieee754_rem_pio2+0x2f8>)
 800d10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d112:	4606      	mov	r6, r0
 800d114:	460f      	mov	r7, r1
 800d116:	f7f3 f9df 	bl	80004d8 <__aeabi_dmul>
 800d11a:	2200      	movs	r2, #0
 800d11c:	4b7c      	ldr	r3, [pc, #496]	; (800d310 <__ieee754_rem_pio2+0x320>)
 800d11e:	f7f3 f825 	bl	800016c <__adddf3>
 800d122:	f7f3 fc89 	bl	8000a38 <__aeabi_d2iz>
 800d126:	4605      	mov	r5, r0
 800d128:	f7f3 f96c 	bl	8000404 <__aeabi_i2d>
 800d12c:	4602      	mov	r2, r0
 800d12e:	460b      	mov	r3, r1
 800d130:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d134:	a364      	add	r3, pc, #400	; (adr r3, 800d2c8 <__ieee754_rem_pio2+0x2d8>)
 800d136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d13a:	f7f3 f9cd 	bl	80004d8 <__aeabi_dmul>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4630      	mov	r0, r6
 800d144:	4639      	mov	r1, r7
 800d146:	f7f3 f80f 	bl	8000168 <__aeabi_dsub>
 800d14a:	a361      	add	r3, pc, #388	; (adr r3, 800d2d0 <__ieee754_rem_pio2+0x2e0>)
 800d14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d150:	4680      	mov	r8, r0
 800d152:	4689      	mov	r9, r1
 800d154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d158:	f7f3 f9be 	bl	80004d8 <__aeabi_dmul>
 800d15c:	2d1f      	cmp	r5, #31
 800d15e:	4606      	mov	r6, r0
 800d160:	460f      	mov	r7, r1
 800d162:	dc0e      	bgt.n	800d182 <__ieee754_rem_pio2+0x192>
 800d164:	4b6b      	ldr	r3, [pc, #428]	; (800d314 <__ieee754_rem_pio2+0x324>)
 800d166:	1e6a      	subs	r2, r5, #1
 800d168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d16c:	4553      	cmp	r3, sl
 800d16e:	d008      	beq.n	800d182 <__ieee754_rem_pio2+0x192>
 800d170:	4632      	mov	r2, r6
 800d172:	463b      	mov	r3, r7
 800d174:	4640      	mov	r0, r8
 800d176:	4649      	mov	r1, r9
 800d178:	f7f2 fff6 	bl	8000168 <__aeabi_dsub>
 800d17c:	e9c4 0100 	strd	r0, r1, [r4]
 800d180:	e012      	b.n	800d1a8 <__ieee754_rem_pio2+0x1b8>
 800d182:	463b      	mov	r3, r7
 800d184:	4632      	mov	r2, r6
 800d186:	4640      	mov	r0, r8
 800d188:	4649      	mov	r1, r9
 800d18a:	f7f2 ffed 	bl	8000168 <__aeabi_dsub>
 800d18e:	ea4f 532a 	mov.w	r3, sl, asr #20
 800d192:	9305      	str	r3, [sp, #20]
 800d194:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d198:	ebc3 531a 	rsb	r3, r3, sl, lsr #20
 800d19c:	2b10      	cmp	r3, #16
 800d19e:	dc1f      	bgt.n	800d1e0 <__ieee754_rem_pio2+0x1f0>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	e9c4 2300 	strd	r2, r3, [r4]
 800d1a8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800d1ac:	4640      	mov	r0, r8
 800d1ae:	4653      	mov	r3, sl
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	f7f2 ffd9 	bl	8000168 <__aeabi_dsub>
 800d1b6:	4632      	mov	r2, r6
 800d1b8:	463b      	mov	r3, r7
 800d1ba:	f7f2 ffd5 	bl	8000168 <__aeabi_dsub>
 800d1be:	460b      	mov	r3, r1
 800d1c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d1c4:	9904      	ldr	r1, [sp, #16]
 800d1c6:	4602      	mov	r2, r0
 800d1c8:	2900      	cmp	r1, #0
 800d1ca:	f6bf af48 	bge.w	800d05e <__ieee754_rem_pio2+0x6e>
 800d1ce:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800d1d2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d1d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1da:	60e3      	str	r3, [r4, #12]
 800d1dc:	426d      	negs	r5, r5
 800d1de:	e73e      	b.n	800d05e <__ieee754_rem_pio2+0x6e>
 800d1e0:	a33d      	add	r3, pc, #244	; (adr r3, 800d2d8 <__ieee754_rem_pio2+0x2e8>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ea:	f7f3 f975 	bl	80004d8 <__aeabi_dmul>
 800d1ee:	4606      	mov	r6, r0
 800d1f0:	460f      	mov	r7, r1
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	460b      	mov	r3, r1
 800d1f6:	4640      	mov	r0, r8
 800d1f8:	4649      	mov	r1, r9
 800d1fa:	f7f2 ffb5 	bl	8000168 <__aeabi_dsub>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	4682      	mov	sl, r0
 800d204:	468b      	mov	fp, r1
 800d206:	4640      	mov	r0, r8
 800d208:	4649      	mov	r1, r9
 800d20a:	f7f2 ffad 	bl	8000168 <__aeabi_dsub>
 800d20e:	4632      	mov	r2, r6
 800d210:	463b      	mov	r3, r7
 800d212:	f7f2 ffa9 	bl	8000168 <__aeabi_dsub>
 800d216:	a332      	add	r3, pc, #200	; (adr r3, 800d2e0 <__ieee754_rem_pio2+0x2f0>)
 800d218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d21c:	4606      	mov	r6, r0
 800d21e:	460f      	mov	r7, r1
 800d220:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d224:	f7f3 f958 	bl	80004d8 <__aeabi_dmul>
 800d228:	4632      	mov	r2, r6
 800d22a:	463b      	mov	r3, r7
 800d22c:	f7f2 ff9c 	bl	8000168 <__aeabi_dsub>
 800d230:	4602      	mov	r2, r0
 800d232:	460b      	mov	r3, r1
 800d234:	4606      	mov	r6, r0
 800d236:	460f      	mov	r7, r1
 800d238:	4650      	mov	r0, sl
 800d23a:	4659      	mov	r1, fp
 800d23c:	f7f2 ff94 	bl	8000168 <__aeabi_dsub>
 800d240:	9a05      	ldr	r2, [sp, #20]
 800d242:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	2b31      	cmp	r3, #49	; 0x31
 800d24a:	dc06      	bgt.n	800d25a <__ieee754_rem_pio2+0x26a>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	46d0      	mov	r8, sl
 800d252:	46d9      	mov	r9, fp
 800d254:	e9c4 2300 	strd	r2, r3, [r4]
 800d258:	e7a6      	b.n	800d1a8 <__ieee754_rem_pio2+0x1b8>
 800d25a:	a325      	add	r3, pc, #148	; (adr r3, 800d2f0 <__ieee754_rem_pio2+0x300>)
 800d25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d264:	f7f3 f938 	bl	80004d8 <__aeabi_dmul>
 800d268:	4606      	mov	r6, r0
 800d26a:	460f      	mov	r7, r1
 800d26c:	4602      	mov	r2, r0
 800d26e:	460b      	mov	r3, r1
 800d270:	4650      	mov	r0, sl
 800d272:	4659      	mov	r1, fp
 800d274:	f7f2 ff78 	bl	8000168 <__aeabi_dsub>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4680      	mov	r8, r0
 800d27e:	4689      	mov	r9, r1
 800d280:	4650      	mov	r0, sl
 800d282:	4659      	mov	r1, fp
 800d284:	f7f2 ff70 	bl	8000168 <__aeabi_dsub>
 800d288:	4632      	mov	r2, r6
 800d28a:	463b      	mov	r3, r7
 800d28c:	f7f2 ff6c 	bl	8000168 <__aeabi_dsub>
 800d290:	a319      	add	r3, pc, #100	; (adr r3, 800d2f8 <__ieee754_rem_pio2+0x308>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	4606      	mov	r6, r0
 800d298:	460f      	mov	r7, r1
 800d29a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d29e:	f7f3 f91b 	bl	80004d8 <__aeabi_dmul>
 800d2a2:	4632      	mov	r2, r6
 800d2a4:	463b      	mov	r3, r7
 800d2a6:	f7f2 ff5f 	bl	8000168 <__aeabi_dsub>
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	460f      	mov	r7, r1
 800d2ae:	e75f      	b.n	800d170 <__ieee754_rem_pio2+0x180>
 800d2b0:	4a19      	ldr	r2, [pc, #100]	; (800d318 <__ieee754_rem_pio2+0x328>)
 800d2b2:	4592      	cmp	sl, r2
 800d2b4:	dd32      	ble.n	800d31c <__ieee754_rem_pio2+0x32c>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	f7f2 ff55 	bl	8000168 <__aeabi_dsub>
 800d2be:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d2c2:	e9c4 0100 	strd	r0, r1, [r4]
 800d2c6:	e6a3      	b.n	800d010 <__ieee754_rem_pio2+0x20>
 800d2c8:	54400000 	.word	0x54400000
 800d2cc:	3ff921fb 	.word	0x3ff921fb
 800d2d0:	1a626331 	.word	0x1a626331
 800d2d4:	3dd0b461 	.word	0x3dd0b461
 800d2d8:	1a600000 	.word	0x1a600000
 800d2dc:	3dd0b461 	.word	0x3dd0b461
 800d2e0:	2e037073 	.word	0x2e037073
 800d2e4:	3ba3198a 	.word	0x3ba3198a
 800d2e8:	6dc9c883 	.word	0x6dc9c883
 800d2ec:	3fe45f30 	.word	0x3fe45f30
 800d2f0:	2e000000 	.word	0x2e000000
 800d2f4:	3ba3198a 	.word	0x3ba3198a
 800d2f8:	252049c1 	.word	0x252049c1
 800d2fc:	397b839a 	.word	0x397b839a
 800d300:	3fe921fb 	.word	0x3fe921fb
 800d304:	4002d97b 	.word	0x4002d97b
 800d308:	3ff921fb 	.word	0x3ff921fb
 800d30c:	413921fb 	.word	0x413921fb
 800d310:	3fe00000 	.word	0x3fe00000
 800d314:	0800df58 	.word	0x0800df58
 800d318:	7fefffff 	.word	0x7fefffff
 800d31c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800d320:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800d324:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800d328:	460f      	mov	r7, r1
 800d32a:	4606      	mov	r6, r0
 800d32c:	f7f3 fb84 	bl	8000a38 <__aeabi_d2iz>
 800d330:	f7f3 f868 	bl	8000404 <__aeabi_i2d>
 800d334:	4602      	mov	r2, r0
 800d336:	460b      	mov	r3, r1
 800d338:	4630      	mov	r0, r6
 800d33a:	4639      	mov	r1, r7
 800d33c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d340:	f7f2 ff12 	bl	8000168 <__aeabi_dsub>
 800d344:	2200      	movs	r2, #0
 800d346:	4b22      	ldr	r3, [pc, #136]	; (800d3d0 <__ieee754_rem_pio2+0x3e0>)
 800d348:	f7f3 f8c6 	bl	80004d8 <__aeabi_dmul>
 800d34c:	460f      	mov	r7, r1
 800d34e:	4606      	mov	r6, r0
 800d350:	f7f3 fb72 	bl	8000a38 <__aeabi_d2iz>
 800d354:	f7f3 f856 	bl	8000404 <__aeabi_i2d>
 800d358:	4602      	mov	r2, r0
 800d35a:	460b      	mov	r3, r1
 800d35c:	4630      	mov	r0, r6
 800d35e:	4639      	mov	r1, r7
 800d360:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d364:	f7f2 ff00 	bl	8000168 <__aeabi_dsub>
 800d368:	2200      	movs	r2, #0
 800d36a:	4b19      	ldr	r3, [pc, #100]	; (800d3d0 <__ieee754_rem_pio2+0x3e0>)
 800d36c:	f7f3 f8b4 	bl	80004d8 <__aeabi_dmul>
 800d370:	f04f 0803 	mov.w	r8, #3
 800d374:	2600      	movs	r6, #0
 800d376:	2700      	movs	r7, #0
 800d378:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d37c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800d380:	4632      	mov	r2, r6
 800d382:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d386:	463b      	mov	r3, r7
 800d388:	46c2      	mov	sl, r8
 800d38a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d38e:	f7f3 fb0b 	bl	80009a8 <__aeabi_dcmpeq>
 800d392:	2800      	cmp	r0, #0
 800d394:	d1f4      	bne.n	800d380 <__ieee754_rem_pio2+0x390>
 800d396:	4b0f      	ldr	r3, [pc, #60]	; (800d3d4 <__ieee754_rem_pio2+0x3e4>)
 800d398:	462a      	mov	r2, r5
 800d39a:	9301      	str	r3, [sp, #4]
 800d39c:	2302      	movs	r3, #2
 800d39e:	4621      	mov	r1, r4
 800d3a0:	9300      	str	r3, [sp, #0]
 800d3a2:	a806      	add	r0, sp, #24
 800d3a4:	4653      	mov	r3, sl
 800d3a6:	f000 f817 	bl	800d3d8 <__kernel_rem_pio2>
 800d3aa:	9b04      	ldr	r3, [sp, #16]
 800d3ac:	4605      	mov	r5, r0
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	f6bf ae55 	bge.w	800d05e <__ieee754_rem_pio2+0x6e>
 800d3b4:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d3b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3bc:	e9c4 2300 	strd	r2, r3, [r4]
 800d3c0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d3c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3c8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d3cc:	e706      	b.n	800d1dc <__ieee754_rem_pio2+0x1ec>
 800d3ce:	bf00      	nop
 800d3d0:	41700000 	.word	0x41700000
 800d3d4:	0800dfd8 	.word	0x0800dfd8

0800d3d8 <__kernel_rem_pio2>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d3e0:	9308      	str	r3, [sp, #32]
 800d3e2:	9106      	str	r1, [sp, #24]
 800d3e4:	4bb6      	ldr	r3, [pc, #728]	; (800d6c0 <__kernel_rem_pio2+0x2e8>)
 800d3e6:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d3e8:	f112 0f14 	cmn.w	r2, #20
 800d3ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d3f0:	bfa8      	it	ge
 800d3f2:	1ed4      	subge	r4, r2, #3
 800d3f4:	9302      	str	r3, [sp, #8]
 800d3f6:	9b08      	ldr	r3, [sp, #32]
 800d3f8:	bfb8      	it	lt
 800d3fa:	2400      	movlt	r4, #0
 800d3fc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d400:	9307      	str	r3, [sp, #28]
 800d402:	bfa4      	itt	ge
 800d404:	2318      	movge	r3, #24
 800d406:	fb94 f4f3 	sdivge	r4, r4, r3
 800d40a:	f06f 0317 	mvn.w	r3, #23
 800d40e:	fb04 3303 	mla	r3, r4, r3, r3
 800d412:	eb03 0b02 	add.w	fp, r3, r2
 800d416:	9a07      	ldr	r2, [sp, #28]
 800d418:	9b02      	ldr	r3, [sp, #8]
 800d41a:	1aa7      	subs	r7, r4, r2
 800d41c:	eb03 0802 	add.w	r8, r3, r2
 800d420:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d422:	2500      	movs	r5, #0
 800d424:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d428:	2200      	movs	r2, #0
 800d42a:	2300      	movs	r3, #0
 800d42c:	9009      	str	r0, [sp, #36]	; 0x24
 800d42e:	ae20      	add	r6, sp, #128	; 0x80
 800d430:	4545      	cmp	r5, r8
 800d432:	dd14      	ble.n	800d45e <__kernel_rem_pio2+0x86>
 800d434:	f04f 0800 	mov.w	r8, #0
 800d438:	9a08      	ldr	r2, [sp, #32]
 800d43a:	ab20      	add	r3, sp, #128	; 0x80
 800d43c:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800d440:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800d444:	9b02      	ldr	r3, [sp, #8]
 800d446:	4598      	cmp	r8, r3
 800d448:	dc35      	bgt.n	800d4b6 <__kernel_rem_pio2+0xde>
 800d44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d44c:	2200      	movs	r2, #0
 800d44e:	f1a3 0908 	sub.w	r9, r3, #8
 800d452:	2300      	movs	r3, #0
 800d454:	462f      	mov	r7, r5
 800d456:	2600      	movs	r6, #0
 800d458:	e9cd 2300 	strd	r2, r3, [sp]
 800d45c:	e01f      	b.n	800d49e <__kernel_rem_pio2+0xc6>
 800d45e:	42ef      	cmn	r7, r5
 800d460:	d40b      	bmi.n	800d47a <__kernel_rem_pio2+0xa2>
 800d462:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d466:	e9cd 2300 	strd	r2, r3, [sp]
 800d46a:	f7f2 ffcb 	bl	8000404 <__aeabi_i2d>
 800d46e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d472:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d476:	3501      	adds	r5, #1
 800d478:	e7da      	b.n	800d430 <__kernel_rem_pio2+0x58>
 800d47a:	4610      	mov	r0, r2
 800d47c:	4619      	mov	r1, r3
 800d47e:	e7f8      	b.n	800d472 <__kernel_rem_pio2+0x9a>
 800d480:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d484:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800d488:	f7f3 f826 	bl	80004d8 <__aeabi_dmul>
 800d48c:	4602      	mov	r2, r0
 800d48e:	460b      	mov	r3, r1
 800d490:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d494:	f7f2 fe6a 	bl	800016c <__adddf3>
 800d498:	e9cd 0100 	strd	r0, r1, [sp]
 800d49c:	3601      	adds	r6, #1
 800d49e:	9b07      	ldr	r3, [sp, #28]
 800d4a0:	3f08      	subs	r7, #8
 800d4a2:	429e      	cmp	r6, r3
 800d4a4:	ddec      	ble.n	800d480 <__kernel_rem_pio2+0xa8>
 800d4a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4aa:	f108 0801 	add.w	r8, r8, #1
 800d4ae:	e8ea 2302 	strd	r2, r3, [sl], #8
 800d4b2:	3508      	adds	r5, #8
 800d4b4:	e7c6      	b.n	800d444 <__kernel_rem_pio2+0x6c>
 800d4b6:	9b02      	ldr	r3, [sp, #8]
 800d4b8:	aa0c      	add	r2, sp, #48	; 0x30
 800d4ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d4be:	930b      	str	r3, [sp, #44]	; 0x2c
 800d4c0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d4c2:	9e02      	ldr	r6, [sp, #8]
 800d4c4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d4c8:	930a      	str	r3, [sp, #40]	; 0x28
 800d4ca:	ab98      	add	r3, sp, #608	; 0x260
 800d4cc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d4d0:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800d4d4:	ab70      	add	r3, sp, #448	; 0x1c0
 800d4d6:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800d4da:	46d0      	mov	r8, sl
 800d4dc:	46b1      	mov	r9, r6
 800d4de:	af0c      	add	r7, sp, #48	; 0x30
 800d4e0:	9700      	str	r7, [sp, #0]
 800d4e2:	f1b9 0f00 	cmp.w	r9, #0
 800d4e6:	f1a8 0808 	sub.w	r8, r8, #8
 800d4ea:	dc70      	bgt.n	800d5ce <__kernel_rem_pio2+0x1f6>
 800d4ec:	465a      	mov	r2, fp
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	4629      	mov	r1, r5
 800d4f2:	f000 fc2d 	bl	800dd50 <scalbn>
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	460d      	mov	r5, r1
 800d500:	f7f2 ffea 	bl	80004d8 <__aeabi_dmul>
 800d504:	f7ff fbe0 	bl	800ccc8 <floor>
 800d508:	2200      	movs	r2, #0
 800d50a:	4b6e      	ldr	r3, [pc, #440]	; (800d6c4 <__kernel_rem_pio2+0x2ec>)
 800d50c:	f7f2 ffe4 	bl	80004d8 <__aeabi_dmul>
 800d510:	4602      	mov	r2, r0
 800d512:	460b      	mov	r3, r1
 800d514:	4620      	mov	r0, r4
 800d516:	4629      	mov	r1, r5
 800d518:	f7f2 fe26 	bl	8000168 <__aeabi_dsub>
 800d51c:	460d      	mov	r5, r1
 800d51e:	4604      	mov	r4, r0
 800d520:	f7f3 fa8a 	bl	8000a38 <__aeabi_d2iz>
 800d524:	9004      	str	r0, [sp, #16]
 800d526:	f7f2 ff6d 	bl	8000404 <__aeabi_i2d>
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	4620      	mov	r0, r4
 800d530:	4629      	mov	r1, r5
 800d532:	f7f2 fe19 	bl	8000168 <__aeabi_dsub>
 800d536:	f1bb 0f00 	cmp.w	fp, #0
 800d53a:	4680      	mov	r8, r0
 800d53c:	4689      	mov	r9, r1
 800d53e:	dd6f      	ble.n	800d620 <__kernel_rem_pio2+0x248>
 800d540:	1e71      	subs	r1, r6, #1
 800d542:	ab0c      	add	r3, sp, #48	; 0x30
 800d544:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d548:	9c04      	ldr	r4, [sp, #16]
 800d54a:	f1cb 0018 	rsb	r0, fp, #24
 800d54e:	fa43 f200 	asr.w	r2, r3, r0
 800d552:	4414      	add	r4, r2
 800d554:	4082      	lsls	r2, r0
 800d556:	1a9b      	subs	r3, r3, r2
 800d558:	aa0c      	add	r2, sp, #48	; 0x30
 800d55a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d55e:	f1cb 0217 	rsb	r2, fp, #23
 800d562:	9404      	str	r4, [sp, #16]
 800d564:	4113      	asrs	r3, r2
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	9b00      	ldr	r3, [sp, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	dd66      	ble.n	800d63c <__kernel_rem_pio2+0x264>
 800d56e:	2200      	movs	r2, #0
 800d570:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d574:	4614      	mov	r4, r2
 800d576:	9b04      	ldr	r3, [sp, #16]
 800d578:	3301      	adds	r3, #1
 800d57a:	9304      	str	r3, [sp, #16]
 800d57c:	4296      	cmp	r6, r2
 800d57e:	f300 80ad 	bgt.w	800d6dc <__kernel_rem_pio2+0x304>
 800d582:	f1bb 0f00 	cmp.w	fp, #0
 800d586:	dd07      	ble.n	800d598 <__kernel_rem_pio2+0x1c0>
 800d588:	f1bb 0f01 	cmp.w	fp, #1
 800d58c:	f000 80b5 	beq.w	800d6fa <__kernel_rem_pio2+0x322>
 800d590:	f1bb 0f02 	cmp.w	fp, #2
 800d594:	f000 80bb 	beq.w	800d70e <__kernel_rem_pio2+0x336>
 800d598:	9b00      	ldr	r3, [sp, #0]
 800d59a:	2b02      	cmp	r3, #2
 800d59c:	d14e      	bne.n	800d63c <__kernel_rem_pio2+0x264>
 800d59e:	4642      	mov	r2, r8
 800d5a0:	464b      	mov	r3, r9
 800d5a2:	2000      	movs	r0, #0
 800d5a4:	4948      	ldr	r1, [pc, #288]	; (800d6c8 <__kernel_rem_pio2+0x2f0>)
 800d5a6:	f7f2 fddf 	bl	8000168 <__aeabi_dsub>
 800d5aa:	4680      	mov	r8, r0
 800d5ac:	4689      	mov	r9, r1
 800d5ae:	2c00      	cmp	r4, #0
 800d5b0:	d044      	beq.n	800d63c <__kernel_rem_pio2+0x264>
 800d5b2:	465a      	mov	r2, fp
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	4944      	ldr	r1, [pc, #272]	; (800d6c8 <__kernel_rem_pio2+0x2f0>)
 800d5b8:	f000 fbca 	bl	800dd50 <scalbn>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	4640      	mov	r0, r8
 800d5c2:	4649      	mov	r1, r9
 800d5c4:	f7f2 fdd0 	bl	8000168 <__aeabi_dsub>
 800d5c8:	4680      	mov	r8, r0
 800d5ca:	4689      	mov	r9, r1
 800d5cc:	e036      	b.n	800d63c <__kernel_rem_pio2+0x264>
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4b3e      	ldr	r3, [pc, #248]	; (800d6cc <__kernel_rem_pio2+0x2f4>)
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	4629      	mov	r1, r5
 800d5d6:	f7f2 ff7f 	bl	80004d8 <__aeabi_dmul>
 800d5da:	f7f3 fa2d 	bl	8000a38 <__aeabi_d2iz>
 800d5de:	f7f2 ff11 	bl	8000404 <__aeabi_i2d>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	460b      	mov	r3, r1
 800d5e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4b38      	ldr	r3, [pc, #224]	; (800d6d0 <__kernel_rem_pio2+0x2f8>)
 800d5ee:	f7f2 ff73 	bl	80004d8 <__aeabi_dmul>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f2 fdb5 	bl	8000168 <__aeabi_dsub>
 800d5fe:	f7f3 fa1b 	bl	8000a38 <__aeabi_d2iz>
 800d602:	9b00      	ldr	r3, [sp, #0]
 800d604:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800d608:	f843 0b04 	str.w	r0, [r3], #4
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d612:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d616:	f7f2 fda9 	bl	800016c <__adddf3>
 800d61a:	4604      	mov	r4, r0
 800d61c:	460d      	mov	r5, r1
 800d61e:	e760      	b.n	800d4e2 <__kernel_rem_pio2+0x10a>
 800d620:	d105      	bne.n	800d62e <__kernel_rem_pio2+0x256>
 800d622:	1e73      	subs	r3, r6, #1
 800d624:	aa0c      	add	r2, sp, #48	; 0x30
 800d626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d62a:	15db      	asrs	r3, r3, #23
 800d62c:	e79b      	b.n	800d566 <__kernel_rem_pio2+0x18e>
 800d62e:	2200      	movs	r2, #0
 800d630:	4b28      	ldr	r3, [pc, #160]	; (800d6d4 <__kernel_rem_pio2+0x2fc>)
 800d632:	f7f3 f9d7 	bl	80009e4 <__aeabi_dcmpge>
 800d636:	2800      	cmp	r0, #0
 800d638:	d13e      	bne.n	800d6b8 <__kernel_rem_pio2+0x2e0>
 800d63a:	9000      	str	r0, [sp, #0]
 800d63c:	2200      	movs	r2, #0
 800d63e:	2300      	movs	r3, #0
 800d640:	4640      	mov	r0, r8
 800d642:	4649      	mov	r1, r9
 800d644:	f7f3 f9b0 	bl	80009a8 <__aeabi_dcmpeq>
 800d648:	2800      	cmp	r0, #0
 800d64a:	f000 80b2 	beq.w	800d7b2 <__kernel_rem_pio2+0x3da>
 800d64e:	1e74      	subs	r4, r6, #1
 800d650:	4623      	mov	r3, r4
 800d652:	2200      	movs	r2, #0
 800d654:	9902      	ldr	r1, [sp, #8]
 800d656:	428b      	cmp	r3, r1
 800d658:	da60      	bge.n	800d71c <__kernel_rem_pio2+0x344>
 800d65a:	2a00      	cmp	r2, #0
 800d65c:	d075      	beq.n	800d74a <__kernel_rem_pio2+0x372>
 800d65e:	ab0c      	add	r3, sp, #48	; 0x30
 800d660:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d664:	f1ab 0b18 	sub.w	fp, fp, #24
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 80a0 	beq.w	800d7ae <__kernel_rem_pio2+0x3d6>
 800d66e:	465a      	mov	r2, fp
 800d670:	2000      	movs	r0, #0
 800d672:	4915      	ldr	r1, [pc, #84]	; (800d6c8 <__kernel_rem_pio2+0x2f0>)
 800d674:	f000 fb6c 	bl	800dd50 <scalbn>
 800d678:	46a2      	mov	sl, r4
 800d67a:	4606      	mov	r6, r0
 800d67c:	460f      	mov	r7, r1
 800d67e:	f04f 0800 	mov.w	r8, #0
 800d682:	ab70      	add	r3, sp, #448	; 0x1c0
 800d684:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800d6cc <__kernel_rem_pio2+0x2f4>
 800d688:	00e5      	lsls	r5, r4, #3
 800d68a:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800d68e:	f1ba 0f00 	cmp.w	sl, #0
 800d692:	f280 80c4 	bge.w	800d81e <__kernel_rem_pio2+0x446>
 800d696:	4626      	mov	r6, r4
 800d698:	2e00      	cmp	r6, #0
 800d69a:	f2c0 80f6 	blt.w	800d88a <__kernel_rem_pio2+0x4b2>
 800d69e:	4b0e      	ldr	r3, [pc, #56]	; (800d6d8 <__kernel_rem_pio2+0x300>)
 800d6a0:	f04f 0a00 	mov.w	sl, #0
 800d6a4:	9307      	str	r3, [sp, #28]
 800d6a6:	ab70      	add	r3, sp, #448	; 0x1c0
 800d6a8:	f04f 0b00 	mov.w	fp, #0
 800d6ac:	f04f 0800 	mov.w	r8, #0
 800d6b0:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800d6b4:	1ba7      	subs	r7, r4, r6
 800d6b6:	e0dc      	b.n	800d872 <__kernel_rem_pio2+0x49a>
 800d6b8:	2302      	movs	r3, #2
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	e757      	b.n	800d56e <__kernel_rem_pio2+0x196>
 800d6be:	bf00      	nop
 800d6c0:	0800e120 	.word	0x0800e120
 800d6c4:	40200000 	.word	0x40200000
 800d6c8:	3ff00000 	.word	0x3ff00000
 800d6cc:	3e700000 	.word	0x3e700000
 800d6d0:	41700000 	.word	0x41700000
 800d6d4:	3fe00000 	.word	0x3fe00000
 800d6d8:	0800e0e0 	.word	0x0800e0e0
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	b944      	cbnz	r4, 800d6f2 <__kernel_rem_pio2+0x31a>
 800d6e0:	b11b      	cbz	r3, 800d6ea <__kernel_rem_pio2+0x312>
 800d6e2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	461c      	mov	r4, r3
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	3704      	adds	r7, #4
 800d6f0:	e744      	b.n	800d57c <__kernel_rem_pio2+0x1a4>
 800d6f2:	1acb      	subs	r3, r1, r3
 800d6f4:	603b      	str	r3, [r7, #0]
 800d6f6:	4623      	mov	r3, r4
 800d6f8:	e7f7      	b.n	800d6ea <__kernel_rem_pio2+0x312>
 800d6fa:	1e72      	subs	r2, r6, #1
 800d6fc:	ab0c      	add	r3, sp, #48	; 0x30
 800d6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d702:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d706:	a90c      	add	r1, sp, #48	; 0x30
 800d708:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d70c:	e744      	b.n	800d598 <__kernel_rem_pio2+0x1c0>
 800d70e:	1e72      	subs	r2, r6, #1
 800d710:	ab0c      	add	r3, sp, #48	; 0x30
 800d712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d716:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d71a:	e7f4      	b.n	800d706 <__kernel_rem_pio2+0x32e>
 800d71c:	a90c      	add	r1, sp, #48	; 0x30
 800d71e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d722:	3b01      	subs	r3, #1
 800d724:	430a      	orrs	r2, r1
 800d726:	e795      	b.n	800d654 <__kernel_rem_pio2+0x27c>
 800d728:	3301      	adds	r3, #1
 800d72a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d72e:	2900      	cmp	r1, #0
 800d730:	d0fa      	beq.n	800d728 <__kernel_rem_pio2+0x350>
 800d732:	9a08      	ldr	r2, [sp, #32]
 800d734:	a920      	add	r1, sp, #128	; 0x80
 800d736:	18b2      	adds	r2, r6, r2
 800d738:	f106 0801 	add.w	r8, r6, #1
 800d73c:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800d740:	18f4      	adds	r4, r6, r3
 800d742:	4544      	cmp	r4, r8
 800d744:	da04      	bge.n	800d750 <__kernel_rem_pio2+0x378>
 800d746:	4626      	mov	r6, r4
 800d748:	e6bf      	b.n	800d4ca <__kernel_rem_pio2+0xf2>
 800d74a:	2301      	movs	r3, #1
 800d74c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d74e:	e7ec      	b.n	800d72a <__kernel_rem_pio2+0x352>
 800d750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d752:	f04f 0900 	mov.w	r9, #0
 800d756:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d75a:	f7f2 fe53 	bl	8000404 <__aeabi_i2d>
 800d75e:	2600      	movs	r6, #0
 800d760:	2700      	movs	r7, #0
 800d762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d764:	e9c5 0100 	strd	r0, r1, [r5]
 800d768:	3b08      	subs	r3, #8
 800d76a:	9300      	str	r3, [sp, #0]
 800d76c:	9504      	str	r5, [sp, #16]
 800d76e:	9b07      	ldr	r3, [sp, #28]
 800d770:	4599      	cmp	r9, r3
 800d772:	dd05      	ble.n	800d780 <__kernel_rem_pio2+0x3a8>
 800d774:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800d778:	f108 0801 	add.w	r8, r8, #1
 800d77c:	3508      	adds	r5, #8
 800d77e:	e7e0      	b.n	800d742 <__kernel_rem_pio2+0x36a>
 800d780:	f8dd c010 	ldr.w	ip, [sp, #16]
 800d784:	9900      	ldr	r1, [sp, #0]
 800d786:	f109 0901 	add.w	r9, r9, #1
 800d78a:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800d78e:	9100      	str	r1, [sp, #0]
 800d790:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800d794:	f8cd c010 	str.w	ip, [sp, #16]
 800d798:	f7f2 fe9e 	bl	80004d8 <__aeabi_dmul>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	4639      	mov	r1, r7
 800d7a4:	f7f2 fce2 	bl	800016c <__adddf3>
 800d7a8:	4606      	mov	r6, r0
 800d7aa:	460f      	mov	r7, r1
 800d7ac:	e7df      	b.n	800d76e <__kernel_rem_pio2+0x396>
 800d7ae:	3c01      	subs	r4, #1
 800d7b0:	e755      	b.n	800d65e <__kernel_rem_pio2+0x286>
 800d7b2:	f1cb 0200 	rsb	r2, fp, #0
 800d7b6:	4640      	mov	r0, r8
 800d7b8:	4649      	mov	r1, r9
 800d7ba:	f000 fac9 	bl	800dd50 <scalbn>
 800d7be:	2200      	movs	r2, #0
 800d7c0:	4ba3      	ldr	r3, [pc, #652]	; (800da50 <__kernel_rem_pio2+0x678>)
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	460d      	mov	r5, r1
 800d7c6:	f7f3 f90d 	bl	80009e4 <__aeabi_dcmpge>
 800d7ca:	b1f8      	cbz	r0, 800d80c <__kernel_rem_pio2+0x434>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4ba1      	ldr	r3, [pc, #644]	; (800da54 <__kernel_rem_pio2+0x67c>)
 800d7d0:	4620      	mov	r0, r4
 800d7d2:	4629      	mov	r1, r5
 800d7d4:	f7f2 fe80 	bl	80004d8 <__aeabi_dmul>
 800d7d8:	f7f3 f92e 	bl	8000a38 <__aeabi_d2iz>
 800d7dc:	4607      	mov	r7, r0
 800d7de:	f7f2 fe11 	bl	8000404 <__aeabi_i2d>
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	4b9a      	ldr	r3, [pc, #616]	; (800da50 <__kernel_rem_pio2+0x678>)
 800d7e6:	f7f2 fe77 	bl	80004d8 <__aeabi_dmul>
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	4629      	mov	r1, r5
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	f7f2 fcb9 	bl	8000168 <__aeabi_dsub>
 800d7f6:	f7f3 f91f 	bl	8000a38 <__aeabi_d2iz>
 800d7fa:	1c74      	adds	r4, r6, #1
 800d7fc:	ab0c      	add	r3, sp, #48	; 0x30
 800d7fe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800d802:	f10b 0b18 	add.w	fp, fp, #24
 800d806:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800d80a:	e730      	b.n	800d66e <__kernel_rem_pio2+0x296>
 800d80c:	4620      	mov	r0, r4
 800d80e:	4629      	mov	r1, r5
 800d810:	f7f3 f912 	bl	8000a38 <__aeabi_d2iz>
 800d814:	ab0c      	add	r3, sp, #48	; 0x30
 800d816:	4634      	mov	r4, r6
 800d818:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800d81c:	e727      	b.n	800d66e <__kernel_rem_pio2+0x296>
 800d81e:	ab0c      	add	r3, sp, #48	; 0x30
 800d820:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800d824:	f7f2 fdee 	bl	8000404 <__aeabi_i2d>
 800d828:	4632      	mov	r2, r6
 800d82a:	463b      	mov	r3, r7
 800d82c:	f7f2 fe54 	bl	80004d8 <__aeabi_dmul>
 800d830:	4642      	mov	r2, r8
 800d832:	e86b 0102 	strd	r0, r1, [fp], #-8
 800d836:	464b      	mov	r3, r9
 800d838:	4630      	mov	r0, r6
 800d83a:	4639      	mov	r1, r7
 800d83c:	f7f2 fe4c 	bl	80004d8 <__aeabi_dmul>
 800d840:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d844:	4606      	mov	r6, r0
 800d846:	460f      	mov	r7, r1
 800d848:	e721      	b.n	800d68e <__kernel_rem_pio2+0x2b6>
 800d84a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800d84e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800d852:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800d856:	f8cd c01c 	str.w	ip, [sp, #28]
 800d85a:	f7f2 fe3d 	bl	80004d8 <__aeabi_dmul>
 800d85e:	4602      	mov	r2, r0
 800d860:	460b      	mov	r3, r1
 800d862:	4650      	mov	r0, sl
 800d864:	4659      	mov	r1, fp
 800d866:	f7f2 fc81 	bl	800016c <__adddf3>
 800d86a:	4682      	mov	sl, r0
 800d86c:	468b      	mov	fp, r1
 800d86e:	f108 0801 	add.w	r8, r8, #1
 800d872:	9b02      	ldr	r3, [sp, #8]
 800d874:	4598      	cmp	r8, r3
 800d876:	dc01      	bgt.n	800d87c <__kernel_rem_pio2+0x4a4>
 800d878:	45b8      	cmp	r8, r7
 800d87a:	dde6      	ble.n	800d84a <__kernel_rem_pio2+0x472>
 800d87c:	ab48      	add	r3, sp, #288	; 0x120
 800d87e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800d882:	e9c7 ab00 	strd	sl, fp, [r7]
 800d886:	3e01      	subs	r6, #1
 800d888:	e706      	b.n	800d698 <__kernel_rem_pio2+0x2c0>
 800d88a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d88c:	2b02      	cmp	r3, #2
 800d88e:	dc09      	bgt.n	800d8a4 <__kernel_rem_pio2+0x4cc>
 800d890:	2b00      	cmp	r3, #0
 800d892:	dc32      	bgt.n	800d8fa <__kernel_rem_pio2+0x522>
 800d894:	d058      	beq.n	800d948 <__kernel_rem_pio2+0x570>
 800d896:	9b04      	ldr	r3, [sp, #16]
 800d898:	f003 0007 	and.w	r0, r3, #7
 800d89c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800d8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a4:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d1f5      	bne.n	800d896 <__kernel_rem_pio2+0x4be>
 800d8aa:	ab48      	add	r3, sp, #288	; 0x120
 800d8ac:	441d      	add	r5, r3
 800d8ae:	46aa      	mov	sl, r5
 800d8b0:	46a3      	mov	fp, r4
 800d8b2:	f1bb 0f00 	cmp.w	fp, #0
 800d8b6:	dc74      	bgt.n	800d9a2 <__kernel_rem_pio2+0x5ca>
 800d8b8:	46aa      	mov	sl, r5
 800d8ba:	46a3      	mov	fp, r4
 800d8bc:	f1bb 0f01 	cmp.w	fp, #1
 800d8c0:	f300 808e 	bgt.w	800d9e0 <__kernel_rem_pio2+0x608>
 800d8c4:	2700      	movs	r7, #0
 800d8c6:	463e      	mov	r6, r7
 800d8c8:	2c01      	cmp	r4, #1
 800d8ca:	f300 80a8 	bgt.w	800da1e <__kernel_rem_pio2+0x646>
 800d8ce:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800d8d2:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800d8d6:	9b00      	ldr	r3, [sp, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f040 80aa 	bne.w	800da32 <__kernel_rem_pio2+0x65a>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	462a      	mov	r2, r5
 800d8e2:	9806      	ldr	r0, [sp, #24]
 800d8e4:	e9c0 2300 	strd	r2, r3, [r0]
 800d8e8:	4622      	mov	r2, r4
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d8f0:	463a      	mov	r2, r7
 800d8f2:	4633      	mov	r3, r6
 800d8f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d8f8:	e7cd      	b.n	800d896 <__kernel_rem_pio2+0x4be>
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	46a0      	mov	r8, r4
 800d8fe:	4601      	mov	r1, r0
 800d900:	ab48      	add	r3, sp, #288	; 0x120
 800d902:	441d      	add	r5, r3
 800d904:	f1b8 0f00 	cmp.w	r8, #0
 800d908:	da38      	bge.n	800d97c <__kernel_rem_pio2+0x5a4>
 800d90a:	9b00      	ldr	r3, [sp, #0]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d03c      	beq.n	800d98a <__kernel_rem_pio2+0x5b2>
 800d910:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800d914:	4602      	mov	r2, r0
 800d916:	462b      	mov	r3, r5
 800d918:	9d06      	ldr	r5, [sp, #24]
 800d91a:	2601      	movs	r6, #1
 800d91c:	e9c5 2300 	strd	r2, r3, [r5]
 800d920:	460b      	mov	r3, r1
 800d922:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800d926:	f7f2 fc1f 	bl	8000168 <__aeabi_dsub>
 800d92a:	4684      	mov	ip, r0
 800d92c:	460f      	mov	r7, r1
 800d92e:	ad48      	add	r5, sp, #288	; 0x120
 800d930:	42b4      	cmp	r4, r6
 800d932:	da2c      	bge.n	800d98e <__kernel_rem_pio2+0x5b6>
 800d934:	9b00      	ldr	r3, [sp, #0]
 800d936:	b10b      	cbz	r3, 800d93c <__kernel_rem_pio2+0x564>
 800d938:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d93c:	4662      	mov	r2, ip
 800d93e:	463b      	mov	r3, r7
 800d940:	9906      	ldr	r1, [sp, #24]
 800d942:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800d946:	e7a6      	b.n	800d896 <__kernel_rem_pio2+0x4be>
 800d948:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800d94a:	ab48      	add	r3, sp, #288	; 0x120
 800d94c:	4637      	mov	r7, r6
 800d94e:	441d      	add	r5, r3
 800d950:	2c00      	cmp	r4, #0
 800d952:	da09      	bge.n	800d968 <__kernel_rem_pio2+0x590>
 800d954:	9b00      	ldr	r3, [sp, #0]
 800d956:	b10b      	cbz	r3, 800d95c <__kernel_rem_pio2+0x584>
 800d958:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800d95c:	4632      	mov	r2, r6
 800d95e:	463b      	mov	r3, r7
 800d960:	9906      	ldr	r1, [sp, #24]
 800d962:	e9c1 2300 	strd	r2, r3, [r1]
 800d966:	e796      	b.n	800d896 <__kernel_rem_pio2+0x4be>
 800d968:	4630      	mov	r0, r6
 800d96a:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f2 fbfc 	bl	800016c <__adddf3>
 800d974:	3c01      	subs	r4, #1
 800d976:	4606      	mov	r6, r0
 800d978:	460f      	mov	r7, r1
 800d97a:	e7e9      	b.n	800d950 <__kernel_rem_pio2+0x578>
 800d97c:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800d980:	f7f2 fbf4 	bl	800016c <__adddf3>
 800d984:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d988:	e7bc      	b.n	800d904 <__kernel_rem_pio2+0x52c>
 800d98a:	460d      	mov	r5, r1
 800d98c:	e7c2      	b.n	800d914 <__kernel_rem_pio2+0x53c>
 800d98e:	4660      	mov	r0, ip
 800d990:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800d994:	4639      	mov	r1, r7
 800d996:	f7f2 fbe9 	bl	800016c <__adddf3>
 800d99a:	3601      	adds	r6, #1
 800d99c:	4684      	mov	ip, r0
 800d99e:	460f      	mov	r7, r1
 800d9a0:	e7c6      	b.n	800d930 <__kernel_rem_pio2+0x558>
 800d9a2:	e9da 6700 	ldrd	r6, r7, [sl]
 800d9a6:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800d9aa:	4632      	mov	r2, r6
 800d9ac:	463b      	mov	r3, r7
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	f7f2 fbdb 	bl	800016c <__adddf3>
 800d9b6:	4602      	mov	r2, r0
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9be:	4640      	mov	r0, r8
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	f7f2 fbd1 	bl	8000168 <__aeabi_dsub>
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	463b      	mov	r3, r7
 800d9ca:	f7f2 fbcf 	bl	800016c <__adddf3>
 800d9ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9d2:	e86a 0102 	strd	r0, r1, [sl], #-8
 800d9d6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800d9da:	e9ca 2300 	strd	r2, r3, [sl]
 800d9de:	e768      	b.n	800d8b2 <__kernel_rem_pio2+0x4da>
 800d9e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800d9e4:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800d9e8:	4642      	mov	r2, r8
 800d9ea:	464b      	mov	r3, r9
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	f7f2 fbbc 	bl	800016c <__adddf3>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	460b      	mov	r3, r1
 800d9f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	4639      	mov	r1, r7
 800da00:	f7f2 fbb2 	bl	8000168 <__aeabi_dsub>
 800da04:	4642      	mov	r2, r8
 800da06:	464b      	mov	r3, r9
 800da08:	f7f2 fbb0 	bl	800016c <__adddf3>
 800da0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da10:	e86a 0102 	strd	r0, r1, [sl], #-8
 800da14:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da18:	e9ca 2300 	strd	r2, r3, [sl]
 800da1c:	e74e      	b.n	800d8bc <__kernel_rem_pio2+0x4e4>
 800da1e:	4638      	mov	r0, r7
 800da20:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800da24:	4631      	mov	r1, r6
 800da26:	f7f2 fba1 	bl	800016c <__adddf3>
 800da2a:	3c01      	subs	r4, #1
 800da2c:	4607      	mov	r7, r0
 800da2e:	460e      	mov	r6, r1
 800da30:	e74a      	b.n	800d8c8 <__kernel_rem_pio2+0x4f0>
 800da32:	9b06      	ldr	r3, [sp, #24]
 800da34:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800da38:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800da3c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800da40:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800da44:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800da48:	601d      	str	r5, [r3, #0]
 800da4a:	615e      	str	r6, [r3, #20]
 800da4c:	e723      	b.n	800d896 <__kernel_rem_pio2+0x4be>
 800da4e:	bf00      	nop
 800da50:	41700000 	.word	0x41700000
 800da54:	3e700000 	.word	0x3e700000

0800da58 <__kernel_cos>:
 800da58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800da60:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800da64:	4680      	mov	r8, r0
 800da66:	460f      	mov	r7, r1
 800da68:	e9cd 2300 	strd	r2, r3, [sp]
 800da6c:	da04      	bge.n	800da78 <__kernel_cos+0x20>
 800da6e:	f7f2 ffe3 	bl	8000a38 <__aeabi_d2iz>
 800da72:	2800      	cmp	r0, #0
 800da74:	f000 8086 	beq.w	800db84 <__kernel_cos+0x12c>
 800da78:	4642      	mov	r2, r8
 800da7a:	463b      	mov	r3, r7
 800da7c:	4640      	mov	r0, r8
 800da7e:	4639      	mov	r1, r7
 800da80:	f7f2 fd2a 	bl	80004d8 <__aeabi_dmul>
 800da84:	2200      	movs	r2, #0
 800da86:	4b4e      	ldr	r3, [pc, #312]	; (800dbc0 <__kernel_cos+0x168>)
 800da88:	4604      	mov	r4, r0
 800da8a:	460d      	mov	r5, r1
 800da8c:	f7f2 fd24 	bl	80004d8 <__aeabi_dmul>
 800da90:	a33f      	add	r3, pc, #252	; (adr r3, 800db90 <__kernel_cos+0x138>)
 800da92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da96:	4682      	mov	sl, r0
 800da98:	468b      	mov	fp, r1
 800da9a:	4620      	mov	r0, r4
 800da9c:	4629      	mov	r1, r5
 800da9e:	f7f2 fd1b 	bl	80004d8 <__aeabi_dmul>
 800daa2:	a33d      	add	r3, pc, #244	; (adr r3, 800db98 <__kernel_cos+0x140>)
 800daa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daa8:	f7f2 fb60 	bl	800016c <__adddf3>
 800daac:	4622      	mov	r2, r4
 800daae:	462b      	mov	r3, r5
 800dab0:	f7f2 fd12 	bl	80004d8 <__aeabi_dmul>
 800dab4:	a33a      	add	r3, pc, #232	; (adr r3, 800dba0 <__kernel_cos+0x148>)
 800dab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daba:	f7f2 fb55 	bl	8000168 <__aeabi_dsub>
 800dabe:	4622      	mov	r2, r4
 800dac0:	462b      	mov	r3, r5
 800dac2:	f7f2 fd09 	bl	80004d8 <__aeabi_dmul>
 800dac6:	a338      	add	r3, pc, #224	; (adr r3, 800dba8 <__kernel_cos+0x150>)
 800dac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dacc:	f7f2 fb4e 	bl	800016c <__adddf3>
 800dad0:	4622      	mov	r2, r4
 800dad2:	462b      	mov	r3, r5
 800dad4:	f7f2 fd00 	bl	80004d8 <__aeabi_dmul>
 800dad8:	a335      	add	r3, pc, #212	; (adr r3, 800dbb0 <__kernel_cos+0x158>)
 800dada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dade:	f7f2 fb43 	bl	8000168 <__aeabi_dsub>
 800dae2:	4622      	mov	r2, r4
 800dae4:	462b      	mov	r3, r5
 800dae6:	f7f2 fcf7 	bl	80004d8 <__aeabi_dmul>
 800daea:	a333      	add	r3, pc, #204	; (adr r3, 800dbb8 <__kernel_cos+0x160>)
 800daec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf0:	f7f2 fb3c 	bl	800016c <__adddf3>
 800daf4:	4622      	mov	r2, r4
 800daf6:	462b      	mov	r3, r5
 800daf8:	f7f2 fcee 	bl	80004d8 <__aeabi_dmul>
 800dafc:	4622      	mov	r2, r4
 800dafe:	462b      	mov	r3, r5
 800db00:	f7f2 fcea 	bl	80004d8 <__aeabi_dmul>
 800db04:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db08:	4604      	mov	r4, r0
 800db0a:	460d      	mov	r5, r1
 800db0c:	4640      	mov	r0, r8
 800db0e:	4639      	mov	r1, r7
 800db10:	f7f2 fce2 	bl	80004d8 <__aeabi_dmul>
 800db14:	460b      	mov	r3, r1
 800db16:	4602      	mov	r2, r0
 800db18:	4629      	mov	r1, r5
 800db1a:	4620      	mov	r0, r4
 800db1c:	f7f2 fb24 	bl	8000168 <__aeabi_dsub>
 800db20:	4b28      	ldr	r3, [pc, #160]	; (800dbc4 <__kernel_cos+0x16c>)
 800db22:	4680      	mov	r8, r0
 800db24:	429e      	cmp	r6, r3
 800db26:	4689      	mov	r9, r1
 800db28:	dc0e      	bgt.n	800db48 <__kernel_cos+0xf0>
 800db2a:	4602      	mov	r2, r0
 800db2c:	460b      	mov	r3, r1
 800db2e:	4650      	mov	r0, sl
 800db30:	4659      	mov	r1, fp
 800db32:	f7f2 fb19 	bl	8000168 <__aeabi_dsub>
 800db36:	4602      	mov	r2, r0
 800db38:	2000      	movs	r0, #0
 800db3a:	460b      	mov	r3, r1
 800db3c:	4922      	ldr	r1, [pc, #136]	; (800dbc8 <__kernel_cos+0x170>)
 800db3e:	f7f2 fb13 	bl	8000168 <__aeabi_dsub>
 800db42:	b003      	add	sp, #12
 800db44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db48:	2400      	movs	r4, #0
 800db4a:	4b20      	ldr	r3, [pc, #128]	; (800dbcc <__kernel_cos+0x174>)
 800db4c:	4622      	mov	r2, r4
 800db4e:	429e      	cmp	r6, r3
 800db50:	bfcc      	ite	gt
 800db52:	4d1f      	ldrgt	r5, [pc, #124]	; (800dbd0 <__kernel_cos+0x178>)
 800db54:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800db58:	462b      	mov	r3, r5
 800db5a:	2000      	movs	r0, #0
 800db5c:	491a      	ldr	r1, [pc, #104]	; (800dbc8 <__kernel_cos+0x170>)
 800db5e:	f7f2 fb03 	bl	8000168 <__aeabi_dsub>
 800db62:	4622      	mov	r2, r4
 800db64:	4606      	mov	r6, r0
 800db66:	460f      	mov	r7, r1
 800db68:	462b      	mov	r3, r5
 800db6a:	4650      	mov	r0, sl
 800db6c:	4659      	mov	r1, fp
 800db6e:	f7f2 fafb 	bl	8000168 <__aeabi_dsub>
 800db72:	4642      	mov	r2, r8
 800db74:	464b      	mov	r3, r9
 800db76:	f7f2 faf7 	bl	8000168 <__aeabi_dsub>
 800db7a:	4602      	mov	r2, r0
 800db7c:	460b      	mov	r3, r1
 800db7e:	4630      	mov	r0, r6
 800db80:	4639      	mov	r1, r7
 800db82:	e7dc      	b.n	800db3e <__kernel_cos+0xe6>
 800db84:	2000      	movs	r0, #0
 800db86:	4910      	ldr	r1, [pc, #64]	; (800dbc8 <__kernel_cos+0x170>)
 800db88:	e7db      	b.n	800db42 <__kernel_cos+0xea>
 800db8a:	bf00      	nop
 800db8c:	f3af 8000 	nop.w
 800db90:	be8838d4 	.word	0xbe8838d4
 800db94:	bda8fae9 	.word	0xbda8fae9
 800db98:	bdb4b1c4 	.word	0xbdb4b1c4
 800db9c:	3e21ee9e 	.word	0x3e21ee9e
 800dba0:	809c52ad 	.word	0x809c52ad
 800dba4:	3e927e4f 	.word	0x3e927e4f
 800dba8:	19cb1590 	.word	0x19cb1590
 800dbac:	3efa01a0 	.word	0x3efa01a0
 800dbb0:	16c15177 	.word	0x16c15177
 800dbb4:	3f56c16c 	.word	0x3f56c16c
 800dbb8:	5555554c 	.word	0x5555554c
 800dbbc:	3fa55555 	.word	0x3fa55555
 800dbc0:	3fe00000 	.word	0x3fe00000
 800dbc4:	3fd33332 	.word	0x3fd33332
 800dbc8:	3ff00000 	.word	0x3ff00000
 800dbcc:	3fe90000 	.word	0x3fe90000
 800dbd0:	3fd20000 	.word	0x3fd20000
 800dbd4:	00000000 	.word	0x00000000

0800dbd8 <__kernel_sin>:
 800dbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	e9cd 2300 	strd	r2, r3, [sp]
 800dbe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbe6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dbea:	4682      	mov	sl, r0
 800dbec:	460c      	mov	r4, r1
 800dbee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dbf0:	da03      	bge.n	800dbfa <__kernel_sin+0x22>
 800dbf2:	f7f2 ff21 	bl	8000a38 <__aeabi_d2iz>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d050      	beq.n	800dc9c <__kernel_sin+0xc4>
 800dbfa:	4652      	mov	r2, sl
 800dbfc:	4623      	mov	r3, r4
 800dbfe:	4650      	mov	r0, sl
 800dc00:	4621      	mov	r1, r4
 800dc02:	f7f2 fc69 	bl	80004d8 <__aeabi_dmul>
 800dc06:	4606      	mov	r6, r0
 800dc08:	460f      	mov	r7, r1
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	4650      	mov	r0, sl
 800dc10:	4621      	mov	r1, r4
 800dc12:	f7f2 fc61 	bl	80004d8 <__aeabi_dmul>
 800dc16:	a33e      	add	r3, pc, #248	; (adr r3, 800dd10 <__kernel_sin+0x138>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	4689      	mov	r9, r1
 800dc20:	4630      	mov	r0, r6
 800dc22:	4639      	mov	r1, r7
 800dc24:	f7f2 fc58 	bl	80004d8 <__aeabi_dmul>
 800dc28:	a33b      	add	r3, pc, #236	; (adr r3, 800dd18 <__kernel_sin+0x140>)
 800dc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc2e:	f7f2 fa9b 	bl	8000168 <__aeabi_dsub>
 800dc32:	4632      	mov	r2, r6
 800dc34:	463b      	mov	r3, r7
 800dc36:	f7f2 fc4f 	bl	80004d8 <__aeabi_dmul>
 800dc3a:	a339      	add	r3, pc, #228	; (adr r3, 800dd20 <__kernel_sin+0x148>)
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	f7f2 fa94 	bl	800016c <__adddf3>
 800dc44:	4632      	mov	r2, r6
 800dc46:	463b      	mov	r3, r7
 800dc48:	f7f2 fc46 	bl	80004d8 <__aeabi_dmul>
 800dc4c:	a336      	add	r3, pc, #216	; (adr r3, 800dd28 <__kernel_sin+0x150>)
 800dc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc52:	f7f2 fa89 	bl	8000168 <__aeabi_dsub>
 800dc56:	4632      	mov	r2, r6
 800dc58:	463b      	mov	r3, r7
 800dc5a:	f7f2 fc3d 	bl	80004d8 <__aeabi_dmul>
 800dc5e:	a334      	add	r3, pc, #208	; (adr r3, 800dd30 <__kernel_sin+0x158>)
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	f7f2 fa82 	bl	800016c <__adddf3>
 800dc68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc6c:	b9dd      	cbnz	r5, 800dca6 <__kernel_sin+0xce>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	460b      	mov	r3, r1
 800dc72:	4630      	mov	r0, r6
 800dc74:	4639      	mov	r1, r7
 800dc76:	f7f2 fc2f 	bl	80004d8 <__aeabi_dmul>
 800dc7a:	a32f      	add	r3, pc, #188	; (adr r3, 800dd38 <__kernel_sin+0x160>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 fa72 	bl	8000168 <__aeabi_dsub>
 800dc84:	4642      	mov	r2, r8
 800dc86:	464b      	mov	r3, r9
 800dc88:	f7f2 fc26 	bl	80004d8 <__aeabi_dmul>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4650      	mov	r0, sl
 800dc92:	4621      	mov	r1, r4
 800dc94:	f7f2 fa6a 	bl	800016c <__adddf3>
 800dc98:	4682      	mov	sl, r0
 800dc9a:	460c      	mov	r4, r1
 800dc9c:	4650      	mov	r0, sl
 800dc9e:	4621      	mov	r1, r4
 800dca0:	b006      	add	sp, #24
 800dca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dca6:	2200      	movs	r2, #0
 800dca8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dcac:	4b24      	ldr	r3, [pc, #144]	; (800dd40 <__kernel_sin+0x168>)
 800dcae:	f7f2 fc13 	bl	80004d8 <__aeabi_dmul>
 800dcb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dcb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dcba:	4640      	mov	r0, r8
 800dcbc:	4649      	mov	r1, r9
 800dcbe:	f7f2 fc0b 	bl	80004d8 <__aeabi_dmul>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dcca:	f7f2 fa4d 	bl	8000168 <__aeabi_dsub>
 800dcce:	4632      	mov	r2, r6
 800dcd0:	463b      	mov	r3, r7
 800dcd2:	f7f2 fc01 	bl	80004d8 <__aeabi_dmul>
 800dcd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcda:	f7f2 fa45 	bl	8000168 <__aeabi_dsub>
 800dcde:	a316      	add	r3, pc, #88	; (adr r3, 800dd38 <__kernel_sin+0x160>)
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	4606      	mov	r6, r0
 800dce6:	460f      	mov	r7, r1
 800dce8:	4640      	mov	r0, r8
 800dcea:	4649      	mov	r1, r9
 800dcec:	f7f2 fbf4 	bl	80004d8 <__aeabi_dmul>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	4639      	mov	r1, r7
 800dcf8:	f7f2 fa38 	bl	800016c <__adddf3>
 800dcfc:	4602      	mov	r2, r0
 800dcfe:	460b      	mov	r3, r1
 800dd00:	4650      	mov	r0, sl
 800dd02:	4621      	mov	r1, r4
 800dd04:	f7f2 fa30 	bl	8000168 <__aeabi_dsub>
 800dd08:	e7c6      	b.n	800dc98 <__kernel_sin+0xc0>
 800dd0a:	bf00      	nop
 800dd0c:	f3af 8000 	nop.w
 800dd10:	5acfd57c 	.word	0x5acfd57c
 800dd14:	3de5d93a 	.word	0x3de5d93a
 800dd18:	8a2b9ceb 	.word	0x8a2b9ceb
 800dd1c:	3e5ae5e6 	.word	0x3e5ae5e6
 800dd20:	57b1fe7d 	.word	0x57b1fe7d
 800dd24:	3ec71de3 	.word	0x3ec71de3
 800dd28:	19c161d5 	.word	0x19c161d5
 800dd2c:	3f2a01a0 	.word	0x3f2a01a0
 800dd30:	1110f8a6 	.word	0x1110f8a6
 800dd34:	3f811111 	.word	0x3f811111
 800dd38:	55555549 	.word	0x55555549
 800dd3c:	3fc55555 	.word	0x3fc55555
 800dd40:	3fe00000 	.word	0x3fe00000

0800dd44 <fabs>:
 800dd44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd48:	4619      	mov	r1, r3
 800dd4a:	4770      	bx	lr
 800dd4c:	0000      	movs	r0, r0
	...

0800dd50 <scalbn>:
 800dd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd52:	4616      	mov	r6, r2
 800dd54:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dd58:	4604      	mov	r4, r0
 800dd5a:	460d      	mov	r5, r1
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	b992      	cbnz	r2, 800dd86 <scalbn+0x36>
 800dd60:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dd64:	4303      	orrs	r3, r0
 800dd66:	d03c      	beq.n	800dde2 <scalbn+0x92>
 800dd68:	4b31      	ldr	r3, [pc, #196]	; (800de30 <scalbn+0xe0>)
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	f7f2 fbb4 	bl	80004d8 <__aeabi_dmul>
 800dd70:	4b30      	ldr	r3, [pc, #192]	; (800de34 <scalbn+0xe4>)
 800dd72:	4604      	mov	r4, r0
 800dd74:	429e      	cmp	r6, r3
 800dd76:	460d      	mov	r5, r1
 800dd78:	da0f      	bge.n	800dd9a <scalbn+0x4a>
 800dd7a:	a329      	add	r3, pc, #164	; (adr r3, 800de20 <scalbn+0xd0>)
 800dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd80:	f7f2 fbaa 	bl	80004d8 <__aeabi_dmul>
 800dd84:	e006      	b.n	800dd94 <scalbn+0x44>
 800dd86:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800dd8a:	42ba      	cmp	r2, r7
 800dd8c:	d109      	bne.n	800dda2 <scalbn+0x52>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	f7f2 f9ec 	bl	800016c <__adddf3>
 800dd94:	4604      	mov	r4, r0
 800dd96:	460d      	mov	r5, r1
 800dd98:	e023      	b.n	800dde2 <scalbn+0x92>
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dda0:	3a36      	subs	r2, #54	; 0x36
 800dda2:	f24c 3150 	movw	r1, #50000	; 0xc350
 800dda6:	428e      	cmp	r6, r1
 800dda8:	dd0e      	ble.n	800ddc8 <scalbn+0x78>
 800ddaa:	a31f      	add	r3, pc, #124	; (adr r3, 800de28 <scalbn+0xd8>)
 800ddac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddb0:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ddb4:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800ddb8:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800ddbc:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800ddc0:	481d      	ldr	r0, [pc, #116]	; (800de38 <scalbn+0xe8>)
 800ddc2:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800ddc6:	e7db      	b.n	800dd80 <scalbn+0x30>
 800ddc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ddcc:	4432      	add	r2, r6
 800ddce:	428a      	cmp	r2, r1
 800ddd0:	dceb      	bgt.n	800ddaa <scalbn+0x5a>
 800ddd2:	2a00      	cmp	r2, #0
 800ddd4:	dd08      	ble.n	800dde8 <scalbn+0x98>
 800ddd6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ddda:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ddde:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dde2:	4620      	mov	r0, r4
 800dde4:	4629      	mov	r1, r5
 800dde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ddec:	da0c      	bge.n	800de08 <scalbn+0xb8>
 800ddee:	a30c      	add	r3, pc, #48	; (adr r3, 800de20 <scalbn+0xd0>)
 800ddf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800ddf8:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800ddfc:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800de00:	480e      	ldr	r0, [pc, #56]	; (800de3c <scalbn+0xec>)
 800de02:	f041 011f 	orr.w	r1, r1, #31
 800de06:	e7bb      	b.n	800dd80 <scalbn+0x30>
 800de08:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800de0c:	3236      	adds	r2, #54	; 0x36
 800de0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800de12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800de16:	4620      	mov	r0, r4
 800de18:	4629      	mov	r1, r5
 800de1a:	2200      	movs	r2, #0
 800de1c:	4b08      	ldr	r3, [pc, #32]	; (800de40 <scalbn+0xf0>)
 800de1e:	e7af      	b.n	800dd80 <scalbn+0x30>
 800de20:	c2f8f359 	.word	0xc2f8f359
 800de24:	01a56e1f 	.word	0x01a56e1f
 800de28:	8800759c 	.word	0x8800759c
 800de2c:	7e37e43c 	.word	0x7e37e43c
 800de30:	43500000 	.word	0x43500000
 800de34:	ffff3cb0 	.word	0xffff3cb0
 800de38:	8800759c 	.word	0x8800759c
 800de3c:	c2f8f359 	.word	0xc2f8f359
 800de40:	3c900000 	.word	0x3c900000

0800de44 <_init>:
 800de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de46:	bf00      	nop
 800de48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4a:	bc08      	pop	{r3}
 800de4c:	469e      	mov	lr, r3
 800de4e:	4770      	bx	lr

0800de50 <_fini>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr
